{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/xray-migration/commands_windows.go"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\treturn strings.Contains(string(output), \"RUNNING\")\n}\nfunc checkXrayStatus() bool {\n\tcmd := exec.Command(\"sc\", \"query\", \"xray\")\n\tout, err := cmd.Output()\n\tif err != nil {\n\t\treturn false\n",
                    "rendered": {
                      "text": "\treturn strings.Contains(string(output), \"RUNNING\")\n}\nfunc checkXrayStatus() bool {\n\tcmd := exec.Command(\"sc\", \"query\", \"xray\")\n\tout, err := cmd.Output()\n\tif err != nil {\n\t\treturn false\n",
                      "markdown": "`\treturn strings.Contains(string(output), \"RUNNING\")\n}\nfunc checkXrayStatus() bool {\n\tcmd := exec.Command(\"sc\", \"query\", \"xray\")\n\tout, err := cmd.Output()\n\tif err != nil {\n\t\treturn false\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/xray-migration/commands_windows.go"
                },
                "region": {
                  "startLine": 62,
                  "endLine": 62,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n// check if amazon-cloudwatch-agent is active\nfunc checkCWAStatus() bool {\n\tcmd := exec.Command(\"sc\", \"query\", \"amazon-cloudwatch-agent\")\n\toutput, err := cmd.Output()\n\tif err != nil {\n\t\treturn false\n",
                    "rendered": {
                      "text": "\n// check if amazon-cloudwatch-agent is active\nfunc checkCWAStatus() bool {\n\tcmd := exec.Command(\"sc\", \"query\", \"amazon-cloudwatch-agent\")\n\toutput, err := cmd.Output()\n\tif err != nil {\n\t\treturn false\n",
                      "markdown": "`\n// check if amazon-cloudwatch-agent is active\nfunc checkCWAStatus() bool {\n\tcmd := exec.Command(\"sc\", \"query\", \"amazon-cloudwatch-agent\")\n\toutput, err := cmd.Output()\n\tif err != nil {\n\t\treturn false\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/xray-migration/commands_windows.go"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 42,
                  "endColumn": 5,
                  "snippet": {
                    "text": "// appending traces config\nfunc AppendConfig() error {\n\t//Not sure if this the right permissions.\n\tcmd := execCommand(\"&\", filepath.Join(\"C:\\\\Program Files\\\\Amazon\\\\AmazonCloudWatchAgent\", paths.AgentStartName), \"-a\", \"append-config\", \"-m\", \"auto\", \"-s\", \"-c\", \"file:\"+filepath.Join(pathToWizardDir, \"configFileTraces.json\")) //file location needs to be dir of wizard + config.json\n\tcmd.SetStdout(os.Stdout)\n\tcmd.SetStderr(os.Stderr)\n\terr := cmd.Start()\n",
                    "rendered": {
                      "text": "// appending traces config\nfunc AppendConfig() error {\n\t//Not sure if this the right permissions.\n\tcmd := execCommand(\"&\", filepath.Join(\"C:\\\\Program Files\\\\Amazon\\\\AmazonCloudWatchAgent\", paths.AgentStartName), \"-a\", \"append-config\", \"-m\", \"auto\", \"-s\", \"-c\", \"file:\"+filepath.Join(pathToWizardDir, \"configFileTraces.json\")) //file location needs to be dir of wizard + config.json\n\tcmd.SetStdout(os.Stdout)\n\tcmd.SetStderr(os.Stderr)\n\terr := cmd.Start()\n",
                      "markdown": "`// appending traces config\nfunc AppendConfig() error {\n\t//Not sure if this the right permissions.\n\tcmd := execCommand(\"&\", filepath.Join(\"C:\\\\Program Files\\\\Amazon\\\\AmazonCloudWatchAgent\", paths.AgentStartName), \"-a\", \"append-config\", \"-m\", \"auto\", \"-s\", \"-c\", \"file:\"+filepath.Join(pathToWizardDir, \"configFileTraces.json\")) //file location needs to be dir of wizard + config.json\n\tcmd.SetStdout(os.Stdout)\n\tcmd.SetStderr(os.Stderr)\n\terr := cmd.Start()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/xray-migration/commands_windows.go"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31,
                  "endColumn": 5,
                  "snippet": {
                    "text": "}\nfunc FetchConfig() error {\n\t//Start cloudwatch with config built or user given\n\tcmd := execCommand(\"&\", filepath.Join(\"C:\\\\Program Files\\\\Amazon\\\\AmazonCloudWatchAgent\", paths.AgentStartName), \"-a\", \"fetch-config\", \"-m\", \"auto\", \"-s\", \"-c\", \"file:\"+defaultConfigLocation) //file location needs to be dir of wizard + config.json\n\tcmd.SetStdout(os.Stdout)\n\tcmd.SetStderr(os.Stderr)\n\terr := cmd.Start()\n",
                    "rendered": {
                      "text": "}\nfunc FetchConfig() error {\n\t//Start cloudwatch with config built or user given\n\tcmd := execCommand(\"&\", filepath.Join(\"C:\\\\Program Files\\\\Amazon\\\\AmazonCloudWatchAgent\", paths.AgentStartName), \"-a\", \"fetch-config\", \"-m\", \"auto\", \"-s\", \"-c\", \"file:\"+defaultConfigLocation) //file location needs to be dir of wizard + config.json\n\tcmd.SetStdout(os.Stdout)\n\tcmd.SetStderr(os.Stderr)\n\terr := cmd.Start()\n",
                      "markdown": "`}\nfunc FetchConfig() error {\n\t//Start cloudwatch with config built or user given\n\tcmd := execCommand(\"&\", filepath.Join(\"C:\\\\Program Files\\\\Amazon\\\\AmazonCloudWatchAgent\", paths.AgentStartName), \"-a\", \"fetch-config\", \"-m\", \"auto\", \"-s\", \"-c\", \"file:\"+defaultConfigLocation) //file location needs to be dir of wizard + config.json\n\tcmd.SetStdout(os.Stdout)\n\tcmd.SetStderr(os.Stderr)\n\terr := cmd.Start()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/xray-migration/commands_windows.go"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 29,
                  "endLine": 56,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t\tfmt.Println(\"There was an error: with stopping xray service\", err)\n\t\treturn err\n\t}\n\tfmt.Println(\"AWS Xray daemon service stopped\")\n\treturn nil\n}\n\n",
                    "rendered": {
                      "text": "\t\tfmt.Println(\"There was an error: with stopping xray service\", err)\n\t\treturn err\n\t}\n\tfmt.Println(\"AWS Xray daemon service stopped\")\n\treturn nil\n}\n\n",
                      "markdown": "`\t\tfmt.Println(\"There was an error: with stopping xray service\", err)\n\t\treturn err\n\t}\n\tfmt.Println(\"AWS Xray daemon service stopped\")\n\treturn nil\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/xray-migration/commands_unix.go"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 29,
                  "endLine": 57,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t\treturn err\n\t}\n\n\tfmt.Println(\"AWS Xray daemon service stopped\")\n\treturn nil\n}\n\n",
                    "rendered": {
                      "text": "\t\treturn err\n\t}\n\n\tfmt.Println(\"AWS Xray daemon service stopped\")\n\treturn nil\n}\n\n",
                      "markdown": "`\t\treturn err\n\t}\n\n\tfmt.Println(\"AWS Xray daemon service stopped\")\n\treturn nil\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/xray-migration/commands_unix.go"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 73,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n// check if xray is active as a service\nfunc checkXrayStatus() bool {\n\tcmd := exec.Command(\"sudo\", \"systemctl\", \"is-active\", \"xray\") //returns either active or inactive\n\tout, err := cmd.Output()\n\tif err != nil {\n\t\treturn false\n",
                    "rendered": {
                      "text": "\n// check if xray is active as a service\nfunc checkXrayStatus() bool {\n\tcmd := exec.Command(\"sudo\", \"systemctl\", \"is-active\", \"xray\") //returns either active or inactive\n\tout, err := cmd.Output()\n\tif err != nil {\n\t\treturn false\n",
                      "markdown": "`\n// check if xray is active as a service\nfunc checkXrayStatus() bool {\n\tcmd := exec.Command(\"sudo\", \"systemctl\", \"is-active\", \"xray\") //returns either active or inactive\n\tout, err := cmd.Output()\n\tif err != nil {\n\t\treturn false\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/xray-migration/commands_unix.go"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 63,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n// check if amazon-cloudwatch-agent is active\nfunc checkCWAStatus() bool {\n\tcmd := exec.Command(\"sudo\", \"systemctl\", \"is-active\", \"amazon-cloudwatch-agent\") //returns either active or inactive\n\tout, err := cmd.Output()\n\tif err != nil {\n\t\treturn false\n",
                    "rendered": {
                      "text": "\n// check if amazon-cloudwatch-agent is active\nfunc checkCWAStatus() bool {\n\tcmd := exec.Command(\"sudo\", \"systemctl\", \"is-active\", \"amazon-cloudwatch-agent\") //returns either active or inactive\n\tout, err := cmd.Output()\n\tif err != nil {\n\t\treturn false\n",
                      "markdown": "`\n// check if amazon-cloudwatch-agent is active\nfunc checkCWAStatus() bool {\n\tcmd := exec.Command(\"sudo\", \"systemctl\", \"is-active\", \"amazon-cloudwatch-agent\") //returns either active or inactive\n\tout, err := cmd.Output()\n\tif err != nil {\n\t\treturn false\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/xray-migration/commands_unix.go"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 42,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n// appending traces config\nfunc AppendConfig() error {\n\tcmd := execCommand(\"sudo\", filepath.Join(paths.AgentDir, paths.BinaryDir, paths.AgentStartName), \"-a\", \"append-config\", \"-m\", \"auto\", \"-s\", \"-c\", \"file:\"+filepath.Join(pathToWizardDir, \"config-traces.json\")) //should change traces location to wizard dir\n\tcmd.SetStdout(os.Stdout)\n\tcmd.SetStderr(os.Stderr)\n\terr := cmd.Start()\n",
                    "rendered": {
                      "text": "\n// appending traces config\nfunc AppendConfig() error {\n\tcmd := execCommand(\"sudo\", filepath.Join(paths.AgentDir, paths.BinaryDir, paths.AgentStartName), \"-a\", \"append-config\", \"-m\", \"auto\", \"-s\", \"-c\", \"file:\"+filepath.Join(pathToWizardDir, \"config-traces.json\")) //should change traces location to wizard dir\n\tcmd.SetStdout(os.Stdout)\n\tcmd.SetStderr(os.Stderr)\n\terr := cmd.Start()\n",
                      "markdown": "`\n// appending traces config\nfunc AppendConfig() error {\n\tcmd := execCommand(\"sudo\", filepath.Join(paths.AgentDir, paths.BinaryDir, paths.AgentStartName), \"-a\", \"append-config\", \"-m\", \"auto\", \"-s\", \"-c\", \"file:\"+filepath.Join(pathToWizardDir, \"config-traces.json\")) //should change traces location to wizard dir\n\tcmd.SetStdout(os.Stdout)\n\tcmd.SetStderr(os.Stderr)\n\terr := cmd.Start()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/xray-migration/commands_unix.go"
                },
                "region": {
                  "startLine": 33,
                  "endLine": 33,
                  "endColumn": 5,
                  "snippet": {
                    "text": "}\nfunc FetchConfig() error {\n\t//Start cloudwatch with config built or user given\n\tcmd := execCommand(\"sudo\", filepath.Join(paths.AgentDir, paths.BinaryDir, paths.AgentStartName), \"-a\", \"fetch-config\", \"-m\", \"auto\", \"-s\", \"-c\", \"file:\"+defaultConfigLocation) //file location needs to be dir of wizard + config.json\n\tcmd.SetStdout(os.Stdout)\n\tcmd.SetStderr(os.Stderr)\n\terr := cmd.Start()\n",
                    "rendered": {
                      "text": "}\nfunc FetchConfig() error {\n\t//Start cloudwatch with config built or user given\n\tcmd := execCommand(\"sudo\", filepath.Join(paths.AgentDir, paths.BinaryDir, paths.AgentStartName), \"-a\", \"fetch-config\", \"-m\", \"auto\", \"-s\", \"-c\", \"file:\"+defaultConfigLocation) //file location needs to be dir of wizard + config.json\n\tcmd.SetStdout(os.Stdout)\n\tcmd.SetStderr(os.Stderr)\n\terr := cmd.Start()\n",
                      "markdown": "`}\nfunc FetchConfig() error {\n\t//Start cloudwatch with config built or user given\n\tcmd := execCommand(\"sudo\", filepath.Join(paths.AgentDir, paths.BinaryDir, paths.AgentStartName), \"-a\", \"fetch-config\", \"-m\", \"auto\", \"-s\", \"-c\", \"file:\"+defaultConfigLocation) //file location needs to be dir of wizard + config.json\n\tcmd.SetStdout(os.Stdout)\n\tcmd.SetStderr(os.Stderr)\n\terr := cmd.Start()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/xray-migration/xray-migration.go"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 28,
                  "endLine": 185,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tstartTime := time.Now()\n\t//Check for duration of timeout\n\tfor {\n\t\tif time.Since(startTime) > timeout {\n\t\t\treturn false\n\t\t}\n\t\tif checkCWAStatus() {\n",
                    "rendered": {
                      "text": "\tstartTime := time.Now()\n\t//Check for duration of timeout\n\tfor {\n\t\tif time.Since(startTime) > timeout {\n\t\t\treturn false\n\t\t}\n\t\tif checkCWAStatus() {\n",
                      "markdown": "`\tstartTime := time.Now()\n\t//Check for duration of timeout\n\tfor {\n\t\tif time.Since(startTime) > timeout {\n\t\t\treturn false\n\t\t}\n\t\tif checkCWAStatus() {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/xray-migration/xray-migration.go"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 24,
                  "endLine": 184,
                  "snippet": {
                    "text": "\nfunc IsCWAOn(timeout time.Duration, checkCWAStatus func() bool) bool {\n\tstartTime := time.Now()\n\t//Check for duration of timeout\n\tfor {\n\t\tif time.Since(startTime) > timeout {\n\t\t\treturn false\n\t\t}\n",
                    "rendered": {
                      "text": "\nfunc IsCWAOn(timeout time.Duration, checkCWAStatus func() bool) bool {\n\tstartTime := time.Now()\n\t//Check for duration of timeout\n\tfor {\n\t\tif time.Since(startTime) > timeout {\n\t\t\treturn false\n\t\t}\n",
                      "markdown": "`\nfunc IsCWAOn(timeout time.Duration, checkCWAStatus func() bool) bool {\n\tstartTime := time.Now()\n\t//Check for duration of timeout\n\tfor {\n\t\tif time.Since(startTime) > timeout {\n\t\t\treturn false\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/xray-migration/xray-migration.go"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 88,
                  "endLine": 78,
                  "endColumn": 97,
                  "snippet": {
                    "text": "\t} else {\n\t\terr = AppendConfig()\n\t}\n\t//need to restart Daemon if Fetch/Append does not work or CWA does not start within the timeout duration\n\tif err != nil || !IsCWAOn(time.Duration(timeOut)*time.Second, checkCWAStatus) {\n\t\tfmt.Println(\"There was a problem starting the Cloudwatch Agent. Restarting X-Ray Daemon\")\n\t\terr := restartDaemon(argList[0], argList[1:], cwd, isService)\n",
                    "rendered": {
                      "text": "\t} else {\n\t\terr = AppendConfig()\n\t}\n\t//need to restart Daemon if Fetch/Append does not work or CWA does not start within the timeout duration\n\tif err != nil || !IsCWAOn(time.Duration(timeOut)*time.Second, checkCWAStatus) {\n\t\tfmt.Println(\"There was a problem starting the Cloudwatch Agent. Restarting X-Ray Daemon\")\n\t\terr := restartDaemon(argList[0], argList[1:], cwd, isService)\n",
                      "markdown": "`\t} else {\n\t\terr = AppendConfig()\n\t}\n\t//need to restart Daemon if Fetch/Append does not work or CWA does not start within the timeout duration\n\tif err != nil || !IsCWAOn(time.Duration(timeOut)*time.Second, checkCWAStatus) {\n\t\tfmt.Println(\"There was a problem starting the Cloudwatch Agent. Restarting X-Ray Daemon\")\n\t\terr := restartDaemon(argList[0], argList[1:], cwd, isService)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/xray-migration/xray-migration.go"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 4,
                  "endLine": 44,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\t\t\tfmt.Println(\"Input given is not a number\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t\tif timeOut == 0 {\n\t\t\tos.Exit(1)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\t\t\tfmt.Println(\"Input given is not a number\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t\tif timeOut == 0 {\n\t\t\tos.Exit(1)\n\t\t}\n\t}\n",
                      "markdown": "`\t\t\tfmt.Println(\"Input given is not a number\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t\tif timeOut == 0 {\n\t\t\tos.Exit(1)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/xray-migration/xray-migration.go"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 2,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\tif *downTime < 2 {\n\t\t\ttimeOut = 2\n\t\t} else {\n\t\t\ttimeOut = *downTime\n\t\t}\n\t} else {\n\t\ttimeOut, err = strconv.Atoi(userInput)\n",
                    "rendered": {
                      "text": "\t\tif *downTime < 2 {\n\t\t\ttimeOut = 2\n\t\t} else {\n\t\t\ttimeOut = *downTime\n\t\t}\n\t} else {\n\t\ttimeOut, err = strconv.Atoi(userInput)\n",
                      "markdown": "`\t\tif *downTime < 2 {\n\t\t\ttimeOut = 2\n\t\t} else {\n\t\t\ttimeOut = *downTime\n\t\t}\n\t} else {\n\t\ttimeOut, err = strconv.Atoi(userInput)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/xray-migration/xray-migration.go"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 2,
                  "endLine": 34,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\tif userInput == \"\" {\n\t\t//make sure downtime is at least 2 seconds\n\t\tif *downTime < 2 {\n\t\t\ttimeOut = 2\n\t\t} else {\n\t\t\ttimeOut = *downTime\n\t\t}\n",
                    "rendered": {
                      "text": "\tif userInput == \"\" {\n\t\t//make sure downtime is at least 2 seconds\n\t\tif *downTime < 2 {\n\t\t\ttimeOut = 2\n\t\t} else {\n\t\t\ttimeOut = *downTime\n\t\t}\n",
                      "markdown": "`\tif userInput == \"\" {\n\t\t//make sure downtime is at least 2 seconds\n\t\tif *downTime < 2 {\n\t\t\ttimeOut = 2\n\t\t} else {\n\t\t\ttimeOut = *downTime\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/xray-migration/xray-migration.go"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 4,
                  "endLine": 28,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tvar userInput string\n\tfmt.Println(\"Enter 0 to cancel and exit, or enter a different number of seconds to wait for the CloudWatch agent to start (minimum of 2 seconds). Any trace data generated while waiting for the CloudWatch agent to start is lost.\")\n\tfmt.Scanln(&userInput)\n\tvar timeOut int\n\tvar err error\n\t//assigning timeout duration\n\tif userInput == \"\" {\n",
                    "rendered": {
                      "text": "\tvar userInput string\n\tfmt.Println(\"Enter 0 to cancel and exit, or enter a different number of seconds to wait for the CloudWatch agent to start (minimum of 2 seconds). Any trace data generated while waiting for the CloudWatch agent to start is lost.\")\n\tfmt.Scanln(&userInput)\n\tvar timeOut int\n\tvar err error\n\t//assigning timeout duration\n\tif userInput == \"\" {\n",
                      "markdown": "`\tvar userInput string\n\tfmt.Println(\"Enter 0 to cancel and exit, or enter a different number of seconds to wait for the CloudWatch agent to start (minimum of 2 seconds). Any trace data generated while waiting for the CloudWatch agent to start is lost.\")\n\tfmt.Scanln(&userInput)\n\tvar timeOut int\n\tvar err error\n\t//assigning timeout duration\n\tif userInput == \"\" {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/xray-migration/xray-migration.go"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 173,
                  "endLine": 24,
                  "endColumn": 179,
                  "snippet": {
                    "text": "downTime\", 5, \"Set Daemon restart delay on CloudWatch failure. Note: trace data in this interval might be lost\")\n\tflag.Parse()\n\tfmt.Printf(\"If the Cloudwatch agent doesn’t start within %v seconds, the X-ray daemon will restart. While the CloudWatch agent is starting, trace data generated during that time is lost.\\n\", *downTime)\n\tvar userInput string\n\tfmt.Println(\"Enter 0 to cancel and exit, or enter a different number of seconds to wait for the CloudWatch agent to start (minimum of 2 seconds). Any trace data generated while waiting for the CloudWatch agent to start is lost.\")\n\tfmt.Scanln(&userInput)",
                    "rendered": {
                      "text": "downTime\", 5, \"Set Daemon restart delay on CloudWatch failure. Note: trace data in this interval might be lost\")\n\tflag.Parse()\n\tfmt.Printf(\"If the Cloudwatch agent doesn’t start within %v seconds, the X-ray daemon will restart. While the CloudWatch agent is starting, trace data generated during that time is lost.\\n\", *downTime)\n\tvar userInput string\n\tfmt.Println(\"Enter 0 to cancel and exit, or enter a different number of seconds to wait for the CloudWatch agent to start (minimum of 2 seconds). Any trace data generated while waiting for the CloudWatch agent to start is lost.\")\n\tfmt.Scanln(&userInput)",
                      "markdown": "`downTime\", 5, \"Set Daemon restart delay on CloudWatch failure. Note: trace data in this interval might be lost\")\n\tflag.Parse()\n\tfmt.Printf(\"If the Cloudwatch agent doesn’t start within %v seconds, the X-ray daemon will restart. While the CloudWatch agent is starting, trace data generated during that time is lost.\\n\", *downTime)\n\tvar userInput string\n\tfmt.Println(\"Enter 0 to cancel and exit, or enter a different number of seconds to wait for the CloudWatch agent to start (minimum of 2 seconds). Any trace data generated while waiting for the CloudWatch agent to start is lost.\")\n\tfmt.Scanln(&userInput)`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/xray-migration/xray-migration.go"
                },
                "region": {
                  "startLine": 212,
                  "endLine": 212,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\t\treturn err\n\t}\n\n\tcmd := execCommand(daemonPath, daemonArgs...)\n\tcmd.SetDir(cwd)\n\tcmd.SetSysProcAttr(newSysProcAttr())\n\tcmd.SetStdout(os.Stdout)\n",
                    "rendered": {
                      "text": "\t\treturn err\n\t}\n\n\tcmd := execCommand(daemonPath, daemonArgs...)\n\tcmd.SetDir(cwd)\n\tcmd.SetSysProcAttr(newSysProcAttr())\n\tcmd.SetStdout(os.Stdout)\n",
                      "markdown": "`\t\treturn err\n\t}\n\n\tcmd := execCommand(daemonPath, daemonArgs...)\n\tcmd.SetDir(cwd)\n\tcmd.SetSysProcAttr(newSysProcAttr())\n\tcmd.SetStdout(os.Stdout)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/xray-migration/xray-migration.go"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 2,
                  "endLine": 203,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\t\tif curOs == \"windows\" {\n\t\t\tcmd = execCommand(\"net\", \"start\", \"XRay\")\n\t\t} else {\n\t\t\tcmd = execCommand(\"sudo\", \"systemctl\", \"start\", \"xray\")\n\t\t}\n\t\tcmd.SetSysProcAttr(newSysProcAttr())\n\t\tcmd.SetStdout(os.Stdout)\n",
                    "rendered": {
                      "text": "\t\tif curOs == \"windows\" {\n\t\t\tcmd = execCommand(\"net\", \"start\", \"XRay\")\n\t\t} else {\n\t\t\tcmd = execCommand(\"sudo\", \"systemctl\", \"start\", \"xray\")\n\t\t}\n\t\tcmd.SetSysProcAttr(newSysProcAttr())\n\t\tcmd.SetStdout(os.Stdout)\n",
                      "markdown": "`\t\tif curOs == \"windows\" {\n\t\t\tcmd = execCommand(\"net\", \"start\", \"XRay\")\n\t\t} else {\n\t\t\tcmd = execCommand(\"sudo\", \"systemctl\", \"start\", \"xray\")\n\t\t}\n\t\tcmd.SetSysProcAttr(newSysProcAttr())\n\t\tcmd.SetStdout(os.Stdout)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/xray-migration/xray-migration.go"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 2,
                  "endLine": 201,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\t\tvar cmd CmdInterface\n\t\tcurOs := util.CurOS()\n\t\tif curOs == \"windows\" {\n\t\t\tcmd = execCommand(\"net\", \"start\", \"XRay\")\n\t\t} else {\n\t\t\tcmd = execCommand(\"sudo\", \"systemctl\", \"start\", \"xray\")\n\t\t}\n",
                    "rendered": {
                      "text": "\t\tvar cmd CmdInterface\n\t\tcurOs := util.CurOS()\n\t\tif curOs == \"windows\" {\n\t\t\tcmd = execCommand(\"net\", \"start\", \"XRay\")\n\t\t} else {\n\t\t\tcmd = execCommand(\"sudo\", \"systemctl\", \"start\", \"xray\")\n\t\t}\n",
                      "markdown": "`\t\tvar cmd CmdInterface\n\t\tcurOs := util.CurOS()\n\t\tif curOs == \"windows\" {\n\t\t\tcmd = execCommand(\"net\", \"start\", \"XRay\")\n\t\t} else {\n\t\t\tcmd = execCommand(\"sudo\", \"systemctl\", \"start\", \"xray\")\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/xray-migration/xray-migration.go"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 5,
                  "endLine": 198,
                  "endColumn": 10,
                  "snippet": {
                    "text": "func restartDaemon(daemonPath string, daemonArgs []string, cwd string, isService bool) error {\n\tvar err error\n\tif isService {\n\t\tvar cmd CmdInterface\n\t\tcurOs := util.CurOS()\n\t\tif curOs == \"windows\" {\n\t\t\tcmd = execCommand(\"net\", \"start\", \"XRay\")\n",
                    "rendered": {
                      "text": "func restartDaemon(daemonPath string, daemonArgs []string, cwd string, isService bool) error {\n\tvar err error\n\tif isService {\n\t\tvar cmd CmdInterface\n\t\tcurOs := util.CurOS()\n\t\tif curOs == \"windows\" {\n\t\t\tcmd = execCommand(\"net\", \"start\", \"XRay\")\n",
                      "markdown": "`func restartDaemon(daemonPath string, daemonArgs []string, cwd string, isService bool) error {\n\tvar err error\n\tif isService {\n\t\tvar cmd CmdInterface\n\t\tcurOs := util.CurOS()\n\t\tif curOs == \"windows\" {\n\t\t\tcmd = execCommand(\"net\", \"start\", \"XRay\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/xray-migration/xray-migration.go"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 1,
                  "endLine": 146,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t\t//need to save generated traces file in a different file\n\t\tcmd = exec.Command(pathToWizard, \"-tracesOnly\", \"-configOutputPath\", filepath.Join(pathToWizardDir, \"config-traces.json\"), \"-nonInteractiveXrayMigration\", \"true\")\n\t} else {\n\t\tcmd = exec.Command(pathToWizard, \"-tracesOnly\", \"-nonInteractiveXrayMigration\", \"true\")\n\t}\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n",
                    "rendered": {
                      "text": "\t\t//need to save generated traces file in a different file\n\t\tcmd = exec.Command(pathToWizard, \"-tracesOnly\", \"-configOutputPath\", filepath.Join(pathToWizardDir, \"config-traces.json\"), \"-nonInteractiveXrayMigration\", \"true\")\n\t} else {\n\t\tcmd = exec.Command(pathToWizard, \"-tracesOnly\", \"-nonInteractiveXrayMigration\", \"true\")\n\t}\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n",
                      "markdown": "`\t\t//need to save generated traces file in a different file\n\t\tcmd = exec.Command(pathToWizard, \"-tracesOnly\", \"-configOutputPath\", filepath.Join(pathToWizardDir, \"config-traces.json\"), \"-nonInteractiveXrayMigration\", \"true\")\n\t} else {\n\t\tcmd = exec.Command(pathToWizard, \"-tracesOnly\", \"-nonInteractiveXrayMigration\", \"true\")\n\t}\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/xray-migration/xray-migration.go"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 1,
                  "endLine": 144,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tvar cmd *exec.Cmd\n\tif fetchOrAppend == Append {\n\t\t//need to save generated traces file in a different file\n\t\tcmd = exec.Command(pathToWizard, \"-tracesOnly\", \"-configOutputPath\", filepath.Join(pathToWizardDir, \"config-traces.json\"), \"-nonInteractiveXrayMigration\", \"true\")\n\t} else {\n\t\tcmd = exec.Command(pathToWizard, \"-tracesOnly\", \"-nonInteractiveXrayMigration\", \"true\")\n\t}\n",
                    "rendered": {
                      "text": "\tvar cmd *exec.Cmd\n\tif fetchOrAppend == Append {\n\t\t//need to save generated traces file in a different file\n\t\tcmd = exec.Command(pathToWizard, \"-tracesOnly\", \"-configOutputPath\", filepath.Join(pathToWizardDir, \"config-traces.json\"), \"-nonInteractiveXrayMigration\", \"true\")\n\t} else {\n\t\tcmd = exec.Command(pathToWizard, \"-tracesOnly\", \"-nonInteractiveXrayMigration\", \"true\")\n\t}\n",
                      "markdown": "`\tvar cmd *exec.Cmd\n\tif fetchOrAppend == Append {\n\t\t//need to save generated traces file in a different file\n\t\tcmd = exec.Command(pathToWizard, \"-tracesOnly\", \"-configOutputPath\", filepath.Join(pathToWizardDir, \"config-traces.json\"), \"-nonInteractiveXrayMigration\", \"true\")\n\t} else {\n\t\tcmd = exec.Command(pathToWizard, \"-tracesOnly\", \"-nonInteractiveXrayMigration\", \"true\")\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/xray-migration/xray-migration.go"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 4,
                  "endLine": 141,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nfunc RunWizard(fetchOrAppend startType) error {\n\tvar err error\n\tvar cmd *exec.Cmd\n\tif fetchOrAppend == Append {\n\t\t//need to save generated traces file in a different file\n\t\tcmd = exec.Command(pathToWizard, \"-tracesOnly\", \"-configOutputPath\", filepath.Join(pathToWizardDir, \"config-traces.json\"), \"-nonInteractiveXrayMigration\", \"true\")\n",
                    "rendered": {
                      "text": "\nfunc RunWizard(fetchOrAppend startType) error {\n\tvar err error\n\tvar cmd *exec.Cmd\n\tif fetchOrAppend == Append {\n\t\t//need to save generated traces file in a different file\n\t\tcmd = exec.Command(pathToWizard, \"-tracesOnly\", \"-configOutputPath\", filepath.Join(pathToWizardDir, \"config-traces.json\"), \"-nonInteractiveXrayMigration\", \"true\")\n",
                      "markdown": "`\nfunc RunWizard(fetchOrAppend startType) error {\n\tvar err error\n\tvar cmd *exec.Cmd\n\tif fetchOrAppend == Append {\n\t\t//need to save generated traces file in a different file\n\t\tcmd = exec.Command(pathToWizard, \"-tracesOnly\", \"-configOutputPath\", filepath.Join(pathToWizardDir, \"config-traces.json\"), \"-nonInteractiveXrayMigration\", \"true\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/xray-migration/xray-migration.go"
                },
                "region": {
                  "startLine": 133,
                  "endLine": 133,
                  "endColumn": 5,
                  "snippet": {
                    "text": "}\n\nvar execCommand = func(name string, args ...string) CmdInterface {\n\tcmd := exec.Command(name, args...)\n\treturn &CmdWrapper{\n\t\tCmd: cmd,\n\t}\n",
                    "rendered": {
                      "text": "}\n\nvar execCommand = func(name string, args ...string) CmdInterface {\n\tcmd := exec.Command(name, args...)\n\treturn &CmdWrapper{\n\t\tCmd: cmd,\n\t}\n",
                      "markdown": "`}\n\nvar execCommand = func(name string, args ...string) CmdInterface {\n\tcmd := exec.Command(name, args...)\n\treturn &CmdWrapper{\n\t\tCmd: cmd,\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/start-amazon-cloudwatch-agent/path.go"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 4,
                  "endLine": 26,
                  "endColumn": 26,
                  "snippet": {
                    "text": ")\n\nfunc startAgent(writer io.WriteCloser) error {\n\tif envconfig.IsRunningInContainer() {\n\t\t// Use exec so PID 1 changes to agent from start-agent.\n\t\texecArgs := []string{\n\t\t\tpaths.AgentBinaryPath, // when using syscall.Exec, must pass binary name as args[0]\n",
                    "rendered": {
                      "text": ")\n\nfunc startAgent(writer io.WriteCloser) error {\n\tif envconfig.IsRunningInContainer() {\n\t\t// Use exec so PID 1 changes to agent from start-agent.\n\t\texecArgs := []string{\n\t\t\tpaths.AgentBinaryPath, // when using syscall.Exec, must pass binary name as args[0]\n",
                      "markdown": "`)\n\nfunc startAgent(writer io.WriteCloser) error {\n\tif envconfig.IsRunningInContainer() {\n\t\t// Use exec so PID 1 changes to agent from start-agent.\n\t\texecArgs := []string{\n\t\t\tpaths.AgentBinaryPath, // when using syscall.Exec, must pass binary name as args[0]\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/start-amazon-cloudwatch-agent/start-amazon-cloudwatch-agent.go"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 5,
                  "endLine": 56,
                  "endColumn": 27,
                  "snippet": {
                    "text": "func main() {\n\tvar writer io.WriteCloser\n\n\tif !envconfig.IsRunningInContainer() {\n\t\twriter = &lumberjack.Logger{\n\t\t\tFilename:   paths.AgentLogFilePath,\n\t\t\tMaxSize:    100, //MB\n",
                    "rendered": {
                      "text": "func main() {\n\tvar writer io.WriteCloser\n\n\tif !envconfig.IsRunningInContainer() {\n\t\twriter = &lumberjack.Logger{\n\t\t\tFilename:   paths.AgentLogFilePath,\n\t\t\tMaxSize:    100, //MB\n",
                      "markdown": "`func main() {\n\tvar writer io.WriteCloser\n\n\tif !envconfig.IsRunningInContainer() {\n\t\twriter = &lumberjack.Logger{\n\t\t\tFilename:   paths.AgentLogFilePath,\n\t\t\tMaxSize:    100, //MB\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/start-amazon-cloudwatch-agent/start-amazon-cloudwatch-agent.go"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 4,
                  "endLine": 24,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\nfunc translateConfig() error {\n\targs := []string{\"--output\", paths.TomlConfigPath, \"--mode\", \"auto\"}\n\tif envconfig.IsRunningInContainer() {\n\t\targs = append(args, \"--input-dir\", paths.CONFIG_DIR_IN_CONTAINER)\n\t} else {\n\t\targs = append(args, \"--input\", paths.JsonConfigPath, \"--input-dir\", paths.ConfigDirPath, \"--config\", paths.CommonConfigPath)\n",
                    "rendered": {
                      "text": "\nfunc translateConfig() error {\n\targs := []string{\"--output\", paths.TomlConfigPath, \"--mode\", \"auto\"}\n\tif envconfig.IsRunningInContainer() {\n\t\targs = append(args, \"--input-dir\", paths.CONFIG_DIR_IN_CONTAINER)\n\t} else {\n\t\targs = append(args, \"--input\", paths.JsonConfigPath, \"--input-dir\", paths.ConfigDirPath, \"--config\", paths.CommonConfigPath)\n",
                      "markdown": "`\nfunc translateConfig() error {\n\targs := []string{\"--output\", paths.TomlConfigPath, \"--mode\", \"auto\"}\n\tif envconfig.IsRunningInContainer() {\n\t\targs = append(args, \"--input-dir\", paths.CONFIG_DIR_IN_CONTAINER)\n\t} else {\n\t\targs = append(args, \"--input\", paths.JsonConfigPath, \"--input-dir\", paths.ConfigDirPath, \"--config\", paths.CommonConfigPath)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/start-amazon-cloudwatch-agent/start-amazon-cloudwatch-agent.go"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 29,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\t} else {\n\t\targs = append(args, \"--input\", paths.JsonConfigPath, \"--input-dir\", paths.ConfigDirPath, \"--config\", paths.CommonConfigPath)\n\t}\n\tcmd := exec.Command(paths.TranslatorBinaryPath, args...)\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stdout\n\terr := cmd.Run()\n",
                    "rendered": {
                      "text": "\t} else {\n\t\targs = append(args, \"--input\", paths.JsonConfigPath, \"--input-dir\", paths.ConfigDirPath, \"--config\", paths.CommonConfigPath)\n\t}\n\tcmd := exec.Command(paths.TranslatorBinaryPath, args...)\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stdout\n\terr := cmd.Run()\n",
                      "markdown": "`\t} else {\n\t\targs = append(args, \"--input\", paths.JsonConfigPath, \"--input-dir\", paths.ConfigDirPath, \"--config\", paths.CommonConfigPath)\n\t}\n\tcmd := exec.Command(paths.TranslatorBinaryPath, args...)\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stdout\n\terr := cmd.Run()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/start-amazon-cloudwatch-agent/path_windows.go"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 5,
                  "endLine": 22,
                  "endColumn": 27,
                  "snippet": {
                    "text": ")\n\nfunc startAgent(writer io.WriteCloser) error {\n\tif !envconfig.IsRunningInContainer() {\n\t\tif err := writer.Close(); err != nil {\n\t\t\tlog.Printf(\"E! Cannot close the log file, ERROR is %v \\n\", err)\n\t\t\treturn err\n",
                    "rendered": {
                      "text": ")\n\nfunc startAgent(writer io.WriteCloser) error {\n\tif !envconfig.IsRunningInContainer() {\n\t\tif err := writer.Close(); err != nil {\n\t\t\tlog.Printf(\"E! Cannot close the log file, ERROR is %v \\n\", err)\n\t\t\treturn err\n",
                      "markdown": "`)\n\nfunc startAgent(writer io.WriteCloser) error {\n\tif !envconfig.IsRunningInContainer() {\n\t\tif err := writer.Close(); err != nil {\n\t\t\tlog.Printf(\"E! Cannot close the log file, ERROR is %v \\n\", err)\n\t\t\treturn err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/start-amazon-cloudwatch-agent/path_windows.go"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 1,
                  "endLine": 44,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t\t}\n\t\texecArgs = append(execArgs, config.GetOTELConfigArgs(paths.CONFIG_DIR_IN_CONTAINER)...)\n\t\texecArgs = append(execArgs, \"-console\", \"true\")\n\t\tcmd := exec.Command(paths.AgentBinaryPath, execArgs...)\n\t\tcmd.Stdin = os.Stdin\n\t\tcmd.Stdout = os.Stdout\n\t\tcmd.Stderr = os.Stderr\n",
                    "rendered": {
                      "text": "\t\t}\n\t\texecArgs = append(execArgs, config.GetOTELConfigArgs(paths.CONFIG_DIR_IN_CONTAINER)...)\n\t\texecArgs = append(execArgs, \"-console\", \"true\")\n\t\tcmd := exec.Command(paths.AgentBinaryPath, execArgs...)\n\t\tcmd.Stdin = os.Stdin\n\t\tcmd.Stdout = os.Stdout\n\t\tcmd.Stderr = os.Stderr\n",
                      "markdown": "`\t\t}\n\t\texecArgs = append(execArgs, config.GetOTELConfigArgs(paths.CONFIG_DIR_IN_CONTAINER)...)\n\t\texecArgs = append(execArgs, \"-console\", \"true\")\n\t\tcmd := exec.Command(paths.AgentBinaryPath, execArgs...)\n\t\tcmd.Stdin = os.Stdin\n\t\tcmd.Stdout = os.Stdout\n\t\tcmd.Stderr = os.Stderr\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/start-amazon-cloudwatch-agent/path_windows.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t\t\t\"-envconfig\", paths.EnvConfigPath,\n\t\t}\n\t\texecArgs = append(execArgs, config.GetOTELConfigArgs(paths.ConfigDirPath)...)\n\t\tcmd := exec.Command(paths.AgentBinaryPath, execArgs...)\n\t\tstdoutStderr, err := cmd.CombinedOutput()\n\t\t// log file is closed, so use fmt here\n\t\tfmt.Printf(\"%s \\n\", stdoutStderr)\n",
                    "rendered": {
                      "text": "\t\t\t\"-envconfig\", paths.EnvConfigPath,\n\t\t}\n\t\texecArgs = append(execArgs, config.GetOTELConfigArgs(paths.ConfigDirPath)...)\n\t\tcmd := exec.Command(paths.AgentBinaryPath, execArgs...)\n\t\tstdoutStderr, err := cmd.CombinedOutput()\n\t\t// log file is closed, so use fmt here\n\t\tfmt.Printf(\"%s \\n\", stdoutStderr)\n",
                      "markdown": "`\t\t\t\"-envconfig\", paths.EnvConfigPath,\n\t\t}\n\t\texecArgs = append(execArgs, config.GetOTELConfigArgs(paths.ConfigDirPath)...)\n\t\tcmd := exec.Command(paths.AgentBinaryPath, execArgs...)\n\t\tstdoutStderr, err := cmd.CombinedOutput()\n\t\t// log file is closed, so use fmt here\n\t\tfmt.Printf(\"%s \\n\", stdoutStderr)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/start-amazon-cloudwatch-agent/path_windows.go"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 31,
                  "endLine": 34,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\t\texecArgs = append(execArgs, config.GetOTELConfigArgs(paths.ConfigDirPath)...)\n\t\tcmd := exec.Command(paths.AgentBinaryPath, execArgs...)\n\t\tstdoutStderr, err := cmd.CombinedOutput()\n\t\t// log file is closed, so use fmt here\n\t\tfmt.Printf(\"%s \\n\", stdoutStderr)\n\t\treturn err\n\t} else {\n",
                    "rendered": {
                      "text": "\t\texecArgs = append(execArgs, config.GetOTELConfigArgs(paths.ConfigDirPath)...)\n\t\tcmd := exec.Command(paths.AgentBinaryPath, execArgs...)\n\t\tstdoutStderr, err := cmd.CombinedOutput()\n\t\t// log file is closed, so use fmt here\n\t\tfmt.Printf(\"%s \\n\", stdoutStderr)\n\t\treturn err\n\t} else {\n",
                      "markdown": "`\t\texecArgs = append(execArgs, config.GetOTELConfigArgs(paths.ConfigDirPath)...)\n\t\tcmd := exec.Command(paths.AgentBinaryPath, execArgs...)\n\t\tstdoutStderr, err := cmd.CombinedOutput()\n\t\t// log file is closed, so use fmt here\n\t\tfmt.Printf(\"%s \\n\", stdoutStderr)\n\t\treturn err\n\t} else {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/amazon-cloudwatch-agent/amazon-cloudwatch-agent_test.go"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 9,
                  "endLine": 140,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\tfor name, testCase := range testCases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tif testCase.isContainer {\n\t\t\t\tt.Setenv(envconfig.RunInContainer, envconfig.TrueValue)\n\t\t\t}\n\t\t\tt.Setenv(envconfig.CWOtelConfigContent, testCase.envValue)\n\t\t\tgot, err := mergeConfigs(testCase.input, testCase.isOnlyDefaultConfigPath)\n",
                    "rendered": {
                      "text": "\tfor name, testCase := range testCases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tif testCase.isContainer {\n\t\t\t\tt.Setenv(envconfig.RunInContainer, envconfig.TrueValue)\n\t\t\t}\n\t\t\tt.Setenv(envconfig.CWOtelConfigContent, testCase.envValue)\n\t\t\tgot, err := mergeConfigs(testCase.input, testCase.isOnlyDefaultConfigPath)\n",
                      "markdown": "`\tfor name, testCase := range testCases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tif testCase.isContainer {\n\t\t\t\tt.Setenv(envconfig.RunInContainer, envconfig.TrueValue)\n\t\t\t}\n\t\t\tt.Setenv(envconfig.CWOtelConfigContent, testCase.envValue)\n\t\t\tgot, err := mergeConfigs(testCase.input, testCase.isOnlyDefaultConfigPath)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/amazon-cloudwatch-agent/amazon-cloudwatch-agent_test.go"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 7,
                  "endLine": 101,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\t\t\tisOnlyDefaultConfigPath: true,\n\t\t\twant:                    mustLoadFromFile(t, filepath.Join(\"testdata\", \"base.yaml\")),\n\t\t},\n\t\t\"WithEnv/NonContainer\": {\n\t\t\tinput:                   []string{filepath.Join(\"testdata\", \"base.yaml\")},\n\t\t\tisContainer:             false,\n\t\t\tisOnlyDefaultConfigPath: true,\n",
                    "rendered": {
                      "text": "\t\t\tisOnlyDefaultConfigPath: true,\n\t\t\twant:                    mustLoadFromFile(t, filepath.Join(\"testdata\", \"base.yaml\")),\n\t\t},\n\t\t\"WithEnv/NonContainer\": {\n\t\t\tinput:                   []string{filepath.Join(\"testdata\", \"base.yaml\")},\n\t\t\tisContainer:             false,\n\t\t\tisOnlyDefaultConfigPath: true,\n",
                      "markdown": "`\t\t\tisOnlyDefaultConfigPath: true,\n\t\t\twant:                    mustLoadFromFile(t, filepath.Join(\"testdata\", \"base.yaml\")),\n\t\t},\n\t\t\"WithEnv/NonContainer\": {\n\t\t\tinput:                   []string{filepath.Join(\"testdata\", \"base.yaml\")},\n\t\t\tisContainer:             false,\n\t\t\tisOnlyDefaultConfigPath: true,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/amazon-cloudwatch-agent/amazon-cloudwatch-agent.go"
                },
                "region": {
                  "startLine": 373,
                  "startColumn": 10,
                  "endLine": 373,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\t\tlog.Printf(\"I! Merged OTEL configuration: \\n%s\\n\", toyamlconfig.ToYamlConfig(result))\n\t}\n\n\tuseragent.Get().SetComponents(cfg, c)\n\n\tparams := getCollectorParams(factories, providerSettings, loggerOptions)\n\tcmd := otelcol.NewCommand(params)\n",
                    "rendered": {
                      "text": "\t\tlog.Printf(\"I! Merged OTEL configuration: \\n%s\\n\", toyamlconfig.ToYamlConfig(result))\n\t}\n\n\tuseragent.Get().SetComponents(cfg, c)\n\n\tparams := getCollectorParams(factories, providerSettings, loggerOptions)\n\tcmd := otelcol.NewCommand(params)\n",
                      "markdown": "`\t\tlog.Printf(\"I! Merged OTEL configuration: \\n%s\\n\", toyamlconfig.ToYamlConfig(result))\n\t}\n\n\tuseragent.Get().SetComponents(cfg, c)\n\n\tparams := getCollectorParams(factories, providerSettings, loggerOptions)\n\tcmd := otelcol.NewCommand(params)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/amazon-cloudwatch-agent/amazon-cloudwatch-agent.go"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 21,
                  "endLine": 360,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\t\treturn fmt.Errorf(\"error while adapting telegraf input plugins: %v\", err)\n\t}\n\n\tcfg, err := provider.Get(ctx, factories)\n\tif err != nil {\n\t\treturn err\n\t}\n",
                    "rendered": {
                      "text": "\t\treturn fmt.Errorf(\"error while adapting telegraf input plugins: %v\", err)\n\t}\n\n\tcfg, err := provider.Get(ctx, factories)\n\tif err != nil {\n\t\treturn err\n\t}\n",
                      "markdown": "`\t\treturn fmt.Errorf(\"error while adapting telegraf input plugins: %v\", err)\n\t}\n\n\tcfg, err := provider.Get(ctx, factories)\n\tif err != nil {\n\t\treturn err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/amazon-cloudwatch-agent/amazon-cloudwatch-agent.go"
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 13,
                  "endLine": 327,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\t\tif isOnlyDefaultConfigPath {\n\t\t\t_, err = os.Stat(fOtelConfigs[0])\n\t\t\tif errors.Is(err, os.ErrNotExist) {\n\t\t\t\tuseragent.Get().SetComponents(&otelcol.Config{}, c)\n\t\t\t\treturn ag.Run(ctx)\n\t\t\t}\n\t\t}\n",
                    "rendered": {
                      "text": "\t\tif isOnlyDefaultConfigPath {\n\t\t\t_, err = os.Stat(fOtelConfigs[0])\n\t\t\tif errors.Is(err, os.ErrNotExist) {\n\t\t\t\tuseragent.Get().SetComponents(&otelcol.Config{}, c)\n\t\t\t\treturn ag.Run(ctx)\n\t\t\t}\n\t\t}\n",
                      "markdown": "`\t\tif isOnlyDefaultConfigPath {\n\t\t\t_, err = os.Stat(fOtelConfigs[0])\n\t\t\tif errors.Is(err, os.ErrNotExist) {\n\t\t\t\tuseragent.Get().SetComponents(&otelcol.Config{}, c)\n\t\t\t\treturn ag.Run(ctx)\n\t\t\t}\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/amazon-cloudwatch-agent/amazon-cloudwatch-agent.go"
                },
                "region": {
                  "startLine": 603,
                  "startColumn": 29,
                  "endLine": 603,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\t\t\t\t\tlog.Fatalf(\"E! Failed to marshal env config: %v\", err)\n\t\t\t\t}\n\t\t\t\tif err = os.WriteFile(*fEnvConfig, bytes, 0644); err != nil {\n\t\t\t\t\tlog.Fatalf(\"E! Failed to update env config: %v\", err)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n",
                    "rendered": {
                      "text": "\t\t\t\t\tlog.Fatalf(\"E! Failed to marshal env config: %v\", err)\n\t\t\t\t}\n\t\t\t\tif err = os.WriteFile(*fEnvConfig, bytes, 0644); err != nil {\n\t\t\t\t\tlog.Fatalf(\"E! Failed to update env config: %v\", err)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n",
                      "markdown": "`\t\t\t\t\tlog.Fatalf(\"E! Failed to marshal env config: %v\", err)\n\t\t\t\t}\n\t\t\t\tif err = os.WriteFile(*fEnvConfig, bytes, 0644); err != nil {\n\t\t\t\t\tlog.Fatalf(\"E! Failed to update env config: %v\", err)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/amazon-cloudwatch-agent/amazon-cloudwatch-agent.go"
                },
                "region": {
                  "startLine": 376,
                  "endLine": 376,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tuseragent.Get().SetComponents(cfg, c)\n\n\tparams := getCollectorParams(factories, providerSettings, loggerOptions)\n\tcmd := otelcol.NewCommand(params)\n\t// *************************************************************************************************\n\t// ⚠️ WARNING ⚠️\n\t// Noticed that args of parent process get passed here to otel collector which causes failures\n",
                    "rendered": {
                      "text": "\tuseragent.Get().SetComponents(cfg, c)\n\n\tparams := getCollectorParams(factories, providerSettings, loggerOptions)\n\tcmd := otelcol.NewCommand(params)\n\t// *************************************************************************************************\n\t// ⚠️ WARNING ⚠️\n\t// Noticed that args of parent process get passed here to otel collector which causes failures\n",
                      "markdown": "`\tuseragent.Get().SetComponents(cfg, c)\n\n\tparams := getCollectorParams(factories, providerSettings, loggerOptions)\n\tcmd := otelcol.NewCommand(params)\n\t// *************************************************************************************************\n\t// ⚠️ WARNING ⚠️\n\t// Noticed that args of parent process get passed here to otel collector which causes failures\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/amazon-cloudwatch-agent/amazon-cloudwatch-agent.go"
                },
                "region": {
                  "startLine": 603,
                  "startColumn": 36,
                  "endLine": 603,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\t\t\t\t\tlog.Fatalf(\"E! Failed to marshal env config: %v\", err)\n\t\t\t\t}\n\t\t\t\tif err = os.WriteFile(*fEnvConfig, bytes, 0644); err != nil {\n\t\t\t\t\tlog.Fatalf(\"E! Failed to update env config: %v\", err)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n",
                    "rendered": {
                      "text": "\t\t\t\t\tlog.Fatalf(\"E! Failed to marshal env config: %v\", err)\n\t\t\t\t}\n\t\t\t\tif err = os.WriteFile(*fEnvConfig, bytes, 0644); err != nil {\n\t\t\t\t\tlog.Fatalf(\"E! Failed to update env config: %v\", err)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n",
                      "markdown": "`\t\t\t\t\tlog.Fatalf(\"E! Failed to marshal env config: %v\", err)\n\t\t\t\t}\n\t\t\t\tif err = os.WriteFile(*fEnvConfig, bytes, 0644); err != nil {\n\t\t\t\t\tlog.Fatalf(\"E! Failed to update env config: %v\", err)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/amazon-cloudwatch-agent/amazon-cloudwatch-agent.go"
                },
                "region": {
                  "startLine": 600,
                  "startColumn": 37,
                  "endLine": 600,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\t\t\t\tenvVars[parts[0]] = parts[1]\n\t\t\t\tbytes, err = json.MarshalIndent(envVars, \"\", \"\\t\")\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Fatalf(\"E! Failed to marshal env config: %v\", err)\n\t\t\t\t}\n\t\t\t\tif err = os.WriteFile(*fEnvConfig, bytes, 0644); err != nil {\n\t\t\t\t\tlog.Fatalf(\"E! Failed to update env config: %v\", err)\n",
                    "rendered": {
                      "text": "\t\t\t\tenvVars[parts[0]] = parts[1]\n\t\t\t\tbytes, err = json.MarshalIndent(envVars, \"\", \"\\t\")\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Fatalf(\"E! Failed to marshal env config: %v\", err)\n\t\t\t\t}\n\t\t\t\tif err = os.WriteFile(*fEnvConfig, bytes, 0644); err != nil {\n\t\t\t\t\tlog.Fatalf(\"E! Failed to update env config: %v\", err)\n",
                      "markdown": "`\t\t\t\tenvVars[parts[0]] = parts[1]\n\t\t\t\tbytes, err = json.MarshalIndent(envVars, \"\", \"\\t\")\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Fatalf(\"E! Failed to marshal env config: %v\", err)\n\t\t\t\t}\n\t\t\t\tif err = os.WriteFile(*fEnvConfig, bytes, 0644); err != nil {\n\t\t\t\t\tlog.Fatalf(\"E! Failed to update env config: %v\", err)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/amazon-cloudwatch-agent/amazon-cloudwatch-agent.go"
                },
                "region": {
                  "startLine": 595,
                  "startColumn": 39,
                  "endLine": 595,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t\t\tenvVars := map[string]string{}\n\t\t\t\terr = json.Unmarshal(bytes, &envVars)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Fatalf(\"E! Failed to unmarshal env config: %v\", err)\n\t\t\t\t}\n\t\t\t\tenvVars[parts[0]] = parts[1]\n\t\t\t\tbytes, err = json.MarshalIndent(envVars, \"\", \"\\t\")\n",
                    "rendered": {
                      "text": "\t\t\t\tenvVars := map[string]string{}\n\t\t\t\terr = json.Unmarshal(bytes, &envVars)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Fatalf(\"E! Failed to unmarshal env config: %v\", err)\n\t\t\t\t}\n\t\t\t\tenvVars[parts[0]] = parts[1]\n\t\t\t\tbytes, err = json.MarshalIndent(envVars, \"\", \"\\t\")\n",
                      "markdown": "`\t\t\t\tenvVars := map[string]string{}\n\t\t\t\terr = json.Unmarshal(bytes, &envVars)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Fatalf(\"E! Failed to unmarshal env config: %v\", err)\n\t\t\t\t}\n\t\t\t\tenvVars[parts[0]] = parts[1]\n\t\t\t\tbytes, err = json.MarshalIndent(envVars, \"\", \"\\t\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/amazon-cloudwatch-agent/amazon-cloudwatch-agent.go"
                },
                "region": {
                  "startLine": 590,
                  "startColumn": 34,
                  "endLine": 590,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\t\t\tif len(parts) == 2 {\n\t\t\t\tbytes, err := os.ReadFile(*fEnvConfig)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Fatalf(\"E! Failed to read env config: %v\", err)\n\t\t\t\t}\n\t\t\t\tenvVars := map[string]string{}\n\t\t\t\terr = json.Unmarshal(bytes, &envVars)\n",
                    "rendered": {
                      "text": "\t\t\tif len(parts) == 2 {\n\t\t\t\tbytes, err := os.ReadFile(*fEnvConfig)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Fatalf(\"E! Failed to read env config: %v\", err)\n\t\t\t\t}\n\t\t\t\tenvVars := map[string]string{}\n\t\t\t\terr = json.Unmarshal(bytes, &envVars)\n",
                      "markdown": "`\t\t\tif len(parts) == 2 {\n\t\t\t\tbytes, err := os.ReadFile(*fEnvConfig)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Fatalf(\"E! Failed to read env config: %v\", err)\n\t\t\t\t}\n\t\t\t\tenvVars := map[string]string{}\n\t\t\t\terr = json.Unmarshal(bytes, &envVars)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/amazon-cloudwatch-agent/amazon-cloudwatch-agent.go"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 54,
                  "endLine": 223,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\tif configPath == \"\" {\n\t\treturn \"\", fmt.Errorf(\"no config file specified\")\n\t}\n\t//load the environment variables that's saved in json env config file\n\tif envConfigPath == \"\" {\n\t\tdir, _ := filepath.Split(configPath)\n\t\tenvConfigPath = filepath.Join(dir, defaultEnvCfgFileName)\n",
                    "rendered": {
                      "text": "\tif configPath == \"\" {\n\t\treturn \"\", fmt.Errorf(\"no config file specified\")\n\t}\n\t//load the environment variables that's saved in json env config file\n\tif envConfigPath == \"\" {\n\t\tdir, _ := filepath.Split(configPath)\n\t\tenvConfigPath = filepath.Join(dir, defaultEnvCfgFileName)\n",
                      "markdown": "`\tif configPath == \"\" {\n\t\treturn \"\", fmt.Errorf(\"no config file specified\")\n\t}\n\t//load the environment variables that's saved in json env config file\n\tif envConfigPath == \"\" {\n\t\tdir, _ := filepath.Split(configPath)\n\t\tenvConfigPath = filepath.Join(dir, defaultEnvCfgFileName)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/amazon-cloudwatch-agent/amazon-cloudwatch-agent.go"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 34,
                  "endLine": 209,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\tenvVars := map[string]string{}\n\terr = json.Unmarshal(bytes, &envVars)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"cannot create env config due to: %s\", err.Error())\n\t}\n\n\tfor key, val := range envVars {\n",
                    "rendered": {
                      "text": "\tenvVars := map[string]string{}\n\terr = json.Unmarshal(bytes, &envVars)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"cannot create env config due to: %s\", err.Error())\n\t}\n\n\tfor key, val := range envVars {\n",
                      "markdown": "`\tenvVars := map[string]string{}\n\terr = json.Unmarshal(bytes, &envVars)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"cannot create env config due to: %s\", err.Error())\n\t}\n\n\tfor key, val := range envVars {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/amazon-cloudwatch-agent/amazon-cloudwatch-agent.go"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 32,
                  "endLine": 204,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n\tbytes, err := os.ReadFile(path)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"cannot read env config file %s due to: %s\", path, err.Error())\n\t}\n\tenvVars := map[string]string{}\n\terr = json.Unmarshal(bytes, &envVars)\n",
                    "rendered": {
                      "text": "\n\tbytes, err := os.ReadFile(path)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"cannot read env config file %s due to: %s\", path, err.Error())\n\t}\n\tenvVars := map[string]string{}\n\terr = json.Unmarshal(bytes, &envVars)\n",
                      "markdown": "`\n\tbytes, err := os.ReadFile(path)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"cannot read env config file %s due to: %s\", path, err.Error())\n\t}\n\tenvVars := map[string]string{}\n\terr = json.Unmarshal(bytes, &envVars)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/amazon-cloudwatch-agent/amazon-cloudwatch-agent.go"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 23,
                  "endLine": 199,
                  "endColumn": 28,
                  "snippet": {
                    "text": "// The \"config-translator\" program populates that file.\nfunc loadEnvironmentVariables(path string) error {\n\tif path == \"\" {\n\t\treturn fmt.Errorf(\"no env config file specified\")\n\t}\n\n\tbytes, err := os.ReadFile(path)\n",
                    "rendered": {
                      "text": "// The \"config-translator\" program populates that file.\nfunc loadEnvironmentVariables(path string) error {\n\tif path == \"\" {\n\t\treturn fmt.Errorf(\"no env config file specified\")\n\t}\n\n\tbytes, err := os.ReadFile(path)\n",
                      "markdown": "`// The \"config-translator\" program populates that file.\nfunc loadEnvironmentVariables(path string) error {\n\tif path == \"\" {\n\t\treturn fmt.Errorf(\"no env config file specified\")\n\t}\n\n\tbytes, err := os.ReadFile(path)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/amazon-cloudwatch-agent/amazon-cloudwatch-agent.go"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 38,
                  "endLine": 195,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\t}\n}\n\n// loadEnvironmentVariables updates OS ENV vars with key/val from the given JSON file.\n// The \"config-translator\" program populates that file.\nfunc loadEnvironmentVariables(path string) error {\n\tif path == \"\" {\n",
                    "rendered": {
                      "text": "\t}\n}\n\n// loadEnvironmentVariables updates OS ENV vars with key/val from the given JSON file.\n// The \"config-translator\" program populates that file.\nfunc loadEnvironmentVariables(path string) error {\n\tif path == \"\" {\n",
                      "markdown": "`\t}\n}\n\n// loadEnvironmentVariables updates OS ENV vars with key/val from the given JSON file.\n// The \"config-translator\" program populates that file.\nfunc loadEnvironmentVariables(path string) error {\n\tif path == \"\" {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/amazon-cloudwatch-agent/amazon-cloudwatch-agent.go"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 37,
                  "endLine": 157,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\t\t\t\t\tcase <-ticker.C:\n\t\t\t\t\t\tif info, err := os.Stat(envConfigPath); err == nil && info.ModTime().After(previousModTime) {\n\t\t\t\t\t\t\tif err := loadEnvironmentVariables(envConfigPath); err != nil {\n\t\t\t\t\t\t\t\tlog.Printf(\"E! Unable to load env variables: %v\\n\", err)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Sets the log level based on environment variable\n\t\t\t\t\t\t\tlogLevel := os.Getenv(envconfig.CWAGENT_LOG_LEVEL)\n",
                    "rendered": {
                      "text": "\t\t\t\t\tcase <-ticker.C:\n\t\t\t\t\t\tif info, err := os.Stat(envConfigPath); err == nil && info.ModTime().After(previousModTime) {\n\t\t\t\t\t\t\tif err := loadEnvironmentVariables(envConfigPath); err != nil {\n\t\t\t\t\t\t\t\tlog.Printf(\"E! Unable to load env variables: %v\\n\", err)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Sets the log level based on environment variable\n\t\t\t\t\t\t\tlogLevel := os.Getenv(envconfig.CWAGENT_LOG_LEVEL)\n",
                      "markdown": "`\t\t\t\t\tcase <-ticker.C:\n\t\t\t\t\t\tif info, err := os.Stat(envConfigPath); err == nil && info.ModTime().After(previousModTime) {\n\t\t\t\t\t\t\tif err := loadEnvironmentVariables(envConfigPath); err != nil {\n\t\t\t\t\t\t\t\tlog.Printf(\"E! Unable to load env variables: %v\\n\", err)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Sets the log level based on environment variable\n\t\t\t\t\t\t\tlogLevel := os.Getenv(envconfig.CWAGENT_LOG_LEVEL)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/amazon-cloudwatch-agent/amazon-cloudwatch-agent.go"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 47,
                  "endLine": 95,
                  "endColumn": 52,
                  "snippet": {
                    "text": "var fServiceName = flag.String(\"service-name\", \"telegraf\", \"service name (windows only)\")\nvar fServiceDisplayName = flag.String(\"service-display-name\", \"Telegraf Data Collector Service\", \"service display name (windows only)\")\nvar fRunAsConsole = flag.Bool(\"console\", false, \"run as console application (windows only)\")\nvar fSetEnv = flag.String(\"setenv\", \"\", \"set an env in the configuration file in the format of KEY=VALUE\")\nvar fStartUpErrorFile = flag.String(\"startup-error-file\", \"\", \"file to touch if agent can't start\")\n\nvar stop chan struct{}\n",
                    "rendered": {
                      "text": "var fServiceName = flag.String(\"service-name\", \"telegraf\", \"service name (windows only)\")\nvar fServiceDisplayName = flag.String(\"service-display-name\", \"Telegraf Data Collector Service\", \"service display name (windows only)\")\nvar fRunAsConsole = flag.Bool(\"console\", false, \"run as console application (windows only)\")\nvar fSetEnv = flag.String(\"setenv\", \"\", \"set an env in the configuration file in the format of KEY=VALUE\")\nvar fStartUpErrorFile = flag.String(\"startup-error-file\", \"\", \"file to touch if agent can't start\")\n\nvar stop chan struct{}\n",
                      "markdown": "`var fServiceName = flag.String(\"service-name\", \"telegraf\", \"service name (windows only)\")\nvar fServiceDisplayName = flag.String(\"service-display-name\", \"Telegraf Data Collector Service\", \"service display name (windows only)\")\nvar fRunAsConsole = flag.Bool(\"console\", false, \"run as console application (windows only)\")\nvar fSetEnv = flag.String(\"setenv\", \"\", \"set an env in the configuration file in the format of KEY=VALUE\")\nvar fStartUpErrorFile = flag.String(\"startup-error-file\", \"\", \"file to touch if agent can't start\")\n\nvar stop chan struct{}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/amazon-cloudwatch-agent/amazon-cloudwatch-agent.go"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 16,
                  "endLine": 91,
                  "endColumn": 25,
                  "snippet": {
                    "text": "var fProcessorFilters = flag.String(\"processor-filter\", \"\",\n\t\"filter the processors to enable, separator is :\")\nvar fService = flag.String(\"service\", \"\",\n\t\"operate on the service (windows only)\")\nvar fServiceName = flag.String(\"service-name\", \"telegraf\", \"service name (windows only)\")\nvar fServiceDisplayName = flag.String(\"service-display-name\", \"Telegraf Data Collector Service\", \"service display name (windows only)\")\nvar fRunAsConsole = flag.Bool(\"console\", false, \"run as console application (windows only)\")\n",
                    "rendered": {
                      "text": "var fProcessorFilters = flag.String(\"processor-filter\", \"\",\n\t\"filter the processors to enable, separator is :\")\nvar fService = flag.String(\"service\", \"\",\n\t\"operate on the service (windows only)\")\nvar fServiceName = flag.String(\"service-name\", \"telegraf\", \"service name (windows only)\")\nvar fServiceDisplayName = flag.String(\"service-display-name\", \"Telegraf Data Collector Service\", \"service display name (windows only)\")\nvar fRunAsConsole = flag.Bool(\"console\", false, \"run as console application (windows only)\")\n",
                      "markdown": "`var fProcessorFilters = flag.String(\"processor-filter\", \"\",\n\t\"filter the processors to enable, separator is :\")\nvar fService = flag.String(\"service\", \"\",\n\t\"operate on the service (windows only)\")\nvar fServiceName = flag.String(\"service-name\", \"telegraf\", \"service name (windows only)\")\nvar fServiceDisplayName = flag.String(\"service-display-name\", \"Telegraf Data Collector Service\", \"service display name (windows only)\")\nvar fRunAsConsole = flag.Bool(\"console\", false, \"run as console application (windows only)\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/amazon-cloudwatch-agent/amazon-cloudwatch-agent.go"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 74,
                  "endLine": 65,
                  "endColumn": 83,
                  "snippet": {
                    "text": "var fQuiet = flag.Bool(\"quiet\", false,\n\t\"run in quiet mode\")\nvar fTest = flag.Bool(\"test\", false, \"enable test mode: gather metrics, print them out, and exit\")\nvar fTestWait = flag.Int(\"test-wait\", 0, \"wait up to this many seconds for service inputs to complete in test mode\")\nvar fSchemaTest = flag.Bool(\"schematest\", false, \"validate the toml file schema\")\nvar fTomlConfig = flag.String(\"config\", \"\", \"configuration file to load\")\nvar fOtelConfigs configprovider.OtelConfigFlags\n",
                    "rendered": {
                      "text": "var fQuiet = flag.Bool(\"quiet\", false,\n\t\"run in quiet mode\")\nvar fTest = flag.Bool(\"test\", false, \"enable test mode: gather metrics, print them out, and exit\")\nvar fTestWait = flag.Int(\"test-wait\", 0, \"wait up to this many seconds for service inputs to complete in test mode\")\nvar fSchemaTest = flag.Bool(\"schematest\", false, \"validate the toml file schema\")\nvar fTomlConfig = flag.String(\"config\", \"\", \"configuration file to load\")\nvar fOtelConfigs configprovider.OtelConfigFlags\n",
                      "markdown": "`var fQuiet = flag.Bool(\"quiet\", false,\n\t\"run in quiet mode\")\nvar fTest = flag.Bool(\"test\", false, \"enable test mode: gather metrics, print them out, and exit\")\nvar fTestWait = flag.Int(\"test-wait\", 0, \"wait up to this many seconds for service inputs to complete in test mode\")\nvar fSchemaTest = flag.Bool(\"schematest\", false, \"validate the toml file schema\")\nvar fTomlConfig = flag.String(\"config\", \"\", \"configuration file to load\")\nvar fOtelConfigs configprovider.OtelConfigFlags\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/amazon-cloudwatch-agent/amazon-cloudwatch-agent.go"
                },
                "region": {
                  "startLine": 413,
                  "startColumn": 57,
                  "endLine": 413,
                  "endColumn": 79,
                  "snippet": {
                    "text": "\tcontent, ok := os.LookupEnv(envconfig.CWOtelConfigContent)\n\t// Similar to translator, for containerized agent, try to use env variable if no other supplemental config paths\n\t// are provided.\n\tif ok && len(content) > 0 && isOnlyDefaultConfigPath && envconfig.IsRunningInContainer() {\n\t\tlog.Printf(\"D! Merging OTEL configuration from: %s\", envconfig.CWOtelConfigContent)\n\t\tconf, err := confmap.LoadFromBytes([]byte(content))\n\t\tif err != nil {\n",
                    "rendered": {
                      "text": "\tcontent, ok := os.LookupEnv(envconfig.CWOtelConfigContent)\n\t// Similar to translator, for containerized agent, try to use env variable if no other supplemental config paths\n\t// are provided.\n\tif ok && len(content) > 0 && isOnlyDefaultConfigPath && envconfig.IsRunningInContainer() {\n\t\tlog.Printf(\"D! Merging OTEL configuration from: %s\", envconfig.CWOtelConfigContent)\n\t\tconf, err := confmap.LoadFromBytes([]byte(content))\n\t\tif err != nil {\n",
                      "markdown": "`\tcontent, ok := os.LookupEnv(envconfig.CWOtelConfigContent)\n\t// Similar to translator, for containerized agent, try to use env variable if no other supplemental config paths\n\t// are provided.\n\tif ok && len(content) > 0 && isOnlyDefaultConfigPath && envconfig.IsRunningInContainer() {\n\t\tlog.Printf(\"D! Merging OTEL configuration from: %s\", envconfig.CWOtelConfigContent)\n\t\tconf, err := confmap.LoadFromBytes([]byte(content))\n\t\tif err != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/amazon-cloudwatch-agent/amazon-cloudwatch-agent.go"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 1,
                  "endLine": 235,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\tinputFilters []string,\n\toutputFilters []string,\n) error {\n\tenvConfigPath, err := getEnvConfigPath(*fTomlConfig, *fEnvConfig)\n\tif err != nil {\n\t\treturn err\n\t}\n",
                    "rendered": {
                      "text": "\tinputFilters []string,\n\toutputFilters []string,\n) error {\n\tenvConfigPath, err := getEnvConfigPath(*fTomlConfig, *fEnvConfig)\n\tif err != nil {\n\t\treturn err\n\t}\n",
                      "markdown": "`\tinputFilters []string,\n\toutputFilters []string,\n) error {\n\tenvConfigPath, err := getEnvConfigPath(*fTomlConfig, *fEnvConfig)\n\tif err != nil {\n\t\treturn err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/amazon-cloudwatch-agent/amazon-cloudwatch-agent.go"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 5,
                  "endLine": 146,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\t\t\t}\n\t\t}(ctx)\n\n\t\tif envConfigPath, err := getEnvConfigPath(*fTomlConfig, *fEnvConfig); err == nil {\n\t\t\t// Reloads environment variables when file is changed\n\t\t\tgo func(ctx context.Context, envConfigPath string) {\n\t\t\t\tvar previousModTime time.Time\n",
                    "rendered": {
                      "text": "\t\t\t}\n\t\t}(ctx)\n\n\t\tif envConfigPath, err := getEnvConfigPath(*fTomlConfig, *fEnvConfig); err == nil {\n\t\t\t// Reloads environment variables when file is changed\n\t\t\tgo func(ctx context.Context, envConfigPath string) {\n\t\t\t\tvar previousModTime time.Time\n",
                      "markdown": "`\t\t\t}\n\t\t}(ctx)\n\n\t\tif envConfigPath, err := getEnvConfigPath(*fTomlConfig, *fEnvConfig); err == nil {\n\t\t\t// Reloads environment variables when file is changed\n\t\t\tgo func(ctx context.Context, envConfigPath string) {\n\t\t\t\tvar previousModTime time.Time\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/config-translator/translator.go"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 27,
                  "endLine": 136,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\tlog.Println(exitSuccessMessage)\n\t// Put env config into the same folder as the toml config\n\tenvConfigPath := filepath.Join(tomlConfigDir, envConfigFileName)\n\tcmdutil.TranslateJsonMapToEnvConfigFile(mergedJsonConfigMap, envConfigPath)\n}\n",
                    "rendered": {
                      "text": "\tlog.Println(exitSuccessMessage)\n\t// Put env config into the same folder as the toml config\n\tenvConfigPath := filepath.Join(tomlConfigDir, envConfigFileName)\n\tcmdutil.TranslateJsonMapToEnvConfigFile(mergedJsonConfigMap, envConfigPath)\n}\n",
                      "markdown": "`\tlog.Println(exitSuccessMessage)\n\t// Put env config into the same folder as the toml config\n\tenvConfigPath := filepath.Join(tomlConfigDir, envConfigFileName)\n\tcmdutil.TranslateJsonMapToEnvConfigFile(mergedJsonConfigMap, envConfigPath)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cmd/config-translator/translator.go"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 7,
                  "endLine": 134,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\tlog.Panicf(\"E! Failed to create the configuration YAML validation file: %v\", err)\n\t}\n\tlog.Println(exitSuccessMessage)\n\t// Put env config into the same folder as the toml config\n\tenvConfigPath := filepath.Join(tomlConfigDir, envConfigFileName)\n\tcmdutil.TranslateJsonMapToEnvConfigFile(mergedJsonConfigMap, envConfigPath)\n}\n",
                    "rendered": {
                      "text": "\t\tlog.Panicf(\"E! Failed to create the configuration YAML validation file: %v\", err)\n\t}\n\tlog.Println(exitSuccessMessage)\n\t// Put env config into the same folder as the toml config\n\tenvConfigPath := filepath.Join(tomlConfigDir, envConfigFileName)\n\tcmdutil.TranslateJsonMapToEnvConfigFile(mergedJsonConfigMap, envConfigPath)\n}\n",
                      "markdown": "`\t\tlog.Panicf(\"E! Failed to create the configuration YAML validation file: %v\", err)\n\t}\n\tlog.Println(exitSuccessMessage)\n\t// Put env config into the same folder as the toml config\n\tenvConfigPath := filepath.Join(tomlConfigDir, envConfigFileName)\n\tcmdutil.TranslateJsonMapToEnvConfigFile(mergedJsonConfigMap, envConfigPath)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/handlers/customheader_test.go"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 44,
                  "endLine": 40,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n\tcontent = \"2\"\n\thandler.Fn(req)\n\tassert.Equal(t, \"2\", req.HTTPRequest.Header.Get(\"name\"))\n}\n",
                    "rendered": {
                      "text": "\n\tcontent = \"2\"\n\thandler.Fn(req)\n\tassert.Equal(t, \"2\", req.HTTPRequest.Header.Get(\"name\"))\n}\n",
                      "markdown": "`\n\tcontent = \"2\"\n\thandler.Fn(req)\n\tassert.Equal(t, \"2\", req.HTTPRequest.Header.Get(\"name\"))\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/handlers/customheader_test.go"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 44,
                  "endLine": 36,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\treq := &request.Request{HTTPRequest: httpReq}\n\n\thandler.Fn(req)\n\tassert.Equal(t, \"1\", req.HTTPRequest.Header.Get(\"name\"))\n\n\tcontent = \"2\"\n\thandler.Fn(req)\n",
                    "rendered": {
                      "text": "\treq := &request.Request{HTTPRequest: httpReq}\n\n\thandler.Fn(req)\n\tassert.Equal(t, \"1\", req.HTTPRequest.Header.Get(\"name\"))\n\n\tcontent = \"2\"\n\thandler.Fn(req)\n",
                      "markdown": "`\treq := &request.Request{HTTPRequest: httpReq}\n\n\thandler.Fn(req)\n\tassert.Equal(t, \"1\", req.HTTPRequest.Header.Get(\"name\"))\n\n\tcontent = \"2\"\n\thandler.Fn(req)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/handlers/customheader_test.go"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 47,
                  "endLine": 22,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n\treq := &request.Request{HTTPRequest: httpReq}\n\thandler.Fn(req)\n\tassert.Equal(t, \"test\", req.HTTPRequest.Header.Get(\"name\"))\n}\n\nfunc TestNewDynamicCustomHeaderHandler(t *testing.T) {\n",
                    "rendered": {
                      "text": "\n\treq := &request.Request{HTTPRequest: httpReq}\n\thandler.Fn(req)\n\tassert.Equal(t, \"test\", req.HTTPRequest.Header.Get(\"name\"))\n}\n\nfunc TestNewDynamicCustomHeaderHandler(t *testing.T) {\n",
                      "markdown": "`\n\treq := &request.Request{HTTPRequest: httpReq}\n\thandler.Fn(req)\n\tassert.Equal(t, \"test\", req.HTTPRequest.Header.Get(\"name\"))\n}\n\nfunc TestNewDynamicCustomHeaderHandler(t *testing.T) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/handlers/compress.go"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 16,
                  "endLine": 39,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t\t\t}\n\n\t\t\tbuf := new(bytes.Buffer)\n\t\t\tg := gzipPool.Get().(*gzip.Writer)\n\t\t\tg.Reset(buf)\n\t\t\tsize, err := io.Copy(g, req.GetBody())\n\t\t\tif err != nil {\n",
                    "rendered": {
                      "text": "\t\t\t}\n\n\t\t\tbuf := new(bytes.Buffer)\n\t\t\tg := gzipPool.Get().(*gzip.Writer)\n\t\t\tg.Reset(buf)\n\t\t\tsize, err := io.Copy(g, req.GetBody())\n\t\t\tif err != nil {\n",
                      "markdown": "`\t\t\t}\n\n\t\t\tbuf := new(bytes.Buffer)\n\t\t\tg := gzipPool.Get().(*gzip.Writer)\n\t\t\tg.Reset(buf)\n\t\t\tsize, err := io.Copy(g, req.GetBody())\n\t\t\tif err != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/service/configprovider/provider_test.go"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 27,
                  "endLine": 34,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\tproviderSettings := GetSettings([]string{filepath.Join(\"../../translator/tocwconfig/sampleConfig\", \"config_with_env.yaml\")}, zap.NewNop())\n\tprovider, err := otelcol.NewConfigProvider(providerSettings)\n\tassert.NoError(t, err)\n\tactualCfg, err := provider.Get(context.Background(), factories)\n\tassert.NoError(t, err)\n\tid := component.MustNewIDWithName(\"awscloudwatchlogs\", \"emf_logs\")\n\tgot, ok := actualCfg.Exporters[id]\n",
                    "rendered": {
                      "text": "\tproviderSettings := GetSettings([]string{filepath.Join(\"../../translator/tocwconfig/sampleConfig\", \"config_with_env.yaml\")}, zap.NewNop())\n\tprovider, err := otelcol.NewConfigProvider(providerSettings)\n\tassert.NoError(t, err)\n\tactualCfg, err := provider.Get(context.Background(), factories)\n\tassert.NoError(t, err)\n\tid := component.MustNewIDWithName(\"awscloudwatchlogs\", \"emf_logs\")\n\tgot, ok := actualCfg.Exporters[id]\n",
                      "markdown": "`\tproviderSettings := GetSettings([]string{filepath.Join(\"../../translator/tocwconfig/sampleConfig\", \"config_with_env.yaml\")}, zap.NewNop())\n\tprovider, err := otelcol.NewConfigProvider(providerSettings)\n\tassert.NoError(t, err)\n\tactualCfg, err := provider.Get(context.Background(), factories)\n\tassert.NoError(t, err)\n\tid := component.MustNewIDWithName(\"awscloudwatchlogs\", \"emf_logs\")\n\tgot, ok := actualCfg.Exporters[id]\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_rpm.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\necho \"*************************************************\"\necho \"Creating rpm file for Amazon Linux and RHEL ${ARCH}\"\necho \"*************************************************\"\nset -e\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\necho \"*************************************************\"\necho \"Creating rpm file for Amazon Linux and RHEL ${ARCH}\"\necho \"*************************************************\"\nset -e\n",
                      "markdown": "`#!/usr/bin/env bash\necho \"*************************************************\"\necho \"Creating rpm file for Amazon Linux and RHEL ${ARCH}\"\necho \"*************************************************\"\nset -e\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_rpm.sh"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 57,
                  "endColumn": 3,
                  "snippet": {
                    "text": "rpmbuild -bb -v --clean --define \"AGENT_VERSION $AGENT_VERSION\" --define \"_topdir ${BUILD_ROOT}\" ${SPEC_FILE} --target ${TARGET_SUPPORTED_ARCH}\n\necho \"Copying rpm files to bin\"\n\nmv ${BUILD_ROOT}/RPMS/${TARGET_SUPPORTED_ARCH}/amazon-cloudwatch-agent-${AGENT_VERSION}-1.${TARGET_SUPPORTED_ARCH}.rpm ${BUILD_SPACE}/bin/linux/${ARCH}/amazon-cloudwatch-agent.rpm\nls -ltr ${BUILD_SPACE}/bin/linux/${ARCH}/*.rpm\n",
                    "rendered": {
                      "text": "rpmbuild -bb -v --clean --define \"AGENT_VERSION $AGENT_VERSION\" --define \"_topdir ${BUILD_ROOT}\" ${SPEC_FILE} --target ${TARGET_SUPPORTED_ARCH}\n\necho \"Copying rpm files to bin\"\n\nmv ${BUILD_ROOT}/RPMS/${TARGET_SUPPORTED_ARCH}/amazon-cloudwatch-agent-${AGENT_VERSION}-1.${TARGET_SUPPORTED_ARCH}.rpm ${BUILD_SPACE}/bin/linux/${ARCH}/amazon-cloudwatch-agent.rpm\nls -ltr ${BUILD_SPACE}/bin/linux/${ARCH}/*.rpm\n",
                      "markdown": "`rpmbuild -bb -v --clean --define \"AGENT_VERSION $AGENT_VERSION\" --define \"_topdir ${BUILD_ROOT}\" ${SPEC_FILE} --target ${TARGET_SUPPORTED_ARCH}\n\necho \"Copying rpm files to bin\"\n\nmv ${BUILD_ROOT}/RPMS/${TARGET_SUPPORTED_ARCH}/amazon-cloudwatch-agent-${AGENT_VERSION}-1.${TARGET_SUPPORTED_ARCH}.rpm ${BUILD_SPACE}/bin/linux/${ARCH}/amazon-cloudwatch-agent.rpm\nls -ltr ${BUILD_SPACE}/bin/linux/${ARCH}/*.rpm\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_rpm.sh"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 13,
                  "endLine": 55,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\nrpmbuild -bb -v --clean --define \"AGENT_VERSION $AGENT_VERSION\" --define \"_topdir ${BUILD_ROOT}\" ${SPEC_FILE} --target ${TARGET_SUPPORTED_ARCH}\n\necho \"Copying rpm files to bin\"\n\nmv ${BUILD_ROOT}/RPMS/${TARGET_SUPPORTED_ARCH}/amazon-cloudwatch-agent-${AGENT_VERSION}-1.${TARGET_SUPPORTED_ARCH}.rpm ${BUILD_SPACE}/bin/linux/${ARCH}/amazon-cloudwatch-agent.rpm\nls -ltr ${BUILD_SPACE}/bin/linux/${ARCH}/*.rpm\n",
                    "rendered": {
                      "text": "\nrpmbuild -bb -v --clean --define \"AGENT_VERSION $AGENT_VERSION\" --define \"_topdir ${BUILD_ROOT}\" ${SPEC_FILE} --target ${TARGET_SUPPORTED_ARCH}\n\necho \"Copying rpm files to bin\"\n\nmv ${BUILD_ROOT}/RPMS/${TARGET_SUPPORTED_ARCH}/amazon-cloudwatch-agent-${AGENT_VERSION}-1.${TARGET_SUPPORTED_ARCH}.rpm ${BUILD_SPACE}/bin/linux/${ARCH}/amazon-cloudwatch-agent.rpm\nls -ltr ${BUILD_SPACE}/bin/linux/${ARCH}/*.rpm\n",
                      "markdown": "`\nrpmbuild -bb -v --clean --define \"AGENT_VERSION $AGENT_VERSION\" --define \"_topdir ${BUILD_ROOT}\" ${SPEC_FILE} --target ${TARGET_SUPPORTED_ARCH}\n\necho \"Copying rpm files to bin\"\n\nmv ${BUILD_ROOT}/RPMS/${TARGET_SUPPORTED_ARCH}/amazon-cloudwatch-agent-${AGENT_VERSION}-1.${TARGET_SUPPORTED_ARCH}.rpm ${BUILD_SPACE}/bin/linux/${ARCH}/amazon-cloudwatch-agent.rpm\nls -ltr ${BUILD_SPACE}/bin/linux/${ARCH}/*.rpm\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_rpm.sh"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 18,
                  "endLine": 51,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nrm -rf ${BUILD_ROOT}/SOURCES/opt ${BUILD_ROOT}/SOURCES/etc\n\necho \"Creating the rpm package\"\n\nrpmbuild -bb -v --clean --define \"AGENT_VERSION $AGENT_VERSION\" --define \"_topdir ${BUILD_ROOT}\" ${SPEC_FILE} --target ${TARGET_SUPPORTED_ARCH}\n\n",
                    "rendered": {
                      "text": "\nrm -rf ${BUILD_ROOT}/SOURCES/opt ${BUILD_ROOT}/SOURCES/etc\n\necho \"Creating the rpm package\"\n\nrpmbuild -bb -v --clean --define \"AGENT_VERSION $AGENT_VERSION\" --define \"_topdir ${BUILD_ROOT}\" ${SPEC_FILE} --target ${TARGET_SUPPORTED_ARCH}\n\n",
                      "markdown": "`\nrm -rf ${BUILD_ROOT}/SOURCES/opt ${BUILD_ROOT}/SOURCES/etc\n\necho \"Creating the rpm package\"\n\nrpmbuild -bb -v --clean --define \"AGENT_VERSION $AGENT_VERSION\" --define \"_topdir ${BUILD_ROOT}\" ${SPEC_FILE} --target ${TARGET_SUPPORTED_ARCH}\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_rpm.sh"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 99,
                  "endLine": 47,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\ntar -zcvf ${BUILD_ROOT}/SOURCES/amazon-cloudwatch-agent.tar.gz -C ${BUILD_ROOT}/SOURCES opt etc\n\nrm -rf ${BUILD_ROOT}/SOURCES/opt ${BUILD_ROOT}/SOURCES/etc\n\n",
                    "rendered": {
                      "text": "\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\ntar -zcvf ${BUILD_ROOT}/SOURCES/amazon-cloudwatch-agent.tar.gz -C ${BUILD_ROOT}/SOURCES opt etc\n\nrm -rf ${BUILD_ROOT}/SOURCES/opt ${BUILD_ROOT}/SOURCES/etc\n\n",
                      "markdown": "`\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\ntar -zcvf ${BUILD_ROOT}/SOURCES/amazon-cloudwatch-agent.tar.gz -C ${BUILD_ROOT}/SOURCES opt etc\n\nrm -rf ${BUILD_ROOT}/SOURCES/opt ${BUILD_ROOT}/SOURCES/etc\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_rpm.sh"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 97,
                  "endLine": 46,
                  "endColumn": 6,
                  "snippet": {
                    "text": "cp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/doc/\n\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\ntar -zcvf ${BUILD_ROOT}/SOURCES/amazon-cloudwatch-agent.tar.gz -C ${BUILD_ROOT}/SOURCES opt etc\n\nrm -rf ${BUILD_ROOT}/SOURCES/opt ${BUILD_ROOT}/SOURCES/etc\n",
                    "rendered": {
                      "text": "cp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/doc/\n\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\ntar -zcvf ${BUILD_ROOT}/SOURCES/amazon-cloudwatch-agent.tar.gz -C ${BUILD_ROOT}/SOURCES opt etc\n\nrm -rf ${BUILD_ROOT}/SOURCES/opt ${BUILD_ROOT}/SOURCES/etc\n",
                      "markdown": "`cp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/doc/\n\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\ntar -zcvf ${BUILD_ROOT}/SOURCES/amazon-cloudwatch-agent.tar.gz -C ${BUILD_ROOT}/SOURCES opt etc\n\nrm -rf ${BUILD_ROOT}/SOURCES/opt ${BUILD_ROOT}/SOURCES/etc\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_rpm.sh"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 93,
                  "endLine": 45,
                  "endColumn": 6,
                  "snippet": {
                    "text": "ATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/SOURCES/etc/init/amazon-cloudwatch-agent.conf\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/doc/\n\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\ntar -zcvf ${BUILD_ROOT}/SOURCES/amazon-cloudwatch-agent.tar.gz -C ${BUILD_ROOT}/SOURCES opt etc\n\nrm -rf ${BU",
                    "rendered": {
                      "text": "ATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/SOURCES/etc/init/amazon-cloudwatch-agent.conf\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/doc/\n\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\ntar -zcvf ${BUILD_ROOT}/SOURCES/amazon-cloudwatch-agent.tar.gz -C ${BUILD_ROOT}/SOURCES opt etc\n\nrm -rf ${BU",
                      "markdown": "`ATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/SOURCES/etc/init/amazon-cloudwatch-agent.conf\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/doc/\n\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\ntar -zcvf ${BUILD_ROOT}/SOURCES/amazon-cloudwatch-agent.tar.gz -C ${BUILD_ROOT}/SOURCES opt etc\n\nrm -rf ${BU`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_rpm.sh"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 44,
                  "endColumn": 6,
                  "snippet": {
                    "text": "TH}/common-config.toml ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/SOURCES/etc/init/amazon-cloudwatch-agent.conf\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/doc/\n\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\ntar -zcvf ${BU",
                    "rendered": {
                      "text": "TH}/common-config.toml ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/SOURCES/etc/init/amazon-cloudwatch-agent.conf\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/doc/\n\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\ntar -zcvf ${BU",
                      "markdown": "`TH}/common-config.toml ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/SOURCES/etc/init/amazon-cloudwatch-agent.conf\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/doc/\n\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\ntar -zcvf ${BU`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_rpm.sh"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 105,
                  "endLine": 42,
                  "endColumn": 3,
                  "snippet": {
                    "text": "REPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/SOURCES/etc/init/amazon-cloudwatch-agent.conf\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/doc/\n\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ct",
                    "rendered": {
                      "text": "REPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/SOURCES/etc/init/amazon-cloudwatch-agent.conf\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/doc/\n\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ct",
                      "markdown": "`REPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/SOURCES/etc/init/amazon-cloudwatch-agent.conf\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/doc/\n\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ct`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_rpm.sh"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 94,
                  "endLine": 41,
                  "endColumn": 3,
                  "snippet": {
                    "text": "REPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/SOURCES/etc/init/amazon-cloudwatch-agent.conf\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/doc/\n\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwa",
                    "rendered": {
                      "text": "REPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/SOURCES/etc/init/amazon-cloudwatch-agent.conf\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/doc/\n\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwa",
                      "markdown": "`REPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/SOURCES/etc/init/amazon-cloudwatch-agent.conf\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/doc/\n\nchmod ug+rx ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwa`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_rpm.sh"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 105,
                  "endLine": 40,
                  "endColumn": 3,
                  "snippet": {
                    "text": "loudwatch-agent-config-wizard ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/SOURCES/etc/init/amazon-cloudwatch-agent.conf\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-a",
                    "rendered": {
                      "text": "loudwatch-agent-config-wizard ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/SOURCES/etc/init/amazon-cloudwatch-agent.conf\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-a",
                      "markdown": "`loudwatch-agent-config-wizard ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/SOURCES/etc/init/amazon-cloudwatch-agent.conf\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-a`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_rpm.sh"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 105,
                  "endLine": 39,
                  "endColumn": 3,
                  "snippet": {
                    "text": "TH}/config-downloader ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/SOURCES/etc/init/amazon-cloudwatch-agent.c",
                    "rendered": {
                      "text": "TH}/config-downloader ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/SOURCES/etc/init/amazon-cloudwatch-agent.c",
                      "markdown": "`TH}/config-downloader ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/SOURCES/etc/init/amazon-cloudwatch-agent.c`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_rpm.sh"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 113,
                  "endLine": 38,
                  "endColumn": 3,
                  "snippet": {
                    "text": "p ${PREPKGPATH}/config-translator ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/e",
                    "rendered": {
                      "text": "p ${PREPKGPATH}/config-translator ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/e",
                      "markdown": "`p ${PREPKGPATH}/config-translator ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/e`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_rpm.sh"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 93,
                  "endLine": 37,
                  "endColumn": 3,
                  "snippet": {
                    "text": "cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/SOURCES/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/SOURCES/opt/aws/amazon",
                    "rendered": {
                      "text": "cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/SOURCES/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/SOURCES/opt/aws/amazon",
                      "markdown": "`cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/SOURCES/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/SOURCES/opt/aws/amazon`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_rpm.sh"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 93,
                  "endLine": 36,
                  "endColumn": 3,
                  "snippet": {
                    "text": "-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/SOURCES/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-",
                    "rendered": {
                      "text": "-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/SOURCES/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-",
                      "markdown": "`-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/SOURCES/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_rpm.sh"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 90,
                  "endLine": 35,
                  "endColumn": 3,
                  "snippet": {
                    "text": "/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/SOURCES/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\nc",
                    "rendered": {
                      "text": "/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/SOURCES/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\nc",
                      "markdown": "`/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/SOURCES/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\nc`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_rpm.sh"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 103,
                  "endLine": 34,
                  "endColumn": 3,
                  "snippet": {
                    "text": "ent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/SOURCES/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-",
                    "rendered": {
                      "text": "ent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/SOURCES/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-",
                      "markdown": "`ent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/SOURCES/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_rpm.sh"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 99,
                  "endLine": 33,
                  "endColumn": 3,
                  "snippet": {
                    "text": "azon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/SOURCES/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPAT",
                    "rendered": {
                      "text": "azon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/SOURCES/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPAT",
                      "markdown": "`azon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/SOURCES/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPAT`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_rpm.sh"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 91,
                  "endLine": 32,
                  "endColumn": 3,
                  "snippet": {
                    "text": "/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/SOURCES/etc/systemd/system/\ncp ${PRE",
                    "rendered": {
                      "text": "/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/SOURCES/etc/systemd/system/\ncp ${PRE",
                      "markdown": "`/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/SOURCES/etc/systemd/system/\ncp ${PRE`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_rpm.sh"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 85,
                  "endLine": 31,
                  "endColumn": 3,
                  "snippet": {
                    "text": "}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PR",
                    "rendered": {
                      "text": "}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PR",
                      "markdown": "`}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PR`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_rpm.sh"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 92,
                  "endLine": 30,
                  "endColumn": 3,
                  "snippet": {
                    "text": "stemd/system/\n\necho \"Copying application files\"\n\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-c",
                    "rendered": {
                      "text": "stemd/system/\n\necho \"Copying application files\"\n\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-c",
                      "markdown": "`stemd/system/\n\necho \"Copying application files\"\n\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-c`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_rpm.sh"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 78,
                  "endLine": 29,
                  "endColumn": 3,
                  "snippet": {
                    "text": "echo \"Copying application files\"\n\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\n",
                    "rendered": {
                      "text": "echo \"Copying application files\"\n\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\n",
                      "markdown": "`echo \"Copying application files\"\n\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_rpm.sh"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 79,
                  "endLine": 28,
                  "endColumn": 3,
                  "snippet": {
                    "text": "\necho \"Copying application files\"\n\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\n",
                    "rendered": {
                      "text": "\necho \"Copying application files\"\n\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\n",
                      "markdown": "`\necho \"Copying application files\"\n\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/bin/\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_rpm.sh"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 27,
                  "endColumn": 3,
                  "snippet": {
                    "text": "mkdir -p ${BUILD_ROOT}/SOURCES/etc/systemd/system/\n\necho \"Copying application files\"\n\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\n",
                    "rendered": {
                      "text": "mkdir -p ${BUILD_ROOT}/SOURCES/etc/systemd/system/\n\necho \"Copying application files\"\n\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\n",
                      "markdown": "`mkdir -p ${BUILD_ROOT}/SOURCES/etc/systemd/system/\n\necho \"Copying application files\"\n\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/SOURCES/opt/aws/amazon-cloudwatch-agent/\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_rpm.sh"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 51,
                  "endLine": 9,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\nSPEC_FILE=\"${PREPKGPATH}/amazon-cloudwatch-agent.spec\"\nBUILD_ROOT=\"${BUILD_SPACE}/private/linux_${ARCH}/rpm-build\"\nAGENT_VERSION=$(cat ${PREPKGPATH}/CWAGENT_VERSION | sed -e \"s/-/+/g\")\n\necho \"BUILD_SPACE: ${BUILD_SPACE}  agent_version: ${AGENT_VERSION}  pre-package location:${PREPKGPATH}\"\n\n",
                    "rendered": {
                      "text": "\nSPEC_FILE=\"${PREPKGPATH}/amazon-cloudwatch-agent.spec\"\nBUILD_ROOT=\"${BUILD_SPACE}/private/linux_${ARCH}/rpm-build\"\nAGENT_VERSION=$(cat ${PREPKGPATH}/CWAGENT_VERSION | sed -e \"s/-/+/g\")\n\necho \"BUILD_SPACE: ${BUILD_SPACE}  agent_version: ${AGENT_VERSION}  pre-package location:${PREPKGPATH}\"\n\n",
                      "markdown": "`\nSPEC_FILE=\"${PREPKGPATH}/amazon-cloudwatch-agent.spec\"\nBUILD_ROOT=\"${BUILD_SPACE}/private/linux_${ARCH}/rpm-build\"\nAGENT_VERSION=$(cat ${PREPKGPATH}/CWAGENT_VERSION | sed -e \"s/-/+/g\")\n\necho \"BUILD_SPACE: ${BUILD_SPACE}  agent_version: ${AGENT_VERSION}  pre-package location:${PREPKGPATH}\"\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_rpm.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 14,
                  "endLine": 3,
                  "endColumn": 19,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\necho \"*************************************************\"\necho \"Creating rpm file for Amazon Linux and RHEL ${ARCH}\"\necho \"*************************************************\"\nset -e\n\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\necho \"*************************************************\"\necho \"Creating rpm file for Amazon Linux and RHEL ${ARCH}\"\necho \"*************************************************\"\nset -e\n\n",
                      "markdown": "`#!/usr/bin/env bash\necho \"*************************************************\"\necho \"Creating rpm file for Amazon Linux and RHEL ${ARCH}\"\necho \"*************************************************\"\nset -e\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_rpm.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\necho \"*************************************************\"\necho \"Creating rpm file for Amazon Linux and RHEL ${ARCH}\"\necho \"*************************************************\"\nset -e\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\necho \"*************************************************\"\necho \"Creating rpm file for Amazon Linux and RHEL ${ARCH}\"\necho \"*************************************************\"\nset -e\n",
                      "markdown": "`#!/usr/bin/env bash\necho \"*************************************************\"\necho \"Creating rpm file for Amazon Linux and RHEL ${ARCH}\"\necho \"*************************************************\"\nset -e\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 22,
                  "endLine": 82,
                  "endColumn": 31,
                  "snippet": {
                    "text": "tar czf data.tar.gz opt etc usr var --owner=0 --group=0\ncd ~-\ncd ${BUILD_ROOT}\ntar czf control.tar.gz control conffiles preinst prerm --owner=0 --group=0\ncd ~-\n\necho \"Creating the debian package\"\n",
                    "rendered": {
                      "text": "tar czf data.tar.gz opt etc usr var --owner=0 --group=0\ncd ~-\ncd ${BUILD_ROOT}\ntar czf control.tar.gz control conffiles preinst prerm --owner=0 --group=0\ncd ~-\n\necho \"Creating the debian package\"\n",
                      "markdown": "`tar czf data.tar.gz opt etc usr var --owner=0 --group=0\ncd ~-\ncd ${BUILD_ROOT}\ntar czf control.tar.gz control conffiles preinst prerm --owner=0 --group=0\ncd ~-\n\necho \"Creating the debian package\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 22,
                  "endLine": 63,
                  "endColumn": 31,
                  "snippet": {
                    "text": "chmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\n\necho \"Constructing the control file\"\necho 'Package: amazon-cloudwatch-agent' >${BUILD_ROOT}/control\necho \"Architecture: ${ARCH}\" >>${BUILD_ROOT}/control\necho -n 'Version: ' >>${BUILD_ROOT}/control\n",
                    "rendered": {
                      "text": "chmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\n\necho \"Constructing the control file\"\necho 'Package: amazon-cloudwatch-agent' >${BUILD_ROOT}/control\necho \"Architecture: ${ARCH}\" >>${BUILD_ROOT}/control\necho -n 'Version: ' >>${BUILD_ROOT}/control\n",
                      "markdown": "`chmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\n\necho \"Constructing the control file\"\necho 'Package: amazon-cloudwatch-agent' >${BUILD_ROOT}/control\necho \"Architecture: ${ARCH}\" >>${BUILD_ROOT}/control\necho -n 'Version: ' >>${BUILD_ROOT}/control\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\necho \"****************************************\"\necho \"Creating deb file for Debian Linux ${ARCH}\"\necho \"****************************************\"\nset -e\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\necho \"****************************************\"\necho \"Creating deb file for Debian Linux ${ARCH}\"\necho \"****************************************\"\nset -e\n",
                      "markdown": "`#!/usr/bin/env bash\necho \"****************************************\"\necho \"Creating deb file for Debian Linux ${ARCH}\"\necho \"****************************************\"\nset -e\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 93,
                  "endColumn": 3,
                  "snippet": {
                    "text": "ar r ${BUILD_ROOT}/bin/amazon-cloudwatch-agent-${AGENT_VERSION}-1.deb ${BUILD_ROOT}/data.tar.gz\n\necho \"Copying debian files to bin\"\n\nmv ${BUILD_ROOT}/bin/amazon-cloudwatch-agent-${AGENT_VERSION}-1.deb ${BUILD_SPACE}/bin/linux/${ARCH}/amazon-cloudwatch-agent.deb\nls -ltr ${BUILD_SPACE}/bin/linux/${ARCH}/*.deb\n",
                    "rendered": {
                      "text": "ar r ${BUILD_ROOT}/bin/amazon-cloudwatch-agent-${AGENT_VERSION}-1.deb ${BUILD_ROOT}/data.tar.gz\n\necho \"Copying debian files to bin\"\n\nmv ${BUILD_ROOT}/bin/amazon-cloudwatch-agent-${AGENT_VERSION}-1.deb ${BUILD_SPACE}/bin/linux/${ARCH}/amazon-cloudwatch-agent.deb\nls -ltr ${BUILD_SPACE}/bin/linux/${ARCH}/*.deb\n",
                      "markdown": "`ar r ${BUILD_ROOT}/bin/amazon-cloudwatch-agent-${AGENT_VERSION}-1.deb ${BUILD_ROOT}/data.tar.gz\n\necho \"Copying debian files to bin\"\n\nmv ${BUILD_ROOT}/bin/amazon-cloudwatch-agent-${AGENT_VERSION}-1.deb ${BUILD_SPACE}/bin/linux/${ARCH}/amazon-cloudwatch-agent.deb\nls -ltr ${BUILD_SPACE}/bin/linux/${ARCH}/*.deb\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 16,
                  "endLine": 82,
                  "endColumn": 4,
                  "snippet": {
                    "text": "cd ${BUILD_ROOT}\ntar czf data.tar.gz opt etc usr var --owner=0 --group=0\ncd ~-\ncd ${BUILD_ROOT}\ntar czf control.tar.gz control conffiles preinst prerm --owner=0 --group=0\ncd ~-\n\necho \"Creating the debian package\"\n",
                    "rendered": {
                      "text": "cd ${BUILD_ROOT}\ntar czf data.tar.gz opt etc usr var --owner=0 --group=0\ncd ~-\ncd ${BUILD_ROOT}\ntar czf control.tar.gz control conffiles preinst prerm --owner=0 --group=0\ncd ~-\n\necho \"Creating the debian package\"\n",
                      "markdown": "`cd ${BUILD_ROOT}\ntar czf data.tar.gz opt etc usr var --owner=0 --group=0\ncd ~-\ncd ${BUILD_ROOT}\ntar czf control.tar.gz control conffiles preinst prerm --owner=0 --group=0\ncd ~-\n\necho \"Creating the debian package\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 16,
                  "endLine": 79,
                  "endColumn": 4,
                  "snippet": {
                    "text": "cd ~-\n\n# the below permissioning is required by debian\ncd ${BUILD_ROOT}\ntar czf data.tar.gz opt etc usr var --owner=0 --group=0\ncd ~-\ncd ${BUILD_ROOT}\ntar czf control.tar.gz control conffiles preinst prerm --owner=0 --group=0\n",
                    "rendered": {
                      "text": "cd ~-\n\n# the below permissioning is required by debian\ncd ${BUILD_ROOT}\ntar czf data.tar.gz opt etc usr var --owner=0 --group=0\ncd ~-\ncd ${BUILD_ROOT}\ntar czf control.tar.gz control conffiles preinst prerm --owner=0 --group=0\n",
                      "markdown": "`cd ~-\n\n# the below permissioning is required by debian\ncd ${BUILD_ROOT}\ntar czf data.tar.gz opt etc usr var --owner=0 --group=0\ncd ~-\ncd ${BUILD_ROOT}\ntar czf control.tar.gz control conffiles preinst prerm --owner=0 --group=0\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 23,
                  "endLine": 74,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\necho \"Setting permissioning as required by debian\"\ncd ${BUILD_ROOT}/..\nfind ./debian -type d | xargs chmod 755\ncd ~-\n\n# the below permissioning is required by debian\n",
                    "rendered": {
                      "text": "\necho \"Setting permissioning as required by debian\"\ncd ${BUILD_ROOT}/..\nfind ./debian -type d | xargs chmod 755\ncd ~-\n\n# the below permissioning is required by debian\n",
                      "markdown": "`\necho \"Setting permissioning as required by debian\"\ncd ${BUILD_ROOT}/..\nfind ./debian -type d | xargs chmod 755\ncd ~-\n\n# the below permissioning is required by debian\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 19,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "cat ${BUILD_SPACE}/packaging/debian/control >>${BUILD_ROOT}/control\n\necho \"Setting permissioning as required by debian\"\ncd ${BUILD_ROOT}/..\nfind ./debian -type d | xargs chmod 755\ncd ~-\n\n# the below permissioning is required by debian\n",
                    "rendered": {
                      "text": "cat ${BUILD_SPACE}/packaging/debian/control >>${BUILD_ROOT}/control\n\necho \"Setting permissioning as required by debian\"\ncd ${BUILD_ROOT}/..\nfind ./debian -type d | xargs chmod 755\ncd ~-\n\n# the below permissioning is required by debian\n",
                      "markdown": "`cat ${BUILD_SPACE}/packaging/debian/control >>${BUILD_ROOT}/control\n\necho \"Setting permissioning as required by debian\"\ncd ${BUILD_ROOT}/..\nfind ./debian -type d | xargs chmod 755\ncd ~-\n\n# the below permissioning is required by debian\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 70,
                  "endColumn": 4,
                  "snippet": {
                    "text": "echo -n 'Version: ' >>${BUILD_ROOT}/control\necho -n ${AGENT_VERSION} >>${BUILD_ROOT}/control\necho '-1' >>${BUILD_ROOT}/control\n\ncat ${BUILD_SPACE}/packaging/debian/control >>${BUILD_ROOT}/control\n\necho \"Setting permissioning as required by debian\"\ncd ${BUILD_ROOT}/..\n",
                    "rendered": {
                      "text": "echo -n 'Version: ' >>${BUILD_ROOT}/control\necho -n ${AGENT_VERSION} >>${BUILD_ROOT}/control\necho '-1' >>${BUILD_ROOT}/control\n\ncat ${BUILD_SPACE}/packaging/debian/control >>${BUILD_ROOT}/control\n\necho \"Setting permissioning as required by debian\"\ncd ${BUILD_ROOT}/..\n",
                      "markdown": "`echo -n 'Version: ' >>${BUILD_ROOT}/control\necho -n ${AGENT_VERSION} >>${BUILD_ROOT}/control\necho '-1' >>${BUILD_ROOT}/control\n\ncat ${BUILD_SPACE}/packaging/debian/control >>${BUILD_ROOT}/control\n\necho \"Setting permissioning as required by debian\"\ncd ${BUILD_ROOT}/..\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 89,
                  "endLine": 61,
                  "endColumn": 6,
                  "snippet": {
                    "text": "cp ${BUILD_SPACE}/packaging/debian/debian-binary ${BUILD_ROOT}/\n\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\n\necho \"Constructing the control file\"\necho 'Package: amazon-cloudwatch-agent' >${BUILD_ROOT}/control\n",
                    "rendered": {
                      "text": "cp ${BUILD_SPACE}/packaging/debian/debian-binary ${BUILD_ROOT}/\n\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\n\necho \"Constructing the control file\"\necho 'Package: amazon-cloudwatch-agent' >${BUILD_ROOT}/control\n",
                      "markdown": "`cp ${BUILD_SPACE}/packaging/debian/debian-binary ${BUILD_ROOT}/\n\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\n\necho \"Constructing the control file\"\necho 'Package: amazon-cloudwatch-agent' >${BUILD_ROOT}/control\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 85,
                  "endLine": 60,
                  "endColumn": 6,
                  "snippet": {
                    "text": "cp ${BUILD_SPACE}/packaging/debian/prerm ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/debian-binary ${BUILD_ROOT}/\n\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\n\necho \"Constructing the control file\"\n",
                    "rendered": {
                      "text": "cp ${BUILD_SPACE}/packaging/debian/prerm ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/debian-binary ${BUILD_ROOT}/\n\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\n\necho \"Constructing the control file\"\n",
                      "markdown": "`cp ${BUILD_SPACE}/packaging/debian/prerm ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/debian-binary ${BUILD_ROOT}/\n\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\n\necho \"Constructing the control file\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 59,
                  "endColumn": 6,
                  "snippet": {
                    "text": "cp ${BUILD_SPACE}/packaging/debian/preinst ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/prerm ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/debian-binary ${BUILD_ROOT}/\n\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\n\n",
                    "rendered": {
                      "text": "cp ${BUILD_SPACE}/packaging/debian/preinst ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/prerm ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/debian-binary ${BUILD_ROOT}/\n\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\n\n",
                      "markdown": "`cp ${BUILD_SPACE}/packaging/debian/preinst ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/prerm ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/debian-binary ${BUILD_ROOT}/\n\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 55,
                  "endLine": 57,
                  "endColumn": 3,
                  "snippet": {
                    "text": "\ncp ${BUILD_SPACE}/packaging/debian/conffiles ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/preinst ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/prerm ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/debian-binary ${BUILD_ROOT}/\n\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\n",
                    "rendered": {
                      "text": "\ncp ${BUILD_SPACE}/packaging/debian/conffiles ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/preinst ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/prerm ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/debian-binary ${BUILD_ROOT}/\n\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\n",
                      "markdown": "`\ncp ${BUILD_SPACE}/packaging/debian/conffiles ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/preinst ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/prerm ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/debian-binary ${BUILD_ROOT}/\n\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 57,
                  "endLine": 56,
                  "endColumn": 3,
                  "snippet": {
                    "text": "ln -f -s /opt/aws/amazon-cloudwatch-agent/var ${BUILD_ROOT}/var/run/amazon/amazon-cloudwatch-agent\n\ncp ${BUILD_SPACE}/packaging/debian/conffiles ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/preinst ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/prerm ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/debian-binary ${BUILD_ROOT}/\n\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent\n",
                    "rendered": {
                      "text": "ln -f -s /opt/aws/amazon-cloudwatch-agent/var ${BUILD_ROOT}/var/run/amazon/amazon-cloudwatch-agent\n\ncp ${BUILD_SPACE}/packaging/debian/conffiles ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/preinst ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/prerm ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/debian-binary ${BUILD_ROOT}/\n\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent\n",
                      "markdown": "`ln -f -s /opt/aws/amazon-cloudwatch-agent/var ${BUILD_ROOT}/var/run/amazon/amazon-cloudwatch-agent\n\ncp ${BUILD_SPACE}/packaging/debian/conffiles ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/preinst ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/prerm ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/debian-binary ${BUILD_ROOT}/\n\nchmod ug+rx ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 59,
                  "endLine": 55,
                  "endColumn": 3,
                  "snippet": {
                    "text": "mkdir -p ${BUILD_ROOT}/var/run/amazon\nln -f -s /opt/aws/amazon-cloudwatch-agent/var ${BUILD_ROOT}/var/run/amazon/amazon-cloudwatch-agent\n\ncp ${BUILD_SPACE}/packaging/debian/conffiles ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/preinst ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/prerm ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/debian-binary ${BUILD_ROOT}/\n\n",
                    "rendered": {
                      "text": "mkdir -p ${BUILD_ROOT}/var/run/amazon\nln -f -s /opt/aws/amazon-cloudwatch-agent/var ${BUILD_ROOT}/var/run/amazon/amazon-cloudwatch-agent\n\ncp ${BUILD_SPACE}/packaging/debian/conffiles ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/preinst ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/prerm ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/debian-binary ${BUILD_ROOT}/\n\n",
                      "markdown": "`mkdir -p ${BUILD_ROOT}/var/run/amazon\nln -f -s /opt/aws/amazon-cloudwatch-agent/var ${BUILD_ROOT}/var/run/amazon/amazon-cloudwatch-agent\n\ncp ${BUILD_SPACE}/packaging/debian/conffiles ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/preinst ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/prerm ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/debian-binary ${BUILD_ROOT}/\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 54,
                  "endColumn": 3,
                  "snippet": {
                    "text": "# pid\nmkdir -p ${BUILD_ROOT}/var/run/amazon\nln -f -s /opt/aws/amazon-cloudwatch-agent/var ${BUILD_ROOT}/var/run/amazon/amazon-cloudwatch-agent\n\ncp ${BUILD_SPACE}/packaging/debian/conffiles ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/preinst ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/prerm ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/debian-binary ${BUILD_ROOT}/\n",
                    "rendered": {
                      "text": "# pid\nmkdir -p ${BUILD_ROOT}/var/run/amazon\nln -f -s /opt/aws/amazon-cloudwatch-agent/var ${BUILD_ROOT}/var/run/amazon/amazon-cloudwatch-agent\n\ncp ${BUILD_SPACE}/packaging/debian/conffiles ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/preinst ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/prerm ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/debian-binary ${BUILD_ROOT}/\n",
                      "markdown": "`# pid\nmkdir -p ${BUILD_ROOT}/var/run/amazon\nln -f -s /opt/aws/amazon-cloudwatch-agent/var ${BUILD_ROOT}/var/run/amazon/amazon-cloudwatch-agent\n\ncp ${BUILD_SPACE}/packaging/debian/conffiles ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/preinst ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/prerm ${BUILD_ROOT}/\ncp ${BUILD_SPACE}/packaging/debian/debian-binary ${BUILD_ROOT}/\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 84,
                  "endLine": 41,
                  "snippet": {
                    "text": "cp ${PREPKGPATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/etc/init/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/doc/\n\n############################# create the symbolic links here to make them managed by dpkg\n# bin\nmkdir -p ${BUILD_ROOT}/usr/bin\nln -f -s /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/usr/bin/amazon-cloudwatch-agent-ctl\n# etc\n",
                    "rendered": {
                      "text": "cp ${PREPKGPATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/etc/init/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/doc/\n\n############################# create the symbolic links here to make them managed by dpkg\n# bin\nmkdir -p ${BUILD_ROOT}/usr/bin\nln -f -s /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/usr/bin/amazon-cloudwatch-agent-ctl\n# etc\n",
                      "markdown": "`cp ${PREPKGPATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/etc/init/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/doc/\n\n############################# create the symbolic links here to make them managed by dpkg\n# bin\nmkdir -p ${BUILD_ROOT}/usr/bin\nln -f -s /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/usr/bin/amazon-cloudwatch-agent-ctl\n# etc\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 69,
                  "endLine": 38,
                  "endColumn": 3,
                  "snippet": {
                    "text": "cp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/etc/init/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/doc/\n\n############################# create the symbolic links here to make them managed by dpkg\n# bin\n",
                    "rendered": {
                      "text": "cp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/etc/init/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/doc/\n\n############################# create the symbolic links here to make them managed by dpkg\n# bin\n",
                      "markdown": "`cp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/etc/init/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/doc/\n\n############################# create the symbolic links here to make them managed by dpkg\n# bin\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 86,
                  "endLine": 37,
                  "endColumn": 3,
                  "snippet": {
                    "text": "dwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/etc/init/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/doc/\n\n############################# create the symbolic links here to make them managed by dpkg\n# bin\nmkdir -p ${BUILD_ROOT}/usr/bin\nl",
                    "rendered": {
                      "text": "dwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/etc/init/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/doc/\n\n############################# create the symbolic links here to make them managed by dpkg\n# bin\nmkdir -p ${BUILD_ROOT}/usr/bin\nl",
                      "markdown": "`dwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/etc/init/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/doc/\n\n############################# create the symbolic links here to make them managed by dpkg\n# bin\nmkdir -p ${BUILD_ROOT}/usr/bin\nl`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 97,
                  "endLine": 36,
                  "endColumn": 3,
                  "snippet": {
                    "text": "p ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/etc/init/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/doc/\n\n############################# create the ",
                    "rendered": {
                      "text": "p ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/etc/init/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/doc/\n\n############################# create the ",
                      "markdown": "`p ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/etc/init/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/doc/\n\n############################# create the `"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 97,
                  "endLine": 35,
                  "endColumn": 3,
                  "snippet": {
                    "text": "agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/etc/init/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.",
                    "rendered": {
                      "text": "agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/etc/init/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.",
                      "markdown": "`agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.conf ${BUILD_ROOT}/etc/init/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 105,
                  "endLine": 34,
                  "endColumn": 3,
                  "snippet": {
                    "text": "T}/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/etc/\ncp ${PREPKGPATH}/ama",
                    "rendered": {
                      "text": "T}/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/etc/\ncp ${PREPKGPATH}/ama",
                      "markdown": "`T}/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/etc/\ncp ${PREPKGPATH}/ama`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 85,
                  "endLine": 33,
                  "endColumn": 3,
                  "snippet": {
                    "text": "LD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\nc",
                    "rendered": {
                      "text": "LD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\nc",
                      "markdown": "`LD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\nc`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 85,
                  "endLine": 32,
                  "endColumn": 3,
                  "snippet": {
                    "text": "pt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPA",
                    "rendered": {
                      "text": "pt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPA",
                      "markdown": "`pt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPA`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 82,
                  "endLine": 31,
                  "endColumn": 3,
                  "snippet": {
                    "text": "/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-am",
                    "rendered": {
                      "text": "/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-am",
                      "markdown": "`/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/start-am`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 95,
                  "endLine": 30,
                  "endColumn": 3,
                  "snippet": {
                    "text": "aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-",
                    "rendered": {
                      "text": "aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-",
                      "markdown": "`aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 91,
                  "endLine": 29,
                  "endColumn": 3,
                  "snippet": {
                    "text": "${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${B",
                    "rendered": {
                      "text": "${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${B",
                      "markdown": "`${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/etc/systemd/system/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/config-downloader ${B`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 83,
                  "endLine": 28,
                  "endColumn": 3,
                  "snippet": {
                    "text": "NOTICE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/etc/systemd/system/\ncp ${PREPKGPATH}/config-translat",
                    "rendered": {
                      "text": "NOTICE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/etc/systemd/system/\ncp ${PREPKGPATH}/config-translat",
                      "markdown": "`NOTICE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.service ${BUILD_ROOT}/etc/systemd/system/\ncp ${PREPKGPATH}/config-translat`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 77,
                  "endLine": 27,
                  "endColumn": 3,
                  "snippet": {
                    "text": "PREPKGPATH}/LICENSE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwa",
                    "rendered": {
                      "text": "PREPKGPATH}/LICENSE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwa",
                      "markdown": "`PREPKGPATH}/LICENSE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwa`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 84,
                  "endLine": 26,
                  "endColumn": 3,
                  "snippet": {
                    "text": "r -p ${BUILD_ROOT}/etc/systemd/system/\n\necho \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BU",
                    "rendered": {
                      "text": "r -p ${BUILD_ROOT}/etc/systemd/system/\n\necho \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BU",
                      "markdown": "`r -p ${BUILD_ROOT}/etc/systemd/system/\n\necho \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BU`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 70,
                  "endLine": 25,
                  "endColumn": 3,
                  "snippet": {
                    "text": "\necho \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\n",
                    "rendered": {
                      "text": "\necho \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\n",
                      "markdown": "`\necho \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 71,
                  "endLine": 24,
                  "endColumn": 3,
                  "snippet": {
                    "text": "mkdir -p ${BUILD_ROOT}/etc/systemd/system/\n\necho \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\n",
                    "rendered": {
                      "text": "mkdir -p ${BUILD_ROOT}/etc/systemd/system/\n\necho \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\n",
                      "markdown": "`mkdir -p ${BUILD_ROOT}/etc/systemd/system/\n\necho \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/bin/\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 32,
                  "endLine": 23,
                  "endColumn": 3,
                  "snippet": {
                    "text": "mkdir -p ${BUILD_ROOT}/etc/init\nmkdir -p ${BUILD_ROOT}/etc/systemd/system/\n\necho \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\n",
                    "rendered": {
                      "text": "mkdir -p ${BUILD_ROOT}/etc/init\nmkdir -p ${BUILD_ROOT}/etc/systemd/system/\n\necho \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\n",
                      "markdown": "`mkdir -p ${BUILD_ROOT}/etc/init\nmkdir -p ${BUILD_ROOT}/etc/systemd/system/\n\necho \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/opt/aws/amazon-cloudwatch-agent/\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_deb.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\necho \"****************************************\"\necho \"Creating deb file for Debian Linux ${ARCH}\"\necho \"****************************************\"\nset -e\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\necho \"****************************************\"\necho \"Creating deb file for Debian Linux ${ARCH}\"\necho \"****************************************\"\nset -e\n",
                      "markdown": "`#!/usr/bin/env bash\necho \"****************************************\"\necho \"Creating deb file for Debian Linux ${ARCH}\"\necho \"****************************************\"\nset -e\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_darwin.sh"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 21,
                  "endLine": 63,
                  "endColumn": 25,
                  "snippet": {
                    "text": "     tar -czf $TAR_NAME *\n)\n\necho \"Archive created at ${BUILD_ROOT}/${TAR_NAME}\"\n\necho \"Copying tarball to bin\"\nmv ${BUILD_ROOT}/${TAR_NAME} ${BUILD_SPACE}/bin/darwin/${ARCH}/${TAR_NAME}\n",
                    "rendered": {
                      "text": "     tar -czf $TAR_NAME *\n)\n\necho \"Archive created at ${BUILD_ROOT}/${TAR_NAME}\"\n\necho \"Copying tarball to bin\"\nmv ${BUILD_ROOT}/${TAR_NAME} ${BUILD_SPACE}/bin/darwin/${ARCH}/${TAR_NAME}\n",
                      "markdown": "`     tar -czf $TAR_NAME *\n)\n\necho \"Archive created at ${BUILD_ROOT}/${TAR_NAME}\"\n\necho \"Copying tarball to bin\"\nmv ${BUILD_ROOT}/${TAR_NAME} ${BUILD_SPACE}/bin/darwin/${ARCH}/${TAR_NAME}\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_darwin.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -e\nset -u\nset -x\nset -o pipefail\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -e\nset -u\nset -x\nset -o pipefail\n",
                      "markdown": "`#!/usr/bin/env bash\nset -e\nset -u\nset -x\nset -o pipefail\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_darwin.sh"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 29,
                  "endLine": 66,
                  "endColumn": 3,
                  "snippet": {
                    "text": "\necho \"Archive created at ${BUILD_ROOT}/${TAR_NAME}\"\n\necho \"Copying tarball to bin\"\nmv ${BUILD_ROOT}/${TAR_NAME} ${BUILD_SPACE}/bin/darwin/${ARCH}/${TAR_NAME}\nls -ltr ${BUILD_SPACE}/bin/darwin/${ARCH}/*.tar.gz\n",
                    "rendered": {
                      "text": "\necho \"Archive created at ${BUILD_ROOT}/${TAR_NAME}\"\n\necho \"Copying tarball to bin\"\nmv ${BUILD_ROOT}/${TAR_NAME} ${BUILD_SPACE}/bin/darwin/${ARCH}/${TAR_NAME}\nls -ltr ${BUILD_SPACE}/bin/darwin/${ARCH}/*.tar.gz\n",
                      "markdown": "`\necho \"Archive created at ${BUILD_ROOT}/${TAR_NAME}\"\n\necho \"Copying tarball to bin\"\nmv ${BUILD_ROOT}/${TAR_NAME} ${BUILD_SPACE}/bin/darwin/${ARCH}/${TAR_NAME}\nls -ltr ${BUILD_SPACE}/bin/darwin/${ARCH}/*.tar.gz\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_darwin.sh"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 4,
                  "endLine": 60,
                  "endColumn": 9,
                  "snippet": {
                    "text": "echo \"Creating tar\"\n(\n     cd ${BUILD_ROOT}\n     tar -czf $TAR_NAME *\n)\n\necho \"Archive created at ${BUILD_ROOT}/${TAR_NAME}\"\n",
                    "rendered": {
                      "text": "echo \"Creating tar\"\n(\n     cd ${BUILD_ROOT}\n     tar -czf $TAR_NAME *\n)\n\necho \"Archive created at ${BUILD_ROOT}/${TAR_NAME}\"\n",
                      "markdown": "`echo \"Creating tar\"\n(\n     cd ${BUILD_ROOT}\n     tar -czf $TAR_NAME *\n)\n\necho \"Archive created at ${BUILD_ROOT}/${TAR_NAME}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_darwin.sh"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 71,
                  "endLine": 55,
                  "endColumn": 6,
                  "snippet": {
                    "text": "echo \"Setting permissions as required by launchd\"\nchmod 600 ${BUILD_ROOT}/Library/LaunchDaemons/*\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/start-amazon-cloudwatch-agent\n\necho \"Creating tar\"\n(\n",
                    "rendered": {
                      "text": "echo \"Setting permissions as required by launchd\"\nchmod 600 ${BUILD_ROOT}/Library/LaunchDaemons/*\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/start-amazon-cloudwatch-agent\n\necho \"Creating tar\"\n(\n",
                      "markdown": "`echo \"Setting permissions as required by launchd\"\nchmod 600 ${BUILD_ROOT}/Library/LaunchDaemons/*\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/start-amazon-cloudwatch-agent\n\necho \"Creating tar\"\n(\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_darwin.sh"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 67,
                  "endLine": 54,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\necho \"Setting permissions as required by launchd\"\nchmod 600 ${BUILD_ROOT}/Library/LaunchDaemons/*\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/start-amazon-cloudwatch-agent\n\necho \"Creating tar\"\n",
                    "rendered": {
                      "text": "\necho \"Setting permissions as required by launchd\"\nchmod 600 ${BUILD_ROOT}/Library/LaunchDaemons/*\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/start-amazon-cloudwatch-agent\n\necho \"Creating tar\"\n",
                      "markdown": "`\necho \"Setting permissions as required by launchd\"\nchmod 600 ${BUILD_ROOT}/Library/LaunchDaemons/*\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/start-amazon-cloudwatch-agent\n\necho \"Creating tar\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_darwin.sh"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 47,
                  "endLine": 53,
                  "endColumn": 6,
                  "snippet": {
                    "text": "cp ${PREPKGPATH}/com.amazon.cloudwatch.agent.plist ${BUILD_ROOT}/Library/LaunchDaemons/\n\necho \"Setting permissions as required by launchd\"\nchmod 600 ${BUILD_ROOT}/Library/LaunchDaemons/*\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/start-amazon-cloudwatch-agent\n\n",
                    "rendered": {
                      "text": "cp ${PREPKGPATH}/com.amazon.cloudwatch.agent.plist ${BUILD_ROOT}/Library/LaunchDaemons/\n\necho \"Setting permissions as required by launchd\"\nchmod 600 ${BUILD_ROOT}/Library/LaunchDaemons/*\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/start-amazon-cloudwatch-agent\n\n",
                      "markdown": "`cp ${PREPKGPATH}/com.amazon.cloudwatch.agent.plist ${BUILD_ROOT}/Library/LaunchDaemons/\n\necho \"Setting permissions as required by launchd\"\nchmod 600 ${BUILD_ROOT}/Library/LaunchDaemons/*\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/start-amazon-cloudwatch-agent\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_darwin.sh"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 49,
                  "endLine": 52,
                  "endColumn": 6,
                  "snippet": {
                    "text": "cp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}${MACHINE_ROOT}doc/\ncp ${PREPKGPATH}/com.amazon.cloudwatch.agent.plist ${BUILD_ROOT}/Library/LaunchDaemons/\n\necho \"Setting permissions as required by launchd\"\nchmod 600 ${BUILD_ROOT}/Library/LaunchDaemons/*\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/start-amazon-cloudwatch-agent\n",
                    "rendered": {
                      "text": "cp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}${MACHINE_ROOT}doc/\ncp ${PREPKGPATH}/com.amazon.cloudwatch.agent.plist ${BUILD_ROOT}/Library/LaunchDaemons/\n\necho \"Setting permissions as required by launchd\"\nchmod 600 ${BUILD_ROOT}/Library/LaunchDaemons/*\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/start-amazon-cloudwatch-agent\n",
                      "markdown": "`cp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}${MACHINE_ROOT}doc/\ncp ${PREPKGPATH}/com.amazon.cloudwatch.agent.plist ${BUILD_ROOT}/Library/LaunchDaemons/\n\necho \"Setting permissions as required by launchd\"\nchmod 600 ${BUILD_ROOT}/Library/LaunchDaemons/*\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/amazon-cloudwatch-agent\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/amazon-cloudwatch-agent-ctl\nchmod ug+rx ${BUILD_ROOT}${MACHINE_ROOT}bin/start-amazon-cloudwatch-agent\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_darwin.sh"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 85,
                  "endLine": 49,
                  "endColumn": 3,
                  "snippet": {
                    "text": "cp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}${MACHINE_ROOT}etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}${MACHINE_ROOT}doc/\ncp ${PREPKGPATH}/com.amazon.cloudwatch.agent.plist ${BUILD_ROOT}/Library/LaunchDaemons/\n\necho \"Setting permissions as required by launchd\"\nchmod 600 ${BUILD_ROOT}/Library/LaunchDaemons/*\n",
                    "rendered": {
                      "text": "cp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}${MACHINE_ROOT}etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}${MACHINE_ROOT}doc/\ncp ${PREPKGPATH}/com.amazon.cloudwatch.agent.plist ${BUILD_ROOT}/Library/LaunchDaemons/\n\necho \"Setting permissions as required by launchd\"\nchmod 600 ${BUILD_ROOT}/Library/LaunchDaemons/*\n",
                      "markdown": "`cp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}${MACHINE_ROOT}etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}${MACHINE_ROOT}doc/\ncp ${PREPKGPATH}/com.amazon.cloudwatch.agent.plist ${BUILD_ROOT}/Library/LaunchDaemons/\n\necho \"Setting permissions as required by launchd\"\nchmod 600 ${BUILD_ROOT}/Library/LaunchDaemons/*\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_darwin.sh"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 68,
                  "endLine": 48,
                  "endColumn": 3,
                  "snippet": {
                    "text": "cp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}${MACHINE_ROOT}etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}${MACHINE_ROOT}doc/\ncp ${PREPKGPATH}/com.amazon.cloudwatch.agent.plist ${BUILD_ROOT}/Library/LaunchDaemons/\n\necho \"Setting permissions as required by launchd\"\n",
                    "rendered": {
                      "text": "cp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}${MACHINE_ROOT}etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}${MACHINE_ROOT}doc/\ncp ${PREPKGPATH}/com.amazon.cloudwatch.agent.plist ${BUILD_ROOT}/Library/LaunchDaemons/\n\necho \"Setting permissions as required by launchd\"\n",
                      "markdown": "`cp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}${MACHINE_ROOT}etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}${MACHINE_ROOT}doc/\ncp ${PREPKGPATH}/com.amazon.cloudwatch.agent.plist ${BUILD_ROOT}/Library/LaunchDaemons/\n\necho \"Setting permissions as required by launchd\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_darwin.sh"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 79,
                  "endLine": 47,
                  "endColumn": 3,
                  "snippet": {
                    "text": "cp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}${MACHINE_ROOT}etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}${MACHINE_ROOT}doc/\ncp ${PREPKGPATH}/com.amazon.cloudwatch.agent.plist ${BUILD_ROOT}/Library/LaunchDaemons/\n\n",
                    "rendered": {
                      "text": "cp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}${MACHINE_ROOT}etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}${MACHINE_ROOT}doc/\ncp ${PREPKGPATH}/com.amazon.cloudwatch.agent.plist ${BUILD_ROOT}/Library/LaunchDaemons/\n\n",
                      "markdown": "`cp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}${MACHINE_ROOT}etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}${MACHINE_ROOT}doc/\ncp ${PREPKGPATH}/com.amazon.cloudwatch.agent.plist ${BUILD_ROOT}/Library/LaunchDaemons/\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_darwin.sh"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 79,
                  "endLine": 46,
                  "endColumn": 3,
                  "snippet": {
                    "text": "${PREPKGPATH}/config-translator ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}${MACHINE_ROOT}etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}${MACHINE_ROOT}doc/\ncp ${PREPKGPATH}/com.amazon.cloudwatch.agent.plist ${BUILD_ROOT}/Lib",
                    "rendered": {
                      "text": "${PREPKGPATH}/config-translator ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}${MACHINE_ROOT}etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}${MACHINE_ROOT}doc/\ncp ${PREPKGPATH}/com.amazon.cloudwatch.agent.plist ${BUILD_ROOT}/Lib",
                      "markdown": "`${PREPKGPATH}/config-translator ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}${MACHINE_ROOT}etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}${MACHINE_ROOT}doc/\ncp ${PREPKGPATH}/com.amazon.cloudwatch.agent.plist ${BUILD_ROOT}/Lib`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_darwin.sh"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 87,
                  "endLine": 45,
                  "endColumn": 3,
                  "snippet": {
                    "text": "p ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}${MACHINE_ROOT}etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}${MACHIN",
                    "rendered": {
                      "text": "p ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}${MACHINE_ROOT}etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}${MACHIN",
                      "markdown": "`p ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}${MACHINE_ROOT}etc/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}${MACHIN`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_darwin.sh"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 67,
                  "endLine": 44,
                  "endColumn": 3,
                  "snippet": {
                    "text": "NE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}${MACH",
                    "rendered": {
                      "text": "NE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}${MACH",
                      "markdown": "`NE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}${MACH`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_darwin.sh"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 67,
                  "endLine": 43,
                  "endColumn": 3,
                  "snippet": {
                    "text": "cp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}${MACHINE_ROOT}bin/\n",
                    "rendered": {
                      "text": "cp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}${MACHINE_ROOT}bin/\n",
                      "markdown": "`cp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}${MACHINE_ROOT}bin/\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_darwin.sh"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 77,
                  "endLine": 42,
                  "endColumn": 3,
                  "snippet": {
                    "text": "cp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\n",
                    "rendered": {
                      "text": "cp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\n",
                      "markdown": "`cp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_darwin.sh"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 73,
                  "endLine": 41,
                  "endColumn": 3,
                  "snippet": {
                    "text": "cp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}${MACHINE_ROOT}bin/\n",
                    "rendered": {
                      "text": "cp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}${MACHINE_ROOT}bin/\n",
                      "markdown": "`cp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard ${BUILD_ROOT}${MACHINE_ROOT}bin/\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_darwin.sh"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 65,
                  "endLine": 40,
                  "endColumn": 3,
                  "snippet": {
                    "text": "cp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}${MACHINE_ROOT}bin/\n",
                    "rendered": {
                      "text": "cp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}${MACHINE_ROOT}bin/\n",
                      "markdown": "`cp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-downloader ${BUILD_ROOT}${MACHINE_ROOT}bin/\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_darwin.sh"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 59,
                  "endLine": 39,
                  "endColumn": 3,
                  "snippet": {
                    "text": "cp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}${MACHINE_ROOT}bin/\n",
                    "rendered": {
                      "text": "cp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}${MACHINE_ROOT}bin/\n",
                      "markdown": "`cp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/config-translator ${BUILD_ROOT}${MACHINE_ROOT}bin/\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_darwin.sh"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 66,
                  "endLine": 38,
                  "endColumn": 3,
                  "snippet": {
                    "text": "echo \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}${MACHINE_ROOT}bin/\n",
                    "rendered": {
                      "text": "echo \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}${MACHINE_ROOT}bin/\n",
                      "markdown": "`echo \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl ${BUILD_ROOT}${MACHINE_ROOT}bin/\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_darwin.sh"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 52,
                  "endLine": 37,
                  "endColumn": 3,
                  "snippet": {
                    "text": "\necho \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\n",
                    "rendered": {
                      "text": "\necho \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\n",
                      "markdown": "`\necho \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}${MACHINE_ROOT}bin/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent ${BUILD_ROOT}${MACHINE_ROOT}bin/\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_darwin.sh"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 53,
                  "endLine": 36,
                  "endColumn": 3,
                  "snippet": {
                    "text": "ln -f -s /opt/aws/amazon-cloudwatch-agent/logs ${BUILD_ROOT}/var/log/amazon/amazon-cloudwatch-agent\n\necho \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}${MACHINE_ROOT}bin/\n",
                    "rendered": {
                      "text": "ln -f -s /opt/aws/amazon-cloudwatch-agent/logs ${BUILD_ROOT}/var/log/amazon/amazon-cloudwatch-agent\n\necho \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}${MACHINE_ROOT}bin/\n",
                      "markdown": "`ln -f -s /opt/aws/amazon-cloudwatch-agent/logs ${BUILD_ROOT}/var/log/amazon/amazon-cloudwatch-agent\n\necho \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}${MACHINE_ROOT}bin/\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_darwin.sh"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 32,
                  "endLine": 35,
                  "endColumn": 3,
                  "snippet": {
                    "text": "mkdir -p ${BUILD_ROOT}/var/log/amazon\nln -f -s /opt/aws/amazon-cloudwatch-agent/logs ${BUILD_ROOT}/var/log/amazon/amazon-cloudwatch-agent\n\necho \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}${MACHINE_ROOT}\n",
                    "rendered": {
                      "text": "mkdir -p ${BUILD_ROOT}/var/log/amazon\nln -f -s /opt/aws/amazon-cloudwatch-agent/logs ${BUILD_ROOT}/var/log/amazon/amazon-cloudwatch-agent\n\necho \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}${MACHINE_ROOT}\n",
                      "markdown": "`mkdir -p ${BUILD_ROOT}/var/log/amazon\nln -f -s /opt/aws/amazon-cloudwatch-agent/logs ${BUILD_ROOT}/var/log/amazon/amazon-cloudwatch-agent\n\necho \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}${MACHINE_ROOT}\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}${MACHINE_ROOT}\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_darwin.sh"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 51,
                  "endLine": 10,
                  "endColumn": 56,
                  "snippet": {
                    "text": "echo \"Creating tar file for Mac OS X ${ARCH}  \"\necho \"****************************************\"\n\nAGENT_VERSION=$(cat ${PREPKGPATH}/CWAGENT_VERSION | sed -e \"s/-/+/g\")\necho \"BUILD_SPACE: ${BUILD_SPACE}    agent_version: ${AGENT_VERSION}  pre-package location:${PREPKGPATH}\"\n\nmkdir -p ${BUILD_SPACE}/bin/darwin/${ARCH}/\n",
                    "rendered": {
                      "text": "echo \"Creating tar file for Mac OS X ${ARCH}  \"\necho \"****************************************\"\n\nAGENT_VERSION=$(cat ${PREPKGPATH}/CWAGENT_VERSION | sed -e \"s/-/+/g\")\necho \"BUILD_SPACE: ${BUILD_SPACE}    agent_version: ${AGENT_VERSION}  pre-package location:${PREPKGPATH}\"\n\nmkdir -p ${BUILD_SPACE}/bin/darwin/${ARCH}/\n",
                      "markdown": "`echo \"Creating tar file for Mac OS X ${ARCH}  \"\necho \"****************************************\"\n\nAGENT_VERSION=$(cat ${PREPKGPATH}/CWAGENT_VERSION | sed -e \"s/-/+/g\")\necho \"BUILD_SPACE: ${BUILD_SPACE}    agent_version: ${AGENT_VERSION}  pre-package location:${PREPKGPATH}\"\n\nmkdir -p ${BUILD_SPACE}/bin/darwin/${ARCH}/\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_darwin.sh"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 19,
                  "snippet": {
                    "text": "set -x\nset -o pipefail\necho \"****************************************\"\necho \"Creating tar file for Mac OS X ${ARCH}  \"\necho \"****************************************\"\n\nAGENT_VERSION=$(cat ${PREPKGPATH}/CWAGENT_VERSION | sed -e \"s/-/+/g\")\n",
                    "rendered": {
                      "text": "set -x\nset -o pipefail\necho \"****************************************\"\necho \"Creating tar file for Mac OS X ${ARCH}  \"\necho \"****************************************\"\n\nAGENT_VERSION=$(cat ${PREPKGPATH}/CWAGENT_VERSION | sed -e \"s/-/+/g\")\n",
                      "markdown": "`set -x\nset -o pipefail\necho \"****************************************\"\necho \"Creating tar file for Mac OS X ${ARCH}  \"\necho \"****************************************\"\n\nAGENT_VERSION=$(cat ${PREPKGPATH}/CWAGENT_VERSION | sed -e \"s/-/+/g\")\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_darwin.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -e\nset -u\nset -x\nset -o pipefail\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -e\nset -u\nset -x\nset -o pipefail\n",
                      "markdown": "`#!/usr/bin/env bash\nset -e\nset -u\nset -x\nset -o pipefail\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_win.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\necho \"****************************************\"\necho \"Creating zip file for Windows amd64\"\necho \"****************************************\"\nset -e\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\necho \"****************************************\"\necho \"Creating zip file for Windows amd64\"\necho \"****************************************\"\nset -e\n",
                      "markdown": "`#!/usr/bin/env bash\necho \"****************************************\"\necho \"Creating zip file for Windows amd64\"\necho \"****************************************\"\nset -e\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_win.sh"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 43,
                  "endColumn": 3,
                  "snippet": {
                    "text": "cd ${BUILD_ROOT}\n\nzip -r amazon-cloudwatch-agent-${AGENT_VERSION}.zip *\n\nmv ${BUILD_ROOT}/amazon-cloudwatch-agent-${AGENT_VERSION}.zip ${BUILD_SPACE}/bin/windows/${ARCH}/amazon-cloudwatch-agent.zip\nls -ltr ${BUILD_SPACE}/bin/windows/${ARCH}/amazon-cloudwatch-agent.zip\n",
                    "rendered": {
                      "text": "cd ${BUILD_ROOT}\n\nzip -r amazon-cloudwatch-agent-${AGENT_VERSION}.zip *\n\nmv ${BUILD_ROOT}/amazon-cloudwatch-agent-${AGENT_VERSION}.zip ${BUILD_SPACE}/bin/windows/${ARCH}/amazon-cloudwatch-agent.zip\nls -ltr ${BUILD_SPACE}/bin/windows/${ARCH}/amazon-cloudwatch-agent.zip\n",
                      "markdown": "`cd ${BUILD_ROOT}\n\nzip -r amazon-cloudwatch-agent-${AGENT_VERSION}.zip *\n\nmv ${BUILD_ROOT}/amazon-cloudwatch-agent-${AGENT_VERSION}.zip ${BUILD_SPACE}/bin/windows/${ARCH}/amazon-cloudwatch-agent.zip\nls -ltr ${BUILD_SPACE}/bin/windows/${ARCH}/amazon-cloudwatch-agent.zip\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_win.sh"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 91,
                  "endLine": 32,
                  "endColumn": 3,
                  "snippet": {
                    "text": "cp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/amazon-cloudwatch-agent/\n\necho \"Constructing the zip package\"\n\n",
                    "rendered": {
                      "text": "cp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/amazon-cloudwatch-agent/\n\necho \"Constructing the zip package\"\n\n",
                      "markdown": "`cp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/amazon-cloudwatch-agent/\n\necho \"Constructing the zip package\"\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_win.sh"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 74,
                  "endLine": 31,
                  "endColumn": 3,
                  "snippet": {
                    "text": "cp ${PREPKGPATH}/config-downloader.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/amazon-cloudwatch-agent/\n\necho \"Constructing the zip package\"\n",
                    "rendered": {
                      "text": "cp ${PREPKGPATH}/config-downloader.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/amazon-cloudwatch-agent/\n\necho \"Constructing the zip package\"\n",
                      "markdown": "`cp ${PREPKGPATH}/config-downloader.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/amazon-cloudwatch-agent/\n\necho \"Constructing the zip package\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_win.sh"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 89,
                  "endLine": 30,
                  "endColumn": 3,
                  "snippet": {
                    "text": "cp ${PREPKGPATH}/config-translator.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-downloader.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/amazon-cloudwatch-agent/\n\n",
                    "rendered": {
                      "text": "cp ${PREPKGPATH}/config-translator.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-downloader.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/amazon-cloudwatch-agent/\n\n",
                      "markdown": "`cp ${PREPKGPATH}/config-translator.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-downloader.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar ${BUILD_ROOT}/amazon-cloudwatch-agent/\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_win.sh"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 97,
                  "endLine": 29,
                  "endColumn": 3,
                  "snippet": {
                    "text": "all.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-translator.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-downloader.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar",
                    "rendered": {
                      "text": "all.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-translator.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-downloader.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar",
                      "markdown": "`all.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-translator.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-downloader.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-schema.json ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/opentelemetry-jmx-metrics.jar`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_win.sh"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 77,
                  "endLine": 28,
                  "endColumn": 3,
                  "snippet": {
                    "text": "agent/\ncp ${PREPKGPATH}/install.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/uninstall.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-translator.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-downloader.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent",
                    "rendered": {
                      "text": "agent/\ncp ${PREPKGPATH}/install.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/uninstall.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-translator.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-downloader.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent",
                      "markdown": "`agent/\ncp ${PREPKGPATH}/install.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/uninstall.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-translator.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-downloader.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/common-config.toml ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_win.sh"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 77,
                  "endLine": 27,
                  "endColumn": 3,
                  "snippet": {
                    "text": "${PREPKGPATH}/amazon-cloudwatch-agent-ctl.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/install.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/uninstall.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-translator.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-downloader.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/common-config.toml $",
                    "rendered": {
                      "text": "${PREPKGPATH}/amazon-cloudwatch-agent-ctl.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/install.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/uninstall.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-translator.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-downloader.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/common-config.toml $",
                      "markdown": "`${PREPKGPATH}/amazon-cloudwatch-agent-ctl.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/install.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/uninstall.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-translator.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-downloader.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/common-config.toml $`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_win.sh"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 69,
                  "endLine": 26,
                  "endColumn": 3,
                  "snippet": {
                    "text": "KGPATH}/amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/install.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/uninstall.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-translator.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-downloader.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent.ex",
                    "rendered": {
                      "text": "KGPATH}/amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/install.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/uninstall.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-translator.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-downloader.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent.ex",
                      "markdown": "`KGPATH}/amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/install.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/uninstall.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-translator.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-downloader.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/start-amazon-cloudwatch-agent.ex`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_win.sh"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 67,
                  "endLine": 25,
                  "endColumn": 3,
                  "snippet": {
                    "text": "PATH}/CWAGENT_VERSION ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/install.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/uninstall.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-translator.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-downloader.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard.exe ${BUILD_ROOT}/amaz",
                    "rendered": {
                      "text": "PATH}/CWAGENT_VERSION ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/install.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/uninstall.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-translator.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-downloader.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard.exe ${BUILD_ROOT}/amaz",
                      "markdown": "`PATH}/CWAGENT_VERSION ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/install.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/uninstall.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-translator.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-downloader.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-config-wizard.exe ${BUILD_ROOT}/amaz`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_win.sh"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 87,
                  "endLine": 24,
                  "endColumn": 3,
                  "snippet": {
                    "text": "TH}/RELEASE_NOTES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/install.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/uninstall.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-translator.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-downloader.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREP",
                    "rendered": {
                      "text": "TH}/RELEASE_NOTES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/install.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/uninstall.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-translator.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-downloader.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREP",
                      "markdown": "`TH}/RELEASE_NOTES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/install.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/uninstall.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-translator.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-downloader.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREP`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_win.sh"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 83,
                  "endLine": 23,
                  "endColumn": 3,
                  "snippet": {
                    "text": " ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/install.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/uninstall.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-translator.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/",
                    "rendered": {
                      "text": " ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/install.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/uninstall.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-translator.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/",
                      "markdown": "` ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/install.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/uninstall.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/config-translator.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_win.sh"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 71,
                  "endLine": 22,
                  "endColumn": 3,
                  "snippet": {
                    "text": "cp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/install.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/uninstall.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\n",
                    "rendered": {
                      "text": "cp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/install.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/uninstall.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\n",
                      "markdown": "`cp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/install.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/uninstall.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_win.sh"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 69,
                  "endLine": 21,
                  "endColumn": 3,
                  "snippet": {
                    "text": "cp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/install.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\n",
                    "rendered": {
                      "text": "cp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/install.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\n",
                      "markdown": "`cp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/install.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_win.sh"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 76,
                  "endLine": 20,
                  "endColumn": 3,
                  "snippet": {
                    "text": "echo \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\n",
                    "rendered": {
                      "text": "echo \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\n",
                      "markdown": "`echo \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent-ctl.ps1 ${BUILD_ROOT}/amazon-cloudwatch-agent/\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_win.sh"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 62,
                  "endLine": 19,
                  "endColumn": 3,
                  "snippet": {
                    "text": "\necho \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\n",
                    "rendered": {
                      "text": "\necho \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\n",
                      "markdown": "`\necho \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/amazon-cloudwatch-agent.exe ${BUILD_ROOT}/amazon-cloudwatch-agent/\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_win.sh"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 63,
                  "endLine": 18,
                  "endColumn": 3,
                  "snippet": {
                    "text": "echo \"Copying application files\"\n\necho \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/amazon-cloudwatch-agent/\n",
                    "rendered": {
                      "text": "echo \"Copying application files\"\n\necho \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/amazon-cloudwatch-agent/\n",
                      "markdown": "`echo \"Copying application files\"\n\necho \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/CWAGENT_VERSION ${BUILD_ROOT}/amazon-cloudwatch-agent/\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_win.sh"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 32,
                  "endLine": 17,
                  "endColumn": 3,
                  "snippet": {
                    "text": "mkdir -p ${BUILD_SPACE}/bin/windows/${ARCH}/\necho \"Copying application files\"\n\necho \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/amazon-cloudwatch-agent/\n",
                    "rendered": {
                      "text": "mkdir -p ${BUILD_SPACE}/bin/windows/${ARCH}/\necho \"Copying application files\"\n\necho \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/amazon-cloudwatch-agent/\n",
                      "markdown": "`mkdir -p ${BUILD_SPACE}/bin/windows/${ARCH}/\necho \"Copying application files\"\n\necho \"Copying application files\"\ncp ${PREPKGPATH}/LICENSE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/NOTICE ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/THIRD-PARTY-LICENSES ${BUILD_ROOT}/amazon-cloudwatch-agent/\ncp ${PREPKGPATH}/RELEASE_NOTES ${BUILD_ROOT}/amazon-cloudwatch-agent/\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Tools/src/create_win.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\necho \"****************************************\"\necho \"Creating zip file for Windows amd64\"\necho \"****************************************\"\nset -e\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\necho \"****************************************\"\necho \"Creating zip file for Windows amd64\"\necho \"****************************************\"\nset -e\n",
                      "markdown": "`#!/usr/bin/env bash\necho \"****************************************\"\necho \"Creating zip file for Windows amd64\"\necho \"****************************************\"\nset -e\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/config/schema.json"
                },
                "region": {
                  "startLine": 1322,
                  "startColumn": 49,
                  "endLine": 1322,
                  "endColumn": 57,
                  "snippet": {
                    "text": "          \"$ref\": \"#/definitions/jmxTargetDefinition\"\n        },\n        \"insecure\": {\n          \"description\": \"Disable JMX remote TLS/password authentication requirements\",\n          \"type\": \"boolean\"\n        },\n        \"append_dimensions\": {\n",
                    "rendered": {
                      "text": "          \"$ref\": \"#/definitions/jmxTargetDefinition\"\n        },\n        \"insecure\": {\n          \"description\": \"Disable JMX remote TLS/password authentication requirements\",\n          \"type\": \"boolean\"\n        },\n        \"append_dimensions\": {\n",
                      "markdown": "`          \"$ref\": \"#/definitions/jmxTargetDefinition\"\n        },\n        \"insecure\": {\n          \"description\": \"Disable JMX remote TLS/password authentication requirements\",\n          \"type\": \"boolean\"\n        },\n        \"append_dimensions\": {\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/config/schema.json"
                },
                "region": {
                  "startLine": 1275,
                  "startColumn": 59,
                  "endLine": 1275,
                  "endColumn": 67,
                  "snippet": {
                    "text": "          \"type\": \"string\"\n        },\n        \"password_file\": {\n          \"description\": \"The password file to read in the passwords for JMX authentication\",\n          \"type\": \"string\"\n        },\n        \"keystore_path\": {\n",
                    "rendered": {
                      "text": "          \"type\": \"string\"\n        },\n        \"password_file\": {\n          \"description\": \"The password file to read in the passwords for JMX authentication\",\n          \"type\": \"string\"\n        },\n        \"keystore_path\": {\n",
                      "markdown": "`          \"type\": \"string\"\n        },\n        \"password_file\": {\n          \"description\": \"The password file to read in the passwords for JMX authentication\",\n          \"type\": \"string\"\n        },\n        \"keystore_path\": {\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/config/schema.json"
                },
                "region": {
                  "startLine": 1275,
                  "startColumn": 30,
                  "endLine": 1275,
                  "endColumn": 38,
                  "snippet": {
                    "text": "          \"type\": \"string\"\n        },\n        \"password_file\": {\n          \"description\": \"The password file to read in the passwords for JMX authentication\",\n          \"type\": \"string\"\n        },\n        \"keystore_path\": {\n",
                    "rendered": {
                      "text": "          \"type\": \"string\"\n        },\n        \"password_file\": {\n          \"description\": \"The password file to read in the passwords for JMX authentication\",\n          \"type\": \"string\"\n        },\n        \"keystore_path\": {\n",
                      "markdown": "`          \"type\": \"string\"\n        },\n        \"password_file\": {\n          \"description\": \"The password file to read in the passwords for JMX authentication\",\n          \"type\": \"string\"\n        },\n        \"keystore_path\": {\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/config/schema.json"
                },
                "region": {
                  "startLine": 1274,
                  "startColumn": 9,
                  "endLine": 1274,
                  "endColumn": 17,
                  "snippet": {
                    "text": "          \"description\": \"The username to use for JMX authentication\",\n          \"type\": \"string\"\n        },\n        \"password_file\": {\n          \"description\": \"The password file to read in the passwords for JMX authentication\",\n          \"type\": \"string\"\n        },\n",
                    "rendered": {
                      "text": "          \"description\": \"The username to use for JMX authentication\",\n          \"type\": \"string\"\n        },\n        \"password_file\": {\n          \"description\": \"The password file to read in the passwords for JMX authentication\",\n          \"type\": \"string\"\n        },\n",
                      "markdown": "`          \"description\": \"The username to use for JMX authentication\",\n          \"type\": \"string\"\n        },\n        \"password_file\": {\n          \"description\": \"The password file to read in the passwords for JMX authentication\",\n          \"type\": \"string\"\n        },\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/config/schema.json"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 130,
                  "endLine": 53,
                  "endColumn": 138,
                  "snippet": {
                    "text": "          \"$ref\": \"#/definitions/credentialsDefinition\"\n        },\n        \"omit_hostname\": {\n          \"description\": \"Hostname will be tagged by default unless you specifying append_dimensions, this flag allow you to omit hostname from tags without specifying append_dimensions\",\n          \"type\": \"boolean\"\n        }\n      },\n",
                    "rendered": {
                      "text": "          \"$ref\": \"#/definitions/credentialsDefinition\"\n        },\n        \"omit_hostname\": {\n          \"description\": \"Hostname will be tagged by default unless you specifying append_dimensions, this flag allow you to omit hostname from tags without specifying append_dimensions\",\n          \"type\": \"boolean\"\n        }\n      },\n",
                      "markdown": "`          \"$ref\": \"#/definitions/credentialsDefinition\"\n        },\n        \"omit_hostname\": {\n          \"description\": \"Hostname will be tagged by default unless you specifying append_dimensions, this flag allow you to omit hostname from tags without specifying append_dimensions\",\n          \"type\": \"boolean\"\n        }\n      },\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/config/schema.json"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 14,
                  "endLine": 52,
                  "endColumn": 22,
                  "snippet": {
                    "text": "          \"description\": \"The credentials with which agent can access aws resources\",\n          \"$ref\": \"#/definitions/credentialsDefinition\"\n        },\n        \"omit_hostname\": {\n          \"description\": \"Hostname will be tagged by default unless you specifying append_dimensions, this flag allow you to omit hostname from tags without specifying append_dimensions\",\n          \"type\": \"boolean\"\n        }\n",
                    "rendered": {
                      "text": "          \"description\": \"The credentials with which agent can access aws resources\",\n          \"$ref\": \"#/definitions/credentialsDefinition\"\n        },\n        \"omit_hostname\": {\n          \"description\": \"Hostname will be tagged by default unless you specifying append_dimensions, this flag allow you to omit hostname from tags without specifying append_dimensions\",\n          \"type\": \"boolean\"\n        }\n",
                      "markdown": "`          \"description\": \"The credentials with which agent can access aws resources\",\n          \"$ref\": \"#/definitions/credentialsDefinition\"\n        },\n        \"omit_hostname\": {\n          \"description\": \"Hostname will be tagged by default unless you specifying append_dimensions, this flag allow you to omit hostname from tags without specifying append_dimensions\",\n          \"type\": \"boolean\"\n        }\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/config/schema.json"
                },
                "region": {
                  "startLine": 518,
                  "startColumn": 8,
                  "endLine": 518,
                  "endColumn": 55,
                  "snippet": {
                    "text": "            \"$ref\": \"#/definitions/timeIntervalDefinition\"\n          }\n        },\n        \"metricsMeasurementWithoutDecorationDefinition\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\",\n",
                    "rendered": {
                      "text": "            \"$ref\": \"#/definitions/timeIntervalDefinition\"\n          }\n        },\n        \"metricsMeasurementWithoutDecorationDefinition\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\",\n",
                      "markdown": "`            \"$ref\": \"#/definitions/timeIntervalDefinition\"\n          }\n        },\n        \"metricsMeasurementWithoutDecorationDefinition\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\",\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/config/schema.json"
                },
                "region": {
                  "startLine": 1145,
                  "startColumn": 71,
                  "endLine": 1145,
                  "endColumn": 79,
                  "snippet": {
                    "text": "              \"$ref\": \"#/definitions/endpointOverrideDefinition\"\n            },\n            \"tcp_proxy\": {\n              \"description\": \"TCP proxy server used by the X-Ray SDK to update sampling rules\",\n              \"$ref\": \"#/definitions/tcpProxyDefinition\"\n            }\n          },\n",
                    "rendered": {
                      "text": "              \"$ref\": \"#/definitions/endpointOverrideDefinition\"\n            },\n            \"tcp_proxy\": {\n              \"description\": \"TCP proxy server used by the X-Ray SDK to update sampling rules\",\n              \"$ref\": \"#/definitions/tcpProxyDefinition\"\n            }\n          },\n",
                      "markdown": "`              \"$ref\": \"#/definitions/endpointOverrideDefinition\"\n            },\n            \"tcp_proxy\": {\n              \"description\": \"TCP proxy server used by the X-Ray SDK to update sampling rules\",\n              \"$ref\": \"#/definitions/tcpProxyDefinition\"\n            }\n          },\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/config/schema.json"
                },
                "region": {
                  "startLine": 1472,
                  "startColumn": 33,
                  "endLine": 1472,
                  "endColumn": 42,
                  "snippet": {
                    "text": "              \"type\": \"string\"\n            },\n            \"sd_service_name_pattern\": {\n              \"description\": \"ECS service name pattern responsible for tasks which expose the Prometheus metrics\",\n              \"type\": \"string\"\n            }\n          }\n",
                    "rendered": {
                      "text": "              \"type\": \"string\"\n            },\n            \"sd_service_name_pattern\": {\n              \"description\": \"ECS service name pattern responsible for tasks which expose the Prometheus metrics\",\n              \"type\": \"string\"\n            }\n          }\n",
                      "markdown": "`              \"type\": \"string\"\n            },\n            \"sd_service_name_pattern\": {\n              \"description\": \"ECS service name pattern responsible for tasks which expose the Prometheus metrics\",\n              \"type\": \"string\"\n            }\n          }\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/config/schema.json"
                },
                "region": {
                  "startLine": 1453,
                  "startColumn": 64,
                  "endLine": 1453,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        },\n        \"serviceNameListForTasks\": {\n          \"type\": \"object\",\n          \"descriptions\": \"Define ECS service discovery based on service names\",\n          \"properties\": {\n            \"sd_container_name_pattern\": {\n              \"description\": \"ECS container name pattern which expose the Prometheus metrics\",\n",
                    "rendered": {
                      "text": "        },\n        \"serviceNameListForTasks\": {\n          \"type\": \"object\",\n          \"descriptions\": \"Define ECS service discovery based on service names\",\n          \"properties\": {\n            \"sd_container_name_pattern\": {\n              \"description\": \"ECS container name pattern which expose the Prometheus metrics\",\n",
                      "markdown": "`        },\n        \"serviceNameListForTasks\": {\n          \"type\": \"object\",\n          \"descriptions\": \"Define ECS service discovery based on service names\",\n          \"properties\": {\n            \"sd_container_name_pattern\": {\n              \"description\": \"ECS container name pattern which expose the Prometheus metrics\",\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/config/schema.json"
                },
                "region": {
                  "startLine": 1453,
                  "startColumn": 37,
                  "endLine": 1453,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        },\n        \"serviceNameListForTasks\": {\n          \"type\": \"object\",\n          \"descriptions\": \"Define ECS service discovery based on service names\",\n          \"properties\": {\n            \"sd_container_name_pattern\": {\n              \"description\": \"ECS container name pattern which expose the Prometheus metrics\",\n",
                    "rendered": {
                      "text": "        },\n        \"serviceNameListForTasks\": {\n          \"type\": \"object\",\n          \"descriptions\": \"Define ECS service discovery based on service names\",\n          \"properties\": {\n            \"sd_container_name_pattern\": {\n              \"description\": \"ECS container name pattern which expose the Prometheus metrics\",\n",
                      "markdown": "`        },\n        \"serviceNameListForTasks\": {\n          \"type\": \"object\",\n          \"descriptions\": \"Define ECS service discovery based on service names\",\n          \"properties\": {\n            \"sd_container_name_pattern\": {\n              \"description\": \"ECS container name pattern which expose the Prometheus metrics\",\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/config/schema.json"
                },
                "region": {
                  "startLine": 1427,
                  "startColumn": 37,
                  "endLine": 1427,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        },\n        \"taskDefinitionList\": {\n          \"type\": \"object\",\n          \"descriptions\": \"Define ECS service discovery based on task definitions\",\n          \"properties\": {\n            \"sd_container_name_pattern\": {\n              \"description\": \"ECS container name pattern which expose the Prometheus metrics\",\n",
                    "rendered": {
                      "text": "        },\n        \"taskDefinitionList\": {\n          \"type\": \"object\",\n          \"descriptions\": \"Define ECS service discovery based on task definitions\",\n          \"properties\": {\n            \"sd_container_name_pattern\": {\n              \"description\": \"ECS container name pattern which expose the Prometheus metrics\",\n",
                      "markdown": "`        },\n        \"taskDefinitionList\": {\n          \"type\": \"object\",\n          \"descriptions\": \"Define ECS service discovery based on task definitions\",\n          \"properties\": {\n            \"sd_container_name_pattern\": {\n              \"description\": \"ECS container name pattern which expose the Prometheus metrics\",\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/config/schema.json"
                },
                "region": {
                  "startLine": 1412,
                  "startColumn": 66,
                  "endLine": 1412,
                  "endColumn": 75,
                  "snippet": {
                    "text": "          \"descriptions\": \"Define ECS service discovery based on docker labels\",\n          \"properties\": {\n            \"sd_job_name_label\": {\n              \"description\": \"Docker label name for specifying ECS service discovery job name\",\n              \"type\": \"string\"\n            },\n            \"sd_metrics_path_label\": {\n",
                    "rendered": {
                      "text": "          \"descriptions\": \"Define ECS service discovery based on docker labels\",\n          \"properties\": {\n            \"sd_job_name_label\": {\n              \"description\": \"Docker label name for specifying ECS service discovery job name\",\n              \"type\": \"string\"\n            },\n            \"sd_metrics_path_label\": {\n",
                      "markdown": "`          \"descriptions\": \"Define ECS service discovery based on docker labels\",\n          \"properties\": {\n            \"sd_job_name_label\": {\n              \"description\": \"Docker label name for specifying ECS service discovery job name\",\n              \"type\": \"string\"\n            },\n            \"sd_metrics_path_label\": {\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/config/schema.json"
                },
                "region": {
                  "startLine": 1409,
                  "startColumn": 64,
                  "endLine": 1409,
                  "endColumn": 72,
                  "snippet": {
                    "text": "      \"definitions\": {\n        \"dockerLabel\": {\n          \"type\": \"object\",\n          \"descriptions\": \"Define ECS service discovery based on docker labels\",\n          \"properties\": {\n            \"sd_job_name_label\": {\n              \"description\": \"Docker label name for specifying ECS service discovery job name\",\n",
                    "rendered": {
                      "text": "      \"definitions\": {\n        \"dockerLabel\": {\n          \"type\": \"object\",\n          \"descriptions\": \"Define ECS service discovery based on docker labels\",\n          \"properties\": {\n            \"sd_job_name_label\": {\n              \"description\": \"Docker label name for specifying ECS service discovery job name\",\n",
                      "markdown": "`      \"definitions\": {\n        \"dockerLabel\": {\n          \"type\": \"object\",\n          \"descriptions\": \"Define ECS service discovery based on docker labels\",\n          \"properties\": {\n            \"sd_job_name_label\": {\n              \"description\": \"Docker label name for specifying ECS service discovery job name\",\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/config/schema.json"
                },
                "region": {
                  "startLine": 1409,
                  "startColumn": 37,
                  "endLine": 1409,
                  "endColumn": 46,
                  "snippet": {
                    "text": "      \"definitions\": {\n        \"dockerLabel\": {\n          \"type\": \"object\",\n          \"descriptions\": \"Define ECS service discovery based on docker labels\",\n          \"properties\": {\n            \"sd_job_name_label\": {\n              \"description\": \"Docker label name for specifying ECS service discovery job name\",\n",
                    "rendered": {
                      "text": "      \"definitions\": {\n        \"dockerLabel\": {\n          \"type\": \"object\",\n          \"descriptions\": \"Define ECS service discovery based on docker labels\",\n          \"properties\": {\n            \"sd_job_name_label\": {\n              \"description\": \"Docker label name for specifying ECS service discovery job name\",\n",
                      "markdown": "`      \"definitions\": {\n        \"dockerLabel\": {\n          \"type\": \"object\",\n          \"descriptions\": \"Define ECS service discovery based on docker labels\",\n          \"properties\": {\n            \"sd_job_name_label\": {\n              \"description\": \"Docker label name for specifying ECS service discovery job name\",\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/config/schema.json"
                },
                "region": {
                  "startLine": 1397,
                  "startColumn": 29,
                  "endLine": 1397,
                  "endColumn": 38,
                  "snippet": {
                    "text": "          \"type\": \"string\"\n        },\n        \"sd_result_file\": {\n          \"description\": \"ECS service discovery result file full path\",\n          \"type\": \"string\"\n        },\n        \"sd_target_cluster\": {\n",
                    "rendered": {
                      "text": "          \"type\": \"string\"\n        },\n        \"sd_result_file\": {\n          \"description\": \"ECS service discovery result file full path\",\n          \"type\": \"string\"\n        },\n        \"sd_target_cluster\": {\n",
                      "markdown": "`          \"type\": \"string\"\n        },\n        \"sd_result_file\": {\n          \"description\": \"ECS service discovery result file full path\",\n          \"type\": \"string\"\n        },\n        \"sd_target_cluster\": {\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/config/schema.json"
                },
                "region": {
                  "startLine": 1393,
                  "startColumn": 29,
                  "endLine": 1393,
                  "endColumn": 38,
                  "snippet": {
                    "text": "          \"type\": \"string\"\n        },\n        \"sd_frequency\": {\n          \"description\": \"ECS service discovery frequency\",\n          \"type\": \"string\"\n        },\n        \"sd_result_file\": {\n",
                    "rendered": {
                      "text": "          \"type\": \"string\"\n        },\n        \"sd_frequency\": {\n          \"description\": \"ECS service discovery frequency\",\n          \"type\": \"string\"\n        },\n        \"sd_result_file\": {\n",
                      "markdown": "`          \"type\": \"string\"\n        },\n        \"sd_frequency\": {\n          \"description\": \"ECS service discovery frequency\",\n          \"type\": \"string\"\n        },\n        \"sd_result_file\": {\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/config/schema.json"
                },
                "region": {
                  "startLine": 1371,
                  "startColumn": 33,
                  "endLine": 1371,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    },\n    \"ecsServiceDiscoveryDefinition\": {\n      \"type\": \"object\",\n      \"descriptions\": \"Define ECS service discovery for Prometheus\",\n      \"properties\": {\n        \"docker_label\": {\n          \"$ref\": \"#/definitions/ecsServiceDiscoveryDefinition/definitions/dockerLabel\"\n",
                    "rendered": {
                      "text": "    },\n    \"ecsServiceDiscoveryDefinition\": {\n      \"type\": \"object\",\n      \"descriptions\": \"Define ECS service discovery for Prometheus\",\n      \"properties\": {\n        \"docker_label\": {\n          \"$ref\": \"#/definitions/ecsServiceDiscoveryDefinition/definitions/dockerLabel\"\n",
                      "markdown": "`    },\n    \"ecsServiceDiscoveryDefinition\": {\n      \"type\": \"object\",\n      \"descriptions\": \"Define ECS service discovery for Prometheus\",\n      \"properties\": {\n        \"docker_label\": {\n          \"$ref\": \"#/definitions/ecsServiceDiscoveryDefinition/definitions/dockerLabel\"\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/config/schema.json"
                },
                "region": {
                  "startLine": 820,
                  "startColumn": 29,
                  "endLine": 820,
                  "endColumn": 35,
                  "snippet": {
                    "text": "          \"$ref\": \"#/definitions/logsDefinition/definitions/logStreamNameDefinition\"\n        },\n        \"force_flush_interval\": {\n          \"description\": \"Max time to wait before batch publishing the log, unit is second.\",\n          \"$ref\": \"#/definitions/timeIntervalDefinition\"\n        },\n        \"credentials\": {\n",
                    "rendered": {
                      "text": "          \"$ref\": \"#/definitions/logsDefinition/definitions/logStreamNameDefinition\"\n        },\n        \"force_flush_interval\": {\n          \"description\": \"Max time to wait before batch publishing the log, unit is second.\",\n          \"$ref\": \"#/definitions/timeIntervalDefinition\"\n        },\n        \"credentials\": {\n",
                      "markdown": "`          \"$ref\": \"#/definitions/logsDefinition/definitions/logStreamNameDefinition\"\n        },\n        \"force_flush_interval\": {\n          \"description\": \"Max time to wait before batch publishing the log, unit is second.\",\n          \"$ref\": \"#/definitions/timeIntervalDefinition\"\n        },\n        \"credentials\": {\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/config/schema.json"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 29,
                  "endLine": 163,
                  "endColumn": 35,
                  "snippet": {
                    "text": "          }\n        },\n        \"force_flush_interval\": {\n          \"description\": \"Max time to wait before batch publishing the metrics, unit is second.\",\n          \"$ref\": \"#/definitions/timeIntervalDefinition\"\n        },\n        \"credentials\": {\n",
                    "rendered": {
                      "text": "          }\n        },\n        \"force_flush_interval\": {\n          \"description\": \"Max time to wait before batch publishing the metrics, unit is second.\",\n          \"$ref\": \"#/definitions/timeIntervalDefinition\"\n        },\n        \"credentials\": {\n",
                      "markdown": "`          }\n        },\n        \"force_flush_interval\": {\n          \"description\": \"Max time to wait before batch publishing the metrics, unit is second.\",\n          \"$ref\": \"#/definitions/timeIntervalDefinition\"\n        },\n        \"credentials\": {\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/util/eksdetector/eksdetector.go"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 61,
                  "endLine": 85,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\n// getConfigMap retrieves the configmap with the provided name in the provided namespace\nfunc (d *EksDetector) getConfigMap(namespace string, name string) (map[string]string, error) {\n\tconfigMap, err := d.Clientset.CoreV1().ConfigMaps(namespace).Get(context.TODO(), name, metav1.GetOptions{})\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to retrieve ConfigMap %s/%s: %w\", namespace, name, err)\n\t}\n",
                    "rendered": {
                      "text": "\n// getConfigMap retrieves the configmap with the provided name in the provided namespace\nfunc (d *EksDetector) getConfigMap(namespace string, name string) (map[string]string, error) {\n\tconfigMap, err := d.Clientset.CoreV1().ConfigMaps(namespace).Get(context.TODO(), name, metav1.GetOptions{})\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to retrieve ConfigMap %s/%s: %w\", namespace, name, err)\n\t}\n",
                      "markdown": "`\n// getConfigMap retrieves the configmap with the provided name in the provided namespace\nfunc (d *EksDetector) getConfigMap(namespace string, name string) (map[string]string, error) {\n\tconfigMap, err := d.Clientset.CoreV1().ConfigMaps(namespace).Get(context.TODO(), name, metav1.GetOptions{})\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to retrieve ConfigMap %s/%s: %w\", namespace, name, err)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/util/proxyutil.go"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 8,
                  "endLine": 68,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\t\tos.Setenv(\"HTTPS_PROXY\", httpsProxy[commonconfig.HttpsProxy])\n\t}\n\tif noProxy := GetNoProxy(proxyConfig); len(noProxy) > 0 {\n\t\tos.Setenv(\"NO_PROXY\", noProxy[commonconfig.NoProxy])\n\t}\n}\n",
                    "rendered": {
                      "text": "\t\tos.Setenv(\"HTTPS_PROXY\", httpsProxy[commonconfig.HttpsProxy])\n\t}\n\tif noProxy := GetNoProxy(proxyConfig); len(noProxy) > 0 {\n\t\tos.Setenv(\"NO_PROXY\", noProxy[commonconfig.NoProxy])\n\t}\n}\n",
                      "markdown": "`\t\tos.Setenv(\"HTTPS_PROXY\", httpsProxy[commonconfig.HttpsProxy])\n\t}\n\tif noProxy := GetNoProxy(proxyConfig); len(noProxy) > 0 {\n\t\tos.Setenv(\"NO_PROXY\", noProxy[commonconfig.NoProxy])\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/util/proxyutil.go"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 8,
                  "endLine": 65,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\t\tos.Setenv(\"HTTP_PROXY\", httpProxy[commonconfig.HttpProxy])\n\t}\n\tif httpsProxy := GetHttpsProxy(proxyConfig); len(httpsProxy) > 0 {\n\t\tos.Setenv(\"HTTPS_PROXY\", httpsProxy[commonconfig.HttpsProxy])\n\t}\n\tif noProxy := GetNoProxy(proxyConfig); len(noProxy) > 0 {\n\t\tos.Setenv(\"NO_PROXY\", noProxy[commonconfig.NoProxy])\n",
                    "rendered": {
                      "text": "\t\tos.Setenv(\"HTTP_PROXY\", httpProxy[commonconfig.HttpProxy])\n\t}\n\tif httpsProxy := GetHttpsProxy(proxyConfig); len(httpsProxy) > 0 {\n\t\tos.Setenv(\"HTTPS_PROXY\", httpsProxy[commonconfig.HttpsProxy])\n\t}\n\tif noProxy := GetNoProxy(proxyConfig); len(noProxy) > 0 {\n\t\tos.Setenv(\"NO_PROXY\", noProxy[commonconfig.NoProxy])\n",
                      "markdown": "`\t\tos.Setenv(\"HTTP_PROXY\", httpProxy[commonconfig.HttpProxy])\n\t}\n\tif httpsProxy := GetHttpsProxy(proxyConfig); len(httpsProxy) > 0 {\n\t\tos.Setenv(\"HTTPS_PROXY\", httpsProxy[commonconfig.HttpsProxy])\n\t}\n\tif noProxy := GetNoProxy(proxyConfig); len(noProxy) > 0 {\n\t\tos.Setenv(\"NO_PROXY\", noProxy[commonconfig.NoProxy])\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/util/proxyutil.go"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 8,
                  "endLine": 62,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\nfunc SetProxyEnv(proxyConfig map[string]string) {\n\tif httpProxy := GetHttpProxy(proxyConfig); len(httpProxy) > 0 {\n\t\tos.Setenv(\"HTTP_PROXY\", httpProxy[commonconfig.HttpProxy])\n\t}\n\tif httpsProxy := GetHttpsProxy(proxyConfig); len(httpsProxy) > 0 {\n\t\tos.Setenv(\"HTTPS_PROXY\", httpsProxy[commonconfig.HttpsProxy])\n",
                    "rendered": {
                      "text": "\nfunc SetProxyEnv(proxyConfig map[string]string) {\n\tif httpProxy := GetHttpProxy(proxyConfig); len(httpProxy) > 0 {\n\t\tos.Setenv(\"HTTP_PROXY\", httpProxy[commonconfig.HttpProxy])\n\t}\n\tif httpsProxy := GetHttpsProxy(proxyConfig); len(httpsProxy) > 0 {\n\t\tos.Setenv(\"HTTPS_PROXY\", httpsProxy[commonconfig.HttpsProxy])\n",
                      "markdown": "`\nfunc SetProxyEnv(proxyConfig map[string]string) {\n\tif httpProxy := GetHttpProxy(proxyConfig); len(httpProxy) > 0 {\n\t\tos.Setenv(\"HTTP_PROXY\", httpProxy[commonconfig.HttpProxy])\n\t}\n\tif httpsProxy := GetHttpsProxy(proxyConfig); len(httpsProxy) > 0 {\n\t\tos.Setenv(\"HTTPS_PROXY\", httpsProxy[commonconfig.HttpsProxy])\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/util/sdkutil.go"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 32,
                  "endLine": 41,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\t}\n\n\tif runInAws == config.RUN_IN_AWS_TRUE {\n\t\tfmt.Println(\"I! Detected from ENV instance is EC2\")\n\t\treturn config.ModeEC2\n\t}\n\n",
                    "rendered": {
                      "text": "\t}\n\n\tif runInAws == config.RUN_IN_AWS_TRUE {\n\t\tfmt.Println(\"I! Detected from ENV instance is EC2\")\n\t\treturn config.ModeEC2\n\t}\n\n",
                      "markdown": "`\t}\n\n\tif runInAws == config.RUN_IN_AWS_TRUE {\n\t\tfmt.Println(\"I! Detected from ENV instance is EC2\")\n\t\treturn config.ModeEC2\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/util/sdkutil.go"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 31,
                  "endLine": 46,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\t}\n\n\tif runWithIrsa == config.RUN_WITH_IRSA_TRUE {\n\t\tfmt.Println(\"I! Detected from ENV RUN_WITH_IRSA is True\")\n\t\treturn config.ModeWithIRSA\n\t}\n\n",
                    "rendered": {
                      "text": "\t}\n\n\tif runWithIrsa == config.RUN_WITH_IRSA_TRUE {\n\t\tfmt.Println(\"I! Detected from ENV RUN_WITH_IRSA is True\")\n\t\treturn config.ModeWithIRSA\n\t}\n\n",
                      "markdown": "`\t}\n\n\tif runWithIrsa == config.RUN_WITH_IRSA_TRUE {\n\t\tfmt.Println(\"I! Detected from ENV RUN_WITH_IRSA is True\")\n\t\treturn config.ModeWithIRSA\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/util/sdkutil.go"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 31,
                  "endLine": 41,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\t}\n\n\tif runInAws == config.RUN_IN_AWS_TRUE {\n\t\tfmt.Println(\"I! Detected from ENV instance is EC2\")\n\t\treturn config.ModeEC2\n\t}\n\n",
                    "rendered": {
                      "text": "\t}\n\n\tif runInAws == config.RUN_IN_AWS_TRUE {\n\t\tfmt.Println(\"I! Detected from ENV instance is EC2\")\n\t\treturn config.ModeEC2\n\t}\n\n",
                      "markdown": "`\t}\n\n\tif runInAws == config.RUN_IN_AWS_TRUE {\n\t\tfmt.Println(\"I! Detected from ENV instance is EC2\")\n\t\treturn config.ModeEC2\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/util/windows_path_util.go"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 17,
                  "snippet": {
                    "text": "}\n\nfunc getEnvWithDefaultVal(envName string, defaultVal string) string {\n\tenvVal := os.Getenv(envName)\n\tif envVal == \"\" {\n\t\tfmt.Printf(\"can't get environment var: %v, use default value: %v \\n\", envName, defaultVal)\n\t\tenvVal = defaultVal\n",
                    "rendered": {
                      "text": "}\n\nfunc getEnvWithDefaultVal(envName string, defaultVal string) string {\n\tenvVal := os.Getenv(envName)\n\tif envVal == \"\" {\n\t\tfmt.Printf(\"can't get environment var: %v, use default value: %v \\n\", envName, defaultVal)\n\t\tenvVal = defaultVal\n",
                      "markdown": "`}\n\nfunc getEnvWithDefaultVal(envName string, defaultVal string) string {\n\tenvVal := os.Getenv(envName)\n\tif envVal == \"\" {\n\t\tfmt.Printf(\"can't get environment var: %v, use default value: %v \\n\", envName, defaultVal)\n\t\tenvVal = defaultVal\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/util/windows_path_util.go"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 11,
                  "endLine": 22,
                  "endColumn": 45,
                  "snippet": {
                    "text": "}\n\nfunc GetWindowsProgramDataPath() string {\n\treturn getEnvWithDefaultVal(ProgramData, GetWindowsSystemDrivePath()+\"\\\\ProgramData\")\n}\n\nfunc getEnvWithDefaultVal(envName string, defaultVal string) string {\n",
                    "rendered": {
                      "text": "}\n\nfunc GetWindowsProgramDataPath() string {\n\treturn getEnvWithDefaultVal(ProgramData, GetWindowsSystemDrivePath()+\"\\\\ProgramData\")\n}\n\nfunc getEnvWithDefaultVal(envName string, defaultVal string) string {\n",
                      "markdown": "`}\n\nfunc GetWindowsProgramDataPath() string {\n\treturn getEnvWithDefaultVal(ProgramData, GetWindowsSystemDrivePath()+\"\\\\ProgramData\")\n}\n\nfunc getEnvWithDefaultVal(envName string, defaultVal string) string {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/jmx_config_linux.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = true\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = true\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = true\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/jmx_config_linux.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_appsignals_fallback_config.yaml"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 33,
                  "endLine": 316,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                    enabled: true\n                gcp.cloud_run.job.task_index:\n                    enabled: true\n                gcp.gce.instance.hostname:\n                    enabled: false\n                gcp.gce.instance.name:\n                    enabled: false\n",
                    "rendered": {
                      "text": "                    enabled: true\n                gcp.cloud_run.job.task_index:\n                    enabled: true\n                gcp.gce.instance.hostname:\n                    enabled: false\n                gcp.gce.instance.name:\n                    enabled: false\n",
                      "markdown": "`                    enabled: true\n                gcp.cloud_run.job.task_index:\n                    enabled: true\n                gcp.gce.instance.hostname:\n                    enabled: false\n                gcp.gce.instance.name:\n                    enabled: false\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000708"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (OS Type)",
            "id": "BD000708"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_appsignals_fallback_config.yaml"
                },
                "region": {
                  "startLine": 432,
                  "startColumn": 16,
                  "endLine": 432,
                  "endColumn": 23,
                  "snippet": {
                    "text": "                    enabled: true\n                os.description:\n                    enabled: false\n                os.type:\n                    enabled: true\n        timeout: 2s\n        tls:\n",
                    "rendered": {
                      "text": "                    enabled: true\n                os.description:\n                    enabled: false\n                os.type:\n                    enabled: true\n        timeout: 2s\n        tls:\n",
                      "markdown": "`                    enabled: true\n                os.description:\n                    enabled: false\n                os.type:\n                    enabled: true\n        timeout: 2s\n        tls:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000708"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (OS Type)",
            "id": "BD000708"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_appsignals_fallback_config.yaml"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 16,
                  "endLine": 214,
                  "endColumn": 23,
                  "snippet": {
                    "text": "            resource_attributes:\n                host.name:\n                    enabled: true\n                os.type:\n                    enabled: true\n        ec2:\n            resource_attributes:\n",
                    "rendered": {
                      "text": "            resource_attributes:\n                host.name:\n                    enabled: true\n                os.type:\n                    enabled: true\n        ec2:\n            resource_attributes:\n",
                      "markdown": "`            resource_attributes:\n                host.name:\n                    enabled: true\n                os.type:\n                    enabled: true\n        ec2:\n            resource_attributes:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_appsignals_fallback_config.yaml"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 13,
                  "endLine": 208,
                  "snippet": {
                    "text": "            token_file: \"\"\n        detectors:\n            - eks\n            - env\n            - ec2\n        disable_keep_alives: false\n        docker:\n            resource_attributes:\n",
                    "rendered": {
                      "text": "            token_file: \"\"\n        detectors:\n            - eks\n            - env\n            - ec2\n        disable_keep_alives: false\n        docker:\n            resource_attributes:\n",
                      "markdown": "`            token_file: \"\"\n        detectors:\n            - eks\n            - env\n            - ec2\n        disable_keep_alives: false\n        docker:\n            resource_attributes:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_appsignals_fallback_config.yaml"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 19,
                  "endLine": 63,
                  "snippet": {
                    "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                - - RemoteService\n",
                    "rendered": {
                      "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                - - RemoteService\n",
                      "markdown": "`                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                - - RemoteService\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_appsignals_fallback_config.yaml"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 19,
                  "endLine": 58,
                  "snippet": {
                    "text": "                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n",
                    "rendered": {
                      "text": "                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n",
                      "markdown": "`                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_appsignals_fallback_config.yaml"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 19,
                  "endLine": 54,
                  "snippet": {
                    "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n",
                    "rendered": {
                      "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n",
                      "markdown": "`                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_appsignals_fallback_config.yaml"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 19,
                  "endLine": 48,
                  "snippet": {
                    "text": "                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n",
                    "rendered": {
                      "text": "                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n",
                      "markdown": "`                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_appsignals_fallback_config.yaml"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 19,
                  "endLine": 45,
                  "snippet": {
                    "text": "                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n",
                    "rendered": {
                      "text": "                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n",
                      "markdown": "`                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_appsignals_fallback_config.yaml"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 19,
                  "endLine": 40,
                  "snippet": {
                    "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n",
                    "rendered": {
                      "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n",
                      "markdown": "`                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_appsignals_fallback_config.yaml"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 19,
                  "endLine": 23,
                  "snippet": {
                    "text": "                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n                    - Telemetry.Source\n                  regex: ^(ServerSpan|LocalRootSpan)$\n",
                    "rendered": {
                      "text": "                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n                    - Telemetry.Source\n                  regex: ^(ServerSpan|LocalRootSpan)$\n",
                      "markdown": "`                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n                    - Telemetry.Source\n                  regex: ^(ServerSpan|LocalRootSpan)$\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_appsignals_fallback_config.yaml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 19,
                  "endLine": 21,
                  "snippet": {
                    "text": "            - dimensions:\n                - - Environment\n                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n",
                    "rendered": {
                      "text": "            - dimensions:\n                - - Environment\n                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n",
                      "markdown": "`            - dimensions:\n                - - Environment\n                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_ecs_config.yaml"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 33,
                  "endLine": 315,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                    enabled: true\n                gcp.cloud_run.job.task_index:\n                    enabled: true\n                gcp.gce.instance.hostname:\n                    enabled: false\n                gcp.gce.instance.name:\n                    enabled: false\n",
                    "rendered": {
                      "text": "                    enabled: true\n                gcp.cloud_run.job.task_index:\n                    enabled: true\n                gcp.gce.instance.hostname:\n                    enabled: false\n                gcp.gce.instance.name:\n                    enabled: false\n",
                      "markdown": "`                    enabled: true\n                gcp.cloud_run.job.task_index:\n                    enabled: true\n                gcp.gce.instance.hostname:\n                    enabled: false\n                gcp.gce.instance.name:\n                    enabled: false\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000708"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (OS Type)",
            "id": "BD000708"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_ecs_config.yaml"
                },
                "region": {
                  "startLine": 431,
                  "startColumn": 16,
                  "endLine": 431,
                  "endColumn": 23,
                  "snippet": {
                    "text": "                    enabled: true\n                os.description:\n                    enabled: false\n                os.type:\n                    enabled: true\n        timeout: 2s\n        tls:\n",
                    "rendered": {
                      "text": "                    enabled: true\n                os.description:\n                    enabled: false\n                os.type:\n                    enabled: true\n        timeout: 2s\n        tls:\n",
                      "markdown": "`                    enabled: true\n                os.description:\n                    enabled: false\n                os.type:\n                    enabled: true\n        timeout: 2s\n        tls:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000708"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (OS Type)",
            "id": "BD000708"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_ecs_config.yaml"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 16,
                  "endLine": 214,
                  "endColumn": 23,
                  "snippet": {
                    "text": "            resource_attributes:\n                host.name:\n                    enabled: true\n                os.type:\n                    enabled: true\n        ec2:\n            resource_attributes:\n",
                    "rendered": {
                      "text": "            resource_attributes:\n                host.name:\n                    enabled: true\n                os.type:\n                    enabled: true\n        ec2:\n            resource_attributes:\n",
                      "markdown": "`            resource_attributes:\n                host.name:\n                    enabled: true\n                os.type:\n                    enabled: true\n        ec2:\n            resource_attributes:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_ecs_config.yaml"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 13,
                  "endLine": 207,
                  "snippet": {
                    "text": "                    enabled: true\n            token_file: ''\n        detectors:\n            - env\n            - ecs\n            - ec2\n        disable_keep_alives: false\n        docker:\n",
                    "rendered": {
                      "text": "                    enabled: true\n            token_file: ''\n        detectors:\n            - env\n            - ecs\n            - ec2\n        disable_keep_alives: false\n        docker:\n",
                      "markdown": "`                    enabled: true\n            token_file: ''\n        detectors:\n            - env\n            - ecs\n            - ec2\n        disable_keep_alives: false\n        docker:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_ecs_config.yaml"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 21,
                  "endLine": 63,
                  "snippet": {
                    "text": "                    - RemoteResourceIdentifier\n                    - RemoteResourceType\n                    - RemoteService\n                    - Service\n                  - - RemoteResourceIdentifier\n                    - RemoteResourceType\n                    - RemoteService\n                  - - RemoteService\n",
                    "rendered": {
                      "text": "                    - RemoteResourceIdentifier\n                    - RemoteResourceType\n                    - RemoteService\n                    - Service\n                  - - RemoteResourceIdentifier\n                    - RemoteResourceType\n                    - RemoteService\n                  - - RemoteService\n",
                      "markdown": "`                    - RemoteResourceIdentifier\n                    - RemoteResourceType\n                    - RemoteService\n                    - Service\n                  - - RemoteResourceIdentifier\n                    - RemoteResourceType\n                    - RemoteService\n                  - - RemoteService\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_ecs_config.yaml"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 21,
                  "endLine": 58,
                  "snippet": {
                    "text": "                  - - Environment\n                    - RemoteOperation\n                    - RemoteService\n                    - Service\n                  - - Environment\n                    - RemoteResourceIdentifier\n                    - RemoteResourceType\n                    - RemoteService\n",
                    "rendered": {
                      "text": "                  - - Environment\n                    - RemoteOperation\n                    - RemoteService\n                    - Service\n                  - - Environment\n                    - RemoteResourceIdentifier\n                    - RemoteResourceType\n                    - RemoteService\n",
                      "markdown": "`                  - - Environment\n                    - RemoteOperation\n                    - RemoteService\n                    - Service\n                  - - Environment\n                    - RemoteResourceIdentifier\n                    - RemoteResourceType\n                    - RemoteService\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_ecs_config.yaml"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 21,
                  "endLine": 54,
                  "snippet": {
                    "text": "                    - RemoteResourceIdentifier\n                    - RemoteResourceType\n                    - RemoteService\n                    - Service\n                  - - Environment\n                    - RemoteOperation\n                    - RemoteService\n                    - Service\n",
                    "rendered": {
                      "text": "                    - RemoteResourceIdentifier\n                    - RemoteResourceType\n                    - RemoteService\n                    - Service\n                  - - Environment\n                    - RemoteOperation\n                    - RemoteService\n                    - Service\n",
                      "markdown": "`                    - RemoteResourceIdentifier\n                    - RemoteResourceType\n                    - RemoteService\n                    - Service\n                  - - Environment\n                    - RemoteOperation\n                    - RemoteService\n                    - Service\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_ecs_config.yaml"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 21,
                  "endLine": 48,
                  "snippet": {
                    "text": "                    - Service\n                  - - Environment\n                    - RemoteService\n                    - Service\n                  - - Environment\n                    - RemoteOperation\n                    - RemoteResourceIdentifier\n                    - RemoteResourceType\n",
                    "rendered": {
                      "text": "                    - Service\n                  - - Environment\n                    - RemoteService\n                    - Service\n                  - - Environment\n                    - RemoteOperation\n                    - RemoteResourceIdentifier\n                    - RemoteResourceType\n",
                      "markdown": "`                    - Service\n                  - - Environment\n                    - RemoteService\n                    - Service\n                  - - Environment\n                    - RemoteOperation\n                    - RemoteResourceIdentifier\n                    - RemoteResourceType\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_ecs_config.yaml"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 21,
                  "endLine": 45,
                  "snippet": {
                    "text": "                    - Operation\n                    - RemoteOperation\n                    - RemoteService\n                    - Service\n                  - - Environment\n                    - RemoteService\n                    - Service\n                  - - Environment\n",
                    "rendered": {
                      "text": "                    - Operation\n                    - RemoteOperation\n                    - RemoteService\n                    - Service\n                  - - Environment\n                    - RemoteService\n                    - Service\n                  - - Environment\n",
                      "markdown": "`                    - Operation\n                    - RemoteOperation\n                    - RemoteService\n                    - Service\n                  - - Environment\n                    - RemoteService\n                    - Service\n                  - - Environment\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_ecs_config.yaml"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 21,
                  "endLine": 40,
                  "snippet": {
                    "text": "                    - RemoteResourceIdentifier\n                    - RemoteResourceType\n                    - RemoteService\n                    - Service\n                  - - Environment\n                    - Operation\n                    - RemoteOperation\n                    - RemoteService\n",
                    "rendered": {
                      "text": "                    - RemoteResourceIdentifier\n                    - RemoteResourceType\n                    - RemoteService\n                    - Service\n                  - - Environment\n                    - Operation\n                    - RemoteOperation\n                    - RemoteService\n",
                      "markdown": "`                    - RemoteResourceIdentifier\n                    - RemoteResourceType\n                    - RemoteService\n                    - Service\n                  - - Environment\n                    - Operation\n                    - RemoteOperation\n                    - RemoteService\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_ecs_config.yaml"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 21,
                  "endLine": 23,
                  "snippet": {
                    "text": "                    - Operation\n                    - Service\n                  - - Environment\n                    - Service\n              label_matchers:\n                  - label_names:\n                        - Telemetry.Source\n                    regex: ^(ServerSpan|LocalRootSpan)$\n",
                    "rendered": {
                      "text": "                    - Operation\n                    - Service\n                  - - Environment\n                    - Service\n              label_matchers:\n                  - label_names:\n                        - Telemetry.Source\n                    regex: ^(ServerSpan|LocalRootSpan)$\n",
                      "markdown": "`                    - Operation\n                    - Service\n                  - - Environment\n                    - Service\n              label_matchers:\n                  - label_names:\n                        - Telemetry.Source\n                    regex: ^(ServerSpan|LocalRootSpan)$\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_ecs_config.yaml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 21,
                  "endLine": 21,
                  "snippet": {
                    "text": "            - dimensions:\n                  - - Environment\n                    - Operation\n                    - Service\n                  - - Environment\n                    - Service\n              label_matchers:\n                  - label_names:\n",
                    "rendered": {
                      "text": "            - dimensions:\n                  - - Environment\n                    - Operation\n                    - Service\n                  - - Environment\n                    - Service\n              label_matchers:\n                  - label_names:\n",
                      "markdown": "`            - dimensions:\n                  - - Environment\n                    - Operation\n                    - Service\n                  - - Environment\n                    - Service\n              label_matchers:\n                  - label_names:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/standard_config_linux_with_common_config.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/standard_config_linux_with_common_config.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/util/eksdetector/eksdetectortestutil.go"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 12,
                  "endLine": 45,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\nfunc (detector *MockDetector) getConfigMap(namespace string, name string) (map[string]string, error) {\n\targs := detector.Called(namespace, name)\n\treturn args.Get(0).(map[string]string), args.Error(1)\n}\n",
                    "rendered": {
                      "text": "\nfunc (detector *MockDetector) getConfigMap(namespace string, name string) (map[string]string, error) {\n\targs := detector.Called(namespace, name)\n\treturn args.Get(0).(map[string]string), args.Error(1)\n}\n",
                      "markdown": "`\nfunc (detector *MockDetector) getConfigMap(namespace string, name string) (map[string]string, error) {\n\targs := detector.Called(namespace, name)\n\treturn args.Get(0).(map[string]string), args.Error(1)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/util/httpclient/httpclient.go"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 22,
                  "endLine": 56,
                  "endColumn": 27,
                  "snippet": {
                    "text": "}\n\nfunc (h *HttpClient) request(endpoint string) ([]byte, error) {\n\tresp, err := h.client.Get(endpoint)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"unable to get response from %s, error: %v\", endpoint, err)\n\t}\n",
                    "rendered": {
                      "text": "}\n\nfunc (h *HttpClient) request(endpoint string) ([]byte, error) {\n\tresp, err := h.client.Get(endpoint)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"unable to get response from %s, error: %v\", endpoint, err)\n\t}\n",
                      "markdown": "`}\n\nfunc (h *HttpClient) request(endpoint string) ([]byte, error) {\n\tresp, err := h.client.Get(endpoint)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"unable to get response from %s, error: %v\", endpoint, err)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/util/httpclient/httpclient.go"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 15,
                  "endLine": 46,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\nfunc (h *HttpClient) Request(endpoint string) (body []byte, err error) {\n\tfor i := 0; i < h.maxRetries; i++ {\n\t\tbody, err = h.request(endpoint)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"W! retry [%d/%d], unable to get http response from %s, error: %v\", i, h.maxRetries, endpoint, err)\n\t\t\th.backoffSleep(i)\n",
                    "rendered": {
                      "text": "\nfunc (h *HttpClient) Request(endpoint string) (body []byte, err error) {\n\tfor i := 0; i < h.maxRetries; i++ {\n\t\tbody, err = h.request(endpoint)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"W! retry [%d/%d], unable to get http response from %s, error: %v\", i, h.maxRetries, endpoint, err)\n\t\t\th.backoffSleep(i)\n",
                      "markdown": "`\nfunc (h *HttpClient) Request(endpoint string) (body []byte, err error) {\n\tfor i := 0; i < h.maxRetries; i++ {\n\t\tbody, err = h.request(endpoint)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"W! retry [%d/%d], unable to get http response from %s, error: %v\", i, h.maxRetries, endpoint, err)\n\t\t\th.backoffSleep(i)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/util/ecsutil/ecsutil.go"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 26,
                  "endLine": 84,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\nfunc (e *ecsUtil) getMetadataResponse(endpoint string) (em *ecsMetadataResponse, err error) {\n\tem = &ecsMetadataResponse{}\n\tresp, err := e.httpClient.Request(endpoint)\n\n\tif err != nil {\n\t\treturn\n",
                    "rendered": {
                      "text": "\nfunc (e *ecsUtil) getMetadataResponse(endpoint string) (em *ecsMetadataResponse, err error) {\n\tem = &ecsMetadataResponse{}\n\tresp, err := e.httpClient.Request(endpoint)\n\n\tif err != nil {\n\t\treturn\n",
                      "markdown": "`\nfunc (e *ecsUtil) getMetadataResponse(endpoint string) (em *ecsMetadataResponse, err error) {\n\tem = &ecsMetadataResponse{}\n\tresp, err := e.httpClient.Request(endpoint)\n\n\tif err != nil {\n\t\treturn\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/emf_and_kubernetes_with_gpu_config.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/emf_and_kubernetes_with_gpu_config.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_k8s_config.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_k8s_config.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/skip_log_timestamp_default_windows.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/skip_log_timestamp_default_windows.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/util/util.go"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 46,
                  "endLine": 202,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\t\treturn\n\t}\n\tif ses.Config != nil && ses.Config.Credentials != nil {\n\t\tif credsValue, err := ses.Config.Credentials.Get(); err == nil {\n\t\t\taccessKey = credsValue.AccessKeyID\n\t\t\tsecretKey = credsValue.SecretAccessKey\n\t\t\tcreds = ses.Config.Credentials\n",
                    "rendered": {
                      "text": "\t\treturn\n\t}\n\tif ses.Config != nil && ses.Config.Credentials != nil {\n\t\tif credsValue, err := ses.Config.Credentials.Get(); err == nil {\n\t\t\taccessKey = credsValue.AccessKeyID\n\t\t\tsecretKey = credsValue.SecretAccessKey\n\t\t\tcreds = ses.Config.Credentials\n",
                      "markdown": "`\t\treturn\n\t}\n\tif ses.Config != nil && ses.Config.Credentials != nil {\n\t\tif credsValue, err := ses.Config.Credentials.Get(); err == nil {\n\t\t\taccessKey = credsValue.AccessKeyID\n\t\t\tsecretKey = credsValue.SecretAccessKey\n\t\t\tcreds = ses.Config.Credentials\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/util/util.go"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 3,
                  "endLine": 204,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\tif ses.Config != nil && ses.Config.Credentials != nil {\n\t\tif credsValue, err := ses.Config.Credentials.Get(); err == nil {\n\t\t\taccessKey = credsValue.AccessKeyID\n\t\t\tsecretKey = credsValue.SecretAccessKey\n\t\t\tcreds = ses.Config.Credentials\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\tif ses.Config != nil && ses.Config.Credentials != nil {\n\t\tif credsValue, err := ses.Config.Credentials.Get(); err == nil {\n\t\t\taccessKey = credsValue.AccessKeyID\n\t\t\tsecretKey = credsValue.SecretAccessKey\n\t\t\tcreds = ses.Config.Credentials\n\t\t}\n\t}\n",
                      "markdown": "`\tif ses.Config != nil && ses.Config.Credentials != nil {\n\t\tif credsValue, err := ses.Config.Credentials.Get(); err == nil {\n\t\t\taccessKey = credsValue.AccessKeyID\n\t\t\tsecretKey = credsValue.SecretAccessKey\n\t\t\tcreds = ses.Config.Credentials\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/util/util.go"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 34,
                  "endLine": 196,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\treturn region\n}\n\nfunc SDKCredentials() (accessKey, secretKey string, creds *credentials.Credentials) {\n\tses, err := session.NewSession()\n\tif err != nil {\n\t\treturn\n",
                    "rendered": {
                      "text": "\treturn region\n}\n\nfunc SDKCredentials() (accessKey, secretKey string, creds *credentials.Credentials) {\n\tses, err := session.NewSession()\n\tif err != nil {\n\t\treturn\n",
                      "markdown": "`\treturn region\n}\n\nfunc SDKCredentials() (accessKey, secretKey string, creds *credentials.Credentials) {\n\tses, err := session.NewSession()\n\tif err != nil {\n\t\treturn\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/util/ec2util/ec2util.go"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 31,
                  "endLine": 121,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\t\t\te.Hostname = hostnameInner\n\t\t\tagent.UsageFlags().Set(agent.FlagIMDSFallbackSuccess)\n\t\t} else {\n\t\t\tfmt.Println(\"E! [EC2] Fetch hostname from EC2 metadata fail:\", errInner)\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\t\t\te.Hostname = hostnameInner\n\t\t\tagent.UsageFlags().Set(agent.FlagIMDSFallbackSuccess)\n\t\t} else {\n\t\t\tfmt.Println(\"E! [EC2] Fetch hostname from EC2 metadata fail:\", errInner)\n\t\t}\n\t}\n\n",
                      "markdown": "`\t\t\te.Hostname = hostnameInner\n\t\t\tagent.UsageFlags().Set(agent.FlagIMDSFallbackSuccess)\n\t\t} else {\n\t\t\tfmt.Println(\"E! [EC2] Fetch hostname from EC2 metadata fail:\", errInner)\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/util/ec2util/ec2util.go"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 59,
                  "endLine": 116,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\t\te.Hostname = hostname\n\t} else {\n\t\tfmt.Println(\"D! could not get hostname without imds v1 fallback enable thus enable fallback\")\n\t\thostnameInner, errInner := mdEnableFallback.GetMetadata(\"hostname\")\n\t\tif errInner == nil {\n\t\t\te.Hostname = hostnameInner\n\t\t\tagent.UsageFlags().Set(agent.FlagIMDSFallbackSuccess)\n",
                    "rendered": {
                      "text": "\t\te.Hostname = hostname\n\t} else {\n\t\tfmt.Println(\"D! could not get hostname without imds v1 fallback enable thus enable fallback\")\n\t\thostnameInner, errInner := mdEnableFallback.GetMetadata(\"hostname\")\n\t\tif errInner == nil {\n\t\t\te.Hostname = hostnameInner\n\t\t\tagent.UsageFlags().Set(agent.FlagIMDSFallbackSuccess)\n",
                      "markdown": "`\t\te.Hostname = hostname\n\t} else {\n\t\tfmt.Println(\"D! could not get hostname without imds v1 fallback enable thus enable fallback\")\n\t\thostnameInner, errInner := mdEnableFallback.GetMetadata(\"hostname\")\n\t\tif errInner == nil {\n\t\t\te.Hostname = hostnameInner\n\t\t\tagent.UsageFlags().Set(agent.FlagIMDSFallbackSuccess)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/util/ec2util/ec2util.go"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 32,
                  "endLine": 115,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\tif hostname, err := mdDisableFallback.GetMetadata(\"hostname\"); err == nil {\n\t\te.Hostname = hostname\n\t} else {\n\t\tfmt.Println(\"D! could not get hostname without imds v1 fallback enable thus enable fallback\")\n\t\thostnameInner, errInner := mdEnableFallback.GetMetadata(\"hostname\")\n\t\tif errInner == nil {\n\t\t\te.Hostname = hostnameInner\n",
                    "rendered": {
                      "text": "\tif hostname, err := mdDisableFallback.GetMetadata(\"hostname\"); err == nil {\n\t\te.Hostname = hostname\n\t} else {\n\t\tfmt.Println(\"D! could not get hostname without imds v1 fallback enable thus enable fallback\")\n\t\thostnameInner, errInner := mdEnableFallback.GetMetadata(\"hostname\")\n\t\tif errInner == nil {\n\t\t\te.Hostname = hostnameInner\n",
                      "markdown": "`\tif hostname, err := mdDisableFallback.GetMetadata(\"hostname\"); err == nil {\n\t\te.Hostname = hostname\n\t} else {\n\t\tfmt.Println(\"D! could not get hostname without imds v1 fallback enable thus enable fallback\")\n\t\thostnameInner, errInner := mdEnableFallback.GetMetadata(\"hostname\")\n\t\tif errInner == nil {\n\t\t\te.Hostname = hostnameInner\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/util/ec2util/ec2util.go"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 15,
                  "endLine": 113,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t// ec2 and ecs treats retries for getting host name differently\n\t// More information on API: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html#instance-metadata-ex-2\n\tif hostname, err := mdDisableFallback.GetMetadata(\"hostname\"); err == nil {\n\t\te.Hostname = hostname\n\t} else {\n\t\tfmt.Println(\"D! could not get hostname without imds v1 fallback enable thus enable fallback\")\n\t\thostnameInner, errInner := mdEnableFallback.GetMetadata(\"hostname\")\n",
                    "rendered": {
                      "text": "\t// ec2 and ecs treats retries for getting host name differently\n\t// More information on API: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html#instance-metadata-ex-2\n\tif hostname, err := mdDisableFallback.GetMetadata(\"hostname\"); err == nil {\n\t\te.Hostname = hostname\n\t} else {\n\t\tfmt.Println(\"D! could not get hostname without imds v1 fallback enable thus enable fallback\")\n\t\thostnameInner, errInner := mdEnableFallback.GetMetadata(\"hostname\")\n",
                      "markdown": "`\t// ec2 and ecs treats retries for getting host name differently\n\t// More information on API: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html#instance-metadata-ex-2\n\tif hostname, err := mdDisableFallback.GetMetadata(\"hostname\"); err == nil {\n\t\te.Hostname = hostname\n\t} else {\n\t\tfmt.Println(\"D! could not get hostname without imds v1 fallback enable thus enable fallback\")\n\t\thostnameInner, errInner := mdEnableFallback.GetMetadata(\"hostname\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/util/ec2util/ec2util.go"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 52,
                  "endLine": 112,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\n\t// ec2 and ecs treats retries for getting host name differently\n\t// More information on API: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html#instance-metadata-ex-2\n\tif hostname, err := mdDisableFallback.GetMetadata(\"hostname\"); err == nil {\n\t\te.Hostname = hostname\n\t} else {\n\t\tfmt.Println(\"D! could not get hostname without imds v1 fallback enable thus enable fallback\")\n",
                    "rendered": {
                      "text": "\n\t// ec2 and ecs treats retries for getting host name differently\n\t// More information on API: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html#instance-metadata-ex-2\n\tif hostname, err := mdDisableFallback.GetMetadata(\"hostname\"); err == nil {\n\t\te.Hostname = hostname\n\t} else {\n\t\tfmt.Println(\"D! could not get hostname without imds v1 fallback enable thus enable fallback\")\n",
                      "markdown": "`\n\t// ec2 and ecs treats retries for getting host name differently\n\t// More information on API: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html#instance-metadata-ex-2\n\tif hostname, err := mdDisableFallback.GetMetadata(\"hostname\"); err == nil {\n\t\te.Hostname = hostname\n\t} else {\n\t\tfmt.Println(\"D! could not get hostname without imds v1 fallback enable thus enable fallback\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/util/ec2util/ec2util.go"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 4,
                  "endLine": 112,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n\t// ec2 and ecs treats retries for getting host name differently\n\t// More information on API: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html#instance-metadata-ex-2\n\tif hostname, err := mdDisableFallback.GetMetadata(\"hostname\"); err == nil {\n\t\te.Hostname = hostname\n\t} else {\n\t\tfmt.Println(\"D! could not get hostname without imds v1 fallback enable thus enable fallback\")\n",
                    "rendered": {
                      "text": "\n\t// ec2 and ecs treats retries for getting host name differently\n\t// More information on API: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html#instance-metadata-ex-2\n\tif hostname, err := mdDisableFallback.GetMetadata(\"hostname\"); err == nil {\n\t\te.Hostname = hostname\n\t} else {\n\t\tfmt.Println(\"D! could not get hostname without imds v1 fallback enable thus enable fallback\")\n",
                      "markdown": "`\n\t// ec2 and ecs treats retries for getting host name differently\n\t// More information on API: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html#instance-metadata-ex-2\n\tif hostname, err := mdDisableFallback.GetMetadata(\"hostname\"); err == nil {\n\t\te.Hostname = hostname\n\t} else {\n\t\tfmt.Println(\"D! could not get hostname without imds v1 fallback enable thus enable fallback\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/util/sslutil.go"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 8,
                  "endLine": 31,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\nfunc SetSSLEnv(sslConfig map[string]string) {\n\tif ssl := GetSSL(sslConfig); len(sslConfig) > 0 {\n\t\tos.Setenv(envconfig.AWS_CA_BUNDLE, ssl[commonconfig.CABundlePath])\n\t}\n\n}\n",
                    "rendered": {
                      "text": "\nfunc SetSSLEnv(sslConfig map[string]string) {\n\tif ssl := GetSSL(sslConfig); len(sslConfig) > 0 {\n\t\tos.Setenv(envconfig.AWS_CA_BUNDLE, ssl[commonconfig.CABundlePath])\n\t}\n\n}\n",
                      "markdown": "`\nfunc SetSSLEnv(sslConfig map[string]string) {\n\tif ssl := GetSSL(sslConfig); len(sslConfig) > 0 {\n\t\tos.Setenv(envconfig.AWS_CA_BUNDLE, ssl[commonconfig.CABundlePath])\n\t}\n\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/jmx_config_linux.json"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 10,
                  "endLine": 3,
                  "endColumn": 18,
                  "snippet": {
                    "text": "{\n  \"agent\": {\n    \"omit_hostname\": true\n  },\n  \"metrics\": {\n    \"metrics_destinations\": {\n",
                    "rendered": {
                      "text": "{\n  \"agent\": {\n    \"omit_hostname\": true\n  },\n  \"metrics\": {\n    \"metrics_destinations\": {\n",
                      "markdown": "`{\n  \"agent\": {\n    \"omit_hostname\": true\n  },\n  \"metrics\": {\n    \"metrics_destinations\": {\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/clean/clean_file_system/clean_file_system.go"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 22,
                  "endLine": 81,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t\t\tif _, err = client.DeleteMountTarget(cxt, dlmti); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tlog.Printf(\"Deleted mount target %s for %s successfully\", *mountTarget.MountTargetId, *fileSystemId)\n\t\t}\n\t\tif dmto.Marker == nil {\n\t\t\tbreak\n",
                    "rendered": {
                      "text": "\t\t\tif _, err = client.DeleteMountTarget(cxt, dlmti); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tlog.Printf(\"Deleted mount target %s for %s successfully\", *mountTarget.MountTargetId, *fileSystemId)\n\t\t}\n\t\tif dmto.Marker == nil {\n\t\t\tbreak\n",
                      "markdown": "`\t\t\tif _, err = client.DeleteMountTarget(cxt, dlmti); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tlog.Printf(\"Deleted mount target %s for %s successfully\", *mountTarget.MountTargetId, *fileSystemId)\n\t\t}\n\t\tif dmto.Marker == nil {\n\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/clean/clean_file_system/clean_file_system.go"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 41,
                  "endLine": 49,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t\t\tif err == nil {\n\t\t\t\t\tfileSystemIdSlice = append(fileSystemIdSlice, fileSystem.FileSystemId)\n\t\t\t\t} else {\n\t\t\t\t\tlog.Printf(\"Unable to delete all the mount targets for %s due to %v\", *fileSystem.FileSystemId, err)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n",
                    "rendered": {
                      "text": "\t\t\t\tif err == nil {\n\t\t\t\t\tfileSystemIdSlice = append(fileSystemIdSlice, fileSystem.FileSystemId)\n\t\t\t\t} else {\n\t\t\t\t\tlog.Printf(\"Unable to delete all the mount targets for %s due to %v\", *fileSystem.FileSystemId, err)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n",
                      "markdown": "`\t\t\t\tif err == nil {\n\t\t\t\t\tfileSystemIdSlice = append(fileSystemIdSlice, fileSystem.FileSystemId)\n\t\t\t\t} else {\n\t\t\t\t\tlog.Printf(\"Unable to delete all the mount targets for %s due to %v\", *fileSystem.FileSystemId, err)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/clean/clean_eks/clean_eks.go"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 32,
                  "endLine": 120,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t\t\t}\n\t\t\t_, err := client.DeleteNodegroup(ctx, &deleteNodegroupInput)\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"could not delete node groups %s cluster %s err %v\", nodegroup, cluster, err)\n\t\t\t}\n\t\t}\n\t\tdeleteClusterInput := eks.DeleteClusterInput{Name: aws.String(cluster)}\n",
                    "rendered": {
                      "text": "\t\t\t}\n\t\t\t_, err := client.DeleteNodegroup(ctx, &deleteNodegroupInput)\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"could not delete node groups %s cluster %s err %v\", nodegroup, cluster, err)\n\t\t\t}\n\t\t}\n\t\tdeleteClusterInput := eks.DeleteClusterInput{Name: aws.String(cluster)}\n",
                      "markdown": "`\t\t\t}\n\t\t\t_, err := client.DeleteNodegroup(ctx, &deleteNodegroupInput)\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"could not delete node groups %s cluster %s err %v\", nodegroup, cluster, err)\n\t\t\t}\n\t\t}\n\t\tdeleteClusterInput := eks.DeleteClusterInput{Name: aws.String(cluster)}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/clean/clean_eks/clean_eks.go"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 30,
                  "endLine": 106,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\t\tdescribeNodegroupInput := eks.ListNodegroupsInput{ClusterName: aws.String(cluster)}\n\t\tnodeGroupOutput, err := client.ListNodegroups(ctx, &describeNodegroupInput)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"could not query node groups cluster %s err %v\", cluster, err)\n\t\t}\n\t\t// it takes about 5 minutes to delete node groups\n\t\t// it will fail to delete cluster if we need to delete node groups\n",
                    "rendered": {
                      "text": "\t\tdescribeNodegroupInput := eks.ListNodegroupsInput{ClusterName: aws.String(cluster)}\n\t\tnodeGroupOutput, err := client.ListNodegroups(ctx, &describeNodegroupInput)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"could not query node groups cluster %s err %v\", cluster, err)\n\t\t}\n\t\t// it takes about 5 minutes to delete node groups\n\t\t// it will fail to delete cluster if we need to delete node groups\n",
                      "markdown": "`\t\tdescribeNodegroupInput := eks.ListNodegroupsInput{ClusterName: aws.String(cluster)}\n\t\tnodeGroupOutput, err := client.ListNodegroups(ctx, &describeNodegroupInput)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"could not query node groups cluster %s err %v\", cluster, err)\n\t\t}\n\t\t// it takes about 5 minutes to delete node groups\n\t\t// it will fail to delete cluster if we need to delete node groups\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/clean/clean_ecs/clean_ecs.go"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 35,
                  "endLine": 124,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t\t\tdeleteServiceInput := ecs.DeleteServiceInput{Cluster: clusterId, Service: aws.String(service)}\n\t\t\t\t_, err := client.DeleteService(ctx, &deleteServiceInput)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Printf(\"Error %v deleteing service %s cluster %s\", err, serviceInput, *clusterId)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\t\tdeleteServiceInput := ecs.DeleteServiceInput{Cluster: clusterId, Service: aws.String(service)}\n\t\t\t\t_, err := client.DeleteService(ctx, &deleteServiceInput)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Printf(\"Error %v deleteing service %s cluster %s\", err, serviceInput, *clusterId)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n",
                      "markdown": "`\t\t\t\tdeleteServiceInput := ecs.DeleteServiceInput{Cluster: clusterId, Service: aws.String(service)}\n\t\t\t\t_, err := client.DeleteService(ctx, &deleteServiceInput)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Printf(\"Error %v deleteing service %s cluster %s\", err, serviceInput, *clusterId)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/clean/clean_ecs/clean_ecs.go"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 9,
                  "endLine": 120,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\t\t\t\tlog.Printf(\"Error %v getting services cluster %s\", err, *clusterId)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tfor _, service := range services.ServiceArns {\n\t\t\t\tdeleteServiceInput := ecs.DeleteServiceInput{Cluster: clusterId, Service: aws.String(service)}\n\t\t\t\t_, err := client.DeleteService(ctx, &deleteServiceInput)\n\t\t\t\tif err != nil {\n",
                    "rendered": {
                      "text": "\t\t\t\tlog.Printf(\"Error %v getting services cluster %s\", err, *clusterId)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tfor _, service := range services.ServiceArns {\n\t\t\t\tdeleteServiceInput := ecs.DeleteServiceInput{Cluster: clusterId, Service: aws.String(service)}\n\t\t\t\t_, err := client.DeleteService(ctx, &deleteServiceInput)\n\t\t\t\tif err != nil {\n",
                      "markdown": "`\t\t\t\tlog.Printf(\"Error %v getting services cluster %s\", err, *clusterId)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tfor _, service := range services.ServiceArns {\n\t\t\t\tdeleteServiceInput := ecs.DeleteServiceInput{Cluster: clusterId, Service: aws.String(service)}\n\t\t\t\t_, err := client.DeleteService(ctx, &deleteServiceInput)\n\t\t\t\tif err != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/clean/clean_iam_roles/clean_iam_roles_test.go"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 26,
                  "endLine": 136,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\t\t\tinput := call.Arguments.Get(1).(*iam.ListAttachedRolePoliciesInput)\n\t\t\tassert.Equal(t, expiredTestRoleName, *input.RoleName)\n\t\tcase \"DetachRolePolicy\":\n\t\t\tinput := call.Arguments.Get(1).(*iam.DetachRolePolicyInput)\n\t\t\tassert.Equal(t, expiredTestRoleName, *input.RoleName)\n\t\t\tassert.Equal(t, \"policy-arn\", *input.PolicyArn)\n\t\t}\n",
                    "rendered": {
                      "text": "\t\t\tinput := call.Arguments.Get(1).(*iam.ListAttachedRolePoliciesInput)\n\t\t\tassert.Equal(t, expiredTestRoleName, *input.RoleName)\n\t\tcase \"DetachRolePolicy\":\n\t\t\tinput := call.Arguments.Get(1).(*iam.DetachRolePolicyInput)\n\t\t\tassert.Equal(t, expiredTestRoleName, *input.RoleName)\n\t\t\tassert.Equal(t, \"policy-arn\", *input.PolicyArn)\n\t\t}\n",
                      "markdown": "`\t\t\tinput := call.Arguments.Get(1).(*iam.ListAttachedRolePoliciesInput)\n\t\t\tassert.Equal(t, expiredTestRoleName, *input.RoleName)\n\t\tcase \"DetachRolePolicy\":\n\t\t\tinput := call.Arguments.Get(1).(*iam.DetachRolePolicyInput)\n\t\t\tassert.Equal(t, expiredTestRoleName, *input.RoleName)\n\t\t\tassert.Equal(t, \"policy-arn\", *input.PolicyArn)\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/clean/clean_iam_roles/clean_iam_roles_test.go"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 26,
                  "endLine": 133,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\t\t\tinput := call.Arguments.Get(1).(*iam.DeleteRoleInput)\n\t\t\tassert.Equal(t, expiredTestRoleName, *input.RoleName)\n\t\tcase \"ListAttachedRolePolicies\":\n\t\t\tinput := call.Arguments.Get(1).(*iam.ListAttachedRolePoliciesInput)\n\t\t\tassert.Equal(t, expiredTestRoleName, *input.RoleName)\n\t\tcase \"DetachRolePolicy\":\n\t\t\tinput := call.Arguments.Get(1).(*iam.DetachRolePolicyInput)\n",
                    "rendered": {
                      "text": "\t\t\tinput := call.Arguments.Get(1).(*iam.DeleteRoleInput)\n\t\t\tassert.Equal(t, expiredTestRoleName, *input.RoleName)\n\t\tcase \"ListAttachedRolePolicies\":\n\t\t\tinput := call.Arguments.Get(1).(*iam.ListAttachedRolePoliciesInput)\n\t\t\tassert.Equal(t, expiredTestRoleName, *input.RoleName)\n\t\tcase \"DetachRolePolicy\":\n\t\t\tinput := call.Arguments.Get(1).(*iam.DetachRolePolicyInput)\n",
                      "markdown": "`\t\t\tinput := call.Arguments.Get(1).(*iam.DeleteRoleInput)\n\t\t\tassert.Equal(t, expiredTestRoleName, *input.RoleName)\n\t\tcase \"ListAttachedRolePolicies\":\n\t\t\tinput := call.Arguments.Get(1).(*iam.ListAttachedRolePoliciesInput)\n\t\t\tassert.Equal(t, expiredTestRoleName, *input.RoleName)\n\t\tcase \"DetachRolePolicy\":\n\t\t\tinput := call.Arguments.Get(1).(*iam.DetachRolePolicyInput)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/clean/clean_iam_roles/clean_iam_roles_test.go"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 26,
                  "endLine": 130,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tfor _, call := range client.Calls {\n\t\tswitch call.Method {\n\t\tcase \"DeleteRole\":\n\t\t\tinput := call.Arguments.Get(1).(*iam.DeleteRoleInput)\n\t\t\tassert.Equal(t, expiredTestRoleName, *input.RoleName)\n\t\tcase \"ListAttachedRolePolicies\":\n\t\t\tinput := call.Arguments.Get(1).(*iam.ListAttachedRolePoliciesInput)\n",
                    "rendered": {
                      "text": "\tfor _, call := range client.Calls {\n\t\tswitch call.Method {\n\t\tcase \"DeleteRole\":\n\t\t\tinput := call.Arguments.Get(1).(*iam.DeleteRoleInput)\n\t\t\tassert.Equal(t, expiredTestRoleName, *input.RoleName)\n\t\tcase \"ListAttachedRolePolicies\":\n\t\t\tinput := call.Arguments.Get(1).(*iam.ListAttachedRolePoliciesInput)\n",
                      "markdown": "`\tfor _, call := range client.Calls {\n\t\tswitch call.Method {\n\t\tcase \"DeleteRole\":\n\t\t\tinput := call.Arguments.Get(1).(*iam.DeleteRoleInput)\n\t\t\tassert.Equal(t, expiredTestRoleName, *input.RoleName)\n\t\tcase \"ListAttachedRolePolicies\":\n\t\t\tinput := call.Arguments.Get(1).(*iam.ListAttachedRolePoliciesInput)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/clean/clean_iam_roles/clean_iam_roles_test.go"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 12,
                  "endLine": 66,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\nfunc (m *mockIamClient) DeleteInstanceProfile(ctx context.Context, input *iam.DeleteInstanceProfileInput, optFns ...func(*iam.Options)) (*iam.DeleteInstanceProfileOutput, error) {\n\targs := m.Called(ctx, input, optFns)\n\treturn args.Get(0).(*iam.DeleteInstanceProfileOutput), args.Error(1)\n}\n\nfunc TestDeleteRoles(t *testing.T) {\n",
                    "rendered": {
                      "text": "\nfunc (m *mockIamClient) DeleteInstanceProfile(ctx context.Context, input *iam.DeleteInstanceProfileInput, optFns ...func(*iam.Options)) (*iam.DeleteInstanceProfileOutput, error) {\n\targs := m.Called(ctx, input, optFns)\n\treturn args.Get(0).(*iam.DeleteInstanceProfileOutput), args.Error(1)\n}\n\nfunc TestDeleteRoles(t *testing.T) {\n",
                      "markdown": "`\nfunc (m *mockIamClient) DeleteInstanceProfile(ctx context.Context, input *iam.DeleteInstanceProfileInput, optFns ...func(*iam.Options)) (*iam.DeleteInstanceProfileOutput, error) {\n\targs := m.Called(ctx, input, optFns)\n\treturn args.Get(0).(*iam.DeleteInstanceProfileOutput), args.Error(1)\n}\n\nfunc TestDeleteRoles(t *testing.T) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/clean/clean_iam_roles/clean_iam_roles_test.go"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 12,
                  "endLine": 61,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\nfunc (m *mockIamClient) RemoveRoleFromInstanceProfile(ctx context.Context, input *iam.RemoveRoleFromInstanceProfileInput, optFns ...func(*iam.Options)) (*iam.RemoveRoleFromInstanceProfileOutput, error) {\n\targs := m.Called(ctx, input, optFns)\n\treturn args.Get(0).(*iam.RemoveRoleFromInstanceProfileOutput), args.Error(1)\n}\n\nfunc (m *mockIamClient) DeleteInstanceProfile(ctx context.Context, input *iam.DeleteInstanceProfileInput, optFns ...func(*iam.Options)) (*iam.DeleteInstanceProfileOutput, error) {\n",
                    "rendered": {
                      "text": "\nfunc (m *mockIamClient) RemoveRoleFromInstanceProfile(ctx context.Context, input *iam.RemoveRoleFromInstanceProfileInput, optFns ...func(*iam.Options)) (*iam.RemoveRoleFromInstanceProfileOutput, error) {\n\targs := m.Called(ctx, input, optFns)\n\treturn args.Get(0).(*iam.RemoveRoleFromInstanceProfileOutput), args.Error(1)\n}\n\nfunc (m *mockIamClient) DeleteInstanceProfile(ctx context.Context, input *iam.DeleteInstanceProfileInput, optFns ...func(*iam.Options)) (*iam.DeleteInstanceProfileOutput, error) {\n",
                      "markdown": "`\nfunc (m *mockIamClient) RemoveRoleFromInstanceProfile(ctx context.Context, input *iam.RemoveRoleFromInstanceProfileInput, optFns ...func(*iam.Options)) (*iam.RemoveRoleFromInstanceProfileOutput, error) {\n\targs := m.Called(ctx, input, optFns)\n\treturn args.Get(0).(*iam.RemoveRoleFromInstanceProfileOutput), args.Error(1)\n}\n\nfunc (m *mockIamClient) DeleteInstanceProfile(ctx context.Context, input *iam.DeleteInstanceProfileInput, optFns ...func(*iam.Options)) (*iam.DeleteInstanceProfileOutput, error) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/clean/clean_iam_roles/clean_iam_roles_test.go"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 12,
                  "endLine": 56,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\nfunc (m *mockIamClient) ListInstanceProfilesForRole(ctx context.Context, input *iam.ListInstanceProfilesForRoleInput, optFns ...func(*iam.Options)) (*iam.ListInstanceProfilesForRoleOutput, error) {\n\targs := m.Called(ctx, input, optFns)\n\treturn args.Get(0).(*iam.ListInstanceProfilesForRoleOutput), args.Error(1)\n}\n\nfunc (m *mockIamClient) RemoveRoleFromInstanceProfile(ctx context.Context, input *iam.RemoveRoleFromInstanceProfileInput, optFns ...func(*iam.Options)) (*iam.RemoveRoleFromInstanceProfileOutput, error) {\n",
                    "rendered": {
                      "text": "\nfunc (m *mockIamClient) ListInstanceProfilesForRole(ctx context.Context, input *iam.ListInstanceProfilesForRoleInput, optFns ...func(*iam.Options)) (*iam.ListInstanceProfilesForRoleOutput, error) {\n\targs := m.Called(ctx, input, optFns)\n\treturn args.Get(0).(*iam.ListInstanceProfilesForRoleOutput), args.Error(1)\n}\n\nfunc (m *mockIamClient) RemoveRoleFromInstanceProfile(ctx context.Context, input *iam.RemoveRoleFromInstanceProfileInput, optFns ...func(*iam.Options)) (*iam.RemoveRoleFromInstanceProfileOutput, error) {\n",
                      "markdown": "`\nfunc (m *mockIamClient) ListInstanceProfilesForRole(ctx context.Context, input *iam.ListInstanceProfilesForRoleInput, optFns ...func(*iam.Options)) (*iam.ListInstanceProfilesForRoleOutput, error) {\n\targs := m.Called(ctx, input, optFns)\n\treturn args.Get(0).(*iam.ListInstanceProfilesForRoleOutput), args.Error(1)\n}\n\nfunc (m *mockIamClient) RemoveRoleFromInstanceProfile(ctx context.Context, input *iam.RemoveRoleFromInstanceProfileInput, optFns ...func(*iam.Options)) (*iam.RemoveRoleFromInstanceProfileOutput, error) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/clean/clean_iam_roles/clean_iam_roles_test.go"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 12,
                  "endLine": 51,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\nfunc (m *mockIamClient) DetachRolePolicy(ctx context.Context, input *iam.DetachRolePolicyInput, optFns ...func(*iam.Options)) (*iam.DetachRolePolicyOutput, error) {\n\targs := m.Called(ctx, input, optFns)\n\treturn args.Get(0).(*iam.DetachRolePolicyOutput), args.Error(1)\n}\n\nfunc (m *mockIamClient) ListInstanceProfilesForRole(ctx context.Context, input *iam.ListInstanceProfilesForRoleInput, optFns ...func(*iam.Options)) (*iam.ListInstanceProfilesForRoleOutput, error) {\n",
                    "rendered": {
                      "text": "\nfunc (m *mockIamClient) DetachRolePolicy(ctx context.Context, input *iam.DetachRolePolicyInput, optFns ...func(*iam.Options)) (*iam.DetachRolePolicyOutput, error) {\n\targs := m.Called(ctx, input, optFns)\n\treturn args.Get(0).(*iam.DetachRolePolicyOutput), args.Error(1)\n}\n\nfunc (m *mockIamClient) ListInstanceProfilesForRole(ctx context.Context, input *iam.ListInstanceProfilesForRoleInput, optFns ...func(*iam.Options)) (*iam.ListInstanceProfilesForRoleOutput, error) {\n",
                      "markdown": "`\nfunc (m *mockIamClient) DetachRolePolicy(ctx context.Context, input *iam.DetachRolePolicyInput, optFns ...func(*iam.Options)) (*iam.DetachRolePolicyOutput, error) {\n\targs := m.Called(ctx, input, optFns)\n\treturn args.Get(0).(*iam.DetachRolePolicyOutput), args.Error(1)\n}\n\nfunc (m *mockIamClient) ListInstanceProfilesForRole(ctx context.Context, input *iam.ListInstanceProfilesForRoleInput, optFns ...func(*iam.Options)) (*iam.ListInstanceProfilesForRoleOutput, error) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/clean/clean_iam_roles/clean_iam_roles_test.go"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 12,
                  "endLine": 46,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\nfunc (m *mockIamClient) ListAttachedRolePolicies(ctx context.Context, input *iam.ListAttachedRolePoliciesInput, optFns ...func(*iam.Options)) (*iam.ListAttachedRolePoliciesOutput, error) {\n\targs := m.Called(ctx, input, optFns)\n\treturn args.Get(0).(*iam.ListAttachedRolePoliciesOutput), args.Error(1)\n}\n\nfunc (m *mockIamClient) DetachRolePolicy(ctx context.Context, input *iam.DetachRolePolicyInput, optFns ...func(*iam.Options)) (*iam.DetachRolePolicyOutput, error) {\n",
                    "rendered": {
                      "text": "\nfunc (m *mockIamClient) ListAttachedRolePolicies(ctx context.Context, input *iam.ListAttachedRolePoliciesInput, optFns ...func(*iam.Options)) (*iam.ListAttachedRolePoliciesOutput, error) {\n\targs := m.Called(ctx, input, optFns)\n\treturn args.Get(0).(*iam.ListAttachedRolePoliciesOutput), args.Error(1)\n}\n\nfunc (m *mockIamClient) DetachRolePolicy(ctx context.Context, input *iam.DetachRolePolicyInput, optFns ...func(*iam.Options)) (*iam.DetachRolePolicyOutput, error) {\n",
                      "markdown": "`\nfunc (m *mockIamClient) ListAttachedRolePolicies(ctx context.Context, input *iam.ListAttachedRolePoliciesInput, optFns ...func(*iam.Options)) (*iam.ListAttachedRolePoliciesOutput, error) {\n\targs := m.Called(ctx, input, optFns)\n\treturn args.Get(0).(*iam.ListAttachedRolePoliciesOutput), args.Error(1)\n}\n\nfunc (m *mockIamClient) DetachRolePolicy(ctx context.Context, input *iam.DetachRolePolicyInput, optFns ...func(*iam.Options)) (*iam.DetachRolePolicyOutput, error) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/clean/clean_iam_roles/clean_iam_roles_test.go"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 12,
                  "endLine": 41,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\nfunc (m *mockIamClient) DeleteRole(ctx context.Context, input *iam.DeleteRoleInput, optFns ...func(*iam.Options)) (*iam.DeleteRoleOutput, error) {\n\targs := m.Called(ctx, input, optFns)\n\treturn args.Get(0).(*iam.DeleteRoleOutput), args.Error(1)\n}\n\nfunc (m *mockIamClient) ListAttachedRolePolicies(ctx context.Context, input *iam.ListAttachedRolePoliciesInput, optFns ...func(*iam.Options)) (*iam.ListAttachedRolePoliciesOutput, error) {\n",
                    "rendered": {
                      "text": "\nfunc (m *mockIamClient) DeleteRole(ctx context.Context, input *iam.DeleteRoleInput, optFns ...func(*iam.Options)) (*iam.DeleteRoleOutput, error) {\n\targs := m.Called(ctx, input, optFns)\n\treturn args.Get(0).(*iam.DeleteRoleOutput), args.Error(1)\n}\n\nfunc (m *mockIamClient) ListAttachedRolePolicies(ctx context.Context, input *iam.ListAttachedRolePoliciesInput, optFns ...func(*iam.Options)) (*iam.ListAttachedRolePoliciesOutput, error) {\n",
                      "markdown": "`\nfunc (m *mockIamClient) DeleteRole(ctx context.Context, input *iam.DeleteRoleInput, optFns ...func(*iam.Options)) (*iam.DeleteRoleOutput, error) {\n\targs := m.Called(ctx, input, optFns)\n\treturn args.Get(0).(*iam.DeleteRoleOutput), args.Error(1)\n}\n\nfunc (m *mockIamClient) ListAttachedRolePolicies(ctx context.Context, input *iam.ListAttachedRolePoliciesInput, optFns ...func(*iam.Options)) (*iam.ListAttachedRolePoliciesOutput, error) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/clean/clean_iam_roles/clean_iam_roles_test.go"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 12,
                  "endLine": 36,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\nfunc (m *mockIamClient) GetRole(ctx context.Context, input *iam.GetRoleInput, optFns ...func(*iam.Options)) (*iam.GetRoleOutput, error) {\n\targs := m.Called(ctx, input, optFns)\n\treturn args.Get(0).(*iam.GetRoleOutput), args.Error(1)\n}\n\nfunc (m *mockIamClient) DeleteRole(ctx context.Context, input *iam.DeleteRoleInput, optFns ...func(*iam.Options)) (*iam.DeleteRoleOutput, error) {\n",
                    "rendered": {
                      "text": "\nfunc (m *mockIamClient) GetRole(ctx context.Context, input *iam.GetRoleInput, optFns ...func(*iam.Options)) (*iam.GetRoleOutput, error) {\n\targs := m.Called(ctx, input, optFns)\n\treturn args.Get(0).(*iam.GetRoleOutput), args.Error(1)\n}\n\nfunc (m *mockIamClient) DeleteRole(ctx context.Context, input *iam.DeleteRoleInput, optFns ...func(*iam.Options)) (*iam.DeleteRoleOutput, error) {\n",
                      "markdown": "`\nfunc (m *mockIamClient) GetRole(ctx context.Context, input *iam.GetRoleInput, optFns ...func(*iam.Options)) (*iam.GetRoleOutput, error) {\n\targs := m.Called(ctx, input, optFns)\n\treturn args.Get(0).(*iam.GetRoleOutput), args.Error(1)\n}\n\nfunc (m *mockIamClient) DeleteRole(ctx context.Context, input *iam.DeleteRoleInput, optFns ...func(*iam.Options)) (*iam.DeleteRoleOutput, error) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/clean/clean_iam_roles/clean_iam_roles_test.go"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 12,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\nfunc (m *mockIamClient) ListRoles(ctx context.Context, input *iam.ListRolesInput, optFns ...func(*iam.Options)) (*iam.ListRolesOutput, error) {\n\targs := m.Called(ctx, input, optFns)\n\treturn args.Get(0).(*iam.ListRolesOutput), args.Error(1)\n}\n\nfunc (m *mockIamClient) GetRole(ctx context.Context, input *iam.GetRoleInput, optFns ...func(*iam.Options)) (*iam.GetRoleOutput, error) {\n",
                    "rendered": {
                      "text": "\nfunc (m *mockIamClient) ListRoles(ctx context.Context, input *iam.ListRolesInput, optFns ...func(*iam.Options)) (*iam.ListRolesOutput, error) {\n\targs := m.Called(ctx, input, optFns)\n\treturn args.Get(0).(*iam.ListRolesOutput), args.Error(1)\n}\n\nfunc (m *mockIamClient) GetRole(ctx context.Context, input *iam.GetRoleInput, optFns ...func(*iam.Options)) (*iam.GetRoleOutput, error) {\n",
                      "markdown": "`\nfunc (m *mockIamClient) ListRoles(ctx context.Context, input *iam.ListRolesInput, optFns ...func(*iam.Options)) (*iam.ListRolesOutput, error) {\n\targs := m.Called(ctx, input, optFns)\n\treturn args.Get(0).(*iam.ListRolesOutput), args.Error(1)\n}\n\nfunc (m *mockIamClient) GetRole(ctx context.Context, input *iam.GetRoleInput, optFns ...func(*iam.Options)) (*iam.GetRoleOutput, error) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/clean/README.md"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 145,
                  "endLine": 8,
                  "endColumn": 151,
                  "snippet": {
                    "text": "The cleaner first searches for ami names (these are the ami created by the pipeline for use int he integration tests)\n1. cloudwatch-agent-integration-test*\n\nThen checks to see if the creation date is greater than 60 days. (The aws sdk v2 gives creation date as a pointer to string. To convert to golang time we use the aws smithy go time. This allows us to compare to 60 days in past time)\n\nIf the ami is older than 60 days old then we delete the ami\n\n",
                    "rendered": {
                      "text": "The cleaner first searches for ami names (these are the ami created by the pipeline for use int he integration tests)\n1. cloudwatch-agent-integration-test*\n\nThen checks to see if the creation date is greater than 60 days. (The aws sdk v2 gives creation date as a pointer to string. To convert to golang time we use the aws smithy go time. This allows us to compare to 60 days in past time)\n\nIf the ami is older than 60 days old then we delete the ami\n\n",
                      "markdown": "`The cleaner first searches for ami names (these are the ami created by the pipeline for use int he integration tests)\n1. cloudwatch-agent-integration-test*\n\nThen checks to see if the creation date is greater than 60 days. (The aws sdk v2 gives creation date as a pointer to string. To convert to golang time we use the aws smithy go time. This allows us to compare to 60 days in past time)\n\nIf the ami is older than 60 days old then we delete the ami\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/serialization/serialization.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 34,
                  "endLine": 32,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\tfmt.Printf(\"Current config as follows:\\n\"+\n\t\t\"%s\\n\"+\n\t\t\"Please check the above content of the config.\\n\"+\n\t\t\"The config file is also located at %s.\\n\"+\n\t\t\"Edit it manually if needed.\\n\",\n\t\tstring(byteArray),\n\t\tfilepath)\n",
                    "rendered": {
                      "text": "\tfmt.Printf(\"Current config as follows:\\n\"+\n\t\t\"%s\\n\"+\n\t\t\"Please check the above content of the config.\\n\"+\n\t\t\"The config file is also located at %s.\\n\"+\n\t\t\"Edit it manually if needed.\\n\",\n\t\tstring(byteArray),\n\t\tfilepath)\n",
                      "markdown": "`\tfmt.Printf(\"Current config as follows:\\n\"+\n\t\t\"%s\\n\"+\n\t\t\"Please check the above content of the config.\\n\"+\n\t\t\"The config file is also located at %s.\\n\"+\n\t\t\"Edit it manually if needed.\\n\",\n\t\tstring(byteArray),\n\t\tfilepath)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/tracesconfig/testdata/cfg.yaml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 18,
                  "endLine": 7,
                  "endColumn": 27,
                  "snippet": {
                    "text": "Concurrency: 8\n# Send segments to AWS X-Ray service in a specific region\nRegion: \"us-east-1\"\n# Change the X-Ray service endpoint to which the daemon sends segment documents.\nEndpoint: \"\"\nSocket:\n  # Change the address and port on which the daemon listens for UDP packets containing segment documents.\n",
                    "rendered": {
                      "text": "Concurrency: 8\n# Send segments to AWS X-Ray service in a specific region\nRegion: \"us-east-1\"\n# Change the X-Ray service endpoint to which the daemon sends segment documents.\nEndpoint: \"\"\nSocket:\n  # Change the address and port on which the daemon listens for UDP packets containing segment documents.\n",
                      "markdown": "`Concurrency: 8\n# Send segments to AWS X-Ray service in a specific region\nRegion: \"us-east-1\"\n# Change the X-Ray service endpoint to which the daemon sends segment documents.\nEndpoint: \"\"\nSocket:\n  # Change the address and port on which the daemon listens for UDP packets containing segment documents.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/tracesconfig/testdata/cfg.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 28,
                  "endLine": 5,
                  "endColumn": 37,
                  "snippet": {
                    "text": "TotalBufferSizeMB: 23\n# Maximum number of concurrent calls to AWS X-Ray to upload segment documents.\nConcurrency: 8\n# Send segments to AWS X-Ray service in a specific region\nRegion: \"us-east-1\"\n# Change the X-Ray service endpoint to which the daemon sends segment documents.\nEndpoint: \"\"\n",
                    "rendered": {
                      "text": "TotalBufferSizeMB: 23\n# Maximum number of concurrent calls to AWS X-Ray to upload segment documents.\nConcurrency: 8\n# Send segments to AWS X-Ray service in a specific region\nRegion: \"us-east-1\"\n# Change the X-Ray service endpoint to which the daemon sends segment documents.\nEndpoint: \"\"\n",
                      "markdown": "`TotalBufferSizeMB: 23\n# Maximum number of concurrent calls to AWS X-Ray to upload segment documents.\nConcurrency: 8\n# Send segments to AWS X-Ray service in a specific region\nRegion: \"us-east-1\"\n# Change the X-Ray service endpoint to which the daemon sends segment documents.\nEndpoint: \"\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/tracesconfig/tracesconfig.go"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 52,
                  "endLine": 171,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\t\t\t}\n\n\t\tcase 6, 7:\n\t\t\tanswer := util.Ask(\"Enter value you would like to update to: (Enter nothing to remove)\")\n\t\t\tnewValue, err := strconv.ParseBool(answer)\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\"Wrong Input! Input has go be a bool\")\n",
                    "rendered": {
                      "text": "\t\t\t}\n\n\t\tcase 6, 7:\n\t\t\tanswer := util.Ask(\"Enter value you would like to update to: (Enter nothing to remove)\")\n\t\t\tnewValue, err := strconv.ParseBool(answer)\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\"Wrong Input! Input has go be a bool\")\n",
                      "markdown": "`\t\t\t}\n\n\t\tcase 6, 7:\n\t\t\tanswer := util.Ask(\"Enter value you would like to update to: (Enter nothing to remove)\")\n\t\t\tnewValue, err := strconv.ParseBool(answer)\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\"Wrong Input! Input has go be a bool\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/tracesconfig/tracesconfig.go"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 52,
                  "endLine": 160,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\t\t\tnewValue := util.Ask(\"Enter value you would like to update to: (Enter nothing to remove)\")\n\t\t\tupdateStringValueInConfig(tracesConfig, option, newValue)\n\t\tcase 3, 4:\n\t\t\tanswer := util.Ask(\"Enter value you would like to update to: (Enter nothing to remove)\")\n\n\t\t\tnewValue, err := strconv.Atoi(answer)\n\t\t\tif err != nil {\n",
                    "rendered": {
                      "text": "\t\t\tnewValue := util.Ask(\"Enter value you would like to update to: (Enter nothing to remove)\")\n\t\t\tupdateStringValueInConfig(tracesConfig, option, newValue)\n\t\tcase 3, 4:\n\t\t\tanswer := util.Ask(\"Enter value you would like to update to: (Enter nothing to remove)\")\n\n\t\t\tnewValue, err := strconv.Atoi(answer)\n\t\t\tif err != nil {\n",
                      "markdown": "`\t\t\tnewValue := util.Ask(\"Enter value you would like to update to: (Enter nothing to remove)\")\n\t\t\tupdateStringValueInConfig(tracesConfig, option, newValue)\n\t\tcase 3, 4:\n\t\t\tanswer := util.Ask(\"Enter value you would like to update to: (Enter nothing to remove)\")\n\n\t\t\tnewValue, err := strconv.Atoi(answer)\n\t\t\tif err != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/tracesconfig/tracesconfig.go"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 54,
                  "endLine": 157,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\t\t}\n\t\tswitch option {\n\t\tcase 1, 2, 5, 8, 9, 10, 11:\n\t\t\tnewValue := util.Ask(\"Enter value you would like to update to: (Enter nothing to remove)\")\n\t\t\tupdateStringValueInConfig(tracesConfig, option, newValue)\n\t\tcase 3, 4:\n\t\t\tanswer := util.Ask(\"Enter value you would like to update to: (Enter nothing to remove)\")\n",
                    "rendered": {
                      "text": "\t\t}\n\t\tswitch option {\n\t\tcase 1, 2, 5, 8, 9, 10, 11:\n\t\t\tnewValue := util.Ask(\"Enter value you would like to update to: (Enter nothing to remove)\")\n\t\t\tupdateStringValueInConfig(tracesConfig, option, newValue)\n\t\tcase 3, 4:\n\t\t\tanswer := util.Ask(\"Enter value you would like to update to: (Enter nothing to remove)\")\n",
                      "markdown": "`\t\t}\n\t\tswitch option {\n\t\tcase 1, 2, 5, 8, 9, 10, 11:\n\t\t\tnewValue := util.Ask(\"Enter value you would like to update to: (Enter nothing to remove)\")\n\t\t\tupdateStringValueInConfig(tracesConfig, option, newValue)\n\t\tcase 3, 4:\n\t\t\tanswer := util.Ask(\"Enter value you would like to update to: (Enter nothing to remove)\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/tracesconfig/tracesconfig.go"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 60,
                  "endLine": 137,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\t\tfmt.Println(\"Current Traces Configurations:\")\n\t\tjsonByte, _ := json.MarshalIndent(jsonData, \"\", \"\\t\")\n\t\tfmt.Println(string(jsonByte))\n\t\tfmt.Println(\"Enter a number of the field you would like to update (or 0 to exit)\")\n\t\tfor i := 0; i < len(fieldOptions); i++ {\n\t\t\tfmt.Println(fieldOptions[i])\n\t\t}\n",
                    "rendered": {
                      "text": "\t\tfmt.Println(\"Current Traces Configurations:\")\n\t\tjsonByte, _ := json.MarshalIndent(jsonData, \"\", \"\\t\")\n\t\tfmt.Println(string(jsonByte))\n\t\tfmt.Println(\"Enter a number of the field you would like to update (or 0 to exit)\")\n\t\tfor i := 0; i < len(fieldOptions); i++ {\n\t\t\tfmt.Println(fieldOptions[i])\n\t\t}\n",
                      "markdown": "`\t\tfmt.Println(\"Current Traces Configurations:\")\n\t\tjsonByte, _ := json.MarshalIndent(jsonData, \"\", \"\\t\")\n\t\tfmt.Println(string(jsonByte))\n\t\tfmt.Println(\"Enter a number of the field you would like to update (or 0 to exit)\")\n\t\tfor i := 0; i < len(fieldOptions); i++ {\n\t\t\tfmt.Println(fieldOptions[i])\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/tracesconfig/tracesconfig.go"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 45,
                  "endLine": 303,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\n\tconfigFilePath, err = xraydaemonmigration.FindConfigFile(chosenProcess)\n\tif err != nil {\n\t\tfmt.Println(\"Ran into error while trying to find Daemon Configurations. Using default traces configuration\")\n\t\terr = json.Unmarshal(DefaultTracesConfigFile, &tracesFile)\n\t\tif err != nil {\n\t\t\treturn nil, err\n",
                    "rendered": {
                      "text": "\n\tconfigFilePath, err = xraydaemonmigration.FindConfigFile(chosenProcess)\n\tif err != nil {\n\t\tfmt.Println(\"Ran into error while trying to find Daemon Configurations. Using default traces configuration\")\n\t\terr = json.Unmarshal(DefaultTracesConfigFile, &tracesFile)\n\t\tif err != nil {\n\t\t\treturn nil, err\n",
                      "markdown": "`\n\tconfigFilePath, err = xraydaemonmigration.FindConfigFile(chosenProcess)\n\tif err != nil {\n\t\tfmt.Println(\"Ran into error while trying to find Daemon Configurations. Using default traces configuration\")\n\t\terr = json.Unmarshal(DefaultTracesConfigFile, &tracesFile)\n\t\tif err != nil {\n\t\t\treturn nil, err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/tracesconfig/tracesconfig.go"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 71,
                  "endLine": 117,
                  "endColumn": 80,
                  "snippet": {
                    "text": "}\n\nfunc chooseRegion(tracesConfig *config.Traces) {\n\tanswer := util.Ask(\"Enter the AWS Region to send segments to AWS X-Ray service (Optional)\")\n\ttracesConfig.RegionOverride = answer\n\n}\n",
                    "rendered": {
                      "text": "}\n\nfunc chooseRegion(tracesConfig *config.Traces) {\n\tanswer := util.Ask(\"Enter the AWS Region to send segments to AWS X-Ray service (Optional)\")\n\ttracesConfig.RegionOverride = answer\n\n}\n",
                      "markdown": "`}\n\nfunc chooseRegion(tracesConfig *config.Traces) {\n\tanswer := util.Ask(\"Enter the AWS Region to send segments to AWS X-Ray service (Optional)\")\n\ttracesConfig.RegionOverride = answer\n\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/testData/input3.json"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 11,
                  "endLine": 100,
                  "endColumn": 20,
                  "snippet": {
                    "text": "          \"AccessKey\": \"\",\n          \"NameSpace\": \"Windows\",\n          \"Region\": \"eu-west-1\",\n          \"SecretKey\": \"\"\n        }\n      }\n    ],\n",
                    "rendered": {
                      "text": "          \"AccessKey\": \"\",\n          \"NameSpace\": \"Windows\",\n          \"Region\": \"eu-west-1\",\n          \"SecretKey\": \"\"\n        }\n      }\n    ],\n",
                      "markdown": "`          \"AccessKey\": \"\",\n          \"NameSpace\": \"Windows\",\n          \"Region\": \"eu-west-1\",\n          \"SecretKey\": \"\"\n        }\n      }\n    ],\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/testData/input3.json"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 11,
                  "endLine": 90,
                  "endColumn": 20,
                  "snippet": {
                    "text": "          \"LogGroup\": \"Default-Log-Group\",\n          \"LogStream\": \"{instance_id}\",\n          \"Region\": \"eu-west-1\",\n          \"SecretKey\": \"\"\n        }\n      },\n      {\n",
                    "rendered": {
                      "text": "          \"LogGroup\": \"Default-Log-Group\",\n          \"LogStream\": \"{instance_id}\",\n          \"Region\": \"eu-west-1\",\n          \"SecretKey\": \"\"\n        }\n      },\n      {\n",
                      "markdown": "`          \"LogGroup\": \"Default-Log-Group\",\n          \"LogStream\": \"{instance_id}\",\n          \"Region\": \"eu-west-1\",\n          \"SecretKey\": \"\"\n        }\n      },\n      {\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/testData/input4.json"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 11,
                  "endLine": 86,
                  "endColumn": 20,
                  "snippet": {
                    "text": "          \"AccessKey\": \"\",\n          \"NameSpace\": \"Windows/Default\",\n          \"Region\": \"ap-northeast-1\",\n          \"SecretKey\": \"\"\n        }\n      }\n    ],\n",
                    "rendered": {
                      "text": "          \"AccessKey\": \"\",\n          \"NameSpace\": \"Windows/Default\",\n          \"Region\": \"ap-northeast-1\",\n          \"SecretKey\": \"\"\n        }\n      }\n    ],\n",
                      "markdown": "`          \"AccessKey\": \"\",\n          \"NameSpace\": \"Windows/Default\",\n          \"Region\": \"ap-northeast-1\",\n          \"SecretKey\": \"\"\n        }\n      }\n    ],\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/testData/input4.json"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 11,
                  "endLine": 76,
                  "endColumn": 20,
                  "snippet": {
                    "text": "          \"LogGroup\": \"SSMLogs\",\n          \"LogStream\": \"{hostname}\",\n          \"Region\": \"ap-northeast-1\",\n          \"SecretKey\": \"\"\n        }\n      },\n      {\n",
                    "rendered": {
                      "text": "          \"LogGroup\": \"SSMLogs\",\n          \"LogStream\": \"{hostname}\",\n          \"Region\": \"ap-northeast-1\",\n          \"SecretKey\": \"\"\n        }\n      },\n      {\n",
                      "markdown": "`          \"LogGroup\": \"SSMLogs\",\n          \"LogStream\": \"{hostname}\",\n          \"Region\": \"ap-northeast-1\",\n          \"SecretKey\": \"\"\n        }\n      },\n      {\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/testData/input4.json"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 25,
                  "endLine": 74,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        \"Parameters\": {\n          \"AccessKey\": \"\",\n          \"LogGroup\": \"SSMLogs\",\n          \"LogStream\": \"{hostname}\",\n          \"Region\": \"ap-northeast-1\",\n          \"SecretKey\": \"\"\n        }\n",
                    "rendered": {
                      "text": "        \"Parameters\": {\n          \"AccessKey\": \"\",\n          \"LogGroup\": \"SSMLogs\",\n          \"LogStream\": \"{hostname}\",\n          \"Region\": \"ap-northeast-1\",\n          \"SecretKey\": \"\"\n        }\n",
                      "markdown": "`        \"Parameters\": {\n          \"AccessKey\": \"\",\n          \"LogGroup\": \"SSMLogs\",\n          \"LogStream\": \"{hostname}\",\n          \"Region\": \"ap-northeast-1\",\n          \"SecretKey\": \"\"\n        }\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/testData/input4.json"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 30,
                  "endLine": 62,
                  "endColumn": 38,
                  "snippet": {
                    "text": "          \"CategoryName\": \"LogicalDisk\",\n          \"CounterName\": \"% Free Space\",\n          \"DimensionName\": \"Hostname\",\n          \"DimensionValue\": \"{hostname}\",\n          \"InstanceName\": \"C:\",\n          \"MetricName\": \"LogicalDiskFreeSpaceC\",\n          \"Unit\": \"Percent\"\n",
                    "rendered": {
                      "text": "          \"CategoryName\": \"LogicalDisk\",\n          \"CounterName\": \"% Free Space\",\n          \"DimensionName\": \"Hostname\",\n          \"DimensionValue\": \"{hostname}\",\n          \"InstanceName\": \"C:\",\n          \"MetricName\": \"LogicalDiskFreeSpaceC\",\n          \"Unit\": \"Percent\"\n",
                      "markdown": "`          \"CategoryName\": \"LogicalDisk\",\n          \"CounterName\": \"% Free Space\",\n          \"DimensionName\": \"Hostname\",\n          \"DimensionValue\": \"{hostname}\",\n          \"InstanceName\": \"C:\",\n          \"MetricName\": \"LogicalDiskFreeSpaceC\",\n          \"Unit\": \"Percent\"\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/testData/input4.json"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 30,
                  "endLine": 49,
                  "endColumn": 38,
                  "snippet": {
                    "text": "          \"CategoryName\": \"Memory\",\n          \"CounterName\": \"Available Bytes\",\n          \"DimensionName\": \"Hostname\",\n          \"DimensionValue\": \"{hostname}\",\n          \"InstanceName\": \"\",\n          \"MetricName\": \"MemoryAvailableBytes\",\n          \"Unit\": \"Bytes\"\n",
                    "rendered": {
                      "text": "          \"CategoryName\": \"Memory\",\n          \"CounterName\": \"Available Bytes\",\n          \"DimensionName\": \"Hostname\",\n          \"DimensionValue\": \"{hostname}\",\n          \"InstanceName\": \"\",\n          \"MetricName\": \"MemoryAvailableBytes\",\n          \"Unit\": \"Bytes\"\n",
                      "markdown": "`          \"CategoryName\": \"Memory\",\n          \"CounterName\": \"Available Bytes\",\n          \"DimensionName\": \"Hostname\",\n          \"DimensionValue\": \"{hostname}\",\n          \"InstanceName\": \"\",\n          \"MetricName\": \"MemoryAvailableBytes\",\n          \"Unit\": \"Bytes\"\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/testData/input1.json"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 11,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        \"Parameters\":\n        {\n          \"AccessKey\": \"some access key\",\n          \"SecretKey\": \"some secret key\",\n          \"Region\": \"us-east-1\",\n          \"NameSpace\": \"Windows/Default\"\n        }\n",
                    "rendered": {
                      "text": "        \"Parameters\":\n        {\n          \"AccessKey\": \"some access key\",\n          \"SecretKey\": \"some secret key\",\n          \"Region\": \"us-east-1\",\n          \"NameSpace\": \"Windows/Default\"\n        }\n",
                      "markdown": "`        \"Parameters\":\n        {\n          \"AccessKey\": \"some access key\",\n          \"SecretKey\": \"some secret key\",\n          \"Region\": \"us-east-1\",\n          \"NameSpace\": \"Windows/Default\"\n        }\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/testData/input1.json"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 11,
                  "endLine": 131,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",\n        \"Parameters\": {\n          \"AccessKey\": \"\",\n          \"SecretKey\": \"\",\n          \"Region\": \"us-east-1\",\n          \"LogGroup\": \"IIS-Log-Group\",\n          \"LogStream\": \"{instance_id}\"\n",
                    "rendered": {
                      "text": "        \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",\n        \"Parameters\": {\n          \"AccessKey\": \"\",\n          \"SecretKey\": \"\",\n          \"Region\": \"us-east-1\",\n          \"LogGroup\": \"IIS-Log-Group\",\n          \"LogStream\": \"{instance_id}\"\n",
                      "markdown": "`        \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",\n        \"Parameters\": {\n          \"AccessKey\": \"\",\n          \"SecretKey\": \"\",\n          \"Region\": \"us-east-1\",\n          \"LogGroup\": \"IIS-Log-Group\",\n          \"LogStream\": \"{instance_id}\"\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/testData/input1.json"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 11,
                  "endLine": 120,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",\n        \"Parameters\": {\n          \"AccessKey\": \"\",\n          \"SecretKey\": \"\",\n          \"Region\": \"us-east-1\",\n          \"LogGroup\": \"Default-Log-Group\",\n          \"LogStream\": \"{instance_id}\"\n",
                    "rendered": {
                      "text": "        \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",\n        \"Parameters\": {\n          \"AccessKey\": \"\",\n          \"SecretKey\": \"\",\n          \"Region\": \"us-east-1\",\n          \"LogGroup\": \"Default-Log-Group\",\n          \"LogStream\": \"{instance_id}\"\n",
                      "markdown": "`        \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",\n        \"Parameters\": {\n          \"AccessKey\": \"\",\n          \"SecretKey\": \"\",\n          \"Region\": \"us-east-1\",\n          \"LogGroup\": \"Default-Log-Group\",\n          \"LogStream\": \"{instance_id}\"\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/testData/output1.json"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 7,
                  "endLine": 6,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    \"region\": \"us-east-1\",\n    \"credentials\": {\n      \"access_key\": \"some access key\",\n      \"secret_key\": \"some secret key\"\n    }\n  },\n  \"metrics\": {\n",
                    "rendered": {
                      "text": "    \"region\": \"us-east-1\",\n    \"credentials\": {\n      \"access_key\": \"some access key\",\n      \"secret_key\": \"some secret key\"\n    }\n  },\n  \"metrics\": {\n",
                      "markdown": "`    \"region\": \"us-east-1\",\n    \"credentials\": {\n      \"access_key\": \"some access key\",\n      \"secret_key\": \"some secret key\"\n    }\n  },\n  \"metrics\": {\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/testData/output4.json"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 33,
                  "endLine": 81,
                  "endColumn": 41,
                  "snippet": {
                    "text": "              \"INFORMATION\"\n            ],\n            \"log_group_name\": \"SSMLogs\",\n            \"log_stream_name\": \"{hostname}\",\n            \"event_format\": \"text\"\n          }\n        ]\n",
                    "rendered": {
                      "text": "              \"INFORMATION\"\n            ],\n            \"log_group_name\": \"SSMLogs\",\n            \"log_stream_name\": \"{hostname}\",\n            \"event_format\": \"text\"\n          }\n        ]\n",
                      "markdown": "`              \"INFORMATION\"\n            ],\n            \"log_group_name\": \"SSMLogs\",\n            \"log_stream_name\": \"{hostname}\",\n            \"event_format\": \"text\"\n          }\n        ]\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/testData/output4.json"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 33,
                  "endLine": 70,
                  "endColumn": 41,
                  "snippet": {
                    "text": "              \"INFORMATION\"\n            ],\n            \"log_group_name\": \"SSMLogs\",\n            \"log_stream_name\": \"{hostname}\",\n            \"event_format\": \"text\"\n          },\n          {\n",
                    "rendered": {
                      "text": "              \"INFORMATION\"\n            ],\n            \"log_group_name\": \"SSMLogs\",\n            \"log_stream_name\": \"{hostname}\",\n            \"event_format\": \"text\"\n          },\n          {\n",
                      "markdown": "`              \"INFORMATION\"\n            ],\n            \"log_group_name\": \"SSMLogs\",\n            \"log_stream_name\": \"{hostname}\",\n            \"event_format\": \"text\"\n          },\n          {\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/testData/output4.json"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 33,
                  "endLine": 59,
                  "endColumn": 41,
                  "snippet": {
                    "text": "              \"INFORMATION\"\n            ],\n            \"log_group_name\": \"SSMLogs\",\n            \"log_stream_name\": \"{hostname}\",\n            \"event_format\": \"text\"\n          },\n          {\n",
                    "rendered": {
                      "text": "              \"INFORMATION\"\n            ],\n            \"log_group_name\": \"SSMLogs\",\n            \"log_stream_name\": \"{hostname}\",\n            \"event_format\": \"text\"\n          },\n          {\n",
                      "markdown": "`              \"INFORMATION\"\n            ],\n            \"log_group_name\": \"SSMLogs\",\n            \"log_stream_name\": \"{hostname}\",\n            \"event_format\": \"text\"\n          },\n          {\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/testData/output4.json"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 33,
                  "endLine": 44,
                  "endColumn": 41,
                  "snippet": {
                    "text": "          {\n            \"file_path\": \"C:\\\\inetpub\\\\logs\\\\LogFiles\\\\W3SVC1\\\\*\",\n            \"log_group_name\": \"SSMLogs\",\n            \"log_stream_name\": \"{hostname}\",\n            \"timezone\": \"Local\"\n          }\n        ]\n",
                    "rendered": {
                      "text": "          {\n            \"file_path\": \"C:\\\\inetpub\\\\logs\\\\LogFiles\\\\W3SVC1\\\\*\",\n            \"log_group_name\": \"SSMLogs\",\n            \"log_stream_name\": \"{hostname}\",\n            \"timezone\": \"Local\"\n          }\n        ]\n",
                      "markdown": "`          {\n            \"file_path\": \"C:\\\\inetpub\\\\logs\\\\LogFiles\\\\W3SVC1\\\\*\",\n            \"log_group_name\": \"SSMLogs\",\n            \"log_stream_name\": \"{hostname}\",\n            \"timezone\": \"Local\"\n          }\n        ]\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/invalidTestData/input1.json"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 11,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        \"Parameters\":\n        {\n          \"AccessKey\": \"some access key\",\n          \"SecretKey\": \"some secret key\",\n          \"Region\": \"us-east-1\",\n          \"NameSpace\": \"Windows/Default\"\n        }\n",
                    "rendered": {
                      "text": "        \"Parameters\":\n        {\n          \"AccessKey\": \"some access key\",\n          \"SecretKey\": \"some secret key\",\n          \"Region\": \"us-east-1\",\n          \"NameSpace\": \"Windows/Default\"\n        }\n",
                      "markdown": "`        \"Parameters\":\n        {\n          \"AccessKey\": \"some access key\",\n          \"SecretKey\": \"some secret key\",\n          \"Region\": \"us-east-1\",\n          \"NameSpace\": \"Windows/Default\"\n        }\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/invalidTestData/input1.json"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 11,
                  "endLine": 131,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",\n        \"Parameters\": {\n          \"AccessKey\": \"\",\n          \"SecretKey\": \"\",\n          \"Region\": \"us-east-2\",\n          \"LogGroup\": \"IIS-Log-Group\",\n          \"LogStream\": \"{instance_id}\"\n",
                    "rendered": {
                      "text": "        \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",\n        \"Parameters\": {\n          \"AccessKey\": \"\",\n          \"SecretKey\": \"\",\n          \"Region\": \"us-east-2\",\n          \"LogGroup\": \"IIS-Log-Group\",\n          \"LogStream\": \"{instance_id}\"\n",
                      "markdown": "`        \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",\n        \"Parameters\": {\n          \"AccessKey\": \"\",\n          \"SecretKey\": \"\",\n          \"Region\": \"us-east-2\",\n          \"LogGroup\": \"IIS-Log-Group\",\n          \"LogStream\": \"{instance_id}\"\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/invalidTestData/input1.json"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 11,
                  "endLine": 120,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",\n        \"Parameters\": {\n          \"AccessKey\": \"\",\n          \"SecretKey\": \"\",\n          \"Region\": \"us-east-1\",\n          \"LogGroup\": \"Default-Log-Group\",\n          \"LogStream\": \"{instance_id}\"\n",
                    "rendered": {
                      "text": "        \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",\n        \"Parameters\": {\n          \"AccessKey\": \"\",\n          \"SecretKey\": \"\",\n          \"Region\": \"us-east-1\",\n          \"LogGroup\": \"Default-Log-Group\",\n          \"LogStream\": \"{instance_id}\"\n",
                      "markdown": "`        \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",\n        \"Parameters\": {\n          \"AccessKey\": \"\",\n          \"SecretKey\": \"\",\n          \"Region\": \"us-east-1\",\n          \"LogGroup\": \"Default-Log-Group\",\n          \"LogStream\": \"{instance_id}\"\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/invalidTestData/input2.json"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 11,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        \"Parameters\":\n        {\n          \"AccessKey\": \"some access key\",\n          \"SecretKey\": \"some secret key\",\n          \"Region\": \"us-east-1\",\n          \"NameSpace\": \"Windows/Default\"\n        }\n",
                    "rendered": {
                      "text": "        \"Parameters\":\n        {\n          \"AccessKey\": \"some access key\",\n          \"SecretKey\": \"some secret key\",\n          \"Region\": \"us-east-1\",\n          \"NameSpace\": \"Windows/Default\"\n        }\n",
                      "markdown": "`        \"Parameters\":\n        {\n          \"AccessKey\": \"some access key\",\n          \"SecretKey\": \"some secret key\",\n          \"Region\": \"us-east-1\",\n          \"NameSpace\": \"Windows/Default\"\n        }\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/invalidTestData/input2.json"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 11,
                  "endLine": 131,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",\n        \"Parameters\": {\n          \"AccessKey\": \"some access key\",\n          \"SecretKey\": \"some different secret key\",\n          \"Region\": \"us-east-1\",\n          \"LogGroup\": \"IIS-Log-Group\",\n          \"LogStream\": \"{instance_id}\"\n",
                    "rendered": {
                      "text": "        \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",\n        \"Parameters\": {\n          \"AccessKey\": \"some access key\",\n          \"SecretKey\": \"some different secret key\",\n          \"Region\": \"us-east-1\",\n          \"LogGroup\": \"IIS-Log-Group\",\n          \"LogStream\": \"{instance_id}\"\n",
                      "markdown": "`        \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",\n        \"Parameters\": {\n          \"AccessKey\": \"some access key\",\n          \"SecretKey\": \"some different secret key\",\n          \"Region\": \"us-east-1\",\n          \"LogGroup\": \"IIS-Log-Group\",\n          \"LogStream\": \"{instance_id}\"\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/invalidTestData/input2.json"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 11,
                  "endLine": 120,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",\n        \"Parameters\": {\n          \"AccessKey\": \"\",\n          \"SecretKey\": \"\",\n          \"Region\": \"us-east-1\",\n          \"LogGroup\": \"Default-Log-Group\",\n          \"LogStream\": \"{instance_id}\"\n",
                    "rendered": {
                      "text": "        \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",\n        \"Parameters\": {\n          \"AccessKey\": \"\",\n          \"SecretKey\": \"\",\n          \"Region\": \"us-east-1\",\n          \"LogGroup\": \"Default-Log-Group\",\n          \"LogStream\": \"{instance_id}\"\n",
                      "markdown": "`        \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",\n        \"Parameters\": {\n          \"AccessKey\": \"\",\n          \"SecretKey\": \"\",\n          \"Region\": \"us-east-1\",\n          \"LogGroup\": \"Default-Log-Group\",\n          \"LogStream\": \"{instance_id}\"\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/windows_migration_models.go"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 28,
                  "endLine": 35,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\t\t\t\tDimensionValue string `json:\"DimensionValue\"`\n\t\t\t\t// output logs\n\t\t\t\tAccessKey string `json:\"AccessKey\"`\n\t\t\t\tSecretKey string `json:\"SecretKey\"`\n\t\t\t\tRegion    string `json:\"Region\"`\n\t\t\t\tLogGroup  string `json:\"LogGroup\"`\n\t\t\t\tLogStream string `json:\"LogStream\"`\n",
                    "rendered": {
                      "text": "\t\t\t\tDimensionValue string `json:\"DimensionValue\"`\n\t\t\t\t// output logs\n\t\t\t\tAccessKey string `json:\"AccessKey\"`\n\t\t\t\tSecretKey string `json:\"SecretKey\"`\n\t\t\t\tRegion    string `json:\"Region\"`\n\t\t\t\tLogGroup  string `json:\"LogGroup\"`\n\t\t\t\tLogStream string `json:\"LogStream\"`\n",
                      "markdown": "`\t\t\t\tDimensionValue string `json:\"DimensionValue\"`\n\t\t\t\t// output logs\n\t\t\t\tAccessKey string `json:\"AccessKey\"`\n\t\t\t\tSecretKey string `json:\"SecretKey\"`\n\t\t\t\tRegion    string `json:\"Region\"`\n\t\t\t\tLogGroup  string `json:\"LogGroup\"`\n\t\t\t\tLogStream string `json:\"LogStream\"`\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/windows_migration_models.go"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 4,
                  "endLine": 35,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\t\t\t\tDimensionValue string `json:\"DimensionValue\"`\n\t\t\t\t// output logs\n\t\t\t\tAccessKey string `json:\"AccessKey\"`\n\t\t\t\tSecretKey string `json:\"SecretKey\"`\n\t\t\t\tRegion    string `json:\"Region\"`\n\t\t\t\tLogGroup  string `json:\"LogGroup\"`\n\t\t\t\tLogStream string `json:\"LogStream\"`\n",
                    "rendered": {
                      "text": "\t\t\t\tDimensionValue string `json:\"DimensionValue\"`\n\t\t\t\t// output logs\n\t\t\t\tAccessKey string `json:\"AccessKey\"`\n\t\t\t\tSecretKey string `json:\"SecretKey\"`\n\t\t\t\tRegion    string `json:\"Region\"`\n\t\t\t\tLogGroup  string `json:\"LogGroup\"`\n\t\t\t\tLogStream string `json:\"LogStream\"`\n",
                      "markdown": "`\t\t\t\tDimensionValue string `json:\"DimensionValue\"`\n\t\t\t\t// output logs\n\t\t\t\tAccessKey string `json:\"AccessKey\"`\n\t\t\t\tSecretKey string `json:\"SecretKey\"`\n\t\t\t\tRegion    string `json:\"Region\"`\n\t\t\t\tLogGroup  string `json:\"LogGroup\"`\n\t\t\t\tLogStream string `json:\"LogStream\"`\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/windows_migration_core.go"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 66,
                  "endLine": 78,
                  "endColumn": 76,
                  "snippet": {
                    "text": "\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tjsonObjAgent.SetP(component.Parameters.SecretKey, \"credentials.secret_key\")\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tjsonObjAgent.SetP(component.Parameters.SecretKey, \"credentials.secret_key\")\n\t\t}\n\t}\n\n",
                      "markdown": "`\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tjsonObjAgent.SetP(component.Parameters.SecretKey, \"credentials.secret_key\")\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/windows_migration_core.go"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 42,
                  "endLine": 78,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tjsonObjAgent.SetP(component.Parameters.SecretKey, \"credentials.secret_key\")\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tjsonObjAgent.SetP(component.Parameters.SecretKey, \"credentials.secret_key\")\n\t\t}\n\t}\n\n",
                      "markdown": "`\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tjsonObjAgent.SetP(component.Parameters.SecretKey, \"credentials.secret_key\")\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/windows_migration_core.go"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 77,
                  "endLine": 72,
                  "endColumn": 86,
                  "snippet": {
                    "text": "\t\tif component.Parameters.SecretKey != \"\" {\n\t\t\tif creds, ok := newConfig.Agent[\"credentials\"]; ok {\n\t\t\t\tif credsMap, valid := creds.(map[string]interface{}); valid {\n\t\t\t\t\tif val, ok := credsMap[\"secret_key\"]; ok && val != component.Parameters.SecretKey {\n\t\t\t\t\t\tfmt.Fprint(os.Stderr, \"Detected multiple different secret keys in the input config file. This feature is unsupported by the new agent. Thus, will not be able to migrate the old config. Terminating.\")\n\t\t\t\t\t\tos.Exit(1)\n\t\t\t\t\t}\n",
                    "rendered": {
                      "text": "\t\tif component.Parameters.SecretKey != \"\" {\n\t\t\tif creds, ok := newConfig.Agent[\"credentials\"]; ok {\n\t\t\t\tif credsMap, valid := creds.(map[string]interface{}); valid {\n\t\t\t\t\tif val, ok := credsMap[\"secret_key\"]; ok && val != component.Parameters.SecretKey {\n\t\t\t\t\t\tfmt.Fprint(os.Stderr, \"Detected multiple different secret keys in the input config file. This feature is unsupported by the new agent. Thus, will not be able to migrate the old config. Terminating.\")\n\t\t\t\t\t\tos.Exit(1)\n\t\t\t\t\t}\n",
                      "markdown": "`\t\tif component.Parameters.SecretKey != \"\" {\n\t\t\tif creds, ok := newConfig.Agent[\"credentials\"]; ok {\n\t\t\t\tif credsMap, valid := creds.(map[string]interface{}); valid {\n\t\t\t\t\tif val, ok := credsMap[\"secret_key\"]; ok && val != component.Parameters.SecretKey {\n\t\t\t\t\t\tfmt.Fprint(os.Stderr, \"Detected multiple different secret keys in the input config file. This feature is unsupported by the new agent. Thus, will not be able to migrate the old config. Terminating.\")\n\t\t\t\t\t\tos.Exit(1)\n\t\t\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/windows_migration_core.go"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 29,
                  "endLine": 72,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\t\tif component.Parameters.SecretKey != \"\" {\n\t\t\tif creds, ok := newConfig.Agent[\"credentials\"]; ok {\n\t\t\t\tif credsMap, valid := creds.(map[string]interface{}); valid {\n\t\t\t\t\tif val, ok := credsMap[\"secret_key\"]; ok && val != component.Parameters.SecretKey {\n\t\t\t\t\t\tfmt.Fprint(os.Stderr, \"Detected multiple different secret keys in the input config file. This feature is unsupported by the new agent. Thus, will not be able to migrate the old config. Terminating.\")\n\t\t\t\t\t\tos.Exit(1)\n\t\t\t\t\t}\n",
                    "rendered": {
                      "text": "\t\tif component.Parameters.SecretKey != \"\" {\n\t\t\tif creds, ok := newConfig.Agent[\"credentials\"]; ok {\n\t\t\t\tif credsMap, valid := creds.(map[string]interface{}); valid {\n\t\t\t\t\tif val, ok := credsMap[\"secret_key\"]; ok && val != component.Parameters.SecretKey {\n\t\t\t\t\t\tfmt.Fprint(os.Stderr, \"Detected multiple different secret keys in the input config file. This feature is unsupported by the new agent. Thus, will not be able to migrate the old config. Terminating.\")\n\t\t\t\t\t\tos.Exit(1)\n\t\t\t\t\t}\n",
                      "markdown": "`\t\tif component.Parameters.SecretKey != \"\" {\n\t\t\tif creds, ok := newConfig.Agent[\"credentials\"]; ok {\n\t\t\t\tif credsMap, valid := creds.(map[string]interface{}); valid {\n\t\t\t\t\tif val, ok := credsMap[\"secret_key\"]; ok && val != component.Parameters.SecretKey {\n\t\t\t\t\t\tfmt.Fprint(os.Stderr, \"Detected multiple different secret keys in the input config file. This feature is unsupported by the new agent. Thus, will not be able to migrate the old config. Terminating.\")\n\t\t\t\t\t\tos.Exit(1)\n\t\t\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/windows_migration_core.go"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 26,
                  "endLine": 69,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\t\t\t}\n\t\t\tjsonObjAgent.SetP(component.Parameters.AccessKey, \"credentials.access_key\")\n\t\t}\n\t\tif component.Parameters.SecretKey != \"\" {\n\t\t\tif creds, ok := newConfig.Agent[\"credentials\"]; ok {\n\t\t\t\tif credsMap, valid := creds.(map[string]interface{}); valid {\n\t\t\t\t\tif val, ok := credsMap[\"secret_key\"]; ok && val != component.Parameters.SecretKey {\n",
                    "rendered": {
                      "text": "\t\t\t}\n\t\t\tjsonObjAgent.SetP(component.Parameters.AccessKey, \"credentials.access_key\")\n\t\t}\n\t\tif component.Parameters.SecretKey != \"\" {\n\t\t\tif creds, ok := newConfig.Agent[\"credentials\"]; ok {\n\t\t\t\tif credsMap, valid := creds.(map[string]interface{}); valid {\n\t\t\t\t\tif val, ok := credsMap[\"secret_key\"]; ok && val != component.Parameters.SecretKey {\n",
                      "markdown": "`\t\t\t}\n\t\t\tjsonObjAgent.SetP(component.Parameters.AccessKey, \"credentials.access_key\")\n\t\t}\n\t\tif component.Parameters.SecretKey != \"\" {\n\t\t\tif creds, ok := newConfig.Agent[\"credentials\"]; ok {\n\t\t\t\tif credsMap, valid := creds.(map[string]interface{}); valid {\n\t\t\t\t\tif val, ok := credsMap[\"secret_key\"]; ok && val != component.Parameters.SecretKey {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/windows_migration_test.go"
                },
                "region": {
                  "startLine": 33,
                  "endLine": 33,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\t\tmigrateOldAgentConfig()\n\t\treturn\n\t}\n\tcmd := exec.Command(os.Args[0], \"-test.run=TestMigrateOldAgentConfigPanic\")\n\tcmd.Env = append(os.Environ(), \"BE_CRASHER=1\")\n\terr := cmd.Run()\n\tif e, ok := err.(*exec.ExitError); ok && !e.Success() {\n",
                    "rendered": {
                      "text": "\t\tmigrateOldAgentConfig()\n\t\treturn\n\t}\n\tcmd := exec.Command(os.Args[0], \"-test.run=TestMigrateOldAgentConfigPanic\")\n\tcmd.Env = append(os.Environ(), \"BE_CRASHER=1\")\n\terr := cmd.Run()\n\tif e, ok := err.(*exec.ExitError); ok && !e.Success() {\n",
                      "markdown": "`\t\tmigrateOldAgentConfig()\n\t\treturn\n\t}\n\tcmd := exec.Command(os.Args[0], \"-test.run=TestMigrateOldAgentConfigPanic\")\n\tcmd.Env = append(os.Environ(), \"BE_CRASHER=1\")\n\terr := cmd.Run()\n\tif e, ok := err.(*exec.ExitError); ok && !e.Success() {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/windows_migration_core_test.go"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 2,
                  "endLine": 85,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\t\t\t\tMapOldWindowsConfigToNewConfig(oldConfig)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tcmd := exec.Command(os.Args[0], \"-test.run=TestInvalidOldWindowsConfig\")\n\t\t\tcmd.Env = append(os.Environ(), \"BE_CRASHER=1\")\n\t\t\terr = cmd.Run()\n\t\t\tif e, ok := err.(*exec.ExitError); ok && !e.Success() {\n",
                    "rendered": {
                      "text": "\t\t\t\tMapOldWindowsConfigToNewConfig(oldConfig)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tcmd := exec.Command(os.Args[0], \"-test.run=TestInvalidOldWindowsConfig\")\n\t\t\tcmd.Env = append(os.Environ(), \"BE_CRASHER=1\")\n\t\t\terr = cmd.Run()\n\t\t\tif e, ok := err.(*exec.ExitError); ok && !e.Success() {\n",
                      "markdown": "`\t\t\t\tMapOldWindowsConfigToNewConfig(oldConfig)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tcmd := exec.Command(os.Args[0], \"-test.run=TestInvalidOldWindowsConfig\")\n\t\t\tcmd.Env = append(os.Environ(), \"BE_CRASHER=1\")\n\t\t\terr = cmd.Run()\n\t\t\tif e, ok := err.(*exec.ExitError); ok && !e.Success() {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/windows/windows_migration_core_test.go"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 24,
                  "endLine": 79,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// Run the function - expect it to exit(1) as the input is invalid\n\t\t\t// Ref: https://stackoverflow.com/questions/26225513/how-to-test-os-exit-scenarios-in-go\n\t\t\tif os.Getenv(\"BE_CRASHER\") == \"1\" {\n\t\t\t\tMapOldWindowsConfigToNewConfig(oldConfig)\n",
                    "rendered": {
                      "text": "\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// Run the function - expect it to exit(1) as the input is invalid\n\t\t\t// Ref: https://stackoverflow.com/questions/26225513/how-to-test-os-exit-scenarios-in-go\n\t\t\tif os.Getenv(\"BE_CRASHER\") == \"1\" {\n\t\t\t\tMapOldWindowsConfigToNewConfig(oldConfig)\n",
                      "markdown": "`\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// Run the function - expect it to exit(1) as the input is invalid\n\t\t\t// Ref: https://stackoverflow.com/questions/26225513/how-to-test-os-exit-scenarios-in-go\n\t\t\tif os.Getenv(\"BE_CRASHER\") == \"1\" {\n\t\t\t\tMapOldWindowsConfigToNewConfig(oldConfig)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/linux/linuxMigration_test.go"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 36,
                  "endLine": 123,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t\t\t\t\t\"log_group_name\":           \"/var/log/messages\",\n\t\t\t\t\t\t\"timestamp_format\":         \"%b %d %H:%M:%S\",\n\t\t\t\t\t\t\"multi_line_start_pattern\": \"{timestamp_format}\",\n\t\t\t\t\t\t\"log_stream_name\":          \"{hostname}\",\n\t\t\t\t\t\t\"retention_in_days\":        -1,\n\t\t\t\t\t},\n\t\t\t\t\t{\n",
                    "rendered": {
                      "text": "\t\t\t\t\t\t\"log_group_name\":           \"/var/log/messages\",\n\t\t\t\t\t\t\"timestamp_format\":         \"%b %d %H:%M:%S\",\n\t\t\t\t\t\t\"multi_line_start_pattern\": \"{timestamp_format}\",\n\t\t\t\t\t\t\"log_stream_name\":          \"{hostname}\",\n\t\t\t\t\t\t\"retention_in_days\":        -1,\n\t\t\t\t\t},\n\t\t\t\t\t{\n",
                      "markdown": "`\t\t\t\t\t\t\"log_group_name\":           \"/var/log/messages\",\n\t\t\t\t\t\t\"timestamp_format\":         \"%b %d %H:%M:%S\",\n\t\t\t\t\t\t\"multi_line_start_pattern\": \"{timestamp_format}\",\n\t\t\t\t\t\t\"log_stream_name\":          \"{hostname}\",\n\t\t\t\t\t\t\"retention_in_days\":        -1,\n\t\t\t\t\t},\n\t\t\t\t\t{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/linux/linuxMigration_test.go"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 21,
                  "endLine": 108,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t\tdatetime_format = %b %d %H:%M:%S\n\t\tfile = /var/log/messages\n\t\tbuffer_duration = 5000\n\t\tlog_stream_name = {hostname}\n\t\tinitial_position = start_of_file\n\t\tlog_group_name = /var/log/messages\n\t\tmulti_line_start_pattern = {datetime_format}\n",
                    "rendered": {
                      "text": "\t\tdatetime_format = %b %d %H:%M:%S\n\t\tfile = /var/log/messages\n\t\tbuffer_duration = 5000\n\t\tlog_stream_name = {hostname}\n\t\tinitial_position = start_of_file\n\t\tlog_group_name = /var/log/messages\n\t\tmulti_line_start_pattern = {datetime_format}\n",
                      "markdown": "`\t\tdatetime_format = %b %d %H:%M:%S\n\t\tfile = /var/log/messages\n\t\tbuffer_duration = 5000\n\t\tlog_stream_name = {hostname}\n\t\tinitial_position = start_of_file\n\t\tlog_group_name = /var/log/messages\n\t\tmulti_line_start_pattern = {datetime_format}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/linux/linuxMigration_test.go"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 30,
                  "endLine": 54,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t\t\t\t\t\t\t\"timestamp_format\":  \"%b %d %H:%M:%S\",\n\t\t\t\t\t\t\t\"file_path\":         \"/var/log/messages\",\n\t\t\t\t\t\t\t\"log_group_name\":    \"/var/log/messages\",\n\t\t\t\t\t\t\t\"log_stream_name\":   \"{hostname}\",\n\t\t\t\t\t\t\t\"log_group_class\":   util.StandardLogGroupClass,\n\t\t\t\t\t\t\t\"retention_in_days\": -1,\n\t\t\t\t\t\t},\n",
                    "rendered": {
                      "text": "\t\t\t\t\t\t\t\"timestamp_format\":  \"%b %d %H:%M:%S\",\n\t\t\t\t\t\t\t\"file_path\":         \"/var/log/messages\",\n\t\t\t\t\t\t\t\"log_group_name\":    \"/var/log/messages\",\n\t\t\t\t\t\t\t\"log_stream_name\":   \"{hostname}\",\n\t\t\t\t\t\t\t\"log_group_class\":   util.StandardLogGroupClass,\n\t\t\t\t\t\t\t\"retention_in_days\": -1,\n\t\t\t\t\t\t},\n",
                      "markdown": "`\t\t\t\t\t\t\t\"timestamp_format\":  \"%b %d %H:%M:%S\",\n\t\t\t\t\t\t\t\"file_path\":         \"/var/log/messages\",\n\t\t\t\t\t\t\t\"log_group_name\":    \"/var/log/messages\",\n\t\t\t\t\t\t\t\"log_stream_name\":   \"{hostname}\",\n\t\t\t\t\t\t\t\"log_group_class\":   util.StandardLogGroupClass,\n\t\t\t\t\t\t\t\"retention_in_days\": -1,\n\t\t\t\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/linux/linuxMigration_test.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 21,
                  "endLine": 33,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t\tdatetime_format = %b %d %H:%M:%S\n\t\tfile = /var/log/messages\n\t\tbuffer_duration = 5000\n\t\tlog_stream_name = {hostname}\n\t\tinitial_position = start_of_file\n\t\tlog_group_name = /var/log/messages\n\t\tlog_group_class = STANDARD\n",
                    "rendered": {
                      "text": "\t\tdatetime_format = %b %d %H:%M:%S\n\t\tfile = /var/log/messages\n\t\tbuffer_duration = 5000\n\t\tlog_stream_name = {hostname}\n\t\tinitial_position = start_of_file\n\t\tlog_group_name = /var/log/messages\n\t\tlog_group_class = STANDARD\n",
                      "markdown": "`\t\tdatetime_format = %b %d %H:%M:%S\n\t\tfile = /var/log/messages\n\t\tbuffer_duration = 5000\n\t\tlog_stream_name = {hostname}\n\t\tinitial_position = start_of_file\n\t\tlog_group_name = /var/log/messages\n\t\tlog_group_class = STANDARD\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/linux/knownConfigKeys.go"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 24,
                  "endLine": 86,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t\t\t}\n\t\t}\n\t}\n\tretentionInDays, _ := p.Get(section, \"retention_in_days\")\n\tretention := -1\n\tif retentionInDays != \"\" {\n\t\tif i, err := strconv.Atoi(retentionInDays); err == nil {\n",
                    "rendered": {
                      "text": "\t\t\t}\n\t\t}\n\t}\n\tretentionInDays, _ := p.Get(section, \"retention_in_days\")\n\tretention := -1\n\tif retentionInDays != \"\" {\n\t\tif i, err := strconv.Atoi(retentionInDays); err == nil {\n",
                      "markdown": "`\t\t\t}\n\t\t}\n\t}\n\tretentionInDays, _ := p.Get(section, \"retention_in_days\")\n\tretention := -1\n\tif retentionInDays != \"\" {\n\t\tif i, err := strconv.Atoi(retentionInDays); err == nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/linux/knownConfigKeys.go"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 23,
                  "endLine": 74,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\t\t\tencoding = normalized\n\t\t}\n\t}\n\tbufferDuration, _ := p.Get(section, \"buffer_duration\")\n\tif bufferDuration != \"\" {\n\t\tif forceFlushInterval, err := strconv.Atoi(bufferDuration); err == nil {\n\t\t\tforceFlushInterval /= 1000 // from ms to sec\n",
                    "rendered": {
                      "text": "\t\t\tencoding = normalized\n\t\t}\n\t}\n\tbufferDuration, _ := p.Get(section, \"buffer_duration\")\n\tif bufferDuration != \"\" {\n\t\tif forceFlushInterval, err := strconv.Atoi(bufferDuration); err == nil {\n\t\t\tforceFlushInterval /= 1000 // from ms to sec\n",
                      "markdown": "`\t\t\tencoding = normalized\n\t\t}\n\t}\n\tbufferDuration, _ := p.Get(section, \"buffer_duration\")\n\tif bufferDuration != \"\" {\n\t\tif forceFlushInterval, err := strconv.Atoi(bufferDuration); err == nil {\n\t\t\tforceFlushInterval /= 1000 // from ms to sec\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/linux/knownConfigKeys.go"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 17,
                  "endLine": 65,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tif multiLineStartPattern == \"{datetime_format}\" {\n\t\tmultiLineStartPattern = \"{timestamp_format}\"\n\t}\n\tencoding, _ := p.Get(section, \"encoding\")\n\tif encoding != \"\" {\n\t\tnormalized := NormalizeEncoding(encoding)\n\t\tif normalized == \"\" {\n",
                    "rendered": {
                      "text": "\tif multiLineStartPattern == \"{datetime_format}\" {\n\t\tmultiLineStartPattern = \"{timestamp_format}\"\n\t}\n\tencoding, _ := p.Get(section, \"encoding\")\n\tif encoding != \"\" {\n\t\tnormalized := NormalizeEncoding(encoding)\n\t\tif normalized == \"\" {\n",
                      "markdown": "`\tif multiLineStartPattern == \"{datetime_format}\" {\n\t\tmultiLineStartPattern = \"{timestamp_format}\"\n\t}\n\tencoding, _ := p.Get(section, \"encoding\")\n\tif encoding != \"\" {\n\t\tnormalized := NormalizeEncoding(encoding)\n\t\tif normalized == \"\" {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/linux/knownConfigKeys.go"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 30,
                  "endLine": 61,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tlogGroupClass, _ := p.Get(section, \"log_group_class\")\n\ttimestampFormat, _ := p.Get(section, \"datetime_format\")\n\ttimezone, _ := p.Get(section, \"time_zone\")\n\tmultiLineStartPattern, _ := p.Get(section, \"multi_line_start_pattern\")\n\tif multiLineStartPattern == \"{datetime_format}\" {\n\t\tmultiLineStartPattern = \"{timestamp_format}\"\n\t}\n",
                    "rendered": {
                      "text": "\tlogGroupClass, _ := p.Get(section, \"log_group_class\")\n\ttimestampFormat, _ := p.Get(section, \"datetime_format\")\n\ttimezone, _ := p.Get(section, \"time_zone\")\n\tmultiLineStartPattern, _ := p.Get(section, \"multi_line_start_pattern\")\n\tif multiLineStartPattern == \"{datetime_format}\" {\n\t\tmultiLineStartPattern = \"{timestamp_format}\"\n\t}\n",
                      "markdown": "`\tlogGroupClass, _ := p.Get(section, \"log_group_class\")\n\ttimestampFormat, _ := p.Get(section, \"datetime_format\")\n\ttimezone, _ := p.Get(section, \"time_zone\")\n\tmultiLineStartPattern, _ := p.Get(section, \"multi_line_start_pattern\")\n\tif multiLineStartPattern == \"{datetime_format}\" {\n\t\tmultiLineStartPattern = \"{timestamp_format}\"\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/linux/knownConfigKeys.go"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 17,
                  "endLine": 60,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tlogStreamName, _ := p.Get(section, \"log_stream_name\")\n\tlogGroupClass, _ := p.Get(section, \"log_group_class\")\n\ttimestampFormat, _ := p.Get(section, \"datetime_format\")\n\ttimezone, _ := p.Get(section, \"time_zone\")\n\tmultiLineStartPattern, _ := p.Get(section, \"multi_line_start_pattern\")\n\tif multiLineStartPattern == \"{datetime_format}\" {\n\t\tmultiLineStartPattern = \"{timestamp_format}\"\n",
                    "rendered": {
                      "text": "\tlogStreamName, _ := p.Get(section, \"log_stream_name\")\n\tlogGroupClass, _ := p.Get(section, \"log_group_class\")\n\ttimestampFormat, _ := p.Get(section, \"datetime_format\")\n\ttimezone, _ := p.Get(section, \"time_zone\")\n\tmultiLineStartPattern, _ := p.Get(section, \"multi_line_start_pattern\")\n\tif multiLineStartPattern == \"{datetime_format}\" {\n\t\tmultiLineStartPattern = \"{timestamp_format}\"\n",
                      "markdown": "`\tlogStreamName, _ := p.Get(section, \"log_stream_name\")\n\tlogGroupClass, _ := p.Get(section, \"log_group_class\")\n\ttimestampFormat, _ := p.Get(section, \"datetime_format\")\n\ttimezone, _ := p.Get(section, \"time_zone\")\n\tmultiLineStartPattern, _ := p.Get(section, \"multi_line_start_pattern\")\n\tif multiLineStartPattern == \"{datetime_format}\" {\n\t\tmultiLineStartPattern = \"{timestamp_format}\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/linux/knownConfigKeys.go"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 24,
                  "endLine": 59,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\tlogGroupName, _ := p.Get(section, \"log_group_name\")\n\tlogStreamName, _ := p.Get(section, \"log_stream_name\")\n\tlogGroupClass, _ := p.Get(section, \"log_group_class\")\n\ttimestampFormat, _ := p.Get(section, \"datetime_format\")\n\ttimezone, _ := p.Get(section, \"time_zone\")\n\tmultiLineStartPattern, _ := p.Get(section, \"multi_line_start_pattern\")\n\tif multiLineStartPattern == \"{datetime_format}\" {\n",
                    "rendered": {
                      "text": "\tlogGroupName, _ := p.Get(section, \"log_group_name\")\n\tlogStreamName, _ := p.Get(section, \"log_stream_name\")\n\tlogGroupClass, _ := p.Get(section, \"log_group_class\")\n\ttimestampFormat, _ := p.Get(section, \"datetime_format\")\n\ttimezone, _ := p.Get(section, \"time_zone\")\n\tmultiLineStartPattern, _ := p.Get(section, \"multi_line_start_pattern\")\n\tif multiLineStartPattern == \"{datetime_format}\" {\n",
                      "markdown": "`\tlogGroupName, _ := p.Get(section, \"log_group_name\")\n\tlogStreamName, _ := p.Get(section, \"log_stream_name\")\n\tlogGroupClass, _ := p.Get(section, \"log_group_class\")\n\ttimestampFormat, _ := p.Get(section, \"datetime_format\")\n\ttimezone, _ := p.Get(section, \"time_zone\")\n\tmultiLineStartPattern, _ := p.Get(section, \"multi_line_start_pattern\")\n\tif multiLineStartPattern == \"{datetime_format}\" {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/linux/knownConfigKeys.go"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 22,
                  "endLine": 58,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\tlogFilePath, _ := p.Get(section, \"file\")\n\tlogGroupName, _ := p.Get(section, \"log_group_name\")\n\tlogStreamName, _ := p.Get(section, \"log_stream_name\")\n\tlogGroupClass, _ := p.Get(section, \"log_group_class\")\n\ttimestampFormat, _ := p.Get(section, \"datetime_format\")\n\ttimezone, _ := p.Get(section, \"time_zone\")\n\tmultiLineStartPattern, _ := p.Get(section, \"multi_line_start_pattern\")\n",
                    "rendered": {
                      "text": "\tlogFilePath, _ := p.Get(section, \"file\")\n\tlogGroupName, _ := p.Get(section, \"log_group_name\")\n\tlogStreamName, _ := p.Get(section, \"log_stream_name\")\n\tlogGroupClass, _ := p.Get(section, \"log_group_class\")\n\ttimestampFormat, _ := p.Get(section, \"datetime_format\")\n\ttimezone, _ := p.Get(section, \"time_zone\")\n\tmultiLineStartPattern, _ := p.Get(section, \"multi_line_start_pattern\")\n",
                      "markdown": "`\tlogFilePath, _ := p.Get(section, \"file\")\n\tlogGroupName, _ := p.Get(section, \"log_group_name\")\n\tlogStreamName, _ := p.Get(section, \"log_stream_name\")\n\tlogGroupClass, _ := p.Get(section, \"log_group_class\")\n\ttimestampFormat, _ := p.Get(section, \"datetime_format\")\n\ttimezone, _ := p.Get(section, \"time_zone\")\n\tmultiLineStartPattern, _ := p.Get(section, \"multi_line_start_pattern\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/linux/knownConfigKeys.go"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 22,
                  "endLine": 57,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\t}\n\tlogFilePath, _ := p.Get(section, \"file\")\n\tlogGroupName, _ := p.Get(section, \"log_group_name\")\n\tlogStreamName, _ := p.Get(section, \"log_stream_name\")\n\tlogGroupClass, _ := p.Get(section, \"log_group_class\")\n\ttimestampFormat, _ := p.Get(section, \"datetime_format\")\n\ttimezone, _ := p.Get(section, \"time_zone\")\n",
                    "rendered": {
                      "text": "\t}\n\tlogFilePath, _ := p.Get(section, \"file\")\n\tlogGroupName, _ := p.Get(section, \"log_group_name\")\n\tlogStreamName, _ := p.Get(section, \"log_stream_name\")\n\tlogGroupClass, _ := p.Get(section, \"log_group_class\")\n\ttimestampFormat, _ := p.Get(section, \"datetime_format\")\n\ttimezone, _ := p.Get(section, \"time_zone\")\n",
                      "markdown": "`\t}\n\tlogFilePath, _ := p.Get(section, \"file\")\n\tlogGroupName, _ := p.Get(section, \"log_group_name\")\n\tlogStreamName, _ := p.Get(section, \"log_stream_name\")\n\tlogGroupClass, _ := p.Get(section, \"log_group_class\")\n\ttimestampFormat, _ := p.Get(section, \"datetime_format\")\n\ttimezone, _ := p.Get(section, \"time_zone\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/linux/knownConfigKeys.go"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 21,
                  "endLine": 56,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\t\t}\n\t}\n\tlogFilePath, _ := p.Get(section, \"file\")\n\tlogGroupName, _ := p.Get(section, \"log_group_name\")\n\tlogStreamName, _ := p.Get(section, \"log_stream_name\")\n\tlogGroupClass, _ := p.Get(section, \"log_group_class\")\n\ttimestampFormat, _ := p.Get(section, \"datetime_format\")\n",
                    "rendered": {
                      "text": "\t\t}\n\t}\n\tlogFilePath, _ := p.Get(section, \"file\")\n\tlogGroupName, _ := p.Get(section, \"log_group_name\")\n\tlogStreamName, _ := p.Get(section, \"log_stream_name\")\n\tlogGroupClass, _ := p.Get(section, \"log_group_class\")\n\ttimestampFormat, _ := p.Get(section, \"datetime_format\")\n",
                      "markdown": "`\t\t}\n\t}\n\tlogFilePath, _ := p.Get(section, \"file\")\n\tlogGroupName, _ := p.Get(section, \"log_group_name\")\n\tlogStreamName, _ := p.Get(section, \"log_stream_name\")\n\tlogGroupClass, _ := p.Get(section, \"log_group_class\")\n\ttimestampFormat, _ := p.Get(section, \"datetime_format\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/migration/linux/knownConfigKeys.go"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 20,
                  "endLine": 55,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t\t\tfmt.Printf(\"Warning: Option key %s for section %s in file %s is unknown.\\n\", k, section, filePath)\n\t\t}\n\t}\n\tlogFilePath, _ := p.Get(section, \"file\")\n\tlogGroupName, _ := p.Get(section, \"log_group_name\")\n\tlogStreamName, _ := p.Get(section, \"log_stream_name\")\n\tlogGroupClass, _ := p.Get(section, \"log_group_class\")\n",
                    "rendered": {
                      "text": "\t\t\tfmt.Printf(\"Warning: Option key %s for section %s in file %s is unknown.\\n\", k, section, filePath)\n\t\t}\n\t}\n\tlogFilePath, _ := p.Get(section, \"file\")\n\tlogGroupName, _ := p.Get(section, \"log_group_name\")\n\tlogStreamName, _ := p.Get(section, \"log_stream_name\")\n\tlogGroupClass, _ := p.Get(section, \"log_group_class\")\n",
                      "markdown": "`\t\t\tfmt.Printf(\"Warning: Option key %s for section %s in file %s is unknown.\\n\", k, section, filePath)\n\t\t}\n\t}\n\tlogFilePath, _ := p.Get(section, \"file\")\n\tlogGroupName, _ := p.Get(section, \"log_group_name\")\n\tlogStreamName, _ := p.Get(section, \"log_stream_name\")\n\tlogGroupClass, _ := p.Get(section, \"log_group_class\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/question/events/events.go"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 25,
                  "endLine": 74,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n\t\tlogStreamNameHint := \"{instance_id}\"\n\t\tif ctx.IsOnPrem {\n\t\t\tlogStreamNameHint = \"{hostname}\"\n\t\t}\n\n\t\tlogStreamName := util.AskWithDefault(\"Log stream name:\", logStreamNameHint)\n",
                    "rendered": {
                      "text": "\n\t\tlogStreamNameHint := \"{instance_id}\"\n\t\tif ctx.IsOnPrem {\n\t\t\tlogStreamNameHint = \"{hostname}\"\n\t\t}\n\n\t\tlogStreamName := util.AskWithDefault(\"Log stream name:\", logStreamNameHint)\n",
                      "markdown": "`\n\t\tlogStreamNameHint := \"{instance_id}\"\n\t\tif ctx.IsOnPrem {\n\t\t\tlogStreamNameHint = \"{hostname}\"\n\t\t}\n\n\t\tlogStreamName := util.AskWithDefault(\"Log stream name:\", logStreamNameHint)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/question/logs/logs.go"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 25,
                  "endLine": 55,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\t\tlogGroupClass := util.Choice(\"Log group class:\", 1, []string{util.StandardLogGroupClass, util.InfrequentAccessLogGroupClass})\n\t\tlogStreamNameHint := \"{instance_id}\"\n\t\tif ctx.IsOnPrem {\n\t\t\tlogStreamNameHint = \"{hostname}\"\n\t\t}\n\t\tlogStreamName := util.AskWithDefault(\"Log stream name:\", logStreamNameHint)\n\n",
                    "rendered": {
                      "text": "\t\tlogGroupClass := util.Choice(\"Log group class:\", 1, []string{util.StandardLogGroupClass, util.InfrequentAccessLogGroupClass})\n\t\tlogStreamNameHint := \"{instance_id}\"\n\t\tif ctx.IsOnPrem {\n\t\t\tlogStreamNameHint = \"{hostname}\"\n\t\t}\n\t\tlogStreamName := util.AskWithDefault(\"Log stream name:\", logStreamNameHint)\n\n",
                      "markdown": "`\t\tlogGroupClass := util.Choice(\"Log group class:\", 1, []string{util.StandardLogGroupClass, util.InfrequentAccessLogGroupClass})\n\t\tlogStreamNameHint := \"{instance_id}\"\n\t\tif ctx.IsOnPrem {\n\t\t\tlogStreamNameHint = \"{hostname}\"\n\t\t}\n\t\tlogStreamName := util.AskWithDefault(\"Log stream name:\", logStreamNameHint)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/ssm/ssm.go"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 42,
                  "endLine": 81,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\tfileAccessKey := \"\"\n\tfileAccessKeyDesc := \"\"\n\tfileCredentialsProvider := credentials.NewSharedCredentials(\"\", \"AmazonCloudWatchAgent\")\n\tfileCreds, err := fileCredentialsProvider.Get()\n\tif err == nil {\n\t\tfileAccessKey = fileCreds.AccessKeyID\n\t\tfileAccessKeyDesc = fileAccessKey + \"(From Profile: AmazonCloudWatchAgent)\"\n",
                    "rendered": {
                      "text": "\tfileAccessKey := \"\"\n\tfileAccessKeyDesc := \"\"\n\tfileCredentialsProvider := credentials.NewSharedCredentials(\"\", \"AmazonCloudWatchAgent\")\n\tfileCreds, err := fileCredentialsProvider.Get()\n\tif err == nil {\n\t\tfileAccessKey = fileCreds.AccessKeyID\n\t\tfileAccessKeyDesc = fileAccessKey + \"(From Profile: AmazonCloudWatchAgent)\"\n",
                      "markdown": "`\tfileAccessKey := \"\"\n\tfileAccessKeyDesc := \"\"\n\tfileCredentialsProvider := credentials.NewSharedCredentials(\"\", \"AmazonCloudWatchAgent\")\n\tfileCreds, err := fileCredentialsProvider.Get()\n\tif err == nil {\n\t\tfileAccessKey = fileCreds.AccessKeyID\n\t\tfileAccessKeyDesc = fileAccessKey + \"(From Profile: AmazonCloudWatchAgent)\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/ssm/ssm.go"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 54,
                  "endLine": 104,
                  "endColumn": 63,
                  "snippet": {
                    "text": "func askCreds() *credentials.Credentials {\n\taccessKey := util.Ask(\"Please provide credentials to upload the json config file to parameter store.\\nAWS Access Key:\")\n\tsecretKey := util.Ask(\"AWS Secret Key:\")\n\tcreds := credentials.NewStaticCredentials(accessKey, secretKey, \"\")\n\treturn creds\n}\n\n",
                    "rendered": {
                      "text": "func askCreds() *credentials.Credentials {\n\taccessKey := util.Ask(\"Please provide credentials to upload the json config file to parameter store.\\nAWS Access Key:\")\n\tsecretKey := util.Ask(\"AWS Secret Key:\")\n\tcreds := credentials.NewStaticCredentials(accessKey, secretKey, \"\")\n\treturn creds\n}\n\n",
                      "markdown": "`func askCreds() *credentials.Credentials {\n\taccessKey := util.Ask(\"Please provide credentials to upload the json config file to parameter store.\\nAWS Access Key:\")\n\tsecretKey := util.Ask(\"AWS Secret Key:\")\n\tcreds := credentials.NewStaticCredentials(accessKey, secretKey, \"\")\n\treturn creds\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/ssm/ssm.go"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 1,
                  "endLine": 103,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\nfunc askCreds() *credentials.Credentials {\n\taccessKey := util.Ask(\"Please provide credentials to upload the json config file to parameter store.\\nAWS Access Key:\")\n\tsecretKey := util.Ask(\"AWS Secret Key:\")\n\tcreds := credentials.NewStaticCredentials(accessKey, secretKey, \"\")\n\treturn creds\n}\n",
                    "rendered": {
                      "text": "\nfunc askCreds() *credentials.Credentials {\n\taccessKey := util.Ask(\"Please provide credentials to upload the json config file to parameter store.\\nAWS Access Key:\")\n\tsecretKey := util.Ask(\"AWS Secret Key:\")\n\tcreds := credentials.NewStaticCredentials(accessKey, secretKey, \"\")\n\treturn creds\n}\n",
                      "markdown": "`\nfunc askCreds() *credentials.Credentials {\n\taccessKey := util.Ask(\"Please provide credentials to upload the json config file to parameter store.\\nAWS Access Key:\")\n\tsecretKey := util.Ask(\"AWS Secret Key:\")\n\tcreds := credentials.NewStaticCredentials(accessKey, secretKey, \"\")\n\treturn creds\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/ssm/ssm.go"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 60,
                  "endLine": 143,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\tinput.SetName(parameterStoreName)\n\tinput.SetOverwrite(true)\n\thostName, _ := os.Hostname()\n\tinput.SetDescription(fmt.Sprintf(\"Generated by wizard on %s at %s\", hostName, time.Now().Format(time.RFC1123)))\n\tinput.SetType(\"String\")\n\tinput.SetValue(config)\n\t_, err = ssmClient.PutParameter(&input)\n",
                    "rendered": {
                      "text": "\tinput.SetName(parameterStoreName)\n\tinput.SetOverwrite(true)\n\thostName, _ := os.Hostname()\n\tinput.SetDescription(fmt.Sprintf(\"Generated by wizard on %s at %s\", hostName, time.Now().Format(time.RFC1123)))\n\tinput.SetType(\"String\")\n\tinput.SetValue(config)\n\t_, err = ssmClient.PutParameter(&input)\n",
                      "markdown": "`\tinput.SetName(parameterStoreName)\n\tinput.SetOverwrite(true)\n\thostName, _ := os.Hostname()\n\tinput.SetDescription(fmt.Sprintf(\"Generated by wizard on %s at %s\", hostName, time.Now().Format(time.RFC1123)))\n\tinput.SetType(\"String\")\n\tinput.SetValue(config)\n\t_, err = ssmClient.PutParameter(&input)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/ssm/ssm_test.go"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 27,
                  "endLine": 44,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\t} else {\n\t\ttestutil.Type(inputChan, \"AK1\", \"SK1\")\n\t\tactualCreds := determineCreds(ctx)\n\t\tvalue, err := actualCreds.Get()\n\t\tassert.NoError(t, err)\n\t\tassert.Equal(t, \"AK1\", value.AccessKeyID)\n\t\tassert.Equal(t, \"SK1\", value.SecretAccessKey)\n",
                    "rendered": {
                      "text": "\t} else {\n\t\ttestutil.Type(inputChan, \"AK1\", \"SK1\")\n\t\tactualCreds := determineCreds(ctx)\n\t\tvalue, err := actualCreds.Get()\n\t\tassert.NoError(t, err)\n\t\tassert.Equal(t, \"AK1\", value.AccessKeyID)\n\t\tassert.Equal(t, \"SK1\", value.SecretAccessKey)\n",
                      "markdown": "`\t} else {\n\t\ttestutil.Type(inputChan, \"AK1\", \"SK1\")\n\t\tactualCreds := determineCreds(ctx)\n\t\tvalue, err := actualCreds.Get()\n\t\tassert.NoError(t, err)\n\t\tassert.Equal(t, \"AK1\", value.AccessKeyID)\n\t\tassert.Equal(t, \"SK1\", value.SecretAccessKey)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/ssm/ssm_test.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 26,
                  "endLine": 37,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n\t\ttestutil.Type(inputChan, \"2\", \"AK1\", \"SK1\")\n\t\tactualCreds = determineCreds(ctx)\n\t\tvalue, err = actualCreds.Get()\n\t\tassert.NoError(t, err)\n\t\tassert.Equal(t, \"AK1\", value.AccessKeyID)\n\t\tassert.Equal(t, \"SK1\", value.SecretAccessKey)\n",
                    "rendered": {
                      "text": "\n\t\ttestutil.Type(inputChan, \"2\", \"AK1\", \"SK1\")\n\t\tactualCreds = determineCreds(ctx)\n\t\tvalue, err = actualCreds.Get()\n\t\tassert.NoError(t, err)\n\t\tassert.Equal(t, \"AK1\", value.AccessKeyID)\n\t\tassert.Equal(t, \"SK1\", value.SecretAccessKey)\n",
                      "markdown": "`\n\t\ttestutil.Type(inputChan, \"2\", \"AK1\", \"SK1\")\n\t\tactualCreds = determineCreds(ctx)\n\t\tvalue, err = actualCreds.Get()\n\t\tassert.NoError(t, err)\n\t\tassert.Equal(t, \"AK1\", value.AccessKeyID)\n\t\tassert.Equal(t, \"SK1\", value.SecretAccessKey)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/ssm/ssm_test.go"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 27,
                  "endLine": 30,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\tif creds != nil {\n\t\ttestutil.Type(inputChan, \"\")\n\t\tactualCreds := determineCreds(ctx)\n\t\tvalue, err := actualCreds.Get()\n\t\tassert.NoError(t, err)\n\t\tassert.Equal(t, accessKey, value.AccessKeyID)\n\t\tassert.Equal(t, secretKey, value.SecretAccessKey)\n",
                    "rendered": {
                      "text": "\tif creds != nil {\n\t\ttestutil.Type(inputChan, \"\")\n\t\tactualCreds := determineCreds(ctx)\n\t\tvalue, err := actualCreds.Get()\n\t\tassert.NoError(t, err)\n\t\tassert.Equal(t, accessKey, value.AccessKeyID)\n\t\tassert.Equal(t, secretKey, value.SecretAccessKey)\n",
                      "markdown": "`\tif creds != nil {\n\t\ttestutil.Type(inputChan, \"\")\n\t\tactualCreds := determineCreds(ctx)\n\t\tvalue, err := actualCreds.Get()\n\t\tassert.NoError(t, err)\n\t\tassert.Equal(t, accessKey, value.AccessKeyID)\n\t\tassert.Equal(t, secretKey, value.SecretAccessKey)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/ssm/ssm_test.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 18,
                  "endLine": 33,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\t\tvalue, err := actualCreds.Get()\n\t\tassert.NoError(t, err)\n\t\tassert.Equal(t, accessKey, value.AccessKeyID)\n\t\tassert.Equal(t, secretKey, value.SecretAccessKey)\n\n\t\ttestutil.Type(inputChan, \"2\", \"AK1\", \"SK1\")\n\t\tactualCreds = determineCreds(ctx)\n",
                    "rendered": {
                      "text": "\t\tvalue, err := actualCreds.Get()\n\t\tassert.NoError(t, err)\n\t\tassert.Equal(t, accessKey, value.AccessKeyID)\n\t\tassert.Equal(t, secretKey, value.SecretAccessKey)\n\n\t\ttestutil.Type(inputChan, \"2\", \"AK1\", \"SK1\")\n\t\tactualCreds = determineCreds(ctx)\n",
                      "markdown": "`\t\tvalue, err := actualCreds.Get()\n\t\tassert.NoError(t, err)\n\t\tassert.Equal(t, accessKey, value.AccessKeyID)\n\t\tassert.Equal(t, secretKey, value.SecretAccessKey)\n\n\t\ttestutil.Type(inputChan, \"2\", \"AK1\", \"SK1\")\n\t\tactualCreds = determineCreds(ctx)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/ssm/ssm_test.go"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 12,
                  "endLine": 26,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n\tctx := new(runtime.Context)\n\n\taccessKey, secretKey, creds := util.SDKCredentials()\n\tif creds != nil {\n\t\ttestutil.Type(inputChan, \"\")\n\t\tactualCreds := determineCreds(ctx)\n",
                    "rendered": {
                      "text": "\n\tctx := new(runtime.Context)\n\n\taccessKey, secretKey, creds := util.SDKCredentials()\n\tif creds != nil {\n\t\ttestutil.Type(inputChan, \"\")\n\t\tactualCreds := determineCreds(ctx)\n",
                      "markdown": "`\n\tctx := new(runtime.Context)\n\n\taccessKey, secretKey, creds := util.SDKCredentials()\n\tif creds != nil {\n\t\ttestutil.Type(inputChan, \"\")\n\t\tactualCreds := determineCreds(ctx)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/metrics/util/commonconfigutil.go"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 82,
                  "endLine": 197,
                  "endColumn": 88,
                  "snippet": {
                    "text": "\t\t\t} else {\n\t\t\t\ttranslator.AddErrorMessages(\n\t\t\t\t\tfmt.Sprintf(\"metrics plugin %s\", pluginName),\n\t\t\t\t\tfmt.Sprintf(\"metrics_aggregation_interval value (%v) in json is not valid for time interval.\", val))\n\t\t\t}\n\t\t}\n\t\tif defaultValue != \"\" {\n",
                    "rendered": {
                      "text": "\t\t\t} else {\n\t\t\t\ttranslator.AddErrorMessages(\n\t\t\t\t\tfmt.Sprintf(\"metrics plugin %s\", pluginName),\n\t\t\t\t\tfmt.Sprintf(\"metrics_aggregation_interval value (%v) in json is not valid for time interval.\", val))\n\t\t\t}\n\t\t}\n\t\tif defaultValue != \"\" {\n",
                      "markdown": "`\t\t\t} else {\n\t\t\t\ttranslator.AddErrorMessages(\n\t\t\t\t\tfmt.Sprintf(\"metrics plugin %s\", pluginName),\n\t\t\t\t\tfmt.Sprintf(\"metrics_aggregation_interval value (%v) in json is not valid for time interval.\", val))\n\t\t\t}\n\t\t}\n\t\tif defaultValue != \"\" {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/metrics/util/commonconfigutil.go"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 81,
                  "endLine": 174,
                  "endColumn": 87,
                  "snippet": {
                    "text": "\t\t\t} else {\n\t\t\t\ttranslator.AddErrorMessages(\n\t\t\t\t\tfmt.Sprintf(\"metrics plugin %s\", pluginName),\n\t\t\t\t\tfmt.Sprintf(\"metrics_collection_interval value (%v) in json is not valid for time interval.\", val))\n\t\t\t}\n\t\t}\n\t\tif defaultValue != \"\" {\n",
                    "rendered": {
                      "text": "\t\t\t} else {\n\t\t\t\ttranslator.AddErrorMessages(\n\t\t\t\t\tfmt.Sprintf(\"metrics plugin %s\", pluginName),\n\t\t\t\t\tfmt.Sprintf(\"metrics_collection_interval value (%v) in json is not valid for time interval.\", val))\n\t\t\t}\n\t\t}\n\t\tif defaultValue != \"\" {\n",
                      "markdown": "`\t\t\t} else {\n\t\t\t\ttranslator.AddErrorMessages(\n\t\t\t\t\tfmt.Sprintf(\"metrics plugin %s\", pluginName),\n\t\t\t\t\tfmt.Sprintf(\"metrics_collection_interval value (%v) in json is not valid for time interval.\", val))\n\t\t\t}\n\t\t}\n\t\tif defaultValue != \"\" {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/metrics/util/commonconfigutil.go"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 80,
                  "endLine": 159,
                  "endColumn": 86,
                  "snippet": {
                    "text": "\t\t} else {\n\t\t\ttranslator.AddErrorMessages(\n\t\t\t\tfmt.Sprintf(\"metrics plugin %s\", pluginName),\n\t\t\t\tfmt.Sprintf(\"metrics_collection_interval value (%v) in json is not valid for time interval.\", val))\n\t\t}\n\t}\n\treturn isHighRsolution\n",
                    "rendered": {
                      "text": "\t\t} else {\n\t\t\ttranslator.AddErrorMessages(\n\t\t\t\tfmt.Sprintf(\"metrics plugin %s\", pluginName),\n\t\t\t\tfmt.Sprintf(\"metrics_collection_interval value (%v) in json is not valid for time interval.\", val))\n\t\t}\n\t}\n\treturn isHighRsolution\n",
                      "markdown": "`\t\t} else {\n\t\t\ttranslator.AddErrorMessages(\n\t\t\t\tfmt.Sprintf(\"metrics plugin %s\", pluginName),\n\t\t\t\tfmt.Sprintf(\"metrics_collection_interval value (%v) in json is not valid for time interval.\", val))\n\t\t}\n\t}\n\treturn isHighRsolution\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/metrics/ruleMetricCredentials_test.go"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 76,
                  "endLine": 40,
                  "endColumn": 86,
                  "snippet": {
                    "text": "\t}\n\n\tagent.Global_Config.Role_arn = \"global_role_arn_test\"\n\terr = json.Unmarshal([]byte(`{ \"credentials\" : {\"access_key\":\"metric_ak\", \"secret_key\":\"metric_sk\", \"token\": \"dummy_token\", \"profile\": \"dummy_profile\"}}`), &input)\n\tif err == nil {\n\t\t_, returnVal := c.ApplyRule(input)\n\t\tassert.Equal(t, \"global_role_arn_test\", returnVal.(map[string]interface{})[\"role_arn\"], \"Expected to be equal\")\n",
                    "rendered": {
                      "text": "\t}\n\n\tagent.Global_Config.Role_arn = \"global_role_arn_test\"\n\terr = json.Unmarshal([]byte(`{ \"credentials\" : {\"access_key\":\"metric_ak\", \"secret_key\":\"metric_sk\", \"token\": \"dummy_token\", \"profile\": \"dummy_profile\"}}`), &input)\n\tif err == nil {\n\t\t_, returnVal := c.ApplyRule(input)\n\t\tassert.Equal(t, \"global_role_arn_test\", returnVal.(map[string]interface{})[\"role_arn\"], \"Expected to be equal\")\n",
                      "markdown": "`\t}\n\n\tagent.Global_Config.Role_arn = \"global_role_arn_test\"\n\terr = json.Unmarshal([]byte(`{ \"credentials\" : {\"access_key\":\"metric_ak\", \"secret_key\":\"metric_sk\", \"token\": \"dummy_token\", \"profile\": \"dummy_profile\"}}`), &input)\n\tif err == nil {\n\t\t_, returnVal := c.ApplyRule(input)\n\t\tassert.Equal(t, \"global_role_arn_test\", returnVal.(map[string]interface{})[\"role_arn\"], \"Expected to be equal\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/metrics/ruleMetricCredentials_test.go"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 76,
                  "endLine": 31,
                  "endColumn": 86,
                  "snippet": {
                    "text": "\t}\n\n\tagent.Global_Config.Role_arn = \"global_role_arn_test\"\n\terr = json.Unmarshal([]byte(`{ \"credentials\" : {\"access_key\":\"metric_ak\", \"secret_key\":\"metric_sk\", \"token\": \"dummy_token\", \"profile\": \"dummy_profile\", \"role_arn\": \"role_value\"}}`), &input)\n\tif err == nil {\n\t\t_, returnVal := c.ApplyRule(input)\n\t\tassert.Equal(t, \"role_value\", returnVal.(map[string]interface{})[\"role_arn\"], \"Expected to be equal\")\n",
                    "rendered": {
                      "text": "\t}\n\n\tagent.Global_Config.Role_arn = \"global_role_arn_test\"\n\terr = json.Unmarshal([]byte(`{ \"credentials\" : {\"access_key\":\"metric_ak\", \"secret_key\":\"metric_sk\", \"token\": \"dummy_token\", \"profile\": \"dummy_profile\", \"role_arn\": \"role_value\"}}`), &input)\n\tif err == nil {\n\t\t_, returnVal := c.ApplyRule(input)\n\t\tassert.Equal(t, \"role_value\", returnVal.(map[string]interface{})[\"role_arn\"], \"Expected to be equal\")\n",
                      "markdown": "`\t}\n\n\tagent.Global_Config.Role_arn = \"global_role_arn_test\"\n\terr = json.Unmarshal([]byte(`{ \"credentials\" : {\"access_key\":\"metric_ak\", \"secret_key\":\"metric_sk\", \"token\": \"dummy_token\", \"profile\": \"dummy_profile\", \"role_arn\": \"role_value\"}}`), &input)\n\tif err == nil {\n\t\t_, returnVal := c.ApplyRule(input)\n\t\tassert.Equal(t, \"role_value\", returnVal.(map[string]interface{})[\"role_arn\"], \"Expected to be equal\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/metrics/ruleMetricCredentials_test.go"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 77,
                  "endLine": 22,
                  "endColumn": 87,
                  "snippet": {
                    "text": "\tctx.SetCredentials(map[string]string{})\n\tc := new(MetricsCreds)\n\tvar input interface{}\n\terr := json.Unmarshal([]byte(`{ \"credentials\" : {\"access_key\":\"metric_ak\", \"secret_key\":\"metric_sk\", \"token\": \"dummy_token\", \"profile\": \"dummy_profile\", \"role_arn\": \"role_value\"}}`), &input)\n\tif err == nil {\n\t\t_, returnVal := c.ApplyRule(input)\n\t\tassert.Equal(t, \"role_value\", returnVal.(map[string]interface{})[\"role_arn\"], \"Expected to be equal\")\n",
                    "rendered": {
                      "text": "\tctx.SetCredentials(map[string]string{})\n\tc := new(MetricsCreds)\n\tvar input interface{}\n\terr := json.Unmarshal([]byte(`{ \"credentials\" : {\"access_key\":\"metric_ak\", \"secret_key\":\"metric_sk\", \"token\": \"dummy_token\", \"profile\": \"dummy_profile\", \"role_arn\": \"role_value\"}}`), &input)\n\tif err == nil {\n\t\t_, returnVal := c.ApplyRule(input)\n\t\tassert.Equal(t, \"role_value\", returnVal.(map[string]interface{})[\"role_arn\"], \"Expected to be equal\")\n",
                      "markdown": "`\tctx.SetCredentials(map[string]string{})\n\tc := new(MetricsCreds)\n\tvar input interface{}\n\terr := json.Unmarshal([]byte(`{ \"credentials\" : {\"access_key\":\"metric_ak\", \"secret_key\":\"metric_sk\", \"token\": \"dummy_token\", \"profile\": \"dummy_profile\", \"role_arn\": \"role_value\"}}`), &input)\n\tif err == nil {\n\t\t_, returnVal := c.ApplyRule(input)\n\t\tassert.Equal(t, \"role_value\", returnVal.(map[string]interface{})[\"role_arn\"], \"Expected to be equal\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/logs/logs_collected/windows_events/collect_list/collectlist.go"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 64,
                  "endLine": 117,
                  "endColumn": 70,
                  "snippet": {
                    "text": "\t\tcase \"VERBOSE\":\n\t\t\tresultEventLevels = append(resultEventLevels, \"5\")\n\t\tdefault:\n\t\t\ttranslator.AddErrorMessages(GetCurPath(), fmt.Sprintf(\"Cannot find the mapping for Windows event level %v.\", eventLevel))\n\t\t}\n\t}\n\tresult[EventLevelsKey] = resultEventLevels\n",
                    "rendered": {
                      "text": "\t\tcase \"VERBOSE\":\n\t\t\tresultEventLevels = append(resultEventLevels, \"5\")\n\t\tdefault:\n\t\t\ttranslator.AddErrorMessages(GetCurPath(), fmt.Sprintf(\"Cannot find the mapping for Windows event level %v.\", eventLevel))\n\t\t}\n\t}\n\tresult[EventLevelsKey] = resultEventLevels\n",
                      "markdown": "`\t\tcase \"VERBOSE\":\n\t\t\tresultEventLevels = append(resultEventLevels, \"5\")\n\t\tdefault:\n\t\t\ttranslator.AddErrorMessages(GetCurPath(), fmt.Sprintf(\"Cannot find the mapping for Windows event level %v.\", eventLevel))\n\t\t}\n\t}\n\tresult[EventLevelsKey] = resultEventLevels\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/config_with_env.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/config_with_env.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/invalid_input_linux.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/invalid_input_linux.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/complete_linux_config.json"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 10,
                  "endLine": 14,
                  "endColumn": 18,
                  "snippet": {
                    "text": "      \"role_arn\": \"global_role_arn_value\"\n    },\n    \"region\": \"us-west-2\",\n    \"omit_hostname\": true\n  },\n  \"metrics\": {\n    \"metrics_destinations\": {\n",
                    "rendered": {
                      "text": "      \"role_arn\": \"global_role_arn_value\"\n    },\n    \"region\": \"us-west-2\",\n    \"omit_hostname\": true\n  },\n  \"metrics\": {\n    \"metrics_destinations\": {\n",
                      "markdown": "`      \"role_arn\": \"global_role_arn_value\"\n    },\n    \"region\": \"us-west-2\",\n    \"omit_hostname\": true\n  },\n  \"metrics\": {\n    \"metrics_destinations\": {\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/emf_and_kubernetes_config.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/emf_and_kubernetes_config.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/amp_config_linux.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/amp_config_linux.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/delta_config_linux.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/delta_config_linux.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/advanced_config_darwin.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/advanced_config_darwin.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/container_insights_jmx.yaml"
                },
                "region": {
                  "startLine": 416,
                  "startColumn": 21,
                  "endLine": 417,
                  "snippet": {
                    "text": "              match_type: strict\n              new_name: catalina_globalrequestprocessor_errorcount\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.processing_time\n              match_type: strict\n              new_name: catalina_globalrequestprocessor_processingtime\n",
                    "rendered": {
                      "text": "              match_type: strict\n              new_name: catalina_globalrequestprocessor_errorcount\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.processing_time\n              match_type: strict\n              new_name: catalina_globalrequestprocessor_processingtime\n",
                      "markdown": "`              match_type: strict\n              new_name: catalina_globalrequestprocessor_errorcount\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.processing_time\n              match_type: strict\n              new_name: catalina_globalrequestprocessor_processingtime\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/container_insights_jmx.yaml"
                },
                "region": {
                  "startLine": 410,
                  "startColumn": 21,
                  "endLine": 411,
                  "snippet": {
                    "text": "              match_type: strict\n              new_name: catalina_globalrequestprocessor_requestcount\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.errors\n              match_type: strict\n              new_name: catalina_globalrequestprocessor_errorcount\n",
                    "rendered": {
                      "text": "              match_type: strict\n              new_name: catalina_globalrequestprocessor_requestcount\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.errors\n              match_type: strict\n              new_name: catalina_globalrequestprocessor_errorcount\n",
                      "markdown": "`              match_type: strict\n              new_name: catalina_globalrequestprocessor_requestcount\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.errors\n              match_type: strict\n              new_name: catalina_globalrequestprocessor_errorcount\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/container_insights_jmx.yaml"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 21,
                  "endLine": 405,
                  "snippet": {
                    "text": "              match_type: strict\n              new_name: catalina_globalrequestprocessor_bytessent\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.request_count\n              match_type: strict\n              new_name: catalina_globalrequestprocessor_requestcount\n",
                    "rendered": {
                      "text": "              match_type: strict\n              new_name: catalina_globalrequestprocessor_bytessent\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.request_count\n              match_type: strict\n              new_name: catalina_globalrequestprocessor_requestcount\n",
                      "markdown": "`              match_type: strict\n              new_name: catalina_globalrequestprocessor_bytessent\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.request_count\n              match_type: strict\n              new_name: catalina_globalrequestprocessor_requestcount\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/container_insights_jmx.yaml"
                },
                "region": {
                  "startLine": 398,
                  "startColumn": 21,
                  "endLine": 399,
                  "snippet": {
                    "text": "              match_type: strict\n              new_name: catalina_globalrequestprocessor_bytesreceived\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.traffic.sent\n              match_type: strict\n              new_name: catalina_globalrequestprocessor_bytessent\n",
                    "rendered": {
                      "text": "              match_type: strict\n              new_name: catalina_globalrequestprocessor_bytesreceived\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.traffic.sent\n              match_type: strict\n              new_name: catalina_globalrequestprocessor_bytessent\n",
                      "markdown": "`              match_type: strict\n              new_name: catalina_globalrequestprocessor_bytesreceived\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.traffic.sent\n              match_type: strict\n              new_name: catalina_globalrequestprocessor_bytessent\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/container_insights_jmx.yaml"
                },
                "region": {
                  "startLine": 392,
                  "startColumn": 21,
                  "endLine": 393,
                  "snippet": {
                    "text": "              match_type: strict\n              new_name: catalina_manager_rejectedsessions\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.traffic.received\n              match_type: strict\n              new_name: catalina_globalrequestprocessor_bytesreceived\n",
                    "rendered": {
                      "text": "              match_type: strict\n              new_name: catalina_manager_rejectedsessions\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.traffic.received\n              match_type: strict\n              new_name: catalina_globalrequestprocessor_bytesreceived\n",
                      "markdown": "`              match_type: strict\n              new_name: catalina_manager_rejectedsessions\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.traffic.received\n              match_type: strict\n              new_name: catalina_globalrequestprocessor_bytesreceived\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/container_insights_jmx.yaml"
                },
                "region": {
                  "startLine": 386,
                  "startColumn": 21,
                  "endLine": 387,
                  "snippet": {
                    "text": "              match_type: strict\n              new_name: catalina_manager_activesessions\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.rejected_sessions\n              match_type: strict\n              new_name: catalina_manager_rejectedsessions\n",
                    "rendered": {
                      "text": "              match_type: strict\n              new_name: catalina_manager_activesessions\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.rejected_sessions\n              match_type: strict\n              new_name: catalina_manager_rejectedsessions\n",
                      "markdown": "`              match_type: strict\n              new_name: catalina_manager_activesessions\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.rejected_sessions\n              match_type: strict\n              new_name: catalina_manager_rejectedsessions\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/container_insights_jmx.yaml"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 21,
                  "endLine": 381,
                  "snippet": {
                    "text": "              match_type: strict\n              new_name: jvm_threads_daemon\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.sessions\n              match_type: strict\n              new_name: catalina_manager_activesessions\n",
                    "rendered": {
                      "text": "              match_type: strict\n              new_name: jvm_threads_daemon\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.sessions\n              match_type: strict\n              new_name: catalina_manager_activesessions\n",
                      "markdown": "`              match_type: strict\n              new_name: jvm_threads_daemon\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.sessions\n              match_type: strict\n              new_name: catalina_manager_activesessions\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/container_insights_jmx.yaml"
                },
                "region": {
                  "startLine": 374,
                  "startColumn": 21,
                  "endLine": 375,
                  "snippet": {
                    "text": "              match_type: strict\n              new_name: jvm_threads_current\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.daemon_threads.count\n              match_type: strict\n              new_name: jvm_threads_daemon\n",
                    "rendered": {
                      "text": "              match_type: strict\n              new_name: jvm_threads_current\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.daemon_threads.count\n              match_type: strict\n              new_name: jvm_threads_daemon\n",
                      "markdown": "`              match_type: strict\n              new_name: jvm_threads_current\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.daemon_threads.count\n              match_type: strict\n              new_name: jvm_threads_daemon\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/container_insights_jmx.yaml"
                },
                "region": {
                  "startLine": 368,
                  "startColumn": 21,
                  "endLine": 369,
                  "snippet": {
                    "text": "              match_type: strict\n              new_name: java_lang_operatingsystem_availableprocessors\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.threads.count\n              match_type: strict\n              new_name: jvm_threads_current\n",
                    "rendered": {
                      "text": "              match_type: strict\n              new_name: java_lang_operatingsystem_availableprocessors\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.threads.count\n              match_type: strict\n              new_name: jvm_threads_current\n",
                      "markdown": "`              match_type: strict\n              new_name: java_lang_operatingsystem_availableprocessors\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.threads.count\n              match_type: strict\n              new_name: jvm_threads_current\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/container_insights_jmx.yaml"
                },
                "region": {
                  "startLine": 362,
                  "startColumn": 21,
                  "endLine": 363,
                  "snippet": {
                    "text": "              match_type: strict\n              new_name: java_lang_operatingsystem_openfiledescriptorcount\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.system.available.processors\n              match_type: strict\n              new_name: java_lang_operatingsystem_availableprocessors\n",
                    "rendered": {
                      "text": "              match_type: strict\n              new_name: java_lang_operatingsystem_openfiledescriptorcount\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.system.available.processors\n              match_type: strict\n              new_name: java_lang_operatingsystem_availableprocessors\n",
                      "markdown": "`              match_type: strict\n              new_name: java_lang_operatingsystem_openfiledescriptorcount\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.system.available.processors\n              match_type: strict\n              new_name: java_lang_operatingsystem_availableprocessors\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/container_insights_jmx.yaml"
                },
                "region": {
                  "startLine": 356,
                  "startColumn": 21,
                  "endLine": 357,
                  "snippet": {
                    "text": "              match_type: strict\n              new_name: java_lang_operatingsystem_freephysicalmemorysize\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.open_file_descriptor.count\n              match_type: strict\n              new_name: java_lang_operatingsystem_openfiledescriptorcount\n",
                    "rendered": {
                      "text": "              match_type: strict\n              new_name: java_lang_operatingsystem_freephysicalmemorysize\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.open_file_descriptor.count\n              match_type: strict\n              new_name: java_lang_operatingsystem_openfiledescriptorcount\n",
                      "markdown": "`              match_type: strict\n              new_name: java_lang_operatingsystem_freephysicalmemorysize\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.open_file_descriptor.count\n              match_type: strict\n              new_name: java_lang_operatingsystem_openfiledescriptorcount\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/container_insights_jmx.yaml"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 21,
                  "endLine": 351,
                  "snippet": {
                    "text": "              match_type: strict\n              new_name: java_lang_operatingsystem_totalphysicalmemorysize\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.system.physical.memory.free\n              match_type: strict\n              new_name: java_lang_operatingsystem_freephysicalmemorysize\n",
                    "rendered": {
                      "text": "              match_type: strict\n              new_name: java_lang_operatingsystem_totalphysicalmemorysize\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.system.physical.memory.free\n              match_type: strict\n              new_name: java_lang_operatingsystem_freephysicalmemorysize\n",
                      "markdown": "`              match_type: strict\n              new_name: java_lang_operatingsystem_totalphysicalmemorysize\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.system.physical.memory.free\n              match_type: strict\n              new_name: java_lang_operatingsystem_freephysicalmemorysize\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/container_insights_jmx.yaml"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 21,
                  "endLine": 345,
                  "snippet": {
                    "text": "              match_type: strict\n              new_name: java_lang_operatingsystem_freeswapspacesize\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.system.physical.memory.total\n              match_type: strict\n              new_name: java_lang_operatingsystem_totalphysicalmemorysize\n",
                    "rendered": {
                      "text": "              match_type: strict\n              new_name: java_lang_operatingsystem_freeswapspacesize\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.system.physical.memory.total\n              match_type: strict\n              new_name: java_lang_operatingsystem_totalphysicalmemorysize\n",
                      "markdown": "`              match_type: strict\n              new_name: java_lang_operatingsystem_freeswapspacesize\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.system.physical.memory.total\n              match_type: strict\n              new_name: java_lang_operatingsystem_totalphysicalmemorysize\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/container_insights_jmx.yaml"
                },
                "region": {
                  "startLine": 338,
                  "startColumn": 21,
                  "endLine": 339,
                  "snippet": {
                    "text": "              match_type: strict\n              new_name: java_lang_operatingsystem_processcpuload\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.system.swap.space.free\n              match_type: strict\n              new_name: java_lang_operatingsystem_freeswapspacesize\n",
                    "rendered": {
                      "text": "              match_type: strict\n              new_name: java_lang_operatingsystem_processcpuload\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.system.swap.space.free\n              match_type: strict\n              new_name: java_lang_operatingsystem_freeswapspacesize\n",
                      "markdown": "`              match_type: strict\n              new_name: java_lang_operatingsystem_processcpuload\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.system.swap.space.free\n              match_type: strict\n              new_name: java_lang_operatingsystem_freeswapspacesize\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/container_insights_jmx.yaml"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 21,
                  "endLine": 333,
                  "snippet": {
                    "text": "              match_type: strict\n              new_name: java_lang_operatingsystem_systemcpuload\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.cpu.recent_utilization\n              match_type: strict\n              new_name: java_lang_operatingsystem_processcpuload\n",
                    "rendered": {
                      "text": "              match_type: strict\n              new_name: java_lang_operatingsystem_systemcpuload\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.cpu.recent_utilization\n              match_type: strict\n              new_name: java_lang_operatingsystem_processcpuload\n",
                      "markdown": "`              match_type: strict\n              new_name: java_lang_operatingsystem_systemcpuload\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.cpu.recent_utilization\n              match_type: strict\n              new_name: java_lang_operatingsystem_processcpuload\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/container_insights_jmx.yaml"
                },
                "region": {
                  "startLine": 326,
                  "startColumn": 21,
                  "endLine": 327,
                  "snippet": {
                    "text": "              match_type: strict\n              new_name: java_lang_operatingsystem_totalswapspacesize\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.system.cpu.utilization\n              match_type: strict\n              new_name: java_lang_operatingsystem_systemcpuload\n",
                    "rendered": {
                      "text": "              match_type: strict\n              new_name: java_lang_operatingsystem_totalswapspacesize\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.system.cpu.utilization\n              match_type: strict\n              new_name: java_lang_operatingsystem_systemcpuload\n",
                      "markdown": "`              match_type: strict\n              new_name: java_lang_operatingsystem_totalswapspacesize\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.system.cpu.utilization\n              match_type: strict\n              new_name: java_lang_operatingsystem_systemcpuload\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/container_insights_jmx.yaml"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 21,
                  "endLine": 321,
                  "snippet": {
                    "text": "                  new_label: pool\n                  new_value: \"\"\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.system.swap.space.total\n              match_type: strict\n              new_name: java_lang_operatingsystem_totalswapspacesize\n",
                    "rendered": {
                      "text": "                  new_label: pool\n                  new_value: \"\"\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.system.swap.space.total\n              match_type: strict\n              new_name: java_lang_operatingsystem_totalswapspacesize\n",
                      "markdown": "`                  new_label: pool\n                  new_value: \"\"\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.system.swap.space.total\n              match_type: strict\n              new_name: java_lang_operatingsystem_totalswapspacesize\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/container_insights_jmx.yaml"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 21,
                  "endLine": 307,
                  "snippet": {
                    "text": "                  new_label: area\n                  new_value: nonheap\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.memory.pool.used\n              match_type: strict\n              new_name: jvm_memory_pool_bytes_used\n",
                    "rendered": {
                      "text": "                  new_label: area\n                  new_value: nonheap\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.memory.pool.used\n              match_type: strict\n              new_name: jvm_memory_pool_bytes_used\n",
                      "markdown": "`                  new_label: area\n                  new_value: nonheap\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.memory.pool.used\n              match_type: strict\n              new_name: jvm_memory_pool_bytes_used\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/container_insights_jmx.yaml"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 21,
                  "endLine": 293,
                  "snippet": {
                    "text": "                  new_label: area\n                  new_value: heap\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.memory.nonheap.used\n              match_type: strict\n              new_name: jvm_memory_bytes_used\n",
                    "rendered": {
                      "text": "                  new_label: area\n                  new_value: heap\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.memory.nonheap.used\n              match_type: strict\n              new_name: jvm_memory_bytes_used\n",
                      "markdown": "`                  new_label: area\n                  new_value: heap\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.memory.nonheap.used\n              match_type: strict\n              new_name: jvm_memory_bytes_used\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/container_insights_jmx.yaml"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 21,
                  "endLine": 279,
                  "snippet": {
                    "text": "              match_type: strict\n              new_name: jvm_classes_loaded\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.memory.heap.used\n              match_type: strict\n              new_name: jvm_memory_bytes_used\n",
                    "rendered": {
                      "text": "              match_type: strict\n              new_name: jvm_classes_loaded\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.memory.heap.used\n              match_type: strict\n              new_name: jvm_memory_bytes_used\n",
                      "markdown": "`              match_type: strict\n              new_name: jvm_classes_loaded\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.memory.heap.used\n              match_type: strict\n              new_name: jvm_memory_bytes_used\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/container_insights_jmx.yaml"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 21,
                  "endLine": 273,
                  "snippet": {
                    "text": "                  new_label: \"\"\n                  new_value: \"\"\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.classes.loaded\n              match_type: strict\n              new_name: jvm_classes_loaded\n",
                    "rendered": {
                      "text": "                  new_label: \"\"\n                  new_value: \"\"\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.classes.loaded\n              match_type: strict\n              new_name: jvm_classes_loaded\n",
                      "markdown": "`                  new_label: \"\"\n                  new_value: \"\"\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: jvm.classes.loaded\n              match_type: strict\n              new_name: jvm_classes_loaded\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/container_insights_jmx.yaml"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 21,
                  "endLine": 252,
                  "snippet": {
                    "text": "                  new_label: \"\"\n                  new_value: \"\"\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.rejected_sessions\n              match_type: \"\"\n              new_name: \"\"\n",
                    "rendered": {
                      "text": "                  new_label: \"\"\n                  new_value: \"\"\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.rejected_sessions\n              match_type: \"\"\n              new_name: \"\"\n",
                      "markdown": "`                  new_label: \"\"\n                  new_value: \"\"\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.rejected_sessions\n              match_type: \"\"\n              new_name: \"\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/container_insights_jmx.yaml"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 21,
                  "endLine": 231,
                  "snippet": {
                    "text": "        traces: {}\n    metricstransform/containerinsightsjmx:\n        transforms:\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.sessions\n              match_type: \"\"\n              new_name: \"\"\n",
                    "rendered": {
                      "text": "        traces: {}\n    metricstransform/containerinsightsjmx:\n        transforms:\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.sessions\n              match_type: \"\"\n              new_name: \"\"\n",
                      "markdown": "`        traces: {}\n    metricstransform/containerinsightsjmx:\n        transforms:\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.sessions\n              match_type: \"\"\n              new_name: \"\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/container_insights_jmx.yaml"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 19,
                  "endLine": 79,
                  "snippet": {
                    "text": "            - dimensions:\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n              metric_name_selectors:\n                - service_number_of_running_pods\n            - dimensions:\n",
                    "rendered": {
                      "text": "            - dimensions:\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n              metric_name_selectors:\n                - service_number_of_running_pods\n            - dimensions:\n",
                      "markdown": "`            - dimensions:\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n              metric_name_selectors:\n                - service_number_of_running_pods\n            - dimensions:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/container_insights_jmx.yaml"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 19,
                  "endLine": 25,
                  "snippet": {
                    "text": "                - - ClusterName\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n              metric_name_selectors:\n                - pod_cpu_utilization\n",
                    "rendered": {
                      "text": "                - - ClusterName\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n              metric_name_selectors:\n                - pod_cpu_utilization\n",
                      "markdown": "`                - - ClusterName\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n              metric_name_selectors:\n                - pod_cpu_utilization\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/trace_config_windows.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/trace_config_windows.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/skip_log_timestamp_windows.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/skip_log_timestamp_windows.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\tmp\\\\am.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\tmp\\\\am.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\tmp\\\\am.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/statsd_config_linux.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/statsd_config_linux.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/kubernetes_on_prem_config.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/kubernetes_on_prem_config.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/no_skip_log_timestamp.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/no_skip_log_timestamp.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_over_fallback_config.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_over_fallback_config.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/log_only_config_windows.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/log_only_config_windows.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/prometheus_config_linux.yaml"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 21,
                  "endLine": 22,
                  "snippet": {
                    "text": "                - - Service\n              label_matchers:\n                - label_names:\n                    - Service\n                  regex: nginx.*\n                  separator: ;\n              metric_name_selectors:\n                - ^nginx_request_count$\n",
                    "rendered": {
                      "text": "                - - Service\n              label_matchers:\n                - label_names:\n                    - Service\n                  regex: nginx.*\n                  separator: ;\n              metric_name_selectors:\n                - ^nginx_request_count$\n",
                      "markdown": "`                - - Service\n              label_matchers:\n                - label_names:\n                    - Service\n                  regex: nginx.*\n                  separator: ;\n              metric_name_selectors:\n                - ^nginx_request_count$\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/prometheus_config_linux.yaml"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 19,
                  "endLine": 19,
                  "snippet": {
                    "text": "        max_retries: 2\n        metric_declarations:\n            - dimensions:\n                - - Service\n              label_matchers:\n                - label_names:\n                    - Service\n                  regex: nginx.*\n",
                    "rendered": {
                      "text": "        max_retries: 2\n        metric_declarations:\n            - dimensions:\n                - - Service\n              label_matchers:\n                - label_names:\n                    - Service\n                  regex: nginx.*\n",
                      "markdown": "`        max_retries: 2\n        metric_declarations:\n            - dimensions:\n                - - Service\n              label_matchers:\n                - label_names:\n                    - Service\n                  regex: nginx.*\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_container_insights_config.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_container_insights_config.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/tocwconfig_test.go"
                },
                "region": {
                  "startLine": 750,
                  "startColumn": 12,
                  "endLine": 750,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\treturn content\n}\n\nfunc checkIfEnvTranslateSucceed(t *testing.T, jsonStr string, targetOs string, expectedEnvVars map[string]string) {\n\tvar input map[string]interface{}\n\ttranslator.SetTargetPlatform(targetOs)\n\terr := json.Unmarshal([]byte(jsonStr), &input)\n",
                    "rendered": {
                      "text": "\treturn content\n}\n\nfunc checkIfEnvTranslateSucceed(t *testing.T, jsonStr string, targetOs string, expectedEnvVars map[string]string) {\n\tvar input map[string]interface{}\n\ttranslator.SetTargetPlatform(targetOs)\n\terr := json.Unmarshal([]byte(jsonStr), &input)\n",
                      "markdown": "`\treturn content\n}\n\nfunc checkIfEnvTranslateSucceed(t *testing.T, jsonStr string, targetOs string, expectedEnvVars map[string]string) {\n\tvar input map[string]interface{}\n\ttranslator.SetTargetPlatform(targetOs)\n\terr := json.Unmarshal([]byte(jsonStr), &input)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/tocwconfig_test.go"
                },
                "region": {
                  "startLine": 640,
                  "startColumn": 9,
                  "endLine": 640,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\tif expectedEnvVars != nil {\n\t\tcontent, err := os.ReadFile(jsonFilePath)\n\t\trequire.NoError(t, err)\n\t\tcheckIfEnvTranslateSucceed(t, string(content), targetPlatform, expectedEnvVars)\n\t}\n}\n\n",
                    "rendered": {
                      "text": "\tif expectedEnvVars != nil {\n\t\tcontent, err := os.ReadFile(jsonFilePath)\n\t\trequire.NoError(t, err)\n\t\tcheckIfEnvTranslateSucceed(t, string(content), targetPlatform, expectedEnvVars)\n\t}\n}\n\n",
                      "markdown": "`\tif expectedEnvVars != nil {\n\t\tcontent, err := os.ReadFile(jsonFilePath)\n\t\trequire.NoError(t, err)\n\t\tcheckIfEnvTranslateSucceed(t, string(content), targetPlatform, expectedEnvVars)\n\t}\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/tocwconfig_test.go"
                },
                "region": {
                  "startLine": 698,
                  "startColumn": 22,
                  "endLine": 698,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\tvar actual tomlConfigTemplate.TomlConfig\n\t_, decodeError2 := toml.Decode(tomlStr, &actual)\n\tassert.NoError(t, decodeError2)\n\t// This less function sort the content of string slice in alphabetical order so the\n\t// cmp.Equal method will compare the two struct with slices in them, regardless the elements within the slices\n\topt := cmpopts.SortSlices(func(x, y interface{}) bool {\n\t\treturn pretty.Sprint(x) < pretty.Sprint(y)\n",
                    "rendered": {
                      "text": "\tvar actual tomlConfigTemplate.TomlConfig\n\t_, decodeError2 := toml.Decode(tomlStr, &actual)\n\tassert.NoError(t, decodeError2)\n\t// This less function sort the content of string slice in alphabetical order so the\n\t// cmp.Equal method will compare the two struct with slices in them, regardless the elements within the slices\n\topt := cmpopts.SortSlices(func(x, y interface{}) bool {\n\t\treturn pretty.Sprint(x) < pretty.Sprint(y)\n",
                      "markdown": "`\tvar actual tomlConfigTemplate.TomlConfig\n\t_, decodeError2 := toml.Decode(tomlStr, &actual)\n\tassert.NoError(t, decodeError2)\n\t// This less function sort the content of string slice in alphabetical order so the\n\t// cmp.Equal method will compare the two struct with slices in them, regardless the elements within the slices\n\topt := cmpopts.SortSlices(func(x, y interface{}) bool {\n\t\treturn pretty.Sprint(x) < pretty.Sprint(y)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/tocwconfig_test.go"
                },
                "region": {
                  "startLine": 688,
                  "startColumn": 4,
                  "endLine": 688,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\tassert.NoError(t, err)\n\n\ttomlStr := totomlconfig.ToTomlConfig(tomlConfig)\n\tvar expect tomlConfigTemplate.TomlConfig\n\tblob, err := os.ReadFile(desiredTomlPath)\n\tassert.NoError(t, err)\n\tcontent := replaceTokens(blob, tokenReplacements...)\n",
                    "rendered": {
                      "text": "\tassert.NoError(t, err)\n\n\ttomlStr := totomlconfig.ToTomlConfig(tomlConfig)\n\tvar expect tomlConfigTemplate.TomlConfig\n\tblob, err := os.ReadFile(desiredTomlPath)\n\tassert.NoError(t, err)\n\tcontent := replaceTokens(blob, tokenReplacements...)\n",
                      "markdown": "`\tassert.NoError(t, err)\n\n\ttomlStr := totomlconfig.ToTomlConfig(tomlConfig)\n\tvar expect tomlConfigTemplate.TomlConfig\n\tblob, err := os.ReadFile(desiredTomlPath)\n\tassert.NoError(t, err)\n\tcontent := replaceTokens(blob, tokenReplacements...)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/batchprocessor/translator_test.go"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 2,
                  "endLine": 55,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t\t},\n\t\t\twantErr: errors.New(\"default force_flush_interval not defined for traces\"),\n\t\t},\n\t\t\"OverrideForceFlushIntervalMetricsSection\": {\n\t\t\ttranslator: NewTranslatorWithNameAndSection(\"test\", common.MetricsKey),\n\t\t\tinput: map[string]interface{}{\n\t\t\t\t\"metrics\": map[string]interface{}{\n",
                    "rendered": {
                      "text": "\t\t\t},\n\t\t\twantErr: errors.New(\"default force_flush_interval not defined for traces\"),\n\t\t},\n\t\t\"OverrideForceFlushIntervalMetricsSection\": {\n\t\t\ttranslator: NewTranslatorWithNameAndSection(\"test\", common.MetricsKey),\n\t\t\tinput: map[string]interface{}{\n\t\t\t\t\"metrics\": map[string]interface{}{\n",
                      "markdown": "`\t\t\t},\n\t\t\twantErr: errors.New(\"default force_flush_interval not defined for traces\"),\n\t\t},\n\t\t\"OverrideForceFlushIntervalMetricsSection\": {\n\t\t\ttranslator: NewTranslatorWithNameAndSection(\"test\", common.MetricsKey),\n\t\t\tinput: map[string]interface{}{\n\t\t\t\t\"metrics\": map[string]interface{}{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/metricstransformprocessor/metricstransform_jmx_config.yaml"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 11,
                  "endLine": 148,
                  "snippet": {
                    "text": "\n  - include: tomcat.processing_time\n    match_type: strict\n    action: update\n    new_name: catalina_globalrequestprocessor_processingtime\n\n",
                    "rendered": {
                      "text": "\n  - include: tomcat.processing_time\n    match_type: strict\n    action: update\n    new_name: catalina_globalrequestprocessor_processingtime\n\n",
                      "markdown": "`\n  - include: tomcat.processing_time\n    match_type: strict\n    action: update\n    new_name: catalina_globalrequestprocessor_processingtime\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/metricstransformprocessor/metricstransform_jmx_config.yaml"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 11,
                  "endLine": 142,
                  "snippet": {
                    "text": "\n  - include: tomcat.errors\n    match_type: strict\n    action: update\n    new_name: catalina_globalrequestprocessor_errorcount\n\n\n  - include: tomcat.processing_time\n",
                    "rendered": {
                      "text": "\n  - include: tomcat.errors\n    match_type: strict\n    action: update\n    new_name: catalina_globalrequestprocessor_errorcount\n\n\n  - include: tomcat.processing_time\n",
                      "markdown": "`\n  - include: tomcat.errors\n    match_type: strict\n    action: update\n    new_name: catalina_globalrequestprocessor_errorcount\n\n\n  - include: tomcat.processing_time\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/metricstransformprocessor/metricstransform_jmx_config.yaml"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 11,
                  "endLine": 136,
                  "snippet": {
                    "text": "\n  - include: tomcat.request_count\n    match_type: strict\n    action: update\n    new_name: catalina_globalrequestprocessor_requestcount\n\n\n  - include: tomcat.errors\n",
                    "rendered": {
                      "text": "\n  - include: tomcat.request_count\n    match_type: strict\n    action: update\n    new_name: catalina_globalrequestprocessor_requestcount\n\n\n  - include: tomcat.errors\n",
                      "markdown": "`\n  - include: tomcat.request_count\n    match_type: strict\n    action: update\n    new_name: catalina_globalrequestprocessor_requestcount\n\n\n  - include: tomcat.errors\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/metricstransformprocessor/metricstransform_jmx_config.yaml"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 11,
                  "endLine": 131,
                  "snippet": {
                    "text": "\n  - include: tomcat.traffic.sent\n    match_type: strict\n    action: update\n    new_name: catalina_globalrequestprocessor_bytessent\n\n  - include: tomcat.request_count\n    match_type: strict\n",
                    "rendered": {
                      "text": "\n  - include: tomcat.traffic.sent\n    match_type: strict\n    action: update\n    new_name: catalina_globalrequestprocessor_bytessent\n\n  - include: tomcat.request_count\n    match_type: strict\n",
                      "markdown": "`\n  - include: tomcat.traffic.sent\n    match_type: strict\n    action: update\n    new_name: catalina_globalrequestprocessor_bytessent\n\n  - include: tomcat.request_count\n    match_type: strict\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/metricstransformprocessor/metricstransform_jmx_config.yaml"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 11,
                  "endLine": 125,
                  "snippet": {
                    "text": "\n  - include: tomcat.traffic.received\n    match_type: strict\n    action: update\n    new_name: catalina_globalrequestprocessor_bytesreceived\n\n\n  - include: tomcat.traffic.sent\n",
                    "rendered": {
                      "text": "\n  - include: tomcat.traffic.received\n    match_type: strict\n    action: update\n    new_name: catalina_globalrequestprocessor_bytesreceived\n\n\n  - include: tomcat.traffic.sent\n",
                      "markdown": "`\n  - include: tomcat.traffic.received\n    match_type: strict\n    action: update\n    new_name: catalina_globalrequestprocessor_bytesreceived\n\n\n  - include: tomcat.traffic.sent\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/metricstransformprocessor/metricstransform_jmx_config.yaml"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 11,
                  "endLine": 119,
                  "snippet": {
                    "text": "\n  - include: tomcat.rejected_sessions\n    match_type: strict\n    action: update\n    new_name: catalina_manager_rejectedsessions\n\n\n  - include: tomcat.traffic.received\n",
                    "rendered": {
                      "text": "\n  - include: tomcat.rejected_sessions\n    match_type: strict\n    action: update\n    new_name: catalina_manager_rejectedsessions\n\n\n  - include: tomcat.traffic.received\n",
                      "markdown": "`\n  - include: tomcat.rejected_sessions\n    match_type: strict\n    action: update\n    new_name: catalina_manager_rejectedsessions\n\n\n  - include: tomcat.traffic.received\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/metricstransformprocessor/metricstransform_jmx_config.yaml"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 11,
                  "endLine": 113,
                  "snippet": {
                    "text": "\n  - include: tomcat.sessions\n    match_type: strict\n    action: update\n    new_name: catalina_manager_activesessions\n\n\n  - include: tomcat.rejected_sessions\n",
                    "rendered": {
                      "text": "\n  - include: tomcat.sessions\n    match_type: strict\n    action: update\n    new_name: catalina_manager_activesessions\n\n\n  - include: tomcat.rejected_sessions\n",
                      "markdown": "`\n  - include: tomcat.sessions\n    match_type: strict\n    action: update\n    new_name: catalina_manager_activesessions\n\n\n  - include: tomcat.rejected_sessions\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/metricstransformprocessor/metricstransform_jmx_config.yaml"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 11,
                  "endLine": 107,
                  "snippet": {
                    "text": "\n  - include: jvm.daemon_threads.count\n    match_type: strict\n    action: update\n    new_name: jvm_threads_daemon\n\n\n  - include: tomcat.sessions\n",
                    "rendered": {
                      "text": "\n  - include: jvm.daemon_threads.count\n    match_type: strict\n    action: update\n    new_name: jvm_threads_daemon\n\n\n  - include: tomcat.sessions\n",
                      "markdown": "`\n  - include: jvm.daemon_threads.count\n    match_type: strict\n    action: update\n    new_name: jvm_threads_daemon\n\n\n  - include: tomcat.sessions\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/metricstransformprocessor/metricstransform_jmx_config.yaml"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 11,
                  "endLine": 101,
                  "snippet": {
                    "text": "\n  - include: jvm.threads.count\n    match_type: strict\n    action: update\n    new_name: jvm_threads_current\n\n\n  - include: jvm.daemon_threads.count\n",
                    "rendered": {
                      "text": "\n  - include: jvm.threads.count\n    match_type: strict\n    action: update\n    new_name: jvm_threads_current\n\n\n  - include: jvm.daemon_threads.count\n",
                      "markdown": "`\n  - include: jvm.threads.count\n    match_type: strict\n    action: update\n    new_name: jvm_threads_current\n\n\n  - include: jvm.daemon_threads.count\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/metricstransformprocessor/metricstransform_jmx_config.yaml"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 11,
                  "endLine": 95,
                  "snippet": {
                    "text": "\n  - include: jvm.system.available.processors\n    match_type: strict\n    action: update\n    new_name: java_lang_operatingsystem_availableprocessors\n\n\n  - include: jvm.threads.count\n",
                    "rendered": {
                      "text": "\n  - include: jvm.system.available.processors\n    match_type: strict\n    action: update\n    new_name: java_lang_operatingsystem_availableprocessors\n\n\n  - include: jvm.threads.count\n",
                      "markdown": "`\n  - include: jvm.system.available.processors\n    match_type: strict\n    action: update\n    new_name: java_lang_operatingsystem_availableprocessors\n\n\n  - include: jvm.threads.count\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/metricstransformprocessor/metricstransform_jmx_config.yaml"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 11,
                  "endLine": 89,
                  "snippet": {
                    "text": "\n  - include: jvm.open_file_descriptor.count\n    match_type: strict\n    action: update\n    new_name: java_lang_operatingsystem_openfiledescriptorcount\n\n\n  - include: jvm.system.available.processors\n",
                    "rendered": {
                      "text": "\n  - include: jvm.open_file_descriptor.count\n    match_type: strict\n    action: update\n    new_name: java_lang_operatingsystem_openfiledescriptorcount\n\n\n  - include: jvm.system.available.processors\n",
                      "markdown": "`\n  - include: jvm.open_file_descriptor.count\n    match_type: strict\n    action: update\n    new_name: java_lang_operatingsystem_openfiledescriptorcount\n\n\n  - include: jvm.system.available.processors\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/metricstransformprocessor/metricstransform_jmx_config.yaml"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 11,
                  "endLine": 83,
                  "snippet": {
                    "text": "\n  - include: jvm.system.physical.memory.free\n    match_type: strict\n    action: update\n    new_name: java_lang_operatingsystem_freephysicalmemorysize\n\n\n  - include: jvm.open_file_descriptor.count\n",
                    "rendered": {
                      "text": "\n  - include: jvm.system.physical.memory.free\n    match_type: strict\n    action: update\n    new_name: java_lang_operatingsystem_freephysicalmemorysize\n\n\n  - include: jvm.open_file_descriptor.count\n",
                      "markdown": "`\n  - include: jvm.system.physical.memory.free\n    match_type: strict\n    action: update\n    new_name: java_lang_operatingsystem_freephysicalmemorysize\n\n\n  - include: jvm.open_file_descriptor.count\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/metricstransformprocessor/metricstransform_jmx_config.yaml"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 11,
                  "endLine": 77,
                  "snippet": {
                    "text": "\n  - include: jvm.system.physical.memory.total\n    match_type: strict\n    action: update\n    new_name: java_lang_operatingsystem_totalphysicalmemorysize\n\n\n  - include: jvm.system.physical.memory.free\n",
                    "rendered": {
                      "text": "\n  - include: jvm.system.physical.memory.total\n    match_type: strict\n    action: update\n    new_name: java_lang_operatingsystem_totalphysicalmemorysize\n\n\n  - include: jvm.system.physical.memory.free\n",
                      "markdown": "`\n  - include: jvm.system.physical.memory.total\n    match_type: strict\n    action: update\n    new_name: java_lang_operatingsystem_totalphysicalmemorysize\n\n\n  - include: jvm.system.physical.memory.free\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/metricstransformprocessor/metricstransform_jmx_config.yaml"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 11,
                  "endLine": 71,
                  "snippet": {
                    "text": "\n  - include: jvm.system.swap.space.free\n    match_type: strict\n    action: update\n    new_name: java_lang_operatingsystem_freeswapspacesize\n\n\n  - include: jvm.system.physical.memory.total\n",
                    "rendered": {
                      "text": "\n  - include: jvm.system.swap.space.free\n    match_type: strict\n    action: update\n    new_name: java_lang_operatingsystem_freeswapspacesize\n\n\n  - include: jvm.system.physical.memory.total\n",
                      "markdown": "`\n  - include: jvm.system.swap.space.free\n    match_type: strict\n    action: update\n    new_name: java_lang_operatingsystem_freeswapspacesize\n\n\n  - include: jvm.system.physical.memory.total\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/metricstransformprocessor/metricstransform_jmx_config.yaml"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 11,
                  "endLine": 65,
                  "snippet": {
                    "text": "\n  - include: jvm.cpu.recent_utilization\n    match_type: strict\n    action: update\n    new_name: java_lang_operatingsystem_processcpuload\n\n\n  - include: jvm.system.swap.space.free\n",
                    "rendered": {
                      "text": "\n  - include: jvm.cpu.recent_utilization\n    match_type: strict\n    action: update\n    new_name: java_lang_operatingsystem_processcpuload\n\n\n  - include: jvm.system.swap.space.free\n",
                      "markdown": "`\n  - include: jvm.cpu.recent_utilization\n    match_type: strict\n    action: update\n    new_name: java_lang_operatingsystem_processcpuload\n\n\n  - include: jvm.system.swap.space.free\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/metricstransformprocessor/metricstransform_jmx_config.yaml"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 11,
                  "endLine": 60,
                  "snippet": {
                    "text": "\n  - include: jvm.system.cpu.utilization\n    match_type: strict\n    action: update\n    new_name: java_lang_operatingsystem_systemcpuload\n\n  - include: jvm.cpu.recent_utilization\n    match_type: strict\n",
                    "rendered": {
                      "text": "\n  - include: jvm.system.cpu.utilization\n    match_type: strict\n    action: update\n    new_name: java_lang_operatingsystem_systemcpuload\n\n  - include: jvm.cpu.recent_utilization\n    match_type: strict\n",
                      "markdown": "`\n  - include: jvm.system.cpu.utilization\n    match_type: strict\n    action: update\n    new_name: java_lang_operatingsystem_systemcpuload\n\n  - include: jvm.cpu.recent_utilization\n    match_type: strict\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/metricstransformprocessor/metricstransform_jmx_config.yaml"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 11,
                  "endLine": 54,
                  "snippet": {
                    "text": "\n  - include: jvm.system.swap.space.total\n    match_type: strict\n    action: update\n    new_name: java_lang_operatingsystem_totalswapspacesize\n\n\n  - include: jvm.system.cpu.utilization\n",
                    "rendered": {
                      "text": "\n  - include: jvm.system.swap.space.total\n    match_type: strict\n    action: update\n    new_name: java_lang_operatingsystem_totalswapspacesize\n\n\n  - include: jvm.system.cpu.utilization\n",
                      "markdown": "`\n  - include: jvm.system.swap.space.total\n    match_type: strict\n    action: update\n    new_name: java_lang_operatingsystem_totalswapspacesize\n\n\n  - include: jvm.system.cpu.utilization\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/metricstransformprocessor/metricstransform_jmx_config.yaml"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 11,
                  "endLine": 45,
                  "snippet": {
                    "text": "\n  - include: jvm.memory.pool.used\n    match_type: strict\n    action: update\n    new_name: jvm_memory_pool_bytes_used\n    operations:\n      - action: update_label\n        label: name\n",
                    "rendered": {
                      "text": "\n  - include: jvm.memory.pool.used\n    match_type: strict\n    action: update\n    new_name: jvm_memory_pool_bytes_used\n    operations:\n      - action: update_label\n        label: name\n",
                      "markdown": "`\n  - include: jvm.memory.pool.used\n    match_type: strict\n    action: update\n    new_name: jvm_memory_pool_bytes_used\n    operations:\n      - action: update_label\n        label: name\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/metricstransformprocessor/metricstransform_jmx_config.yaml"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 11,
                  "endLine": 36,
                  "snippet": {
                    "text": "\n  - include: jvm.memory.nonheap.used\n    match_type: strict\n    action: update\n    new_name: jvm_memory_bytes_used\n    operations:\n      - action: add_label\n        new_label: area\n",
                    "rendered": {
                      "text": "\n  - include: jvm.memory.nonheap.used\n    match_type: strict\n    action: update\n    new_name: jvm_memory_bytes_used\n    operations:\n      - action: add_label\n        new_label: area\n",
                      "markdown": "`\n  - include: jvm.memory.nonheap.used\n    match_type: strict\n    action: update\n    new_name: jvm_memory_bytes_used\n    operations:\n      - action: add_label\n        new_label: area\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/metricstransformprocessor/metricstransform_jmx_config.yaml"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 11,
                  "endLine": 27,
                  "snippet": {
                    "text": "\n  - include: jvm.memory.heap.used\n    match_type: strict\n    action: update\n    new_name: jvm_memory_bytes_used\n    operations:\n      - action: add_label\n        new_label: area\n",
                    "rendered": {
                      "text": "\n  - include: jvm.memory.heap.used\n    match_type: strict\n    action: update\n    new_name: jvm_memory_bytes_used\n    operations:\n      - action: add_label\n        new_label: area\n",
                      "markdown": "`\n  - include: jvm.memory.heap.used\n    match_type: strict\n    action: update\n    new_name: jvm_memory_bytes_used\n    operations:\n      - action: add_label\n        new_label: area\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/metricstransformprocessor/metricstransform_jmx_config.yaml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 11,
                  "endLine": 21,
                  "snippet": {
                    "text": "\n  - include: jvm.classes.loaded\n    match_type: strict\n    action: update\n    new_name: jvm_classes_loaded\n\n\n  - include: jvm.memory.heap.used\n",
                    "rendered": {
                      "text": "\n  - include: jvm.classes.loaded\n    match_type: strict\n    action: update\n    new_name: jvm_classes_loaded\n\n\n  - include: jvm.memory.heap.used\n",
                      "markdown": "`\n  - include: jvm.classes.loaded\n    match_type: strict\n    action: update\n    new_name: jvm_classes_loaded\n\n\n  - include: jvm.memory.heap.used\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/metricstransformprocessor/metricstransform_jmx_config.yaml"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 11,
                  "endLine": 11,
                  "snippet": {
                    "text": "      - action: delete_label_value\n        label: context\n\n  - action: update\n    include: tomcat.rejected_sessions\n    operations:\n      - action: aggregate_labels\n        aggregation_type: sum\n",
                    "rendered": {
                      "text": "      - action: delete_label_value\n        label: context\n\n  - action: update\n    include: tomcat.rejected_sessions\n    operations:\n      - action: aggregate_labels\n        aggregation_type: sum\n",
                      "markdown": "`      - action: delete_label_value\n        label: context\n\n  - action: update\n    include: tomcat.rejected_sessions\n    operations:\n      - action: aggregate_labels\n        aggregation_type: sum\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/metricstransformprocessor/metricstransform_jmx_config.yaml"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 11,
                  "endLine": 3,
                  "snippet": {
                    "text": "transforms:\n  - action: update\n    include: tomcat.sessions\n    operations:\n      - action: aggregate_labels\n        aggregation_type: sum\n",
                    "rendered": {
                      "text": "transforms:\n  - action: update\n    include: tomcat.sessions\n    operations:\n      - action: aggregate_labels\n        aggregation_type: sum\n",
                      "markdown": "`transforms:\n  - action: update\n    include: tomcat.sessions\n    operations:\n      - action: aggregate_labels\n        aggregation_type: sum\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/emf_and_kubernetes_config.yaml"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 19,
                  "endLine": 201,
                  "snippet": {
                    "text": "            - dimensions:\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n              metric_name_selectors:\n                - service_number_of_running_pods\n            - dimensions:\n",
                    "rendered": {
                      "text": "            - dimensions:\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n              metric_name_selectors:\n                - service_number_of_running_pods\n            - dimensions:\n",
                      "markdown": "`            - dimensions:\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n              metric_name_selectors:\n                - service_number_of_running_pods\n            - dimensions:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/emf_and_kubernetes_config.yaml"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 19,
                  "endLine": 121,
                  "snippet": {
                    "text": "                  - PodName\n                - - ClusterName\n                  - Namespace\n                  - Service\n              metric_name_selectors:\n                - pod_cpu_reserved_capacity\n                - pod_memory_reserved_capacity\n                - pod_number_of_container_restarts\n",
                    "rendered": {
                      "text": "                  - PodName\n                - - ClusterName\n                  - Namespace\n                  - Service\n              metric_name_selectors:\n                - pod_cpu_reserved_capacity\n                - pod_memory_reserved_capacity\n                - pod_number_of_container_restarts\n",
                      "markdown": "`                  - PodName\n                - - ClusterName\n                  - Namespace\n                  - Service\n              metric_name_selectors:\n                - pod_cpu_reserved_capacity\n                - pod_memory_reserved_capacity\n                - pod_number_of_container_restarts\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/emf_and_kubernetes_config.yaml"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 19,
                  "endLine": 82,
                  "snippet": {
                    "text": "                - - ClusterName\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n                - - ClusterName\n                  - FullPodName\n",
                    "rendered": {
                      "text": "                - - ClusterName\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n                - - ClusterName\n                  - FullPodName\n",
                      "markdown": "`                - - ClusterName\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n                - - ClusterName\n                  - FullPodName\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/emf_and_kubernetes_with_gpu_config.yaml"
                },
                "region": {
                  "startLine": 1087,
                  "startColumn": 21,
                  "endLine": 1088,
                  "snippet": {
                    "text": "              new_name: neurondevice_hw_ecc_events\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: execution_latency_seconds\n              match_type: \"\"\n              new_name: neuron_execution_latency\n",
                    "rendered": {
                      "text": "              new_name: neurondevice_hw_ecc_events\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: execution_latency_seconds\n              match_type: \"\"\n              new_name: neuron_execution_latency\n",
                      "markdown": "`              new_name: neurondevice_hw_ecc_events\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: execution_latency_seconds\n              match_type: \"\"\n              new_name: neuron_execution_latency\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/emf_and_kubernetes_with_gpu_config.yaml"
                },
                "region": {
                  "startLine": 1080,
                  "startColumn": 21,
                  "endLine": 1081,
                  "snippet": {
                    "text": "              new_name: instance_info\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: hardware_ecc_events_total\n              match_type: \"\"\n              new_name: neurondevice_hw_ecc_events\n",
                    "rendered": {
                      "text": "              new_name: instance_info\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: hardware_ecc_events_total\n              match_type: \"\"\n              new_name: neurondevice_hw_ecc_events\n",
                      "markdown": "`              new_name: instance_info\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: hardware_ecc_events_total\n              match_type: \"\"\n              new_name: neurondevice_hw_ecc_events\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/emf_and_kubernetes_with_gpu_config.yaml"
                },
                "region": {
                  "startLine": 1073,
                  "startColumn": 21,
                  "endLine": 1074,
                  "snippet": {
                    "text": "                  new_label: \"\"\n                  new_value: \"\"\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: instance_info\n              match_type: \"\"\n              new_name: instance_info\n",
                    "rendered": {
                      "text": "                  new_label: \"\"\n                  new_value: \"\"\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: instance_info\n              match_type: \"\"\n              new_name: instance_info\n",
                      "markdown": "`                  new_label: \"\"\n                  new_value: \"\"\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: instance_info\n              match_type: \"\"\n              new_name: instance_info\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/emf_and_kubernetes_with_gpu_config.yaml"
                },
                "region": {
                  "startLine": 1059,
                  "startColumn": 21,
                  "endLine": 1060,
                  "snippet": {
                    "text": "              new_name: neuroncore_memory_usage_runtime_memory\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: neuroncore_utilization_ratio\n              match_type: \"\"\n              new_name: neuroncore_utilization\n",
                    "rendered": {
                      "text": "              new_name: neuroncore_memory_usage_runtime_memory\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: neuroncore_utilization_ratio\n              match_type: \"\"\n              new_name: neuroncore_utilization\n",
                      "markdown": "`              new_name: neuroncore_memory_usage_runtime_memory\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: neuroncore_utilization_ratio\n              match_type: \"\"\n              new_name: neuroncore_utilization\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/emf_and_kubernetes_with_gpu_config.yaml"
                },
                "region": {
                  "startLine": 1052,
                  "startColumn": 21,
                  "endLine": 1053,
                  "snippet": {
                    "text": "              new_name: neuron_execution_status\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: neuroncore_memory_usage_runtime_memory\n              match_type: \"\"\n              new_name: neuroncore_memory_usage_runtime_memory\n",
                    "rendered": {
                      "text": "              new_name: neuron_execution_status\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: neuroncore_memory_usage_runtime_memory\n              match_type: \"\"\n              new_name: neuroncore_memory_usage_runtime_memory\n",
                      "markdown": "`              new_name: neuron_execution_status\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: neuroncore_memory_usage_runtime_memory\n              match_type: \"\"\n              new_name: neuroncore_memory_usage_runtime_memory\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/emf_and_kubernetes_with_gpu_config.yaml"
                },
                "region": {
                  "startLine": 1045,
                  "startColumn": 21,
                  "endLine": 1046,
                  "snippet": {
                    "text": "              new_name: neuroncore_memory_usage_tensors\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: execution_status_total\n              match_type: \"\"\n              new_name: neuron_execution_status\n",
                    "rendered": {
                      "text": "              new_name: neuroncore_memory_usage_tensors\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: execution_status_total\n              match_type: \"\"\n              new_name: neuron_execution_status\n",
                      "markdown": "`              new_name: neuroncore_memory_usage_tensors\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: execution_status_total\n              match_type: \"\"\n              new_name: neuron_execution_status\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/emf_and_kubernetes_with_gpu_config.yaml"
                },
                "region": {
                  "startLine": 1038,
                  "startColumn": 21,
                  "endLine": 1039,
                  "snippet": {
                    "text": "              new_name: neuroncore_memory_usage_model_shared_scratchpad\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: neuroncore_memory_usage_tensors\n              match_type: \"\"\n              new_name: neuroncore_memory_usage_tensors\n",
                    "rendered": {
                      "text": "              new_name: neuroncore_memory_usage_model_shared_scratchpad\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: neuroncore_memory_usage_tensors\n              match_type: \"\"\n              new_name: neuroncore_memory_usage_tensors\n",
                      "markdown": "`              new_name: neuroncore_memory_usage_model_shared_scratchpad\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: neuroncore_memory_usage_tensors\n              match_type: \"\"\n              new_name: neuroncore_memory_usage_tensors\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/emf_and_kubernetes_with_gpu_config.yaml"
                },
                "region": {
                  "startLine": 1031,
                  "startColumn": 21,
                  "endLine": 1032,
                  "snippet": {
                    "text": "              new_name: neuroncore_memory_usage_model_code\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: neuroncore_memory_usage_model_shared_scratchpad\n              match_type: \"\"\n              new_name: neuroncore_memory_usage_model_shared_scratchpad\n",
                    "rendered": {
                      "text": "              new_name: neuroncore_memory_usage_model_code\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: neuroncore_memory_usage_model_shared_scratchpad\n              match_type: \"\"\n              new_name: neuroncore_memory_usage_model_shared_scratchpad\n",
                      "markdown": "`              new_name: neuroncore_memory_usage_model_code\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: neuroncore_memory_usage_model_shared_scratchpad\n              match_type: \"\"\n              new_name: neuroncore_memory_usage_model_shared_scratchpad\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/emf_and_kubernetes_with_gpu_config.yaml"
                },
                "region": {
                  "startLine": 1024,
                  "startColumn": 21,
                  "endLine": 1025,
                  "snippet": {
                    "text": "              new_name: neuroncore_memory_usage_constants\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: neuroncore_memory_usage_model_code\n              match_type: \"\"\n              new_name: neuroncore_memory_usage_model_code\n",
                    "rendered": {
                      "text": "              new_name: neuroncore_memory_usage_constants\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: neuroncore_memory_usage_model_code\n              match_type: \"\"\n              new_name: neuroncore_memory_usage_model_code\n",
                      "markdown": "`              new_name: neuroncore_memory_usage_constants\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: neuroncore_memory_usage_model_code\n              match_type: \"\"\n              new_name: neuroncore_memory_usage_model_code\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/emf_and_kubernetes_with_gpu_config.yaml"
                },
                "region": {
                  "startLine": 1017,
                  "startColumn": 21,
                  "endLine": 1018,
                  "snippet": {
                    "text": "              new_name: neurondevice_runtime_memory_used_bytes\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: neuroncore_memory_usage_constants\n              match_type: \"\"\n              new_name: neuroncore_memory_usage_constants\n",
                    "rendered": {
                      "text": "              new_name: neurondevice_runtime_memory_used_bytes\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: neuroncore_memory_usage_constants\n              match_type: \"\"\n              new_name: neuroncore_memory_usage_constants\n",
                      "markdown": "`              new_name: neurondevice_runtime_memory_used_bytes\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: neuroncore_memory_usage_constants\n              match_type: \"\"\n              new_name: neuroncore_memory_usage_constants\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/emf_and_kubernetes_with_gpu_config.yaml"
                },
                "region": {
                  "startLine": 1010,
                  "startColumn": 21,
                  "endLine": 1011,
                  "snippet": {
                    "text": "              new_name: neuron_execution_errors\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: neuron_runtime_memory_used_bytes\n              match_type: \"\"\n              new_name: neurondevice_runtime_memory_used_bytes\n",
                    "rendered": {
                      "text": "              new_name: neuron_execution_errors\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: neuron_runtime_memory_used_bytes\n              match_type: \"\"\n              new_name: neurondevice_runtime_memory_used_bytes\n",
                      "markdown": "`              new_name: neuron_execution_errors\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: neuron_runtime_memory_used_bytes\n              match_type: \"\"\n              new_name: neurondevice_runtime_memory_used_bytes\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/emf_and_kubernetes_with_gpu_config.yaml"
                },
                "region": {
                  "startLine": 1003,
                  "startColumn": 21,
                  "endLine": 1004,
                  "snippet": {
                    "text": "              new_name: neuron_hardware\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: execution_errors_total\n              match_type: \"\"\n              new_name: neuron_execution_errors\n",
                    "rendered": {
                      "text": "              new_name: neuron_hardware\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: execution_errors_total\n              match_type: \"\"\n              new_name: neuron_execution_errors\n",
                      "markdown": "`              new_name: neuron_hardware\n              operations: []\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: execution_errors_total\n              match_type: \"\"\n              new_name: neuron_execution_errors\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/emf_and_kubernetes_with_gpu_config.yaml"
                },
                "region": {
                  "startLine": 996,
                  "startColumn": 21,
                  "endLine": 997,
                  "snippet": {
                    "text": "                  new_label: \"\"\n                  new_value: \"\"\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: neuron_hardware\n              match_type: \"\"\n              new_name: neuron_hardware\n",
                    "rendered": {
                      "text": "                  new_label: \"\"\n                  new_value: \"\"\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: neuron_hardware\n              match_type: \"\"\n              new_name: neuron_hardware\n",
                      "markdown": "`                  new_label: \"\"\n                  new_value: \"\"\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: neuron_hardware\n              match_type: \"\"\n              new_name: neuron_hardware\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/emf_and_kubernetes_with_gpu_config.yaml"
                },
                "region": {
                  "startLine": 542,
                  "startColumn": 19,
                  "endLine": 543,
                  "snippet": {
                    "text": "                  - Namespace\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n                  - PodName\n                - - ClusterName\n",
                    "rendered": {
                      "text": "                  - Namespace\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n                  - PodName\n                - - ClusterName\n",
                      "markdown": "`                  - Namespace\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n                  - PodName\n                - - ClusterName\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/emf_and_kubernetes_with_gpu_config.yaml"
                },
                "region": {
                  "startLine": 464,
                  "startColumn": 19,
                  "endLine": 465,
                  "snippet": {
                    "text": "                  - Namespace\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n                  - PodName\n                - - ClusterName\n",
                    "rendered": {
                      "text": "                  - Namespace\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n                  - PodName\n                - - ClusterName\n",
                      "markdown": "`                  - Namespace\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n                  - PodName\n                - - ClusterName\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/emf_and_kubernetes_with_gpu_config.yaml"
                },
                "region": {
                  "startLine": 436,
                  "startColumn": 19,
                  "endLine": 437,
                  "snippet": {
                    "text": "                  - Namespace\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n                  - PodName\n                - - ClusterName\n",
                    "rendered": {
                      "text": "                  - Namespace\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n                  - PodName\n                - - ClusterName\n",
                      "markdown": "`                  - Namespace\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n                  - PodName\n                - - ClusterName\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/emf_and_kubernetes_with_gpu_config.yaml"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 19,
                  "endLine": 349,
                  "snippet": {
                    "text": "                  - Namespace\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n                  - PodName\n                - - ClusterName\n",
                    "rendered": {
                      "text": "                  - Namespace\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n                  - PodName\n                - - ClusterName\n",
                      "markdown": "`                  - Namespace\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n                  - PodName\n                - - ClusterName\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/emf_and_kubernetes_with_gpu_config.yaml"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 19,
                  "endLine": 208,
                  "snippet": {
                    "text": "            - dimensions:\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n              metric_name_selectors:\n                - service_number_of_running_pods\n            - dimensions:\n",
                    "rendered": {
                      "text": "            - dimensions:\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n              metric_name_selectors:\n                - service_number_of_running_pods\n            - dimensions:\n",
                      "markdown": "`            - dimensions:\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n              metric_name_selectors:\n                - service_number_of_running_pods\n            - dimensions:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/emf_and_kubernetes_with_gpu_config.yaml"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 19,
                  "endLine": 121,
                  "snippet": {
                    "text": "                  - PodName\n                - - ClusterName\n                  - Namespace\n                  - Service\n              metric_name_selectors:\n                - pod_cpu_reserved_capacity\n                - pod_memory_reserved_capacity\n                - pod_number_of_container_restarts\n",
                    "rendered": {
                      "text": "                  - PodName\n                - - ClusterName\n                  - Namespace\n                  - Service\n              metric_name_selectors:\n                - pod_cpu_reserved_capacity\n                - pod_memory_reserved_capacity\n                - pod_number_of_container_restarts\n",
                      "markdown": "`                  - PodName\n                - - ClusterName\n                  - Namespace\n                  - Service\n              metric_name_selectors:\n                - pod_cpu_reserved_capacity\n                - pod_memory_reserved_capacity\n                - pod_number_of_container_restarts\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/emf_and_kubernetes_with_gpu_config.yaml"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 19,
                  "endLine": 82,
                  "snippet": {
                    "text": "                - - ClusterName\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n                - - ClusterName\n                  - FullPodName\n",
                    "rendered": {
                      "text": "                - - ClusterName\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n                - - ClusterName\n                  - FullPodName\n",
                      "markdown": "`                - - ClusterName\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n                - - ClusterName\n                  - FullPodName\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/trace_config_linux.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/trace_config_linux.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/collectd_config_linux.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/collectd_config_linux.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_appsignals_config.yaml"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 33,
                  "endLine": 320,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                    enabled: true\n                gcp.cloud_run.job.task_index:\n                    enabled: true\n                gcp.gce.instance.hostname:\n                    enabled: false\n                gcp.gce.instance.name:\n                    enabled: false\n",
                    "rendered": {
                      "text": "                    enabled: true\n                gcp.cloud_run.job.task_index:\n                    enabled: true\n                gcp.gce.instance.hostname:\n                    enabled: false\n                gcp.gce.instance.name:\n                    enabled: false\n",
                      "markdown": "`                    enabled: true\n                gcp.cloud_run.job.task_index:\n                    enabled: true\n                gcp.gce.instance.hostname:\n                    enabled: false\n                gcp.gce.instance.name:\n                    enabled: false\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000708"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (OS Type)",
            "id": "BD000708"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_appsignals_config.yaml"
                },
                "region": {
                  "startLine": 436,
                  "startColumn": 16,
                  "endLine": 436,
                  "endColumn": 23,
                  "snippet": {
                    "text": "                    enabled: true\n                os.description:\n                    enabled: false\n                os.type:\n                    enabled: true\n        timeout: 2s\n        tls:\n",
                    "rendered": {
                      "text": "                    enabled: true\n                os.description:\n                    enabled: false\n                os.type:\n                    enabled: true\n        timeout: 2s\n        tls:\n",
                      "markdown": "`                    enabled: true\n                os.description:\n                    enabled: false\n                os.type:\n                    enabled: true\n        timeout: 2s\n        tls:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000708"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (OS Type)",
            "id": "BD000708"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_appsignals_config.yaml"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 16,
                  "endLine": 218,
                  "endColumn": 23,
                  "snippet": {
                    "text": "            resource_attributes:\n                host.name:\n                    enabled: true\n                os.type:\n                    enabled: true\n        ec2:\n            resource_attributes:\n",
                    "rendered": {
                      "text": "            resource_attributes:\n                host.name:\n                    enabled: true\n                os.type:\n                    enabled: true\n        ec2:\n            resource_attributes:\n",
                      "markdown": "`            resource_attributes:\n                host.name:\n                    enabled: true\n                os.type:\n                    enabled: true\n        ec2:\n            resource_attributes:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_appsignals_config.yaml"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 13,
                  "endLine": 212,
                  "snippet": {
                    "text": "            token_file: \"\"\n        detectors:\n            - eks\n            - env\n            - ec2\n        disable_keep_alives: false\n        docker:\n            resource_attributes:\n",
                    "rendered": {
                      "text": "            token_file: \"\"\n        detectors:\n            - eks\n            - env\n            - ec2\n        disable_keep_alives: false\n        docker:\n            resource_attributes:\n",
                      "markdown": "`            token_file: \"\"\n        detectors:\n            - eks\n            - env\n            - ec2\n        disable_keep_alives: false\n        docker:\n            resource_attributes:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_appsignals_config.yaml"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 19,
                  "endLine": 63,
                  "snippet": {
                    "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                - - RemoteService\n",
                    "rendered": {
                      "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                - - RemoteService\n",
                      "markdown": "`                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                - - RemoteService\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_appsignals_config.yaml"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 19,
                  "endLine": 58,
                  "snippet": {
                    "text": "                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n",
                    "rendered": {
                      "text": "                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n",
                      "markdown": "`                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_appsignals_config.yaml"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 19,
                  "endLine": 54,
                  "snippet": {
                    "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n",
                    "rendered": {
                      "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n",
                      "markdown": "`                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_appsignals_config.yaml"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 19,
                  "endLine": 48,
                  "snippet": {
                    "text": "                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n",
                    "rendered": {
                      "text": "                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n",
                      "markdown": "`                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_appsignals_config.yaml"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 19,
                  "endLine": 45,
                  "snippet": {
                    "text": "                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n",
                    "rendered": {
                      "text": "                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n",
                      "markdown": "`                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_appsignals_config.yaml"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 19,
                  "endLine": 40,
                  "snippet": {
                    "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n",
                    "rendered": {
                      "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n",
                      "markdown": "`                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_appsignals_config.yaml"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 19,
                  "endLine": 23,
                  "snippet": {
                    "text": "                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n                    - Telemetry.Source\n                  regex: ^(ServerSpan|LocalRootSpan)$\n",
                    "rendered": {
                      "text": "                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n                    - Telemetry.Source\n                  regex: ^(ServerSpan|LocalRootSpan)$\n",
                      "markdown": "`                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n                    - Telemetry.Source\n                  regex: ^(ServerSpan|LocalRootSpan)$\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_appsignals_config.yaml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 19,
                  "endLine": 21,
                  "snippet": {
                    "text": "            - dimensions:\n                - - Environment\n                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n",
                    "rendered": {
                      "text": "            - dimensions:\n                - - Environment\n                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n",
                      "markdown": "`            - dimensions:\n                - - Environment\n                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/otlp_metrics_config.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/otlp_metrics_config.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/prometheus_config_linux.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/prometheus_config_linux.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/standard_config_linux.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/standard_config_linux.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/delta_net_config_linux.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/delta_net_config_linux.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_ecs_config.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_ecs_config.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/standard_config_windows_with_common_config.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/standard_config_windows_with_common_config.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/windows_eventlog_only_config.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/windows_eventlog_only_config.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/basic_config_linux.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/basic_config_linux.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/container_insights_jmx.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/container_insights_jmx.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = true\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = true\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = true\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/totomlconfig/testdata/agentToml.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/totomlconfig/testdata/agentToml.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = true\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"10s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = true\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"10s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = true\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"10s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/totomlconfig/tomlConfigTemplate/tomlConfig.go"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 37,
                  "endLine": 27,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\t\tLogTarget         string\n\t\tMetricBatchSize   int  `toml:\"metric_batch_size\"`\n\t\tMetricBufferLimit int  `toml:\"metric_buffer_limit\"`\n\t\tOmitHostname      bool `toml:\"omit_hostname\"`\n\t\tPrecision         string\n\t\tQuiet             bool\n\t\tRoundInterval     bool `toml:\"round_interval\"`\n",
                    "rendered": {
                      "text": "\t\tLogTarget         string\n\t\tMetricBatchSize   int  `toml:\"metric_batch_size\"`\n\t\tMetricBufferLimit int  `toml:\"metric_buffer_limit\"`\n\t\tOmitHostname      bool `toml:\"omit_hostname\"`\n\t\tPrecision         string\n\t\tQuiet             bool\n\t\tRoundInterval     bool `toml:\"round_interval\"`\n",
                      "markdown": "`\t\tLogTarget         string\n\t\tMetricBatchSize   int  `toml:\"metric_batch_size\"`\n\t\tMetricBufferLimit int  `toml:\"metric_buffer_limit\"`\n\t\tOmitHostname      bool `toml:\"omit_hostname\"`\n\t\tPrecision         string\n\t\tQuiet             bool\n\t\tRoundInterval     bool `toml:\"round_interval\"`\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/cmdutil/translatorutil.go"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 39,
                  "endLine": 198,
                  "endColumn": 80,
                  "snippet": {
                    "text": "\n\tif len(jsonConfigMapMap) == 0 {\n\t\t// For containerized agent, try to read env variable only when json configuration file is absent\n\t\tif jsonConfigContent, ok := os.LookupEnv(config.CWConfigContent); ok && os.Getenv(config.RUN_IN_CONTAINER) == config.RUN_IN_CONTAINER_TRUE {\n\t\t\tlog.Printf(\"Reading json config from from environment variable %v.\", config.CWConfigContent)\n\t\t\tjm, err := translatorUtil.GetJsonMapFromJsonBytes([]byte(jsonConfigContent))\n\t\t\tif err != nil {\n",
                    "rendered": {
                      "text": "\n\tif len(jsonConfigMapMap) == 0 {\n\t\t// For containerized agent, try to read env variable only when json configuration file is absent\n\t\tif jsonConfigContent, ok := os.LookupEnv(config.CWConfigContent); ok && os.Getenv(config.RUN_IN_CONTAINER) == config.RUN_IN_CONTAINER_TRUE {\n\t\t\tlog.Printf(\"Reading json config from from environment variable %v.\", config.CWConfigContent)\n\t\t\tjm, err := translatorUtil.GetJsonMapFromJsonBytes([]byte(jsonConfigContent))\n\t\t\tif err != nil {\n",
                      "markdown": "`\n\tif len(jsonConfigMapMap) == 0 {\n\t\t// For containerized agent, try to read env variable only when json configuration file is absent\n\t\tif jsonConfigContent, ok := os.LookupEnv(config.CWConfigContent); ok && os.Getenv(config.RUN_IN_CONTAINER) == config.RUN_IN_CONTAINER_TRUE {\n\t\t\tlog.Printf(\"Reading json config from from environment variable %v.\", config.CWConfigContent)\n\t\t\tjm, err := translatorUtil.GetJsonMapFromJsonBytes([]byte(jsonConfigContent))\n\t\t\tif err != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/cmdutil/translatorutil.go"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 12,
                  "endLine": 44,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\tif envConfigPath == \"\" {\n\t\treturn\n\t}\n\tbytes := toenvconfig.ToEnvConfig(jsonConfigValue)\n\tif err := os.WriteFile(envConfigPath, bytes, 0644); err != nil {\n\t\tlog.Panicf(\"E! Failed to create env config. Reason: %s\", err.Error())\n\t}\n",
                    "rendered": {
                      "text": "\tif envConfigPath == \"\" {\n\t\treturn\n\t}\n\tbytes := toenvconfig.ToEnvConfig(jsonConfigValue)\n\tif err := os.WriteFile(envConfigPath, bytes, 0644); err != nil {\n\t\tlog.Panicf(\"E! Failed to create env config. Reason: %s\", err.Error())\n\t}\n",
                      "markdown": "`\tif envConfigPath == \"\" {\n\t\treturn\n\t}\n\tbytes := toenvconfig.ToEnvConfig(jsonConfigValue)\n\tif err := os.WriteFile(envConfigPath, bytes, 0644); err != nil {\n\t\tlog.Panicf(\"E! Failed to create env config. Reason: %s\", err.Error())\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/cmdutil/translatorutil.go"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 23,
                  "endLine": 40,
                  "endColumn": 42,
                  "snippet": {
                    "text": ")\n\n// TranslateJsonMapToEnvConfigFile populates env-config.json based on the input json config.\nfunc TranslateJsonMapToEnvConfigFile(jsonConfigValue map[string]interface{}, envConfigPath string) {\n\tif envConfigPath == \"\" {\n\t\treturn\n\t}\n",
                    "rendered": {
                      "text": ")\n\n// TranslateJsonMapToEnvConfigFile populates env-config.json based on the input json config.\nfunc TranslateJsonMapToEnvConfigFile(jsonConfigValue map[string]interface{}, envConfigPath string) {\n\tif envConfigPath == \"\" {\n\t\treturn\n\t}\n",
                      "markdown": "`)\n\n// TranslateJsonMapToEnvConfigFile populates env-config.json based on the input json config.\nfunc TranslateJsonMapToEnvConfigFile(jsonConfigValue map[string]interface{}, envConfigPath string) {\n\tif envConfigPath == \"\" {\n\t\treturn\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/cmdutil/translatorutil.go"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 41,
                  "endLine": 197,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\t}\n\n\tif len(jsonConfigMapMap) == 0 {\n\t\t// For containerized agent, try to read env variable only when json configuration file is absent\n\t\tif jsonConfigContent, ok := os.LookupEnv(config.CWConfigContent); ok && os.Getenv(config.RUN_IN_CONTAINER) == config.RUN_IN_CONTAINER_TRUE {\n\t\t\tlog.Printf(\"Reading json config from from environment variable %v.\", config.CWConfigContent)\n\t\t\tjm, err := translatorUtil.GetJsonMapFromJsonBytes([]byte(jsonConfigContent))\n",
                    "rendered": {
                      "text": "\t}\n\n\tif len(jsonConfigMapMap) == 0 {\n\t\t// For containerized agent, try to read env variable only when json configuration file is absent\n\t\tif jsonConfigContent, ok := os.LookupEnv(config.CWConfigContent); ok && os.Getenv(config.RUN_IN_CONTAINER) == config.RUN_IN_CONTAINER_TRUE {\n\t\t\tlog.Printf(\"Reading json config from from environment variable %v.\", config.CWConfigContent)\n\t\t\tjm, err := translatorUtil.GetJsonMapFromJsonBytes([]byte(jsonConfigContent))\n",
                      "markdown": "`\t}\n\n\tif len(jsonConfigMapMap) == 0 {\n\t\t// For containerized agent, try to read env variable only when json configuration file is absent\n\t\tif jsonConfigContent, ok := os.LookupEnv(config.CWConfigContent); ok && os.Getenv(config.RUN_IN_CONTAINER) == config.RUN_IN_CONTAINER_TRUE {\n\t\t\tlog.Printf(\"Reading json config from from environment variable %v.\", config.CWConfigContent)\n\t\t\tjm, err := translatorUtil.GetJsonMapFromJsonBytes([]byte(jsonConfigContent))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/cmdutil/translatorutil.go"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 84,
                  "endLine": 111,
                  "snippet": {
                    "text": "\nfunc GenerateMergedJsonConfigMap(ctx *context.Context) (map[string]interface{}, error) {\n\t// we use a map instead of an array here because we need to override the config value\n\t// for the append operation when the existing file name and new .tmp file name have diff\n\t// only for the \".tmp\" suffix, i.e. it is override operation even it says append.\n\tvar jsonConfigMapMap = make(map[string]map[string]interface{})\n\n\tif ctx.MultiConfig() == \"append\" || ctx.MultiConfig() == \"remove\" {\n",
                    "rendered": {
                      "text": "\nfunc GenerateMergedJsonConfigMap(ctx *context.Context) (map[string]interface{}, error) {\n\t// we use a map instead of an array here because we need to override the config value\n\t// for the append operation when the existing file name and new .tmp file name have diff\n\t// only for the \".tmp\" suffix, i.e. it is override operation even it says append.\n\tvar jsonConfigMapMap = make(map[string]map[string]interface{})\n\n\tif ctx.MultiConfig() == \"append\" || ctx.MultiConfig() == \"remove\" {\n",
                      "markdown": "`\nfunc GenerateMergedJsonConfigMap(ctx *context.Context) (map[string]interface{}, error) {\n\t// we use a map instead of an array here because we need to override the config value\n\t// for the append operation when the existing file name and new .tmp file name have diff\n\t// only for the \".tmp\" suffix, i.e. it is override operation even it says append.\n\tvar jsonConfigMapMap = make(map[string]map[string]interface{})\n\n\tif ctx.MultiConfig() == \"append\" || ctx.MultiConfig() == \"remove\" {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/cmdutil/translatorutil.go"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 33,
                  "endLine": 46,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t}\n\tbytes := toenvconfig.ToEnvConfig(jsonConfigValue)\n\tif err := os.WriteFile(envConfigPath, bytes, 0644); err != nil {\n\t\tlog.Panicf(\"E! Failed to create env config. Reason: %s\", err.Error())\n\t}\n}\n\n",
                    "rendered": {
                      "text": "\t}\n\tbytes := toenvconfig.ToEnvConfig(jsonConfigValue)\n\tif err := os.WriteFile(envConfigPath, bytes, 0644); err != nil {\n\t\tlog.Panicf(\"E! Failed to create env config. Reason: %s\", err.Error())\n\t}\n}\n\n",
                      "markdown": "`\t}\n\tbytes := toenvconfig.ToEnvConfig(jsonConfigValue)\n\tif err := os.WriteFile(envConfigPath, bytes, 0644); err != nil {\n\t\tlog.Panicf(\"E! Failed to create env config. Reason: %s\", err.Error())\n\t}\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/cmdutil/translatorutil_test.go"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 19,
                  "endLine": 28,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\tenvConfigPath := path.Join(t.TempDir(), \"env-config.json\")\n\texpectedFile := \"testdata/env-config.json\"\n\n\tTranslateJsonMapToEnvConfigFile(jsonConfigValue, envConfigPath)\n\n\tvar actualJson map[string]interface{}\n\tvar expectedJson map[string]interface{}\n",
                    "rendered": {
                      "text": "\tenvConfigPath := path.Join(t.TempDir(), \"env-config.json\")\n\texpectedFile := \"testdata/env-config.json\"\n\n\tTranslateJsonMapToEnvConfigFile(jsonConfigValue, envConfigPath)\n\n\tvar actualJson map[string]interface{}\n\tvar expectedJson map[string]interface{}\n",
                      "markdown": "`\tenvConfigPath := path.Join(t.TempDir(), \"env-config.json\")\n\texpectedFile := \"testdata/env-config.json\"\n\n\tTranslateJsonMapToEnvConfigFile(jsonConfigValue, envConfigPath)\n\n\tvar actualJson map[string]interface{}\n\tvar expectedJson map[string]interface{}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/prometheus_config_windows.yaml"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 21,
                  "endLine": 22,
                  "snippet": {
                    "text": "                - - Service\n              label_matchers:\n                - label_names:\n                    - Service\n                  regex: nginx.*\n                  separator: ;\n              metric_name_selectors:\n                - ^nginx_request_count$\n",
                    "rendered": {
                      "text": "                - - Service\n              label_matchers:\n                - label_names:\n                    - Service\n                  regex: nginx.*\n                  separator: ;\n              metric_name_selectors:\n                - ^nginx_request_count$\n",
                      "markdown": "`                - - Service\n              label_matchers:\n                - label_names:\n                    - Service\n                  regex: nginx.*\n                  separator: ;\n              metric_name_selectors:\n                - ^nginx_request_count$\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/prometheus_config_windows.yaml"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 19,
                  "endLine": 19,
                  "snippet": {
                    "text": "        max_retries: 2\n        metric_declarations:\n            - dimensions:\n                - - Service\n              label_matchers:\n                - label_names:\n                    - Service\n                  regex: nginx.*\n",
                    "rendered": {
                      "text": "        max_retries: 2\n        metric_declarations:\n            - dimensions:\n                - - Service\n              label_matchers:\n                - label_names:\n                    - Service\n                  regex: nginx.*\n",
                      "markdown": "`        max_retries: 2\n        metric_declarations:\n            - dimensions:\n                - - Service\n              label_matchers:\n                - label_names:\n                    - Service\n                  regex: nginx.*\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/ignore_append_dimensions.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/ignore_append_dimensions.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/skip_log_timestamp.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/skip_log_timestamp.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/tmp/a.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/tmp/a.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/tmp/a.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/complete_linux_config.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = true\n  precision = \"\"\n  quiet = true\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = true\n  precision = \"\"\n  quiet = true\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = true\n  precision = \"\"\n  quiet = true\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/complete_linux_config.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = true\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"10s\"\n  logfile = \"/tmp/fake/log/hotdog.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = true\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"10s\"\n  logfile = \"/tmp/fake/log/hotdog.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = true\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"10s\"\n  logfile = \"/tmp/fake/log/hotdog.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/standard_config_windows.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/standard_config_windows.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/ecsdecorator/ecsinfo.go"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 26,
                  "endLine": 185,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\nfunc (e *ecsInfo) getTasksInfo() (ecsTasksInfo *ECSTasksInfo) {\n\tecsTasksInfo = &ECSTasksInfo{}\n\tresp, err := e.httpClient.Request(e.getECSAgentTaskInfoEndpoint())\n\tif err != nil {\n\t\tlog.Printf(\"W! failing to call ecsagent taskinfo endpoint, error: %v\", err)\n\t\treturn ecsTasksInfo\n",
                    "rendered": {
                      "text": "\nfunc (e *ecsInfo) getTasksInfo() (ecsTasksInfo *ECSTasksInfo) {\n\tecsTasksInfo = &ECSTasksInfo{}\n\tresp, err := e.httpClient.Request(e.getECSAgentTaskInfoEndpoint())\n\tif err != nil {\n\t\tlog.Printf(\"W! failing to call ecsagent taskinfo endpoint, error: %v\", err)\n\t\treturn ecsTasksInfo\n",
                      "markdown": "`\nfunc (e *ecsInfo) getTasksInfo() (ecsTasksInfo *ECSTasksInfo) {\n\tecsTasksInfo = &ECSTasksInfo{}\n\tresp, err := e.httpClient.Request(e.getECSAgentTaskInfoEndpoint())\n\tif err != nil {\n\t\tlog.Printf(\"W! failing to call ecsagent taskinfo endpoint, error: %v\", err)\n\t\treturn ecsTasksInfo\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/ecsdecorator/ecsinfo.go"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 26,
                  "endLine": 169,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\nfunc (e *ecsInfo) getContainerInstanceInfo() (containerInstance *ContainerInstance) {\n\tcontainerInstance = &ContainerInstance{}\n\tresp, err := e.httpClient.Request(e.getECSAgentEndpoint())\n\tif err != nil {\n\t\tlog.Printf(\"W! failing to call ecsagent endpoint, error: %v\", err)\n\t\treturn containerInstance\n",
                    "rendered": {
                      "text": "\nfunc (e *ecsInfo) getContainerInstanceInfo() (containerInstance *ContainerInstance) {\n\tcontainerInstance = &ContainerInstance{}\n\tresp, err := e.httpClient.Request(e.getECSAgentEndpoint())\n\tif err != nil {\n\t\tlog.Printf(\"W! failing to call ecsagent endpoint, error: %v\", err)\n\t\treturn containerInstance\n",
                      "markdown": "`\nfunc (e *ecsInfo) getContainerInstanceInfo() (containerInstance *ContainerInstance) {\n\tcontainerInstance = &ContainerInstance{}\n\tresp, err := e.httpClient.Request(e.getECSAgentEndpoint())\n\tif err != nil {\n\t\tlog.Printf(\"W! failing to call ecsagent endpoint, error: %v\", err)\n\t\treturn containerInstance\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/ecsdecorator/cgroup.go"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 41,
                  "endLine": 30,
                  "endColumn": 48,
                  "snippet": {
                    "text": "func newCGroupScanner(mountConfigPath string) (c *cgroupScanner) {\n\tmp, err := getCGroupMountPoint(mountConfigPath)\n\tif err != nil {\n\t\tlog.Printf(\"D! failed to get the cgroup mount point, error: %v, fallback to /cgroup\", err)\n\t\tmp = \"/cgroup\"\n\t}\n\n",
                    "rendered": {
                      "text": "func newCGroupScanner(mountConfigPath string) (c *cgroupScanner) {\n\tmp, err := getCGroupMountPoint(mountConfigPath)\n\tif err != nil {\n\t\tlog.Printf(\"D! failed to get the cgroup mount point, error: %v, fallback to /cgroup\", err)\n\t\tmp = \"/cgroup\"\n\t}\n\n",
                      "markdown": "`func newCGroupScanner(mountConfigPath string) (c *cgroupScanner) {\n\tmp, err := getCGroupMountPoint(mountConfigPath)\n\tif err != nil {\n\t\tlog.Printf(\"D! failed to get the cgroup mount point, error: %v, fallback to /cgroup\", err)\n\t\tmp = \"/cgroup\"\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/ecsdecorator/ecsdecorator.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 33,
                  "snippet": {
                    "text": "}\n\nvar sampleConfig = `\n  ## ecs ec2 node private ip\n  host_ip = \"10.13.14.15\"\n`\n\nfunc (e *ECSDecorator) SampleConfig() string {\n",
                    "rendered": {
                      "text": "}\n\nvar sampleConfig = `\n  ## ecs ec2 node private ip\n  host_ip = \"10.13.14.15\"\n`\n\nfunc (e *ECSDecorator) SampleConfig() string {\n",
                      "markdown": "`}\n\nvar sampleConfig = `\n  ## ecs ec2 node private ip\n  host_ip = \"10.13.14.15\"\n`\n\nfunc (e *ECSDecorator) SampleConfig() string {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/ecsdecorator/ecsdecorator.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 12,
                  "endLine": 32,
                  "endColumn": 18,
                  "snippet": {
                    "text": "}\n\nvar sampleConfig = `\n  ## ecs ec2 node private ip\n  host_ip = \"10.13.14.15\"\n`\n\n",
                    "rendered": {
                      "text": "}\n\nvar sampleConfig = `\n  ## ecs ec2 node private ip\n  host_ip = \"10.13.14.15\"\n`\n\n",
                      "markdown": "`}\n\nvar sampleConfig = `\n  ## ecs ec2 node private ip\n  host_ip = \"10.13.14.15\"\n`\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/k8sdecorator/stores/podstore_test.go"
                },
                "region": {
                  "startLine": 396,
                  "startColumn": 12,
                  "endLine": 396,
                  "endColumn": 17,
                  "snippet": {
                    "text": "// k8sclient.ReplicaSetClient\nfunc (client *MockClient2) ReplicaSetToDeployment() map[string]string {\n\targs := client.Called()\n\treturn args.Get(0).(map[string]string)\n}\n\nfunc (client *MockClient2) Init() {\n",
                    "rendered": {
                      "text": "// k8sclient.ReplicaSetClient\nfunc (client *MockClient2) ReplicaSetToDeployment() map[string]string {\n\targs := client.Called()\n\treturn args.Get(0).(map[string]string)\n}\n\nfunc (client *MockClient2) Init() {\n",
                      "markdown": "`// k8sclient.ReplicaSetClient\nfunc (client *MockClient2) ReplicaSetToDeployment() map[string]string {\n\targs := client.Called()\n\treturn args.Get(0).(map[string]string)\n}\n\nfunc (client *MockClient2) Init() {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/k8sdecorator/stores/podstore_test.go"
                },
                "region": {
                  "startLine": 363,
                  "startColumn": 12,
                  "endLine": 363,
                  "endColumn": 17,
                  "snippet": {
                    "text": "// k8sclient.ReplicaSetClient\nfunc (client *MockClient) ReplicaSetToDeployment() map[string]string {\n\targs := client.Called()\n\treturn args.Get(0).(map[string]string)\n}\n\nfunc (client *MockClient) Init() {\n",
                    "rendered": {
                      "text": "// k8sclient.ReplicaSetClient\nfunc (client *MockClient) ReplicaSetToDeployment() map[string]string {\n\targs := client.Called()\n\treturn args.Get(0).(map[string]string)\n}\n\nfunc (client *MockClient) Init() {\n",
                      "markdown": "`// k8sclient.ReplicaSetClient\nfunc (client *MockClient) ReplicaSetToDeployment() map[string]string {\n\targs := client.Called()\n\treturn args.Get(0).(map[string]string)\n}\n\nfunc (client *MockClient) Init() {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/k8sdecorator/stores/podstore_test.go"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 56,
                  "endLine": 319,
                  "endColumn": 122,
                  "snippet": {
                    "text": "\taddContainerId(pod, tags, m, kubernetesBlob)\n\n\texpected := map[string]interface{}{}\n\texpected[\"docker\"] = map[string]string{\"container_id\": \"637631e2634ea92c0c1aa5d24734cfe794f09c57933026592c12acafbaf6972c\"}\n\tassert.Equal(t, expected, kubernetesBlob)\n\tassert.Equal(t, map[string]string{ContainerNamekey: \"ubuntu\"}, m.Tags())\n\n",
                    "rendered": {
                      "text": "\taddContainerId(pod, tags, m, kubernetesBlob)\n\n\texpected := map[string]interface{}{}\n\texpected[\"docker\"] = map[string]string{\"container_id\": \"637631e2634ea92c0c1aa5d24734cfe794f09c57933026592c12acafbaf6972c\"}\n\tassert.Equal(t, expected, kubernetesBlob)\n\tassert.Equal(t, map[string]string{ContainerNamekey: \"ubuntu\"}, m.Tags())\n\n",
                      "markdown": "`\taddContainerId(pod, tags, m, kubernetesBlob)\n\n\texpected := map[string]interface{}{}\n\texpected[\"docker\"] = map[string]string{\"container_id\": \"637631e2634ea92c0c1aa5d24734cfe794f09c57933026592c12acafbaf6972c\"}\n\tassert.Equal(t, expected, kubernetesBlob)\n\tassert.Equal(t, map[string]string{ContainerNamekey: \"ubuntu\"}, m.Tags())\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/k8sdecorator/stores/servicestore.go"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 38,
                  "endLine": 61,
                  "endColumn": 43,
                  "snippet": {
                    "text": "}\n\nfunc (s *ServiceStore) refresh() {\n\ts.podKeyToServiceNamesMap = k8sclient.Get().Ep.PodKeyToServiceNames()\n}\n\nfunc addServiceNameTag(metric telegraf.Metric, serviceNames []string) {\n",
                    "rendered": {
                      "text": "}\n\nfunc (s *ServiceStore) refresh() {\n\ts.podKeyToServiceNamesMap = k8sclient.Get().Ep.PodKeyToServiceNames()\n}\n\nfunc addServiceNameTag(metric telegraf.Metric, serviceNames []string) {\n",
                      "markdown": "`}\n\nfunc (s *ServiceStore) refresh() {\n\ts.podKeyToServiceNamesMap = k8sclient.Get().Ep.PodKeyToServiceNames()\n}\n\nfunc addServiceNameTag(metric telegraf.Metric, serviceNames []string) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/k8sdecorator/stores/servicestore.go"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 2,
                  "endLine": 42,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t}\n}\n\n// service info is not mandatory\nfunc (s *ServiceStore) Decorate(metric telegraf.Metric, kubernetesBlob map[string]interface{}) bool {\n\ttags := metric.Tags()\n\tif _, ok := tags[K8sPodNameKey]; ok {\n",
                    "rendered": {
                      "text": "\t}\n}\n\n// service info is not mandatory\nfunc (s *ServiceStore) Decorate(metric telegraf.Metric, kubernetesBlob map[string]interface{}) bool {\n\ttags := metric.Tags()\n\tif _, ok := tags[K8sPodNameKey]; ok {\n",
                      "markdown": "`\t}\n}\n\n// service info is not mandatory\nfunc (s *ServiceStore) Decorate(metric telegraf.Metric, kubernetesBlob map[string]interface{}) bool {\n\ttags := metric.Tags()\n\tif _, ok := tags[K8sPodNameKey]; ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/statsd/graphite/parser_test.go"
                },
                "region": {
                  "startLine": 738,
                  "startColumn": 71,
                  "endLine": 738,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\t\t[]string{\"current.* measurement.measurement.field.method.field\"}, nil)\n\tassert.NoError(t, err)\n\n\tmeasurement, _, field, err := p.ApplyTemplate(\"current.users.logged_in.ssh.total\")\n\n\tassert.Equal(t, \"current_users\", measurement)\n\n",
                    "rendered": {
                      "text": "\t\t[]string{\"current.* measurement.measurement.field.method.field\"}, nil)\n\tassert.NoError(t, err)\n\n\tmeasurement, _, field, err := p.ApplyTemplate(\"current.users.logged_in.ssh.total\")\n\n\tassert.Equal(t, \"current_users\", measurement)\n\n",
                      "markdown": "`\t\t[]string{\"current.* measurement.measurement.field.method.field\"}, nil)\n\tassert.NoError(t, err)\n\n\tmeasurement, _, field, err := p.ApplyTemplate(\"current.users.logged_in.ssh.total\")\n\n\tassert.Equal(t, \"current_users\", measurement)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/statsd/graphite/parser_test.go"
                },
                "region": {
                  "startLine": 723,
                  "startColumn": 71,
                  "endLine": 723,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\t\t[]string{\"current.* measurement.measurement.field.field\"}, nil)\n\tassert.NoError(t, err)\n\n\tmeasurement, _, field, err := p.ApplyTemplate(\"current.users.logged_in.ssh\")\n\n\tassert.Equal(t, \"current_users\", measurement)\n\n",
                    "rendered": {
                      "text": "\t\t[]string{\"current.* measurement.measurement.field.field\"}, nil)\n\tassert.NoError(t, err)\n\n\tmeasurement, _, field, err := p.ApplyTemplate(\"current.users.logged_in.ssh\")\n\n\tassert.Equal(t, \"current_users\", measurement)\n\n",
                      "markdown": "`\t\t[]string{\"current.* measurement.measurement.field.field\"}, nil)\n\tassert.NoError(t, err)\n\n\tmeasurement, _, field, err := p.ApplyTemplate(\"current.users.logged_in.ssh\")\n\n\tassert.Equal(t, \"current_users\", measurement)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/statsd/graphite/parser_test.go"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 35,
                  "endLine": 72,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\t\t\tinput:       \"server01.example.org.cpu.us-west\",\n\t\t\ttemplate:    \"hostname.hostname.hostname.measurement.region\",\n\t\t\tmeasurement: \"cpu\",\n\t\t\ttags:        map[string]string{\"hostname\": \"server01.example.org\", \"region\": \"us-west\"},\n\t\t},\n\t\t{\n\t\t\ttest: \"no metric\",\n",
                    "rendered": {
                      "text": "\t\t\tinput:       \"server01.example.org.cpu.us-west\",\n\t\t\ttemplate:    \"hostname.hostname.hostname.measurement.region\",\n\t\t\tmeasurement: \"cpu\",\n\t\t\ttags:        map[string]string{\"hostname\": \"server01.example.org\", \"region\": \"us-west\"},\n\t\t},\n\t\t{\n\t\t\ttest: \"no metric\",\n",
                      "markdown": "`\t\t\tinput:       \"server01.example.org.cpu.us-west\",\n\t\t\ttemplate:    \"hostname.hostname.hostname.measurement.region\",\n\t\t\tmeasurement: \"cpu\",\n\t\t\ttags:        map[string]string{\"hostname\": \"server01.example.org\", \"region\": \"us-west\"},\n\t\t},\n\t\t{\n\t\t\ttest: \"no metric\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/statsd/graphite/parser_test.go"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 35,
                  "endLine": 70,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\t\t{\n\t\t\ttest:        \"metric with multiple tags\",\n\t\t\tinput:       \"server01.example.org.cpu.us-west\",\n\t\t\ttemplate:    \"hostname.hostname.hostname.measurement.region\",\n\t\t\tmeasurement: \"cpu\",\n\t\t\ttags:        map[string]string{\"hostname\": \"server01.example.org\", \"region\": \"us-west\"},\n\t\t},\n",
                    "rendered": {
                      "text": "\t\t{\n\t\t\ttest:        \"metric with multiple tags\",\n\t\t\tinput:       \"server01.example.org.cpu.us-west\",\n\t\t\ttemplate:    \"hostname.hostname.hostname.measurement.region\",\n\t\t\tmeasurement: \"cpu\",\n\t\t\ttags:        map[string]string{\"hostname\": \"server01.example.org\", \"region\": \"us-west\"},\n\t\t},\n",
                      "markdown": "`\t\t{\n\t\t\ttest:        \"metric with multiple tags\",\n\t\t\tinput:       \"server01.example.org.cpu.us-west\",\n\t\t\ttemplate:    \"hostname.hostname.hostname.measurement.region\",\n\t\t\tmeasurement: \"cpu\",\n\t\t\ttags:        map[string]string{\"hostname\": \"server01.example.org\", \"region\": \"us-west\"},\n\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/statsd/graphite/parser_test.go"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 26,
                  "endLine": 70,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\t\t{\n\t\t\ttest:        \"metric with multiple tags\",\n\t\t\tinput:       \"server01.example.org.cpu.us-west\",\n\t\t\ttemplate:    \"hostname.hostname.hostname.measurement.region\",\n\t\t\tmeasurement: \"cpu\",\n\t\t\ttags:        map[string]string{\"hostname\": \"server01.example.org\", \"region\": \"us-west\"},\n\t\t},\n",
                    "rendered": {
                      "text": "\t\t{\n\t\t\ttest:        \"metric with multiple tags\",\n\t\t\tinput:       \"server01.example.org.cpu.us-west\",\n\t\t\ttemplate:    \"hostname.hostname.hostname.measurement.region\",\n\t\t\tmeasurement: \"cpu\",\n\t\t\ttags:        map[string]string{\"hostname\": \"server01.example.org\", \"region\": \"us-west\"},\n\t\t},\n",
                      "markdown": "`\t\t{\n\t\t\ttest:        \"metric with multiple tags\",\n\t\t\tinput:       \"server01.example.org.cpu.us-west\",\n\t\t\ttemplate:    \"hostname.hostname.hostname.measurement.region\",\n\t\t\tmeasurement: \"cpu\",\n\t\t\ttags:        map[string]string{\"hostname\": \"server01.example.org\", \"region\": \"us-west\"},\n\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/statsd/graphite/parser_test.go"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 17,
                  "endLine": 70,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t\t{\n\t\t\ttest:        \"metric with multiple tags\",\n\t\t\tinput:       \"server01.example.org.cpu.us-west\",\n\t\t\ttemplate:    \"hostname.hostname.hostname.measurement.region\",\n\t\t\tmeasurement: \"cpu\",\n\t\t\ttags:        map[string]string{\"hostname\": \"server01.example.org\", \"region\": \"us-west\"},\n\t\t},\n",
                    "rendered": {
                      "text": "\t\t{\n\t\t\ttest:        \"metric with multiple tags\",\n\t\t\tinput:       \"server01.example.org.cpu.us-west\",\n\t\t\ttemplate:    \"hostname.hostname.hostname.measurement.region\",\n\t\t\tmeasurement: \"cpu\",\n\t\t\ttags:        map[string]string{\"hostname\": \"server01.example.org\", \"region\": \"us-west\"},\n\t\t},\n",
                      "markdown": "`\t\t{\n\t\t\ttest:        \"metric with multiple tags\",\n\t\t\tinput:       \"server01.example.org.cpu.us-west\",\n\t\t\ttemplate:    \"hostname.hostname.hostname.measurement.region\",\n\t\t\tmeasurement: \"cpu\",\n\t\t\ttags:        map[string]string{\"hostname\": \"server01.example.org\", \"region\": \"us-west\"},\n\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/statsd/graphite/parser_test.go"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 35,
                  "endLine": 65,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\t\t\tinput:       \"cpu.us-west.server01\",\n\t\t\ttemplate:    \"measurement.region.hostname\",\n\t\t\tmeasurement: \"cpu\",\n\t\t\ttags:        map[string]string{\"hostname\": \"server01\", \"region\": \"us-west\"},\n\t\t},\n\t\t{\n\t\t\ttest:        \"metric with multiple tags\",\n",
                    "rendered": {
                      "text": "\t\t\tinput:       \"cpu.us-west.server01\",\n\t\t\ttemplate:    \"measurement.region.hostname\",\n\t\t\tmeasurement: \"cpu\",\n\t\t\ttags:        map[string]string{\"hostname\": \"server01\", \"region\": \"us-west\"},\n\t\t},\n\t\t{\n\t\t\ttest:        \"metric with multiple tags\",\n",
                      "markdown": "`\t\t\tinput:       \"cpu.us-west.server01\",\n\t\t\ttemplate:    \"measurement.region.hostname\",\n\t\t\tmeasurement: \"cpu\",\n\t\t\ttags:        map[string]string{\"hostname\": \"server01\", \"region\": \"us-west\"},\n\t\t},\n\t\t{\n\t\t\ttest:        \"metric with multiple tags\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/statsd/graphite/parser_test.go"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 36,
                  "endLine": 63,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t{\n\t\t\ttest:        \"metric with multiple series\",\n\t\t\tinput:       \"cpu.us-west.server01\",\n\t\t\ttemplate:    \"measurement.region.hostname\",\n\t\t\tmeasurement: \"cpu\",\n\t\t\ttags:        map[string]string{\"hostname\": \"server01\", \"region\": \"us-west\"},\n\t\t},\n",
                    "rendered": {
                      "text": "\t\t{\n\t\t\ttest:        \"metric with multiple series\",\n\t\t\tinput:       \"cpu.us-west.server01\",\n\t\t\ttemplate:    \"measurement.region.hostname\",\n\t\t\tmeasurement: \"cpu\",\n\t\t\ttags:        map[string]string{\"hostname\": \"server01\", \"region\": \"us-west\"},\n\t\t},\n",
                      "markdown": "`\t\t{\n\t\t\ttest:        \"metric with multiple series\",\n\t\t\tinput:       \"cpu.us-west.server01\",\n\t\t\ttemplate:    \"measurement.region.hostname\",\n\t\t\tmeasurement: \"cpu\",\n\t\t\ttags:        map[string]string{\"hostname\": \"server01\", \"region\": \"us-west\"},\n\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/statsd/graphite/parser_test.go"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 35,
                  "endLine": 58,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\t\t\tinput:       \"cpu.server01\",\n\t\t\ttemplate:    \"measurement.hostname\",\n\t\t\tmeasurement: \"cpu\",\n\t\t\ttags:        map[string]string{\"hostname\": \"server01\"},\n\t\t},\n\t\t{\n\t\t\ttest:        \"metric with multiple series\",\n",
                    "rendered": {
                      "text": "\t\t\tinput:       \"cpu.server01\",\n\t\t\ttemplate:    \"measurement.hostname\",\n\t\t\tmeasurement: \"cpu\",\n\t\t\ttags:        map[string]string{\"hostname\": \"server01\"},\n\t\t},\n\t\t{\n\t\t\ttest:        \"metric with multiple series\",\n",
                      "markdown": "`\t\t\tinput:       \"cpu.server01\",\n\t\t\ttemplate:    \"measurement.hostname\",\n\t\t\tmeasurement: \"cpu\",\n\t\t\ttags:        map[string]string{\"hostname\": \"server01\"},\n\t\t},\n\t\t{\n\t\t\ttest:        \"metric with multiple series\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/statsd/graphite/parser_test.go"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 29,
                  "endLine": 56,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\t\t{\n\t\t\ttest:        \"metric with single series\",\n\t\t\tinput:       \"cpu.server01\",\n\t\t\ttemplate:    \"measurement.hostname\",\n\t\t\tmeasurement: \"cpu\",\n\t\t\ttags:        map[string]string{\"hostname\": \"server01\"},\n\t\t},\n",
                    "rendered": {
                      "text": "\t\t{\n\t\t\ttest:        \"metric with single series\",\n\t\t\tinput:       \"cpu.server01\",\n\t\t\ttemplate:    \"measurement.hostname\",\n\t\t\tmeasurement: \"cpu\",\n\t\t\ttags:        map[string]string{\"hostname\": \"server01\"},\n\t\t},\n",
                      "markdown": "`\t\t{\n\t\t\ttest:        \"metric with single series\",\n\t\t\tinput:       \"cpu.server01\",\n\t\t\ttemplate:    \"measurement.hostname\",\n\t\t\tmeasurement: \"cpu\",\n\t\t\ttags:        map[string]string{\"hostname\": \"server01\"},\n\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/statsd/graphite/parser_test.go"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 37,
                  "endLine": 94,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\t\t\ttags:        make(map[string]string),\n\t\t},\n\t\t{\n\t\t\ttest:        \"wildcard measurement at end\",\n\t\t\tinput:       \"prod.us-west.server01.cpu.load\",\n\t\t\ttemplate:    \"env.zone.host.measurement*\",\n\t\t\tmeasurement: \"cpu.load\",\n",
                    "rendered": {
                      "text": "\t\t\ttags:        make(map[string]string),\n\t\t},\n\t\t{\n\t\t\ttest:        \"wildcard measurement at end\",\n\t\t\tinput:       \"prod.us-west.server01.cpu.load\",\n\t\t\ttemplate:    \"env.zone.host.measurement*\",\n\t\t\tmeasurement: \"cpu.load\",\n",
                      "markdown": "`\t\t\ttags:        make(map[string]string),\n\t\t},\n\t\t{\n\t\t\ttest:        \"wildcard measurement at end\",\n\t\t\tinput:       \"prod.us-west.server01.cpu.load\",\n\t\t\ttemplate:    \"env.zone.host.measurement*\",\n\t\t\tmeasurement: \"cpu.load\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/statsd/graphite/parser_test.go"
                },
                "region": {
                  "startLine": 681,
                  "startColumn": 3,
                  "endLine": 681,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\tif !ok {\n\t\tt.Error(\"Expected for template to apply a 'service' tag, but not found\")\n\t}\n\tif service != \"facebook\" {\n\t\tt.Errorf(\"Expected service='facebook' tag, got service='%s'\", service)\n\t}\n}\n",
                    "rendered": {
                      "text": "\tif !ok {\n\t\tt.Error(\"Expected for template to apply a 'service' tag, but not found\")\n\t}\n\tif service != \"facebook\" {\n\t\tt.Errorf(\"Expected service='facebook' tag, got service='%s'\", service)\n\t}\n}\n",
                      "markdown": "`\tif !ok {\n\t\tt.Error(\"Expected for template to apply a 'service' tag, but not found\")\n\t}\n\tif service != \"facebook\" {\n\t\tt.Errorf(\"Expected service='facebook' tag, got service='%s'\", service)\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/statsd/graphite/parser_test.go"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 1,
                  "endLine": 267,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\t\tmeasurement string\n\t\ttags        map[string]string\n\t\tvalue       float64\n\t\ttime        time.Time\n\t\ttemplate    string\n\t\terr         string\n\t}{\n",
                    "rendered": {
                      "text": "\t\tmeasurement string\n\t\ttags        map[string]string\n\t\tvalue       float64\n\t\ttime        time.Time\n\t\ttemplate    string\n\t\terr         string\n\t}{\n",
                      "markdown": "`\t\tmeasurement string\n\t\ttags        map[string]string\n\t\tvalue       float64\n\t\ttime        time.Time\n\t\ttemplate    string\n\t\terr         string\n\t}{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/statsd/graphite/parser_test.go"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 1,
                  "endLine": 166,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\t\tmeasurement string\n\t\ttags        map[string]string\n\t\tvalue       float64\n\t\ttime        time.Time\n\t\ttemplate    string\n\t\terr         string\n\t}{\n",
                    "rendered": {
                      "text": "\t\tmeasurement string\n\t\ttags        map[string]string\n\t\tvalue       float64\n\t\ttime        time.Time\n\t\ttemplate    string\n\t\terr         string\n\t}{\n",
                      "markdown": "`\t\tmeasurement string\n\t\ttags        map[string]string\n\t\tvalue       float64\n\t\ttime        time.Time\n\t\ttemplate    string\n\t\terr         string\n\t}{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/statsd/graphite/parser.go"
                },
                "region": {
                  "startLine": 388,
                  "startColumn": 4,
                  "endLine": 388,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n// node is an item in a sorted k-ary tree.  Each child is sorted by its value.\n// The special value of \"*\", is always last.\ntype node struct {\n\tvalue    string\n\tchildren nodes\n\ttemplate *template\n",
                    "rendered": {
                      "text": "\n// node is an item in a sorted k-ary tree.  Each child is sorted by its value.\n// The special value of \"*\", is always last.\ntype node struct {\n\tvalue    string\n\tchildren nodes\n\ttemplate *template\n",
                      "markdown": "`\n// node is an item in a sorted k-ary tree.  Each child is sorted by its value.\n// The special value of \"*\", is always last.\ntype node struct {\n\tvalue    string\n\tchildren nodes\n\ttemplate *template\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/statsd/graphite/config.go"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 49,
                  "endLine": 76,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n\t\t// Prevent duplicate filters in the config\n\t\tif _, ok := filters[filter]; ok {\n\t\t\treturn fmt.Errorf(\"duplicate filter '%s' found at position: %d\", filter, i)\n\t\t}\n\t\tfilters[filter] = struct{}{}\n\n",
                    "rendered": {
                      "text": "\n\t\t// Prevent duplicate filters in the config\n\t\tif _, ok := filters[filter]; ok {\n\t\t\treturn fmt.Errorf(\"duplicate filter '%s' found at position: %d\", filter, i)\n\t\t}\n\t\tfilters[filter] = struct{}{}\n\n",
                      "markdown": "`\n\t\t// Prevent duplicate filters in the config\n\t\tif _, ok := filters[filter]; ok {\n\t\t\treturn fmt.Errorf(\"duplicate filter '%s' found at position: %d\", filter, i)\n\t\t}\n\t\tfilters[filter] = struct{}{}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/statsd/graphite/config.go"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 38,
                  "endLine": 43,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\t\t\treturn fmt.Errorf(\"missing template at position: %d\", i)\n\t\t}\n\t\tif len(parts) == 1 && parts[0] == \"\" {\n\t\t\treturn fmt.Errorf(\"missing template at position: %d\", i)\n\t\t}\n\n\t\tif len(parts) > 3 {\n",
                    "rendered": {
                      "text": "\t\t\treturn fmt.Errorf(\"missing template at position: %d\", i)\n\t\t}\n\t\tif len(parts) == 1 && parts[0] == \"\" {\n\t\t\treturn fmt.Errorf(\"missing template at position: %d\", i)\n\t\t}\n\n\t\tif len(parts) > 3 {\n",
                      "markdown": "`\t\t\treturn fmt.Errorf(\"missing template at position: %d\", i)\n\t\t}\n\t\tif len(parts) == 1 && parts[0] == \"\" {\n\t\t\treturn fmt.Errorf(\"missing template at position: %d\", i)\n\t\t}\n\n\t\tif len(parts) > 3 {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/statsd/graphite/config.go"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 38,
                  "endLine": 40,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\t\tparts := strings.Fields(t)\n\t\t// Ensure template string is non-empty\n\t\tif len(parts) == 0 {\n\t\t\treturn fmt.Errorf(\"missing template at position: %d\", i)\n\t\t}\n\t\tif len(parts) == 1 && parts[0] == \"\" {\n\t\t\treturn fmt.Errorf(\"missing template at position: %d\", i)\n",
                    "rendered": {
                      "text": "\t\tparts := strings.Fields(t)\n\t\t// Ensure template string is non-empty\n\t\tif len(parts) == 0 {\n\t\t\treturn fmt.Errorf(\"missing template at position: %d\", i)\n\t\t}\n\t\tif len(parts) == 1 && parts[0] == \"\" {\n\t\t\treturn fmt.Errorf(\"missing template at position: %d\", i)\n",
                      "markdown": "`\t\tparts := strings.Fields(t)\n\t\t// Ensure template string is non-empty\n\t\tif len(parts) == 0 {\n\t\t\treturn fmt.Errorf(\"missing template at position: %d\", i)\n\t\t}\n\t\tif len(parts) == 1 && parts[0] == \"\" {\n\t\t\treturn fmt.Errorf(\"missing template at position: %d\", i)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/statsd/statsd.go"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 40,
                  "endLine": 137,
                  "endColumn": 49,
                  "snippet": {
                    "text": "  ## Address and port to host UDP listener on\n  service_address = \":8125\"\n\n  ## The following configuration options control when telegraf clears it's cache\n  ## of previous values. If set to false, then telegraf will only clear it's\n  ## cache when the daemon is restarted.\n  ## Reset gauges every interval (default=true)\n",
                    "rendered": {
                      "text": "  ## Address and port to host UDP listener on\n  service_address = \":8125\"\n\n  ## The following configuration options control when telegraf clears it's cache\n  ## of previous values. If set to false, then telegraf will only clear it's\n  ## cache when the daemon is restarted.\n  ## Reset gauges every interval (default=true)\n",
                      "markdown": "`  ## Address and port to host UDP listener on\n  service_address = \":8125\"\n\n  ## The following configuration options control when telegraf clears it's cache\n  ## of previous values. If set to false, then telegraf will only clear it's\n  ## cache when the daemon is restarted.\n  ## Reset gauges every interval (default=true)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/statsd/statsd.go"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 34,
                  "endLine": 234,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\tgo s.udpListen()\n\t// Start the line parser\n\tgo s.parser()\n\tlog.Printf(\"I! Started the statsd service on %s\\n\", s.ServiceAddress)\n\treturn nil\n}\n\n",
                    "rendered": {
                      "text": "\tgo s.udpListen()\n\t// Start the line parser\n\tgo s.parser()\n\tlog.Printf(\"I! Started the statsd service on %s\\n\", s.ServiceAddress)\n\treturn nil\n}\n\n",
                      "markdown": "`\tgo s.udpListen()\n\t// Start the line parser\n\tgo s.parser()\n\tlog.Printf(\"I! Started the statsd service on %s\\n\", s.ServiceAddress)\n\treturn nil\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/statsd/README.md"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 40,
                  "endLine": 11,
                  "endColumn": 49,
                  "snippet": {
                    "text": "  ## Address and port to host UDP listener on\n  service_address = \":8125\"\n\n  ## The following configuration options control when telegraf clears it's cache\n  ## of previous values. If set to false, then telegraf will only clear it's\n  ## cache when the daemon is restarted.\n  ## Reset gauges every interval (default=true)\n",
                    "rendered": {
                      "text": "  ## Address and port to host UDP listener on\n  service_address = \":8125\"\n\n  ## The following configuration options control when telegraf clears it's cache\n  ## of previous values. If set to false, then telegraf will only clear it's\n  ## cache when the daemon is restarted.\n  ## Reset gauges every interval (default=true)\n",
                      "markdown": "`  ## Address and port to host UDP listener on\n  service_address = \":8125\"\n\n  ## The following configuration options control when telegraf clears it's cache\n  ## of previous values. If set to false, then telegraf will only clear it's\n  ## cache when the daemon is restarted.\n  ## Reset gauges every interval (default=true)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/statsd/README.md"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 72,
                  "endLine": 136,
                  "snippet": {
                    "text": "        - `statsd_<name>_count`: The count is the number of timings statsd saw\n        for that stat during that interval. It is not averaged.\n        - `statsd_<name>_percentile_<P>` The `Pth` percentile is a value x such\n        that `P%` of all the values statsd saw for that stat during that time\n        period are below x. The most common value that people use for `P` is the\n        `90`, this is a great number to try to optimize.\n\n### Plugin arguments\n",
                    "rendered": {
                      "text": "        - `statsd_<name>_count`: The count is the number of timings statsd saw\n        for that stat during that interval. It is not averaged.\n        - `statsd_<name>_percentile_<P>` The `Pth` percentile is a value x such\n        that `P%` of all the values statsd saw for that stat during that time\n        period are below x. The most common value that people use for `P` is the\n        `90`, this is a great number to try to optimize.\n\n### Plugin arguments\n",
                      "markdown": "`        - `statsd_<name>_count`: The count is the number of timings statsd saw\n        for that stat during that interval. It is not averaged.\n        - `statsd_<name>_percentile_<P>` The `Pth` percentile is a value x such\n        that `P%` of all the values statsd saw for that stat during that time\n        period are below x. The most common value that people use for `P` is the\n        `90`, this is a great number to try to optimize.\n\n### Plugin arguments\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/statsd/README.md"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 60,
                  "endLine": 105,
                  "endColumn": 66,
                  "snippet": {
                    "text": "- tags: `metric_type=<gauge|set|counter|timing|histogram>`\n\nOutputted measurements will depend entirely on the measurements that the user\nsends, but here is a brief rundown of what you can expect to find from each\nmetric type:\n\n- Gauges\n",
                    "rendered": {
                      "text": "- tags: `metric_type=<gauge|set|counter|timing|histogram>`\n\nOutputted measurements will depend entirely on the measurements that the user\nsends, but here is a brief rundown of what you can expect to find from each\nmetric type:\n\n- Gauges\n",
                      "markdown": "`- tags: `metric_type=<gauge|set|counter|timing|histogram>`\n\nOutputted measurements will depend entirely on the measurements that the user\nsends, but here is a brief rundown of what you can expect to find from each\nmetric type:\n\n- Gauges\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/statsd/README.md"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 50,
                  "endLine": 105,
                  "endColumn": 58,
                  "snippet": {
                    "text": "- tags: `metric_type=<gauge|set|counter|timing|histogram>`\n\nOutputted measurements will depend entirely on the measurements that the user\nsends, but here is a brief rundown of what you can expect to find from each\nmetric type:\n\n- Gauges\n",
                    "rendered": {
                      "text": "- tags: `metric_type=<gauge|set|counter|timing|histogram>`\n\nOutputted measurements will depend entirely on the measurements that the user\nsends, but here is a brief rundown of what you can expect to find from each\nmetric type:\n\n- Gauges\n",
                      "markdown": "`- tags: `metric_type=<gauge|set|counter|timing|histogram>`\n\nOutputted measurements will depend entirely on the measurements that the user\nsends, but here is a brief rundown of what you can expect to find from each\nmetric type:\n\n- Gauges\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/statsd/README.md"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 52,
                  "endLine": 66,
                  "snippet": {
                    "text": "- Timings & Histograms\n    - `load.time:320|ms`\n    - `load.time.nanoseconds:1|h`\n    - `load.time:200|ms|@0.1` <- sampled 1/10 of the time\n\nIt is possible to omit repetitive names and merge individual stats into a\nsingle line by separating them with additional colons:\n\n",
                    "rendered": {
                      "text": "- Timings & Histograms\n    - `load.time:320|ms`\n    - `load.time.nanoseconds:1|h`\n    - `load.time:200|ms|@0.1` <- sampled 1/10 of the time\n\nIt is possible to omit repetitive names and merge individual stats into a\nsingle line by separating them with additional colons:\n\n",
                      "markdown": "`- Timings & Histograms\n    - `load.time:320|ms`\n    - `load.time.nanoseconds:1|h`\n    - `load.time:200|ms|@0.1` <- sampled 1/10 of the time\n\nIt is possible to omit repetitive names and merge individual stats into a\nsingle line by separating them with additional colons:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/statsd/README.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 8,
                  "endLine": 44,
                  "endColumn": 17,
                  "snippet": {
                    "text": "### Description\n\nThe statsd plugin is a special type of plugin which runs a backgrounded statsd\nlistener service while telegraf is running.\n\nThe format of the statsd messages was based on the format described in the\noriginal [etsy statsd](https://github.com/etsy/statsd/blob/master/docs/metric_types.md)\n",
                    "rendered": {
                      "text": "### Description\n\nThe statsd plugin is a special type of plugin which runs a backgrounded statsd\nlistener service while telegraf is running.\n\nThe format of the statsd messages was based on the format described in the\noriginal [etsy statsd](https://github.com/etsy/statsd/blob/master/docs/metric_types.md)\n",
                      "markdown": "`### Description\n\nThe statsd plugin is a special type of plugin which runs a backgrounded statsd\nlistener service while telegraf is running.\n\nThe format of the statsd messages was based on the format described in the\noriginal [etsy statsd](https://github.com/etsy/statsd/blob/master/docs/metric_types.md)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/statsd/README.md"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 10,
                  "endLine": 1,
                  "endColumn": 19,
                  "snippet": {
                    "text": "# Telegraf Service Plugin: statsd\n\n### Configuration\n\n",
                    "rendered": {
                      "text": "# Telegraf Service Plugin: statsd\n\n### Configuration\n\n",
                      "markdown": "`# Telegraf Service Plugin: statsd\n\n### Configuration\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/prometheus/metric_type_handler_test.go"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 36,
                  "endLine": 133,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\tassert.Equal(t, mCache, nil)\n\tassert.EqualError(t, err, \"unable to find a target group with job=job_unknown\")\n\n\tmCache, err = metricsTypeHandler.ms.Get(\"job1\", \"instance1\")\n\trequire.NoError(t, err)\n\texpectedMetricMetadata := scrape.MetricMetadata{\n\t\tMetric: \"m1\",\n",
                    "rendered": {
                      "text": "\tassert.Equal(t, mCache, nil)\n\tassert.EqualError(t, err, \"unable to find a target group with job=job_unknown\")\n\n\tmCache, err = metricsTypeHandler.ms.Get(\"job1\", \"instance1\")\n\trequire.NoError(t, err)\n\texpectedMetricMetadata := scrape.MetricMetadata{\n\t\tMetric: \"m1\",\n",
                      "markdown": "`\tassert.Equal(t, mCache, nil)\n\tassert.EqualError(t, err, \"unable to find a target group with job=job_unknown\")\n\n\tmCache, err = metricsTypeHandler.ms.Get(\"job1\", \"instance1\")\n\trequire.NoError(t, err)\n\texpectedMetricMetadata := scrape.MetricMetadata{\n\t\tMetric: \"m1\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/prometheus/metric_type_handler_test.go"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 37,
                  "endLine": 129,
                  "endColumn": 42,
                  "snippet": {
                    "text": "func TestMetadataServiceImpl_GetWithOriginalJobname(t *testing.T) {\n\tmetricsTypeHandler := NewMetricsTypeHandler()\n\tmetricsTypeHandler.SetScrapeManager(&mockScrapeManager{})\n\tmCache, err := metricsTypeHandler.ms.Get(\"job_unknown\", \"instance_unknown\")\n\tassert.Equal(t, mCache, nil)\n\tassert.EqualError(t, err, \"unable to find a target group with job=job_unknown\")\n\n",
                    "rendered": {
                      "text": "func TestMetadataServiceImpl_GetWithOriginalJobname(t *testing.T) {\n\tmetricsTypeHandler := NewMetricsTypeHandler()\n\tmetricsTypeHandler.SetScrapeManager(&mockScrapeManager{})\n\tmCache, err := metricsTypeHandler.ms.Get(\"job_unknown\", \"instance_unknown\")\n\tassert.Equal(t, mCache, nil)\n\tassert.EqualError(t, err, \"unable to find a target group with job=job_unknown\")\n\n",
                      "markdown": "`func TestMetadataServiceImpl_GetWithOriginalJobname(t *testing.T) {\n\tmetricsTypeHandler := NewMetricsTypeHandler()\n\tmetricsTypeHandler.SetScrapeManager(&mockScrapeManager{})\n\tmCache, err := metricsTypeHandler.ms.Get(\"job_unknown\", \"instance_unknown\")\n\tassert.Equal(t, mCache, nil)\n\tassert.EqualError(t, err, \"unable to find a target group with job=job_unknown\")\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/prometheus/metric_type_handler_test.go"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 36,
                  "endLine": 119,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\tassert.Equal(t, mCache, nil)\n\tassert.EqualError(t, err, \"unable to find a target with job=job1, and instance=instance_unknown\")\n\n\tmCache, err = metricsTypeHandler.ms.Get(\"job2_replaced\", \"instance_unknown\")\n\tassert.Equal(t, mCache, nil)\n\t// NOTE: since https://github.com/aws/amazon-cloudwatch-agent/issues/193\n\t// we no longer do the look up for relabeled job in metadataServiceImpl\n",
                    "rendered": {
                      "text": "\tassert.Equal(t, mCache, nil)\n\tassert.EqualError(t, err, \"unable to find a target with job=job1, and instance=instance_unknown\")\n\n\tmCache, err = metricsTypeHandler.ms.Get(\"job2_replaced\", \"instance_unknown\")\n\tassert.Equal(t, mCache, nil)\n\t// NOTE: since https://github.com/aws/amazon-cloudwatch-agent/issues/193\n\t// we no longer do the look up for relabeled job in metadataServiceImpl\n",
                      "markdown": "`\tassert.Equal(t, mCache, nil)\n\tassert.EqualError(t, err, \"unable to find a target with job=job1, and instance=instance_unknown\")\n\n\tmCache, err = metricsTypeHandler.ms.Get(\"job2_replaced\", \"instance_unknown\")\n\tassert.Equal(t, mCache, nil)\n\t// NOTE: since https://github.com/aws/amazon-cloudwatch-agent/issues/193\n\t// we no longer do the look up for relabeled job in metadataServiceImpl\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/prometheus/metric_type_handler_test.go"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 36,
                  "endLine": 115,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\tassert.Equal(t, mCache, nil)\n\tassert.EqualError(t, err, \"unable to find a target group with job=job_unknown\")\n\n\tmCache, err = metricsTypeHandler.ms.Get(\"job1\", \"instance_unknown\")\n\tassert.Equal(t, mCache, nil)\n\tassert.EqualError(t, err, \"unable to find a target with job=job1, and instance=instance_unknown\")\n\n",
                    "rendered": {
                      "text": "\tassert.Equal(t, mCache, nil)\n\tassert.EqualError(t, err, \"unable to find a target group with job=job_unknown\")\n\n\tmCache, err = metricsTypeHandler.ms.Get(\"job1\", \"instance_unknown\")\n\tassert.Equal(t, mCache, nil)\n\tassert.EqualError(t, err, \"unable to find a target with job=job1, and instance=instance_unknown\")\n\n",
                      "markdown": "`\tassert.Equal(t, mCache, nil)\n\tassert.EqualError(t, err, \"unable to find a target group with job=job_unknown\")\n\n\tmCache, err = metricsTypeHandler.ms.Get(\"job1\", \"instance_unknown\")\n\tassert.Equal(t, mCache, nil)\n\tassert.EqualError(t, err, \"unable to find a target with job=job1, and instance=instance_unknown\")\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/prometheus/metric_type_handler_test.go"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 37,
                  "endLine": 111,
                  "endColumn": 42,
                  "snippet": {
                    "text": "func TestMetadataServiceImpl_GetWithUnknownJobnameInstance(t *testing.T) {\n\tmetricsTypeHandler := NewMetricsTypeHandler()\n\tmetricsTypeHandler.SetScrapeManager(&mockScrapeManager{})\n\tmCache, err := metricsTypeHandler.ms.Get(\"job_unknown\", \"instance_unknown\")\n\tassert.Equal(t, mCache, nil)\n\tassert.EqualError(t, err, \"unable to find a target group with job=job_unknown\")\n\n",
                    "rendered": {
                      "text": "func TestMetadataServiceImpl_GetWithUnknownJobnameInstance(t *testing.T) {\n\tmetricsTypeHandler := NewMetricsTypeHandler()\n\tmetricsTypeHandler.SetScrapeManager(&mockScrapeManager{})\n\tmCache, err := metricsTypeHandler.ms.Get(\"job_unknown\", \"instance_unknown\")\n\tassert.Equal(t, mCache, nil)\n\tassert.EqualError(t, err, \"unable to find a target group with job=job_unknown\")\n\n",
                      "markdown": "`func TestMetadataServiceImpl_GetWithUnknownJobnameInstance(t *testing.T) {\n\tmetricsTypeHandler := NewMetricsTypeHandler()\n\tmetricsTypeHandler.SetScrapeManager(&mockScrapeManager{})\n\tmCache, err := metricsTypeHandler.ms.Get(\"job_unknown\", \"instance_unknown\")\n\tassert.Equal(t, mCache, nil)\n\tassert.EqualError(t, err, \"unable to find a target group with job=job_unknown\")\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/prometheus/metric_type_handler_test.go"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 37,
                  "endLine": 131,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\tmetricsTypeHandler.SetScrapeManager(&mockScrapeManager{})\n\tmCache, err := metricsTypeHandler.ms.Get(\"job_unknown\", \"instance_unknown\")\n\tassert.Equal(t, mCache, nil)\n\tassert.EqualError(t, err, \"unable to find a target group with job=job_unknown\")\n\n\tmCache, err = metricsTypeHandler.ms.Get(\"job1\", \"instance1\")\n\trequire.NoError(t, err)\n",
                    "rendered": {
                      "text": "\tmetricsTypeHandler.SetScrapeManager(&mockScrapeManager{})\n\tmCache, err := metricsTypeHandler.ms.Get(\"job_unknown\", \"instance_unknown\")\n\tassert.Equal(t, mCache, nil)\n\tassert.EqualError(t, err, \"unable to find a target group with job=job_unknown\")\n\n\tmCache, err = metricsTypeHandler.ms.Get(\"job1\", \"instance1\")\n\trequire.NoError(t, err)\n",
                      "markdown": "`\tmetricsTypeHandler.SetScrapeManager(&mockScrapeManager{})\n\tmCache, err := metricsTypeHandler.ms.Get(\"job_unknown\", \"instance_unknown\")\n\tassert.Equal(t, mCache, nil)\n\tassert.EqualError(t, err, \"unable to find a target group with job=job_unknown\")\n\n\tmCache, err = metricsTypeHandler.ms.Get(\"job1\", \"instance1\")\n\trequire.NoError(t, err)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/prometheus/metric_type_handler_test.go"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 37,
                  "endLine": 123,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\tassert.Equal(t, mCache, nil)\n\t// NOTE: since https://github.com/aws/amazon-cloudwatch-agent/issues/193\n\t// we no longer do the look up for relabeled job in metadataServiceImpl\n\tassert.EqualError(t, err, \"unable to find a target group with job=job2_replaced\")\n}\n\nfunc TestMetadataServiceImpl_GetWithOriginalJobname(t *testing.T) {\n",
                    "rendered": {
                      "text": "\tassert.Equal(t, mCache, nil)\n\t// NOTE: since https://github.com/aws/amazon-cloudwatch-agent/issues/193\n\t// we no longer do the look up for relabeled job in metadataServiceImpl\n\tassert.EqualError(t, err, \"unable to find a target group with job=job2_replaced\")\n}\n\nfunc TestMetadataServiceImpl_GetWithOriginalJobname(t *testing.T) {\n",
                      "markdown": "`\tassert.Equal(t, mCache, nil)\n\t// NOTE: since https://github.com/aws/amazon-cloudwatch-agent/issues/193\n\t// we no longer do the look up for relabeled job in metadataServiceImpl\n\tassert.EqualError(t, err, \"unable to find a target group with job=job2_replaced\")\n}\n\nfunc TestMetadataServiceImpl_GetWithOriginalJobname(t *testing.T) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/prometheus/metric_type_handler_test.go"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 37,
                  "endLine": 117,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n\tmCache, err = metricsTypeHandler.ms.Get(\"job1\", \"instance_unknown\")\n\tassert.Equal(t, mCache, nil)\n\tassert.EqualError(t, err, \"unable to find a target with job=job1, and instance=instance_unknown\")\n\n\tmCache, err = metricsTypeHandler.ms.Get(\"job2_replaced\", \"instance_unknown\")\n\tassert.Equal(t, mCache, nil)\n",
                    "rendered": {
                      "text": "\n\tmCache, err = metricsTypeHandler.ms.Get(\"job1\", \"instance_unknown\")\n\tassert.Equal(t, mCache, nil)\n\tassert.EqualError(t, err, \"unable to find a target with job=job1, and instance=instance_unknown\")\n\n\tmCache, err = metricsTypeHandler.ms.Get(\"job2_replaced\", \"instance_unknown\")\n\tassert.Equal(t, mCache, nil)\n",
                      "markdown": "`\n\tmCache, err = metricsTypeHandler.ms.Get(\"job1\", \"instance_unknown\")\n\tassert.Equal(t, mCache, nil)\n\tassert.EqualError(t, err, \"unable to find a target with job=job1, and instance=instance_unknown\")\n\n\tmCache, err = metricsTypeHandler.ms.Get(\"job2_replaced\", \"instance_unknown\")\n\tassert.Equal(t, mCache, nil)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/prometheus/metric_type_handler_test.go"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 37,
                  "endLine": 113,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\tmetricsTypeHandler.SetScrapeManager(&mockScrapeManager{})\n\tmCache, err := metricsTypeHandler.ms.Get(\"job_unknown\", \"instance_unknown\")\n\tassert.Equal(t, mCache, nil)\n\tassert.EqualError(t, err, \"unable to find a target group with job=job_unknown\")\n\n\tmCache, err = metricsTypeHandler.ms.Get(\"job1\", \"instance_unknown\")\n\tassert.Equal(t, mCache, nil)\n",
                    "rendered": {
                      "text": "\tmetricsTypeHandler.SetScrapeManager(&mockScrapeManager{})\n\tmCache, err := metricsTypeHandler.ms.Get(\"job_unknown\", \"instance_unknown\")\n\tassert.Equal(t, mCache, nil)\n\tassert.EqualError(t, err, \"unable to find a target group with job=job_unknown\")\n\n\tmCache, err = metricsTypeHandler.ms.Get(\"job1\", \"instance_unknown\")\n\tassert.Equal(t, mCache, nil)\n",
                      "markdown": "`\tmetricsTypeHandler.SetScrapeManager(&mockScrapeManager{})\n\tmCache, err := metricsTypeHandler.ms.Get(\"job_unknown\", \"instance_unknown\")\n\tassert.Equal(t, mCache, nil)\n\tassert.EqualError(t, err, \"unable to find a target group with job=job_unknown\")\n\n\tmCache, err = metricsTypeHandler.ms.Get(\"job1\", \"instance_unknown\")\n\tassert.Equal(t, mCache, nil)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/prometheus/metrics_receiver.go"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 29,
                  "endLine": 91,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\t\tmetricName:              metricName,\n\t\tmetricNameBeforeRelabel: ls.Get(savedScrapeNameLabel),\n\t\tjobBeforeRelabel:        ls.Get(savedScrapeJobLabel),\n\t\tinstanceBeforeRelabel:   ls.Get(savedScrapeInstanceLabel),\n\t\tmetricValue:             v,\n\t\ttimeInMS:                t,\n\t}\n",
                    "rendered": {
                      "text": "\t\tmetricName:              metricName,\n\t\tmetricNameBeforeRelabel: ls.Get(savedScrapeNameLabel),\n\t\tjobBeforeRelabel:        ls.Get(savedScrapeJobLabel),\n\t\tinstanceBeforeRelabel:   ls.Get(savedScrapeInstanceLabel),\n\t\tmetricValue:             v,\n\t\ttimeInMS:                t,\n\t}\n",
                      "markdown": "`\t\tmetricName:              metricName,\n\t\tmetricNameBeforeRelabel: ls.Get(savedScrapeNameLabel),\n\t\tjobBeforeRelabel:        ls.Get(savedScrapeJobLabel),\n\t\tinstanceBeforeRelabel:   ls.Get(savedScrapeInstanceLabel),\n\t\tmetricValue:             v,\n\t\ttimeInMS:                t,\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/prometheus/metrics_receiver.go"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 29,
                  "endLine": 90,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\tpm := &PrometheusMetric{\n\t\tmetricName:              metricName,\n\t\tmetricNameBeforeRelabel: ls.Get(savedScrapeNameLabel),\n\t\tjobBeforeRelabel:        ls.Get(savedScrapeJobLabel),\n\t\tinstanceBeforeRelabel:   ls.Get(savedScrapeInstanceLabel),\n\t\tmetricValue:             v,\n\t\ttimeInMS:                t,\n",
                    "rendered": {
                      "text": "\tpm := &PrometheusMetric{\n\t\tmetricName:              metricName,\n\t\tmetricNameBeforeRelabel: ls.Get(savedScrapeNameLabel),\n\t\tjobBeforeRelabel:        ls.Get(savedScrapeJobLabel),\n\t\tinstanceBeforeRelabel:   ls.Get(savedScrapeInstanceLabel),\n\t\tmetricValue:             v,\n\t\ttimeInMS:                t,\n",
                      "markdown": "`\tpm := &PrometheusMetric{\n\t\tmetricName:              metricName,\n\t\tmetricNameBeforeRelabel: ls.Get(savedScrapeNameLabel),\n\t\tjobBeforeRelabel:        ls.Get(savedScrapeJobLabel),\n\t\tinstanceBeforeRelabel:   ls.Get(savedScrapeInstanceLabel),\n\t\tmetricValue:             v,\n\t\ttimeInMS:                t,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/prometheus/metrics_receiver.go"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 29,
                  "endLine": 89,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n\tpm := &PrometheusMetric{\n\t\tmetricName:              metricName,\n\t\tmetricNameBeforeRelabel: ls.Get(savedScrapeNameLabel),\n\t\tjobBeforeRelabel:        ls.Get(savedScrapeJobLabel),\n\t\tinstanceBeforeRelabel:   ls.Get(savedScrapeInstanceLabel),\n\t\tmetricValue:             v,\n",
                    "rendered": {
                      "text": "\n\tpm := &PrometheusMetric{\n\t\tmetricName:              metricName,\n\t\tmetricNameBeforeRelabel: ls.Get(savedScrapeNameLabel),\n\t\tjobBeforeRelabel:        ls.Get(savedScrapeJobLabel),\n\t\tinstanceBeforeRelabel:   ls.Get(savedScrapeInstanceLabel),\n\t\tmetricValue:             v,\n",
                      "markdown": "`\n\tpm := &PrometheusMetric{\n\t\tmetricName:              metricName,\n\t\tmetricNameBeforeRelabel: ls.Get(savedScrapeNameLabel),\n\t\tjobBeforeRelabel:        ls.Get(savedScrapeJobLabel),\n\t\tinstanceBeforeRelabel:   ls.Get(savedScrapeInstanceLabel),\n\t\tmetricValue:             v,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/prometheus/metrics_receiver.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 38,
                  "endLine": 33,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\tinstanceBeforeRelabel   string\n\tmetricValue             float64\n\tmetricType              string\n\ttimeInMS                int64 // Unix time in milli-seconds\n}\n\nfunc (pm *PrometheusMetric) isValueValid() bool {\n",
                    "rendered": {
                      "text": "\tinstanceBeforeRelabel   string\n\tmetricValue             float64\n\tmetricType              string\n\ttimeInMS                int64 // Unix time in milli-seconds\n}\n\nfunc (pm *PrometheusMetric) isValueValid() bool {\n",
                      "markdown": "`\tinstanceBeforeRelabel   string\n\tmetricValue             float64\n\tmetricType              string\n\ttimeInMS                int64 // Unix time in milli-seconds\n}\n\nfunc (pm *PrometheusMetric) isValueValid() bool {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/prometheus/metrics_type_handler.go"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 38,
                  "endLine": 152,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n\tmc, err := mth.ms.Get(jobName, instanceId)\n\tif err != nil {\n\t\tlog.Printf(\"E! metricsTypeHandler.mc.Get(jobName, instanceId) error. jobName: %s  instanceId: %s: %v\", jobName, instanceId, err)\n\t\t// The Pod has been terminated when we are going to handle its Prometheus metrics in the channel\n\t\t// Drop the metrics directly\n\t\treturn result\n",
                    "rendered": {
                      "text": "\n\tmc, err := mth.ms.Get(jobName, instanceId)\n\tif err != nil {\n\t\tlog.Printf(\"E! metricsTypeHandler.mc.Get(jobName, instanceId) error. jobName: %s  instanceId: %s: %v\", jobName, instanceId, err)\n\t\t// The Pod has been terminated when we are going to handle its Prometheus metrics in the channel\n\t\t// Drop the metrics directly\n\t\treturn result\n",
                      "markdown": "`\n\tmc, err := mth.ms.Get(jobName, instanceId)\n\tif err != nil {\n\t\tlog.Printf(\"E! metricsTypeHandler.mc.Get(jobName, instanceId) error. jobName: %s  instanceId: %s: %v\", jobName, instanceId, err)\n\t\t// The Pod has been terminated when we are going to handle its Prometheus metrics in the channel\n\t\t// Drop the metrics directly\n\t\treturn result\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/prometheus/metrics_type_handler.go"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 18,
                  "endLine": 150,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\treturn nil\n\t}\n\n\tmc, err := mth.ms.Get(jobName, instanceId)\n\tif err != nil {\n\t\tlog.Printf(\"E! metricsTypeHandler.mc.Get(jobName, instanceId) error. jobName: %s  instanceId: %s: %v\", jobName, instanceId, err)\n\t\t// The Pod has been terminated when we are going to handle its Prometheus metrics in the channel\n",
                    "rendered": {
                      "text": "\t\treturn nil\n\t}\n\n\tmc, err := mth.ms.Get(jobName, instanceId)\n\tif err != nil {\n\t\tlog.Printf(\"E! metricsTypeHandler.mc.Get(jobName, instanceId) error. jobName: %s  instanceId: %s: %v\", jobName, instanceId, err)\n\t\t// The Pod has been terminated when we are going to handle its Prometheus metrics in the channel\n",
                      "markdown": "`\t\treturn nil\n\t}\n\n\tmc, err := mth.ms.Get(jobName, instanceId)\n\tif err != nil {\n\t\tlog.Printf(\"E! metricsTypeHandler.mc.Get(jobName, instanceId) error. jobName: %s  instanceId: %s: %v\", jobName, instanceId, err)\n\t\t// The Pod has been terminated when we are going to handle its Prometheus metrics in the channel\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/prometheus/metrics_type_handler.go"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 101,
                  "endLine": 92,
                  "endColumn": 106,
                  "snippet": {
                    "text": "\n\t// from the same targetGroup, instance is not going to be duplicated\n\tfor _, target := range targetGroup {\n\t\tif target.DiscoveredLabels().Get(savedScrapeInstanceLabel) == instance || target.DiscoveredLabels().Get(scrapeInstanceLabel) == instance {\n\t\t\treturn &mCache{target}, nil\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\n\t// from the same targetGroup, instance is not going to be duplicated\n\tfor _, target := range targetGroup {\n\t\tif target.DiscoveredLabels().Get(savedScrapeInstanceLabel) == instance || target.DiscoveredLabels().Get(scrapeInstanceLabel) == instance {\n\t\t\treturn &mCache{target}, nil\n\t\t}\n\t}\n",
                      "markdown": "`\n\t// from the same targetGroup, instance is not going to be duplicated\n\tfor _, target := range targetGroup {\n\t\tif target.DiscoveredLabels().Get(savedScrapeInstanceLabel) == instance || target.DiscoveredLabels().Get(scrapeInstanceLabel) == instance {\n\t\t\treturn &mCache{target}, nil\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/prometheus/metrics_type_handler.go"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 30,
                  "endLine": 92,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n\t// from the same targetGroup, instance is not going to be duplicated\n\tfor _, target := range targetGroup {\n\t\tif target.DiscoveredLabels().Get(savedScrapeInstanceLabel) == instance || target.DiscoveredLabels().Get(scrapeInstanceLabel) == instance {\n\t\t\treturn &mCache{target}, nil\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\n\t// from the same targetGroup, instance is not going to be duplicated\n\tfor _, target := range targetGroup {\n\t\tif target.DiscoveredLabels().Get(savedScrapeInstanceLabel) == instance || target.DiscoveredLabels().Get(scrapeInstanceLabel) == instance {\n\t\t\treturn &mCache{target}, nil\n\t\t}\n\t}\n",
                      "markdown": "`\n\t// from the same targetGroup, instance is not going to be duplicated\n\tfor _, target := range targetGroup {\n\t\tif target.DiscoveredLabels().Get(savedScrapeInstanceLabel) == instance || target.DiscoveredLabels().Get(scrapeInstanceLabel) == instance {\n\t\t\treturn &mCache{target}, nil\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/prometheus/metrics_type_handler.go"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 34,
                  "endLine": 96,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\t\t\treturn &mCache{target}, nil\n\t\t}\n\t}\n\treturn nil, errors.New(\"unable to find a target with job=\" + job + \", and instance=\" + instance)\n}\n\ntype ScrapeManager interface {\n",
                    "rendered": {
                      "text": "\t\t\treturn &mCache{target}, nil\n\t\t}\n\t}\n\treturn nil, errors.New(\"unable to find a target with job=\" + job + \", and instance=\" + instance)\n}\n\ntype ScrapeManager interface {\n",
                      "markdown": "`\t\t\treturn &mCache{target}, nil\n\t\t}\n\t}\n\treturn nil, errors.New(\"unable to find a target with job=\" + job + \", and instance=\" + instance)\n}\n\ntype ScrapeManager interface {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/prometheus/metrics_type_handler.go"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 35,
                  "endLine": 87,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\ttargetGroup, ok := targetGroupMap[job]\n\n\tif !ok {\n\t\treturn nil, errors.New(\"unable to find a target group with job=\" + job)\n\t}\n\n\t// from the same targetGroup, instance is not going to be duplicated\n",
                    "rendered": {
                      "text": "\ttargetGroup, ok := targetGroupMap[job]\n\n\tif !ok {\n\t\treturn nil, errors.New(\"unable to find a target group with job=\" + job)\n\t}\n\n\t// from the same targetGroup, instance is not going to be duplicated\n",
                      "markdown": "`\ttargetGroup, ok := targetGroupMap[job]\n\n\tif !ok {\n\t\treturn nil, errors.New(\"unable to find a target group with job=\" + job)\n\t}\n\n\t// from the same targetGroup, instance is not going to be duplicated\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/prometheus/delta_calculator.go"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 29,
                  "endLine": 41,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n\tcurVal := pm.metricValue\n\tcurTimeInMS := pm.timeInMS\n\tif v, ok := dc.preDataPoints.Get(metricKey); ok {\n\t\tpreDataPoint := v.(dataPoint)\n\t\tif curTimeInMS > preDataPoint.timeInMS {\n\t\t\tif curVal >= preDataPoint.value {\n",
                    "rendered": {
                      "text": "\n\tcurVal := pm.metricValue\n\tcurTimeInMS := pm.timeInMS\n\tif v, ok := dc.preDataPoints.Get(metricKey); ok {\n\t\tpreDataPoint := v.(dataPoint)\n\t\tif curTimeInMS > preDataPoint.timeInMS {\n\t\t\tif curVal >= preDataPoint.value {\n",
                      "markdown": "`\n\tcurVal := pm.metricValue\n\tcurTimeInMS := pm.timeInMS\n\tif v, ok := dc.preDataPoints.Get(metricKey); ok {\n\t\tpreDataPoint := v.(dataPoint)\n\t\tif curTimeInMS > preDataPoint.timeInMS {\n\t\t\tif curVal >= preDataPoint.value {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/prometheus/start.go"
                },
                "region": {
                  "startLine": 314,
                  "startColumn": 7,
                  "endLine": 314,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t// For saving name before relabel\n\t// - __name__ https://github.com/aws/amazon-cloudwatch-agent/issues/190\n\t// - job and instance https://github.com/aws/amazon-cloudwatch-agent/issues/193\n\tfor _, sc := range conf.ScrapeConfigs {\n\t\trelabelConfigs := []*relabel.Config{\n\t\t\t// job\n\t\t\t{\n",
                    "rendered": {
                      "text": "\t// For saving name before relabel\n\t// - __name__ https://github.com/aws/amazon-cloudwatch-agent/issues/190\n\t// - job and instance https://github.com/aws/amazon-cloudwatch-agent/issues/193\n\tfor _, sc := range conf.ScrapeConfigs {\n\t\trelabelConfigs := []*relabel.Config{\n\t\t\t// job\n\t\t\t{\n",
                      "markdown": "`\t// For saving name before relabel\n\t// - __name__ https://github.com/aws/amazon-cloudwatch-agent/issues/190\n\t// - job and instance https://github.com/aws/amazon-cloudwatch-agent/issues/193\n\tfor _, sc := range conf.ScrapeConfigs {\n\t\trelabelConfigs := []*relabel.Config{\n\t\t\t// job\n\t\t\t{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/tail/watch/polling.go"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 7,
                  "endLine": 5,
                  "snippet": {
                    "text": "// Copyright (c) 2015 HPE Software Inc. All rights reserved.\n// Copyright (c) 2013 ActiveState Software Inc. All rights reserved.\n\npackage watch\n\nimport (\n\t\"log\"\n\t\"os\"\n",
                    "rendered": {
                      "text": "// Copyright (c) 2015 HPE Software Inc. All rights reserved.\n// Copyright (c) 2013 ActiveState Software Inc. All rights reserved.\n\npackage watch\n\nimport (\n\t\"log\"\n\t\"os\"\n",
                      "markdown": "`// Copyright (c) 2015 HPE Software Inc. All rights reserved.\n// Copyright (c) 2013 ActiveState Software Inc. All rights reserved.\n\npackage watch\n\nimport (\n\t\"log\"\n\t\"os\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/tail/watch/filechanges.go"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 7,
                  "endLine": 5,
                  "snippet": {
                    "text": "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT\n\npackage watch\n\ntype FileChanges struct {\n\tModified  chan bool // Channel to get notified of modifications\n\tTruncated chan bool // Channel to get notified of truncations\n",
                    "rendered": {
                      "text": "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT\n\npackage watch\n\ntype FileChanges struct {\n\tModified  chan bool // Channel to get notified of modifications\n\tTruncated chan bool // Channel to get notified of truncations\n",
                      "markdown": "`// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT\n\npackage watch\n\ntype FileChanges struct {\n\tModified  chan bool // Channel to get notified of modifications\n\tTruncated chan bool // Channel to get notified of truncations\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/tail/watch/watch.go"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 7,
                  "endLine": 5,
                  "snippet": {
                    "text": "// Copyright (c) 2015 HPE Software Inc. All rights reserved.\n// Copyright (c) 2013 ActiveState Software Inc. All rights reserved.\n\npackage watch\n\nimport \"gopkg.in/tomb.v1\"\n\n// FileWatcher monitors file-level events.\n",
                    "rendered": {
                      "text": "// Copyright (c) 2015 HPE Software Inc. All rights reserved.\n// Copyright (c) 2013 ActiveState Software Inc. All rights reserved.\n\npackage watch\n\nimport \"gopkg.in/tomb.v1\"\n\n// FileWatcher monitors file-level events.\n",
                      "markdown": "`// Copyright (c) 2015 HPE Software Inc. All rights reserved.\n// Copyright (c) 2013 ActiveState Software Inc. All rights reserved.\n\npackage watch\n\nimport \"gopkg.in/tomb.v1\"\n\n// FileWatcher monitors file-level events.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/tail/watch/inotify_tracker.go"
                },
                "region": {
                  "startLine": 22,
                  "endLine": 22,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\tchans     map[string]chan fsnotify.Event\n\tdone      map[string]chan bool\n\twatchNums map[string]int\n\twatch     chan *watchInfo\n\tremove    chan *watchInfo\n\terror     chan error\n}\n",
                    "rendered": {
                      "text": "\tchans     map[string]chan fsnotify.Event\n\tdone      map[string]chan bool\n\twatchNums map[string]int\n\twatch     chan *watchInfo\n\tremove    chan *watchInfo\n\terror     chan error\n}\n",
                      "markdown": "`\tchans     map[string]chan fsnotify.Event\n\tdone      map[string]chan bool\n\twatchNums map[string]int\n\twatch     chan *watchInfo\n\tremove    chan *watchInfo\n\terror     chan error\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/tail/watch/inotify_tracker.go"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 7,
                  "endLine": 5,
                  "snippet": {
                    "text": "// Copyright (c) 2015 HPE Software Inc. All rights reserved.\n// Copyright (c) 2013 ActiveState Software Inc. All rights reserved.\n\npackage watch\n\nimport (\n\t\"log\"\n\t\"os\"\n",
                    "rendered": {
                      "text": "// Copyright (c) 2015 HPE Software Inc. All rights reserved.\n// Copyright (c) 2013 ActiveState Software Inc. All rights reserved.\n\npackage watch\n\nimport (\n\t\"log\"\n\t\"os\"\n",
                      "markdown": "`// Copyright (c) 2015 HPE Software Inc. All rights reserved.\n// Copyright (c) 2013 ActiveState Software Inc. All rights reserved.\n\npackage watch\n\nimport (\n\t\"log\"\n\t\"os\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/tail/watch/inotify.go"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 7,
                  "endLine": 5,
                  "snippet": {
                    "text": "// Copyright (c) 2015 HPE Software Inc. All rights reserved.\n// Copyright (c) 2013 ActiveState Software Inc. All rights reserved.\n\npackage watch\n\nimport (\n\t\"fmt\"\n\t\"log\"\n",
                    "rendered": {
                      "text": "// Copyright (c) 2015 HPE Software Inc. All rights reserved.\n// Copyright (c) 2013 ActiveState Software Inc. All rights reserved.\n\npackage watch\n\nimport (\n\t\"fmt\"\n\t\"log\"\n",
                      "markdown": "`// Copyright (c) 2015 HPE Software Inc. All rights reserved.\n// Copyright (c) 2013 ActiveState Software Inc. All rights reserved.\n\npackage watch\n\nimport (\n\t\"fmt\"\n\t\"log\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/tail/file_deleting_checker_windows.go"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 7,
                  "endLine": 8,
                  "snippet": {
                    "text": "//go:build windows\n// +build windows\n\npackage tail\n\nimport (\n\t\"syscall\"\n)\n",
                    "rendered": {
                      "text": "//go:build windows\n// +build windows\n\npackage tail\n\nimport (\n\t\"syscall\"\n)\n",
                      "markdown": "`//go:build windows\n// +build windows\n\npackage tail\n\nimport (\n\t\"syscall\"\n)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/tail/tail_test.go"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 37,
                  "endLine": 185,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\t}\n}\n\nfunc verifyTailerExited(t *testing.T, tail *Tail) {\n\tselect {\n\tcase <-tail.Dead():\n\t\tassert.Equal(t, int64(0), OpenFileCount.Load())\n",
                    "rendered": {
                      "text": "\t}\n}\n\nfunc verifyTailerExited(t *testing.T, tail *Tail) {\n\tselect {\n\tcase <-tail.Dead():\n\t\tassert.Equal(t, int64(0), OpenFileCount.Load())\n",
                      "markdown": "`\t}\n}\n\nfunc verifyTailerExited(t *testing.T, tail *Tail) {\n\tselect {\n\tcase <-tail.Dead():\n\t\tassert.Equal(t, int64(0), OpenFileCount.Load())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/tail/tail_test.go"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 50,
                  "endLine": 181,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\t}\n\n\tif tlog.errors[0] != expectedErrorMsg {\n\t\tt.Errorf(\"Incorrect error message for incomplete tail of file:\\nExpecting: %v\\nFound    : '%v'\", expectedErrorMsg, tlog.errors[0])\n\t}\n}\n\n",
                    "rendered": {
                      "text": "\t}\n\n\tif tlog.errors[0] != expectedErrorMsg {\n\t\tt.Errorf(\"Incorrect error message for incomplete tail of file:\\nExpecting: %v\\nFound    : '%v'\", expectedErrorMsg, tlog.errors[0])\n\t}\n}\n\n",
                      "markdown": "`\t}\n\n\tif tlog.errors[0] != expectedErrorMsg {\n\t\tt.Errorf(\"Incorrect error message for incomplete tail of file:\\nExpecting: %v\\nFound    : '%v'\", expectedErrorMsg, tlog.errors[0])\n\t}\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/tail/tail_test.go"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 28,
                  "endLine": 167,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\t\t\tcontinue\n\t\t}\n\t\tif !strings.HasSuffix(line.Text, \"some log line\") {\n\t\t\tt.Errorf(\"wrong line from tail found: '%v'\", line.Text)\n\t\t}\n\t}\n\t// If file was readable, then expect it to exist.\n",
                    "rendered": {
                      "text": "\t\t\tcontinue\n\t\t}\n\t\tif !strings.HasSuffix(line.Text, \"some log line\") {\n\t\t\tt.Errorf(\"wrong line from tail found: '%v'\", line.Text)\n\t\t}\n\t}\n\t// If file was readable, then expect it to exist.\n",
                      "markdown": "`\t\t\tcontinue\n\t\t}\n\t\tif !strings.HasSuffix(line.Text, \"some log line\") {\n\t\t\tt.Errorf(\"wrong line from tail found: '%v'\", line.Text)\n\t\t}\n\t}\n\t// If file was readable, then expect it to exist.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/tail/tail_test.go"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 33,
                  "endLine": 159,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\treturn tmpfile, tail, &tl\n}\n\nfunc readThreelines(t *testing.T, tail *Tail) {\n\tfor i := 0; i < 3; i++ {\n\t\tline := <-tail.Lines\n\t\tif line.Err != nil {\n",
                    "rendered": {
                      "text": "\treturn tmpfile, tail, &tl\n}\n\nfunc readThreelines(t *testing.T, tail *Tail) {\n\tfor i := 0; i < 3; i++ {\n\t\tline := <-tail.Lines\n\t\tif line.Err != nil {\n",
                      "markdown": "`\treturn tmpfile, tail, &tl\n}\n\nfunc readThreelines(t *testing.T, tail *Tail) {\n\tfor i := 0; i < 3; i++ {\n\t\tline := <-tail.Lines\n\t\tif line.Err != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/tail/tail_test.go"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 21,
                  "endLine": 152,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\t\tFollow: true,\n\t})\n\tif err != nil {\n\t\tt.Fatalf(\"failed to tail file %v: %v\", tmpfile.Name(), err)\n\t}\n\t// Cannot expect OpenFileCount to be 1 because the TailFile struct\n\t// was not created with MustExist=true, so file may not yet be opened.\n",
                    "rendered": {
                      "text": "\t\tFollow: true,\n\t})\n\tif err != nil {\n\t\tt.Fatalf(\"failed to tail file %v: %v\", tmpfile.Name(), err)\n\t}\n\t// Cannot expect OpenFileCount to be 1 because the TailFile struct\n\t// was not created with MustExist=true, so file may not yet be opened.\n",
                      "markdown": "`\t\tFollow: true,\n\t})\n\tif err != nil {\n\t\tt.Fatalf(\"failed to tail file %v: %v\", tmpfile.Name(), err)\n\t}\n\t// Cannot expect OpenFileCount to be 1 because the TailFile struct\n\t// was not created with MustExist=true, so file may not yet be opened.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/tail/tail_test.go"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 7,
                  "endLine": 5,
                  "snippet": {
                    "text": "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT\n\npackage tail\n\nimport (\n\t\"fmt\"\n\t\"log\"\n",
                    "rendered": {
                      "text": "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT\n\npackage tail\n\nimport (\n\t\"fmt\"\n\t\"log\"\n",
                      "markdown": "`// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT\n\npackage tail\n\nimport (\n\t\"fmt\"\n\t\"log\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/tail/tail_posix.go"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 7,
                  "endLine": 8,
                  "snippet": {
                    "text": "//go:build linux || darwin || freebsd || netbsd || openbsd\n// +build linux darwin freebsd netbsd openbsd\n\npackage tail\n\nimport (\n\t\"os\"\n)\n",
                    "rendered": {
                      "text": "//go:build linux || darwin || freebsd || netbsd || openbsd\n// +build linux darwin freebsd netbsd openbsd\n\npackage tail\n\nimport (\n\t\"os\"\n)\n",
                      "markdown": "`//go:build linux || darwin || freebsd || netbsd || openbsd\n// +build linux darwin freebsd netbsd openbsd\n\npackage tail\n\nimport (\n\t\"os\"\n)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/tail/tail_windows.go"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 7,
                  "endLine": 8,
                  "snippet": {
                    "text": "//go:build windows\n// +build windows\n\npackage tail\n\nimport (\n\t\"os\"\n\n",
                    "rendered": {
                      "text": "//go:build windows\n// +build windows\n\npackage tail\n\nimport (\n\t\"os\"\n\n",
                      "markdown": "`//go:build windows\n// +build windows\n\npackage tail\n\nimport (\n\t\"os\"\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/tail/CHANGES.md"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 5,
                  "endLine": 22,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n## July, 2014\n\n* Fix tail for Windows (PR #36)\n\n## May, 2014\n\n",
                    "rendered": {
                      "text": "\n## July, 2014\n\n* Fix tail for Windows (PR #36)\n\n## May, 2014\n\n",
                      "markdown": "`\n## July, 2014\n\n* Fix tail for Windows (PR #36)\n\n## May, 2014\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/tail/file_deleting_checker.go"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 7,
                  "endLine": 8,
                  "snippet": {
                    "text": "//go:build linux || darwin\n// +build linux darwin\n\npackage tail\n\nimport (\n\t\"syscall\"\n)\n",
                    "rendered": {
                      "text": "//go:build linux || darwin\n// +build linux darwin\n\npackage tail\n\nimport (\n\t\"syscall\"\n)\n",
                      "markdown": "`//go:build linux || darwin\n// +build linux darwin\n\npackage tail\n\nimport (\n\t\"syscall\"\n)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/tail/tail.go"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 41,
                  "endLine": 173,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\ttail.Kill(errStopAtEOF)\n}\n\nvar errStopAtEOF = errors.New(\"tail: stop at eof\")\n\nfunc (tail *Tail) close() {\n\tif tail.dropCnt > 0 {\n",
                    "rendered": {
                      "text": "\ttail.Kill(errStopAtEOF)\n}\n\nvar errStopAtEOF = errors.New(\"tail: stop at eof\")\n\nfunc (tail *Tail) close() {\n\tif tail.dropCnt > 0 {\n",
                      "markdown": "`\ttail.Kill(errStopAtEOF)\n}\n\nvar errStopAtEOF = errors.New(\"tail: stop at eof\")\n\nfunc (tail *Tail) close() {\n\tif tail.dropCnt > 0 {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/tail/tail.go"
                },
                "region": {
                  "startLine": 463,
                  "startColumn": 30,
                  "endLine": 463,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\t\t\ttail.openReader()\n\t\t\treturn nil\n\t\t} else {\n\t\t\ttail.Logger.Warnf(\"Stopping tail as file no longer exists: %s\", tail.Filename)\n\t\t\treturn ErrDeletedNotReOpen\n\t\t}\n\tcase <-tail.changes.Truncated:\n",
                    "rendered": {
                      "text": "\t\t\ttail.openReader()\n\t\t\treturn nil\n\t\t} else {\n\t\t\ttail.Logger.Warnf(\"Stopping tail as file no longer exists: %s\", tail.Filename)\n\t\t\treturn ErrDeletedNotReOpen\n\t\t}\n\tcase <-tail.changes.Truncated:\n",
                      "markdown": "`\t\t\ttail.openReader()\n\t\t\treturn nil\n\t\t} else {\n\t\t\ttail.Logger.Warnf(\"Stopping tail as file no longer exists: %s\", tail.Filename)\n\t\t\treturn ErrDeletedNotReOpen\n\t\t}\n\tcase <-tail.changes.Truncated:\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/tail/tail.go"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 50,
                  "endLine": 177,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\nfunc (tail *Tail) close() {\n\tif tail.dropCnt > 0 {\n\t\ttail.Logger.Errorf(\"Dropped %v lines for stopped tail for file %v\", tail.dropCnt, tail.Filename)\n\t}\n\tclose(tail.Lines)\n\ttail.closeFile()\n",
                    "rendered": {
                      "text": "\nfunc (tail *Tail) close() {\n\tif tail.dropCnt > 0 {\n\t\ttail.Logger.Errorf(\"Dropped %v lines for stopped tail for file %v\", tail.dropCnt, tail.Filename)\n\t}\n\tclose(tail.Lines)\n\ttail.closeFile()\n",
                      "markdown": "`\nfunc (tail *Tail) close() {\n\tif tail.dropCnt > 0 {\n\t\ttail.Logger.Errorf(\"Dropped %v lines for stopped tail for file %v\", tail.dropCnt, tail.Filename)\n\t}\n\tclose(tail.Lines)\n\ttail.closeFile()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/tail/tail.go"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 4,
                  "endLine": 73,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\tIsUTF16 bool\n}\n\ntype Tail struct {\n\tFilename string\n\tLines    chan *Line\n\tConfig\n",
                    "rendered": {
                      "text": "\tIsUTF16 bool\n}\n\ntype Tail struct {\n\tFilename string\n\tLines    chan *Line\n\tConfig\n",
                      "markdown": "`\tIsUTF16 bool\n}\n\ntype Tail struct {\n\tFilename string\n\tLines    chan *Line\n\tConfig\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/tail/tail.go"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 27,
                  "endLine": 35,
                  "snippet": {
                    "text": "type Line struct {\n\tText   string\n\tTime   time.Time\n\tErr    error // Error from tail\n\tOffset int64 // offset of current reader\n}\n\n// NewLine returns a Line with present time.\n",
                    "rendered": {
                      "text": "type Line struct {\n\tText   string\n\tTime   time.Time\n\tErr    error // Error from tail\n\tOffset int64 // offset of current reader\n}\n\n// NewLine returns a Line with present time.\n",
                      "markdown": "`type Line struct {\n\tText   string\n\tTime   time.Time\n\tErr    error // Error from tail\n\tOffset int64 // offset of current reader\n}\n\n// NewLine returns a Line with present time.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/tail/tail.go"
                },
                "region": {
                  "startLine": 33,
                  "endLine": 33,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\ntype Line struct {\n\tText   string\n\tTime   time.Time\n\tErr    error // Error from tail\n\tOffset int64 // offset of current reader\n}\n",
                    "rendered": {
                      "text": "\ntype Line struct {\n\tText   string\n\tTime   time.Time\n\tErr    error // Error from tail\n\tOffset int64 // offset of current reader\n}\n",
                      "markdown": "`\ntype Line struct {\n\tText   string\n\tTime   time.Time\n\tErr    error // Error from tail\n\tOffset int64 // offset of current reader\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/tail/tail.go"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 60,
                  "endLine": 25,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\nvar (\n\tErrStop                     = errors.New(\"Tail should now stop\")\n\tErrDeletedNotReOpen         = errors.New(\"File was deleted, tail should now stop\")\n\texitOnDeletionCheckDuration = time.Minute\n\texitOnDeletionWaitDuration  = 5 * time.Minute\n\tOpenFileCount               atomic.Int64\n",
                    "rendered": {
                      "text": "\nvar (\n\tErrStop                     = errors.New(\"Tail should now stop\")\n\tErrDeletedNotReOpen         = errors.New(\"File was deleted, tail should now stop\")\n\texitOnDeletionCheckDuration = time.Minute\n\texitOnDeletionWaitDuration  = 5 * time.Minute\n\tOpenFileCount               atomic.Int64\n",
                      "markdown": "`\nvar (\n\tErrStop                     = errors.New(\"Tail should now stop\")\n\tErrDeletedNotReOpen         = errors.New(\"File was deleted, tail should now stop\")\n\texitOnDeletionCheckDuration = time.Minute\n\texitOnDeletionWaitDuration  = 5 * time.Minute\n\tOpenFileCount               atomic.Int64\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/tail/tail.go"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 7,
                  "endLine": 5,
                  "snippet": {
                    "text": "// Copyright (c) 2015 HPE Software Inc. All rights reserved.\n// Copyright (c) 2013 ActiveState Software Inc. All rights reserved.\n\npackage tail\n\nimport (\n\t\"bufio\"\n\t\"errors\"\n",
                    "rendered": {
                      "text": "// Copyright (c) 2015 HPE Software Inc. All rights reserved.\n// Copyright (c) 2013 ActiveState Software Inc. All rights reserved.\n\npackage tail\n\nimport (\n\t\"bufio\"\n\t\"errors\"\n",
                      "markdown": "`// Copyright (c) 2015 HPE Software Inc. All rights reserved.\n// Copyright (c) 2013 ActiveState Software Inc. All rights reserved.\n\npackage tail\n\nimport (\n\t\"bufio\"\n\t\"errors\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/tail/README.md"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 18,
                  "endColumn": 5,
                  "snippet": {
                    "text": "See [API documentation](http://godoc.org/github.com/hpcloud/tail).\n\n## Log rotation\n\nTail comes with full support for truncation/move detection as it is\ndesigned to work with log rotation tools.\n\n## Installing\n",
                    "rendered": {
                      "text": "See [API documentation](http://godoc.org/github.com/hpcloud/tail).\n\n## Log rotation\n\nTail comes with full support for truncation/move detection as it is\ndesigned to work with log rotation tools.\n\n## Installing\n",
                      "markdown": "`See [API documentation](http://godoc.org/github.com/hpcloud/tail).\n\n## Log rotation\n\nTail comes with full support for truncation/move detection as it is\ndesigned to work with log rotation tools.\n\n## Installing\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/tail/README.md"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 22,
                  "endLine": 3,
                  "endColumn": 28,
                  "snippet": {
                    "text": "# Go package for tail-ing files\n\n*This is a fork of the tail library from https://github.com/influxdata/tail*\n\nA Go package striving to emulate the features of the BSD `tail` program. \n\n",
                    "rendered": {
                      "text": "# Go package for tail-ing files\n\n*This is a fork of the tail library from https://github.com/influxdata/tail*\n\nA Go package striving to emulate the features of the BSD `tail` program. \n\n",
                      "markdown": "`# Go package for tail-ing files\n\n*This is a fork of the tail library from https://github.com/influxdata/tail*\n\nA Go package striving to emulate the features of the BSD `tail` program. \n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/tail/Makefile"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n# Run the test in an isolated environment.\nfulltest:\n\tdocker build -t hpcloud/tail .\n",
                    "rendered": {
                      "text": "\n# Run the test in an isolated environment.\nfulltest:\n\tdocker build -t hpcloud/tail .\n",
                      "markdown": "`\n# Run the test in an isolated environment.\nfulltest:\n\tdocker build -t hpcloud/tail .\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/logfile_test.go"
                },
                "region": {
                  "startLine": 1098,
                  "startColumn": 22,
                  "endLine": 1098,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\t\t\t\tlsrc.SetOutput(func(e logs.LogEvent) {\n\t\t\t\t\tif e != nil {\n\t\t\t\t\t\tif e.Message() != \"This is from Service log\" {\n\t\t\t\t\t\t\tt.Errorf(\"Wrong service log found : \\n%v\", e.Message())\n\t\t\t\t\t\t}\n\t\t\t\t\t\twg.Done()\n\t\t\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\t\tlsrc.SetOutput(func(e logs.LogEvent) {\n\t\t\t\t\tif e != nil {\n\t\t\t\t\t\tif e.Message() != \"This is from Service log\" {\n\t\t\t\t\t\t\tt.Errorf(\"Wrong service log found : \\n%v\", e.Message())\n\t\t\t\t\t\t}\n\t\t\t\t\t\twg.Done()\n\t\t\t\t\t}\n",
                      "markdown": "`\t\t\t\tlsrc.SetOutput(func(e logs.LogEvent) {\n\t\t\t\t\tif e != nil {\n\t\t\t\t\t\tif e.Message() != \"This is from Service log\" {\n\t\t\t\t\t\t\tt.Errorf(\"Wrong service log found : \\n%v\", e.Message())\n\t\t\t\t\t\t}\n\t\t\t\t\t\twg.Done()\n\t\t\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/logfile_test.go"
                },
                "region": {
                  "startLine": 1097,
                  "startColumn": 37,
                  "endLine": 1097,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\t\t\t\twg.Add(1)\n\t\t\t\tlsrc.SetOutput(func(e logs.LogEvent) {\n\t\t\t\t\tif e != nil {\n\t\t\t\t\t\tif e.Message() != \"This is from Service log\" {\n\t\t\t\t\t\t\tt.Errorf(\"Wrong service log found : \\n%v\", e.Message())\n\t\t\t\t\t\t}\n\t\t\t\t\t\twg.Done()\n",
                    "rendered": {
                      "text": "\t\t\t\twg.Add(1)\n\t\t\t\tlsrc.SetOutput(func(e logs.LogEvent) {\n\t\t\t\t\tif e != nil {\n\t\t\t\t\t\tif e.Message() != \"This is from Service log\" {\n\t\t\t\t\t\t\tt.Errorf(\"Wrong service log found : \\n%v\", e.Message())\n\t\t\t\t\t\t}\n\t\t\t\t\t\twg.Done()\n",
                      "markdown": "`\t\t\t\twg.Add(1)\n\t\t\t\tlsrc.SetOutput(func(e logs.LogEvent) {\n\t\t\t\t\tif e != nil {\n\t\t\t\t\t\tif e.Message() != \"This is from Service log\" {\n\t\t\t\t\t\t\tt.Errorf(\"Wrong service log found : \\n%v\", e.Message())\n\t\t\t\t\t\t}\n\t\t\t\t\t\twg.Done()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/logfile_test.go"
                },
                "region": {
                  "startLine": 1080,
                  "startColumn": 32,
                  "endLine": 1080,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\t\tserviceLog, err = createTempFile(\"\", \"test_service.log\")\n\t\trequire.NoError(t, err)\n\n\t\tlogEntryString = \"This is from Service log\"\n\t\t_, err = serviceLog.WriteString(logEntryString + \"\\n\")\n\t\trequire.NoError(t, err)\n\t}()\n",
                    "rendered": {
                      "text": "\t\tserviceLog, err = createTempFile(\"\", \"test_service.log\")\n\t\trequire.NoError(t, err)\n\n\t\tlogEntryString = \"This is from Service log\"\n\t\t_, err = serviceLog.WriteString(logEntryString + \"\\n\")\n\t\trequire.NoError(t, err)\n\t}()\n",
                      "markdown": "`\t\tserviceLog, err = createTempFile(\"\", \"test_service.log\")\n\t\trequire.NoError(t, err)\n\n\t\tlogEntryString = \"This is from Service log\"\n\t\t_, err = serviceLog.WriteString(logEntryString + \"\\n\")\n\t\trequire.NoError(t, err)\n\t}()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/logfile_test.go"
                },
                "region": {
                  "startLine": 1031,
                  "startColumn": 22,
                  "endLine": 1031,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\t\t\t\tlsrc.SetOutput(func(e logs.LogEvent) {\n\t\t\t\t\tif e != nil {\n\t\t\t\t\t\tif e.Message() != \"This is from Service log\" {\n\t\t\t\t\t\t\tt.Errorf(\"Wrong service log found : \\n%v\", e.Message())\n\t\t\t\t\t\t}\n\t\t\t\t\t\twg.Done()\n\t\t\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\t\tlsrc.SetOutput(func(e logs.LogEvent) {\n\t\t\t\t\tif e != nil {\n\t\t\t\t\t\tif e.Message() != \"This is from Service log\" {\n\t\t\t\t\t\t\tt.Errorf(\"Wrong service log found : \\n%v\", e.Message())\n\t\t\t\t\t\t}\n\t\t\t\t\t\twg.Done()\n\t\t\t\t\t}\n",
                      "markdown": "`\t\t\t\tlsrc.SetOutput(func(e logs.LogEvent) {\n\t\t\t\t\tif e != nil {\n\t\t\t\t\t\tif e.Message() != \"This is from Service log\" {\n\t\t\t\t\t\t\tt.Errorf(\"Wrong service log found : \\n%v\", e.Message())\n\t\t\t\t\t\t}\n\t\t\t\t\t\twg.Done()\n\t\t\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/logfile_test.go"
                },
                "region": {
                  "startLine": 1030,
                  "startColumn": 37,
                  "endLine": 1030,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\t\t\tdefault:\n\t\t\t\tlsrc.SetOutput(func(e logs.LogEvent) {\n\t\t\t\t\tif e != nil {\n\t\t\t\t\t\tif e.Message() != \"This is from Service log\" {\n\t\t\t\t\t\t\tt.Errorf(\"Wrong service log found : \\n%v\", e.Message())\n\t\t\t\t\t\t}\n\t\t\t\t\t\twg.Done()\n",
                    "rendered": {
                      "text": "\t\t\tdefault:\n\t\t\t\tlsrc.SetOutput(func(e logs.LogEvent) {\n\t\t\t\t\tif e != nil {\n\t\t\t\t\t\tif e.Message() != \"This is from Service log\" {\n\t\t\t\t\t\t\tt.Errorf(\"Wrong service log found : \\n%v\", e.Message())\n\t\t\t\t\t\t}\n\t\t\t\t\t\twg.Done()\n",
                      "markdown": "`\t\t\tdefault:\n\t\t\t\tlsrc.SetOutput(func(e logs.LogEvent) {\n\t\t\t\t\tif e != nil {\n\t\t\t\t\t\tif e.Message() != \"This is from Service log\" {\n\t\t\t\t\t\t\tt.Errorf(\"Wrong service log found : \\n%v\", e.Message())\n\t\t\t\t\t\t}\n\t\t\t\t\t\twg.Done()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/logfile_test.go"
                },
                "region": {
                  "startLine": 1006,
                  "startColumn": 32,
                  "endLine": 1006,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\t\tserviceLog, err = createTempFile(dir, \"test_service.log\")\n\t\trequire.NoError(t, err)\n\n\t\tlogEntryString = \"This is from Service log\"\n\t\t_, err = serviceLog.WriteString(logEntryString + \"\\n\")\n\t\trequire.NoError(t, err)\n\t}()\n",
                    "rendered": {
                      "text": "\t\tserviceLog, err = createTempFile(dir, \"test_service.log\")\n\t\trequire.NoError(t, err)\n\n\t\tlogEntryString = \"This is from Service log\"\n\t\t_, err = serviceLog.WriteString(logEntryString + \"\\n\")\n\t\trequire.NoError(t, err)\n\t}()\n",
                      "markdown": "`\t\tserviceLog, err = createTempFile(dir, \"test_service.log\")\n\t\trequire.NoError(t, err)\n\n\t\tlogEntryString = \"This is from Service log\"\n\t\t_, err = serviceLog.WriteString(logEntryString + \"\\n\")\n\t\trequire.NoError(t, err)\n\t}()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/logfile_test.go"
                },
                "region": {
                  "startLine": 956,
                  "startColumn": 21,
                  "endLine": 956,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\t\t\tlsrc.SetOutput(func(e logs.LogEvent) {\n\t\t\t\tif e != nil {\n\t\t\t\t\tif e.Message() != \"This is from Service log\" {\n\t\t\t\t\t\tt.Errorf(\"Wrong service log found : \\n%v\", e.Message())\n\t\t\t\t\t}\n\t\t\t\t\twg.Done()\n\t\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\tlsrc.SetOutput(func(e logs.LogEvent) {\n\t\t\t\tif e != nil {\n\t\t\t\t\tif e.Message() != \"This is from Service log\" {\n\t\t\t\t\t\tt.Errorf(\"Wrong service log found : \\n%v\", e.Message())\n\t\t\t\t\t}\n\t\t\t\t\twg.Done()\n\t\t\t\t}\n",
                      "markdown": "`\t\t\tlsrc.SetOutput(func(e logs.LogEvent) {\n\t\t\t\tif e != nil {\n\t\t\t\t\tif e.Message() != \"This is from Service log\" {\n\t\t\t\t\t\tt.Errorf(\"Wrong service log found : \\n%v\", e.Message())\n\t\t\t\t\t}\n\t\t\t\t\twg.Done()\n\t\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/logfile_test.go"
                },
                "region": {
                  "startLine": 955,
                  "startColumn": 36,
                  "endLine": 955,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\t\tcase generateLogGroupName(serviceLog.Name()):\n\t\t\tlsrc.SetOutput(func(e logs.LogEvent) {\n\t\t\t\tif e != nil {\n\t\t\t\t\tif e.Message() != \"This is from Service log\" {\n\t\t\t\t\t\tt.Errorf(\"Wrong service log found : \\n%v\", e.Message())\n\t\t\t\t\t}\n\t\t\t\t\twg.Done()\n",
                    "rendered": {
                      "text": "\t\tcase generateLogGroupName(serviceLog.Name()):\n\t\t\tlsrc.SetOutput(func(e logs.LogEvent) {\n\t\t\t\tif e != nil {\n\t\t\t\t\tif e.Message() != \"This is from Service log\" {\n\t\t\t\t\t\tt.Errorf(\"Wrong service log found : \\n%v\", e.Message())\n\t\t\t\t\t}\n\t\t\t\t\twg.Done()\n",
                      "markdown": "`\t\tcase generateLogGroupName(serviceLog.Name()):\n\t\t\tlsrc.SetOutput(func(e logs.LogEvent) {\n\t\t\t\tif e != nil {\n\t\t\t\t\tif e.Message() != \"This is from Service log\" {\n\t\t\t\t\t\tt.Errorf(\"Wrong service log found : \\n%v\", e.Message())\n\t\t\t\t\t}\n\t\t\t\t\twg.Done()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/logfile_test.go"
                },
                "region": {
                  "startLine": 924,
                  "startColumn": 31,
                  "endLine": 924,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\tdefer os.Remove(serviceLog.Name())\n\trequire.NoError(t, err)\n\n\tlogEntryString = \"This is from Service log\"\n\t_, err = serviceLog.WriteString(logEntryString + \"\\n\")\n\trequire.NoError(t, err)\n\n",
                    "rendered": {
                      "text": "\tdefer os.Remove(serviceLog.Name())\n\trequire.NoError(t, err)\n\n\tlogEntryString = \"This is from Service log\"\n\t_, err = serviceLog.WriteString(logEntryString + \"\\n\")\n\trequire.NoError(t, err)\n\n",
                      "markdown": "`\tdefer os.Remove(serviceLog.Name())\n\trequire.NoError(t, err)\n\n\tlogEntryString = \"This is from Service log\"\n\t_, err = serviceLog.WriteString(logEntryString + \"\\n\")\n\trequire.NoError(t, err)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/logfile_test.go"
                },
                "region": {
                  "startLine": 487,
                  "startColumn": 32,
                  "endLine": 487,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\tt.Log(\"Verify 1st tmp file created and discovered.\")\n\tselect {\n\tcase <-done:\n\t\tt.Log(\"Parent completed before timeout (as expected)\")\n\tcase <-time.After(time.Second * 10):\n\t\trequire.Fail(t, \"timeout waiting for 2nd temp file.\")\n\t}\n",
                    "rendered": {
                      "text": "\tt.Log(\"Verify 1st tmp file created and discovered.\")\n\tselect {\n\tcase <-done:\n\t\tt.Log(\"Parent completed before timeout (as expected)\")\n\tcase <-time.After(time.Second * 10):\n\t\trequire.Fail(t, \"timeout waiting for 2nd temp file.\")\n\t}\n",
                      "markdown": "`\tt.Log(\"Verify 1st tmp file created and discovered.\")\n\tselect {\n\tcase <-done:\n\t\tt.Log(\"Parent completed before timeout (as expected)\")\n\tcase <-time.After(time.Second * 10):\n\t\trequire.Fail(t, \"timeout waiting for 2nd temp file.\")\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/logfile_test.go"
                },
                "region": {
                  "startLine": 455,
                  "startColumn": 32,
                  "endLine": 455,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\t\tt.Log(\"Verify child completed.\")\n\t\tselect {\n\t\tcase <-done2:\n\t\t\tt.Log(\"Child completed before timeout (as expected)\")\n\t\tcase <-time.After(time.Second * 20):\n\t\t\trequire.Fail(t, \"timeout waiting for child\")\n\t\t}\n",
                    "rendered": {
                      "text": "\t\tt.Log(\"Verify child completed.\")\n\t\tselect {\n\t\tcase <-done2:\n\t\t\tt.Log(\"Child completed before timeout (as expected)\")\n\t\tcase <-time.After(time.Second * 20):\n\t\t\trequire.Fail(t, \"timeout waiting for child\")\n\t\t}\n",
                      "markdown": "`\t\tt.Log(\"Verify child completed.\")\n\t\tselect {\n\t\tcase <-done2:\n\t\t\tt.Log(\"Child completed before timeout (as expected)\")\n\t\tcase <-time.After(time.Second * 20):\n\t\t\trequire.Fail(t, \"timeout waiting for child\")\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/logfile_test.go"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 51,
                  "endLine": 276,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\te := <-evts\n\texpect := \"2\"\n\tif e.Message() != expect {\n\t\tt.Errorf(\"Log message does not match expectation, expect %q but found %q\", expect, e.Message())\n\t}\n\n\tlsrc.Stop()\n",
                    "rendered": {
                      "text": "\te := <-evts\n\texpect := \"2\"\n\tif e.Message() != expect {\n\t\tt.Errorf(\"Log message does not match expectation, expect %q but found %q\", expect, e.Message())\n\t}\n\n\tlsrc.Stop()\n",
                      "markdown": "`\te := <-evts\n\texpect := \"2\"\n\tif e.Message() != expect {\n\t\tt.Errorf(\"Log message does not match expectation, expect %q but found %q\", expect, e.Message())\n\t}\n\n\tlsrc.Stop()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/logfile_test.go"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 18,
                  "endLine": 275,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n\te := <-evts\n\texpect := \"2\"\n\tif e.Message() != expect {\n\t\tt.Errorf(\"Log message does not match expectation, expect %q but found %q\", expect, e.Message())\n\t}\n\n",
                    "rendered": {
                      "text": "\n\te := <-evts\n\texpect := \"2\"\n\tif e.Message() != expect {\n\t\tt.Errorf(\"Log message does not match expectation, expect %q but found %q\", expect, e.Message())\n\t}\n\n",
                      "markdown": "`\n\te := <-evts\n\texpect := \"2\"\n\tif e.Message() != expect {\n\t\tt.Errorf(\"Log message does not match expectation, expect %q but found %q\", expect, e.Message())\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/logfile_test.go"
                },
                "region": {
                  "startLine": 274,
                  "endLine": 274,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\t})\n\n\te := <-evts\n\texpect := \"2\"\n\tif e.Message() != expect {\n\t\tt.Errorf(\"Log message does not match expectation, expect %q but found %q\", expect, e.Message())\n\t}\n",
                    "rendered": {
                      "text": "\t})\n\n\te := <-evts\n\texpect := \"2\"\n\tif e.Message() != expect {\n\t\tt.Errorf(\"Log message does not match expectation, expect %q but found %q\", expect, e.Message())\n\t}\n",
                      "markdown": "`\t})\n\n\te := <-evts\n\texpect := \"2\"\n\tif e.Message() != expect {\n\t\tt.Errorf(\"Log message does not match expectation, expect %q but found %q\", expect, e.Message())\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/logfile_test.go"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 52,
                  "endLine": 173,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\tfor _, expect := range expected {\n\t\te := <-evts\n\t\tif e != nil && e.Message() != expect {\n\t\t\tt.Errorf(\"Log message does not match expectation, expect %q but found %q\", expect, e.Message())\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\tfor _, expect := range expected {\n\t\te := <-evts\n\t\tif e != nil && e.Message() != expect {\n\t\t\tt.Errorf(\"Log message does not match expectation, expect %q but found %q\", expect, e.Message())\n\t\t}\n\t}\n\n",
                      "markdown": "`\tfor _, expect := range expected {\n\t\te := <-evts\n\t\tif e != nil && e.Message() != expect {\n\t\t\tt.Errorf(\"Log message does not match expectation, expect %q but found %q\", expect, e.Message())\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/logfile_test.go"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 31,
                  "endLine": 172,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\texpected := []string{\"ab\\n\\n\", \"c\", \"d\\r昊\"}\n\tfor _, expect := range expected {\n\t\te := <-evts\n\t\tif e != nil && e.Message() != expect {\n\t\t\tt.Errorf(\"Log message does not match expectation, expect %q but found %q\", expect, e.Message())\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\texpected := []string{\"ab\\n\\n\", \"c\", \"d\\r昊\"}\n\tfor _, expect := range expected {\n\t\te := <-evts\n\t\tif e != nil && e.Message() != expect {\n\t\t\tt.Errorf(\"Log message does not match expectation, expect %q but found %q\", expect, e.Message())\n\t\t}\n\t}\n",
                      "markdown": "`\texpected := []string{\"ab\\n\\n\", \"c\", \"d\\r昊\"}\n\tfor _, expect := range expected {\n\t\te := <-evts\n\t\tif e != nil && e.Message() != expect {\n\t\t\tt.Errorf(\"Log message does not match expectation, expect %q but found %q\", expect, e.Message())\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/logfile_test.go"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 7,
                  "endLine": 170,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\t})\n\n\texpected := []string{\"ab\\n\\n\", \"c\", \"d\\r昊\"}\n\tfor _, expect := range expected {\n\t\te := <-evts\n\t\tif e != nil && e.Message() != expect {\n\t\t\tt.Errorf(\"Log message does not match expectation, expect %q but found %q\", expect, e.Message())\n",
                    "rendered": {
                      "text": "\t})\n\n\texpected := []string{\"ab\\n\\n\", \"c\", \"d\\r昊\"}\n\tfor _, expect := range expected {\n\t\te := <-evts\n\t\tif e != nil && e.Message() != expect {\n\t\t\tt.Errorf(\"Log message does not match expectation, expect %q but found %q\", expect, e.Message())\n",
                      "markdown": "`\t})\n\n\texpected := []string{\"ab\\n\\n\", \"c\", \"d\\r昊\"}\n\tfor _, expect := range expected {\n\t\te := <-evts\n\t\tif e != nil && e.Message() != expect {\n\t\t\tt.Errorf(\"Log message does not match expectation, expect %q but found %q\", expect, e.Message())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/logfile_test.go"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 37,
                  "endLine": 81,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\t\t\tt.Errorf(\"Log entry string does not match:\\nExpect: %v\\nFound : %v\", logEntryString, e.Message())\n\t\t}\n\t\tif !e.Time().IsZero() {\n\t\t\tt.Errorf(\"Log entry should be zero time when no timestamp regex is configured\")\n\t\t}\n\t\tclose(done)\n\t})\n",
                    "rendered": {
                      "text": "\t\t\tt.Errorf(\"Log entry string does not match:\\nExpect: %v\\nFound : %v\", logEntryString, e.Message())\n\t\t}\n\t\tif !e.Time().IsZero() {\n\t\t\tt.Errorf(\"Log entry should be zero time when no timestamp regex is configured\")\n\t\t}\n\t\tclose(done)\n\t})\n",
                      "markdown": "`\t\t\tt.Errorf(\"Log entry string does not match:\\nExpect: %v\\nFound : %v\", logEntryString, e.Message())\n\t\t}\n\t\tif !e.Time().IsZero() {\n\t\t\tt.Errorf(\"Log entry should be zero time when no timestamp regex is configured\")\n\t\t}\n\t\tclose(done)\n\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/tailersrc.go"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 138,
                  "endLine": 332,
                  "endColumn": 142,
                  "snippet": {
                    "text": "\t\tcase <-ts.done:\n\t\t\terr := ts.saveState(offset.offset)\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"E! [logfile] Error happened during final file state saving of logfile %s to file state folder %s, duplicate log maybe sent at next start: %v\", ts.tailer.Filename, ts.stateFilePath, err)\n\t\t\t}\n\t\t\treturn\n\t\t}\n",
                    "rendered": {
                      "text": "\t\tcase <-ts.done:\n\t\t\terr := ts.saveState(offset.offset)\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"E! [logfile] Error happened during final file state saving of logfile %s to file state folder %s, duplicate log maybe sent at next start: %v\", ts.tailer.Filename, ts.stateFilePath, err)\n\t\t\t}\n\t\t\treturn\n\t\t}\n",
                      "markdown": "`\t\tcase <-ts.done:\n\t\t\terr := ts.saveState(offset.offset)\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"E! [logfile] Error happened during final file state saving of logfile %s to file state folder %s, duplicate log maybe sent at next start: %v\", ts.tailer.Filename, ts.stateFilePath, err)\n\t\t\t}\n\t\t\treturn\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/README.md"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 38,
                  "endLine": 14,
                  "endColumn": 42,
                  "snippet": {
                    "text": "- `-F` means that it will follow the _name_ of the given file, so\nthat it will be compatible with log-rotated files, and that it will retry on\ninaccessible files.\n- `--lines=0` means that it will start at the end of the file (unless\nthe `from_beginning` option is set).\n\nsee http://man7.org/linux/man-pages/man1/tail.1.html for more details.\n",
                    "rendered": {
                      "text": "- `-F` means that it will follow the _name_ of the given file, so\nthat it will be compatible with log-rotated files, and that it will retry on\ninaccessible files.\n- `--lines=0` means that it will start at the end of the file (unless\nthe `from_beginning` option is set).\n\nsee http://man7.org/linux/man-pages/man1/tail.1.html for more details.\n",
                      "markdown": "`- `-F` means that it will follow the _name_ of the given file, so\nthat it will be compatible with log-rotated files, and that it will retry on\ninaccessible files.\n- `--lines=0` means that it will start at the end of the file (unless\nthe `from_beginning` option is set).\n\nsee http://man7.org/linux/man-pages/man1/tail.1.html for more details.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/README.md"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 36,
                  "endLine": 32,
                  "endColumn": 42,
                  "snippet": {
                    "text": "  ## ** as a \"super asterisk\". ie:\n  ##   \"/var/log/**.log\"  -> recursively find all .log files in /var/log\n  ##   \"/var/log/*/*.log\" -> find all .log files with a parent dir in /var/log\n  ##   \"/var/log/apache.log\" -> just tail the apache log file\n  ##\n  ## See https://github.com/gobwas/glob for more examples\n  ##\n",
                    "rendered": {
                      "text": "  ## ** as a \"super asterisk\". ie:\n  ##   \"/var/log/**.log\"  -> recursively find all .log files in /var/log\n  ##   \"/var/log/*/*.log\" -> find all .log files with a parent dir in /var/log\n  ##   \"/var/log/apache.log\" -> just tail the apache log file\n  ##\n  ## See https://github.com/gobwas/glob for more examples\n  ##\n",
                      "markdown": "`  ## ** as a \"super asterisk\". ie:\n  ##   \"/var/log/**.log\"  -> recursively find all .log files in /var/log\n  ##   \"/var/log/*/*.log\" -> find all .log files with a parent dir in /var/log\n  ##   \"/var/log/apache.log\" -> just tail the apache log file\n  ##\n  ## See https://github.com/gobwas/glob for more examples\n  ##\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/README.md"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 28,
                  "endLine": 31,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  ## These accept standard unix glob matching rules, but with the addition of\n  ## ** as a \"super asterisk\". ie:\n  ##   \"/var/log/**.log\"  -> recursively find all .log files in /var/log\n  ##   \"/var/log/*/*.log\" -> find all .log files with a parent dir in /var/log\n  ##   \"/var/log/apache.log\" -> just tail the apache log file\n  ##\n  ## See https://github.com/gobwas/glob for more examples\n",
                    "rendered": {
                      "text": "  ## These accept standard unix glob matching rules, but with the addition of\n  ## ** as a \"super asterisk\". ie:\n  ##   \"/var/log/**.log\"  -> recursively find all .log files in /var/log\n  ##   \"/var/log/*/*.log\" -> find all .log files with a parent dir in /var/log\n  ##   \"/var/log/apache.log\" -> just tail the apache log file\n  ##\n  ## See https://github.com/gobwas/glob for more examples\n",
                      "markdown": "`  ## These accept standard unix glob matching rules, but with the addition of\n  ## ** as a \"super asterisk\". ie:\n  ##   \"/var/log/**.log\"  -> recursively find all .log files in /var/log\n  ##   \"/var/log/*/*.log\" -> find all .log files with a parent dir in /var/log\n  ##   \"/var/log/apache.log\" -> just tail the apache log file\n  ##\n  ## See https://github.com/gobwas/glob for more examples\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/README.md"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 40,
                  "endLine": 30,
                  "endColumn": 46,
                  "snippet": {
                    "text": "  ## files to tail.\n  ## These accept standard unix glob matching rules, but with the addition of\n  ## ** as a \"super asterisk\". ie:\n  ##   \"/var/log/**.log\"  -> recursively find all .log files in /var/log\n  ##   \"/var/log/*/*.log\" -> find all .log files with a parent dir in /var/log\n  ##   \"/var/log/apache.log\" -> just tail the apache log file\n  ##\n",
                    "rendered": {
                      "text": "  ## files to tail.\n  ## These accept standard unix glob matching rules, but with the addition of\n  ## ** as a \"super asterisk\". ie:\n  ##   \"/var/log/**.log\"  -> recursively find all .log files in /var/log\n  ##   \"/var/log/*/*.log\" -> find all .log files with a parent dir in /var/log\n  ##   \"/var/log/apache.log\" -> just tail the apache log file\n  ##\n",
                      "markdown": "`  ## files to tail.\n  ## These accept standard unix glob matching rules, but with the addition of\n  ## ** as a \"super asterisk\". ie:\n  ##   \"/var/log/**.log\"  -> recursively find all .log files in /var/log\n  ##   \"/var/log/*/*.log\" -> find all .log files with a parent dir in /var/log\n  ##   \"/var/log/apache.log\" -> just tail the apache log file\n  ##\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/README.md"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 29,
                  "endLine": 25,
                  "endColumn": 35,
                  "snippet": {
                    "text": "### Configuration:\n\n```toml\n# Stream a log file, like the tail -f command\n  [[inputs.logs]]\n  ## files to tail.\n  ## These accept standard unix glob matching rules, but with the addition of\n",
                    "rendered": {
                      "text": "### Configuration:\n\n```toml\n# Stream a log file, like the tail -f command\n  [[inputs.logs]]\n  ## files to tail.\n  ## These accept standard unix glob matching rules, but with the addition of\n",
                      "markdown": "`### Configuration:\n\n```toml\n# Stream a log file, like the tail -f command\n  [[inputs.logs]]\n  ## files to tail.\n  ## These accept standard unix glob matching rules, but with the addition of\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/README.md"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 3,
                  "endLine": 8,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nBy default, the tail plugin acts like the following unix tail command:\n\n```\ntail -F --lines=0 myfile.log\n```\n\n- `-F` means that it will follow the _name_ of the given file, so\n",
                    "rendered": {
                      "text": "\nBy default, the tail plugin acts like the following unix tail command:\n\n```\ntail -F --lines=0 myfile.log\n```\n\n- `-F` means that it will follow the _name_ of the given file, so\n",
                      "markdown": "`\nBy default, the tail plugin acts like the following unix tail command:\n\n```\ntail -F --lines=0 myfile.log\n```\n\n- `-F` means that it will follow the _name_ of the given file, so\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/README.md"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 56,
                  "endLine": 5,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\nThe logs plugin \"tails\" a logfile and parses each log message.\n\nBy default, the tail plugin acts like the following unix tail command:\n\n```\ntail -F --lines=0 myfile.log\n",
                    "rendered": {
                      "text": "\nThe logs plugin \"tails\" a logfile and parses each log message.\n\nBy default, the tail plugin acts like the following unix tail command:\n\n```\ntail -F --lines=0 myfile.log\n",
                      "markdown": "`\nThe logs plugin \"tails\" a logfile and parses each log message.\n\nBy default, the tail plugin acts like the following unix tail command:\n\n```\ntail -F --lines=0 myfile.log\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/logfile/README.md"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 15,
                  "endLine": 5,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\nThe logs plugin \"tails\" a logfile and parses each log message.\n\nBy default, the tail plugin acts like the following unix tail command:\n\n```\ntail -F --lines=0 myfile.log\n",
                    "rendered": {
                      "text": "\nThe logs plugin \"tails\" a logfile and parses each log message.\n\nBy default, the tail plugin acts like the following unix tail command:\n\n```\ntail -F --lines=0 myfile.log\n",
                      "markdown": "`\nThe logs plugin \"tails\" a logfile and parses each log message.\n\nBy default, the tail plugin acts like the following unix tail command:\n\n```\ntail -F --lines=0 myfile.log\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/gpuattributes/internal/awsneuron_metric_modifier.go"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 63,
                  "endLine": 272,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\n\t// check if pod correlation has been performed, if not then don't emit metric for container and pod\n\tduplicateForNodeOnly := false\n\tpodName, exists := originalMetricDatapoints.At(0).Attributes().Get(PodName)\n\tif !exists || len(podName.Str()) == 0 {\n\t\tduplicateForNodeOnly = true\n\t}\n",
                    "rendered": {
                      "text": "\n\t// check if pod correlation has been performed, if not then don't emit metric for container and pod\n\tduplicateForNodeOnly := false\n\tpodName, exists := originalMetricDatapoints.At(0).Attributes().Get(PodName)\n\tif !exists || len(podName.Str()) == 0 {\n\t\tduplicateForNodeOnly = true\n\t}\n",
                      "markdown": "`\n\t// check if pod correlation has been performed, if not then don't emit metric for container and pod\n\tduplicateForNodeOnly := false\n\tpodName, exists := originalMetricDatapoints.At(0).Attributes().Get(PodName)\n\tif !exists || len(podName.Str()) == 0 {\n\t\tduplicateForNodeOnly = true\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/gpuattributes/internal/awsneuron_metric_modifier.go"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 38,
                  "endLine": 257,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\tfor i := 0; i < dps.Len(); i++ {\n\t\tdp := dps.At(i)\n\t\tfor attributeKey, attributeValuePrefix := range attributeValuePrefixingMap {\n\t\t\tif value, exists := dp.Attributes().Get(attributeKey); exists {\n\t\t\t\tdp.Attributes().PutStr(attributeKey, attributeValuePrefix+value.Str())\n\t\t\t}\n\t\t}\n",
                    "rendered": {
                      "text": "\tfor i := 0; i < dps.Len(); i++ {\n\t\tdp := dps.At(i)\n\t\tfor attributeKey, attributeValuePrefix := range attributeValuePrefixingMap {\n\t\t\tif value, exists := dp.Attributes().Get(attributeKey); exists {\n\t\t\t\tdp.Attributes().PutStr(attributeKey, attributeValuePrefix+value.Str())\n\t\t\t}\n\t\t}\n",
                      "markdown": "`\tfor i := 0; i < dps.Len(); i++ {\n\t\tdp := dps.At(i)\n\t\tfor attributeKey, attributeValuePrefix := range attributeValuePrefixingMap {\n\t\t\tif value, exists := dp.Attributes().Get(attributeKey); exists {\n\t\t\t\tdp.Attributes().PutStr(attributeKey, attributeValuePrefix+value.Str())\n\t\t\t}\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/gpuattributes/internal/awsneuron_metric_modifier.go"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 59,
                  "endLine": 216,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\t\toriginalDatapoint := originalMetricDatapoints.At(i)\n\t\truntimeTag, _ := originalDatapoint.Attributes().Get(RuntimeTag)\n\t\tdeviceId, _ := originalDatapoint.Attributes().Get(NeuronDeviceAttributeKey)\n\t\tuniqueAttributeValue, _ := originalDatapoint.Attributes().Get(uniqueAttribute)\n\n\t\t// only add to the aggregation map if the datapoint to aggregated metric mappings are defined for the original metric\n\t\tif needsAggregation {\n",
                    "rendered": {
                      "text": "\t\toriginalDatapoint := originalMetricDatapoints.At(i)\n\t\truntimeTag, _ := originalDatapoint.Attributes().Get(RuntimeTag)\n\t\tdeviceId, _ := originalDatapoint.Attributes().Get(NeuronDeviceAttributeKey)\n\t\tuniqueAttributeValue, _ := originalDatapoint.Attributes().Get(uniqueAttribute)\n\n\t\t// only add to the aggregation map if the datapoint to aggregated metric mappings are defined for the original metric\n\t\tif needsAggregation {\n",
                      "markdown": "`\t\toriginalDatapoint := originalMetricDatapoints.At(i)\n\t\truntimeTag, _ := originalDatapoint.Attributes().Get(RuntimeTag)\n\t\tdeviceId, _ := originalDatapoint.Attributes().Get(NeuronDeviceAttributeKey)\n\t\tuniqueAttributeValue, _ := originalDatapoint.Attributes().Get(uniqueAttribute)\n\n\t\t// only add to the aggregation map if the datapoint to aggregated metric mappings are defined for the original metric\n\t\tif needsAggregation {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/gpuattributes/internal/awsneuron_metric_modifier.go"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 47,
                  "endLine": 215,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\tfor i := 0; i < originalMetricDatapoints.Len(); i++ {\n\t\toriginalDatapoint := originalMetricDatapoints.At(i)\n\t\truntimeTag, _ := originalDatapoint.Attributes().Get(RuntimeTag)\n\t\tdeviceId, _ := originalDatapoint.Attributes().Get(NeuronDeviceAttributeKey)\n\t\tuniqueAttributeValue, _ := originalDatapoint.Attributes().Get(uniqueAttribute)\n\n\t\t// only add to the aggregation map if the datapoint to aggregated metric mappings are defined for the original metric\n",
                    "rendered": {
                      "text": "\tfor i := 0; i < originalMetricDatapoints.Len(); i++ {\n\t\toriginalDatapoint := originalMetricDatapoints.At(i)\n\t\truntimeTag, _ := originalDatapoint.Attributes().Get(RuntimeTag)\n\t\tdeviceId, _ := originalDatapoint.Attributes().Get(NeuronDeviceAttributeKey)\n\t\tuniqueAttributeValue, _ := originalDatapoint.Attributes().Get(uniqueAttribute)\n\n\t\t// only add to the aggregation map if the datapoint to aggregated metric mappings are defined for the original metric\n",
                      "markdown": "`\tfor i := 0; i < originalMetricDatapoints.Len(); i++ {\n\t\toriginalDatapoint := originalMetricDatapoints.At(i)\n\t\truntimeTag, _ := originalDatapoint.Attributes().Get(RuntimeTag)\n\t\tdeviceId, _ := originalDatapoint.Attributes().Get(NeuronDeviceAttributeKey)\n\t\tuniqueAttributeValue, _ := originalDatapoint.Attributes().Get(uniqueAttribute)\n\n\t\t// only add to the aggregation map if the datapoint to aggregated metric mappings are defined for the original metric\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/gpuattributes/internal/awsneuron_metric_modifier.go"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 49,
                  "endLine": 214,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\tuniqueAttributeToAggregatedMetricMappings, needsAggregation := uniquesDatapointsToAggregatedMetricMappings[originalMetric.Name()]\n\tfor i := 0; i < originalMetricDatapoints.Len(); i++ {\n\t\toriginalDatapoint := originalMetricDatapoints.At(i)\n\t\truntimeTag, _ := originalDatapoint.Attributes().Get(RuntimeTag)\n\t\tdeviceId, _ := originalDatapoint.Attributes().Get(NeuronDeviceAttributeKey)\n\t\tuniqueAttributeValue, _ := originalDatapoint.Attributes().Get(uniqueAttribute)\n\n",
                    "rendered": {
                      "text": "\tuniqueAttributeToAggregatedMetricMappings, needsAggregation := uniquesDatapointsToAggregatedMetricMappings[originalMetric.Name()]\n\tfor i := 0; i < originalMetricDatapoints.Len(); i++ {\n\t\toriginalDatapoint := originalMetricDatapoints.At(i)\n\t\truntimeTag, _ := originalDatapoint.Attributes().Get(RuntimeTag)\n\t\tdeviceId, _ := originalDatapoint.Attributes().Get(NeuronDeviceAttributeKey)\n\t\tuniqueAttributeValue, _ := originalDatapoint.Attributes().Get(uniqueAttribute)\n\n",
                      "markdown": "`\tuniqueAttributeToAggregatedMetricMappings, needsAggregation := uniquesDatapointsToAggregatedMetricMappings[originalMetric.Name()]\n\tfor i := 0; i < originalMetricDatapoints.Len(); i++ {\n\t\toriginalDatapoint := originalMetricDatapoints.At(i)\n\t\truntimeTag, _ := originalDatapoint.Attributes().Get(RuntimeTag)\n\t\tdeviceId, _ := originalDatapoint.Attributes().Get(NeuronDeviceAttributeKey)\n\t\tuniqueAttributeValue, _ := originalDatapoint.Attributes().Get(uniqueAttribute)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/gpuattributes/internal/awsneuron_metric_modifier.go"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 34,
                  "endLine": 164,
                  "endColumn": 39,
                  "snippet": {
                    "text": "//\tout : neurondevice_runtime_memory {datapoints: [ 0 : {Attributes : {..., percentile:p50, ....}, value 3}]}\nfunc keepSpecificDatapointBasedOnAttribute(originalMetric pmetric.Metric, attributeKey string, attributeValueToKeep string) {\n\toriginalMetric.Sum().DataPoints().RemoveIf(func(dp pmetric.NumberDataPoint) bool {\n\t\tvalue, exists := dp.Attributes().Get(attributeKey)\n\t\treturn !exists || value.Str() != attributeValueToKeep\n\t})\n}\n",
                    "rendered": {
                      "text": "//\tout : neurondevice_runtime_memory {datapoints: [ 0 : {Attributes : {..., percentile:p50, ....}, value 3}]}\nfunc keepSpecificDatapointBasedOnAttribute(originalMetric pmetric.Metric, attributeKey string, attributeValueToKeep string) {\n\toriginalMetric.Sum().DataPoints().RemoveIf(func(dp pmetric.NumberDataPoint) bool {\n\t\tvalue, exists := dp.Attributes().Get(attributeKey)\n\t\treturn !exists || value.Str() != attributeValueToKeep\n\t})\n}\n",
                      "markdown": "`//\tout : neurondevice_runtime_memory {datapoints: [ 0 : {Attributes : {..., percentile:p50, ....}, value 3}]}\nfunc keepSpecificDatapointBasedOnAttribute(originalMetric pmetric.Metric, attributeKey string, attributeValueToKeep string) {\n\toriginalMetric.Sum().DataPoints().RemoveIf(func(dp pmetric.NumberDataPoint) bool {\n\t\tvalue, exists := dp.Attributes().Get(attributeKey)\n\t\treturn !exists || value.Str() != attributeValueToKeep\n\t})\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/gpuattributes/internal/awsneuron_metric_modifier.go"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 74,
                  "endLine": 131,
                  "endColumn": 80,
                  "snippet": {
                    "text": "\toriginalMetricName := originalMetric.Name()\n\t// The neuron metrics sent by the neuron monitor are not homogeneous\n\t// and some metrics require special processing.\n\t// We perform those special processing before duplicating metric for pod, node and container.\n\tif originalMetricName == containerinsightscommon.NeuronExecutionLatency {\n\t\tkeepSpecificDatapointBasedOnAttribute(originalMetric, Percentile, \"p50\")\n\t} else if originalMetricName == containerinsightscommon.NeuronRuntimeMemoryUsage {\n",
                    "rendered": {
                      "text": "\toriginalMetricName := originalMetric.Name()\n\t// The neuron metrics sent by the neuron monitor are not homogeneous\n\t// and some metrics require special processing.\n\t// We perform those special processing before duplicating metric for pod, node and container.\n\tif originalMetricName == containerinsightscommon.NeuronExecutionLatency {\n\t\tkeepSpecificDatapointBasedOnAttribute(originalMetric, Percentile, \"p50\")\n\t} else if originalMetricName == containerinsightscommon.NeuronRuntimeMemoryUsage {\n",
                      "markdown": "`\toriginalMetricName := originalMetric.Name()\n\t// The neuron metrics sent by the neuron monitor are not homogeneous\n\t// and some metrics require special processing.\n\t// We perform those special processing before duplicating metric for pod, node and container.\n\tif originalMetricName == containerinsightscommon.NeuronExecutionLatency {\n\t\tkeepSpecificDatapointBasedOnAttribute(originalMetric, Percentile, \"p50\")\n\t} else if originalMetricName == containerinsightscommon.NeuronRuntimeMemoryUsage {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/gpuattributes/internal/awsneuron_metric_modifier.go"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 43,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tNeuronCore                                    = \"NeuronCore\"\n\tNeuronDevice                                  = \"NeuronDevice\"\n\tNodeName                                      = \"NodeName\"\n\tService                                       = \"Service\"\n\tAvailabilityZone                              = \"availability_zone\"\n\tKubernetes                                    = \"kubernetes\"\n\tRegion                                        = \"region\"\n",
                    "rendered": {
                      "text": "\tNeuronCore                                    = \"NeuronCore\"\n\tNeuronDevice                                  = \"NeuronDevice\"\n\tNodeName                                      = \"NodeName\"\n\tService                                       = \"Service\"\n\tAvailabilityZone                              = \"availability_zone\"\n\tKubernetes                                    = \"kubernetes\"\n\tRegion                                        = \"region\"\n",
                      "markdown": "`\tNeuronCore                                    = \"NeuronCore\"\n\tNeuronDevice                                  = \"NeuronDevice\"\n\tNodeName                                      = \"NodeName\"\n\tService                                       = \"Service\"\n\tAvailabilityZone                              = \"availability_zone\"\n\tKubernetes                                    = \"kubernetes\"\n\tRegion                                        = \"region\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/gpuattributes/internal/awsneuron_memory_metric_aggregator_test.go"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 47,
                  "endLine": 92,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n\t\tactualNeuronCoreIndex, _ := datapoint.Attributes().Get(NeuronCoreAttributeKey)\n\t\tactualNeuronDeviceIndex, _ := datapoint.Attributes().Get(NeuronDeviceAttributeKey)\n\t\tactualRuntimeTag, _ := datapoint.Attributes().Get(RuntimeTag)\n\n\t\tassert.Equal(t, memoryUsageMetricValuesMap[actualNeuronCoreIndex.AsString()], datapoint.DoubleValue())\n\t\tassert.Equal(t, \"1\", actualRuntimeTag.AsString())\n",
                    "rendered": {
                      "text": "\n\t\tactualNeuronCoreIndex, _ := datapoint.Attributes().Get(NeuronCoreAttributeKey)\n\t\tactualNeuronDeviceIndex, _ := datapoint.Attributes().Get(NeuronDeviceAttributeKey)\n\t\tactualRuntimeTag, _ := datapoint.Attributes().Get(RuntimeTag)\n\n\t\tassert.Equal(t, memoryUsageMetricValuesMap[actualNeuronCoreIndex.AsString()], datapoint.DoubleValue())\n\t\tassert.Equal(t, \"1\", actualRuntimeTag.AsString())\n",
                      "markdown": "`\n\t\tactualNeuronCoreIndex, _ := datapoint.Attributes().Get(NeuronCoreAttributeKey)\n\t\tactualNeuronDeviceIndex, _ := datapoint.Attributes().Get(NeuronDeviceAttributeKey)\n\t\tactualRuntimeTag, _ := datapoint.Attributes().Get(RuntimeTag)\n\n\t\tassert.Equal(t, memoryUsageMetricValuesMap[actualNeuronCoreIndex.AsString()], datapoint.DoubleValue())\n\t\tassert.Equal(t, \"1\", actualRuntimeTag.AsString())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/gpuattributes/internal/awsneuron_memory_metric_aggregator_test.go"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 54,
                  "endLine": 91,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\t\tassert.Equal(t, 4, datapoint.Attributes().Len())\n\n\t\tactualNeuronCoreIndex, _ := datapoint.Attributes().Get(NeuronCoreAttributeKey)\n\t\tactualNeuronDeviceIndex, _ := datapoint.Attributes().Get(NeuronDeviceAttributeKey)\n\t\tactualRuntimeTag, _ := datapoint.Attributes().Get(RuntimeTag)\n\n\t\tassert.Equal(t, memoryUsageMetricValuesMap[actualNeuronCoreIndex.AsString()], datapoint.DoubleValue())\n",
                    "rendered": {
                      "text": "\t\tassert.Equal(t, 4, datapoint.Attributes().Len())\n\n\t\tactualNeuronCoreIndex, _ := datapoint.Attributes().Get(NeuronCoreAttributeKey)\n\t\tactualNeuronDeviceIndex, _ := datapoint.Attributes().Get(NeuronDeviceAttributeKey)\n\t\tactualRuntimeTag, _ := datapoint.Attributes().Get(RuntimeTag)\n\n\t\tassert.Equal(t, memoryUsageMetricValuesMap[actualNeuronCoreIndex.AsString()], datapoint.DoubleValue())\n",
                      "markdown": "`\t\tassert.Equal(t, 4, datapoint.Attributes().Len())\n\n\t\tactualNeuronCoreIndex, _ := datapoint.Attributes().Get(NeuronCoreAttributeKey)\n\t\tactualNeuronDeviceIndex, _ := datapoint.Attributes().Get(NeuronDeviceAttributeKey)\n\t\tactualRuntimeTag, _ := datapoint.Attributes().Get(RuntimeTag)\n\n\t\tassert.Equal(t, memoryUsageMetricValuesMap[actualNeuronCoreIndex.AsString()], datapoint.DoubleValue())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/gpuattributes/internal/awsneuron_memory_metric_aggregator_test.go"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 52,
                  "endLine": 90,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\t\tassert.Equal(t, staticTimestamp.String(), datapoint.Timestamp().String())\n\t\tassert.Equal(t, 4, datapoint.Attributes().Len())\n\n\t\tactualNeuronCoreIndex, _ := datapoint.Attributes().Get(NeuronCoreAttributeKey)\n\t\tactualNeuronDeviceIndex, _ := datapoint.Attributes().Get(NeuronDeviceAttributeKey)\n\t\tactualRuntimeTag, _ := datapoint.Attributes().Get(RuntimeTag)\n\n",
                    "rendered": {
                      "text": "\t\tassert.Equal(t, staticTimestamp.String(), datapoint.Timestamp().String())\n\t\tassert.Equal(t, 4, datapoint.Attributes().Len())\n\n\t\tactualNeuronCoreIndex, _ := datapoint.Attributes().Get(NeuronCoreAttributeKey)\n\t\tactualNeuronDeviceIndex, _ := datapoint.Attributes().Get(NeuronDeviceAttributeKey)\n\t\tactualRuntimeTag, _ := datapoint.Attributes().Get(RuntimeTag)\n\n",
                      "markdown": "`\t\tassert.Equal(t, staticTimestamp.String(), datapoint.Timestamp().String())\n\t\tassert.Equal(t, 4, datapoint.Attributes().Len())\n\n\t\tactualNeuronCoreIndex, _ := datapoint.Attributes().Get(NeuronCoreAttributeKey)\n\t\tactualNeuronDeviceIndex, _ := datapoint.Attributes().Get(NeuronDeviceAttributeKey)\n\t\tactualRuntimeTag, _ := datapoint.Attributes().Get(RuntimeTag)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/gpuattributes/internal/awsneuron_metric_modifier_test.go"
                },
                "region": {
                  "startLine": 370,
                  "startColumn": 52,
                  "endLine": 370,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n\t\t\tassert.Equal(t, expectedDatapoint.Attributes().Len(), actualDatapoint.Attributes().Len())\n\t\t\tfor key, val := range actualDatapoint.Attributes().AsRaw() {\n\t\t\t\texpectedVal, _ := expectedDatapoint.Attributes().Get(key)\n\t\t\t\tassert.Equal(t, expectedVal.AsString(), val)\n\t\t\t}\n\n",
                    "rendered": {
                      "text": "\n\t\t\tassert.Equal(t, expectedDatapoint.Attributes().Len(), actualDatapoint.Attributes().Len())\n\t\t\tfor key, val := range actualDatapoint.Attributes().AsRaw() {\n\t\t\t\texpectedVal, _ := expectedDatapoint.Attributes().Get(key)\n\t\t\t\tassert.Equal(t, expectedVal.AsString(), val)\n\t\t\t}\n\n",
                      "markdown": "`\n\t\t\tassert.Equal(t, expectedDatapoint.Attributes().Len(), actualDatapoint.Attributes().Len())\n\t\t\tfor key, val := range actualDatapoint.Attributes().AsRaw() {\n\t\t\t\texpectedVal, _ := expectedDatapoint.Attributes().Get(key)\n\t\t\t\tassert.Equal(t, expectedVal.AsString(), val)\n\t\t\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/gpuattributes/internal/awsneuron_memory_metric_aggregator.go"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 61,
                  "endLine": 58,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\n\t\tneuronCoreIndexValue, neuronCoreIndexValueExists := datapoint.Attributes().Get(NeuronCoreAttributeKey)\n\t\tneuronDeviceIndexValue, neuronDeviceIndexValueExists := datapoint.Attributes().Get(NeuronDeviceAttributeKey)\n\t\truntimeTagValue, runtimeTagExists := datapoint.Attributes().Get(RuntimeTag)\n\n\t\tif neuronCoreIndexValueExists && neuronDeviceIndexValueExists && runtimeTagExists {\n\t\t\tneuronCoreInfo := NeuronCoreInfo{neuronCoreIndex: neuronCoreIndexValue.AsString(), neuronDeviceIndex: neuronDeviceIndexValue.AsString(), runtimeTag: runtimeTagValue.AsString()}\n",
                    "rendered": {
                      "text": "\n\t\tneuronCoreIndexValue, neuronCoreIndexValueExists := datapoint.Attributes().Get(NeuronCoreAttributeKey)\n\t\tneuronDeviceIndexValue, neuronDeviceIndexValueExists := datapoint.Attributes().Get(NeuronDeviceAttributeKey)\n\t\truntimeTagValue, runtimeTagExists := datapoint.Attributes().Get(RuntimeTag)\n\n\t\tif neuronCoreIndexValueExists && neuronDeviceIndexValueExists && runtimeTagExists {\n\t\t\tneuronCoreInfo := NeuronCoreInfo{neuronCoreIndex: neuronCoreIndexValue.AsString(), neuronDeviceIndex: neuronDeviceIndexValue.AsString(), runtimeTag: runtimeTagValue.AsString()}\n",
                      "markdown": "`\n\t\tneuronCoreIndexValue, neuronCoreIndexValueExists := datapoint.Attributes().Get(NeuronCoreAttributeKey)\n\t\tneuronDeviceIndexValue, neuronDeviceIndexValueExists := datapoint.Attributes().Get(NeuronDeviceAttributeKey)\n\t\truntimeTagValue, runtimeTagExists := datapoint.Attributes().Get(RuntimeTag)\n\n\t\tif neuronCoreIndexValueExists && neuronDeviceIndexValueExists && runtimeTagExists {\n\t\t\tneuronCoreInfo := NeuronCoreInfo{neuronCoreIndex: neuronCoreIndexValue.AsString(), neuronDeviceIndex: neuronDeviceIndexValue.AsString(), runtimeTag: runtimeTagValue.AsString()}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/gpuattributes/internal/awsneuron_memory_metric_aggregator.go"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 80,
                  "endLine": 57,
                  "endColumn": 85,
                  "snippet": {
                    "text": "\t\tdatapoint := datapoints.At(i)\n\n\t\tneuronCoreIndexValue, neuronCoreIndexValueExists := datapoint.Attributes().Get(NeuronCoreAttributeKey)\n\t\tneuronDeviceIndexValue, neuronDeviceIndexValueExists := datapoint.Attributes().Get(NeuronDeviceAttributeKey)\n\t\truntimeTagValue, runtimeTagExists := datapoint.Attributes().Get(RuntimeTag)\n\n\t\tif neuronCoreIndexValueExists && neuronDeviceIndexValueExists && runtimeTagExists {\n",
                    "rendered": {
                      "text": "\t\tdatapoint := datapoints.At(i)\n\n\t\tneuronCoreIndexValue, neuronCoreIndexValueExists := datapoint.Attributes().Get(NeuronCoreAttributeKey)\n\t\tneuronDeviceIndexValue, neuronDeviceIndexValueExists := datapoint.Attributes().Get(NeuronDeviceAttributeKey)\n\t\truntimeTagValue, runtimeTagExists := datapoint.Attributes().Get(RuntimeTag)\n\n\t\tif neuronCoreIndexValueExists && neuronDeviceIndexValueExists && runtimeTagExists {\n",
                      "markdown": "`\t\tdatapoint := datapoints.At(i)\n\n\t\tneuronCoreIndexValue, neuronCoreIndexValueExists := datapoint.Attributes().Get(NeuronCoreAttributeKey)\n\t\tneuronDeviceIndexValue, neuronDeviceIndexValueExists := datapoint.Attributes().Get(NeuronDeviceAttributeKey)\n\t\truntimeTagValue, runtimeTagExists := datapoint.Attributes().Get(RuntimeTag)\n\n\t\tif neuronCoreIndexValueExists && neuronDeviceIndexValueExists && runtimeTagExists {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/gpuattributes/internal/awsneuron_memory_metric_aggregator.go"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 76,
                  "endLine": 56,
                  "endColumn": 81,
                  "snippet": {
                    "text": "\tfor i := 0; i < datapoints.Len(); i++ {\n\t\tdatapoint := datapoints.At(i)\n\n\t\tneuronCoreIndexValue, neuronCoreIndexValueExists := datapoint.Attributes().Get(NeuronCoreAttributeKey)\n\t\tneuronDeviceIndexValue, neuronDeviceIndexValueExists := datapoint.Attributes().Get(NeuronDeviceAttributeKey)\n\t\truntimeTagValue, runtimeTagExists := datapoint.Attributes().Get(RuntimeTag)\n\n",
                    "rendered": {
                      "text": "\tfor i := 0; i < datapoints.Len(); i++ {\n\t\tdatapoint := datapoints.At(i)\n\n\t\tneuronCoreIndexValue, neuronCoreIndexValueExists := datapoint.Attributes().Get(NeuronCoreAttributeKey)\n\t\tneuronDeviceIndexValue, neuronDeviceIndexValueExists := datapoint.Attributes().Get(NeuronDeviceAttributeKey)\n\t\truntimeTagValue, runtimeTagExists := datapoint.Attributes().Get(RuntimeTag)\n\n",
                      "markdown": "`\tfor i := 0; i < datapoints.Len(); i++ {\n\t\tdatapoint := datapoints.At(i)\n\n\t\tneuronCoreIndexValue, neuronCoreIndexValueExists := datapoint.Attributes().Get(NeuronCoreAttributeKey)\n\t\tneuronDeviceIndexValue, neuronDeviceIndexValueExists := datapoint.Attributes().Get(NeuronDeviceAttributeKey)\n\t\truntimeTagValue, runtimeTagExists := datapoint.Attributes().Get(RuntimeTag)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/gpuattributes/processor_test.go"
                },
                "region": {
                  "startLine": 466,
                  "startColumn": 22,
                  "endLine": 466,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\t\t\t\tdpAttr := ms.ResourceMetrics().At(0).ScopeMetrics().At(0).Metrics().At(i).Sum().DataPoints().At(0).Attributes()\n\t\t\t\tassert.Equal(t, len(dim), dpAttr.Len())\n\t\t\t\tfor k, v := range dim {\n\t\t\t\t\tgot, ok := dpAttr.Get(k)\n\t\t\t\t\tassert.True(t, ok)\n\t\t\t\t\tassert.Equal(t, v, got.Str())\n\t\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\t\tdpAttr := ms.ResourceMetrics().At(0).ScopeMetrics().At(0).Metrics().At(i).Sum().DataPoints().At(0).Attributes()\n\t\t\t\tassert.Equal(t, len(dim), dpAttr.Len())\n\t\t\t\tfor k, v := range dim {\n\t\t\t\t\tgot, ok := dpAttr.Get(k)\n\t\t\t\t\tassert.True(t, ok)\n\t\t\t\t\tassert.Equal(t, v, got.Str())\n\t\t\t\t}\n",
                      "markdown": "`\t\t\t\tdpAttr := ms.ResourceMetrics().At(0).ScopeMetrics().At(0).Metrics().At(i).Sum().DataPoints().At(0).Attributes()\n\t\t\t\tassert.Equal(t, len(dim), dpAttr.Len())\n\t\t\t\tfor k, v := range dim {\n\t\t\t\t\tgot, ok := dpAttr.Get(k)\n\t\t\t\t\tassert.True(t, ok)\n\t\t\t\t\tassert.Equal(t, v, got.Str())\n\t\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/gpuattributes/processor_test.go"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 21,
                  "endLine": 200,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\t\t\t\tattrs := dps.At(i).Attributes()\n\t\t\t\tassert.Equal(t, len(dim), attrs.Len())\n\t\t\t\tfor k, v := range dim {\n\t\t\t\t\tgot, ok := attrs.Get(k)\n\t\t\t\t\tassert.True(t, ok)\n\t\t\t\t\tassert.Equal(t, v, got.Str())\n\t\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\t\tattrs := dps.At(i).Attributes()\n\t\t\t\tassert.Equal(t, len(dim), attrs.Len())\n\t\t\t\tfor k, v := range dim {\n\t\t\t\t\tgot, ok := attrs.Get(k)\n\t\t\t\t\tassert.True(t, ok)\n\t\t\t\t\tassert.Equal(t, v, got.Str())\n\t\t\t\t}\n",
                      "markdown": "`\t\t\t\tattrs := dps.At(i).Attributes()\n\t\t\t\tassert.Equal(t, len(dim), attrs.Len())\n\t\t\t\tfor k, v := range dim {\n\t\t\t\t\tgot, ok := attrs.Get(k)\n\t\t\t\t\tassert.True(t, ok)\n\t\t\t\t\tassert.Equal(t, v, got.Str())\n\t\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/gpuattributes/processor_test.go"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 2,
                  "endLine": 247,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t\"neuronMetricsProcessedWithPodCorrelation\": {\n\t\t\tmetrics: generateNeuronMetrics(\"neuroncore_memory_usage_constants\", []map[string]string{\n\t\t\t\t{\n\t\t\t\t\t\"ClusterName\":   \"cluster\",\n",
                    "rendered": {
                      "text": "\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t\"neuronMetricsProcessedWithPodCorrelation\": {\n\t\t\tmetrics: generateNeuronMetrics(\"neuroncore_memory_usage_constants\", []map[string]string{\n\t\t\t\t{\n\t\t\t\t\t\"ClusterName\":   \"cluster\",\n",
                      "markdown": "`\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t\"neuronMetricsProcessedWithPodCorrelation\": {\n\t\t\tmetrics: generateNeuronMetrics(\"neuroncore_memory_usage_constants\", []map[string]string{\n\t\t\t\t{\n\t\t\t\t\t\"ClusterName\":   \"cluster\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/gpuattributes/processor_test.go"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 2,
                  "endLine": 220,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\t\twantMetricCnt int\n\t\twant          []map[string]string\n\t}{\n\t\t\"neuronMetricsProcessedWithNoPodCorrelation\": {\n\t\t\tmetrics: generateNeuronMetrics(\"neuron_execution_latency\", []map[string]string{\n\t\t\t\t{\n\t\t\t\t\t\"ClusterName\": \"cluster\",\n",
                    "rendered": {
                      "text": "\t\twantMetricCnt int\n\t\twant          []map[string]string\n\t}{\n\t\t\"neuronMetricsProcessedWithNoPodCorrelation\": {\n\t\t\tmetrics: generateNeuronMetrics(\"neuron_execution_latency\", []map[string]string{\n\t\t\t\t{\n\t\t\t\t\t\"ClusterName\": \"cluster\",\n",
                      "markdown": "`\t\twantMetricCnt int\n\t\twant          []map[string]string\n\t}{\n\t\t\"neuronMetricsProcessedWithNoPodCorrelation\": {\n\t\t\tmetrics: generateNeuronMetrics(\"neuron_execution_latency\", []map[string]string{\n\t\t\t\t{\n\t\t\t\t\t\"ClusterName\": \"cluster\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/gpuattributes/processor.go"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 34,
                  "endLine": 227,
                  "endColumn": 39,
                  "snippet": {
                    "text": "func dropResourceMetricAttributes(resourceMetric pmetric.ResourceMetrics) {\n\tserviceNameKey := \"service.name\"\n\tattributes := resourceMetric.Resource().Attributes()\n\tserviceName, exists := attributes.Get(serviceNameKey)\n\n\tif exists && (serviceName.Str() == \"containerInsightsNeuronMonitorScraper\" || serviceName.Str() == \"containerInsightsDCGMExporterScraper\") {\n\t\tresourceMetric.Resource().Attributes().Clear()\n",
                    "rendered": {
                      "text": "func dropResourceMetricAttributes(resourceMetric pmetric.ResourceMetrics) {\n\tserviceNameKey := \"service.name\"\n\tattributes := resourceMetric.Resource().Attributes()\n\tserviceName, exists := attributes.Get(serviceNameKey)\n\n\tif exists && (serviceName.Str() == \"containerInsightsNeuronMonitorScraper\" || serviceName.Str() == \"containerInsightsDCGMExporterScraper\") {\n\t\tresourceMetric.Resource().Attributes().Clear()\n",
                      "markdown": "`func dropResourceMetricAttributes(resourceMetric pmetric.ResourceMetrics) {\n\tserviceNameKey := \"service.name\"\n\tattributes := resourceMetric.Resource().Attributes()\n\tserviceName, exists := attributes.Get(serviceNameKey)\n\n\tif exists && (serviceName.Str() == \"containerInsightsNeuronMonitorScraper\" || serviceName.Str() == \"containerInsightsDCGMExporterScraper\") {\n\t\tresourceMetric.Resource().Attributes().Clear()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/gpuattributes/processor.go"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 35,
                  "endLine": 217,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\t\t}\n\n\t\tdps.RemoveIf(func(dp pmetric.NumberDataPoint) bool {\n\t\t\t_, hasPodInfo := dp.Attributes().Get(internal.PodName)\n\t\t\treturn !hasPodInfo && !hasPodAtResource\n\t\t})\n\t\treturn dps.Len() == 0\n",
                    "rendered": {
                      "text": "\t\t}\n\n\t\tdps.RemoveIf(func(dp pmetric.NumberDataPoint) bool {\n\t\t\t_, hasPodInfo := dp.Attributes().Get(internal.PodName)\n\t\t\treturn !hasPodInfo && !hasPodAtResource\n\t\t})\n\t\treturn dps.Len() == 0\n",
                      "markdown": "`\t\t}\n\n\t\tdps.RemoveIf(func(dp pmetric.NumberDataPoint) bool {\n\t\t\t_, hasPodInfo := dp.Attributes().Get(internal.PodName)\n\t\t\treturn !hasPodInfo && !hasPodAtResource\n\t\t})\n\t\treturn dps.Len() == 0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/gpuattributes/processor.go"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 43,
                  "endLine": 205,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t\treturn false\n\t\t}\n\n\t\t_, hasPodAtResource := resourceAttributes.Get(internal.PodName)\n\t\tvar dps pmetric.NumberDataPointSlice\n\t\tswitch m.Type() {\n\t\tcase pmetric.MetricTypeGauge:\n",
                    "rendered": {
                      "text": "\t\t\treturn false\n\t\t}\n\n\t\t_, hasPodAtResource := resourceAttributes.Get(internal.PodName)\n\t\tvar dps pmetric.NumberDataPointSlice\n\t\tswitch m.Type() {\n\t\tcase pmetric.MetricTypeGauge:\n",
                      "markdown": "`\t\t\treturn false\n\t\t}\n\n\t\t_, hasPodAtResource := resourceAttributes.Get(internal.PodName)\n\t\tvar dps pmetric.NumberDataPointSlice\n\t\tswitch m.Type() {\n\t\tcase pmetric.MetricTypeGauge:\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/gpuattributes/processor.go"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 25,
                  "endLine": 171,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\t\tif len(ls) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tif av, ok := attributes.Get(lk); ok {\n\t\t\t// decode json formatted string value into a map then encode again after filtering elements\n\t\t\tvar blob map[string]json.RawMessage\n\t\t\tstrVal := av.Str()\n",
                    "rendered": {
                      "text": "\t\tif len(ls) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tif av, ok := attributes.Get(lk); ok {\n\t\t\t// decode json formatted string value into a map then encode again after filtering elements\n\t\t\tvar blob map[string]json.RawMessage\n\t\t\tstrVal := av.Str()\n",
                      "markdown": "`\t\tif len(ls) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tif av, ok := attributes.Get(lk); ok {\n\t\t\t// decode json formatted string value into a map then encode again after filtering elements\n\t\t\tvar blob map[string]json.RawMessage\n\t\t\tstrVal := av.Str()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/gpuattributes/processor.go"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 10,
                  "endLine": 28,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\tnodeMetricPrefix      = \"node_\"\n)\n\n// schemas at each resource level\n// - Container Schema\n//   - ClusterName\n//   - ClusterName, Namespace, PodName, ContainerName\n",
                    "rendered": {
                      "text": "\tnodeMetricPrefix      = \"node_\"\n)\n\n// schemas at each resource level\n// - Container Schema\n//   - ClusterName\n//   - ClusterName, Namespace, PodName, ContainerName\n",
                      "markdown": "`\tnodeMetricPrefix      = \"node_\"\n)\n\n// schemas at each resource level\n// - Container Schema\n//   - ClusterName\n//   - ClusterName, Namespace, PodName, ContainerName\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/gpuattributes/processor.go"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 4,
                  "endLine": 44,
                  "snippet": {
                    "text": "//   - ClusterName, Namespace, PodName, FullPodName\n//   - ClusterName, Namespace, PodName, FullPodName, GpuDevice\n//\n// - Node\n//   - ClusterName\n//   - ClusterName, InstanceIdKey, NodeName\n//   - ClusterName, InstanceIdKey, NodeName, GpuDevice\ntype gpuAttributesProcessor struct {\n",
                    "rendered": {
                      "text": "//   - ClusterName, Namespace, PodName, FullPodName\n//   - ClusterName, Namespace, PodName, FullPodName, GpuDevice\n//\n// - Node\n//   - ClusterName\n//   - ClusterName, InstanceIdKey, NodeName\n//   - ClusterName, InstanceIdKey, NodeName, GpuDevice\ntype gpuAttributesProcessor struct {\n",
                      "markdown": "`//   - ClusterName, Namespace, PodName, FullPodName\n//   - ClusterName, Namespace, PodName, FullPodName, GpuDevice\n//\n// - Node\n//   - ClusterName\n//   - ClusterName, InstanceIdKey, NodeName\n//   - ClusterName, InstanceIdKey, NodeName, GpuDevice\ntype gpuAttributesProcessor struct {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/gpuattributes/processor.go"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 30,
                  "endLine": 39,
                  "snippet": {
                    "text": "// - Pod\n//   - ClusterName\n//   - ClusterName, Namespace\n//   - ClusterName, Namespace, Service\n//   - ClusterName, Namespace, PodName\n//   - ClusterName, Namespace, PodName, FullPodName\n//   - ClusterName, Namespace, PodName, FullPodName, GpuDevice\n//\n",
                    "rendered": {
                      "text": "// - Pod\n//   - ClusterName\n//   - ClusterName, Namespace\n//   - ClusterName, Namespace, Service\n//   - ClusterName, Namespace, PodName\n//   - ClusterName, Namespace, PodName, FullPodName\n//   - ClusterName, Namespace, PodName, FullPodName, GpuDevice\n//\n",
                      "markdown": "`// - Pod\n//   - ClusterName\n//   - ClusterName, Namespace\n//   - ClusterName, Namespace, Service\n//   - ClusterName, Namespace, PodName\n//   - ClusterName, Namespace, PodName, FullPodName\n//   - ClusterName, Namespace, PodName, FullPodName, GpuDevice\n//\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/metrics/metrics_collect/statsd/statsd_test.go"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 91,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n\t_, actual := obj.ApplyRule(input)\n\n\texpect := []interface{}{\n\t\tmap[string]interface{}{\n\t\t\t\"service_address\":     \":8125\",\n\t\t\t\"interval\":            \"10s\",\n",
                    "rendered": {
                      "text": "\n\t_, actual := obj.ApplyRule(input)\n\n\texpect := []interface{}{\n\t\tmap[string]interface{}{\n\t\t\t\"service_address\":     \":8125\",\n\t\t\t\"interval\":            \"10s\",\n",
                      "markdown": "`\n\t_, actual := obj.ApplyRule(input)\n\n\texpect := []interface{}{\n\t\tmap[string]interface{}{\n\t\t\t\"service_address\":     \":8125\",\n\t\t\t\"interval\":            \"10s\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/metrics/metrics_collect/statsd/statsd_test.go"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n\t_, actual := obj.ApplyRule(input)\n\n\texpect := []interface{}{\n\t\tmap[string]interface{}{\n\t\t\t\"service_address\":     \":8125\",\n\t\t\t\"interval\":            \"10s\",\n",
                    "rendered": {
                      "text": "\n\t_, actual := obj.ApplyRule(input)\n\n\texpect := []interface{}{\n\t\tmap[string]interface{}{\n\t\t\t\"service_address\":     \":8125\",\n\t\t\t\"interval\":            \"10s\",\n",
                      "markdown": "`\n\t_, actual := obj.ApplyRule(input)\n\n\texpect := []interface{}{\n\t\tmap[string]interface{}{\n\t\t\t\"service_address\":     \":8125\",\n\t\t\t\"interval\":            \"10s\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/metrics/metrics_collect/statsd/statsd_test.go"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n\t_, actual := obj.ApplyRule(input)\n\n\texpect := []interface{}{\n\t\tmap[string]interface{}{\n\t\t\t\"service_address\":     \":8125\",\n\t\t\t\"interval\":            \"10s\",\n",
                    "rendered": {
                      "text": "\n\t_, actual := obj.ApplyRule(input)\n\n\texpect := []interface{}{\n\t\tmap[string]interface{}{\n\t\t\t\"service_address\":     \":8125\",\n\t\t\t\"interval\":            \"10s\",\n",
                      "markdown": "`\n\t_, actual := obj.ApplyRule(input)\n\n\texpect := []interface{}{\n\t\tmap[string]interface{}{\n\t\t\t\"service_address\":     \":8125\",\n\t\t\t\"interval\":            \"10s\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/metrics/metrics_collect/statsd/statsd_test.go"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 26,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n\t_, actual := obj.ApplyRule(input)\n\n\texpect := []interface{}{\n\t\tmap[string]interface{}{\n\t\t\t\"allowed_pending_messages\": 10000,\n\t\t\t\"service_address\":          \":12345\",\n",
                    "rendered": {
                      "text": "\n\t_, actual := obj.ApplyRule(input)\n\n\texpect := []interface{}{\n\t\tmap[string]interface{}{\n\t\t\t\"allowed_pending_messages\": 10000,\n\t\t\t\"service_address\":          \":12345\",\n",
                      "markdown": "`\n\t_, actual := obj.ApplyRule(input)\n\n\texpect := []interface{}{\n\t\tmap[string]interface{}{\n\t\t\t\"allowed_pending_messages\": 10000,\n\t\t\t\"service_address\":          \":12345\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/metrics/metrics_collect/collectd/collectd_test.go"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n\t_, actual := obj.ApplyRule(input)\n\n\texpect := []interface{}{\n\t\tmap[string]interface{}{\n\t\t\t\"data_format\":             \"collectd\",\n\t\t\t\"service_address\":         \"udp://127.0.0.1:25826\",\n",
                    "rendered": {
                      "text": "\n\t_, actual := obj.ApplyRule(input)\n\n\texpect := []interface{}{\n\t\tmap[string]interface{}{\n\t\t\t\"data_format\":             \"collectd\",\n\t\t\t\"service_address\":         \"udp://127.0.0.1:25826\",\n",
                      "markdown": "`\n\t_, actual := obj.ApplyRule(input)\n\n\texpect := []interface{}{\n\t\tmap[string]interface{}{\n\t\t\t\"data_format\":             \"collectd\",\n\t\t\t\"service_address\":         \"udp://127.0.0.1:25826\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/metrics/metrics_collect/collectd/collectd_test.go"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 28,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n\t_, actual := obj.ApplyRule(input)\n\n\texpect := []interface{}{\n\t\tmap[string]interface{}{\n\t\t\t\"data_format\":             \"collectd\",\n\t\t\t\"service_address\":         \"udp://127.0.0.1:123\",\n",
                    "rendered": {
                      "text": "\n\t_, actual := obj.ApplyRule(input)\n\n\texpect := []interface{}{\n\t\tmap[string]interface{}{\n\t\t\t\"data_format\":             \"collectd\",\n\t\t\t\"service_address\":         \"udp://127.0.0.1:123\",\n",
                      "markdown": "`\n\t_, actual := obj.ApplyRule(input)\n\n\texpect := []interface{}{\n\t\tmap[string]interface{}{\n\t\t\t\"data_format\":             \"collectd\",\n\t\t\t\"service_address\":         \"udp://127.0.0.1:123\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/pipeline/jmx/translators_test.go"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 17,
                  "endLine": 106,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\t\t\trequire.NotNil(t, got)\n\t\t\t\tassert.Equal(t, len(testCase.want), got.Len())\n\t\t\t\tfor _, id := range testCase.want {\n\t\t\t\t\t_, ok := got.Get(id)\n\t\t\t\t\tassert.True(t, ok)\n\t\t\t\t}\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\t\trequire.NotNil(t, got)\n\t\t\t\tassert.Equal(t, len(testCase.want), got.Len())\n\t\t\t\tfor _, id := range testCase.want {\n\t\t\t\t\t_, ok := got.Get(id)\n\t\t\t\t\tassert.True(t, ok)\n\t\t\t\t}\n\t\t\t}\n",
                      "markdown": "`\t\t\t\trequire.NotNil(t, got)\n\t\t\t\tassert.Equal(t, len(testCase.want), got.Len())\n\t\t\t\tfor _, id := range testCase.want {\n\t\t\t\t\t_, ok := got.Get(id)\n\t\t\t\t\tassert.True(t, ok)\n\t\t\t\t}\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/pipeline/jmx/translators.go"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 17,
                  "endLine": 16,
                  "endColumn": 22,
                  "snippet": {
                    "text": "func NewTranslators(conf *confmap.Conf) pipeline.TranslatorMap {\n\ttranslators := common.NewTranslatorMap[*common.ComponentTranslators]()\n\tdestinations := common.GetMetricsDestinations(conf)\n\tswitch v := conf.Get(common.JmxConfigKey).(type) {\n\tcase []any:\n\t\tfor index := range v {\n\t\t\tfor _, destination := range destinations {\n",
                    "rendered": {
                      "text": "func NewTranslators(conf *confmap.Conf) pipeline.TranslatorMap {\n\ttranslators := common.NewTranslatorMap[*common.ComponentTranslators]()\n\tdestinations := common.GetMetricsDestinations(conf)\n\tswitch v := conf.Get(common.JmxConfigKey).(type) {\n\tcase []any:\n\t\tfor index := range v {\n\t\t\tfor _, destination := range destinations {\n",
                      "markdown": "`func NewTranslators(conf *confmap.Conf) pipeline.TranslatorMap {\n\ttranslators := common.NewTranslatorMap[*common.ComponentTranslators]()\n\tdestinations := common.GetMetricsDestinations(conf)\n\tswitch v := conf.Get(common.JmxConfigKey).(type) {\n\tcase []any:\n\t\tfor index := range v {\n\t\t\tfor _, destination := range destinations {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/translate_otel_test.go"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 14,
                  "endLine": 238,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\tRegisterPipeline(first, second)\n\tassert.Equal(t, 1, registry.Len())\n\ttm.Merge(registry)\n\tgot, ok := tm.Get(component.NewID(testType))\n\tassert.True(t, ok)\n\tassert.Equal(t, second.version, got.(*testTranslator).version)\n\tassert.NotEqual(t, first.version, got.(*testTranslator).version)\n",
                    "rendered": {
                      "text": "\tRegisterPipeline(first, second)\n\tassert.Equal(t, 1, registry.Len())\n\ttm.Merge(registry)\n\tgot, ok := tm.Get(component.NewID(testType))\n\tassert.True(t, ok)\n\tassert.Equal(t, second.version, got.(*testTranslator).version)\n\tassert.NotEqual(t, first.version, got.(*testTranslator).version)\n",
                      "markdown": "`\tRegisterPipeline(first, second)\n\tassert.Equal(t, 1, registry.Len())\n\ttm.Merge(registry)\n\tgot, ok := tm.Get(component.NewID(testType))\n\tassert.True(t, ok)\n\tassert.Equal(t, second.version, got.(*testTranslator).version)\n\tassert.NotEqual(t, first.version, got.(*testTranslator).version)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/translate_otel_test.go"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 2,
                  "endLine": 160,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\t\t\tdetector:       eksdetector.TestEKSDetector,\n\t\t\tisEKSDataStore: eksdetector.TestIsEKSCacheEKS,\n\t\t},\n\t\t\"WithAppSignalsFallbackMultipleMetricsReceiversConfig\": {\n\t\t\tinput: map[string]interface{}{\n\t\t\t\t\"logs\": map[string]interface{}{\n\t\t\t\t\t\"metrics_collected\": map[string]interface{}{\n",
                    "rendered": {
                      "text": "\t\t\tdetector:       eksdetector.TestEKSDetector,\n\t\t\tisEKSDataStore: eksdetector.TestIsEKSCacheEKS,\n\t\t},\n\t\t\"WithAppSignalsFallbackMultipleMetricsReceiversConfig\": {\n\t\t\tinput: map[string]interface{}{\n\t\t\t\t\"logs\": map[string]interface{}{\n\t\t\t\t\t\"metrics_collected\": map[string]interface{}{\n",
                      "markdown": "`\t\t\tdetector:       eksdetector.TestEKSDetector,\n\t\t\tisEKSDataStore: eksdetector.TestIsEKSCacheEKS,\n\t\t},\n\t\t\"WithAppSignalsFallbackMultipleMetricsReceiversConfig\": {\n\t\t\tinput: map[string]interface{}{\n\t\t\t\t\"logs\": map[string]interface{}{\n\t\t\t\t\t\"metrics_collected\": map[string]interface{}{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/translate_otel_test.go"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 2,
                  "endLine": 144,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\t\t\tdetector:       eksdetector.TestEKSDetector,\n\t\t\tisEKSDataStore: eksdetector.TestIsEKSCacheEKS,\n\t\t},\n\t\t\"WithAppSignalsFallbackMetricsAndTracesEnabled\": {\n\t\t\tinput: map[string]interface{}{\n\t\t\t\t\"logs\": map[string]interface{}{\n\t\t\t\t\t\"metrics_collected\": map[string]interface{}{\n",
                    "rendered": {
                      "text": "\t\t\tdetector:       eksdetector.TestEKSDetector,\n\t\t\tisEKSDataStore: eksdetector.TestIsEKSCacheEKS,\n\t\t},\n\t\t\"WithAppSignalsFallbackMetricsAndTracesEnabled\": {\n\t\t\tinput: map[string]interface{}{\n\t\t\t\t\"logs\": map[string]interface{}{\n\t\t\t\t\t\"metrics_collected\": map[string]interface{}{\n",
                      "markdown": "`\t\t\tdetector:       eksdetector.TestEKSDetector,\n\t\t\tisEKSDataStore: eksdetector.TestIsEKSCacheEKS,\n\t\t},\n\t\t\"WithAppSignalsFallbackMetricsAndTracesEnabled\": {\n\t\t\tinput: map[string]interface{}{\n\t\t\t\t\"logs\": map[string]interface{}{\n\t\t\t\t\t\"metrics_collected\": map[string]interface{}{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/translate_otel_test.go"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 2,
                  "endLine": 103,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t\tdetector:       eksdetector.TestEKSDetector,\n\t\t\tisEKSDataStore: eksdetector.TestIsEKSCacheEKS,\n\t\t},\n\t\t\"WithAppSignalsMultipleMetricsReceiversConfig\": {\n\t\t\tinput: map[string]interface{}{\n\t\t\t\t\"logs\": map[string]interface{}{\n\t\t\t\t\t\"metrics_collected\": map[string]interface{}{\n",
                    "rendered": {
                      "text": "\t\t\tdetector:       eksdetector.TestEKSDetector,\n\t\t\tisEKSDataStore: eksdetector.TestIsEKSCacheEKS,\n\t\t},\n\t\t\"WithAppSignalsMultipleMetricsReceiversConfig\": {\n\t\t\tinput: map[string]interface{}{\n\t\t\t\t\"logs\": map[string]interface{}{\n\t\t\t\t\t\"metrics_collected\": map[string]interface{}{\n",
                      "markdown": "`\t\t\tdetector:       eksdetector.TestEKSDetector,\n\t\t\tisEKSDataStore: eksdetector.TestIsEKSCacheEKS,\n\t\t},\n\t\t\"WithAppSignalsMultipleMetricsReceiversConfig\": {\n\t\t\tinput: map[string]interface{}{\n\t\t\t\t\"logs\": map[string]interface{}{\n\t\t\t\t\t\"metrics_collected\": map[string]interface{}{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/logger/logger_test.go"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 26,
                  "endLine": 183,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tdefer SetLevel(loggerLevel)\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tbuf := buffer.NewPool().Get()\n\t\t\tlogger, _ := NewLogger(bufio.NewWriter(buf), zap.NewAtomicLevelAt(zapcore.InfoLevel))\n\t\t\tSetLevel(tt.args.level)\n\t\t\tlogger.Debug(\"debug\")\n",
                    "rendered": {
                      "text": "\tdefer SetLevel(loggerLevel)\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tbuf := buffer.NewPool().Get()\n\t\t\tlogger, _ := NewLogger(bufio.NewWriter(buf), zap.NewAtomicLevelAt(zapcore.InfoLevel))\n\t\t\tSetLevel(tt.args.level)\n\t\t\tlogger.Debug(\"debug\")\n",
                      "markdown": "`\tdefer SetLevel(loggerLevel)\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tbuf := buffer.NewPool().Get()\n\t\t\tlogger, _ := NewLogger(bufio.NewWriter(buf), zap.NewAtomicLevelAt(zapcore.InfoLevel))\n\t\t\tSetLevel(tt.args.level)\n\t\t\tlogger.Debug(\"debug\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/logger/logger_test.go"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 100,
                  "endLine": 194,
                  "endColumn": 106,
                  "snippet": {
                    "text": " find log line (%t)\", buf.String(), tt.want.warn)\n\t\t\tassert.Equalf(t, strings.Contains(\"I!\", buf.String()), tt.want.error, \"found log line (%s) should find log line (%t)\", buf.String(), tt.want.info)\n\t\t\tassert.Equalf(t, strings.Contains(\"D!\", buf.String()), tt.want.error, \"found log line (%s) should find log line (%t)\", buf.String(), tt.want.debug)\n\t\t})\n\t}\n}\n\ntype stringer struct {\n}\n\nfunc (stringer stringer) String() string {\n\treturn \"any\"\n}\n\nfunc TestTelegrafWrapperEncoder_EncodeEntry(t1 *testing.T) {\n\ttype args struct {\n\t\te zapcore.Entry\n\t\tf []zapcore.Field\n\t}\n\tcurrentTimestamp := time.Now()\n\ttes",
                    "rendered": {
                      "text": " find log line (%t)\", buf.String(), tt.want.warn)\n\t\t\tassert.Equalf(t, strings.Contains(\"I!\", buf.String()), tt.want.error, \"found log line (%s) should find log line (%t)\", buf.String(), tt.want.info)\n\t\t\tassert.Equalf(t, strings.Contains(\"D!\", buf.String()), tt.want.error, \"found log line (%s) should find log line (%t)\", buf.String(), tt.want.debug)\n\t\t})\n\t}\n}\n\ntype stringer struct {\n}\n\nfunc (stringer stringer) String() string {\n\treturn \"any\"\n}\n\nfunc TestTelegrafWrapperEncoder_EncodeEntry(t1 *testing.T) {\n\ttype args struct {\n\t\te zapcore.Entry\n\t\tf []zapcore.Field\n\t}\n\tcurrentTimestamp := time.Now()\n\ttes",
                      "markdown": "` find log line (%t)\", buf.String(), tt.want.warn)\n\t\t\tassert.Equalf(t, strings.Contains(\"I!\", buf.String()), tt.want.error, \"found log line (%s) should find log line (%t)\", buf.String(), tt.want.info)\n\t\t\tassert.Equalf(t, strings.Contains(\"D!\", buf.String()), tt.want.error, \"found log line (%s) should find log line (%t)\", buf.String(), tt.want.debug)\n\t\t})\n\t}\n}\n\ntype stringer struct {\n}\n\nfunc (stringer stringer) String() string {\n\treturn \"any\"\n}\n\nfunc TestTelegrafWrapperEncoder_EncodeEntry(t1 *testing.T) {\n\ttype args struct {\n\t\te zapcore.Entry\n\t\tf []zapcore.Field\n\t}\n\tcurrentTimestamp := time.Now()\n\ttes`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/logger/logger_test.go"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 100,
                  "endLine": 193,
                  "endColumn": 106,
                  "snippet": {
                    "text": "find log line (%t)\", buf.String(), tt.want.error)\n\t\t\tassert.Equalf(t, strings.Contains(\"W!\", buf.String()), tt.want.error, \"found log line (%s) should find log line (%t)\", buf.String(), tt.want.warn)\n\t\t\tassert.Equalf(t, strings.Contains(\"I!\", buf.String()), tt.want.error, \"found log line (%s) should find log line (%t)\", buf.String(), tt.want.info)\n\t\t\tassert.Equalf(t, strings.Contains(\"D!\", buf.String()), tt.want.error, \"found log line (%s) should find log line (%t)\", buf.String(), tt.want.debug)\n\t\t})\n\t}\n}\n\ntype stringer struct {\n}\n\nfunc (stringer stringer) String() string {\n\treturn \"any\"\n}\n\nfunc Tes",
                    "rendered": {
                      "text": "find log line (%t)\", buf.String(), tt.want.error)\n\t\t\tassert.Equalf(t, strings.Contains(\"W!\", buf.String()), tt.want.error, \"found log line (%s) should find log line (%t)\", buf.String(), tt.want.warn)\n\t\t\tassert.Equalf(t, strings.Contains(\"I!\", buf.String()), tt.want.error, \"found log line (%s) should find log line (%t)\", buf.String(), tt.want.info)\n\t\t\tassert.Equalf(t, strings.Contains(\"D!\", buf.String()), tt.want.error, \"found log line (%s) should find log line (%t)\", buf.String(), tt.want.debug)\n\t\t})\n\t}\n}\n\ntype stringer struct {\n}\n\nfunc (stringer stringer) String() string {\n\treturn \"any\"\n}\n\nfunc Tes",
                      "markdown": "`find log line (%t)\", buf.String(), tt.want.error)\n\t\t\tassert.Equalf(t, strings.Contains(\"W!\", buf.String()), tt.want.error, \"found log line (%s) should find log line (%t)\", buf.String(), tt.want.warn)\n\t\t\tassert.Equalf(t, strings.Contains(\"I!\", buf.String()), tt.want.error, \"found log line (%s) should find log line (%t)\", buf.String(), tt.want.info)\n\t\t\tassert.Equalf(t, strings.Contains(\"D!\", buf.String()), tt.want.error, \"found log line (%s) should find log line (%t)\", buf.String(), tt.want.debug)\n\t\t})\n\t}\n}\n\ntype stringer struct {\n}\n\nfunc (stringer stringer) String() string {\n\treturn \"any\"\n}\n\nfunc Tes`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/logger/logger_test.go"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 100,
                  "endLine": 192,
                  "endColumn": 106,
                  "snippet": {
                    "text": "l, tt.args.level, \"SetLevel(%v)\", tt.args.level)\n\t\t\tassert.Equalf(t, strings.Contains(\"E!\", buf.String()), tt.want.error, \"found log line (%s) should find log line (%t)\", buf.String(), tt.want.error)\n\t\t\tassert.Equalf(t, strings.Contains(\"W!\", buf.String()), tt.want.error, \"found log line (%s) should find log line (%t)\", buf.String(), tt.want.warn)\n\t\t\tassert.Equalf(t, strings.Contains(\"I!\", buf.String()), tt.want.error, \"found log line (%s) should find log line (%t)\", buf.String(), tt.want.info)\n\t\t\tassert.Equalf(t, strings.Contains(\"D!\", buf.String()), tt.want.error, \"found log line (%s) should find ",
                    "rendered": {
                      "text": "l, tt.args.level, \"SetLevel(%v)\", tt.args.level)\n\t\t\tassert.Equalf(t, strings.Contains(\"E!\", buf.String()), tt.want.error, \"found log line (%s) should find log line (%t)\", buf.String(), tt.want.error)\n\t\t\tassert.Equalf(t, strings.Contains(\"W!\", buf.String()), tt.want.error, \"found log line (%s) should find log line (%t)\", buf.String(), tt.want.warn)\n\t\t\tassert.Equalf(t, strings.Contains(\"I!\", buf.String()), tt.want.error, \"found log line (%s) should find log line (%t)\", buf.String(), tt.want.info)\n\t\t\tassert.Equalf(t, strings.Contains(\"D!\", buf.String()), tt.want.error, \"found log line (%s) should find ",
                      "markdown": "`l, tt.args.level, \"SetLevel(%v)\", tt.args.level)\n\t\t\tassert.Equalf(t, strings.Contains(\"E!\", buf.String()), tt.want.error, \"found log line (%s) should find log line (%t)\", buf.String(), tt.want.error)\n\t\t\tassert.Equalf(t, strings.Contains(\"W!\", buf.String()), tt.want.error, \"found log line (%s) should find log line (%t)\", buf.String(), tt.want.warn)\n\t\t\tassert.Equalf(t, strings.Contains(\"I!\", buf.String()), tt.want.error, \"found log line (%s) should find log line (%t)\", buf.String(), tt.want.info)\n\t\t\tassert.Equalf(t, strings.Contains(\"D!\", buf.String()), tt.want.error, \"found log line (%s) should find `"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/logger/logger_test.go"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 100,
                  "endLine": 191,
                  "endColumn": 106,
                  "snippet": {
                    "text": "\tSetLevel(tt.args.level)\n\t\t\tlogger.Debug(\"debug\")\n\t\t\tlogger.Info(\"info\")\n\t\t\tlogger.Warn(\"warn\")\n\t\t\tlogger.Error(\"error\")\n\t\t\tassert.Equalf(t, loggerLevel, tt.args.level, \"SetLevel(%v)\", tt.args.level)\n\t\t\tassert.Equalf(t, strings.Contains(\"E!\", buf.String()), tt.want.error, \"found log line (%s) should find log line (%t)\", buf.String(), tt.want.error)\n\t\t\tassert.Equalf(t, strings.Contains(\"W!\", buf.String()), tt.want.error, \"found log line (%s) should find log line (%t)\", buf.String(), tt.want.warn)\n\t\t\tassert.Equalf(t, strings.Contains(\"I!\", buf.String()), tt.want.error, \"found log line (%s) should find",
                    "rendered": {
                      "text": "\tSetLevel(tt.args.level)\n\t\t\tlogger.Debug(\"debug\")\n\t\t\tlogger.Info(\"info\")\n\t\t\tlogger.Warn(\"warn\")\n\t\t\tlogger.Error(\"error\")\n\t\t\tassert.Equalf(t, loggerLevel, tt.args.level, \"SetLevel(%v)\", tt.args.level)\n\t\t\tassert.Equalf(t, strings.Contains(\"E!\", buf.String()), tt.want.error, \"found log line (%s) should find log line (%t)\", buf.String(), tt.want.error)\n\t\t\tassert.Equalf(t, strings.Contains(\"W!\", buf.String()), tt.want.error, \"found log line (%s) should find log line (%t)\", buf.String(), tt.want.warn)\n\t\t\tassert.Equalf(t, strings.Contains(\"I!\", buf.String()), tt.want.error, \"found log line (%s) should find",
                      "markdown": "`\tSetLevel(tt.args.level)\n\t\t\tlogger.Debug(\"debug\")\n\t\t\tlogger.Info(\"info\")\n\t\t\tlogger.Warn(\"warn\")\n\t\t\tlogger.Error(\"error\")\n\t\t\tassert.Equalf(t, loggerLevel, tt.args.level, \"SetLevel(%v)\", tt.args.level)\n\t\t\tassert.Equalf(t, strings.Contains(\"E!\", buf.String()), tt.want.error, \"found log line (%s) should find log line (%t)\", buf.String(), tt.want.error)\n\t\t\tassert.Equalf(t, strings.Contains(\"W!\", buf.String()), tt.want.error, \"found log line (%s) should find log line (%t)\", buf.String(), tt.want.warn)\n\t\t\tassert.Equalf(t, strings.Contains(\"I!\", buf.String()), tt.want.error, \"found log line (%s) should find`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/logger/logger.go"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 24,
                  "endLine": 64,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\tif err != nil {\n\t\treturn nil, err\n\t}\n\tbuf := buffer.NewPool().Get()\n\tlevelLetter := ConvertToLetterLevel(e.Level)\n\tbuf.AppendString(levelLetter + \"! \")\n\tbuf.AppendString(entry.String())\n",
                    "rendered": {
                      "text": "\tif err != nil {\n\t\treturn nil, err\n\t}\n\tbuf := buffer.NewPool().Get()\n\tlevelLetter := ConvertToLetterLevel(e.Level)\n\tbuf.AppendString(levelLetter + \"! \")\n\tbuf.AppendString(entry.String())\n",
                      "markdown": "`\tif err != nil {\n\t\treturn nil, err\n\t}\n\tbuf := buffer.NewPool().Get()\n\tlevelLetter := ConvertToLetterLevel(e.Level)\n\tbuf.AppendString(levelLetter + \"! \")\n\tbuf.AppendString(entry.String())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/debian/preinst"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 4,
                  "endLine": 10,
                  "endColumn": 10,
                  "snippet": {
                    "text": "     /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop\nfi\n\nif ! grep \"^cwagent:\" /etc/group >/dev/null 2>&1; then\n     groupadd -r cwagent >/dev/null 2>&1\n     echo \"create group cwagent, result: $?\"\nfi\n",
                    "rendered": {
                      "text": "     /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop\nfi\n\nif ! grep \"^cwagent:\" /etc/group >/dev/null 2>&1; then\n     groupadd -r cwagent >/dev/null 2>&1\n     echo \"create group cwagent, result: $?\"\nfi\n",
                      "markdown": "`     /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop\nfi\n\nif ! grep \"^cwagent:\" /etc/group >/dev/null 2>&1; then\n     groupadd -r cwagent >/dev/null 2>&1\n     echo \"create group cwagent, result: $?\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/windows/amazon-cloudwatch-agent-ctl.ps1"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 5,
                  "endLine": 405,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        }\r\n    }\r\n\r\n    & cmd /c \"`\"${CWAProgramFiles}\\amazon-cloudwatch-agent.exe`\" --setenv CWAGENT_LOG_LEVEL=${LogLevel} --envconfig ${ENV_CONFIG} 2>&1\"\r\n    CheckCMDResult \"\" \"Set CWAGENT_LOG_LEVEL to ${LogLevel}\"\r\n}\r\n\r\n",
                    "rendered": {
                      "text": "        }\r\n    }\r\n\r\n    & cmd /c \"`\"${CWAProgramFiles}\\amazon-cloudwatch-agent.exe`\" --setenv CWAGENT_LOG_LEVEL=${LogLevel} --envconfig ${ENV_CONFIG} 2>&1\"\r\n    CheckCMDResult \"\" \"Set CWAGENT_LOG_LEVEL to ${LogLevel}\"\r\n}\r\n\r\n",
                      "markdown": "`        }\r\n    }\r\n\r\n    & cmd /c \"`\"${CWAProgramFiles}\\amazon-cloudwatch-agent.exe`\" --setenv CWAGENT_LOG_LEVEL=${LogLevel} --envconfig ${ENV_CONFIG} 2>&1\"\r\n    CheckCMDResult \"\" \"Set CWAGENT_LOG_LEVEL to ${LogLevel}\"\r\n}\r\n\r\n`"
                    }
                  },
                  "sourceLanguage": "powershell"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/windows/amazon-cloudwatch-agent-ctl.ps1"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 66,
                  "endLine": 360,
                  "endColumn": 71,
                  "snippet": {
                    "text": "    }\r\n}\r\n\r\n# For exes(non cmlet) the $ErrorActionPreference won't help if run cmd result failed,\r\n# We have to check the $LASTEXITCODE everytime.\r\nFunction CheckCMDResult($ErrorMessage, $SuccessMessage) {\r\n    if ($LASTEXITCODE -ne 0) {\r\n",
                    "rendered": {
                      "text": "    }\r\n}\r\n\r\n# For exes(non cmlet) the $ErrorActionPreference won't help if run cmd result failed,\r\n# We have to check the $LASTEXITCODE everytime.\r\nFunction CheckCMDResult($ErrorMessage, $SuccessMessage) {\r\n    if ($LASTEXITCODE -ne 0) {\r\n",
                      "markdown": "`    }\r\n}\r\n\r\n# For exes(non cmlet) the $ErrorActionPreference won't help if run cmd result failed,\r\n# We have to check the $LASTEXITCODE everytime.\r\nFunction CheckCMDResult($ErrorMessage, $SuccessMessage) {\r\n    if ($LASTEXITCODE -ne 0) {\r\n`"
                    }
                  },
                  "sourceLanguage": "powershell"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/windows/amazon-cloudwatch-agent-ctl.ps1"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 9,
                  "endLine": 336,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        #       default:    only process .tmp files\r\n        #       append:     process both existing files and .tmp files\r\n        #       remove:     only process existing files\r\n        # At this point, all json configs have been validated\r\n        # multi_config:\r\n        #       default:    delete non .tmp file, rename .tmp file\r\n        #       append:     rename .tmp file\r\n",
                    "rendered": {
                      "text": "        #       default:    only process .tmp files\r\n        #       append:     process both existing files and .tmp files\r\n        #       remove:     only process existing files\r\n        # At this point, all json configs have been validated\r\n        # multi_config:\r\n        #       default:    delete non .tmp file, rename .tmp file\r\n        #       append:     rename .tmp file\r\n",
                      "markdown": "`        #       default:    only process .tmp files\r\n        #       append:     process both existing files and .tmp files\r\n        #       remove:     only process existing files\r\n        # At this point, all json configs have been validated\r\n        # multi_config:\r\n        #       default:    delete non .tmp file, rename .tmp file\r\n        #       append:     rename .tmp file\r\n`"
                    }
                  },
                  "sourceLanguage": "powershell"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/windows/amazon-cloudwatch-agent-ctl.ps1"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 9,
                  "endLine": 320,
                  "endColumn": 14,
                  "snippet": {
                    "text": "        CheckCMDResult\r\n        # Let command pass so we can check return code and give user-friendly error-message\r\n        $ErrorActionPreference = \"Continue\"\r\n        & cmd /c \"`\"${CWAProgramFiles}\\amazon-cloudwatch-agent.exe`\" --schematest --config ${TOML} 2>&1\" | Out-File $CVLogFile\r\n        if ($LASTEXITCODE -ne 0) {\r\n            Write-Output \"Configuration validation second phase failed\"\r\n            Write-Output \"======== Error Log ========\"\r\n",
                    "rendered": {
                      "text": "        CheckCMDResult\r\n        # Let command pass so we can check return code and give user-friendly error-message\r\n        $ErrorActionPreference = \"Continue\"\r\n        & cmd /c \"`\"${CWAProgramFiles}\\amazon-cloudwatch-agent.exe`\" --schematest --config ${TOML} 2>&1\" | Out-File $CVLogFile\r\n        if ($LASTEXITCODE -ne 0) {\r\n            Write-Output \"Configuration validation second phase failed\"\r\n            Write-Output \"======== Error Log ========\"\r\n",
                      "markdown": "`        CheckCMDResult\r\n        # Let command pass so we can check return code and give user-friendly error-message\r\n        $ErrorActionPreference = \"Continue\"\r\n        & cmd /c \"`\"${CWAProgramFiles}\\amazon-cloudwatch-agent.exe`\" --schematest --config ${TOML} 2>&1\" | Out-File $CVLogFile\r\n        if ($LASTEXITCODE -ne 0) {\r\n            Write-Output \"Configuration validation second phase failed\"\r\n            Write-Output \"======== Error Log ========\"\r\n`"
                    }
                  },
                  "sourceLanguage": "powershell"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/windows/amazon-cloudwatch-agent-ctl.ps1"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 9,
                  "endLine": 316,
                  "endColumn": 14,
                  "snippet": {
                    "text": "        Remove-Item \"${OTEL_YAML}\" -Force -ErrorAction SilentlyContinue\r\n    } else {\r\n        Write-Output \"Start configuration validation...\"\r\n        & cmd /c \"`\"$CWAProgramFiles\\config-translator.exe`\" --input ${JSON} --input-dir ${JSON_DIR} --output ${TOML} --mode ${param_mode} --config ${COMMON_CONIG} --multi-config ${multi_config} 2>&1\"\r\n        CheckCMDResult\r\n        # Let command pass so we can check return code and give user-friendly error-message\r\n        $ErrorActionPreference = \"Continue\"\r\n",
                    "rendered": {
                      "text": "        Remove-Item \"${OTEL_YAML}\" -Force -ErrorAction SilentlyContinue\r\n    } else {\r\n        Write-Output \"Start configuration validation...\"\r\n        & cmd /c \"`\"$CWAProgramFiles\\config-translator.exe`\" --input ${JSON} --input-dir ${JSON_DIR} --output ${TOML} --mode ${param_mode} --config ${COMMON_CONIG} --multi-config ${multi_config} 2>&1\"\r\n        CheckCMDResult\r\n        # Let command pass so we can check return code and give user-friendly error-message\r\n        $ErrorActionPreference = \"Continue\"\r\n",
                      "markdown": "`        Remove-Item \"${OTEL_YAML}\" -Force -ErrorAction SilentlyContinue\r\n    } else {\r\n        Write-Output \"Start configuration validation...\"\r\n        & cmd /c \"`\"$CWAProgramFiles\\config-translator.exe`\" --input ${JSON} --input-dir ${JSON_DIR} --output ${TOML} --mode ${param_mode} --config ${COMMON_CONIG} --multi-config ${multi_config} 2>&1\"\r\n        CheckCMDResult\r\n        # Let command pass so we can check return code and give user-friendly error-message\r\n        $ErrorActionPreference = \"Continue\"\r\n`"
                    }
                  },
                  "sourceLanguage": "powershell"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/windows/amazon-cloudwatch-agent-ctl.ps1"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 28,
                  "endLine": 375,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    }\r\n}\r\n\r\n# TODO Occasionally metadata service isn't available and this gives a false negative - might\r\n# be a better way to probe\r\n# http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/identify_ec2_instances.html\r\n# Ultimately though an optional 'ec2-override' flag seems necessary for easier testing\r\n",
                    "rendered": {
                      "text": "    }\r\n}\r\n\r\n# TODO Occasionally metadata service isn't available and this gives a false negative - might\r\n# be a better way to probe\r\n# http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/identify_ec2_instances.html\r\n# Ultimately though an optional 'ec2-override' flag seems necessary for easier testing\r\n",
                      "markdown": "`    }\r\n}\r\n\r\n# TODO Occasionally metadata service isn't available and this gives a false negative - might\r\n# be a better way to probe\r\n# http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/identify_ec2_instances.html\r\n# Ultimately though an optional 'ec2-override' flag seems necessary for easier testing\r\n`"
                    }
                  },
                  "sourceLanguage": "powershell"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/windows/amazon-cloudwatch-agent-ctl.ps1"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 11,
                  "endLine": 324,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        if ($LASTEXITCODE -ne 0) {\r\n            Write-Output \"Configuration validation second phase failed\"\r\n            Write-Output \"======== Error Log ========\"\r\n            cat $CVLogFile\r\n            exit 1\r\n        } else {\r\n            Write-Output \"Configuration validation second phase succeeded\"\r\n",
                    "rendered": {
                      "text": "        if ($LASTEXITCODE -ne 0) {\r\n            Write-Output \"Configuration validation second phase failed\"\r\n            Write-Output \"======== Error Log ========\"\r\n            cat $CVLogFile\r\n            exit 1\r\n        } else {\r\n            Write-Output \"Configuration validation second phase succeeded\"\r\n",
                      "markdown": "`        if ($LASTEXITCODE -ne 0) {\r\n            Write-Output \"Configuration validation second phase failed\"\r\n            Write-Output \"======== Error Log ========\"\r\n            cat $CVLogFile\r\n            exit 1\r\n        } else {\r\n            Write-Output \"Configuration validation second phase succeeded\"\r\n`"
                    }
                  },
                  "sourceLanguage": "powershell"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/windows/amazon-cloudwatch-agent-ctl.ps1"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 23,
                  "endLine": 126,
                  "endColumn": 32,
                  "snippet": {
                    "text": " -DisplayName \"${service_display_name}\" -Description \"${service_display_name}\" -DependsOn LanmanServer -BinaryPathName \"${startCommand}\" | Out-Null\r\n        # object returned by New-Service gives errors so retrieve it again\r\n        $svc = Get-Service -Name \"${service_name}\"\r\n        # Configure the service to restart on crashes. It's unclear how to do this through WMI or CIM interface so using sc.exe\r\n        # Restarts immediately on the first two crashes then gives a 2 second sleep after any subsequent crash.\r\n        & sc.exe failure \"${service_name}\" reset= 86400 actions= restart/0/restart/0/resta",
                    "rendered": {
                      "text": " -DisplayName \"${service_display_name}\" -Description \"${service_display_name}\" -DependsOn LanmanServer -BinaryPathName \"${startCommand}\" | Out-Null\r\n        # object returned by New-Service gives errors so retrieve it again\r\n        $svc = Get-Service -Name \"${service_name}\"\r\n        # Configure the service to restart on crashes. It's unclear how to do this through WMI or CIM interface so using sc.exe\r\n        # Restarts immediately on the first two crashes then gives a 2 second sleep after any subsequent crash.\r\n        & sc.exe failure \"${service_name}\" reset= 86400 actions= restart/0/restart/0/resta",
                      "markdown": "` -DisplayName \"${service_display_name}\" -Description \"${service_display_name}\" -DependsOn LanmanServer -BinaryPathName \"${startCommand}\" | Out-Null\r\n        # object returned by New-Service gives errors so retrieve it again\r\n        $svc = Get-Service -Name \"${service_name}\"\r\n        # Configure the service to restart on crashes. It's unclear how to do this through WMI or CIM interface so using sc.exe\r\n        # Restarts immediately on the first two crashes then gives a 2 second sleep after any subsequent crash.\r\n        & sc.exe failure \"${service_name}\" reset= 86400 actions= restart/0/restart/0/resta`"
                    }
                  },
                  "sourceLanguage": "powershell"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/windows/amazon-cloudwatch-agent-ctl.ps1"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 13,
                  "endLine": 89,
                  "endColumn": 22,
                  "snippet": {
                    "text": "$VersionFile =\"${CWAProgramFiles}\\CWAGENT_VERSION\"\r\n$CVLogFile=\"${CWALogDirectory}\\configuration-validation.log\"\r\n\r\n# The windows service registration assumes exactly this .toml file path and name\r\n$TOML=\"${CWAProgramData}\\amazon-cloudwatch-agent.toml\"\r\n$OTEL_YAML=\"${CWAProgramData}\\amazon-cloudwatch-agent.yaml\"\r\n$JSON=\"${CWAProgramData}\\amazon-cloudwatch-agent.json\"\r\n",
                    "rendered": {
                      "text": "$VersionFile =\"${CWAProgramFiles}\\CWAGENT_VERSION\"\r\n$CVLogFile=\"${CWALogDirectory}\\configuration-validation.log\"\r\n\r\n# The windows service registration assumes exactly this .toml file path and name\r\n$TOML=\"${CWAProgramData}\\amazon-cloudwatch-agent.toml\"\r\n$OTEL_YAML=\"${CWAProgramData}\\amazon-cloudwatch-agent.yaml\"\r\n$JSON=\"${CWAProgramData}\\amazon-cloudwatch-agent.json\"\r\n",
                      "markdown": "`$VersionFile =\"${CWAProgramFiles}\\CWAGENT_VERSION\"\r\n$CVLogFile=\"${CWALogDirectory}\\configuration-validation.log\"\r\n\r\n# The windows service registration assumes exactly this .toml file path and name\r\n$TOML=\"${CWAProgramData}\\amazon-cloudwatch-agent.toml\"\r\n$OTEL_YAML=\"${CWAProgramData}\\amazon-cloudwatch-agent.yaml\"\r\n$JSON=\"${CWAProgramData}\\amazon-cloudwatch-agent.json\"\r\n`"
                    }
                  },
                  "sourceLanguage": "powershell"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/dependencies/amazon-cloudwatch-agent-ctl"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 11,
                  "endLine": 300,
                  "endColumn": 15,
                  "snippet": {
                    "text": "          #       default:    only process .tmp files\n          #       append:     process both existing files and .tmp files\n          #       remove:     only process existing files\n          # At this point, all json configs have been validated\n          # multi_config:\n          #       default:    delete non .tmp file, rename .tmp file\n          #       append:     rename .tmp file\n",
                    "rendered": {
                      "text": "          #       default:    only process .tmp files\n          #       append:     process both existing files and .tmp files\n          #       remove:     only process existing files\n          # At this point, all json configs have been validated\n          # multi_config:\n          #       default:    delete non .tmp file, rename .tmp file\n          #       append:     rename .tmp file\n",
                      "markdown": "`          #       default:    only process .tmp files\n          #       append:     process both existing files and .tmp files\n          #       remove:     only process existing files\n          # At this point, all json configs have been validated\n          # multi_config:\n          #       default:    delete non .tmp file, rename .tmp file\n          #       append:     rename .tmp file\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/dependencies/amazon-cloudwatch-agent-ctl"
                },
                "region": {
                  "startLine": 361,
                  "startColumn": 26,
                  "endLine": 361,
                  "endColumn": 32,
                  "snippet": {
                    "text": "     # detect which init system is in use\n     if [ \"$(/sbin/init --version 2>/dev/null | grep -c upstart)\" = 1 ]; then\n          SYSTEMD='false'\n     elif [ \"$(systemctl | grep -c -E '\\-\\.mount\\s')\" = 1 ]; then\n          SYSTEMD='true'\n     elif [ -f /etc/init.d/cron ] && [ ! -h /etc/init.d/cron ]; then\n          echo \"sysv-init is not supported\" >&2\n",
                    "rendered": {
                      "text": "     # detect which init system is in use\n     if [ \"$(/sbin/init --version 2>/dev/null | grep -c upstart)\" = 1 ]; then\n          SYSTEMD='false'\n     elif [ \"$(systemctl | grep -c -E '\\-\\.mount\\s')\" = 1 ]; then\n          SYSTEMD='true'\n     elif [ -f /etc/init.d/cron ] && [ ! -h /etc/init.d/cron ]; then\n          echo \"sysv-init is not supported\" >&2\n",
                      "markdown": "`     # detect which init system is in use\n     if [ \"$(/sbin/init --version 2>/dev/null | grep -c upstart)\" = 1 ]; then\n          SYSTEMD='false'\n     elif [ \"$(systemctl | grep -c -E '\\-\\.mount\\s')\" = 1 ]; then\n          SYSTEMD='true'\n     elif [ -f /etc/init.d/cron ] && [ ! -h /etc/init.d/cron ]; then\n          echo \"sysv-init is not supported\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/dependencies/amazon-cloudwatch-agent-ctl"
                },
                "region": {
                  "startLine": 359,
                  "startColumn": 47,
                  "endLine": 359,
                  "endColumn": 53,
                  "snippet": {
                    "text": "     mode='ec2'\n\n     # detect which init system is in use\n     if [ \"$(/sbin/init --version 2>/dev/null | grep -c upstart)\" = 1 ]; then\n          SYSTEMD='false'\n     elif [ \"$(systemctl | grep -c -E '\\-\\.mount\\s')\" = 1 ]; then\n          SYSTEMD='true'\n",
                    "rendered": {
                      "text": "     mode='ec2'\n\n     # detect which init system is in use\n     if [ \"$(/sbin/init --version 2>/dev/null | grep -c upstart)\" = 1 ]; then\n          SYSTEMD='false'\n     elif [ \"$(systemctl | grep -c -E '\\-\\.mount\\s')\" = 1 ]; then\n          SYSTEMD='true'\n",
                      "markdown": "`     mode='ec2'\n\n     # detect which init system is in use\n     if [ \"$(/sbin/init --version 2>/dev/null | grep -c upstart)\" = 1 ]; then\n          SYSTEMD='false'\n     elif [ \"$(systemctl | grep -c -E '\\-\\.mount\\s')\" = 1 ]; then\n          SYSTEMD='true'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/dependencies/amazon-cloudwatch-agent-ctl"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 19,
                  "endLine": 317,
                  "endColumn": 23,
                  "snippet": {
                    "text": "               done\n          elif [ \"${multi_config}\" = 'append' ]; then\n               for file in \"${JSON_DIR}\"/*.tmp; do\n                    mv -f \"${file}\" \"${JSON_DIR}/$(basename \"${file}\" .tmp)\"\n               done\n          fi\n     fi\n",
                    "rendered": {
                      "text": "               done\n          elif [ \"${multi_config}\" = 'append' ]; then\n               for file in \"${JSON_DIR}\"/*.tmp; do\n                    mv -f \"${file}\" \"${JSON_DIR}/$(basename \"${file}\" .tmp)\"\n               done\n          fi\n     fi\n",
                      "markdown": "`               done\n          elif [ \"${multi_config}\" = 'append' ]; then\n               for file in \"${JSON_DIR}\"/*.tmp; do\n                    mv -f \"${file}\" \"${JSON_DIR}/$(basename \"${file}\" .tmp)\"\n               done\n          fi\n     fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/dependencies/amazon-cloudwatch-agent-ctl"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 24,
                  "endLine": 312,
                  "endColumn": 28,
                  "snippet": {
                    "text": "                    if [ \"${file}\" = \"${base}\" ]; then\n                         rm -f \"${file}\"\n                    else\n                         mv -f \"${file}\" \"${base}\"\n                    fi\n               done\n          elif [ \"${multi_config}\" = 'append' ]; then\n",
                    "rendered": {
                      "text": "                    if [ \"${file}\" = \"${base}\" ]; then\n                         rm -f \"${file}\"\n                    else\n                         mv -f \"${file}\" \"${base}\"\n                    fi\n               done\n          elif [ \"${multi_config}\" = 'append' ]; then\n",
                      "markdown": "`                    if [ \"${file}\" = \"${base}\" ]; then\n                         rm -f \"${file}\"\n                    else\n                         mv -f \"${file}\" \"${base}\"\n                    fi\n               done\n          elif [ \"${multi_config}\" = 'append' ]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/dependencies/amazon-cloudwatch-agent-ctl"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 14,
                  "endLine": 293,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n          chmod ug+rw \"${TOML}\"\n          if [ -f \"${OTEL_YAML}\" ]; then\n               chmod ug+rw \"${OTEL_YAML}\"\n          fi\n\n          # for translator:\n",
                    "rendered": {
                      "text": "\n          chmod ug+rw \"${TOML}\"\n          if [ -f \"${OTEL_YAML}\" ]; then\n               chmod ug+rw \"${OTEL_YAML}\"\n          fi\n\n          # for translator:\n",
                      "markdown": "`\n          chmod ug+rw \"${TOML}\"\n          if [ -f \"${OTEL_YAML}\" ]; then\n               chmod ug+rw \"${OTEL_YAML}\"\n          fi\n\n          # for translator:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/dependencies/amazon-cloudwatch-agent-ctl"
                },
                "region": {
                  "startLine": 291,
                  "startColumn": 9,
                  "endLine": 291,
                  "endColumn": 16,
                  "snippet": {
                    "text": "          echo \"Configuration validation second phase succeeded\"\n          echo \"Configuration validation succeeded\"\n\n          chmod ug+rw \"${TOML}\"\n          if [ -f \"${OTEL_YAML}\" ]; then\n               chmod ug+rw \"${OTEL_YAML}\"\n          fi\n",
                    "rendered": {
                      "text": "          echo \"Configuration validation second phase succeeded\"\n          echo \"Configuration validation succeeded\"\n\n          chmod ug+rw \"${TOML}\"\n          if [ -f \"${OTEL_YAML}\" ]; then\n               chmod ug+rw \"${OTEL_YAML}\"\n          fi\n",
                      "markdown": "`          echo \"Configuration validation second phase succeeded\"\n          echo \"Configuration validation succeeded\"\n\n          chmod ug+rw \"${TOML}\"\n          if [ -f \"${OTEL_YAML}\" ]; then\n               chmod ug+rw \"${OTEL_YAML}\"\n          fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/dependencies/amazon-cloudwatch-agent-ctl"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 14,
                  "endLine": 285,
                  "endColumn": 19,
                  "snippet": {
                    "text": "          if ! ${runAgentSchemaTestCommand} >${CV_LOG_FILE} 2>&1; then\n               echo \"Configuration validation second phase failed\"\n               echo \"======== Error Log ========\"\n               cat ${CV_LOG_FILE}\n               exit 1\n          fi\n          echo \"Configuration validation second phase succeeded\"\n",
                    "rendered": {
                      "text": "          if ! ${runAgentSchemaTestCommand} >${CV_LOG_FILE} 2>&1; then\n               echo \"Configuration validation second phase failed\"\n               echo \"======== Error Log ========\"\n               cat ${CV_LOG_FILE}\n               exit 1\n          fi\n          echo \"Configuration validation second phase succeeded\"\n",
                      "markdown": "`          if ! ${runAgentSchemaTestCommand} >${CV_LOG_FILE} 2>&1; then\n               echo \"Configuration validation second phase failed\"\n               echo \"======== Error Log ========\"\n               cat ${CV_LOG_FILE}\n               exit 1\n          fi\n          echo \"Configuration validation second phase succeeded\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/dependencies/amazon-cloudwatch-agent-ctl"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 50,
                  "endLine": 222,
                  "endColumn": 56,
                  "snippet": {
                    "text": "          fi\n          set -e\n     else\n          if [ \"$(initctl status \"${agent_name}\" | grep -c running)\" = 1 ]; then\n               running='true'\n          fi\n     fi\n",
                    "rendered": {
                      "text": "          fi\n          set -e\n     else\n          if [ \"$(initctl status \"${agent_name}\" | grep -c running)\" = 1 ]; then\n               running='true'\n          fi\n     fi\n",
                      "markdown": "`          fi\n          set -e\n     else\n          if [ \"$(initctl status \"${agent_name}\" | grep -c running)\" = 1 ]; then\n               running='true'\n          fi\n     fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/dependencies/amazon-cloudwatch-agent-ctl"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 12,
                  "endLine": 217,
                  "endColumn": 23,
                  "snippet": {
                    "text": "     running=false\n     if [ \"${SYSTEMD}\" = 'true' ]; then\n          set +e\n          if systemctl is-active \"${agent_name}.service\" 1>/dev/null; then\n               running='true'\n          fi\n          set -e\n",
                    "rendered": {
                      "text": "     running=false\n     if [ \"${SYSTEMD}\" = 'true' ]; then\n          set +e\n          if systemctl is-active \"${agent_name}.service\" 1>/dev/null; then\n               running='true'\n          fi\n          set -e\n",
                      "markdown": "`     running=false\n     if [ \"${SYSTEMD}\" = 'true' ]; then\n          set +e\n          if systemctl is-active \"${agent_name}.service\" 1>/dev/null; then\n               running='true'\n          fi\n          set -e\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/dependencies/amazon-cloudwatch-agent-ctl"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 54,
                  "endLine": 199,
                  "endColumn": 59,
                  "snippet": {
                    "text": "     if [ \"${SYSTEMD}\" = 'true' ]; then\n          agentPid=\"$(systemctl show -p MainPID \"${agent_name}.service\" | sed s/MainPID=//)\"\n     else\n          agentPid=\"$(initctl status \"${agent_name}\" | sed -n s/^.*process\\ //p)\"\n     fi\n\n     starttime_fmt=''\n",
                    "rendered": {
                      "text": "     if [ \"${SYSTEMD}\" = 'true' ]; then\n          agentPid=\"$(systemctl show -p MainPID \"${agent_name}.service\" | sed s/MainPID=//)\"\n     else\n          agentPid=\"$(initctl status \"${agent_name}\" | sed -n s/^.*process\\ //p)\"\n     fi\n\n     starttime_fmt=''\n",
                      "markdown": "`     if [ \"${SYSTEMD}\" = 'true' ]; then\n          agentPid=\"$(systemctl show -p MainPID \"${agent_name}.service\" | sed s/MainPID=//)\"\n     else\n          agentPid=\"$(initctl status \"${agent_name}\" | sed -n s/^.*process\\ //p)\"\n     fi\n\n     starttime_fmt=''\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/dependencies/amazon-cloudwatch-agent-ctl"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 73,
                  "endLine": 197,
                  "endColumn": 78,
                  "snippet": {
                    "text": "\n     agentPid=''\n     if [ \"${SYSTEMD}\" = 'true' ]; then\n          agentPid=\"$(systemctl show -p MainPID \"${agent_name}.service\" | sed s/MainPID=//)\"\n     else\n          agentPid=\"$(initctl status \"${agent_name}\" | sed -n s/^.*process\\ //p)\"\n     fi\n",
                    "rendered": {
                      "text": "\n     agentPid=''\n     if [ \"${SYSTEMD}\" = 'true' ]; then\n          agentPid=\"$(systemctl show -p MainPID \"${agent_name}.service\" | sed s/MainPID=//)\"\n     else\n          agentPid=\"$(initctl status \"${agent_name}\" | sed -n s/^.*process\\ //p)\"\n     fi\n",
                      "markdown": "`\n     agentPid=''\n     if [ \"${SYSTEMD}\" = 'true' ]; then\n          agentPid=\"$(systemctl show -p MainPID \"${agent_name}.service\" | sed s/MainPID=//)\"\n     else\n          agentPid=\"$(initctl status \"${agent_name}\" | sed -n s/^.*process\\ //p)\"\n     fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/dependencies/amazon-cloudwatch-agent-ctl"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 9,
                  "endLine": 172,
                  "endColumn": 20,
                  "snippet": {
                    "text": "     if [ \"${SYSTEMD}\" = 'true' ]; then\n          systemctl disable \"${agent_name}.service\" || return\n          systemctl daemon-reload || return\n          systemctl reset-failed || return\n     fi\n}\n\n",
                    "rendered": {
                      "text": "     if [ \"${SYSTEMD}\" = 'true' ]; then\n          systemctl disable \"${agent_name}.service\" || return\n          systemctl daemon-reload || return\n          systemctl reset-failed || return\n     fi\n}\n\n",
                      "markdown": "`     if [ \"${SYSTEMD}\" = 'true' ]; then\n          systemctl disable \"${agent_name}.service\" || return\n          systemctl daemon-reload || return\n          systemctl reset-failed || return\n     fi\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/dependencies/amazon-cloudwatch-agent-ctl"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 9,
                  "endLine": 171,
                  "endColumn": 20,
                  "snippet": {
                    "text": "     agent_stop \"${agent_name}\"\n     if [ \"${SYSTEMD}\" = 'true' ]; then\n          systemctl disable \"${agent_name}.service\" || return\n          systemctl daemon-reload || return\n          systemctl reset-failed || return\n     fi\n}\n",
                    "rendered": {
                      "text": "     agent_stop \"${agent_name}\"\n     if [ \"${SYSTEMD}\" = 'true' ]; then\n          systemctl disable \"${agent_name}.service\" || return\n          systemctl daemon-reload || return\n          systemctl reset-failed || return\n     fi\n}\n",
                      "markdown": "`     agent_stop \"${agent_name}\"\n     if [ \"${SYSTEMD}\" = 'true' ]; then\n          systemctl disable \"${agent_name}.service\" || return\n          systemctl daemon-reload || return\n          systemctl reset-failed || return\n     fi\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/dependencies/amazon-cloudwatch-agent-ctl"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 9,
                  "endLine": 170,
                  "endColumn": 20,
                  "snippet": {
                    "text": "     agent_name=\"${1:-}\"\n     agent_stop \"${agent_name}\"\n     if [ \"${SYSTEMD}\" = 'true' ]; then\n          systemctl disable \"${agent_name}.service\" || return\n          systemctl daemon-reload || return\n          systemctl reset-failed || return\n     fi\n",
                    "rendered": {
                      "text": "     agent_name=\"${1:-}\"\n     agent_stop \"${agent_name}\"\n     if [ \"${SYSTEMD}\" = 'true' ]; then\n          systemctl disable \"${agent_name}.service\" || return\n          systemctl daemon-reload || return\n          systemctl reset-failed || return\n     fi\n",
                      "markdown": "`     agent_name=\"${1:-}\"\n     agent_stop \"${agent_name}\"\n     if [ \"${SYSTEMD}\" = 'true' ]; then\n          systemctl disable \"${agent_name}.service\" || return\n          systemctl daemon-reload || return\n          systemctl reset-failed || return\n     fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/dependencies/amazon-cloudwatch-agent-ctl"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 9,
                  "endLine": 129,
                  "endColumn": 20,
                  "snippet": {
                    "text": "     fi\n\n     if [ \"${SYSTEMD}\" = 'true' ]; then\n          systemctl stop \"${agent_name}.service\" || return\n     else\n          stop \"${agent_name}\" || return\n     fi\n",
                    "rendered": {
                      "text": "     fi\n\n     if [ \"${SYSTEMD}\" = 'true' ]; then\n          systemctl stop \"${agent_name}.service\" || return\n     else\n          stop \"${agent_name}\" || return\n     fi\n",
                      "markdown": "`     fi\n\n     if [ \"${SYSTEMD}\" = 'true' ]; then\n          systemctl stop \"${agent_name}.service\" || return\n     else\n          stop \"${agent_name}\" || return\n     fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/dependencies/amazon-cloudwatch-agent-ctl"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 9,
                  "endLine": 100,
                  "endColumn": 20,
                  "snippet": {
                    "text": "     if [ \"${SYSTEMD}\" = 'true' ]; then\n          systemctl daemon-reload || return\n          systemctl enable \"${agent_name}.service\" || return\n          systemctl restart \"${agent_name}.service\" || return\n     else\n          start \"${agent_name}\" || return\n          sleep 1\n",
                    "rendered": {
                      "text": "     if [ \"${SYSTEMD}\" = 'true' ]; then\n          systemctl daemon-reload || return\n          systemctl enable \"${agent_name}.service\" || return\n          systemctl restart \"${agent_name}.service\" || return\n     else\n          start \"${agent_name}\" || return\n          sleep 1\n",
                      "markdown": "`     if [ \"${SYSTEMD}\" = 'true' ]; then\n          systemctl daemon-reload || return\n          systemctl enable \"${agent_name}.service\" || return\n          systemctl restart \"${agent_name}.service\" || return\n     else\n          start \"${agent_name}\" || return\n          sleep 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/dependencies/amazon-cloudwatch-agent-ctl"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 9,
                  "endLine": 99,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n     if [ \"${SYSTEMD}\" = 'true' ]; then\n          systemctl daemon-reload || return\n          systemctl enable \"${agent_name}.service\" || return\n          systemctl restart \"${agent_name}.service\" || return\n     else\n          start \"${agent_name}\" || return\n",
                    "rendered": {
                      "text": "\n     if [ \"${SYSTEMD}\" = 'true' ]; then\n          systemctl daemon-reload || return\n          systemctl enable \"${agent_name}.service\" || return\n          systemctl restart \"${agent_name}.service\" || return\n     else\n          start \"${agent_name}\" || return\n",
                      "markdown": "`\n     if [ \"${SYSTEMD}\" = 'true' ]; then\n          systemctl daemon-reload || return\n          systemctl enable \"${agent_name}.service\" || return\n          systemctl restart \"${agent_name}.service\" || return\n     else\n          start \"${agent_name}\" || return\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/dependencies/amazon-cloudwatch-agent-ctl"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 9,
                  "endLine": 98,
                  "endColumn": 20,
                  "snippet": {
                    "text": "     fi\n\n     if [ \"${SYSTEMD}\" = 'true' ]; then\n          systemctl daemon-reload || return\n          systemctl enable \"${agent_name}.service\" || return\n          systemctl restart \"${agent_name}.service\" || return\n     else\n",
                    "rendered": {
                      "text": "     fi\n\n     if [ \"${SYSTEMD}\" = 'true' ]; then\n          systemctl daemon-reload || return\n          systemctl enable \"${agent_name}.service\" || return\n          systemctl restart \"${agent_name}.service\" || return\n     else\n",
                      "markdown": "`     fi\n\n     if [ \"${SYSTEMD}\" = 'true' ]; then\n          systemctl daemon-reload || return\n          systemctl enable \"${agent_name}.service\" || return\n          systemctl restart \"${agent_name}.service\" || return\n     else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/dependencies/amazon-cloudwatch-agent.service"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 13,
                  "endLine": 7,
                  "endColumn": 19,
                  "snippet": {
                    "text": "# Location: /etc/systemd/system/amazon-cloudwatch-agent.service\n# systemctl enable amazon-cloudwatch-agent\n# systemctl start amazon-cloudwatch-agent\n# systemctl | grep amazon-cloudwatch-agent\n# https://www.freedesktop.org/software/systemd/man/systemd.unit.html\n\n[Unit]\n",
                    "rendered": {
                      "text": "# Location: /etc/systemd/system/amazon-cloudwatch-agent.service\n# systemctl enable amazon-cloudwatch-agent\n# systemctl start amazon-cloudwatch-agent\n# systemctl | grep amazon-cloudwatch-agent\n# https://www.freedesktop.org/software/systemd/man/systemd.unit.html\n\n[Unit]\n",
                      "markdown": "`# Location: /etc/systemd/system/amazon-cloudwatch-agent.service\n# systemctl enable amazon-cloudwatch-agent\n# systemctl start amazon-cloudwatch-agent\n# systemctl | grep amazon-cloudwatch-agent\n# https://www.freedesktop.org/software/systemd/man/systemd.unit.html\n\n[Unit]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/dependencies/amazon-cloudwatch-agent.service"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 1,
                  "endLine": 7,
                  "endColumn": 12,
                  "snippet": {
                    "text": "# Location: /etc/systemd/system/amazon-cloudwatch-agent.service\n# systemctl enable amazon-cloudwatch-agent\n# systemctl start amazon-cloudwatch-agent\n# systemctl | grep amazon-cloudwatch-agent\n# https://www.freedesktop.org/software/systemd/man/systemd.unit.html\n\n[Unit]\n",
                    "rendered": {
                      "text": "# Location: /etc/systemd/system/amazon-cloudwatch-agent.service\n# systemctl enable amazon-cloudwatch-agent\n# systemctl start amazon-cloudwatch-agent\n# systemctl | grep amazon-cloudwatch-agent\n# https://www.freedesktop.org/software/systemd/man/systemd.unit.html\n\n[Unit]\n",
                      "markdown": "`# Location: /etc/systemd/system/amazon-cloudwatch-agent.service\n# systemctl enable amazon-cloudwatch-agent\n# systemctl start amazon-cloudwatch-agent\n# systemctl | grep amazon-cloudwatch-agent\n# https://www.freedesktop.org/software/systemd/man/systemd.unit.html\n\n[Unit]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/dependencies/amazon-cloudwatch-agent.service"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n# Location: /etc/systemd/system/amazon-cloudwatch-agent.service\n# systemctl enable amazon-cloudwatch-agent\n# systemctl start amazon-cloudwatch-agent\n# systemctl | grep amazon-cloudwatch-agent\n# https://www.freedesktop.org/software/systemd/man/systemd.unit.html\n\n",
                    "rendered": {
                      "text": "\n# Location: /etc/systemd/system/amazon-cloudwatch-agent.service\n# systemctl enable amazon-cloudwatch-agent\n# systemctl start amazon-cloudwatch-agent\n# systemctl | grep amazon-cloudwatch-agent\n# https://www.freedesktop.org/software/systemd/man/systemd.unit.html\n\n",
                      "markdown": "`\n# Location: /etc/systemd/system/amazon-cloudwatch-agent.service\n# systemctl enable amazon-cloudwatch-agent\n# systemctl start amazon-cloudwatch-agent\n# systemctl | grep amazon-cloudwatch-agent\n# https://www.freedesktop.org/software/systemd/man/systemd.unit.html\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/dependencies/amazon-cloudwatch-agent.service"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 12,
                  "snippet": {
                    "text": "# SPDX-License-Identifier: MIT\n\n# Location: /etc/systemd/system/amazon-cloudwatch-agent.service\n# systemctl enable amazon-cloudwatch-agent\n# systemctl start amazon-cloudwatch-agent\n# systemctl | grep amazon-cloudwatch-agent\n# https://www.freedesktop.org/software/systemd/man/systemd.unit.html\n",
                    "rendered": {
                      "text": "# SPDX-License-Identifier: MIT\n\n# Location: /etc/systemd/system/amazon-cloudwatch-agent.service\n# systemctl enable amazon-cloudwatch-agent\n# systemctl start amazon-cloudwatch-agent\n# systemctl | grep amazon-cloudwatch-agent\n# https://www.freedesktop.org/software/systemd/man/systemd.unit.html\n",
                      "markdown": "`# SPDX-License-Identifier: MIT\n\n# Location: /etc/systemd/system/amazon-cloudwatch-agent.service\n# systemctl enable amazon-cloudwatch-agent\n# systemctl start amazon-cloudwatch-agent\n# systemctl | grep amazon-cloudwatch-agent\n# https://www.freedesktop.org/software/systemd/man/systemd.unit.html\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/linux/amazon-cloudwatch-agent.spec"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 4,
                  "endLine": 83,
                  "endColumn": 10,
                  "snippet": {
                    "text": "    fi\nfi\n\nif ! grep \"^cwagent:\" /etc/group >/dev/null 2>&1; then\n    groupadd -r cwagent >/dev/null 2>&1\n    echo \"create group cwagent, result: $?\"\nfi\n",
                    "rendered": {
                      "text": "    fi\nfi\n\nif ! grep \"^cwagent:\" /etc/group >/dev/null 2>&1; then\n    groupadd -r cwagent >/dev/null 2>&1\n    echo \"create group cwagent, result: $?\"\nfi\n",
                      "markdown": "`    fi\nfi\n\nif ! grep \"^cwagent:\" /etc/group >/dev/null 2>&1; then\n    groupadd -r cwagent >/dev/null 2>&1\n    echo \"create group cwagent, result: $?\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/linux/amazon-cloudwatch-agent.spec"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 21,
                  "endLine": 27,
                  "endColumn": 3,
                  "snippet": {
                    "text": "%install\n\nrm -rf $RPM_BUILD_ROOT\nmkdir $RPM_BUILD_ROOT\ncp -r %{_topdir}/BUILD/%{name}-%{version}/*  $RPM_BUILD_ROOT/\n\n############################# create the symbolic links\n# bin\n",
                    "rendered": {
                      "text": "%install\n\nrm -rf $RPM_BUILD_ROOT\nmkdir $RPM_BUILD_ROOT\ncp -r %{_topdir}/BUILD/%{name}-%{version}/*  $RPM_BUILD_ROOT/\n\n############################# create the symbolic links\n# bin\n",
                      "markdown": "`%install\n\nrm -rf $RPM_BUILD_ROOT\nmkdir $RPM_BUILD_ROOT\ncp -r %{_topdir}/BUILD/%{name}-%{version}/*  $RPM_BUILD_ROOT/\n\n############################# create the symbolic links\n# bin\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/data/config/logs_test.go"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 43,
                  "endLine": 47,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\t}\n\tconf := new(Logs)\n\tconf.AddLogFile(\"file1\", \"log_group_1\", \"{hostname}\", \"%H:%M:%S %y %b %d\", \"UTC\", \"{timestamp_format}\", \"\", 1, util.StandardLogGroupClass)\n\tconf.AddLogFile(\"file2\", \"log_group_2\", \"{hostname}\", \"%H:%M:%S %y %b %d\", \"UTC\", \"{timestamp_format}\", \"\", 1, util.StandardLogGroupClass)\n\tctx := &runtime.Context{}\n\tkey, value := conf.ToMap(ctx)\n\tassert.Equal(t, expectedKey, key)\n",
                    "rendered": {
                      "text": "\t}\n\tconf := new(Logs)\n\tconf.AddLogFile(\"file1\", \"log_group_1\", \"{hostname}\", \"%H:%M:%S %y %b %d\", \"UTC\", \"{timestamp_format}\", \"\", 1, util.StandardLogGroupClass)\n\tconf.AddLogFile(\"file2\", \"log_group_2\", \"{hostname}\", \"%H:%M:%S %y %b %d\", \"UTC\", \"{timestamp_format}\", \"\", 1, util.StandardLogGroupClass)\n\tctx := &runtime.Context{}\n\tkey, value := conf.ToMap(ctx)\n\tassert.Equal(t, expectedKey, key)\n",
                      "markdown": "`\t}\n\tconf := new(Logs)\n\tconf.AddLogFile(\"file1\", \"log_group_1\", \"{hostname}\", \"%H:%M:%S %y %b %d\", \"UTC\", \"{timestamp_format}\", \"\", 1, util.StandardLogGroupClass)\n\tconf.AddLogFile(\"file2\", \"log_group_2\", \"{hostname}\", \"%H:%M:%S %y %b %d\", \"UTC\", \"{timestamp_format}\", \"\", 1, util.StandardLogGroupClass)\n\tctx := &runtime.Context{}\n\tkey, value := conf.ToMap(ctx)\n\tassert.Equal(t, expectedKey, key)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/data/config/logs_test.go"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 43,
                  "endLine": 46,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\t\t},\n\t}\n\tconf := new(Logs)\n\tconf.AddLogFile(\"file1\", \"log_group_1\", \"{hostname}\", \"%H:%M:%S %y %b %d\", \"UTC\", \"{timestamp_format}\", \"\", 1, util.StandardLogGroupClass)\n\tconf.AddLogFile(\"file2\", \"log_group_2\", \"{hostname}\", \"%H:%M:%S %y %b %d\", \"UTC\", \"{timestamp_format}\", \"\", 1, util.StandardLogGroupClass)\n\tctx := &runtime.Context{}\n\tkey, value := conf.ToMap(ctx)\n",
                    "rendered": {
                      "text": "\t\t},\n\t}\n\tconf := new(Logs)\n\tconf.AddLogFile(\"file1\", \"log_group_1\", \"{hostname}\", \"%H:%M:%S %y %b %d\", \"UTC\", \"{timestamp_format}\", \"\", 1, util.StandardLogGroupClass)\n\tconf.AddLogFile(\"file2\", \"log_group_2\", \"{hostname}\", \"%H:%M:%S %y %b %d\", \"UTC\", \"{timestamp_format}\", \"\", 1, util.StandardLogGroupClass)\n\tctx := &runtime.Context{}\n\tkey, value := conf.ToMap(ctx)\n",
                      "markdown": "`\t\t},\n\t}\n\tconf := new(Logs)\n\tconf.AddLogFile(\"file1\", \"log_group_1\", \"{hostname}\", \"%H:%M:%S %y %b %d\", \"UTC\", \"{timestamp_format}\", \"\", 1, util.StandardLogGroupClass)\n\tconf.AddLogFile(\"file2\", \"log_group_2\", \"{hostname}\", \"%H:%M:%S %y %b %d\", \"UTC\", \"{timestamp_format}\", \"\", 1, util.StandardLogGroupClass)\n\tctx := &runtime.Context{}\n\tkey, value := conf.ToMap(ctx)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/data/config/logs_test.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 36,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t\t\t\t\t\"timestamp_format\":         \"%H:%M:%S %y %b %d\",\n\t\t\t\t\t\t\"timezone\":                 \"UTC\",\n\t\t\t\t\t\t\"multi_line_start_pattern\": \"{timestamp_format}\",\n\t\t\t\t\t\t\"log_stream_name\":          \"{hostname}\",\n\t\t\t\t\t\t\"retention_in_days\":        1,\n\t\t\t\t\t\t\"log_group_class\":          util.StandardLogGroupClass,\n\t\t\t\t\t},\n",
                    "rendered": {
                      "text": "\t\t\t\t\t\t\"timestamp_format\":         \"%H:%M:%S %y %b %d\",\n\t\t\t\t\t\t\"timezone\":                 \"UTC\",\n\t\t\t\t\t\t\"multi_line_start_pattern\": \"{timestamp_format}\",\n\t\t\t\t\t\t\"log_stream_name\":          \"{hostname}\",\n\t\t\t\t\t\t\"retention_in_days\":        1,\n\t\t\t\t\t\t\"log_group_class\":          util.StandardLogGroupClass,\n\t\t\t\t\t},\n",
                      "markdown": "`\t\t\t\t\t\t\"timestamp_format\":         \"%H:%M:%S %y %b %d\",\n\t\t\t\t\t\t\"timezone\":                 \"UTC\",\n\t\t\t\t\t\t\"multi_line_start_pattern\": \"{timestamp_format}\",\n\t\t\t\t\t\t\"log_stream_name\":          \"{hostname}\",\n\t\t\t\t\t\t\"retention_in_days\":        1,\n\t\t\t\t\t\t\"log_group_class\":          util.StandardLogGroupClass,\n\t\t\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/data/config/logs_test.go"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 36,
                  "endLine": 27,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t\t\t\t\t\"timestamp_format\":         \"%H:%M:%S %y %b %d\",\n\t\t\t\t\t\t\"timezone\":                 \"UTC\",\n\t\t\t\t\t\t\"multi_line_start_pattern\": \"{timestamp_format}\",\n\t\t\t\t\t\t\"log_stream_name\":          \"{hostname}\",\n\t\t\t\t\t\t\"retention_in_days\":        1,\n\t\t\t\t\t\t\"log_group_class\":          util.StandardLogGroupClass,\n\t\t\t\t\t},\n",
                    "rendered": {
                      "text": "\t\t\t\t\t\t\"timestamp_format\":         \"%H:%M:%S %y %b %d\",\n\t\t\t\t\t\t\"timezone\":                 \"UTC\",\n\t\t\t\t\t\t\"multi_line_start_pattern\": \"{timestamp_format}\",\n\t\t\t\t\t\t\"log_stream_name\":          \"{hostname}\",\n\t\t\t\t\t\t\"retention_in_days\":        1,\n\t\t\t\t\t\t\"log_group_class\":          util.StandardLogGroupClass,\n\t\t\t\t\t},\n",
                      "markdown": "`\t\t\t\t\t\t\"timestamp_format\":         \"%H:%M:%S %y %b %d\",\n\t\t\t\t\t\t\"timezone\":                 \"UTC\",\n\t\t\t\t\t\t\"multi_line_start_pattern\": \"{timestamp_format}\",\n\t\t\t\t\t\t\"log_stream_name\":          \"{hostname}\",\n\t\t\t\t\t\t\"retention_in_days\":        1,\n\t\t\t\t\t\t\"log_group_class\":          util.StandardLogGroupClass,\n\t\t\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/testutil/testutil.go"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 42,
                  "endLine": 26,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\nfunc SetPrometheusRemoteWriteTestingEnv(t *testing.T) {\n\tt.Setenv(\"AWS_ACCESS_KEY_ID\", \"amazing_access_key\")\n\tt.Setenv(\"AWS_SECRET_ACCESS_KEY\", \"super_secret_key\")\n\tt.Setenv(\"AWS_REGION\", \"us-east-1\")\n}\n\n",
                    "rendered": {
                      "text": "\nfunc SetPrometheusRemoteWriteTestingEnv(t *testing.T) {\n\tt.Setenv(\"AWS_ACCESS_KEY_ID\", \"amazing_access_key\")\n\tt.Setenv(\"AWS_SECRET_ACCESS_KEY\", \"super_secret_key\")\n\tt.Setenv(\"AWS_REGION\", \"us-east-1\")\n}\n\n",
                      "markdown": "`\nfunc SetPrometheusRemoteWriteTestingEnv(t *testing.T) {\n\tt.Setenv(\"AWS_ACCESS_KEY_ID\", \"amazing_access_key\")\n\tt.Setenv(\"AWS_SECRET_ACCESS_KEY\", \"super_secret_key\")\n\tt.Setenv(\"AWS_REGION\", \"us-east-1\")\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/META-INF/maven/com.google.guava/guava/pom.xml"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 172,
                  "endLine": 153,
                  "endColumn": 176,
                  "snippet": {
                    "text": "MJAVADOC-507). If we choose to work around the User-Agent problem, we can go back to <links>, sidestepping the SSL problem. -->\n            <!-- Even after we stop using JSR305 annotations in our own code, we'll want this link so that NullPointerTester's docs can link to @CheckForNull and friends... at least once we start using this config for guava-testlib. -->\n            <offlineLink>\n              <url>https://static.javadoc.io/com.google.code.findbugs/jsr305/3.0.1/</url>\n              <location>${project.basedir}/javadoc-link/jsr305</location>\n            </offlineLink>\n            <offlineLi",
                    "rendered": {
                      "text": "MJAVADOC-507). If we choose to work around the User-Agent problem, we can go back to <links>, sidestepping the SSL problem. -->\n            <!-- Even after we stop using JSR305 annotations in our own code, we'll want this link so that NullPointerTester's docs can link to @CheckForNull and friends... at least once we start using this config for guava-testlib. -->\n            <offlineLink>\n              <url>https://static.javadoc.io/com.google.code.findbugs/jsr305/3.0.1/</url>\n              <location>${project.basedir}/javadoc-link/jsr305</location>\n            </offlineLink>\n            <offlineLi",
                      "markdown": "`MJAVADOC-507). If we choose to work around the User-Agent problem, we can go back to <links>, sidestepping the SSL problem. -->\n            <!-- Even after we stop using JSR305 annotations in our own code, we'll want this link so that NullPointerTester's docs can link to @CheckForNull and friends... at least once we start using this config for guava-testlib. -->\n            <offlineLink>\n              <url>https://static.javadoc.io/com.google.code.findbugs/jsr305/3.0.1/</url>\n              <location>${project.basedir}/javadoc-link/jsr305</location>\n            </offlineLink>\n            <offlineLi`"
                    }
                  },
                  "sourceLanguage": "pom.xml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/defaultConfig/defaultConfig.go"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 62,
                  "endLine": 118,
                  "endColumn": 66,
                  "snippet": {
                    "text": "}\n\nfunc metricsCollectInterval(ctx *runtime.Context) {\n\tanswer := util.Choice(\"Would you like to collect your metrics at high resolution (sub-minute resolution)? This enables sub-minute resolution for all metrics, but you can customize for specific metrics in the output json file.\", 4, []string{\"1s\", \"10s\", \"30s\", \"60s\"})\n\tif val, err := strconv.Atoi(answer[:len(answer)-1]); err == nil {\n\t\tctx.MetricsCollectionInterval = val\n\t} else {\n",
                    "rendered": {
                      "text": "}\n\nfunc metricsCollectInterval(ctx *runtime.Context) {\n\tanswer := util.Choice(\"Would you like to collect your metrics at high resolution (sub-minute resolution)? This enables sub-minute resolution for all metrics, but you can customize for specific metrics in the output json file.\", 4, []string{\"1s\", \"10s\", \"30s\", \"60s\"})\n\tif val, err := strconv.Atoi(answer[:len(answer)-1]); err == nil {\n\t\tctx.MetricsCollectionInterval = val\n\t} else {\n",
                      "markdown": "`}\n\nfunc metricsCollectInterval(ctx *runtime.Context) {\n\tanswer := util.Choice(\"Would you like to collect your metrics at high resolution (sub-minute resolution)? This enables sub-minute resolution for all metrics, but you can customize for specific metrics in the output json file.\", 4, []string{\"1s\", \"10s\", \"30s\", \"60s\"})\n\tif val, err := strconv.Atoi(answer[:len(answer)-1]); err == nil {\n\t\tctx.MetricsCollectionInterval = val\n\t} else {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/processors/defaultConfig/defaultConfig.go"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 41,
                  "endLine": 122,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\tif val, err := strconv.Atoi(answer[:len(answer)-1]); err == nil {\n\t\tctx.MetricsCollectionInterval = val\n\t} else {\n\t\tlog.Panicf(\"Failed to parse the collect time interval. Error details: %v\", err)\n\t}\n}\n",
                    "rendered": {
                      "text": "\tif val, err := strconv.Atoi(answer[:len(answer)-1]); err == nil {\n\t\tctx.MetricsCollectionInterval = val\n\t} else {\n\t\tlog.Panicf(\"Failed to parse the collect time interval. Error details: %v\", err)\n\t}\n}\n",
                      "markdown": "`\tif val, err := strconv.Atoi(answer[:len(answer)-1]); err == nil {\n\t\tctx.MetricsCollectionInterval = val\n\t} else {\n\t\tlog.Panicf(\"Failed to parse the collect time interval. Error details: %v\", err)\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.git/packed-refs"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 65,
                  "endLine": 10,
                  "endColumn": 73,
                  "snippet": {
                    "text": "1e0f4ce0999e366b794867f56978d0dd1628a787 refs/remotes/origin/FixBuild\n6f73f3a9095b553f647ace0062650ae584aae496 refs/remotes/origin/ProcstatMMap\n6b99a26edddec2076c579f309137db39836f99b1 refs/remotes/origin/V1154110212\nf47258f92222a702fd0cec0a438df8189cb9c3bb refs/remotes/origin/add-hostname-to-jmx-metrics\n7c9631ee445cb2f9b8228c62eed22fd75354fe49 refs/remotes/origin/add-logs-to-DetectAgentMode\n4a9e40634b083d79aa69abc48f23442dab9f1470 refs/remotes/origin/add_canaries\na1865fe38e1d2f3fc41a0987928fc726a7cd254b refs/remotes/origin/as-custom-rules\n",
                    "rendered": {
                      "text": "1e0f4ce0999e366b794867f56978d0dd1628a787 refs/remotes/origin/FixBuild\n6f73f3a9095b553f647ace0062650ae584aae496 refs/remotes/origin/ProcstatMMap\n6b99a26edddec2076c579f309137db39836f99b1 refs/remotes/origin/V1154110212\nf47258f92222a702fd0cec0a438df8189cb9c3bb refs/remotes/origin/add-hostname-to-jmx-metrics\n7c9631ee445cb2f9b8228c62eed22fd75354fe49 refs/remotes/origin/add-logs-to-DetectAgentMode\n4a9e40634b083d79aa69abc48f23442dab9f1470 refs/remotes/origin/add_canaries\na1865fe38e1d2f3fc41a0987928fc726a7cd254b refs/remotes/origin/as-custom-rules\n",
                      "markdown": "`1e0f4ce0999e366b794867f56978d0dd1628a787 refs/remotes/origin/FixBuild\n6f73f3a9095b553f647ace0062650ae584aae496 refs/remotes/origin/ProcstatMMap\n6b99a26edddec2076c579f309137db39836f99b1 refs/remotes/origin/V1154110212\nf47258f92222a702fd0cec0a438df8189cb9c3bb refs/remotes/origin/add-hostname-to-jmx-metrics\n7c9631ee445cb2f9b8228c62eed22fd75354fe49 refs/remotes/origin/add-logs-to-DetectAgentMode\n4a9e40634b083d79aa69abc48f23442dab9f1470 refs/remotes/origin/add_canaries\na1865fe38e1d2f3fc41a0987928fc726a7cd254b refs/remotes/origin/as-custom-rules\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/extension/agenthealth/handler/stats/provider/flag_test.go"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 6,
                  "endLine": 18,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\nfunc TestFlagStats(t *testing.T) {\n\tt.Skip(\"stat provider tests are flaky. disable until fix is available\")\n\tt.Setenv(envconfig.RunInContainer, envconfig.TrueValue)\n\tfs := newFlagStats(agent.UsageFlags(), time.Microsecond)\n\tgot := fs.getStats()\n\tassert.Nil(t, got.ImdsFallbackSucceed)\n",
                    "rendered": {
                      "text": "\nfunc TestFlagStats(t *testing.T) {\n\tt.Skip(\"stat provider tests are flaky. disable until fix is available\")\n\tt.Setenv(envconfig.RunInContainer, envconfig.TrueValue)\n\tfs := newFlagStats(agent.UsageFlags(), time.Microsecond)\n\tgot := fs.getStats()\n\tassert.Nil(t, got.ImdsFallbackSucceed)\n",
                      "markdown": "`\nfunc TestFlagStats(t *testing.T) {\n\tt.Skip(\"stat provider tests are flaky. disable until fix is available\")\n\tt.Setenv(envconfig.RunInContainer, envconfig.TrueValue)\n\tfs := newFlagStats(agent.UsageFlags(), time.Microsecond)\n\tgot := fs.getStats()\n\tassert.Nil(t, got.ImdsFallbackSucceed)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/extension/agenthealth/handler/stats/provider/flag.go"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 4,
                  "endLine": 64,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\t\tintervalStats: newIntervalStats(interval),\n\t}\n\tstats.flagSet.OnChange(stats.update)\n\tif envconfig.IsRunningInContainer() {\n\t\tstats.flagSet.Set(agent.FlagRunningInContainer)\n\t} else {\n\t\tstats.update()\n",
                    "rendered": {
                      "text": "\t\tintervalStats: newIntervalStats(interval),\n\t}\n\tstats.flagSet.OnChange(stats.update)\n\tif envconfig.IsRunningInContainer() {\n\t\tstats.flagSet.Set(agent.FlagRunningInContainer)\n\t} else {\n\t\tstats.update()\n",
                      "markdown": "`\t\tintervalStats: newIntervalStats(interval),\n\t}\n\tstats.flagSet.OnChange(stats.update)\n\tif envconfig.IsRunningInContainer() {\n\t\tstats.flagSet.Set(agent.FlagRunningInContainer)\n\t} else {\n\t\tstats.update()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/extension/agenthealth/handler/stats/handler_test.go"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 108,
                  "endLine": 66,
                  "endColumn": 113,
                  "snippet": {
                    "text": "\tstats.StatusCode = aws.Int(404)\n\tstats.LatencyMillis = nil\n\thandler.HandleRequest(ctx, req)\n\tassert.Equal(t, `\"cpu\":1.2,\"mem\":123,\"fd\":456,\"th\":789,\"load\":5678,\"code\":404,\"scfb\":1,\"ifs\":1`, req.Header.Get(headerKeyAgentStats))\n}\n\nfunc TestNewHandlers(t *testing.T) {\n",
                    "rendered": {
                      "text": "\tstats.StatusCode = aws.Int(404)\n\tstats.LatencyMillis = nil\n\thandler.HandleRequest(ctx, req)\n\tassert.Equal(t, `\"cpu\":1.2,\"mem\":123,\"fd\":456,\"th\":789,\"load\":5678,\"code\":404,\"scfb\":1,\"ifs\":1`, req.Header.Get(headerKeyAgentStats))\n}\n\nfunc TestNewHandlers(t *testing.T) {\n",
                      "markdown": "`\tstats.StatusCode = aws.Int(404)\n\tstats.LatencyMillis = nil\n\thandler.HandleRequest(ctx, req)\n\tassert.Equal(t, `\"cpu\":1.2,\"mem\":123,\"fd\":456,\"th\":789,\"load\":5678,\"code\":404,\"scfb\":1,\"ifs\":1`, req.Header.Get(headerKeyAgentStats))\n}\n\nfunc TestNewHandlers(t *testing.T) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/extension/agenthealth/handler/stats/handler_test.go"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 119,
                  "endLine": 62,
                  "endColumn": 124,
                  "snippet": {
                    "text": "\tassert.Equal(t, \"\", req.Header.Get(headerKeyAgentStats))\n\thandler.filter = agent.NewOperationsFilter(agent.AllowAllOperations)\n\thandler.HandleRequest(ctx, req)\n\tassert.Equal(t, `\"cpu\":1.2,\"mem\":123,\"fd\":456,\"th\":789,\"lat\":1234,\"load\":5678,\"code\":200,\"scfb\":1,\"ifs\":1`, req.Header.Get(headerKeyAgentStats))\n\tstats.StatusCode = aws.Int(404)\n\tstats.LatencyMillis = nil\n\thandler.HandleRequest(ctx, req)\n",
                    "rendered": {
                      "text": "\tassert.Equal(t, \"\", req.Header.Get(headerKeyAgentStats))\n\thandler.filter = agent.NewOperationsFilter(agent.AllowAllOperations)\n\thandler.HandleRequest(ctx, req)\n\tassert.Equal(t, `\"cpu\":1.2,\"mem\":123,\"fd\":456,\"th\":789,\"lat\":1234,\"load\":5678,\"code\":200,\"scfb\":1,\"ifs\":1`, req.Header.Get(headerKeyAgentStats))\n\tstats.StatusCode = aws.Int(404)\n\tstats.LatencyMillis = nil\n\thandler.HandleRequest(ctx, req)\n",
                      "markdown": "`\tassert.Equal(t, \"\", req.Header.Get(headerKeyAgentStats))\n\thandler.filter = agent.NewOperationsFilter(agent.AllowAllOperations)\n\thandler.HandleRequest(ctx, req)\n\tassert.Equal(t, `\"cpu\":1.2,\"mem\":123,\"fd\":456,\"th\":789,\"lat\":1234,\"load\":5678,\"code\":200,\"scfb\":1,\"ifs\":1`, req.Header.Get(headerKeyAgentStats))\n\tstats.StatusCode = aws.Int(404)\n\tstats.LatencyMillis = nil\n\thandler.HandleRequest(ctx, req)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/extension/agenthealth/handler/stats/handler_test.go"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 31,
                  "endLine": 59,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\treq, err := http.NewRequest(\"\", \"localhost\", nil)\n\trequire.NoError(t, err)\n\thandler.HandleRequest(ctx, req)\n\tassert.Equal(t, \"\", req.Header.Get(headerKeyAgentStats))\n\thandler.filter = agent.NewOperationsFilter(agent.AllowAllOperations)\n\thandler.HandleRequest(ctx, req)\n\tassert.Equal(t, `\"cpu\":1.2,\"mem\":123,\"fd\":456,\"th\":789,\"lat\":1234,\"load\":5678,\"code\":200,\"scfb\":1,\"ifs\":1`, req.Header.Get(headerKeyAgentStats))\n",
                    "rendered": {
                      "text": "\treq, err := http.NewRequest(\"\", \"localhost\", nil)\n\trequire.NoError(t, err)\n\thandler.HandleRequest(ctx, req)\n\tassert.Equal(t, \"\", req.Header.Get(headerKeyAgentStats))\n\thandler.filter = agent.NewOperationsFilter(agent.AllowAllOperations)\n\thandler.HandleRequest(ctx, req)\n\tassert.Equal(t, `\"cpu\":1.2,\"mem\":123,\"fd\":456,\"th\":789,\"lat\":1234,\"load\":5678,\"code\":200,\"scfb\":1,\"ifs\":1`, req.Header.Get(headerKeyAgentStats))\n",
                      "markdown": "`\treq, err := http.NewRequest(\"\", \"localhost\", nil)\n\trequire.NoError(t, err)\n\thandler.HandleRequest(ctx, req)\n\tassert.Equal(t, \"\", req.Header.Get(headerKeyAgentStats))\n\thandler.filter = agent.NewOperationsFilter(agent.AllowAllOperations)\n\thandler.HandleRequest(ctx, req)\n\tassert.Equal(t, `\"cpu\":1.2,\"mem\":123,\"fd\":456,\"th\":789,\"lat\":1234,\"load\":5678,\"code\":200,\"scfb\":1,\"ifs\":1`, req.Header.Get(headerKeyAgentStats))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/extension/agenthealth/handler/useragent/useragent.go"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 4,
                  "endLine": 153,
                  "endColumn": 26,
                  "snippet": {
                    "text": "}\n\nfunc (ua *userAgent) Header(isUsageDataEnabled bool) string {\n\tif envUserAgent := os.Getenv(envconfig.CWAGENT_USER_AGENT); envUserAgent != \"\" {\n\t\treturn envUserAgent\n\t}\n\tif !isUsageDataEnabled {\n",
                    "rendered": {
                      "text": "}\n\nfunc (ua *userAgent) Header(isUsageDataEnabled bool) string {\n\tif envUserAgent := os.Getenv(envconfig.CWAGENT_USER_AGENT); envUserAgent != \"\" {\n\t\treturn envUserAgent\n\t}\n\tif !isUsageDataEnabled {\n",
                      "markdown": "`}\n\nfunc (ua *userAgent) Header(isUsageDataEnabled bool) string {\n\tif envUserAgent := os.Getenv(envconfig.CWAGENT_USER_AGENT); envUserAgent != \"\" {\n\t\treturn envUserAgent\n\t}\n\tif !isUsageDataEnabled {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/extension/agenthealth/handler/useragent/handler.go"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 20,
                  "endLine": 39,
                  "endColumn": 25,
                  "snippet": {
                    "text": "// user agent string.\nfunc (uah *userAgentHandler) HandleRequest(_ context.Context, r *http.Request) {\n\tnewHeader := uah.Header()\n\tcurrent := r.Header.Get(headerKeyUserAgent)\n\tif current != \"\" {\n\t\tnewHeader += separator + current\n\t}\n",
                    "rendered": {
                      "text": "// user agent string.\nfunc (uah *userAgentHandler) HandleRequest(_ context.Context, r *http.Request) {\n\tnewHeader := uah.Header()\n\tcurrent := r.Header.Get(headerKeyUserAgent)\n\tif current != \"\" {\n\t\tnewHeader += separator + current\n\t}\n",
                      "markdown": "`// user agent string.\nfunc (uah *userAgentHandler) HandleRequest(_ context.Context, r *http.Request) {\n\tnewHeader := uah.Header()\n\tcurrent := r.Header.Get(headerKeyUserAgent)\n\tif current != \"\" {\n\t\tnewHeader += separator + current\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/extension/agenthealth/handler/useragent/handler_test.go"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 47,
                  "endLine": 31,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\tt.Setenv(envconfig.CWAGENT_USER_AGENT, \"SecondUA\")\n\tua.notify()\n\thandler.HandleRequest(context.Background(), req)\n\tassert.Equal(t, \"SecondUA FirstUA\", req.Header.Get(headerKeyUserAgent))\n}\n",
                    "rendered": {
                      "text": "\tt.Setenv(envconfig.CWAGENT_USER_AGENT, \"SecondUA\")\n\tua.notify()\n\thandler.HandleRequest(context.Background(), req)\n\tassert.Equal(t, \"SecondUA FirstUA\", req.Header.Get(headerKeyUserAgent))\n}\n",
                      "markdown": "`\tt.Setenv(envconfig.CWAGENT_USER_AGENT, \"SecondUA\")\n\tua.notify()\n\thandler.HandleRequest(context.Background(), req)\n\tassert.Equal(t, \"SecondUA FirstUA\", req.Header.Get(headerKeyUserAgent))\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/extension/agenthealth/handler/useragent/handler_test.go"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 38,
                  "endLine": 27,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\treq, err := http.NewRequest(\"\", \"localhost\", nil)\n\trequire.NoError(t, err)\n\thandler.HandleRequest(context.Background(), req)\n\tassert.Equal(t, \"FirstUA\", req.Header.Get(headerKeyUserAgent))\n\tt.Setenv(envconfig.CWAGENT_USER_AGENT, \"SecondUA\")\n\tua.notify()\n\thandler.HandleRequest(context.Background(), req)\n",
                    "rendered": {
                      "text": "\treq, err := http.NewRequest(\"\", \"localhost\", nil)\n\trequire.NoError(t, err)\n\thandler.HandleRequest(context.Background(), req)\n\tassert.Equal(t, \"FirstUA\", req.Header.Get(headerKeyUserAgent))\n\tt.Setenv(envconfig.CWAGENT_USER_AGENT, \"SecondUA\")\n\tua.notify()\n\thandler.HandleRequest(context.Background(), req)\n",
                      "markdown": "`\treq, err := http.NewRequest(\"\", \"localhost\", nil)\n\trequire.NoError(t, err)\n\thandler.HandleRequest(context.Background(), req)\n\tassert.Equal(t, \"FirstUA\", req.Header.Get(headerKeyUserAgent))\n\tt.Setenv(envconfig.CWAGENT_USER_AGENT, \"SecondUA\")\n\tua.notify()\n\thandler.HandleRequest(context.Background(), req)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/logs/logs.go"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 63,
                  "endLine": 168,
                  "endColumn": 71,
                  "snippet": {
                    "text": "\t\tlog.Printf(\"D! [logagent] Retention already set for log group %s, current retention %d\", logGroup, retention)\n\t\tretention = -1\n\t} else if retention > 0 {\n\t\tlog.Printf(\"I! First time setting retention for log group %s, update map to avoid setting twice\", logGroup)\n\t\tl.retentionAlreadyAttempted[logGroup] = true\n\t}\n\treturn retention\n",
                    "rendered": {
                      "text": "\t\tlog.Printf(\"D! [logagent] Retention already set for log group %s, current retention %d\", logGroup, retention)\n\t\tretention = -1\n\t} else if retention > 0 {\n\t\tlog.Printf(\"I! First time setting retention for log group %s, update map to avoid setting twice\", logGroup)\n\t\tl.retentionAlreadyAttempted[logGroup] = true\n\t}\n\treturn retention\n",
                      "markdown": "`\t\tlog.Printf(\"D! [logagent] Retention already set for log group %s, current retention %d\", logGroup, retention)\n\t\tretention = -1\n\t} else if retention > 0 {\n\t\tlog.Printf(\"I! First time setting retention for log group %s, update map to avoid setting twice\", logGroup)\n\t\tl.retentionAlreadyAttempted[logGroup] = true\n\t}\n\treturn retention\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/logs/logs.go"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 22,
                  "endLine": 168,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\t\tlog.Printf(\"D! [logagent] Retention already set for log group %s, current retention %d\", logGroup, retention)\n\t\tretention = -1\n\t} else if retention > 0 {\n\t\tlog.Printf(\"I! First time setting retention for log group %s, update map to avoid setting twice\", logGroup)\n\t\tl.retentionAlreadyAttempted[logGroup] = true\n\t}\n\treturn retention\n",
                    "rendered": {
                      "text": "\t\tlog.Printf(\"D! [logagent] Retention already set for log group %s, current retention %d\", logGroup, retention)\n\t\tretention = -1\n\t} else if retention > 0 {\n\t\tlog.Printf(\"I! First time setting retention for log group %s, update map to avoid setting twice\", logGroup)\n\t\tl.retentionAlreadyAttempted[logGroup] = true\n\t}\n\treturn retention\n",
                      "markdown": "`\t\tlog.Printf(\"D! [logagent] Retention already set for log group %s, current retention %d\", logGroup, retention)\n\t\tretention = -1\n\t} else if retention > 0 {\n\t\tlog.Printf(\"I! First time setting retention for log group %s, update map to avoid setting twice\", logGroup)\n\t\tl.retentionAlreadyAttempted[logGroup] = true\n\t}\n\treturn retention\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/logs/logs.go"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 41,
                  "endLine": 121,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\t\t\t\t\tlogGroupClass := src.Class()\n\t\t\t\t\tbackend, ok := l.backends[dname]\n\t\t\t\t\tif !ok {\n\t\t\t\t\t\tlog.Printf(\"E! [logagent] Failed to find destination %s for log source %s/%s(%s) \", dname, logGroup, logStream, description)\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tretention = l.checkRetentionAlreadyAttempted(retention, logGroup)\n",
                    "rendered": {
                      "text": "\t\t\t\t\tlogGroupClass := src.Class()\n\t\t\t\t\tbackend, ok := l.backends[dname]\n\t\t\t\t\tif !ok {\n\t\t\t\t\t\tlog.Printf(\"E! [logagent] Failed to find destination %s for log source %s/%s(%s) \", dname, logGroup, logStream, description)\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tretention = l.checkRetentionAlreadyAttempted(retention, logGroup)\n",
                      "markdown": "`\t\t\t\t\tlogGroupClass := src.Class()\n\t\t\t\t\tbackend, ok := l.backends[dname]\n\t\t\t\t\tif !ok {\n\t\t\t\t\t\tlog.Printf(\"E! [logagent] Failed to find destination %s for log source %s/%s(%s) \", dname, logGroup, logStream, description)\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tretention = l.checkRetentionAlreadyAttempted(retention, logGroup)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/common/metrics.go"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 14,
                  "endLine": 68,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\nfunc GetDropOriginalMetrics(conf *confmap.Conf) map[string]bool {\n\tkey := ConfigKey(MetricsKey, MetricsCollectedKey)\n\tvalue := conf.Get(key)\n\tif value == nil {\n\t\treturn nil\n\t}\n",
                    "rendered": {
                      "text": "\nfunc GetDropOriginalMetrics(conf *confmap.Conf) map[string]bool {\n\tkey := ConfigKey(MetricsKey, MetricsCollectedKey)\n\tvalue := conf.Get(key)\n\tif value == nil {\n\t\treturn nil\n\t}\n",
                      "markdown": "`\nfunc GetDropOriginalMetrics(conf *confmap.Conf) map[string]bool {\n\tkey := ConfigKey(MetricsKey, MetricsCollectedKey)\n\tvalue := conf.Get(key)\n\tif value == nil {\n\t\treturn nil\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/common/metrics.go"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 14,
                  "endLine": 25,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\nfunc GetRollupDimensions(conf *confmap.Conf) [][]string {\n\tkey := ConfigKey(MetricsKey, AggregationDimensionsKey)\n\tvalue := conf.Get(key)\n\tif value == nil {\n\t\treturn nil\n\t}\n",
                    "rendered": {
                      "text": "\nfunc GetRollupDimensions(conf *confmap.Conf) [][]string {\n\tkey := ConfigKey(MetricsKey, AggregationDimensionsKey)\n\tvalue := conf.Get(key)\n\tif value == nil {\n\t\treturn nil\n\t}\n",
                      "markdown": "`\nfunc GetRollupDimensions(conf *confmap.Conf) [][]string {\n\tkey := ConfigKey(MetricsKey, AggregationDimensionsKey)\n\tvalue := conf.Get(key)\n\tif value == nil {\n\t\treturn nil\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/common/common_test.go"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 21,
                  "endLine": 187,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\tother := NewTranslatorMap[int](&testTranslator{firstType, 2}, &testTranslator{lastType, 3})\n\tgot.Merge(other)\n\trequire.Equal(t, 3, got.Len())\n\ttranslator, ok = got.Get(component.NewID(firstType))\n\trequire.True(t, ok)\n\tresult, err = translator.Translate(nil)\n\trequire.NoError(t, err)\n",
                    "rendered": {
                      "text": "\tother := NewTranslatorMap[int](&testTranslator{firstType, 2}, &testTranslator{lastType, 3})\n\tgot.Merge(other)\n\trequire.Equal(t, 3, got.Len())\n\ttranslator, ok = got.Get(component.NewID(firstType))\n\trequire.True(t, ok)\n\tresult, err = translator.Translate(nil)\n\trequire.NoError(t, err)\n",
                      "markdown": "`\tother := NewTranslatorMap[int](&testTranslator{firstType, 2}, &testTranslator{lastType, 3})\n\tgot.Merge(other)\n\trequire.Equal(t, 3, got.Len())\n\ttranslator, ok = got.Get(component.NewID(firstType))\n\trequire.True(t, ok)\n\tresult, err = translator.Translate(nil)\n\trequire.NoError(t, err)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/common/common_test.go"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 22,
                  "endLine": 179,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\tlastType, _ := component.NewType(\"last\")\n\tgot := NewTranslatorMap[int](&testTranslator{firstType, 0}, &testTranslator{middleType, 1})\n\trequire.Equal(t, 2, got.Len())\n\ttranslator, ok := got.Get(component.NewID(firstType))\n\trequire.True(t, ok)\n\tresult, err := translator.Translate(nil)\n\trequire.NoError(t, err)\n",
                    "rendered": {
                      "text": "\tlastType, _ := component.NewType(\"last\")\n\tgot := NewTranslatorMap[int](&testTranslator{firstType, 0}, &testTranslator{middleType, 1})\n\trequire.Equal(t, 2, got.Len())\n\ttranslator, ok := got.Get(component.NewID(firstType))\n\trequire.True(t, ok)\n\tresult, err := translator.Translate(nil)\n\trequire.NoError(t, err)\n",
                      "markdown": "`\tlastType, _ := component.NewType(\"last\")\n\tgot := NewTranslatorMap[int](&testTranslator{firstType, 0}, &testTranslator{middleType, 1})\n\trequire.Equal(t, 2, got.Len())\n\ttranslator, ok := got.Get(component.NewID(firstType))\n\trequire.True(t, ok)\n\tresult, err := translator.Translate(nil)\n\trequire.NoError(t, err)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/ec2tagger/ec2tagger_test.go"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 26,
                  "endLine": 244,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\t\t\t\t\texpected := expAttrs[l]\n\t\t\t\t\tactual := actualAttrs[l]\n\t\t\t\t\texpected.Range(func(k string, v pcommon.Value) bool {\n\t\t\t\t\t\tgot, found := actual.Get(k)\n\t\t\t\t\t\tassert.True(t, found)\n\t\t\t\t\t\tassert.Equal(t, v, got)\n\t\t\t\t\t\treturn true\n",
                    "rendered": {
                      "text": "\t\t\t\t\texpected := expAttrs[l]\n\t\t\t\t\tactual := actualAttrs[l]\n\t\t\t\t\texpected.Range(func(k string, v pcommon.Value) bool {\n\t\t\t\t\t\tgot, found := actual.Get(k)\n\t\t\t\t\t\tassert.True(t, found)\n\t\t\t\t\t\tassert.Equal(t, v, got)\n\t\t\t\t\t\treturn true\n",
                      "markdown": "`\t\t\t\t\texpected := expAttrs[l]\n\t\t\t\t\tactual := actualAttrs[l]\n\t\t\t\t\texpected.Range(func(k string, v pcommon.Value) bool {\n\t\t\t\t\t\tgot, found := actual.Get(k)\n\t\t\t\t\t\tassert.True(t, found)\n\t\t\t\t\t\tassert.Equal(t, v, got)\n\t\t\t\t\t\treturn true\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/ec2tagger/ec2tagger_test.go"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 36,
                  "endLine": 101,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\t}\n\n\t//return all tags to simulate the case\n\t//when the api knows about all tags at later stage\n\tif m.tagsCallCount >= m.tagsPartialLimit {\n\t\tm.tagsCallCount++\n\t\t//return updated result after customer edits tags\n",
                    "rendered": {
                      "text": "\t}\n\n\t//return all tags to simulate the case\n\t//when the api knows about all tags at later stage\n\tif m.tagsCallCount >= m.tagsPartialLimit {\n\t\tm.tagsCallCount++\n\t\t//return updated result after customer edits tags\n",
                      "markdown": "`\t}\n\n\t//return all tags to simulate the case\n\t//when the api knows about all tags at later stage\n\tif m.tagsCallCount >= m.tagsPartialLimit {\n\t\tm.tagsCallCount++\n\t\t//return updated result after customer edits tags\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/ec2tagger/ec2tagger_test.go"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 49,
                  "endLine": 94,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\t}\n\n\t//return partial tags to simulate the case\n\t//when the api knows about some but not all tags at early stage\n\tif m.tagsCallCount <= m.tagsPartialLimit {\n\t\tm.tagsCallCount++\n\t\treturn &partialTags, nil\n",
                    "rendered": {
                      "text": "\t}\n\n\t//return partial tags to simulate the case\n\t//when the api knows about some but not all tags at early stage\n\tif m.tagsCallCount <= m.tagsPartialLimit {\n\t\tm.tagsCallCount++\n\t\treturn &partialTags, nil\n",
                      "markdown": "`\t}\n\n\t//return partial tags to simulate the case\n\t//when the api knows about some but not all tags at early stage\n\tif m.tagsCallCount <= m.tagsPartialLimit {\n\t\tm.tagsCallCount++\n\t\treturn &partialTags, nil\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/ec2tagger/ec2tagger_test.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 35,
                  "endLine": 29,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\ntype mockEC2Client struct {\n\tec2iface.EC2API\n\t//The following fields are used to control how the mocked DescribeTags api behave:\n\t//tagsCallCount records how many times DescribeTags has been called\n\t//if tagsCallCount <= tagsFailLimit, DescribeTags call fails\n\t//if tagsFailLimit < tagsCallCount <= tagsPartialLimit, DescribeTags returns partial tags\n",
                    "rendered": {
                      "text": "\ntype mockEC2Client struct {\n\tec2iface.EC2API\n\t//The following fields are used to control how the mocked DescribeTags api behave:\n\t//tagsCallCount records how many times DescribeTags has been called\n\t//if tagsCallCount <= tagsFailLimit, DescribeTags call fails\n\t//if tagsFailLimit < tagsCallCount <= tagsPartialLimit, DescribeTags returns partial tags\n",
                      "markdown": "`\ntype mockEC2Client struct {\n\tec2iface.EC2API\n\t//The following fields are used to control how the mocked DescribeTags api behave:\n\t//tagsCallCount records how many times DescribeTags has been called\n\t//if tagsCallCount <= tagsFailLimit, DescribeTags call fails\n\t//if tagsFailLimit < tagsCallCount <= tagsPartialLimit, DescribeTags returns partial tags\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/ec2tagger/ec2tagger_test.go"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 46,
                  "endLine": 74,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\t\tTags:      []*ec2.TagDescription{&tagDes1},\n\t}\n\n\t//all tags are returned when the ec2 metadata service knows about all tags\n\tallTags := ec2.DescribeTagsOutput{\n\t\tNextToken: nil,\n\t\tTags:      []*ec2.TagDescription{&tagDes1, &tagDes2, &tagDes3},\n",
                    "rendered": {
                      "text": "\t\tTags:      []*ec2.TagDescription{&tagDes1},\n\t}\n\n\t//all tags are returned when the ec2 metadata service knows about all tags\n\tallTags := ec2.DescribeTagsOutput{\n\t\tNextToken: nil,\n\t\tTags:      []*ec2.TagDescription{&tagDes1, &tagDes2, &tagDes3},\n",
                      "markdown": "`\t\tTags:      []*ec2.TagDescription{&tagDes1},\n\t}\n\n\t//all tags are returned when the ec2 metadata service knows about all tags\n\tallTags := ec2.DescribeTagsOutput{\n\t\tNextToken: nil,\n\t\tTags:      []*ec2.TagDescription{&tagDes1, &tagDes2, &tagDes3},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/ec2tagger/ec2metadataprovider_test.go"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 19,
                  "endLine": 35,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\tfor _, tc := range tests {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tc := NewMetadataProvider(tc.sess, 0)\n\t\t\tgotDoc, err := c.Get(tc.ctx)\n\t\t\tassert.NotNil(t, err)\n\t\t\tassert.Truef(t, reflect.DeepEqual(gotDoc, tc.expectDoc), \"get() gotDoc: %v, expected: %v\", gotDoc, tc.expectDoc)\n\t\t})\n",
                    "rendered": {
                      "text": "\tfor _, tc := range tests {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tc := NewMetadataProvider(tc.sess, 0)\n\t\t\tgotDoc, err := c.Get(tc.ctx)\n\t\t\tassert.NotNil(t, err)\n\t\t\tassert.Truef(t, reflect.DeepEqual(gotDoc, tc.expectDoc), \"get() gotDoc: %v, expected: %v\", gotDoc, tc.expectDoc)\n\t\t})\n",
                      "markdown": "`\tfor _, tc := range tests {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tc := NewMetadataProvider(tc.sess, 0)\n\t\t\tgotDoc, err := c.Get(tc.ctx)\n\t\t\tassert.NotNil(t, err)\n\t\t\tassert.Truef(t, reflect.DeepEqual(gotDoc, tc.expectDoc), \"get() gotDoc: %v, expected: %v\", gotDoc, tc.expectDoc)\n\t\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/ec2tagger/ec2tagger.go"
                },
                "region": {
                  "startLine": 416,
                  "startColumn": 31,
                  "endLine": 416,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\t}\n\n\tt.logger.Info(\"ec2tagger: Check EC2 Metadata.\")\n\tdoc, err := t.metadataProvider.Get(ctx)\n\tif err != nil {\n\t\tt.logger.Error(\"ec2tagger: Unable to retrieve EC2 Metadata. This plugin must only be used on an EC2 instance.\")\n\t\tif translatorCtx.CurrentContext().RunInContainer() {\n",
                    "rendered": {
                      "text": "\t}\n\n\tt.logger.Info(\"ec2tagger: Check EC2 Metadata.\")\n\tdoc, err := t.metadataProvider.Get(ctx)\n\tif err != nil {\n\t\tt.logger.Error(\"ec2tagger: Unable to retrieve EC2 Metadata. This plugin must only be used on an EC2 instance.\")\n\t\tif translatorCtx.CurrentContext().RunInContainer() {\n",
                      "markdown": "`\t}\n\n\tt.logger.Info(\"ec2tagger: Check EC2 Metadata.\")\n\tdoc, err := t.metadataProvider.Get(ctx)\n\tif err != nil {\n\t\tt.logger.Error(\"ec2tagger: Unable to retrieve EC2 Metadata. This plugin must only be used on an EC2 instance.\")\n\t\tif translatorCtx.CurrentContext().RunInContainer() {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/ec2tagger/ec2tagger.go"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 28,
                  "endLine": 149,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\t\t\tattr.PutStr(mdKeyInstanceType, t.ec2MetadataRespond.instanceType)\n\t\t}\n\t\tif t.volumeSerialCache != nil {\n\t\t\tif devName, found := attr.Get(t.DiskDeviceTagKey); found {\n\t\t\t\tserial := t.volumeSerialCache.Serial(devName.Str())\n\t\t\t\tif serial != \"\" {\n\t\t\t\t\tattr.PutStr(AttributeVolumeId, serial)\n",
                    "rendered": {
                      "text": "\t\t\tattr.PutStr(mdKeyInstanceType, t.ec2MetadataRespond.instanceType)\n\t\t}\n\t\tif t.volumeSerialCache != nil {\n\t\t\tif devName, found := attr.Get(t.DiskDeviceTagKey); found {\n\t\t\t\tserial := t.volumeSerialCache.Serial(devName.Str())\n\t\t\t\tif serial != \"\" {\n\t\t\t\t\tattr.PutStr(AttributeVolumeId, serial)\n",
                      "markdown": "`\t\t\tattr.PutStr(mdKeyInstanceType, t.ec2MetadataRespond.instanceType)\n\t\t}\n\t\tif t.volumeSerialCache != nil {\n\t\t\tif devName, found := attr.Get(t.DiskDeviceTagKey); found {\n\t\t\t\tserial := t.volumeSerialCache.Serial(devName.Str())\n\t\t\t\tif serial != \"\" {\n\t\t\t\t\tattr.PutStr(AttributeVolumeId, serial)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/ec2tagger/ec2tagger.go"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 16,
                  "endLine": 321,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\tif len(t.EC2InstanceTagKeys) > 0 || len(t.EBSDeviceKeys) > 0 {\n\t\tec2CredentialConfig := &configaws.CredentialConfig{\n\t\t\tAccessKey: t.AccessKey,\n\t\t\tSecretKey: t.SecretKey,\n\t\t\tRoleARN:   t.RoleARN,\n\t\t\tProfile:   t.Profile,\n\t\t\tFilename:  t.Filename,\n",
                    "rendered": {
                      "text": "\tif len(t.EC2InstanceTagKeys) > 0 || len(t.EBSDeviceKeys) > 0 {\n\t\tec2CredentialConfig := &configaws.CredentialConfig{\n\t\t\tAccessKey: t.AccessKey,\n\t\t\tSecretKey: t.SecretKey,\n\t\t\tRoleARN:   t.RoleARN,\n\t\t\tProfile:   t.Profile,\n\t\t\tFilename:  t.Filename,\n",
                      "markdown": "`\tif len(t.EC2InstanceTagKeys) > 0 || len(t.EBSDeviceKeys) > 0 {\n\t\tec2CredentialConfig := &configaws.CredentialConfig{\n\t\t\tAccessKey: t.AccessKey,\n\t\t\tSecretKey: t.SecretKey,\n\t\t\tRoleARN:   t.RoleARN,\n\t\t\tProfile:   t.Profile,\n\t\t\tFilename:  t.Filename,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/ec2tagger/ec2tagger.go"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 3,
                  "endLine": 321,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\tif len(t.EC2InstanceTagKeys) > 0 || len(t.EBSDeviceKeys) > 0 {\n\t\tec2CredentialConfig := &configaws.CredentialConfig{\n\t\t\tAccessKey: t.AccessKey,\n\t\t\tSecretKey: t.SecretKey,\n\t\t\tRoleARN:   t.RoleARN,\n\t\t\tProfile:   t.Profile,\n\t\t\tFilename:  t.Filename,\n",
                    "rendered": {
                      "text": "\tif len(t.EC2InstanceTagKeys) > 0 || len(t.EBSDeviceKeys) > 0 {\n\t\tec2CredentialConfig := &configaws.CredentialConfig{\n\t\t\tAccessKey: t.AccessKey,\n\t\t\tSecretKey: t.SecretKey,\n\t\t\tRoleARN:   t.RoleARN,\n\t\t\tProfile:   t.Profile,\n\t\t\tFilename:  t.Filename,\n",
                      "markdown": "`\tif len(t.EC2InstanceTagKeys) > 0 || len(t.EBSDeviceKeys) > 0 {\n\t\tec2CredentialConfig := &configaws.CredentialConfig{\n\t\t\tAccessKey: t.AccessKey,\n\t\t\tSecretKey: t.SecretKey,\n\t\t\tRoleARN:   t.RoleARN,\n\t\t\tProfile:   t.Profile,\n\t\t\tFilename:  t.Filename,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/ec2tagger/ec2tagger.go"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 31,
                  "endLine": 130,
                  "endColumn": 35,
                  "snippet": {
                    "text": "}\n\n// updateOtelAttributes adds tags and the requested dimensions to the attributes of each\n// DataPoint. We add and remove at the DataPoint level instead of resource level because this is\n// where the receiver/adapter does.\nfunc (t *Tagger) updateOtelAttributes(attributes []pcommon.Map) {\n\tfor _, attr := range attributes {\n",
                    "rendered": {
                      "text": "}\n\n// updateOtelAttributes adds tags and the requested dimensions to the attributes of each\n// DataPoint. We add and remove at the DataPoint level instead of resource level because this is\n// where the receiver/adapter does.\nfunc (t *Tagger) updateOtelAttributes(attributes []pcommon.Map) {\n\tfor _, attr := range attributes {\n",
                      "markdown": "`}\n\n// updateOtelAttributes adds tags and the requested dimensions to the attributes of each\n// DataPoint. We add and remove at the DataPoint level instead of resource level because this is\n// where the receiver/adapter does.\nfunc (t *Tagger) updateOtelAttributes(attributes []pcommon.Map) {\n\tfor _, attr := range attributes {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/ec2tagger/ec2tagger.go"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 101,
                  "endLine": 106,
                  "endColumn": 105,
                  "snippet": {
                    "text": "}\n\nfunc (t *Tagger) processMetrics(ctx context.Context, md pmetric.Metrics) (pmetric.Metrics, error) {\n\t// grab the pointer to the map in case it gets refreshed while we're applying this round of metrics. At least\n\t// this batch then will all get the same tags.\n\tt.RLock()\n\tdefer t.RUnlock()\n",
                    "rendered": {
                      "text": "}\n\nfunc (t *Tagger) processMetrics(ctx context.Context, md pmetric.Metrics) (pmetric.Metrics, error) {\n\t// grab the pointer to the map in case it gets refreshed while we're applying this round of metrics. At least\n\t// this batch then will all get the same tags.\n\tt.RLock()\n\tdefer t.RUnlock()\n",
                      "markdown": "`}\n\nfunc (t *Tagger) processMetrics(ctx context.Context, md pmetric.Metrics) (pmetric.Metrics, error) {\n\t// grab the pointer to the map in case it gets refreshed while we're applying this round of metrics. At least\n\t// this batch then will all get the same tags.\n\tt.RLock()\n\tdefer t.RUnlock()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/ec2tagger/ec2tagger.go"
                },
                "region": {
                  "startLine": 420,
                  "startColumn": 28,
                  "endLine": 420,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif err != nil {\n\t\tt.logger.Error(\"ec2tagger: Unable to retrieve EC2 Metadata. This plugin must only be used on an EC2 instance.\")\n\t\tif translatorCtx.CurrentContext().RunInContainer() {\n\t\t\tt.logger.Warn(\"ec2tagger: Timeout may have occurred because hop limit is too small. Please increase hop limit to 2 by following this document https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html#configuring-IMDS-existing-instances.\")\n\t\t}\n\t\treturn err\n\t}\n",
                    "rendered": {
                      "text": "\tif err != nil {\n\t\tt.logger.Error(\"ec2tagger: Unable to retrieve EC2 Metadata. This plugin must only be used on an EC2 instance.\")\n\t\tif translatorCtx.CurrentContext().RunInContainer() {\n\t\t\tt.logger.Warn(\"ec2tagger: Timeout may have occurred because hop limit is too small. Please increase hop limit to 2 by following this document https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html#configuring-IMDS-existing-instances.\")\n\t\t}\n\t\treturn err\n\t}\n",
                      "markdown": "`\tif err != nil {\n\t\tt.logger.Error(\"ec2tagger: Unable to retrieve EC2 Metadata. This plugin must only be used on an EC2 instance.\")\n\t\tif translatorCtx.CurrentContext().RunInContainer() {\n\t\t\tt.logger.Warn(\"ec2tagger: Timeout may have occurred because hop limit is too small. Please increase hop limit to 2 by following this document https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html#configuring-IMDS-existing-instances.\")\n\t\t}\n\t\treturn err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/ec2tagger/constants.go"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 14,
                  "snippet": {
                    "text": "  ## 5) shared credentials file\n  ## 6) EC2 Instance Profile\n  # access_key = \"\"\n  # secret_key = \"\"\n  # token = \"\"\n  # role_arn = \"\"\n  # profile = \"\"\n",
                    "rendered": {
                      "text": "  ## 5) shared credentials file\n  ## 6) EC2 Instance Profile\n  # access_key = \"\"\n  # secret_key = \"\"\n  # token = \"\"\n  # role_arn = \"\"\n  # profile = \"\"\n",
                      "markdown": "`  ## 5) shared credentials file\n  ## 6) EC2 Instance Profile\n  # access_key = \"\"\n  # secret_key = \"\"\n  # token = \"\"\n  # role_arn = \"\"\n  # profile = \"\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/ec2tagger/constants.go"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 52,
                  "endLine": 49,
                  "endColumn": 62,
                  "snippet": {
                    "text": "  ## Amazon Credentials\n  ## Credentials are loaded in the following order\n  ## 1) Assumed credentials via STS if role_arn is specified\n  ## 2) explicit credentials from 'access_key' and 'secret_key'\n  ## 3) shared profile from 'profile'\n  ## 4) environment variables\n  ## 5) shared credentials file\n",
                    "rendered": {
                      "text": "  ## Amazon Credentials\n  ## Credentials are loaded in the following order\n  ## 1) Assumed credentials via STS if role_arn is specified\n  ## 2) explicit credentials from 'access_key' and 'secret_key'\n  ## 3) shared profile from 'profile'\n  ## 4) environment variables\n  ## 5) shared credentials file\n",
                      "markdown": "`  ## Amazon Credentials\n  ## Credentials are loaded in the following order\n  ## 1) Assumed credentials via STS if role_arn is specified\n  ## 2) explicit credentials from 'access_key' and 'secret_key'\n  ## 3) shared profile from 'profile'\n  ## 4) environment variables\n  ## 5) shared credentials file\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/ec2tagger/ec2metadataprovider.go"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 8,
                  "endLine": 72,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\t}\n\t\treturn hostnameInner, errorInner\n\t}\n\treturn hostname, err\n}\n\nfunc (c *metadataClient) Get(ctx context.Context) (ec2metadata.EC2InstanceIdentityDocument, error) {\n",
                    "rendered": {
                      "text": "\t\t}\n\t\treturn hostnameInner, errorInner\n\t}\n\treturn hostname, err\n}\n\nfunc (c *metadataClient) Get(ctx context.Context) (ec2metadata.EC2InstanceIdentityDocument, error) {\n",
                      "markdown": "`\t\t}\n\t\treturn hostnameInner, errorInner\n\t}\n\treturn hostname, err\n}\n\nfunc (c *metadataClient) Get(ctx context.Context) (ec2metadata.EC2InstanceIdentityDocument, error) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/ec2tagger/ec2metadataprovider.go"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 86,
                  "endLine": 66,
                  "endColumn": 94,
                  "snippet": {
                    "text": "\thostname, err := c.metadataFallbackDisabled.GetMetadataWithContext(ctx, \"hostname\")\n\tif err != nil {\n\t\tlog.Printf(\"D! could not get hostname without imds v1 fallback enable thus enable fallback\")\n\t\thostnameInner, errorInner := c.metadataFallbackEnabled.GetMetadataWithContext(ctx, \"hostname\")\n\t\tif errorInner == nil {\n\t\t\tagent.UsageFlags().Set(agent.FlagIMDSFallbackSuccess)\n\t\t}\n",
                    "rendered": {
                      "text": "\thostname, err := c.metadataFallbackDisabled.GetMetadataWithContext(ctx, \"hostname\")\n\tif err != nil {\n\t\tlog.Printf(\"D! could not get hostname without imds v1 fallback enable thus enable fallback\")\n\t\thostnameInner, errorInner := c.metadataFallbackEnabled.GetMetadataWithContext(ctx, \"hostname\")\n\t\tif errorInner == nil {\n\t\t\tagent.UsageFlags().Set(agent.FlagIMDSFallbackSuccess)\n\t\t}\n",
                      "markdown": "`\thostname, err := c.metadataFallbackDisabled.GetMetadataWithContext(ctx, \"hostname\")\n\tif err != nil {\n\t\tlog.Printf(\"D! could not get hostname without imds v1 fallback enable thus enable fallback\")\n\t\thostnameInner, errorInner := c.metadataFallbackEnabled.GetMetadataWithContext(ctx, \"hostname\")\n\t\tif errorInner == nil {\n\t\t\tagent.UsageFlags().Set(agent.FlagIMDSFallbackSuccess)\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/ec2tagger/ec2metadataprovider.go"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 31,
                  "endLine": 65,
                  "endColumn": 39,
                  "snippet": {
                    "text": "func (c *metadataClient) Hostname(ctx context.Context) (string, error) {\n\thostname, err := c.metadataFallbackDisabled.GetMetadataWithContext(ctx, \"hostname\")\n\tif err != nil {\n\t\tlog.Printf(\"D! could not get hostname without imds v1 fallback enable thus enable fallback\")\n\t\thostnameInner, errorInner := c.metadataFallbackEnabled.GetMetadataWithContext(ctx, \"hostname\")\n\t\tif errorInner == nil {\n\t\t\tagent.UsageFlags().Set(agent.FlagIMDSFallbackSuccess)\n",
                    "rendered": {
                      "text": "func (c *metadataClient) Hostname(ctx context.Context) (string, error) {\n\thostname, err := c.metadataFallbackDisabled.GetMetadataWithContext(ctx, \"hostname\")\n\tif err != nil {\n\t\tlog.Printf(\"D! could not get hostname without imds v1 fallback enable thus enable fallback\")\n\t\thostnameInner, errorInner := c.metadataFallbackEnabled.GetMetadataWithContext(ctx, \"hostname\")\n\t\tif errorInner == nil {\n\t\t\tagent.UsageFlags().Set(agent.FlagIMDSFallbackSuccess)\n",
                      "markdown": "`func (c *metadataClient) Hostname(ctx context.Context) (string, error) {\n\thostname, err := c.metadataFallbackDisabled.GetMetadataWithContext(ctx, \"hostname\")\n\tif err != nil {\n\t\tlog.Printf(\"D! could not get hostname without imds v1 fallback enable thus enable fallback\")\n\t\thostnameInner, errorInner := c.metadataFallbackEnabled.GetMetadataWithContext(ctx, \"hostname\")\n\t\tif errorInner == nil {\n\t\t\tagent.UsageFlags().Set(agent.FlagIMDSFallbackSuccess)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/ec2tagger/ec2metadataprovider.go"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 74,
                  "endLine": 63,
                  "endColumn": 82,
                  "snippet": {
                    "text": "}\n\nfunc (c *metadataClient) Hostname(ctx context.Context) (string, error) {\n\thostname, err := c.metadataFallbackDisabled.GetMetadataWithContext(ctx, \"hostname\")\n\tif err != nil {\n\t\tlog.Printf(\"D! could not get hostname without imds v1 fallback enable thus enable fallback\")\n\t\thostnameInner, errorInner := c.metadataFallbackEnabled.GetMetadataWithContext(ctx, \"hostname\")\n",
                    "rendered": {
                      "text": "}\n\nfunc (c *metadataClient) Hostname(ctx context.Context) (string, error) {\n\thostname, err := c.metadataFallbackDisabled.GetMetadataWithContext(ctx, \"hostname\")\n\tif err != nil {\n\t\tlog.Printf(\"D! could not get hostname without imds v1 fallback enable thus enable fallback\")\n\t\thostnameInner, errorInner := c.metadataFallbackEnabled.GetMetadataWithContext(ctx, \"hostname\")\n",
                      "markdown": "`}\n\nfunc (c *metadataClient) Hostname(ctx context.Context) (string, error) {\n\thostname, err := c.metadataFallbackDisabled.GetMetadataWithContext(ctx, \"hostname\")\n\tif err != nil {\n\t\tlog.Printf(\"D! could not get hostname without imds v1 fallback enable thus enable fallback\")\n\t\thostnameInner, errorInner := c.metadataFallbackEnabled.GetMetadataWithContext(ctx, \"hostname\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/ec2tagger/ec2metadataprovider.go"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 1,
                  "endLine": 63,
                  "endColumn": 9,
                  "snippet": {
                    "text": "}\n\nfunc (c *metadataClient) Hostname(ctx context.Context) (string, error) {\n\thostname, err := c.metadataFallbackDisabled.GetMetadataWithContext(ctx, \"hostname\")\n\tif err != nil {\n\t\tlog.Printf(\"D! could not get hostname without imds v1 fallback enable thus enable fallback\")\n\t\thostnameInner, errorInner := c.metadataFallbackEnabled.GetMetadataWithContext(ctx, \"hostname\")\n",
                    "rendered": {
                      "text": "}\n\nfunc (c *metadataClient) Hostname(ctx context.Context) (string, error) {\n\thostname, err := c.metadataFallbackDisabled.GetMetadataWithContext(ctx, \"hostname\")\n\tif err != nil {\n\t\tlog.Printf(\"D! could not get hostname without imds v1 fallback enable thus enable fallback\")\n\t\thostnameInner, errorInner := c.metadataFallbackEnabled.GetMetadataWithContext(ctx, \"hostname\")\n",
                      "markdown": "`}\n\nfunc (c *metadataClient) Hostname(ctx context.Context) (string, error) {\n\thostname, err := c.metadataFallbackDisabled.GetMetadataWithContext(ctx, \"hostname\")\n\tif err != nil {\n\t\tlog.Printf(\"D! could not get hostname without imds v1 fallback enable thus enable fallback\")\n\t\thostnameInner, errorInner := c.metadataFallbackEnabled.GetMetadataWithContext(ctx, \"hostname\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/ec2tagger/config.go"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 35,
                  "endLine": 35,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n\t// unlike other AWS plugins, this one determines the region from ec2 metadata not user configuration\n\tAccessKey   string `mapstructure:\"access_key,omitempty\"`\n\tSecretKey   string `mapstructure:\"secret_key,omitempty\"`\n\tRoleARN     string `mapstructure:\"role_arn,omitempty\"`\n\tProfile     string `mapstructure:\"profile,omitempty\"`\n\tFilename    string `mapstructure:\"shared_credential_file,omitempty\"`\n",
                    "rendered": {
                      "text": "\n\t// unlike other AWS plugins, this one determines the region from ec2 metadata not user configuration\n\tAccessKey   string `mapstructure:\"access_key,omitempty\"`\n\tSecretKey   string `mapstructure:\"secret_key,omitempty\"`\n\tRoleARN     string `mapstructure:\"role_arn,omitempty\"`\n\tProfile     string `mapstructure:\"profile,omitempty\"`\n\tFilename    string `mapstructure:\"shared_credential_file,omitempty\"`\n",
                      "markdown": "`\n\t// unlike other AWS plugins, this one determines the region from ec2 metadata not user configuration\n\tAccessKey   string `mapstructure:\"access_key,omitempty\"`\n\tSecretKey   string `mapstructure:\"secret_key,omitempty\"`\n\tRoleARN     string `mapstructure:\"role_arn,omitempty\"`\n\tProfile     string `mapstructure:\"profile,omitempty\"`\n\tFilename    string `mapstructure:\"shared_credential_file,omitempty\"`\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/ec2tagger/config.go"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n\t// unlike other AWS plugins, this one determines the region from ec2 metadata not user configuration\n\tAccessKey   string `mapstructure:\"access_key,omitempty\"`\n\tSecretKey   string `mapstructure:\"secret_key,omitempty\"`\n\tRoleARN     string `mapstructure:\"role_arn,omitempty\"`\n\tProfile     string `mapstructure:\"profile,omitempty\"`\n\tFilename    string `mapstructure:\"shared_credential_file,omitempty\"`\n",
                    "rendered": {
                      "text": "\n\t// unlike other AWS plugins, this one determines the region from ec2 metadata not user configuration\n\tAccessKey   string `mapstructure:\"access_key,omitempty\"`\n\tSecretKey   string `mapstructure:\"secret_key,omitempty\"`\n\tRoleARN     string `mapstructure:\"role_arn,omitempty\"`\n\tProfile     string `mapstructure:\"profile,omitempty\"`\n\tFilename    string `mapstructure:\"shared_credential_file,omitempty\"`\n",
                      "markdown": "`\n\t// unlike other AWS plugins, this one determines the region from ec2 metadata not user configuration\n\tAccessKey   string `mapstructure:\"access_key,omitempty\"`\n\tSecretKey   string `mapstructure:\"secret_key,omitempty\"`\n\tRoleARN     string `mapstructure:\"role_arn,omitempty\"`\n\tProfile     string `mapstructure:\"profile,omitempty\"`\n\tFilename    string `mapstructure:\"shared_credential_file,omitempty\"`\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/ec2tagger/README.md"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 47,
                  "endLine": 16,
                  "endColumn": 57,
                  "snippet": {
                    "text": "The EC2 Tagger Processor uses a credential chain for Authentication with the EC2\nAPI endpoint. In the following order the plugin will attempt to authenticate.\n1. STS Credentials if Role ARN is specified\n2. Explicit credentials from 'access_key' and 'secret_key'\n3. Shared profile from 'profile' (https://stackoverflow.com/a/66121705)\n\nThe next will be the default credential chain from [AWS SDK Go](https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials)\n",
                    "rendered": {
                      "text": "The EC2 Tagger Processor uses a credential chain for Authentication with the EC2\nAPI endpoint. In the following order the plugin will attempt to authenticate.\n1. STS Credentials if Role ARN is specified\n2. Explicit credentials from 'access_key' and 'secret_key'\n3. Shared profile from 'profile' (https://stackoverflow.com/a/66121705)\n\nThe next will be the default credential chain from [AWS SDK Go](https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials)\n",
                      "markdown": "`The EC2 Tagger Processor uses a credential chain for Authentication with the EC2\nAPI endpoint. In the following order the plugin will attempt to authenticate.\n1. STS Credentials if Role ARN is specified\n2. Explicit credentials from 'access_key' and 'secret_key'\n3. Shared profile from 'profile' (https://stackoverflow.com/a/66121705)\n\nThe next will be the default credential chain from [AWS SDK Go](https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatch/cloudwatch.go"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 22,
                  "endLine": 93,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tcredentialConfig := &configaws.CredentialConfig{\n\t\tRegion:    c.config.Region,\n\t\tAccessKey: c.config.AccessKey,\n\t\tSecretKey: c.config.SecretKey,\n\t\tRoleARN:   c.config.RoleARN,\n\t\tProfile:   c.config.Profile,\n\t\tFilename:  c.config.SharedCredentialFilename,\n",
                    "rendered": {
                      "text": "\tcredentialConfig := &configaws.CredentialConfig{\n\t\tRegion:    c.config.Region,\n\t\tAccessKey: c.config.AccessKey,\n\t\tSecretKey: c.config.SecretKey,\n\t\tRoleARN:   c.config.RoleARN,\n\t\tProfile:   c.config.Profile,\n\t\tFilename:  c.config.SharedCredentialFilename,\n",
                      "markdown": "`\tcredentialConfig := &configaws.CredentialConfig{\n\t\tRegion:    c.config.Region,\n\t\tAccessKey: c.config.AccessKey,\n\t\tSecretKey: c.config.SecretKey,\n\t\tRoleARN:   c.config.RoleARN,\n\t\tProfile:   c.config.Profile,\n\t\tFilename:  c.config.SharedCredentialFilename,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatch/cloudwatch.go"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 2,
                  "endLine": 93,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\tcredentialConfig := &configaws.CredentialConfig{\n\t\tRegion:    c.config.Region,\n\t\tAccessKey: c.config.AccessKey,\n\t\tSecretKey: c.config.SecretKey,\n\t\tRoleARN:   c.config.RoleARN,\n\t\tProfile:   c.config.Profile,\n\t\tFilename:  c.config.SharedCredentialFilename,\n",
                    "rendered": {
                      "text": "\tcredentialConfig := &configaws.CredentialConfig{\n\t\tRegion:    c.config.Region,\n\t\tAccessKey: c.config.AccessKey,\n\t\tSecretKey: c.config.SecretKey,\n\t\tRoleARN:   c.config.RoleARN,\n\t\tProfile:   c.config.Profile,\n\t\tFilename:  c.config.SharedCredentialFilename,\n",
                      "markdown": "`\tcredentialConfig := &configaws.CredentialConfig{\n\t\tRegion:    c.config.Region,\n\t\tAccessKey: c.config.AccessKey,\n\t\tSecretKey: c.config.SecretKey,\n\t\tRoleARN:   c.config.RoleARN,\n\t\tProfile:   c.config.Profile,\n\t\tFilename:  c.config.SharedCredentialFilename,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatch/cloudwatch.go"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 114,
                  "endLine": 46,
                  "endColumn": 118,
                  "snippet": {
                    "text": "\tmaxConcurrentPublisher                = 10 // the number of CloudWatch clients send request concurrently\n\tdefaultForceFlushInterval             = time.Minute\n\thighResolutionTagKey                  = \"aws:StorageResolution\"\n\tdefaultRetryCount                     = 5 // this is the retry count, the total attempts would be retry count + 1 at most.\n\tbackoffRetryBase                      = 200 * time.Millisecond\n\tMaxDimensions                         = 30\n)\n",
                    "rendered": {
                      "text": "\tmaxConcurrentPublisher                = 10 // the number of CloudWatch clients send request concurrently\n\tdefaultForceFlushInterval             = time.Minute\n\thighResolutionTagKey                  = \"aws:StorageResolution\"\n\tdefaultRetryCount                     = 5 // this is the retry count, the total attempts would be retry count + 1 at most.\n\tbackoffRetryBase                      = 200 * time.Millisecond\n\tMaxDimensions                         = 30\n)\n",
                      "markdown": "`\tmaxConcurrentPublisher                = 10 // the number of CloudWatch clients send request concurrently\n\tdefaultForceFlushInterval             = time.Minute\n\thighResolutionTagKey                  = \"aws:StorageResolution\"\n\tdefaultRetryCount                     = 5 // this is the retry count, the total attempts would be retry count + 1 at most.\n\tbackoffRetryBase                      = 200 * time.Millisecond\n\tMaxDimensions                         = 30\n)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatch/cloudwatch.go"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 40,
                  "endLine": 141,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\t\tif len(c.metricChan) == 0 && len(c.datumBatchChan) == 0 {\n\t\t\tbreak\n\t\t} else {\n\t\t\tlog.Printf(\"D! CloudWatch Close, %vth time to sleep since there is still some metric data remaining to publish.\", i)\n\t\t\ttime.Sleep(time.Second)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\t\tif len(c.metricChan) == 0 && len(c.datumBatchChan) == 0 {\n\t\t\tbreak\n\t\t} else {\n\t\t\tlog.Printf(\"D! CloudWatch Close, %vth time to sleep since there is still some metric data remaining to publish.\", i)\n\t\t\ttime.Sleep(time.Second)\n\t\t}\n\t}\n",
                      "markdown": "`\t\tif len(c.metricChan) == 0 && len(c.datumBatchChan) == 0 {\n\t\t\tbreak\n\t\t} else {\n\t\t\tlog.Printf(\"D! CloudWatch Close, %vth time to sleep since there is still some metric data remaining to publish.\", i)\n\t\t\ttime.Sleep(time.Second)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatch/cloudwatch.go"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 10,
                  "endLine": 77,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\tlastRequestBytes       int\n}\n\n// Compile time interface check.\nvar _ exporter.Metrics = (*CloudWatch)(nil)\n\nfunc (c *CloudWatch) Capabilities() consumer.Capabilities {\n",
                    "rendered": {
                      "text": "\tlastRequestBytes       int\n}\n\n// Compile time interface check.\nvar _ exporter.Metrics = (*CloudWatch)(nil)\n\nfunc (c *CloudWatch) Capabilities() consumer.Capabilities {\n",
                      "markdown": "`\tlastRequestBytes       int\n}\n\n// Compile time interface check.\nvar _ exporter.Metrics = (*CloudWatch)(nil)\n\nfunc (c *CloudWatch) Capabilities() consumer.Capabilities {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/META-INF/maven/io.prometheus/simpleclient/pom.xml"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 92,
                  "endLine": 39,
                  "endColumn": 96,
                  "snippet": {
                    "text": "  <dependencies>\n    <!-- The simpleclient has no required 3rd party runtime dependencies by design, so that\n         it can be included into any other project without having to worry about conflicts.\n         All transitive dependencies of tracer libraries are scoped as provided and optional at runtime. -->\n    <dependency>\n      <groupId>io.prometheus</groupId>\n      <artifactId>simpleclient_tracer_otel</artifactId>\n",
                    "rendered": {
                      "text": "  <dependencies>\n    <!-- The simpleclient has no required 3rd party runtime dependencies by design, so that\n         it can be included into any other project without having to worry about conflicts.\n         All transitive dependencies of tracer libraries are scoped as provided and optional at runtime. -->\n    <dependency>\n      <groupId>io.prometheus</groupId>\n      <artifactId>simpleclient_tracer_otel</artifactId>\n",
                      "markdown": "`  <dependencies>\n    <!-- The simpleclient has no required 3rd party runtime dependencies by design, so that\n         it can be included into any other project without having to worry about conflicts.\n         All transitive dependencies of tracer libraries are scoped as provided and optional at runtime. -->\n    <dependency>\n      <groupId>io.prometheus</groupId>\n      <artifactId>simpleclient_tracer_otel</artifactId>\n`"
                    }
                  },
                  "sourceLanguage": "pom.xml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/log_filter.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/log_filter.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/otlp_metrics_cloudwatchlogs_config.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/otlp_metrics_cloudwatchlogs_config.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_fallback_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 460,
                  "startColumn": 33,
                  "endLine": 460,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                    enabled: true\n                gcp.cloud_run.job.task_index:\n                    enabled: true\n                gcp.gce.instance.hostname:\n                    enabled: false\n                gcp.gce.instance.name:\n                    enabled: false\n",
                    "rendered": {
                      "text": "                    enabled: true\n                gcp.cloud_run.job.task_index:\n                    enabled: true\n                gcp.gce.instance.hostname:\n                    enabled: false\n                gcp.gce.instance.name:\n                    enabled: false\n",
                      "markdown": "`                    enabled: true\n                gcp.cloud_run.job.task_index:\n                    enabled: true\n                gcp.gce.instance.hostname:\n                    enabled: false\n                gcp.gce.instance.name:\n                    enabled: false\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000708"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (OS Type)",
            "id": "BD000708"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_fallback_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 576,
                  "startColumn": 16,
                  "endLine": 576,
                  "endColumn": 23,
                  "snippet": {
                    "text": "                    enabled: true\n                os.description:\n                    enabled: false\n                os.type:\n                    enabled: true\n        timeout: 2s\n        tls:\n",
                    "rendered": {
                      "text": "                    enabled: true\n                os.description:\n                    enabled: false\n                os.type:\n                    enabled: true\n        timeout: 2s\n        tls:\n",
                      "markdown": "`                    enabled: true\n                os.description:\n                    enabled: false\n                os.type:\n                    enabled: true\n        timeout: 2s\n        tls:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000708"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (OS Type)",
            "id": "BD000708"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_fallback_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 358,
                  "startColumn": 16,
                  "endLine": 358,
                  "endColumn": 23,
                  "snippet": {
                    "text": "            resource_attributes:\n                host.name:\n                    enabled: true\n                os.type:\n                    enabled: true\n        ec2:\n            resource_attributes:\n",
                    "rendered": {
                      "text": "            resource_attributes:\n                host.name:\n                    enabled: true\n                os.type:\n                    enabled: true\n        ec2:\n            resource_attributes:\n",
                      "markdown": "`            resource_attributes:\n                host.name:\n                    enabled: true\n                os.type:\n                    enabled: true\n        ec2:\n            resource_attributes:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_fallback_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 13,
                  "endLine": 352,
                  "snippet": {
                    "text": "            token_file: \"\"\n        detectors:\n            - eks\n            - env\n            - ec2\n        disable_keep_alives: false\n        docker:\n            resource_attributes:\n",
                    "rendered": {
                      "text": "            token_file: \"\"\n        detectors:\n            - eks\n            - env\n            - ec2\n        disable_keep_alives: false\n        docker:\n            resource_attributes:\n",
                      "markdown": "`            token_file: \"\"\n        detectors:\n            - eks\n            - env\n            - ec2\n        disable_keep_alives: false\n        docker:\n            resource_attributes:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_fallback_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 19,
                  "endLine": 198,
                  "snippet": {
                    "text": "            - dimensions:\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n              metric_name_selectors:\n                - service_number_of_running_pods\n            - dimensions:\n",
                    "rendered": {
                      "text": "            - dimensions:\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n              metric_name_selectors:\n                - service_number_of_running_pods\n            - dimensions:\n",
                      "markdown": "`            - dimensions:\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n              metric_name_selectors:\n                - service_number_of_running_pods\n            - dimensions:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_fallback_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 19,
                  "endLine": 144,
                  "snippet": {
                    "text": "                - - ClusterName\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n              metric_name_selectors:\n                - pod_cpu_utilization\n",
                    "rendered": {
                      "text": "                - - ClusterName\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n              metric_name_selectors:\n                - pod_cpu_utilization\n",
                      "markdown": "`                - - ClusterName\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n              metric_name_selectors:\n                - pod_cpu_utilization\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_fallback_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 19,
                  "endLine": 93,
                  "snippet": {
                    "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                - - RemoteService\n",
                    "rendered": {
                      "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                - - RemoteService\n",
                      "markdown": "`                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                - - RemoteService\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_fallback_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 19,
                  "endLine": 88,
                  "snippet": {
                    "text": "                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n",
                    "rendered": {
                      "text": "                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n",
                      "markdown": "`                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_fallback_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 19,
                  "endLine": 84,
                  "snippet": {
                    "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n",
                    "rendered": {
                      "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n",
                      "markdown": "`                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_fallback_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 19,
                  "endLine": 78,
                  "snippet": {
                    "text": "                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n",
                    "rendered": {
                      "text": "                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n",
                      "markdown": "`                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_fallback_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 19,
                  "endLine": 73,
                  "snippet": {
                    "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n",
                    "rendered": {
                      "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n",
                      "markdown": "`                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_fallback_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 19,
                  "endLine": 66,
                  "snippet": {
                    "text": "                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n",
                    "rendered": {
                      "text": "                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n",
                      "markdown": "`                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_fallback_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 19,
                  "endLine": 63,
                  "snippet": {
                    "text": "                - - Environment\n                  - RemoteEnvironment\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n",
                    "rendered": {
                      "text": "                - - Environment\n                  - RemoteEnvironment\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n",
                      "markdown": "`                - - Environment\n                  - RemoteEnvironment\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_fallback_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 19,
                  "endLine": 59,
                  "snippet": {
                    "text": "                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteService\n                  - Service\n",
                    "rendered": {
                      "text": "                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteService\n                  - Service\n",
                      "markdown": "`                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteService\n                  - Service\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_fallback_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 19,
                  "endLine": 54,
                  "snippet": {
                    "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n",
                    "rendered": {
                      "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n",
                      "markdown": "`                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_fallback_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 19,
                  "endLine": 47,
                  "snippet": {
                    "text": "                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n",
                    "rendered": {
                      "text": "                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n",
                      "markdown": "`                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_fallback_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 19,
                  "endLine": 41,
                  "snippet": {
                    "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteEnvironment\n                  - RemoteOperation\n",
                    "rendered": {
                      "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteEnvironment\n                  - RemoteOperation\n",
                      "markdown": "`                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteEnvironment\n                  - RemoteOperation\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_fallback_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 19,
                  "endLine": 23,
                  "snippet": {
                    "text": "                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n                    - Telemetry.Source\n                  regex: ^(ServerSpan|LocalRootSpan)$\n",
                    "rendered": {
                      "text": "                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n                    - Telemetry.Source\n                  regex: ^(ServerSpan|LocalRootSpan)$\n",
                      "markdown": "`                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n                    - Telemetry.Source\n                  regex: ^(ServerSpan|LocalRootSpan)$\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_fallback_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 19,
                  "endLine": 21,
                  "snippet": {
                    "text": "            - dimensions:\n                - - Environment\n                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n",
                    "rendered": {
                      "text": "            - dimensions:\n                - - Environment\n                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n",
                      "markdown": "`            - dimensions:\n                - - Environment\n                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/nvidia_smi/nvidia_smi.go"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 25,
                  "endLine": 115,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\t\tif strings.HasPrefix(s, \"nvsmi_device_\") && strings.HasSuffix(s, \".dtd\") {\n\t\t\tschema = strings.TrimSuffix(strings.TrimPrefix(s, \"nvsmi_device_\"), \".dtd\")\n\t\t} else {\n\t\t\tsmi.Log.Debugf(\"Cannot find schema version in %q\", directive)\n\t\t}\n\t\tbreak\n\t}\n",
                    "rendered": {
                      "text": "\t\tif strings.HasPrefix(s, \"nvsmi_device_\") && strings.HasSuffix(s, \".dtd\") {\n\t\t\tschema = strings.TrimSuffix(strings.TrimPrefix(s, \"nvsmi_device_\"), \".dtd\")\n\t\t} else {\n\t\t\tsmi.Log.Debugf(\"Cannot find schema version in %q\", directive)\n\t\t}\n\t\tbreak\n\t}\n",
                      "markdown": "`\t\tif strings.HasPrefix(s, \"nvsmi_device_\") && strings.HasSuffix(s, \".dtd\") {\n\t\t\tschema = strings.TrimSuffix(strings.TrimPrefix(s, \"nvsmi_device_\"), \".dtd\")\n\t\t} else {\n\t\t\tsmi.Log.Debugf(\"Cannot find schema version in %q\", directive)\n\t\t}\n\t\tbreak\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/nvidia_smi/nvidia_smi.go"
                },
                "region": {
                  "startLine": 35,
                  "endLine": 35,
                  "endColumn": 9,
                  "snippet": {
                    "text": "// NvidiaSMI holds the methods for this plugin\ntype NvidiaSMI struct {\n\tBinPath              string          `toml:\"bin_path\"`\n\tTimeout              config.Duration `toml:\"timeout\"`\n\tStartupErrorBehavior string          `toml:\"startup_error_behavior\"`\n\tLog                  telegraf.Logger `toml:\"-\"`\n\n",
                    "rendered": {
                      "text": "// NvidiaSMI holds the methods for this plugin\ntype NvidiaSMI struct {\n\tBinPath              string          `toml:\"bin_path\"`\n\tTimeout              config.Duration `toml:\"timeout\"`\n\tStartupErrorBehavior string          `toml:\"startup_error_behavior\"`\n\tLog                  telegraf.Logger `toml:\"-\"`\n\n",
                      "markdown": "`// NvidiaSMI holds the methods for this plugin\ntype NvidiaSMI struct {\n\tBinPath              string          `toml:\"bin_path\"`\n\tTimeout              config.Duration `toml:\"timeout\"`\n\tStartupErrorBehavior string          `toml:\"startup_error_behavior\"`\n\tLog                  telegraf.Logger `toml:\"-\"`\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/nvidia_smi/sample.conf"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 3,
                  "endLine": 15,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  # startup_error_behavior = \"error\"\n\n  ## Optional: timeout for GPU polling\n  # timeout = \"5s\"\n",
                    "rendered": {
                      "text": "  # startup_error_behavior = \"error\"\n\n  ## Optional: timeout for GPU polling\n  # timeout = \"5s\"\n",
                      "markdown": "`  # startup_error_behavior = \"error\"\n\n  ## Optional: timeout for GPU polling\n  # timeout = \"5s\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/nvidia_smi/sample.conf"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 14,
                  "endLine": 14,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  ##   - ignore: telegraf will ignore this plugin\n  # startup_error_behavior = \"error\"\n\n  ## Optional: timeout for GPU polling\n  # timeout = \"5s\"\n",
                    "rendered": {
                      "text": "  ##   - ignore: telegraf will ignore this plugin\n  # startup_error_behavior = \"error\"\n\n  ## Optional: timeout for GPU polling\n  # timeout = \"5s\"\n",
                      "markdown": "`  ##   - ignore: telegraf will ignore this plugin\n  # startup_error_behavior = \"error\"\n\n  ## Optional: timeout for GPU polling\n  # timeout = \"5s\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/nvidia_smi/README.md"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 45,
                  "endLine": 42,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n### Windows\n\nOn Windows, `nvidia-smi` is generally located at `C:\\Program Files\\NVIDIA\nCorporation\\NVSMI\\nvidia-smi.exe` On Windows 10, you may also find this located\nhere `C:\\Windows\\System32\\nvidia-smi.exe`\n\n",
                    "rendered": {
                      "text": "\n### Windows\n\nOn Windows, `nvidia-smi` is generally located at `C:\\Program Files\\NVIDIA\nCorporation\\NVSMI\\nvidia-smi.exe` On Windows 10, you may also find this located\nhere `C:\\Windows\\System32\\nvidia-smi.exe`\n\n",
                      "markdown": "`\n### Windows\n\nOn Windows, `nvidia-smi` is generally located at `C:\\Program Files\\NVIDIA\nCorporation\\NVSMI\\nvidia-smi.exe` On Windows 10, you may also find this located\nhere `C:\\Windows\\System32\\nvidia-smi.exe`\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/nvidia_smi/README.md"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 43,
                  "endLine": 38,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n### Linux\n\nOn Linux, `nvidia-smi` is generally located at `/usr/bin/nvidia-smi`\n\n### Windows\n\n",
                    "rendered": {
                      "text": "\n### Linux\n\nOn Linux, `nvidia-smi` is generally located at `/usr/bin/nvidia-smi`\n\n### Windows\n\n",
                      "markdown": "`\n### Linux\n\nOn Linux, `nvidia-smi` is generally located at `/usr/bin/nvidia-smi`\n\n### Windows\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/nvidia_smi/README.md"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 15,
                  "endLine": 138,
                  "endColumn": 23,
                  "snippet": {
                    "text": "**NOTE:** For use with docker either generate your own custom docker image based\non nvidia/cuda which also installs a telegraf package or use [volume mount\nbinding](https://docs.docker.com/storage/bind-mounts/) to inject the required\nbinary into the docker container. In particular you will need to pass through\nthe /dev/nvidia* devices, the nvidia-smi binary and the nvidia libraries.\nAn minimal docker-compose example of how to do this is:\n\n",
                    "rendered": {
                      "text": "**NOTE:** For use with docker either generate your own custom docker image based\non nvidia/cuda which also installs a telegraf package or use [volume mount\nbinding](https://docs.docker.com/storage/bind-mounts/) to inject the required\nbinary into the docker container. In particular you will need to pass through\nthe /dev/nvidia* devices, the nvidia-smi binary and the nvidia libraries.\nAn minimal docker-compose example of how to do this is:\n\n",
                      "markdown": "`**NOTE:** For use with docker either generate your own custom docker image based\non nvidia/cuda which also installs a telegraf package or use [volume mount\nbinding](https://docs.docker.com/storage/bind-mounts/) to inject the required\nbinary into the docker container. In particular you will need to pass through\nthe /dev/nvidia* devices, the nvidia-smi binary and the nvidia libraries.\nAn minimal docker-compose example of how to do this is:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/nvidia_smi/README.md"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 68,
                  "endLine": 137,
                  "snippet": {
                    "text": "confirmed to be an issue on an EVGA 2080 Ti.\n\n**NOTE:** For use with docker either generate your own custom docker image based\non nvidia/cuda which also installs a telegraf package or use [volume mount\nbinding](https://docs.docker.com/storage/bind-mounts/) to inject the required\nbinary into the docker container. In particular you will need to pass through\nthe /dev/nvidia* devices, the nvidia-smi binary and the nvidia libraries.\nAn minimal docker-compose example of how to do this is:\n",
                    "rendered": {
                      "text": "confirmed to be an issue on an EVGA 2080 Ti.\n\n**NOTE:** For use with docker either generate your own custom docker image based\non nvidia/cuda which also installs a telegraf package or use [volume mount\nbinding](https://docs.docker.com/storage/bind-mounts/) to inject the required\nbinary into the docker container. In particular you will need to pass through\nthe /dev/nvidia* devices, the nvidia-smi binary and the nvidia libraries.\nAn minimal docker-compose example of how to do this is:\n",
                      "markdown": "`confirmed to be an issue on an EVGA 2080 Ti.\n\n**NOTE:** For use with docker either generate your own custom docker image based\non nvidia/cuda which also installs a telegraf package or use [volume mount\nbinding](https://docs.docker.com/storage/bind-mounts/) to inject the required\nbinary into the docker container. In particular you will need to pass through\nthe /dev/nvidia* devices, the nvidia-smi binary and the nvidia libraries.\nAn minimal docker-compose example of how to do this is:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/nvidia_smi/README.md"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 61,
                  "endLine": 135,
                  "endColumn": 69,
                  "snippet": {
                    "text": "when the memory is overclocked.  This may or may not apply to everyone but it's\nconfirmed to be an issue on an EVGA 2080 Ti.\n\n**NOTE:** For use with docker either generate your own custom docker image based\non nvidia/cuda which also installs a telegraf package or use [volume mount\nbinding](https://docs.docker.com/storage/bind-mounts/) to inject the required\nbinary into the docker container. In particular you will need to pass through\n",
                    "rendered": {
                      "text": "when the memory is overclocked.  This may or may not apply to everyone but it's\nconfirmed to be an issue on an EVGA 2080 Ti.\n\n**NOTE:** For use with docker either generate your own custom docker image based\non nvidia/cuda which also installs a telegraf package or use [volume mount\nbinding](https://docs.docker.com/storage/bind-mounts/) to inject the required\nbinary into the docker container. In particular you will need to pass through\n",
                      "markdown": "`when the memory is overclocked.  This may or may not apply to everyone but it's\nconfirmed to be an issue on an EVGA 2080 Ti.\n\n**NOTE:** For use with docker either generate your own custom docker image based\non nvidia/cuda which also installs a telegraf package or use [volume mount\nbinding](https://docs.docker.com/storage/bind-mounts/) to inject the required\nbinary into the docker container. In particular you will need to pass through\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/nvidia_smi/README.md"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 22,
                  "endLine": 135,
                  "endColumn": 30,
                  "snippet": {
                    "text": "when the memory is overclocked.  This may or may not apply to everyone but it's\nconfirmed to be an issue on an EVGA 2080 Ti.\n\n**NOTE:** For use with docker either generate your own custom docker image based\non nvidia/cuda which also installs a telegraf package or use [volume mount\nbinding](https://docs.docker.com/storage/bind-mounts/) to inject the required\nbinary into the docker container. In particular you will need to pass through\n",
                    "rendered": {
                      "text": "when the memory is overclocked.  This may or may not apply to everyone but it's\nconfirmed to be an issue on an EVGA 2080 Ti.\n\n**NOTE:** For use with docker either generate your own custom docker image based\non nvidia/cuda which also installs a telegraf package or use [volume mount\nbinding](https://docs.docker.com/storage/bind-mounts/) to inject the required\nbinary into the docker container. In particular you will need to pass through\n",
                      "markdown": "`when the memory is overclocked.  This may or may not apply to everyone but it's\nconfirmed to be an issue on an EVGA 2080 Ti.\n\n**NOTE:** For use with docker either generate your own custom docker image based\non nvidia/cuda which also installs a telegraf package or use [volume mount\nbinding](https://docs.docker.com/storage/bind-mounts/) to inject the required\nbinary into the docker container. In particular you will need to pass through\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/nvidia_smi/README.md"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 54,
                  "endLine": 100,
                  "endColumn": 60,
                  "snippet": {
                    "text": "GPUs over the last minute\n\n```sql\nSELECT mean(\"temperature_gpu\") FROM \"nvidia_smi\" WHERE time > now() - 5m GROUP BY time(1m), \"index\", \"name\", \"host\"\n```\n\n## Troubleshooting\n",
                    "rendered": {
                      "text": "GPUs over the last minute\n\n```sql\nSELECT mean(\"temperature_gpu\") FROM \"nvidia_smi\" WHERE time > now() - 5m GROUP BY time(1m), \"index\", \"name\", \"host\"\n```\n\n## Troubleshooting\n",
                      "markdown": "`GPUs over the last minute\n\n```sql\nSELECT mean(\"temperature_gpu\") FROM \"nvidia_smi\" WHERE time > now() - 5m GROUP BY time(1m), \"index\", \"name\", \"host\"\n```\n\n## Troubleshooting\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/nvidia_smi/README.md"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 61,
                  "endLine": 43,
                  "endColumn": 67,
                  "snippet": {
                    "text": "### Windows\n\nOn Windows, `nvidia-smi` is generally located at `C:\\Program Files\\NVIDIA\nCorporation\\NVSMI\\nvidia-smi.exe` On Windows 10, you may also find this located\nhere `C:\\Windows\\System32\\nvidia-smi.exe`\n\nYou'll need to escape the `\\` within the `telegraf.conf` like this: `C:\\\\Program\n",
                    "rendered": {
                      "text": "### Windows\n\nOn Windows, `nvidia-smi` is generally located at `C:\\Program Files\\NVIDIA\nCorporation\\NVSMI\\nvidia-smi.exe` On Windows 10, you may also find this located\nhere `C:\\Windows\\System32\\nvidia-smi.exe`\n\nYou'll need to escape the `\\` within the `telegraf.conf` like this: `C:\\\\Program\n",
                      "markdown": "`### Windows\n\nOn Windows, `nvidia-smi` is generally located at `C:\\Program Files\\NVIDIA\nCorporation\\NVSMI\\nvidia-smi.exe` On Windows 10, you may also find this located\nhere `C:\\Windows\\System32\\nvidia-smi.exe`\n\nYou'll need to escape the `\\` within the `telegraf.conf` like this: `C:\\\\Program\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/nvidia_smi/README.md"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 3,
                  "endLine": 33,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  # startup_error_behavior = \"error\"\n\n  ## Optional: timeout for GPU polling\n  # timeout = \"5s\"\n```\n\n### Linux\n",
                    "rendered": {
                      "text": "  # startup_error_behavior = \"error\"\n\n  ## Optional: timeout for GPU polling\n  # timeout = \"5s\"\n```\n\n### Linux\n",
                      "markdown": "`  # startup_error_behavior = \"error\"\n\n  ## Optional: timeout for GPU polling\n  # timeout = \"5s\"\n```\n\n### Linux\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/nvidia_smi/README.md"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 14,
                  "endLine": 32,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  ##   - ignore: telegraf will ignore this plugin\n  # startup_error_behavior = \"error\"\n\n  ## Optional: timeout for GPU polling\n  # timeout = \"5s\"\n```\n\n",
                    "rendered": {
                      "text": "  ##   - ignore: telegraf will ignore this plugin\n  # startup_error_behavior = \"error\"\n\n  ## Optional: timeout for GPU polling\n  # timeout = \"5s\"\n```\n\n",
                      "markdown": "`  ##   - ignore: telegraf will ignore this plugin\n  # startup_error_behavior = \"error\"\n\n  ## Optional: timeout for GPU polling\n  # timeout = \"5s\"\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/win_perf_counters/win_perf_counters.go"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 51,
                  "endLine": 24,
                  "endColumn": 55,
                  "snippet": {
                    "text": "  ## By default this plugin returns basic CPU and Disk statistics.\n  ## See the README file for more examples.\n  ## Uncomment examples below or write your own as you see fit. If the system\n  ## being polled for data does not have the Object at startup of the Telegraf\n  ## agent, it will not be gathered.\n  ## Settings:\n  # PrintValid = false # Print All matching performance counters\n",
                    "rendered": {
                      "text": "  ## By default this plugin returns basic CPU and Disk statistics.\n  ## See the README file for more examples.\n  ## Uncomment examples below or write your own as you see fit. If the system\n  ## being polled for data does not have the Object at startup of the Telegraf\n  ## agent, it will not be gathered.\n  ## Settings:\n  # PrintValid = false # Print All matching performance counters\n",
                      "markdown": "`  ## By default this plugin returns basic CPU and Disk statistics.\n  ## See the README file for more examples.\n  ## Uncomment examples below or write your own as you see fit. If the system\n  ## being polled for data does not have the Object at startup of the Telegraf\n  ## agent, it will not be gathered.\n  ## Settings:\n  # PrintValid = false # Print All matching performance counters\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/win_perf_counters/README.md"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 147,
                  "endLine": 232,
                  "endColumn": 155,
                  "snippet": {
                    "text": "```\n  [[inputs.win_perf_counters.object]]\n    ObjectName = \"DNS\"\n    Counters = [\"Dynamic Update Received\",\"Dynamic Update Rejected\",\"Recursive Queries\",\"Recursive Queries Failure\",\"Secure Update Failure\",\"Secure Update Received\",\"TCP Query Received\",\"TCP Response Sent\",\"UDP Query Received\",\"UDP Response Sent\",\"Total Query Received\",\"Total Response Sent\"]\n    Instances = [\"------\"]\n    Measurement = \"win_dns\"\n    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n",
                    "rendered": {
                      "text": "```\n  [[inputs.win_perf_counters.object]]\n    ObjectName = \"DNS\"\n    Counters = [\"Dynamic Update Received\",\"Dynamic Update Rejected\",\"Recursive Queries\",\"Recursive Queries Failure\",\"Secure Update Failure\",\"Secure Update Received\",\"TCP Query Received\",\"TCP Response Sent\",\"UDP Query Received\",\"UDP Response Sent\",\"Total Query Received\",\"Total Response Sent\"]\n    Instances = [\"------\"]\n    Measurement = \"win_dns\"\n    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n",
                      "markdown": "````\n  [[inputs.win_perf_counters.object]]\n    ObjectName = \"DNS\"\n    Counters = [\"Dynamic Update Received\",\"Dynamic Update Rejected\",\"Recursive Queries\",\"Recursive Queries Failure\",\"Secure Update Failure\",\"Secure Update Received\",\"TCP Query Received\",\"TCP Response Sent\",\"UDP Query Received\",\"UDP Response Sent\",\"Total Query Received\",\"Total Response Sent\"]\n    Instances = [\"------\"]\n    Measurement = \"win_dns\"\n    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/win_perf_counters/README.md"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 123,
                  "endLine": 232,
                  "endColumn": 131,
                  "snippet": {
                    "text": "```\n  [[inputs.win_perf_counters.object]]\n    ObjectName = \"DNS\"\n    Counters = [\"Dynamic Update Received\",\"Dynamic Update Rejected\",\"Recursive Queries\",\"Recursive Queries Failure\",\"Secure Update Failure\",\"Secure Update Received\",\"TCP Query Received\",\"TCP Response Sent\",\"UDP Query Received\",\"UDP Response Sent\",\"Total Query Received\",\"Total Response Sent\"]\n    Instances = [\"------\"]\n    Measurement = \"win_dns\"\n    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n",
                    "rendered": {
                      "text": "```\n  [[inputs.win_perf_counters.object]]\n    ObjectName = \"DNS\"\n    Counters = [\"Dynamic Update Received\",\"Dynamic Update Rejected\",\"Recursive Queries\",\"Recursive Queries Failure\",\"Secure Update Failure\",\"Secure Update Received\",\"TCP Query Received\",\"TCP Response Sent\",\"UDP Query Received\",\"UDP Response Sent\",\"Total Query Received\",\"Total Response Sent\"]\n    Instances = [\"------\"]\n    Measurement = \"win_dns\"\n    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n",
                      "markdown": "````\n  [[inputs.win_perf_counters.object]]\n    ObjectName = \"DNS\"\n    Counters = [\"Dynamic Update Received\",\"Dynamic Update Rejected\",\"Recursive Queries\",\"Recursive Queries Failure\",\"Secure Update Failure\",\"Secure Update Received\",\"TCP Query Received\",\"TCP Response Sent\",\"UDP Query Received\",\"UDP Response Sent\",\"Total Query Received\",\"Total Response Sent\"]\n    Instances = [\"------\"]\n    Measurement = \"win_dns\"\n    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/win_perf_counters/README.md"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 50,
                  "endLine": 232,
                  "endColumn": 58,
                  "snippet": {
                    "text": "```\n  [[inputs.win_perf_counters.object]]\n    ObjectName = \"DNS\"\n    Counters = [\"Dynamic Update Received\",\"Dynamic Update Rejected\",\"Recursive Queries\",\"Recursive Queries Failure\",\"Secure Update Failure\",\"Secure Update Received\",\"TCP Query Received\",\"TCP Response Sent\",\"UDP Query Received\",\"UDP Response Sent\",\"Total Query Received\",\"Total Response Sent\"]\n    Instances = [\"------\"]\n    Measurement = \"win_dns\"\n    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n",
                    "rendered": {
                      "text": "```\n  [[inputs.win_perf_counters.object]]\n    ObjectName = \"DNS\"\n    Counters = [\"Dynamic Update Received\",\"Dynamic Update Rejected\",\"Recursive Queries\",\"Recursive Queries Failure\",\"Secure Update Failure\",\"Secure Update Received\",\"TCP Query Received\",\"TCP Response Sent\",\"UDP Query Received\",\"UDP Response Sent\",\"Total Query Received\",\"Total Response Sent\"]\n    Instances = [\"------\"]\n    Measurement = \"win_dns\"\n    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n",
                      "markdown": "````\n  [[inputs.win_perf_counters.object]]\n    ObjectName = \"DNS\"\n    Counters = [\"Dynamic Update Received\",\"Dynamic Update Rejected\",\"Recursive Queries\",\"Recursive Queries Failure\",\"Secure Update Failure\",\"Secure Update Received\",\"TCP Query Received\",\"TCP Response Sent\",\"UDP Query Received\",\"UDP Response Sent\",\"Total Query Received\",\"Total Response Sent\"]\n    Instances = [\"------\"]\n    Measurement = \"win_dns\"\n    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/win_perf_counters/README.md"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 24,
                  "endLine": 232,
                  "endColumn": 32,
                  "snippet": {
                    "text": "```\n  [[inputs.win_perf_counters.object]]\n    ObjectName = \"DNS\"\n    Counters = [\"Dynamic Update Received\",\"Dynamic Update Rejected\",\"Recursive Queries\",\"Recursive Queries Failure\",\"Secure Update Failure\",\"Secure Update Received\",\"TCP Query Received\",\"TCP Response Sent\",\"UDP Query Received\",\"UDP Response Sent\",\"Total Query Received\",\"Total Response Sent\"]\n    Instances = [\"------\"]\n    Measurement = \"win_dns\"\n    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n",
                    "rendered": {
                      "text": "```\n  [[inputs.win_perf_counters.object]]\n    ObjectName = \"DNS\"\n    Counters = [\"Dynamic Update Received\",\"Dynamic Update Rejected\",\"Recursive Queries\",\"Recursive Queries Failure\",\"Secure Update Failure\",\"Secure Update Received\",\"TCP Query Received\",\"TCP Response Sent\",\"UDP Query Received\",\"UDP Response Sent\",\"Total Query Received\",\"Total Response Sent\"]\n    Instances = [\"------\"]\n    Measurement = \"win_dns\"\n    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n",
                      "markdown": "````\n  [[inputs.win_perf_counters.object]]\n    ObjectName = \"DNS\"\n    Counters = [\"Dynamic Update Received\",\"Dynamic Update Rejected\",\"Recursive Queries\",\"Recursive Queries Failure\",\"Secure Update Failure\",\"Secure Update Received\",\"TCP Query Received\",\"TCP Response Sent\",\"UDP Query Received\",\"UDP Response Sent\",\"Total Query Received\",\"Total Response Sent\"]\n    Instances = [\"------\"]\n    Measurement = \"win_dns\"\n    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/win_perf_counters/README.md"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 65,
                  "endLine": 169,
                  "snippet": {
                    "text": "    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n\n  [[inputs.win_perf_counters.object]]\n    # more counters for the Network Interface Object can be found at\n    # https://msdn.microsoft.com/en-us/library/ms803962.aspx\n    ObjectName = \"Network Interface\"\n    Counters = [\"Bytes Received/sec\",\"Bytes Sent/sec\",\"Packets Received/sec\",\"Packets Sent/sec\"]\n    Instances = [\"*\"] # Use 6 x - to remove the Instance bit from the query.\n",
                    "rendered": {
                      "text": "    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n\n  [[inputs.win_perf_counters.object]]\n    # more counters for the Network Interface Object can be found at\n    # https://msdn.microsoft.com/en-us/library/ms803962.aspx\n    ObjectName = \"Network Interface\"\n    Counters = [\"Bytes Received/sec\",\"Bytes Sent/sec\",\"Packets Received/sec\",\"Packets Sent/sec\"]\n    Instances = [\"*\"] # Use 6 x - to remove the Instance bit from the query.\n",
                      "markdown": "`    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n\n  [[inputs.win_perf_counters.object]]\n    # more counters for the Network Interface Object can be found at\n    # https://msdn.microsoft.com/en-us/library/ms803962.aspx\n    ObjectName = \"Network Interface\"\n    Counters = [\"Bytes Received/sec\",\"Bytes Sent/sec\",\"Packets Received/sec\",\"Packets Sent/sec\"]\n    Instances = [\"*\"] # Use 6 x - to remove the Instance bit from the query.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/win_perf_counters/README.md"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 51,
                  "endLine": 79,
                  "endColumn": 55,
                  "snippet": {
                    "text": "unless this is specified as the wanted instance.\nAlternatively see the option IncludeTotal below.\n\nSome Objects does not have instances to select from at all,\nhere only one option is valid if you want data back,\nand that is to specify `Instances = [\"------\"]`.\n\n",
                    "rendered": {
                      "text": "unless this is specified as the wanted instance.\nAlternatively see the option IncludeTotal below.\n\nSome Objects does not have instances to select from at all,\nhere only one option is valid if you want data back,\nand that is to specify `Instances = [\"------\"]`.\n\n",
                      "markdown": "`unless this is specified as the wanted instance.\nAlternatively see the option IncludeTotal below.\n\nSome Objects does not have instances to select from at all,\nhere only one option is valid if you want data back,\nand that is to specify `Instances = [\"------\"]`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/win_perf_counters/README.md"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 20,
                  "endLine": 7,
                  "endColumn": 24,
                  "snippet": {
                    "text": "the plugin will be handed configuration from Telegraf.\nThis configuration is parsed and then tested for validity such as\nif the Object, Instance and Counter existing.\nIf it does not match at startup, it will not be fetched.\nExceptions to this are in cases where you query for all instances \"*\".\nBy default the plugin does not return _Total\nwhen it is querying for all (*) as this is redundant.\n",
                    "rendered": {
                      "text": "the plugin will be handed configuration from Telegraf.\nThis configuration is parsed and then tested for validity such as\nif the Object, Instance and Counter existing.\nIf it does not match at startup, it will not be fetched.\nExceptions to this are in cases where you query for all instances \"*\".\nBy default the plugin does not return _Total\nwhen it is querying for all (*) as this is redundant.\n",
                      "markdown": "`the plugin will be handed configuration from Telegraf.\nThis configuration is parsed and then tested for validity such as\nif the Object, Instance and Counter existing.\nIf it does not match at startup, it will not be fetched.\nExceptions to this are in cases where you query for all instances \"*\".\nBy default the plugin does not return _Total\nwhen it is querying for all (*) as this is redundant.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/win_perf_counters/README.md"
                },
                "region": {
                  "startLine": 339,
                  "startColumn": 18,
                  "endLine": 339,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  [[inputs.win_perf_counters.object]]\n    # .NET CLR Security, in this case for IIS only\n    ObjectName = \".NET CLR Security\"\n    Counters = [\"% Time in RT checks\",\"Stack Walk Depth\",\"Total Runtime Checks\"]\n    Instances = [\"w3wp\"]\n    Measurement = \"win_dotnet_security\"\n    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n",
                    "rendered": {
                      "text": "  [[inputs.win_perf_counters.object]]\n    # .NET CLR Security, in this case for IIS only\n    ObjectName = \".NET CLR Security\"\n    Counters = [\"% Time in RT checks\",\"Stack Walk Depth\",\"Total Runtime Checks\"]\n    Instances = [\"w3wp\"]\n    Measurement = \"win_dotnet_security\"\n    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n",
                      "markdown": "`  [[inputs.win_perf_counters.object]]\n    # .NET CLR Security, in this case for IIS only\n    ObjectName = \".NET CLR Security\"\n    Counters = [\"% Time in RT checks\",\"Stack Walk Depth\",\"Total Runtime Checks\"]\n    Instances = [\"w3wp\"]\n    Measurement = \"win_dotnet_security\"\n    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/win_perf_counters/README.md"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 18,
                  "endLine": 331,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  [[inputs.win_perf_counters.object]]\n    # .NET CLR Memory, in this case for IIS only\n    ObjectName = \".NET CLR Memory\"\n    Counters = [\"% Time in GC\",\"# Bytes in all Heaps\",\"# Gen 0 Collections\",\"# Gen 1 Collections\",\"# Gen 2 Collections\",\"# Induced GC\",\"Allocated Bytes/sec\",\"Finalization Survivors\",\"Gen 0 heap size\",\"Gen 1 heap size\",\"Gen 2 heap size\",\"Large Object Heap size\",\"# of Pinned Objects\"]\n    Instances = [\"w3wp\"]\n    Measurement = \"win_dotnet_mem\"\n    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n",
                    "rendered": {
                      "text": "  [[inputs.win_perf_counters.object]]\n    # .NET CLR Memory, in this case for IIS only\n    ObjectName = \".NET CLR Memory\"\n    Counters = [\"% Time in GC\",\"# Bytes in all Heaps\",\"# Gen 0 Collections\",\"# Gen 1 Collections\",\"# Gen 2 Collections\",\"# Induced GC\",\"Allocated Bytes/sec\",\"Finalization Survivors\",\"Gen 0 heap size\",\"Gen 1 heap size\",\"Gen 2 heap size\",\"Large Object Heap size\",\"# of Pinned Objects\"]\n    Instances = [\"w3wp\"]\n    Measurement = \"win_dotnet_mem\"\n    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n",
                      "markdown": "`  [[inputs.win_perf_counters.object]]\n    # .NET CLR Memory, in this case for IIS only\n    ObjectName = \".NET CLR Memory\"\n    Counters = [\"% Time in GC\",\"# Bytes in all Heaps\",\"# Gen 0 Collections\",\"# Gen 1 Collections\",\"# Gen 2 Collections\",\"# Induced GC\",\"Allocated Bytes/sec\",\"Finalization Survivors\",\"Gen 0 heap size\",\"Gen 1 heap size\",\"Gen 2 heap size\",\"Large Object Heap size\",\"# of Pinned Objects\"]\n    Instances = [\"w3wp\"]\n    Measurement = \"win_dotnet_mem\"\n    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/win_perf_counters/README.md"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 18,
                  "endLine": 315,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  [[inputs.win_perf_counters.object]]\n    # .NET CLR Loading, in this case for IIS only\n    ObjectName = \".NET CLR Loading\"\n    Counters = [\"% Time Loading\"]\n    Instances = [\"w3wp\"]\n    Measurement = \"win_dotnet_loading\"\n    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n",
                    "rendered": {
                      "text": "  [[inputs.win_perf_counters.object]]\n    # .NET CLR Loading, in this case for IIS only\n    ObjectName = \".NET CLR Loading\"\n    Counters = [\"% Time Loading\"]\n    Instances = [\"w3wp\"]\n    Measurement = \"win_dotnet_loading\"\n    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n",
                      "markdown": "`  [[inputs.win_perf_counters.object]]\n    # .NET CLR Loading, in this case for IIS only\n    ObjectName = \".NET CLR Loading\"\n    Counters = [\"% Time Loading\"]\n    Instances = [\"w3wp\"]\n    Measurement = \"win_dotnet_loading\"\n    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/win_perf_counters/README.md"
                },
                "region": {
                  "startLine": 307,
                  "startColumn": 18,
                  "endLine": 307,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  [[inputs.win_perf_counters.object]]\n    # .NET CLR Jit, in this case for IIS only\n    ObjectName = \".NET CLR Jit\"\n    Counters = [\"% Time in Jit\",\"IL Bytes Jitted / sec\"]\n    Instances = [\"w3wp\"]\n    Measurement = \"win_dotnet_jit\"\n    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n",
                    "rendered": {
                      "text": "  [[inputs.win_perf_counters.object]]\n    # .NET CLR Jit, in this case for IIS only\n    ObjectName = \".NET CLR Jit\"\n    Counters = [\"% Time in Jit\",\"IL Bytes Jitted / sec\"]\n    Instances = [\"w3wp\"]\n    Measurement = \"win_dotnet_jit\"\n    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n",
                      "markdown": "`  [[inputs.win_perf_counters.object]]\n    # .NET CLR Jit, in this case for IIS only\n    ObjectName = \".NET CLR Jit\"\n    Counters = [\"% Time in Jit\",\"IL Bytes Jitted / sec\"]\n    Instances = [\"w3wp\"]\n    Measurement = \"win_dotnet_jit\"\n    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/win_perf_counters/README.md"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 21,
                  "endLine": 274,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n  [[inputs.win_perf_counters.object]]\n    # Web Service Cache / IIS\n    ObjectName = \"Web Service Cache\"\n    Counters = [\"URI Cache Hits %\",\"Kernel: URI Cache Hits %\",\"File Cache Hits %\"]\n    Instances = [\"*\"]\n    Measurement = \"win_websvc_cache\"\n",
                    "rendered": {
                      "text": "\n  [[inputs.win_perf_counters.object]]\n    # Web Service Cache / IIS\n    ObjectName = \"Web Service Cache\"\n    Counters = [\"URI Cache Hits %\",\"Kernel: URI Cache Hits %\",\"File Cache Hits %\"]\n    Instances = [\"*\"]\n    Measurement = \"win_websvc_cache\"\n",
                      "markdown": "`\n  [[inputs.win_perf_counters.object]]\n    # Web Service Cache / IIS\n    ObjectName = \"Web Service Cache\"\n    Counters = [\"URI Cache Hits %\",\"Kernel: URI Cache Hits %\",\"File Cache Hits %\"]\n    Instances = [\"*\"]\n    Measurement = \"win_websvc_cache\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/win_perf_counters/README.md"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 9,
                  "endLine": 273,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n\n  [[inputs.win_perf_counters.object]]\n    # Web Service Cache / IIS\n    ObjectName = \"Web Service Cache\"\n    Counters = [\"URI Cache Hits %\",\"Kernel: URI Cache Hits %\",\"File Cache Hits %\"]\n    Instances = [\"*\"]\n",
                    "rendered": {
                      "text": "    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n\n  [[inputs.win_perf_counters.object]]\n    # Web Service Cache / IIS\n    ObjectName = \"Web Service Cache\"\n    Counters = [\"URI Cache Hits %\",\"Kernel: URI Cache Hits %\",\"File Cache Hits %\"]\n    Instances = [\"*\"]\n",
                      "markdown": "`    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n\n  [[inputs.win_perf_counters.object]]\n    # Web Service Cache / IIS\n    ObjectName = \"Web Service Cache\"\n    Counters = [\"URI Cache Hits %\",\"Kernel: URI Cache Hits %\",\"File Cache Hits %\"]\n    Instances = [\"*\"]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/win_perf_counters/README.md"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 14,
                  "endLine": 266,
                  "snippet": {
                    "text": "    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n\n  [[inputs.win_perf_counters.object]]\n    # IIS, Web Service\n    ObjectName = \"Web Service\"\n    Counters = [\"Get Requests/sec\",\"Post Requests/sec\",\"Connection Attempts/sec\",\"Current Connections\",\"ISAPI Extension Requests/sec\"]\n    Instances = [\"*\"]\n    Measurement = \"win_websvc\"\n",
                    "rendered": {
                      "text": "    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n\n  [[inputs.win_perf_counters.object]]\n    # IIS, Web Service\n    ObjectName = \"Web Service\"\n    Counters = [\"Get Requests/sec\",\"Post Requests/sec\",\"Connection Attempts/sec\",\"Current Connections\",\"ISAPI Extension Requests/sec\"]\n    Instances = [\"*\"]\n    Measurement = \"win_websvc\"\n",
                      "markdown": "`    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).\n\n  [[inputs.win_perf_counters.object]]\n    # IIS, Web Service\n    ObjectName = \"Web Service\"\n    Counters = [\"Get Requests/sec\",\"Post Requests/sec\",\"Connection Attempts/sec\",\"Current Connections\",\"ISAPI Extension Requests/sec\"]\n    Instances = [\"*\"]\n    Measurement = \"win_websvc\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/win_perf_counters/README.md"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 22,
                  "endLine": 242,
                  "endColumn": 31,
                  "snippet": {
                    "text": "```\n  [[inputs.win_perf_counters.object]]\n    # HTTP Service request queues in the Kernel before being handed over to User Mode.\n    ObjectName = \"HTTP Service Request Queues\"\n    Instances = [\"*\"]\n    Counters = [\"CurrentQueueSize\",\"RejectedRequests\"]\n    Measurement = \"win_http_queues\"\n",
                    "rendered": {
                      "text": "```\n  [[inputs.win_perf_counters.object]]\n    # HTTP Service request queues in the Kernel before being handed over to User Mode.\n    ObjectName = \"HTTP Service Request Queues\"\n    Instances = [\"*\"]\n    Counters = [\"CurrentQueueSize\",\"RejectedRequests\"]\n    Measurement = \"win_http_queues\"\n",
                      "markdown": "````\n  [[inputs.win_perf_counters.object]]\n    # HTTP Service request queues in the Kernel before being handed over to User Mode.\n    ObjectName = \"HTTP Service Request Queues\"\n    Instances = [\"*\"]\n    Counters = [\"CurrentQueueSize\",\"RejectedRequests\"]\n    Measurement = \"win_http_queues\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/win_perf_counters/README.md"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 10,
                  "endLine": 241,
                  "endColumn": 19,
                  "snippet": {
                    "text": "### IIS / ASP.NET\n```\n  [[inputs.win_perf_counters.object]]\n    # HTTP Service request queues in the Kernel before being handed over to User Mode.\n    ObjectName = \"HTTP Service Request Queues\"\n    Instances = [\"*\"]\n    Counters = [\"CurrentQueueSize\",\"RejectedRequests\"]\n",
                    "rendered": {
                      "text": "### IIS / ASP.NET\n```\n  [[inputs.win_perf_counters.object]]\n    # HTTP Service request queues in the Kernel before being handed over to User Mode.\n    ObjectName = \"HTTP Service Request Queues\"\n    Instances = [\"*\"]\n    Counters = [\"CurrentQueueSize\",\"RejectedRequests\"]\n",
                      "markdown": "`### IIS / ASP.NET\n```\n  [[inputs.win_perf_counters.object]]\n    # HTTP Service request queues in the Kernel before being handed over to User Mode.\n    ObjectName = \"HTTP Service Request Queues\"\n    Instances = [\"*\"]\n    Counters = [\"CurrentQueueSize\",\"RejectedRequests\"]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/win_perf_counters/README.md"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 33,
                  "endLine": 219,
                  "endColumn": 42,
                  "snippet": {
                    "text": "```\n  [[inputs.win_perf_counters.object]]\n    # AD, DFS R, Useful if the server hosts a DFS Replication folder or is a Domain Controller\n    ObjectName = \"DFS Replication Service Volumes\"\n    Instances = [\"*\"]\n    Counters = [\"Data Lookups\",\"Database Commits\"]\n    Measurement = \"win_dfsr\"\n",
                    "rendered": {
                      "text": "```\n  [[inputs.win_perf_counters.object]]\n    # AD, DFS R, Useful if the server hosts a DFS Replication folder or is a Domain Controller\n    ObjectName = \"DFS Replication Service Volumes\"\n    Instances = [\"*\"]\n    Counters = [\"Data Lookups\",\"Database Commits\"]\n    Measurement = \"win_dfsr\"\n",
                      "markdown": "````\n  [[inputs.win_perf_counters.object]]\n    # AD, DFS R, Useful if the server hosts a DFS Replication folder or is a Domain Controller\n    ObjectName = \"DFS Replication Service Volumes\"\n    Instances = [\"*\"]\n    Counters = [\"Data Lookups\",\"Database Commits\"]\n    Measurement = \"win_dfsr\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/win_perf_counters/README.md"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 31,
                  "endLine": 206,
                  "endColumn": 40,
                  "snippet": {
                    "text": "```\n  [[inputs.win_perf_counters.object]]\n    # AD, DFS N, Useful if the server hosts a DFS Namespace or is a Domain Controller\n    ObjectName = \"DFS Namespace Service Referrals\"\n    Instances = [\"*\"]\n    Counters = [\"Requests Processed\",\"Requests Failed\",\"Avg. Response Time\"]\n    Measurement = \"win_dfsn\"\n",
                    "rendered": {
                      "text": "```\n  [[inputs.win_perf_counters.object]]\n    # AD, DFS N, Useful if the server hosts a DFS Namespace or is a Domain Controller\n    ObjectName = \"DFS Namespace Service Referrals\"\n    Instances = [\"*\"]\n    Counters = [\"Requests Processed\",\"Requests Failed\",\"Avg. Response Time\"]\n    Measurement = \"win_dfsn\"\n",
                      "markdown": "````\n  [[inputs.win_perf_counters.object]]\n    # AD, DFS N, Useful if the server hosts a DFS Namespace or is a Domain Controller\n    ObjectName = \"DFS Namespace Service Referrals\"\n    Instances = [\"*\"]\n    Counters = [\"Requests Processed\",\"Requests Failed\",\"Avg. Response Time\"]\n    Measurement = \"win_dfsn\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/common/common.go"
                },
                "region": {
                  "startLine": 379,
                  "startColumn": 17,
                  "endLine": 379,
                  "endColumn": 22,
                  "snippet": {
                    "text": "// at the index is returned. If it is a map, then the index is ignored and the map is returned directly.\nfunc GetIndexedMap(conf *confmap.Conf, configKey string, index int) map[string]any {\n\tvar got map[string]any\n\tswitch v := conf.Get(configKey).(type) {\n\tcase []any:\n\t\tif index != -1 && len(v) > index {\n\t\t\tgot = v[index].(map[string]any)\n",
                    "rendered": {
                      "text": "// at the index is returned. If it is a map, then the index is ignored and the map is returned directly.\nfunc GetIndexedMap(conf *confmap.Conf, configKey string, index int) map[string]any {\n\tvar got map[string]any\n\tswitch v := conf.Get(configKey).(type) {\n\tcase []any:\n\t\tif index != -1 && len(v) > index {\n\t\t\tgot = v[index].(map[string]any)\n",
                      "markdown": "`// at the index is returned. If it is a map, then the index is ignored and the map is returned directly.\nfunc GetIndexedMap(conf *confmap.Conf, configKey string, index int) map[string]any {\n\tvar got map[string]any\n\tswitch v := conf.Get(configKey).(type) {\n\tcase []any:\n\t\tif index != -1 && len(v) > index {\n\t\t\tgot = v[index].(map[string]any)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/common/common.go"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 17,
                  "endLine": 341,
                  "endColumn": 22,
                  "snippet": {
                    "text": "func GetDuration(conf *confmap.Conf, key string) (time.Duration, bool) {\n\tvar duration time.Duration\n\tvar ok bool\n\tif value := conf.Get(key); value != nil {\n\t\tvar err error\n\t\tduration, err = ParseDuration(value)\n\t\tok = err == nil && duration > 0\n",
                    "rendered": {
                      "text": "func GetDuration(conf *confmap.Conf, key string) (time.Duration, bool) {\n\tvar duration time.Duration\n\tvar ok bool\n\tif value := conf.Get(key); value != nil {\n\t\tvar err error\n\t\tduration, err = ParseDuration(value)\n\t\tok = err == nil && duration > 0\n",
                      "markdown": "`func GetDuration(conf *confmap.Conf, key string) (time.Duration, bool) {\n\tvar duration time.Duration\n\tvar ok bool\n\tif value := conf.Get(key); value != nil {\n\t\tvar err error\n\t\tduration, err = ParseDuration(value)\n\t\tok = err == nil && duration > 0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/common/common.go"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 13,
                  "endLine": 301,
                  "endColumn": 18,
                  "snippet": {
                    "text": "// GetNumber gets the number value for the key. The switch works through\n// all reasonable number types (the default is typically float64)\nfunc GetNumber(conf *confmap.Conf, key string) (float64, bool) {\n\tif v := conf.Get(key); v != nil {\n\t\tswitch i := v.(type) {\n\t\tcase float64:\n\t\t\treturn i, true\n",
                    "rendered": {
                      "text": "// GetNumber gets the number value for the key. The switch works through\n// all reasonable number types (the default is typically float64)\nfunc GetNumber(conf *confmap.Conf, key string) (float64, bool) {\n\tif v := conf.Get(key); v != nil {\n\t\tswitch i := v.(type) {\n\t\tcase float64:\n\t\t\treturn i, true\n",
                      "markdown": "`// GetNumber gets the number value for the key. The switch works through\n// all reasonable number types (the default is typically float64)\nfunc GetNumber(conf *confmap.Conf, key string) (float64, bool) {\n\tif v := conf.Get(key); v != nil {\n\t\tswitch i := v.(type) {\n\t\tcase float64:\n\t\t\treturn i, true\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/common/common.go"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 13,
                  "endLine": 290,
                  "endColumn": 18,
                  "snippet": {
                    "text": "// GetOrDefaultBool gets the bool value for the key. If the key is missing or the\n// value is not a bool type, then the defaultVal is returned.\nfunc GetOrDefaultBool(conf *confmap.Conf, key string, defaultVal bool) bool {\n\tif v := conf.Get(key); v != nil {\n\t\tif val, ok := v.(bool); ok {\n\t\t\treturn val\n\t\t}\n",
                    "rendered": {
                      "text": "// GetOrDefaultBool gets the bool value for the key. If the key is missing or the\n// value is not a bool type, then the defaultVal is returned.\nfunc GetOrDefaultBool(conf *confmap.Conf, key string, defaultVal bool) bool {\n\tif v := conf.Get(key); v != nil {\n\t\tif val, ok := v.(bool); ok {\n\t\t\treturn val\n\t\t}\n",
                      "markdown": "`// GetOrDefaultBool gets the bool value for the key. If the key is missing or the\n// value is not a bool type, then the defaultVal is returned.\nfunc GetOrDefaultBool(conf *confmap.Conf, key string, defaultVal bool) bool {\n\tif v := conf.Get(key); v != nil {\n\t\tif val, ok := v.(bool); ok {\n\t\t\treturn val\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/common/common.go"
                },
                "region": {
                  "startLine": 281,
                  "startColumn": 13,
                  "endLine": 281,
                  "endColumn": 18,
                  "snippet": {
                    "text": "// GetBool gets the bool value for the key. If the key is missing or the\n// value is not a bool type, then ok will be false.\nfunc GetBool(conf *confmap.Conf, key string) (value bool, ok bool) {\n\tif v := conf.Get(key); v != nil {\n\t\tvalue, ok = v.(bool)\n\t}\n\treturn\n",
                    "rendered": {
                      "text": "// GetBool gets the bool value for the key. If the key is missing or the\n// value is not a bool type, then ok will be false.\nfunc GetBool(conf *confmap.Conf, key string) (value bool, ok bool) {\n\tif v := conf.Get(key); v != nil {\n\t\tvalue, ok = v.(bool)\n\t}\n\treturn\n",
                      "markdown": "`// GetBool gets the bool value for the key. If the key is missing or the\n// value is not a bool type, then ok will be false.\nfunc GetBool(conf *confmap.Conf, key string) (value bool, ok bool) {\n\tif v := conf.Get(key); v != nil {\n\t\tvalue, ok = v.(bool)\n\t}\n\treturn\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/common/common.go"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 17,
                  "endLine": 265,
                  "endColumn": 22,
                  "snippet": {
                    "text": "// GetArray gets the array value for the key. If the key is missing,\n// the return value will be nil\nfunc GetArray[C any](conf *confmap.Conf, key string) []C {\n\tif value := conf.Get(key); value != nil {\n\t\tvar arr []C\n\t\tgot, _ := value.([]any)\n\t\tfor _, entry := range got {\n",
                    "rendered": {
                      "text": "// GetArray gets the array value for the key. If the key is missing,\n// the return value will be nil\nfunc GetArray[C any](conf *confmap.Conf, key string) []C {\n\tif value := conf.Get(key); value != nil {\n\t\tvar arr []C\n\t\tgot, _ := value.([]any)\n\t\tfor _, entry := range got {\n",
                      "markdown": "`// GetArray gets the array value for the key. If the key is missing,\n// the return value will be nil\nfunc GetArray[C any](conf *confmap.Conf, key string) []C {\n\tif value := conf.Get(key); value != nil {\n\t\tvar arr []C\n\t\tgot, _ := value.([]any)\n\t\tfor _, entry := range got {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/common/common.go"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 17,
                  "endLine": 250,
                  "endColumn": 22,
                  "snippet": {
                    "text": "// GetString gets the string value for the key. If the key is missing,\n// ok will be false.\nfunc GetString(conf *confmap.Conf, key string) (string, bool) {\n\tif value := conf.Get(key); value != nil {\n\t\tgot, ok := value.(string)\n\t\t// if the value isn't a string, convert it\n\t\tif !ok {\n",
                    "rendered": {
                      "text": "// GetString gets the string value for the key. If the key is missing,\n// ok will be false.\nfunc GetString(conf *confmap.Conf, key string) (string, bool) {\n\tif value := conf.Get(key); value != nil {\n\t\tgot, ok := value.(string)\n\t\t// if the value isn't a string, convert it\n\t\tif !ok {\n",
                      "markdown": "`// GetString gets the string value for the key. If the key is missing,\n// ok will be false.\nfunc GetString(conf *confmap.Conf, key string) (string, bool) {\n\tif value := conf.Get(key); value != nil {\n\t\tgot, ok := value.(string)\n\t\t// if the value isn't a string, convert it\n\t\tif !ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/common/common.go"
                },
                "region": {
                  "startLine": 376,
                  "startColumn": 2,
                  "endLine": 376,
                  "endColumn": 6,
                  "snippet": {
                    "text": "}\n\n// GetIndexedMap gets the sub map based on the config key and index. If the config value is an array, then the value\n// at the index is returned. If it is a map, then the index is ignored and the map is returned directly.\nfunc GetIndexedMap(conf *confmap.Conf, configKey string, index int) map[string]any {\n\tvar got map[string]any\n\tswitch v := conf.Get(configKey).(type) {\n",
                    "rendered": {
                      "text": "}\n\n// GetIndexedMap gets the sub map based on the config key and index. If the config value is an array, then the value\n// at the index is returned. If it is a map, then the index is ignored and the map is returned directly.\nfunc GetIndexedMap(conf *confmap.Conf, configKey string, index int) map[string]any {\n\tvar got map[string]any\n\tswitch v := conf.Get(configKey).(type) {\n",
                      "markdown": "`}\n\n// GetIndexedMap gets the sub map based on the config key and index. If the config value is an array, then the value\n// at the index is returned. If it is a map, then the index is ignored and the map is returned directly.\nfunc GetIndexedMap(conf *confmap.Conf, configKey string, index int) map[string]any {\n\tvar got map[string]any\n\tswitch v := conf.Get(configKey).(type) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/common/common.go"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 56,
                  "endLine": 205,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\treturn fmt.Sprintf(\"%q missing key in JSON: %q\", e.ID, e.JsonKey)\n}\n\n// ComponentTranslators is a component ID and respective service pipeline.\ntype ComponentTranslators struct {\n\tReceivers  TranslatorMap[component.Config]\n\tProcessors TranslatorMap[component.Config]\n",
                    "rendered": {
                      "text": "\treturn fmt.Sprintf(\"%q missing key in JSON: %q\", e.ID, e.JsonKey)\n}\n\n// ComponentTranslators is a component ID and respective service pipeline.\ntype ComponentTranslators struct {\n\tReceivers  TranslatorMap[component.Config]\n\tProcessors TranslatorMap[component.Config]\n",
                      "markdown": "`\treturn fmt.Sprintf(\"%q missing key in JSON: %q\", e.ID, e.JsonKey)\n}\n\n// ComponentTranslators is a component ID and respective service pipeline.\ntype ComponentTranslators struct {\n\tReceivers  TranslatorMap[component.Config]\n\tProcessors TranslatorMap[component.Config]\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/tcp_logs/translator.go"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 42,
                  "endLine": 71,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\tif !conf.IsSet(common.ConfigKey(serviceAddressKey)) {\n\t\tcfg.InputConfig.BaseConfig.ListenAddress = \"0.0.0.0:25888\"\n\t} else {\n\t\tserviceAddress := fmt.Sprintf(\"%v\", conf.Get(serviceAddressKey))\n\t\tserviceSplit := strings.Split(serviceAddress, addressSplit)\n\t\tif len(serviceSplit) != 3 {\n\t\t\treturn nil, errors.New(\"invalid service split\")\n",
                    "rendered": {
                      "text": "\tif !conf.IsSet(common.ConfigKey(serviceAddressKey)) {\n\t\tcfg.InputConfig.BaseConfig.ListenAddress = \"0.0.0.0:25888\"\n\t} else {\n\t\tserviceAddress := fmt.Sprintf(\"%v\", conf.Get(serviceAddressKey))\n\t\tserviceSplit := strings.Split(serviceAddress, addressSplit)\n\t\tif len(serviceSplit) != 3 {\n\t\t\treturn nil, errors.New(\"invalid service split\")\n",
                      "markdown": "`\tif !conf.IsSet(common.ConfigKey(serviceAddressKey)) {\n\t\tcfg.InputConfig.BaseConfig.ListenAddress = \"0.0.0.0:25888\"\n\t} else {\n\t\tserviceAddress := fmt.Sprintf(\"%v\", conf.Get(serviceAddressKey))\n\t\tserviceSplit := strings.Split(serviceAddress, addressSplit)\n\t\tif len(serviceSplit) != 3 {\n\t\t\treturn nil, errors.New(\"invalid service split\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/tcp_logs/translator.go"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 94,
                  "endLine": 64,
                  "endColumn": 99,
                  "snippet": {
                    "text": "// tcp:localhost:25888\nfunc (t *translator) Translate(conf *confmap.Conf) (component.Config, error) {\n\tif !conf.IsSet(baseKey) ||\n\t\t(conf.IsSet(common.ConfigKey(serviceAddressKey)) && !strings.Contains(fmt.Sprintf(\"%v\", conf.Get(serviceAddressKey)), common.Tcp)) {\n\t\treturn nil, &common.MissingKeyError{ID: t.ID(), JsonKey: fmt.Sprintf(\"missing %s or tcp service address\", baseKey)}\n\t}\n\tcfg := t.factory.CreateDefaultConfig().(*tcplogreceiver.TCPLogConfig)\n",
                    "rendered": {
                      "text": "// tcp:localhost:25888\nfunc (t *translator) Translate(conf *confmap.Conf) (component.Config, error) {\n\tif !conf.IsSet(baseKey) ||\n\t\t(conf.IsSet(common.ConfigKey(serviceAddressKey)) && !strings.Contains(fmt.Sprintf(\"%v\", conf.Get(serviceAddressKey)), common.Tcp)) {\n\t\treturn nil, &common.MissingKeyError{ID: t.ID(), JsonKey: fmt.Sprintf(\"missing %s or tcp service address\", baseKey)}\n\t}\n\tcfg := t.factory.CreateDefaultConfig().(*tcplogreceiver.TCPLogConfig)\n",
                      "markdown": "`// tcp:localhost:25888\nfunc (t *translator) Translate(conf *confmap.Conf) (component.Config, error) {\n\tif !conf.IsSet(baseKey) ||\n\t\t(conf.IsSet(common.ConfigKey(serviceAddressKey)) && !strings.Contains(fmt.Sprintf(\"%v\", conf.Get(serviceAddressKey)), common.Tcp)) {\n\t\treturn nil, &common.MissingKeyError{ID: t.ID(), JsonKey: fmt.Sprintf(\"missing %s or tcp service address\", baseKey)}\n\t}\n\tcfg := t.factory.CreateDefaultConfig().(*tcplogreceiver.TCPLogConfig)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/tcp_logs/translator.go"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 34,
                  "endLine": 74,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\t\tserviceAddress := fmt.Sprintf(\"%v\", conf.Get(serviceAddressKey))\n\t\tserviceSplit := strings.Split(serviceAddress, addressSplit)\n\t\tif len(serviceSplit) != 3 {\n\t\t\treturn nil, errors.New(\"invalid service split\")\n\t\t} else if serviceSplit[1] == telegrafDoubleSlash {\n\t\t\tserviceSplit[1] = strings.Replace(serviceSplit[1], telegrafDoubleSlash, \"0.0.0.0\", 1)\n\t\t} else if strings.Contains(serviceAddress, telegrafDoubleSlash) {\n",
                    "rendered": {
                      "text": "\t\tserviceAddress := fmt.Sprintf(\"%v\", conf.Get(serviceAddressKey))\n\t\tserviceSplit := strings.Split(serviceAddress, addressSplit)\n\t\tif len(serviceSplit) != 3 {\n\t\t\treturn nil, errors.New(\"invalid service split\")\n\t\t} else if serviceSplit[1] == telegrafDoubleSlash {\n\t\t\tserviceSplit[1] = strings.Replace(serviceSplit[1], telegrafDoubleSlash, \"0.0.0.0\", 1)\n\t\t} else if strings.Contains(serviceAddress, telegrafDoubleSlash) {\n",
                      "markdown": "`\t\tserviceAddress := fmt.Sprintf(\"%v\", conf.Get(serviceAddressKey))\n\t\tserviceSplit := strings.Split(serviceAddress, addressSplit)\n\t\tif len(serviceSplit) != 3 {\n\t\t\treturn nil, errors.New(\"invalid service split\")\n\t\t} else if serviceSplit[1] == telegrafDoubleSlash {\n\t\t\tserviceSplit[1] = strings.Replace(serviceSplit[1], telegrafDoubleSlash, \"0.0.0.0\", 1)\n\t\t} else if strings.Contains(serviceAddress, telegrafDoubleSlash) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/tcp_logs/translator.go"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 89,
                  "endLine": 65,
                  "endColumn": 98,
                  "snippet": {
                    "text": "func (t *translator) Translate(conf *confmap.Conf) (component.Config, error) {\n\tif !conf.IsSet(baseKey) ||\n\t\t(conf.IsSet(common.ConfigKey(serviceAddressKey)) && !strings.Contains(fmt.Sprintf(\"%v\", conf.Get(serviceAddressKey)), common.Tcp)) {\n\t\treturn nil, &common.MissingKeyError{ID: t.ID(), JsonKey: fmt.Sprintf(\"missing %s or tcp service address\", baseKey)}\n\t}\n\tcfg := t.factory.CreateDefaultConfig().(*tcplogreceiver.TCPLogConfig)\n\tif !conf.IsSet(common.ConfigKey(serviceAddressKey)) {\n",
                    "rendered": {
                      "text": "func (t *translator) Translate(conf *confmap.Conf) (component.Config, error) {\n\tif !conf.IsSet(baseKey) ||\n\t\t(conf.IsSet(common.ConfigKey(serviceAddressKey)) && !strings.Contains(fmt.Sprintf(\"%v\", conf.Get(serviceAddressKey)), common.Tcp)) {\n\t\treturn nil, &common.MissingKeyError{ID: t.ID(), JsonKey: fmt.Sprintf(\"missing %s or tcp service address\", baseKey)}\n\t}\n\tcfg := t.factory.CreateDefaultConfig().(*tcplogreceiver.TCPLogConfig)\n\tif !conf.IsSet(common.ConfigKey(serviceAddressKey)) {\n",
                      "markdown": "`func (t *translator) Translate(conf *confmap.Conf) (component.Config, error) {\n\tif !conf.IsSet(baseKey) ||\n\t\t(conf.IsSet(common.ConfigKey(serviceAddressKey)) && !strings.Contains(fmt.Sprintf(\"%v\", conf.Get(serviceAddressKey)), common.Tcp)) {\n\t\treturn nil, &common.MissingKeyError{ID: t.ID(), JsonKey: fmt.Sprintf(\"missing %s or tcp service address\", baseKey)}\n\t}\n\tcfg := t.factory.CreateDefaultConfig().(*tcplogreceiver.TCPLogConfig)\n\tif !conf.IsSet(common.ConfigKey(serviceAddressKey)) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/tcp_logs/translator.go"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 11,
                  "endLine": 56,
                  "endColumn": 20,
                  "snippet": {
                    "text": "// Otel does not accept address that start with // parsing is required\n// Otel address is expected as host:port\n// CWA expects address as tcp:host:port or tcp://host:port\n// Expected service address input is\n// Not Given\n// tcp://:25888\n// tcp://127.0.0.1:25888\n",
                    "rendered": {
                      "text": "// Otel does not accept address that start with // parsing is required\n// Otel address is expected as host:port\n// CWA expects address as tcp:host:port or tcp://host:port\n// Expected service address input is\n// Not Given\n// tcp://:25888\n// tcp://127.0.0.1:25888\n",
                      "markdown": "`// Otel does not accept address that start with // parsing is required\n// Otel address is expected as host:port\n// CWA expects address as tcp:host:port or tcp://host:port\n// Expected service address input is\n// Not Given\n// tcp://:25888\n// tcp://127.0.0.1:25888\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/tcp_logs/translator.go"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 94,
                  "endLine": 50,
                  "endColumn": 103,
                  "snippet": {
                    "text": "\treturn component.NewIDWithName(t.factory.Type(), t.name)\n}\n\n// Translate creates a tcp logs receiver config if either emf has no service address or is tcp service address\n// Port can be any number that allows tcp traffic\n// Address can be any valid address ex localhost 0.0.0.0 127.0.0.1\n// Otel does not accept address that start with // parsing is required\n",
                    "rendered": {
                      "text": "\treturn component.NewIDWithName(t.factory.Type(), t.name)\n}\n\n// Translate creates a tcp logs receiver config if either emf has no service address or is tcp service address\n// Port can be any number that allows tcp traffic\n// Address can be any valid address ex localhost 0.0.0.0 127.0.0.1\n// Otel does not accept address that start with // parsing is required\n",
                      "markdown": "`\treturn component.NewIDWithName(t.factory.Type(), t.name)\n}\n\n// Translate creates a tcp logs receiver config if either emf has no service address or is tcp service address\n// Port can be any number that allows tcp traffic\n// Address can be any valid address ex localhost 0.0.0.0 127.0.0.1\n// Otel does not accept address that start with // parsing is required\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/tcp_logs/translator.go"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 68,
                  "endLine": 50,
                  "endColumn": 77,
                  "snippet": {
                    "text": "\treturn component.NewIDWithName(t.factory.Type(), t.name)\n}\n\n// Translate creates a tcp logs receiver config if either emf has no service address or is tcp service address\n// Port can be any number that allows tcp traffic\n// Address can be any valid address ex localhost 0.0.0.0 127.0.0.1\n// Otel does not accept address that start with // parsing is required\n",
                    "rendered": {
                      "text": "\treturn component.NewIDWithName(t.factory.Type(), t.name)\n}\n\n// Translate creates a tcp logs receiver config if either emf has no service address or is tcp service address\n// Port can be any number that allows tcp traffic\n// Address can be any valid address ex localhost 0.0.0.0 127.0.0.1\n// Otel does not accept address that start with // parsing is required\n",
                      "markdown": "`\treturn component.NewIDWithName(t.factory.Type(), t.name)\n}\n\n// Translate creates a tcp logs receiver config if either emf has no service address or is tcp service address\n// Port can be any number that allows tcp traffic\n// Address can be any valid address ex localhost 0.0.0.0 127.0.0.1\n// Otel does not accept address that start with // parsing is required\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/tcp_logs/translator_test.go"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 43,
                  "endLine": 79,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\t\t},\n\t\t\twantErr: &common.MissingKeyError{\n\t\t\t\tID:      acit.ID(),\n\t\t\t\tJsonKey: fmt.Sprintf(\"missing %s or tcp service address\", baseKey),\n\t\t\t},\n\t\t},\n\t\t\"TcpDoubleSlashServiceAddress\": {\n",
                    "rendered": {
                      "text": "\t\t\t},\n\t\t\twantErr: &common.MissingKeyError{\n\t\t\t\tID:      acit.ID(),\n\t\t\t\tJsonKey: fmt.Sprintf(\"missing %s or tcp service address\", baseKey),\n\t\t\t},\n\t\t},\n\t\t\"TcpDoubleSlashServiceAddress\": {\n",
                      "markdown": "`\t\t\t},\n\t\t\twantErr: &common.MissingKeyError{\n\t\t\t\tID:      acit.ID(),\n\t\t\t\tJsonKey: fmt.Sprintf(\"missing %s or tcp service address\", baseKey),\n\t\t\t},\n\t\t},\n\t\t\"TcpDoubleSlashServiceAddress\": {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/tcp_logs/translator_test.go"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 43,
                  "endLine": 30,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\t\tinput: map[string]interface{}{},\n\t\t\twantErr: &common.MissingKeyError{\n\t\t\t\tID:      acit.ID(),\n\t\t\t\tJsonKey: fmt.Sprintf(\"missing %s or tcp service address\", baseKey),\n\t\t\t},\n\t\t},\n\t\t\"WithoutServiceAddress\": {\n",
                    "rendered": {
                      "text": "\t\t\tinput: map[string]interface{}{},\n\t\t\twantErr: &common.MissingKeyError{\n\t\t\t\tID:      acit.ID(),\n\t\t\t\tJsonKey: fmt.Sprintf(\"missing %s or tcp service address\", baseKey),\n\t\t\t},\n\t\t},\n\t\t\"WithoutServiceAddress\": {\n",
                      "markdown": "`\t\t\tinput: map[string]interface{}{},\n\t\t\twantErr: &common.MissingKeyError{\n\t\t\t\tID:      acit.ID(),\n\t\t\t\tJsonKey: fmt.Sprintf(\"missing %s or tcp service address\", baseKey),\n\t\t\t},\n\t\t},\n\t\t\"WithoutServiceAddress\": {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/otlp/translator_test.go"
                },
                "region": {
                  "startLine": 366,
                  "startColumn": 2,
                  "endLine": 366,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\t\t\t\t},\n\t\t\t}),\n\t\t},\n\t\t\"WithAppSignalsFallbackEnabledTracesWithTLS\": {\n\t\t\tinput: map[string]interface{}{\n\t\t\t\t\"traces\": map[string]interface{}{\n\t\t\t\t\t\"traces_collected\": map[string]interface{}{\n",
                    "rendered": {
                      "text": "\t\t\t\t},\n\t\t\t}),\n\t\t},\n\t\t\"WithAppSignalsFallbackEnabledTracesWithTLS\": {\n\t\t\tinput: map[string]interface{}{\n\t\t\t\t\"traces\": map[string]interface{}{\n\t\t\t\t\t\"traces_collected\": map[string]interface{}{\n",
                      "markdown": "`\t\t\t\t},\n\t\t\t}),\n\t\t},\n\t\t\"WithAppSignalsFallbackEnabledTracesWithTLS\": {\n\t\t\tinput: map[string]interface{}{\n\t\t\t\t\"traces\": map[string]interface{}{\n\t\t\t\t\t\"traces_collected\": map[string]interface{}{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/awscontainerinsight/translator.go"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 23,
                  "endLine": 165,
                  "snippet": {
                    "text": "\tif conf != nil {\n\t\tfor _, service := range t.services {\n\t\t\tif conf.IsSet(service.Key) {\n\t\t\t\tconfiguredService = service\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\tif conf != nil {\n\t\tfor _, service := range t.services {\n\t\t\tif conf.IsSet(service.Key) {\n\t\t\t\tconfiguredService = service\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n",
                      "markdown": "`\tif conf != nil {\n\t\tfor _, service := range t.services {\n\t\t\tif conf.IsSet(service.Key) {\n\t\t\t\tconfiguredService = service\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/awscontainerinsight/translator.go"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 8,
                  "endLine": 162,
                  "endColumn": 17,
                  "snippet": {
                    "text": "func (t *translator) getConfiguredContainerService(conf *confmap.Conf) *collections.Pair[string, string] {\n\tvar configuredService *collections.Pair[string, string]\n\tif conf != nil {\n\t\tfor _, service := range t.services {\n\t\t\tif conf.IsSet(service.Key) {\n\t\t\t\tconfiguredService = service\n\t\t\t\tbreak\n",
                    "rendered": {
                      "text": "func (t *translator) getConfiguredContainerService(conf *confmap.Conf) *collections.Pair[string, string] {\n\tvar configuredService *collections.Pair[string, string]\n\tif conf != nil {\n\t\tfor _, service := range t.services {\n\t\t\tif conf.IsSet(service.Key) {\n\t\t\t\tconfiguredService = service\n\t\t\t\tbreak\n",
                      "markdown": "`func (t *translator) getConfiguredContainerService(conf *confmap.Conf) *collections.Pair[string, string] {\n\tvar configuredService *collections.Pair[string, string]\n\tif conf != nil {\n\t\tfor _, service := range t.services {\n\t\t\tif conf.IsSet(service.Key) {\n\t\t\t\tconfiguredService = service\n\t\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/awscontainerinsight/translator.go"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 8,
                  "endLine": 73,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\tconfiguredService := t.getConfiguredContainerService(conf)\n\tif configuredService == nil {\n\t\tvar keys []string\n\t\tfor _, service := range t.services {\n\t\t\tkeys = append(keys, service.Key)\n\t\t}\n\t\treturn nil, &common.MissingKeyError{ID: t.ID(), JsonKey: strings.Join(keys, \" or \")}\n",
                    "rendered": {
                      "text": "\tconfiguredService := t.getConfiguredContainerService(conf)\n\tif configuredService == nil {\n\t\tvar keys []string\n\t\tfor _, service := range t.services {\n\t\t\tkeys = append(keys, service.Key)\n\t\t}\n\t\treturn nil, &common.MissingKeyError{ID: t.ID(), JsonKey: strings.Join(keys, \" or \")}\n",
                      "markdown": "`\tconfiguredService := t.getConfiguredContainerService(conf)\n\tif configuredService == nil {\n\t\tvar keys []string\n\t\tfor _, service := range t.services {\n\t\t\tkeys = append(keys, service.Key)\n\t\t}\n\t\treturn nil, &common.MissingKeyError{ID: t.ID(), JsonKey: strings.Join(keys, \" or \")}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/awscontainerinsight/translator_test.go"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 40,
                  "endLine": 283,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t\t\tClusterName:                  \"TestCluster\",\n\t\t\t\tTagService:                   true,\n\t\t\t\tKubeConfigPath:               \"/tmp/custom.kubeconfig\",\n\t\t\t\tHostName:                     \"test-hostname\",\n\t\t\t\tHostIP:                       \"1.2.3.4\",\n\t\t\t\tRunOnSystemd:                 true,\n\t\t\t},\n",
                    "rendered": {
                      "text": "\t\t\t\tClusterName:                  \"TestCluster\",\n\t\t\t\tTagService:                   true,\n\t\t\t\tKubeConfigPath:               \"/tmp/custom.kubeconfig\",\n\t\t\t\tHostName:                     \"test-hostname\",\n\t\t\t\tHostIP:                       \"1.2.3.4\",\n\t\t\t\tRunOnSystemd:                 true,\n\t\t\t},\n",
                      "markdown": "`\t\t\t\tClusterName:                  \"TestCluster\",\n\t\t\t\tTagService:                   true,\n\t\t\t\tKubeConfigPath:               \"/tmp/custom.kubeconfig\",\n\t\t\t\tHostName:                     \"test-hostname\",\n\t\t\t\tHostIP:                       \"1.2.3.4\",\n\t\t\t\tRunOnSystemd:                 true,\n\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/awscontainerinsight/translator_test.go"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 33,
                  "endLine": 267,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\t\t\t\t\t\t\"kubernetes\": map[string]interface{}{\n\t\t\t\t\t\t\t\"kube_config_path\": \"/tmp/custom.kubeconfig\",\n\t\t\t\t\t\t\t\"cluster_name\":     \"TestCluster\",\n\t\t\t\t\t\t\t\"host_name\":        \"test-hostname\",\n\t\t\t\t\t\t\t\"host_ip\":          \"1.2.3.4\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n",
                    "rendered": {
                      "text": "\t\t\t\t\t\t\"kubernetes\": map[string]interface{}{\n\t\t\t\t\t\t\t\"kube_config_path\": \"/tmp/custom.kubeconfig\",\n\t\t\t\t\t\t\t\"cluster_name\":     \"TestCluster\",\n\t\t\t\t\t\t\t\"host_name\":        \"test-hostname\",\n\t\t\t\t\t\t\t\"host_ip\":          \"1.2.3.4\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n",
                      "markdown": "`\t\t\t\t\t\t\"kubernetes\": map[string]interface{}{\n\t\t\t\t\t\t\t\"kube_config_path\": \"/tmp/custom.kubeconfig\",\n\t\t\t\t\t\t\t\"cluster_name\":     \"TestCluster\",\n\t\t\t\t\t\t\t\"host_name\":        \"test-hostname\",\n\t\t\t\t\t\t\t\"host_ip\":          \"1.2.3.4\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/awscontainerinsight/translator_test.go"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 2,
                  "endLine": 260,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\t\t\t\tTagService:                   true,\n\t\t\t},\n\t\t},\n\t\t\"WithEKSAndCustomKubeConfigPathHostDetails\": {\n\t\t\tinput: map[string]interface{}{\n\t\t\t\t\"logs\": map[string]interface{}{\n\t\t\t\t\t\"metrics_collected\": map[string]interface{}{\n",
                    "rendered": {
                      "text": "\t\t\t\tTagService:                   true,\n\t\t\t},\n\t\t},\n\t\t\"WithEKSAndCustomKubeConfigPathHostDetails\": {\n\t\t\tinput: map[string]interface{}{\n\t\t\t\t\"logs\": map[string]interface{}{\n\t\t\t\t\t\"metrics_collected\": map[string]interface{}{\n",
                      "markdown": "`\t\t\t\tTagService:                   true,\n\t\t\t},\n\t\t},\n\t\t\"WithEKSAndCustomKubeConfigPathHostDetails\": {\n\t\t\tinput: map[string]interface{}{\n\t\t\t\t\"logs\": map[string]interface{}{\n\t\t\t\t\t\"metrics_collected\": map[string]interface{}{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/udp_logs/translator.go"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 42,
                  "endLine": 71,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\tif !conf.IsSet(common.ConfigKey(serviceAddressKey)) {\n\t\tcfg.InputConfig.BaseConfig.ListenAddress = \"0.0.0.0:25888\"\n\t} else {\n\t\tserviceAddress := fmt.Sprintf(\"%v\", conf.Get(serviceAddressKey))\n\t\tserviceSplit := strings.Split(serviceAddress, addressSplit)\n\t\tif len(serviceSplit) != 3 {\n\t\t\treturn nil, errors.New(\"invalid service split\")\n",
                    "rendered": {
                      "text": "\tif !conf.IsSet(common.ConfigKey(serviceAddressKey)) {\n\t\tcfg.InputConfig.BaseConfig.ListenAddress = \"0.0.0.0:25888\"\n\t} else {\n\t\tserviceAddress := fmt.Sprintf(\"%v\", conf.Get(serviceAddressKey))\n\t\tserviceSplit := strings.Split(serviceAddress, addressSplit)\n\t\tif len(serviceSplit) != 3 {\n\t\t\treturn nil, errors.New(\"invalid service split\")\n",
                      "markdown": "`\tif !conf.IsSet(common.ConfigKey(serviceAddressKey)) {\n\t\tcfg.InputConfig.BaseConfig.ListenAddress = \"0.0.0.0:25888\"\n\t} else {\n\t\tserviceAddress := fmt.Sprintf(\"%v\", conf.Get(serviceAddressKey))\n\t\tserviceSplit := strings.Split(serviceAddress, addressSplit)\n\t\tif len(serviceSplit) != 3 {\n\t\t\treturn nil, errors.New(\"invalid service split\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/udp_logs/translator.go"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 94,
                  "endLine": 64,
                  "endColumn": 99,
                  "snippet": {
                    "text": "// udp:localhost:25888\nfunc (t *translator) Translate(conf *confmap.Conf) (component.Config, error) {\n\tif !conf.IsSet(baseKey) ||\n\t\t(conf.IsSet(common.ConfigKey(serviceAddressKey)) && !strings.Contains(fmt.Sprintf(\"%v\", conf.Get(serviceAddressKey)), common.Udp)) {\n\t\treturn nil, &common.MissingKeyError{ID: t.ID(), JsonKey: fmt.Sprintf(\"missing %s or udp service address\", baseKey)}\n\t}\n\tcfg := t.factory.CreateDefaultConfig().(*udplogreceiver.UDPLogConfig)\n",
                    "rendered": {
                      "text": "// udp:localhost:25888\nfunc (t *translator) Translate(conf *confmap.Conf) (component.Config, error) {\n\tif !conf.IsSet(baseKey) ||\n\t\t(conf.IsSet(common.ConfigKey(serviceAddressKey)) && !strings.Contains(fmt.Sprintf(\"%v\", conf.Get(serviceAddressKey)), common.Udp)) {\n\t\treturn nil, &common.MissingKeyError{ID: t.ID(), JsonKey: fmt.Sprintf(\"missing %s or udp service address\", baseKey)}\n\t}\n\tcfg := t.factory.CreateDefaultConfig().(*udplogreceiver.UDPLogConfig)\n",
                      "markdown": "`// udp:localhost:25888\nfunc (t *translator) Translate(conf *confmap.Conf) (component.Config, error) {\n\tif !conf.IsSet(baseKey) ||\n\t\t(conf.IsSet(common.ConfigKey(serviceAddressKey)) && !strings.Contains(fmt.Sprintf(\"%v\", conf.Get(serviceAddressKey)), common.Udp)) {\n\t\treturn nil, &common.MissingKeyError{ID: t.ID(), JsonKey: fmt.Sprintf(\"missing %s or udp service address\", baseKey)}\n\t}\n\tcfg := t.factory.CreateDefaultConfig().(*udplogreceiver.UDPLogConfig)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/udp_logs/translator.go"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 34,
                  "endLine": 74,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\t\tserviceAddress := fmt.Sprintf(\"%v\", conf.Get(serviceAddressKey))\n\t\tserviceSplit := strings.Split(serviceAddress, addressSplit)\n\t\tif len(serviceSplit) != 3 {\n\t\t\treturn nil, errors.New(\"invalid service split\")\n\t\t} else if serviceSplit[1] == telegrafDoubleSlash {\n\t\t\tserviceSplit[1] = strings.Replace(serviceSplit[1], telegrafDoubleSlash, \"0.0.0.0\", 1)\n\t\t} else if strings.Contains(serviceAddress, telegrafDoubleSlash) {\n",
                    "rendered": {
                      "text": "\t\tserviceAddress := fmt.Sprintf(\"%v\", conf.Get(serviceAddressKey))\n\t\tserviceSplit := strings.Split(serviceAddress, addressSplit)\n\t\tif len(serviceSplit) != 3 {\n\t\t\treturn nil, errors.New(\"invalid service split\")\n\t\t} else if serviceSplit[1] == telegrafDoubleSlash {\n\t\t\tserviceSplit[1] = strings.Replace(serviceSplit[1], telegrafDoubleSlash, \"0.0.0.0\", 1)\n\t\t} else if strings.Contains(serviceAddress, telegrafDoubleSlash) {\n",
                      "markdown": "`\t\tserviceAddress := fmt.Sprintf(\"%v\", conf.Get(serviceAddressKey))\n\t\tserviceSplit := strings.Split(serviceAddress, addressSplit)\n\t\tif len(serviceSplit) != 3 {\n\t\t\treturn nil, errors.New(\"invalid service split\")\n\t\t} else if serviceSplit[1] == telegrafDoubleSlash {\n\t\t\tserviceSplit[1] = strings.Replace(serviceSplit[1], telegrafDoubleSlash, \"0.0.0.0\", 1)\n\t\t} else if strings.Contains(serviceAddress, telegrafDoubleSlash) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/udp_logs/translator.go"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 89,
                  "endLine": 65,
                  "endColumn": 98,
                  "snippet": {
                    "text": "func (t *translator) Translate(conf *confmap.Conf) (component.Config, error) {\n\tif !conf.IsSet(baseKey) ||\n\t\t(conf.IsSet(common.ConfigKey(serviceAddressKey)) && !strings.Contains(fmt.Sprintf(\"%v\", conf.Get(serviceAddressKey)), common.Udp)) {\n\t\treturn nil, &common.MissingKeyError{ID: t.ID(), JsonKey: fmt.Sprintf(\"missing %s or udp service address\", baseKey)}\n\t}\n\tcfg := t.factory.CreateDefaultConfig().(*udplogreceiver.UDPLogConfig)\n\tif !conf.IsSet(common.ConfigKey(serviceAddressKey)) {\n",
                    "rendered": {
                      "text": "func (t *translator) Translate(conf *confmap.Conf) (component.Config, error) {\n\tif !conf.IsSet(baseKey) ||\n\t\t(conf.IsSet(common.ConfigKey(serviceAddressKey)) && !strings.Contains(fmt.Sprintf(\"%v\", conf.Get(serviceAddressKey)), common.Udp)) {\n\t\treturn nil, &common.MissingKeyError{ID: t.ID(), JsonKey: fmt.Sprintf(\"missing %s or udp service address\", baseKey)}\n\t}\n\tcfg := t.factory.CreateDefaultConfig().(*udplogreceiver.UDPLogConfig)\n\tif !conf.IsSet(common.ConfigKey(serviceAddressKey)) {\n",
                      "markdown": "`func (t *translator) Translate(conf *confmap.Conf) (component.Config, error) {\n\tif !conf.IsSet(baseKey) ||\n\t\t(conf.IsSet(common.ConfigKey(serviceAddressKey)) && !strings.Contains(fmt.Sprintf(\"%v\", conf.Get(serviceAddressKey)), common.Udp)) {\n\t\treturn nil, &common.MissingKeyError{ID: t.ID(), JsonKey: fmt.Sprintf(\"missing %s or udp service address\", baseKey)}\n\t}\n\tcfg := t.factory.CreateDefaultConfig().(*udplogreceiver.UDPLogConfig)\n\tif !conf.IsSet(common.ConfigKey(serviceAddressKey)) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/udp_logs/translator.go"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 11,
                  "endLine": 56,
                  "endColumn": 20,
                  "snippet": {
                    "text": "// Otel does not accept address that start with // parsing is required\n// Otel address is expected as host:port\n// CWA expects address as udp:host:port or udp://host:port\n// Expected service address input is\n// Not Given\n// udp://:25888\n// udp://127.0.0.1:25888\n",
                    "rendered": {
                      "text": "// Otel does not accept address that start with // parsing is required\n// Otel address is expected as host:port\n// CWA expects address as udp:host:port or udp://host:port\n// Expected service address input is\n// Not Given\n// udp://:25888\n// udp://127.0.0.1:25888\n",
                      "markdown": "`// Otel does not accept address that start with // parsing is required\n// Otel address is expected as host:port\n// CWA expects address as udp:host:port or udp://host:port\n// Expected service address input is\n// Not Given\n// udp://:25888\n// udp://127.0.0.1:25888\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/udp_logs/translator.go"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 95,
                  "endLine": 50,
                  "endColumn": 104,
                  "snippet": {
                    "text": "\treturn component.NewIDWithName(t.factory.Type(), t.name)\n}\n\n// Translate creates an udp logs receiver config if either emf has no service address or is udp service address\n// Port can be any number that allows udp traffic\n// Address can be any valid address ex localhost 0.0.0.0 127.0.0.1\n// Otel does not accept address that start with // parsing is required\n",
                    "rendered": {
                      "text": "\treturn component.NewIDWithName(t.factory.Type(), t.name)\n}\n\n// Translate creates an udp logs receiver config if either emf has no service address or is udp service address\n// Port can be any number that allows udp traffic\n// Address can be any valid address ex localhost 0.0.0.0 127.0.0.1\n// Otel does not accept address that start with // parsing is required\n",
                      "markdown": "`\treturn component.NewIDWithName(t.factory.Type(), t.name)\n}\n\n// Translate creates an udp logs receiver config if either emf has no service address or is udp service address\n// Port can be any number that allows udp traffic\n// Address can be any valid address ex localhost 0.0.0.0 127.0.0.1\n// Otel does not accept address that start with // parsing is required\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/udp_logs/translator.go"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 69,
                  "endLine": 50,
                  "endColumn": 78,
                  "snippet": {
                    "text": "\treturn component.NewIDWithName(t.factory.Type(), t.name)\n}\n\n// Translate creates an udp logs receiver config if either emf has no service address or is udp service address\n// Port can be any number that allows udp traffic\n// Address can be any valid address ex localhost 0.0.0.0 127.0.0.1\n// Otel does not accept address that start with // parsing is required\n",
                    "rendered": {
                      "text": "\treturn component.NewIDWithName(t.factory.Type(), t.name)\n}\n\n// Translate creates an udp logs receiver config if either emf has no service address or is udp service address\n// Port can be any number that allows udp traffic\n// Address can be any valid address ex localhost 0.0.0.0 127.0.0.1\n// Otel does not accept address that start with // parsing is required\n",
                      "markdown": "`\treturn component.NewIDWithName(t.factory.Type(), t.name)\n}\n\n// Translate creates an udp logs receiver config if either emf has no service address or is udp service address\n// Port can be any number that allows udp traffic\n// Address can be any valid address ex localhost 0.0.0.0 127.0.0.1\n// Otel does not accept address that start with // parsing is required\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/udp_logs/translator_test.go"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 43,
                  "endLine": 61,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\t\t},\n\t\t\twantErr: &common.MissingKeyError{\n\t\t\t\tID:      acit.ID(),\n\t\t\t\tJsonKey: fmt.Sprintf(\"missing %s or udp service address\", baseKey),\n\t\t\t},\n\t\t},\n\t\t\"UdpServiceAddress\": {\n",
                    "rendered": {
                      "text": "\t\t\t},\n\t\t\twantErr: &common.MissingKeyError{\n\t\t\t\tID:      acit.ID(),\n\t\t\t\tJsonKey: fmt.Sprintf(\"missing %s or udp service address\", baseKey),\n\t\t\t},\n\t\t},\n\t\t\"UdpServiceAddress\": {\n",
                      "markdown": "`\t\t\t},\n\t\t\twantErr: &common.MissingKeyError{\n\t\t\t\tID:      acit.ID(),\n\t\t\t\tJsonKey: fmt.Sprintf(\"missing %s or udp service address\", baseKey),\n\t\t\t},\n\t\t},\n\t\t\"UdpServiceAddress\": {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/udp_logs/translator_test.go"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 43,
                  "endLine": 30,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\t\tinput: map[string]interface{}{},\n\t\t\twantErr: &common.MissingKeyError{\n\t\t\t\tID:      acit.ID(),\n\t\t\t\tJsonKey: fmt.Sprintf(\"missing %s or udp service address\", baseKey),\n\t\t\t},\n\t\t},\n\t\t\"WithoutServiceAddress\": {\n",
                    "rendered": {
                      "text": "\t\t\tinput: map[string]interface{}{},\n\t\t\twantErr: &common.MissingKeyError{\n\t\t\t\tID:      acit.ID(),\n\t\t\t\tJsonKey: fmt.Sprintf(\"missing %s or udp service address\", baseKey),\n\t\t\t},\n\t\t},\n\t\t\"WithoutServiceAddress\": {\n",
                      "markdown": "`\t\t\tinput: map[string]interface{}{},\n\t\t\twantErr: &common.MissingKeyError{\n\t\t\t\tID:      acit.ID(),\n\t\t\t\tJsonKey: fmt.Sprintf(\"missing %s or udp service address\", baseKey),\n\t\t\t},\n\t\t},\n\t\t\"WithoutServiceAddress\": {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/adapter/translators_test.go"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 28,
                  "endLine": 171,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\t\t\trequire.Equal(t, testCase.wantErr, err)\n\t\t\trequire.Equal(t, len(testCase.want), got.Len())\n\t\t\tfor wantKey, wantValue := range testCase.want {\n\t\t\t\tgotTranslator, ok := got.Get(wantKey)\n\t\t\t\trequire.True(t, ok)\n\t\t\t\tgotAdapterTranslator, ok := gotTranslator.(*translator)\n\t\t\t\trequire.True(t, ok)\n",
                    "rendered": {
                      "text": "\t\t\trequire.Equal(t, testCase.wantErr, err)\n\t\t\trequire.Equal(t, len(testCase.want), got.Len())\n\t\t\tfor wantKey, wantValue := range testCase.want {\n\t\t\t\tgotTranslator, ok := got.Get(wantKey)\n\t\t\t\trequire.True(t, ok)\n\t\t\t\tgotAdapterTranslator, ok := gotTranslator.(*translator)\n\t\t\t\trequire.True(t, ok)\n",
                      "markdown": "`\t\t\trequire.Equal(t, testCase.wantErr, err)\n\t\t\trequire.Equal(t, len(testCase.want), got.Len())\n\t\t\tfor wantKey, wantValue := range testCase.want {\n\t\t\t\tgotTranslator, ok := got.Get(wantKey)\n\t\t\t\trequire.True(t, ok)\n\t\t\t\tgotAdapterTranslator, ok := gotTranslator.(*translator)\n\t\t\t\trequire.True(t, ok)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/adapter/translators.go"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 22,
                  "endLine": 148,
                  "endColumn": 27,
                  "snippet": {
                    "text": "// fromInputs converts all the keys in the section into adapter translators.\nfunc fromInputs(conf *confmap.Conf, validInputs map[string]bool, baseKey string) common.TranslatorMap[component.Config] {\n\ttranslators := common.NewTranslatorMap[component.Config]()\n\tif inputs, ok := conf.Get(baseKey).(map[string]interface{}); ok {\n\t\tfor inputName := range inputs {\n\t\t\tif skipInputSet.Contains(inputName) {\n\t\t\t\t// logs agent is separate from otel agent\n",
                    "rendered": {
                      "text": "// fromInputs converts all the keys in the section into adapter translators.\nfunc fromInputs(conf *confmap.Conf, validInputs map[string]bool, baseKey string) common.TranslatorMap[component.Config] {\n\ttranslators := common.NewTranslatorMap[component.Config]()\n\tif inputs, ok := conf.Get(baseKey).(map[string]interface{}); ok {\n\t\tfor inputName := range inputs {\n\t\t\tif skipInputSet.Contains(inputName) {\n\t\t\t\t// logs agent is separate from otel agent\n",
                      "markdown": "`// fromInputs converts all the keys in the section into adapter translators.\nfunc fromInputs(conf *confmap.Conf, validInputs map[string]bool, baseKey string) common.TranslatorMap[component.Config] {\n\ttranslators := common.NewTranslatorMap[component.Config]()\n\tif inputs, ok := conf.Get(baseKey).(map[string]interface{}); ok {\n\t\tfor inputName := range inputs {\n\t\t\tif skipInputSet.Contains(inputName) {\n\t\t\t\t// logs agent is separate from otel agent\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/adapter/translators.go"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 22,
                  "endLine": 118,
                  "endColumn": 27,
                  "snippet": {
                    "text": "// under a windows performance counter adapter translator.\nfunc fromWindowsMetrics(conf *confmap.Conf) common.TranslatorMap[component.Config] {\n\ttranslators := common.NewTranslatorMap[component.Config]()\n\tif inputs, ok := conf.Get(metricKey).(map[string]interface{}); ok {\n\t\tfor inputName := range inputs {\n\t\t\tif otelReceivers.Contains(inputName) {\n\t\t\t\tcontinue\n",
                    "rendered": {
                      "text": "// under a windows performance counter adapter translator.\nfunc fromWindowsMetrics(conf *confmap.Conf) common.TranslatorMap[component.Config] {\n\ttranslators := common.NewTranslatorMap[component.Config]()\n\tif inputs, ok := conf.Get(metricKey).(map[string]interface{}); ok {\n\t\tfor inputName := range inputs {\n\t\t\tif otelReceivers.Contains(inputName) {\n\t\t\t\tcontinue\n",
                      "markdown": "`// under a windows performance counter adapter translator.\nfunc fromWindowsMetrics(conf *confmap.Conf) common.TranslatorMap[component.Config] {\n\ttranslators := common.NewTranslatorMap[component.Config]()\n\tif inputs, ok := conf.Get(metricKey).(map[string]interface{}); ok {\n\t\tfor inputName := range inputs {\n\t\t\tif otelReceivers.Contains(inputName) {\n\t\t\t\tcontinue\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/adapter/translators.go"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 21,
                  "endLine": 106,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\tvar validInputs map[string]bool\n\tif _, ok := conf.Get(common.ConfigKey(metricKey)).(map[string]interface{}); ok {\n\t\trule := &metrics_collect.CollectMetrics{}\n\t\trule.ApplyRule(conf.Get(common.ConfigKey(common.MetricsKey)))\n\t\tvalidInputs = rule.GetRegisteredMetrics()\n\t}\n\treturn fromInputs(conf, validInputs, metricKey)\n",
                    "rendered": {
                      "text": "\tvar validInputs map[string]bool\n\tif _, ok := conf.Get(common.ConfigKey(metricKey)).(map[string]interface{}); ok {\n\t\trule := &metrics_collect.CollectMetrics{}\n\t\trule.ApplyRule(conf.Get(common.ConfigKey(common.MetricsKey)))\n\t\tvalidInputs = rule.GetRegisteredMetrics()\n\t}\n\treturn fromInputs(conf, validInputs, metricKey)\n",
                      "markdown": "`\tvar validInputs map[string]bool\n\tif _, ok := conf.Get(common.ConfigKey(metricKey)).(map[string]interface{}); ok {\n\t\trule := &metrics_collect.CollectMetrics{}\n\t\trule.ApplyRule(conf.Get(common.ConfigKey(common.MetricsKey)))\n\t\tvalidInputs = rule.GetRegisteredMetrics()\n\t}\n\treturn fromInputs(conf, validInputs, metricKey)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/adapter/translators.go"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 17,
                  "endLine": 104,
                  "endColumn": 22,
                  "snippet": {
                    "text": "// metrics::metrics_collected section of the config. Can be anything.\nfunc fromLinuxMetrics(conf *confmap.Conf) common.TranslatorMap[component.Config] {\n\tvar validInputs map[string]bool\n\tif _, ok := conf.Get(common.ConfigKey(metricKey)).(map[string]interface{}); ok {\n\t\trule := &metrics_collect.CollectMetrics{}\n\t\trule.ApplyRule(conf.Get(common.ConfigKey(common.MetricsKey)))\n\t\tvalidInputs = rule.GetRegisteredMetrics()\n",
                    "rendered": {
                      "text": "// metrics::metrics_collected section of the config. Can be anything.\nfunc fromLinuxMetrics(conf *confmap.Conf) common.TranslatorMap[component.Config] {\n\tvar validInputs map[string]bool\n\tif _, ok := conf.Get(common.ConfigKey(metricKey)).(map[string]interface{}); ok {\n\t\trule := &metrics_collect.CollectMetrics{}\n\t\trule.ApplyRule(conf.Get(common.ConfigKey(common.MetricsKey)))\n\t\tvalidInputs = rule.GetRegisteredMetrics()\n",
                      "markdown": "`// metrics::metrics_collected section of the config. Can be anything.\nfunc fromLinuxMetrics(conf *confmap.Conf) common.TranslatorMap[component.Config] {\n\tvar validInputs map[string]bool\n\tif _, ok := conf.Get(common.ConfigKey(metricKey)).(map[string]interface{}); ok {\n\t\trule := &metrics_collect.CollectMetrics{}\n\t\trule.ApplyRule(conf.Get(common.ConfigKey(common.MetricsKey)))\n\t\tvalidInputs = rule.GetRegisteredMetrics()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/jmx/testdata/config.json"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 35,
                  "endLine": 18,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        },\n        \"metrics_collection_interval\": 60,\n        \"username\": \"cwagent\",\n        \"password_file\": \"/path/to/password/file\",\n        \"keystore_path\": \"/keystore\",\n        \"keystore_type\": \"PKCS\",\n        \"truststore_path\": \"/truststore\",\n",
                    "rendered": {
                      "text": "        },\n        \"metrics_collection_interval\": 60,\n        \"username\": \"cwagent\",\n        \"password_file\": \"/path/to/password/file\",\n        \"keystore_path\": \"/keystore\",\n        \"keystore_type\": \"PKCS\",\n        \"truststore_path\": \"/truststore\",\n",
                      "markdown": "`        },\n        \"metrics_collection_interval\": 60,\n        \"username\": \"cwagent\",\n        \"password_file\": \"/path/to/password/file\",\n        \"keystore_path\": \"/keystore\",\n        \"keystore_type\": \"PKCS\",\n        \"truststore_path\": \"/truststore\",\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/jmx/testdata/config.json"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 9,
                  "endLine": 18,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        },\n        \"metrics_collection_interval\": 60,\n        \"username\": \"cwagent\",\n        \"password_file\": \"/path/to/password/file\",\n        \"keystore_path\": \"/keystore\",\n        \"keystore_type\": \"PKCS\",\n        \"truststore_path\": \"/truststore\",\n",
                    "rendered": {
                      "text": "        },\n        \"metrics_collection_interval\": 60,\n        \"username\": \"cwagent\",\n        \"password_file\": \"/path/to/password/file\",\n        \"keystore_path\": \"/keystore\",\n        \"keystore_type\": \"PKCS\",\n        \"truststore_path\": \"/truststore\",\n",
                      "markdown": "`        },\n        \"metrics_collection_interval\": 60,\n        \"username\": \"cwagent\",\n        \"password_file\": \"/path/to/password/file\",\n        \"keystore_path\": \"/keystore\",\n        \"keystore_type\": \"PKCS\",\n        \"truststore_path\": \"/truststore\",\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/jmx/testdata/config.yaml"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 24,
                  "endLine": 8,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  endpoint: 0.0.0.0:0\n  timeout: 5s\nusername: cwagent\npassword_file: /path/to/password/file\nkeystore_path: /keystore\nkeystore_type: PKCS\ntruststore_path: /truststore\n",
                    "rendered": {
                      "text": "  endpoint: 0.0.0.0:0\n  timeout: 5s\nusername: cwagent\npassword_file: /path/to/password/file\nkeystore_path: /keystore\nkeystore_type: PKCS\ntruststore_path: /truststore\n",
                      "markdown": "`  endpoint: 0.0.0.0:0\n  timeout: 5s\nusername: cwagent\npassword_file: /path/to/password/file\nkeystore_path: /keystore\nkeystore_type: PKCS\ntruststore_path: /truststore\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/jmx/testdata/config.yaml"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  endpoint: 0.0.0.0:0\n  timeout: 5s\nusername: cwagent\npassword_file: /path/to/password/file\nkeystore_path: /keystore\nkeystore_type: PKCS\ntruststore_path: /truststore\n",
                    "rendered": {
                      "text": "  endpoint: 0.0.0.0:0\n  timeout: 5s\nusername: cwagent\npassword_file: /path/to/password/file\nkeystore_path: /keystore\nkeystore_type: PKCS\ntruststore_path: /truststore\n",
                      "markdown": "`  endpoint: 0.0.0.0:0\n  timeout: 5s\nusername: cwagent\npassword_file: /path/to/password/file\nkeystore_path: /keystore\nkeystore_type: PKCS\ntruststore_path: /truststore\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/jmx/translator.go"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 25,
                  "endLine": 213,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\tvar missingFields []string\n\tfor key, value := range map[string]string{\n\t\tusernameKey:       cfg.Username,\n\t\tpasswordFileKey:   cfg.PasswordFile,\n\t\tkeystorePathKey:   cfg.KeystorePath,\n\t\tkeystoreTypeKey:   cfg.KeystoreType,\n\t\ttruststorePathKey: cfg.TruststorePath,\n",
                    "rendered": {
                      "text": "\tvar missingFields []string\n\tfor key, value := range map[string]string{\n\t\tusernameKey:       cfg.Username,\n\t\tpasswordFileKey:   cfg.PasswordFile,\n\t\tkeystorePathKey:   cfg.KeystorePath,\n\t\tkeystoreTypeKey:   cfg.KeystoreType,\n\t\ttruststorePathKey: cfg.TruststorePath,\n",
                      "markdown": "`\tvar missingFields []string\n\tfor key, value := range map[string]string{\n\t\tusernameKey:       cfg.Username,\n\t\tpasswordFileKey:   cfg.PasswordFile,\n\t\tkeystorePathKey:   cfg.KeystorePath,\n\t\tkeystoreTypeKey:   cfg.KeystoreType,\n\t\ttruststorePathKey: cfg.TruststorePath,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/jmx/translator.go"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 2,
                  "endLine": 213,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\tvar missingFields []string\n\tfor key, value := range map[string]string{\n\t\tusernameKey:       cfg.Username,\n\t\tpasswordFileKey:   cfg.PasswordFile,\n\t\tkeystorePathKey:   cfg.KeystorePath,\n\t\tkeystoreTypeKey:   cfg.KeystoreType,\n\t\ttruststorePathKey: cfg.TruststorePath,\n",
                    "rendered": {
                      "text": "\tvar missingFields []string\n\tfor key, value := range map[string]string{\n\t\tusernameKey:       cfg.Username,\n\t\tpasswordFileKey:   cfg.PasswordFile,\n\t\tkeystorePathKey:   cfg.KeystorePath,\n\t\tkeystoreTypeKey:   cfg.KeystoreType,\n\t\ttruststorePathKey: cfg.TruststorePath,\n",
                      "markdown": "`\tvar missingFields []string\n\tfor key, value := range map[string]string{\n\t\tusernameKey:       cfg.Username,\n\t\tpasswordFileKey:   cfg.PasswordFile,\n\t\tkeystorePathKey:   cfg.KeystorePath,\n\t\tkeystoreTypeKey:   cfg.KeystoreType,\n\t\ttruststorePathKey: cfg.TruststorePath,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/jmx/translator.go"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 21,
                  "endLine": 130,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t}\n\n\tif passwordFile, ok := jmxMap[passwordFileKey].(string); ok {\n\t\tcfg.PasswordFile = passwordFile\n\t}\n\n\tif keystorePath, ok := jmxMap[keystorePathKey].(string); ok {\n",
                    "rendered": {
                      "text": "\t}\n\n\tif passwordFile, ok := jmxMap[passwordFileKey].(string); ok {\n\t\tcfg.PasswordFile = passwordFile\n\t}\n\n\tif keystorePath, ok := jmxMap[keystorePathKey].(string); ok {\n",
                      "markdown": "`\t}\n\n\tif passwordFile, ok := jmxMap[passwordFileKey].(string); ok {\n\t\tcfg.PasswordFile = passwordFile\n\t}\n\n\tif keystorePath, ok := jmxMap[keystorePathKey].(string); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/jmx/translator.go"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 6,
                  "endLine": 130,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\t}\n\n\tif passwordFile, ok := jmxMap[passwordFileKey].(string); ok {\n\t\tcfg.PasswordFile = passwordFile\n\t}\n\n\tif keystorePath, ok := jmxMap[keystorePathKey].(string); ok {\n",
                    "rendered": {
                      "text": "\t}\n\n\tif passwordFile, ok := jmxMap[passwordFileKey].(string); ok {\n\t\tcfg.PasswordFile = passwordFile\n\t}\n\n\tif keystorePath, ok := jmxMap[keystorePathKey].(string); ok {\n",
                      "markdown": "`\t}\n\n\tif passwordFile, ok := jmxMap[passwordFileKey].(string); ok {\n\t\tcfg.PasswordFile = passwordFile\n\t}\n\n\tif keystorePath, ok := jmxMap[keystorePathKey].(string); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/jmx/translator.go"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 31,
                  "endLine": 129,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\t\tcfg.Username = username\n\t}\n\n\tif passwordFile, ok := jmxMap[passwordFileKey].(string); ok {\n\t\tcfg.PasswordFile = passwordFile\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tcfg.Username = username\n\t}\n\n\tif passwordFile, ok := jmxMap[passwordFileKey].(string); ok {\n\t\tcfg.PasswordFile = passwordFile\n\t}\n\n",
                      "markdown": "`\t\tcfg.Username = username\n\t}\n\n\tif passwordFile, ok := jmxMap[passwordFileKey].(string); ok {\n\t\tcfg.PasswordFile = passwordFile\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/jmx/translator.go"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 4,
                  "endLine": 129,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\tcfg.Username = username\n\t}\n\n\tif passwordFile, ok := jmxMap[passwordFileKey].(string); ok {\n\t\tcfg.PasswordFile = passwordFile\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tcfg.Username = username\n\t}\n\n\tif passwordFile, ok := jmxMap[passwordFileKey].(string); ok {\n\t\tcfg.PasswordFile = passwordFile\n\t}\n\n",
                      "markdown": "`\t\tcfg.Username = username\n\t}\n\n\tif passwordFile, ok := jmxMap[passwordFileKey].(string); ok {\n\t\tcfg.PasswordFile = passwordFile\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/jmx/translator.go"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 30,
                  "endLine": 38,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\tregistrySSLEnabledKey     = \"registry_ssl_enabled\"\n\tremoteProfileKey          = \"remote_profile\"\n\trealmKey                  = \"realm\"\n\tpasswordFileKey           = \"password_file\"\n\tdefaultCollectionInterval = time.Minute\n\tenvJmxJarPath             = \"JMX_JAR_PATH\"\n\tattributeHost             = \"host\"\n",
                    "rendered": {
                      "text": "\tregistrySSLEnabledKey     = \"registry_ssl_enabled\"\n\tremoteProfileKey          = \"remote_profile\"\n\trealmKey                  = \"realm\"\n\tpasswordFileKey           = \"password_file\"\n\tdefaultCollectionInterval = time.Minute\n\tenvJmxJarPath             = \"JMX_JAR_PATH\"\n\tattributeHost             = \"host\"\n",
                      "markdown": "`\tregistrySSLEnabledKey     = \"registry_ssl_enabled\"\n\tremoteProfileKey          = \"remote_profile\"\n\trealmKey                  = \"realm\"\n\tpasswordFileKey           = \"password_file\"\n\tdefaultCollectionInterval = time.Minute\n\tenvJmxJarPath             = \"JMX_JAR_PATH\"\n\tattributeHost             = \"host\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/jmx/translator.go"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tregistrySSLEnabledKey     = \"registry_ssl_enabled\"\n\tremoteProfileKey          = \"remote_profile\"\n\trealmKey                  = \"realm\"\n\tpasswordFileKey           = \"password_file\"\n\tdefaultCollectionInterval = time.Minute\n\tenvJmxJarPath             = \"JMX_JAR_PATH\"\n\tattributeHost             = \"host\"\n",
                    "rendered": {
                      "text": "\tregistrySSLEnabledKey     = \"registry_ssl_enabled\"\n\tremoteProfileKey          = \"remote_profile\"\n\trealmKey                  = \"realm\"\n\tpasswordFileKey           = \"password_file\"\n\tdefaultCollectionInterval = time.Minute\n\tenvJmxJarPath             = \"JMX_JAR_PATH\"\n\tattributeHost             = \"host\"\n",
                      "markdown": "`\tregistrySSLEnabledKey     = \"registry_ssl_enabled\"\n\tremoteProfileKey          = \"remote_profile\"\n\trealmKey                  = \"realm\"\n\tpasswordFileKey           = \"password_file\"\n\tdefaultCollectionInterval = time.Minute\n\tenvJmxJarPath             = \"JMX_JAR_PATH\"\n\tattributeHost             = \"host\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/jmx/translator.go"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 43,
                  "endLine": 174,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\t\tif err != nil {\n\t\t\tlog.Printf(\"E! error finding hostname for jmx metrics %v\", err)\n\t\t} else {\n\t\t\tcfg.ResourceAttributes[attributeHost] = hostname\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tif err != nil {\n\t\t\tlog.Printf(\"E! error finding hostname for jmx metrics %v\", err)\n\t\t} else {\n\t\t\tcfg.ResourceAttributes[attributeHost] = hostname\n\t\t}\n\t}\n\n",
                      "markdown": "`\t\tif err != nil {\n\t\t\tlog.Printf(\"E! error finding hostname for jmx metrics %v\", err)\n\t\t} else {\n\t\t\tcfg.ResourceAttributes[attributeHost] = hostname\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/jmx/translator.go"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 32,
                  "endLine": 172,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\tif !context.CurrentContext().GetOmitHostname() && !conf.IsSet(ec2taggerprocessor.Ec2taggerKey) {\n\t\thostname, err := os.Hostname()\n\t\tif err != nil {\n\t\t\tlog.Printf(\"E! error finding hostname for jmx metrics %v\", err)\n\t\t} else {\n\t\t\tcfg.ResourceAttributes[attributeHost] = hostname\n\t\t}\n",
                    "rendered": {
                      "text": "\tif !context.CurrentContext().GetOmitHostname() && !conf.IsSet(ec2taggerprocessor.Ec2taggerKey) {\n\t\thostname, err := os.Hostname()\n\t\tif err != nil {\n\t\t\tlog.Printf(\"E! error finding hostname for jmx metrics %v\", err)\n\t\t} else {\n\t\t\tcfg.ResourceAttributes[attributeHost] = hostname\n\t\t}\n",
                      "markdown": "`\tif !context.CurrentContext().GetOmitHostname() && !conf.IsSet(ec2taggerprocessor.Ec2taggerKey) {\n\t\thostname, err := os.Hostname()\n\t\tif err != nil {\n\t\t\tlog.Printf(\"E! error finding hostname for jmx metrics %v\", err)\n\t\t} else {\n\t\t\tcfg.ResourceAttributes[attributeHost] = hostname\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/jmx/translator.go"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 2,
                  "endLine": 170,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t}\n\n\tif !context.CurrentContext().GetOmitHostname() && !conf.IsSet(ec2taggerprocessor.Ec2taggerKey) {\n\t\thostname, err := os.Hostname()\n\t\tif err != nil {\n\t\t\tlog.Printf(\"E! error finding hostname for jmx metrics %v\", err)\n\t\t} else {\n",
                    "rendered": {
                      "text": "\t}\n\n\tif !context.CurrentContext().GetOmitHostname() && !conf.IsSet(ec2taggerprocessor.Ec2taggerKey) {\n\t\thostname, err := os.Hostname()\n\t\tif err != nil {\n\t\t\tlog.Printf(\"E! error finding hostname for jmx metrics %v\", err)\n\t\t} else {\n",
                      "markdown": "`\t}\n\n\tif !context.CurrentContext().GetOmitHostname() && !conf.IsSet(ec2taggerprocessor.Ec2taggerKey) {\n\t\thostname, err := os.Hostname()\n\t\tif err != nil {\n\t\t\tlog.Printf(\"E! error finding hostname for jmx metrics %v\", err)\n\t\t} else {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/jmx/translator_test.go"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 38,
                  "endLine": 175,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"username\":             \"myusername\",\n\t\t\t\t\"password_file\":        \"/path/to/password_file\",\n\t\t\t\t\"keystore_path\":        \"/path/to/keystore\",\n\t\t\t\t\"keystore_type\":        \"PKCS\",\n\t\t\t\t\"truststore_path\":      \"/path/to/truststore\",\n",
                    "rendered": {
                      "text": "\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"username\":             \"myusername\",\n\t\t\t\t\"password_file\":        \"/path/to/password_file\",\n\t\t\t\t\"keystore_path\":        \"/path/to/keystore\",\n\t\t\t\t\"keystore_type\":        \"PKCS\",\n\t\t\t\t\"truststore_path\":      \"/path/to/truststore\",\n",
                      "markdown": "`\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"username\":             \"myusername\",\n\t\t\t\t\"password_file\":        \"/path/to/password_file\",\n\t\t\t\t\"keystore_path\":        \"/path/to/keystore\",\n\t\t\t\t\"keystore_type\":        \"PKCS\",\n\t\t\t\t\"truststore_path\":      \"/path/to/truststore\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/jmx/translator_test.go"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 5,
                  "endLine": 175,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"username\":             \"myusername\",\n\t\t\t\t\"password_file\":        \"/path/to/password_file\",\n\t\t\t\t\"keystore_path\":        \"/path/to/keystore\",\n\t\t\t\t\"keystore_type\":        \"PKCS\",\n\t\t\t\t\"truststore_path\":      \"/path/to/truststore\",\n",
                    "rendered": {
                      "text": "\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"username\":             \"myusername\",\n\t\t\t\t\"password_file\":        \"/path/to/password_file\",\n\t\t\t\t\"keystore_path\":        \"/path/to/keystore\",\n\t\t\t\t\"keystore_type\":        \"PKCS\",\n\t\t\t\t\"truststore_path\":      \"/path/to/truststore\",\n",
                      "markdown": "`\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"username\":             \"myusername\",\n\t\t\t\t\"password_file\":        \"/path/to/password_file\",\n\t\t\t\t\"keystore_path\":        \"/path/to/keystore\",\n\t\t\t\t\"keystore_type\":        \"PKCS\",\n\t\t\t\t\"truststore_path\":      \"/path/to/truststore\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/jmx/translator_test.go"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 31,
                  "endLine": 143,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\t\t\t\t\t\t\"jvm.memory.heap.init\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"password_file\": \"/path/to/password_file\",\n\t\t\t},\n\t\t\twantErr: &missingFieldsError{\n\t\t\t\tfields: []string{\n",
                    "rendered": {
                      "text": "\t\t\t\t\t\t\"jvm.memory.heap.init\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"password_file\": \"/path/to/password_file\",\n\t\t\t},\n\t\t\twantErr: &missingFieldsError{\n\t\t\t\tfields: []string{\n",
                      "markdown": "`\t\t\t\t\t\t\"jvm.memory.heap.init\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"password_file\": \"/path/to/password_file\",\n\t\t\t},\n\t\t\twantErr: &missingFieldsError{\n\t\t\t\tfields: []string{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/jmx/translator_test.go"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 5,
                  "endLine": 143,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\t\t\t\t\t\t\"jvm.memory.heap.init\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"password_file\": \"/path/to/password_file\",\n\t\t\t},\n\t\t\twantErr: &missingFieldsError{\n\t\t\t\tfields: []string{\n",
                    "rendered": {
                      "text": "\t\t\t\t\t\t\"jvm.memory.heap.init\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"password_file\": \"/path/to/password_file\",\n\t\t\t},\n\t\t\twantErr: &missingFieldsError{\n\t\t\t\tfields: []string{\n",
                      "markdown": "`\t\t\t\t\t\t\"jvm.memory.heap.init\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"password_file\": \"/path/to/password_file\",\n\t\t\t},\n\t\t\twantErr: &missingFieldsError{\n\t\t\t\tfields: []string{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/jmx/translator_test.go"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 49,
                  "endLine": 121,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\t\t\t\trequire.NoError(t, testCase.want.Unmarshal(wantCfg))\n\t\t\t\twantCfg.JARPath = paths.JMXJarPath\n\t\t\t\tif wantCfg.ResourceAttributes != nil && wantCfg.ResourceAttributes[attributeHost] == attributeHost {\n\t\t\t\t\twantCfg.ResourceAttributes[attributeHost] = hostname\n\t\t\t\t}\n\t\t\t\tassert.Equal(t, wantCfg, gotCfg)\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\t\trequire.NoError(t, testCase.want.Unmarshal(wantCfg))\n\t\t\t\twantCfg.JARPath = paths.JMXJarPath\n\t\t\t\tif wantCfg.ResourceAttributes != nil && wantCfg.ResourceAttributes[attributeHost] == attributeHost {\n\t\t\t\t\twantCfg.ResourceAttributes[attributeHost] = hostname\n\t\t\t\t}\n\t\t\t\tassert.Equal(t, wantCfg, gotCfg)\n\t\t\t}\n",
                      "markdown": "`\t\t\t\trequire.NoError(t, testCase.want.Unmarshal(wantCfg))\n\t\t\t\twantCfg.JARPath = paths.JMXJarPath\n\t\t\t\tif wantCfg.ResourceAttributes != nil && wantCfg.ResourceAttributes[attributeHost] == attributeHost {\n\t\t\t\t\twantCfg.ResourceAttributes[attributeHost] = hostname\n\t\t\t\t}\n\t\t\t\tassert.Equal(t, wantCfg, gotCfg)\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/jmx/translator_test.go"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 20,
                  "endLine": 95,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\t\t\t\t\t\"timeout\":  \"5s\",\n\t\t\t\t},\n\t\t\t\t\"resource_attributes\": map[string]string{\n\t\t\t\t\tattributeHost: hostname,\n\t\t\t\t},\n\t\t\t}),\n\t\t},\n",
                    "rendered": {
                      "text": "\t\t\t\t\t\"timeout\":  \"5s\",\n\t\t\t\t},\n\t\t\t\t\"resource_attributes\": map[string]string{\n\t\t\t\t\tattributeHost: hostname,\n\t\t\t\t},\n\t\t\t}),\n\t\t},\n",
                      "markdown": "`\t\t\t\t\t\"timeout\":  \"5s\",\n\t\t\t\t},\n\t\t\t\t\"resource_attributes\": map[string]string{\n\t\t\t\t\tattributeHost: hostname,\n\t\t\t\t},\n\t\t\t}),\n\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/receiver/jmx/translator_test.go"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 1,
                  "endLine": 24,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nfunc TestTranslator(t *testing.T) {\n\tfactory := jmxreceiver.NewFactory()\n\thostname, _ := os.Hostname()\n\ttestCases := map[string]struct {\n\t\tinput   map[string]any\n\t\tindex   int\n",
                    "rendered": {
                      "text": "\nfunc TestTranslator(t *testing.T) {\n\tfactory := jmxreceiver.NewFactory()\n\thostname, _ := os.Hostname()\n\ttestCases := map[string]struct {\n\t\tinput   map[string]any\n\t\tindex   int\n",
                      "markdown": "`\nfunc TestTranslator(t *testing.T) {\n\tfactory := jmxreceiver.NewFactory()\n\thostname, _ := os.Hostname()\n\ttestCases := map[string]struct {\n\t\tinput   map[string]any\n\t\tindex   int\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/awsapplicationsignals/translator.go"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 27,
                  "endLine": 186,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\t\trulesConfigKey = common.ConfigKey(configKey[1], common.AppSignalsRules)\n\t}\n\tif conf.IsSet(rulesConfigKey) {\n\t\tfor _, rule := range conf.Get(rulesConfigKey).([]interface{}) {\n\t\t\truleConfig := rules.Rule{}\n\t\t\truleMap := rule.(map[string]interface{})\n\t\t\tselectors := ruleMap[\"selectors\"].([]interface{})\n",
                    "rendered": {
                      "text": "\t\trulesConfigKey = common.ConfigKey(configKey[1], common.AppSignalsRules)\n\t}\n\tif conf.IsSet(rulesConfigKey) {\n\t\tfor _, rule := range conf.Get(rulesConfigKey).([]interface{}) {\n\t\t\truleConfig := rules.Rule{}\n\t\t\truleMap := rule.(map[string]interface{})\n\t\t\tselectors := ruleMap[\"selectors\"].([]interface{})\n",
                      "markdown": "`\t\trulesConfigKey = common.ConfigKey(configKey[1], common.AppSignalsRules)\n\t}\n\tif conf.IsSet(rulesConfigKey) {\n\t\tfor _, rule := range conf.Get(rulesConfigKey).([]interface{}) {\n\t\t\truleConfig := rules.Rule{}\n\t\t\truleMap := rule.(map[string]interface{})\n\t\t\tselectors := ruleMap[\"selectors\"].([]interface{})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/awsapplicationsignals/translator.go"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 23,
                  "endLine": 126,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\t\t}\n\t}\n\n\tconfigJson, ok := conf.Get(limiterConfigKey).(map[string]interface{})\n\tif !ok {\n\t\treturn nil, errors.New(\"type conversion error: limiter is not an object\")\n\t}\n",
                    "rendered": {
                      "text": "\t\t}\n\t}\n\n\tconfigJson, ok := conf.Get(limiterConfigKey).(map[string]interface{})\n\tif !ok {\n\t\treturn nil, errors.New(\"type conversion error: limiter is not an object\")\n\t}\n",
                      "markdown": "`\t\t}\n\t}\n\n\tconfigJson, ok := conf.Get(limiterConfigKey).(map[string]interface{})\n\tif !ok {\n\t\treturn nil, errors.New(\"type conversion error: limiter is not an object\")\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/awsapplicationsignals/translator.go"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 80,
                  "endLine": 205,
                  "endColumn": 89,
                  "snippet": {
                    "text": "\t\t\tif ruleConfig.Action == rules.AllowListActionReplace {\n\t\t\t\treplacements, ok := ruleMap[\"replacements\"]\n\t\t\t\tif !ok {\n\t\t\t\t\treturn nil, errors.New(\"replace action set, but no replacements defined for service rule\")\n\t\t\t\t}\n\t\t\t\truleConfig.Replacements = getServiceReplacements(replacements)\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\tif ruleConfig.Action == rules.AllowListActionReplace {\n\t\t\t\treplacements, ok := ruleMap[\"replacements\"]\n\t\t\t\tif !ok {\n\t\t\t\t\treturn nil, errors.New(\"replace action set, but no replacements defined for service rule\")\n\t\t\t\t}\n\t\t\t\truleConfig.Replacements = getServiceReplacements(replacements)\n\t\t\t}\n",
                      "markdown": "`\t\t\tif ruleConfig.Action == rules.AllowListActionReplace {\n\t\t\t\treplacements, ok := ruleMap[\"replacements\"]\n\t\t\t\tif !ok {\n\t\t\t\t\treturn nil, errors.New(\"replace action set, but no replacements defined for service rule\")\n\t\t\t\t}\n\t\t\t\truleConfig.Replacements = getServiceReplacements(replacements)\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/awsapplicationsignals/translator.go"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 77,
                  "endLine": 169,
                  "endColumn": 83,
                  "snippet": {
                    "text": "\t\t\treturn nil, errors.New(\"type conversion error: rotation_interval is not a string\")\n\t\t} else {\n\t\t\tif interval, err := time.ParseDuration(val); err != nil {\n\t\t\t\treturn nil, errors.New(\"type conversion error: rotation_interval is not a time string\")\n\t\t\t} else {\n\t\t\t\tlimiterConfig.RotationInterval = interval\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\treturn nil, errors.New(\"type conversion error: rotation_interval is not a string\")\n\t\t} else {\n\t\t\tif interval, err := time.ParseDuration(val); err != nil {\n\t\t\t\treturn nil, errors.New(\"type conversion error: rotation_interval is not a time string\")\n\t\t\t} else {\n\t\t\t\tlimiterConfig.RotationInterval = interval\n\t\t\t}\n",
                      "markdown": "`\t\t\treturn nil, errors.New(\"type conversion error: rotation_interval is not a string\")\n\t\t} else {\n\t\t\tif interval, err := time.ParseDuration(val); err != nil {\n\t\t\t\treturn nil, errors.New(\"type conversion error: rotation_interval is not a time string\")\n\t\t\t} else {\n\t\t\t\tlimiterConfig.RotationInterval = interval\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/awsapplicationsignals/translator.go"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 87,
                  "endLine": 158,
                  "endColumn": 93,
                  "snippet": {
                    "text": "\t\t\treturn nil, errors.New(\"type conversion error: garbage_collection_interval is not a string\")\n\t\t} else {\n\t\t\tif interval, err := time.ParseDuration(val); err != nil {\n\t\t\t\treturn nil, errors.New(\"type conversion error: garbage_collection_interval is not a time string\")\n\t\t\t} else {\n\t\t\t\tlimiterConfig.GarbageCollectionInterval = interval\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\treturn nil, errors.New(\"type conversion error: garbage_collection_interval is not a string\")\n\t\t} else {\n\t\t\tif interval, err := time.ParseDuration(val); err != nil {\n\t\t\t\treturn nil, errors.New(\"type conversion error: garbage_collection_interval is not a time string\")\n\t\t\t} else {\n\t\t\t\tlimiterConfig.GarbageCollectionInterval = interval\n\t\t\t}\n",
                      "markdown": "`\t\t\treturn nil, errors.New(\"type conversion error: garbage_collection_interval is not a string\")\n\t\t} else {\n\t\t\tif interval, err := time.ParseDuration(val); err != nil {\n\t\t\t\treturn nil, errors.New(\"type conversion error: garbage_collection_interval is not a time string\")\n\t\t\t} else {\n\t\t\t\tlimiterConfig.GarbageCollectionInterval = interval\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/awsapplicationsignals/translator.go"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 62,
                  "endLine": 42,
                  "snippet": {
                    "text": "\to(t)\n}\n\n// WithDataType determines where the translator should look to find\n// the configuration.\nfunc WithDataType(dataType component.DataType) Option {\n\treturn optionFunc(func(t *translator) {\n\t\tt.dataType = dataType\n",
                    "rendered": {
                      "text": "\to(t)\n}\n\n// WithDataType determines where the translator should look to find\n// the configuration.\nfunc WithDataType(dataType component.DataType) Option {\n\treturn optionFunc(func(t *translator) {\n\t\tt.dataType = dataType\n",
                      "markdown": "`\to(t)\n}\n\n// WithDataType determines where the translator should look to find\n// the configuration.\nfunc WithDataType(dataType component.DataType) Option {\n\treturn optionFunc(func(t *translator) {\n\t\tt.dataType = dataType\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/processor/awsapplicationsignals/translator_test.go"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 75,
                  "endLine": 113,
                  "endColumn": 84,
                  "snippet": {
                    "text": "\t\t},\n\t\t\"WithInvalidAppSignalsCustomRulesEnabled\": {\n\t\t\tinput:   invalidJsonMap,\n\t\t\twantErr: errors.New(\"replace action set, but no replacements defined for service rule\"),\n\t\t\tmode:    translatorConfig.ModeOnPrem,\n\t\t},\n\t\t\"WithAppSignalsEnabledEC2\": {\n",
                    "rendered": {
                      "text": "\t\t},\n\t\t\"WithInvalidAppSignalsCustomRulesEnabled\": {\n\t\t\tinput:   invalidJsonMap,\n\t\t\twantErr: errors.New(\"replace action set, but no replacements defined for service rule\"),\n\t\t\tmode:    translatorConfig.ModeOnPrem,\n\t\t},\n\t\t\"WithAppSignalsEnabledEC2\": {\n",
                      "markdown": "`\t\t},\n\t\t\"WithInvalidAppSignalsCustomRulesEnabled\": {\n\t\t\tinput:   invalidJsonMap,\n\t\t\twantErr: errors.New(\"replace action set, but no replacements defined for service rule\"),\n\t\t\tmode:    translatorConfig.ModeOnPrem,\n\t\t},\n\t\t\"WithAppSignalsEnabledEC2\": {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/META-INF/maven/io.prometheus/prometheus-metrics-shaded-protobuf/pom.xml"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 88,
                  "endLine": 24,
                  "endColumn": 96,
                  "snippet": {
                    "text": "        <!-- Must be the same as the version of the protoc command that generated Metrics.java -->\n        <!-- in the Prometheus protobuf exposition format. -->\n        <protobuf.version>3.25.3</protobuf.version>\n        <!-- The version string is part of the relocated package name to make it safe to update in the future. -->\n        <protobuf.version.string>3_25_3</protobuf.version.string>\n    </properties>\n\n",
                    "rendered": {
                      "text": "        <!-- Must be the same as the version of the protoc command that generated Metrics.java -->\n        <!-- in the Prometheus protobuf exposition format. -->\n        <protobuf.version>3.25.3</protobuf.version>\n        <!-- The version string is part of the relocated package name to make it safe to update in the future. -->\n        <protobuf.version.string>3_25_3</protobuf.version.string>\n    </properties>\n\n",
                      "markdown": "`        <!-- Must be the same as the version of the protoc command that generated Metrics.java -->\n        <!-- in the Prometheus protobuf exposition format. -->\n        <protobuf.version>3.25.3</protobuf.version>\n        <!-- The version string is part of the relocated package name to make it safe to update in the future. -->\n        <protobuf.version.string>3_25_3</protobuf.version.string>\n    </properties>\n\n`"
                    }
                  },
                  "sourceLanguage": "pom.xml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/groovy/grape/defaultGrapeConfig.xml"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 60,
                  "endLine": 10,
                  "snippet": {
                    "text": "     regarding copyright ownership.  The ASF licenses this file\n     to you under the Apache License, Version 2.0 (the\n     \"License\"); you may not use this file except in compliance\n     with the License.  You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n     Unless required by applicable law or agreed to in writing,\n",
                    "rendered": {
                      "text": "     regarding copyright ownership.  The ASF licenses this file\n     to you under the Apache License, Version 2.0 (the\n     \"License\"); you may not use this file except in compliance\n     with the License.  You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n     Unless required by applicable law or agreed to in writing,\n",
                      "markdown": "`     regarding copyright ownership.  The ASF licenses this file\n     to you under the Apache License, Version 2.0 (the\n     \"License\"); you may not use this file except in compliance\n     with the License.  You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n     Unless required by applicable law or agreed to in writing,\n`"
                    }
                  },
                  "sourceLanguage": "XML"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/target-systems/hbase.groovy"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 33,
                  "endLine": 215,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\ndef beanRegionServerIPC = otel.mbean(\"Hadoop:service=HBase,name=RegionServer,sub=IPC\")\notel.instrument(beanRegionServerIPC, \"hbase.region_server.open_connection.count\",\n  \"The number of open connections at the RPC layer.\", \"{connections}\",\n  [\"region_server\" : { mbean -> mbean.getProperty(\"tag.Hostname\") }],\n  \"numOpenConnections\", otel.&longUpDownCounterCallback)\notel.instrument(beanRegionServerIPC, \"hbase.region_server.active_handler.count\",\n",
                    "rendered": {
                      "text": "\ndef beanRegionServerIPC = otel.mbean(\"Hadoop:service=HBase,name=RegionServer,sub=IPC\")\notel.instrument(beanRegionServerIPC, \"hbase.region_server.open_connection.count\",\n  \"The number of open connections at the RPC layer.\", \"{connections}\",\n  [\"region_server\" : { mbean -> mbean.getProperty(\"tag.Hostname\") }],\n  \"numOpenConnections\", otel.&longUpDownCounterCallback)\notel.instrument(beanRegionServerIPC, \"hbase.region_server.active_handler.count\",\n",
                      "markdown": "`\ndef beanRegionServerIPC = otel.mbean(\"Hadoop:service=HBase,name=RegionServer,sub=IPC\")\notel.instrument(beanRegionServerIPC, \"hbase.region_server.open_connection.count\",\n  \"The number of open connections at the RPC layer.\", \"{connections}\",\n  [\"region_server\" : { mbean -> mbean.getProperty(\"tag.Hostname\") }],\n  \"numOpenConnections\", otel.&longUpDownCounterCallback)\notel.instrument(beanRegionServerIPC, \"hbase.region_server.active_handler.count\",\n`"
                    }
                  },
                  "sourceLanguage": "groovy"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/target-systems/hbase.groovy"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 12,
                  "endLine": 62,
                  "endColumn": 18,
                  "snippet": {
                    "text": "  [\"flushQueueLength\":[\"state\" : {\"flush\"}], \"compactionQueueLength\": [\"state\" : {\"compaction\"}]],\n  otel.&longUpDownCounterCallback)\notel.instrument(beanRegionServerServer, \"hbase.region_server.blocked_update.time\",\n  \"Amount of time updates have been blocked so the memstore can be flushed.\", \"ms\",\n  [\"region_server\" : { mbean -> mbean.getProperty(\"tag.Hostname\") }],\n  \"updatesBlockedTime\", otel.&longValueCallback)\notel.instrument(beanRegionServerServer, \"hbase.region_server.block_cache.operation.count\",\n",
                    "rendered": {
                      "text": "  [\"flushQueueLength\":[\"state\" : {\"flush\"}], \"compactionQueueLength\": [\"state\" : {\"compaction\"}]],\n  otel.&longUpDownCounterCallback)\notel.instrument(beanRegionServerServer, \"hbase.region_server.blocked_update.time\",\n  \"Amount of time updates have been blocked so the memstore can be flushed.\", \"ms\",\n  [\"region_server\" : { mbean -> mbean.getProperty(\"tag.Hostname\") }],\n  \"updatesBlockedTime\", otel.&longValueCallback)\notel.instrument(beanRegionServerServer, \"hbase.region_server.block_cache.operation.count\",\n",
                      "markdown": "`  [\"flushQueueLength\":[\"state\" : {\"flush\"}], \"compactionQueueLength\": [\"state\" : {\"compaction\"}]],\n  otel.&longUpDownCounterCallback)\notel.instrument(beanRegionServerServer, \"hbase.region_server.blocked_update.time\",\n  \"Amount of time updates have been blocked so the memstore can be flushed.\", \"ms\",\n  [\"region_server\" : { mbean -> mbean.getProperty(\"tag.Hostname\") }],\n  \"updatesBlockedTime\", otel.&longValueCallback)\notel.instrument(beanRegionServerServer, \"hbase.region_server.block_cache.operation.count\",\n`"
                    }
                  },
                  "sourceLanguage": "groovy"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/target-systems/activemq.groovy"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 14,
                  "endLine": 91,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\notel.instrument(activemqMetrics,\n  \"activemq.message.wait_time.avg\",\n  \"The average time a message was held on a destination.\",\n  \"ms\",\n  [\"destination\" : { mbean -> mbean.name().getKeyProperty(\"destinationName\") },\n  \"broker\"       : { mbean -> mbean.name().getKeyProperty(\"brokerName\")}],\n",
                    "rendered": {
                      "text": "\notel.instrument(activemqMetrics,\n  \"activemq.message.wait_time.avg\",\n  \"The average time a message was held on a destination.\",\n  \"ms\",\n  [\"destination\" : { mbean -> mbean.name().getKeyProperty(\"destinationName\") },\n  \"broker\"       : { mbean -> mbean.name().getKeyProperty(\"brokerName\")}],\n",
                      "markdown": "`\notel.instrument(activemqMetrics,\n  \"activemq.message.wait_time.avg\",\n  \"The average time a message was held on a destination.\",\n  \"ms\",\n  [\"destination\" : { mbean -> mbean.name().getKeyProperty(\"destinationName\") },\n  \"broker\"       : { mbean -> mbean.name().getKeyProperty(\"brokerName\")}],\n`"
                    }
                  },
                  "sourceLanguage": "groovy"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/target-systems/tomcat.groovy"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 74,
                  "endLine": 55,
                  "endColumn": 80,
                  "snippet": {
                    "text": "otel.instrument(beantomcatnewrequestProcessor, \"tomcat.request_count\", \"The total requests.\", \"requests\",\n    [\"proto_handler\" : { mbean -> mbean.name().getKeyProperty(\"name\") }],\n    \"requestCount\", otel.&longCounterCallback)\notel.instrument(beantomcatnewrequestProcessor, \"tomcat.max_time\", \"Maximum time to process a request.\", \"ms\",\n    [\"proto_handler\" : { mbean -> mbean.name().getKeyProperty(\"name\") }],\n    \"maxTime\", otel.&longValueCallback)\notel.instrument(beantomcatnewrequestProcessor, \"tomcat.processing_time\", \"The total processing time.\", \"ms\",\n",
                    "rendered": {
                      "text": "otel.instrument(beantomcatnewrequestProcessor, \"tomcat.request_count\", \"The total requests.\", \"requests\",\n    [\"proto_handler\" : { mbean -> mbean.name().getKeyProperty(\"name\") }],\n    \"requestCount\", otel.&longCounterCallback)\notel.instrument(beantomcatnewrequestProcessor, \"tomcat.max_time\", \"Maximum time to process a request.\", \"ms\",\n    [\"proto_handler\" : { mbean -> mbean.name().getKeyProperty(\"name\") }],\n    \"maxTime\", otel.&longValueCallback)\notel.instrument(beantomcatnewrequestProcessor, \"tomcat.processing_time\", \"The total processing time.\", \"ms\",\n",
                      "markdown": "`otel.instrument(beantomcatnewrequestProcessor, \"tomcat.request_count\", \"The total requests.\", \"requests\",\n    [\"proto_handler\" : { mbean -> mbean.name().getKeyProperty(\"name\") }],\n    \"requestCount\", otel.&longCounterCallback)\notel.instrument(beantomcatnewrequestProcessor, \"tomcat.max_time\", \"Maximum time to process a request.\", \"ms\",\n    [\"proto_handler\" : { mbean -> mbean.name().getKeyProperty(\"name\") }],\n    \"maxTime\", otel.&longValueCallback)\notel.instrument(beantomcatnewrequestProcessor, \"tomcat.processing_time\", \"The total processing time.\", \"ms\",\n`"
                    }
                  },
                  "sourceLanguage": "groovy"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/target-systems/tomcat.groovy"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 71,
                  "endLine": 28,
                  "endColumn": 77,
                  "snippet": {
                    "text": "otel.instrument(beantomcatrequestProcessor, \"tomcat.request_count\", \"The total requests.\", \"requests\",\n  [\"proto_handler\" : { mbean -> mbean.name().getKeyProperty(\"name\") }],\n  \"requestCount\", otel.&longCounterCallback)\notel.instrument(beantomcatrequestProcessor, \"tomcat.max_time\", \"Maximum time to process a request.\", \"ms\",\n  [\"proto_handler\" : { mbean -> mbean.name().getKeyProperty(\"name\") }],\n  \"maxTime\", otel.&longValueCallback)\notel.instrument(beantomcatrequestProcessor, \"tomcat.processing_time\", \"The total processing time.\", \"ms\",\n",
                    "rendered": {
                      "text": "otel.instrument(beantomcatrequestProcessor, \"tomcat.request_count\", \"The total requests.\", \"requests\",\n  [\"proto_handler\" : { mbean -> mbean.name().getKeyProperty(\"name\") }],\n  \"requestCount\", otel.&longCounterCallback)\notel.instrument(beantomcatrequestProcessor, \"tomcat.max_time\", \"Maximum time to process a request.\", \"ms\",\n  [\"proto_handler\" : { mbean -> mbean.name().getKeyProperty(\"name\") }],\n  \"maxTime\", otel.&longValueCallback)\notel.instrument(beantomcatrequestProcessor, \"tomcat.processing_time\", \"The total processing time.\", \"ms\",\n",
                      "markdown": "`otel.instrument(beantomcatrequestProcessor, \"tomcat.request_count\", \"The total requests.\", \"requests\",\n  [\"proto_handler\" : { mbean -> mbean.name().getKeyProperty(\"name\") }],\n  \"requestCount\", otel.&longCounterCallback)\notel.instrument(beantomcatrequestProcessor, \"tomcat.max_time\", \"Maximum time to process a request.\", \"ms\",\n  [\"proto_handler\" : { mbean -> mbean.name().getKeyProperty(\"name\") }],\n  \"maxTime\", otel.&longValueCallback)\notel.instrument(beantomcatrequestProcessor, \"tomcat.processing_time\", \"The total processing time.\", \"ms\",\n`"
                    }
                  },
                  "sourceLanguage": "groovy"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/target-systems/wildfly.groovy"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 85,
                  "endLine": 35,
                  "endColumn": 91,
                  "snippet": {
                    "text": "requests received.\", \"{requests}\",\n  [\"server\": { mbean -> mbean.name().getKeyProperty(\"server\")}, \"listener\": { mbean -> mbean.name().getKeyProperty(\"http-listener\")}],\n  \"requestCount\", otel.&longCounterCallback)\notel.instrument(beanWildflyHttpListener, \"wildfly.request.time\", \"The total amount of time spent on requests.\", \"ns\",\n  [\"server\": { mbean -> mbean.name().getKeyProperty(\"server\")}, \"listener\": { mbean -> mbean.name().getKeyProperty(\"http-listener\")}],\n  \"processingTime\", otel.&longCounterCallback)\notel.instrument(beanWildflyHttpListener, \"wildfly.request.server_error\", \"The number of req",
                    "rendered": {
                      "text": "requests received.\", \"{requests}\",\n  [\"server\": { mbean -> mbean.name().getKeyProperty(\"server\")}, \"listener\": { mbean -> mbean.name().getKeyProperty(\"http-listener\")}],\n  \"requestCount\", otel.&longCounterCallback)\notel.instrument(beanWildflyHttpListener, \"wildfly.request.time\", \"The total amount of time spent on requests.\", \"ns\",\n  [\"server\": { mbean -> mbean.name().getKeyProperty(\"server\")}, \"listener\": { mbean -> mbean.name().getKeyProperty(\"http-listener\")}],\n  \"processingTime\", otel.&longCounterCallback)\notel.instrument(beanWildflyHttpListener, \"wildfly.request.server_error\", \"The number of req",
                      "markdown": "`requests received.\", \"{requests}\",\n  [\"server\": { mbean -> mbean.name().getKeyProperty(\"server\")}, \"listener\": { mbean -> mbean.name().getKeyProperty(\"http-listener\")}],\n  \"requestCount\", otel.&longCounterCallback)\notel.instrument(beanWildflyHttpListener, \"wildfly.request.time\", \"The total amount of time spent on requests.\", \"ns\",\n  [\"server\": { mbean -> mbean.name().getKeyProperty(\"server\")}, \"listener\": { mbean -> mbean.name().getKeyProperty(\"http-listener\")}],\n  \"processingTime\", otel.&longCounterCallback)\notel.instrument(beanWildflyHttpListener, \"wildfly.request.server_error\", \"The number of req`"
                    }
                  },
                  "sourceLanguage": "groovy"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/target-systems/jvm.groovy"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 55,
                  "endLine": 26,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        \"1\", [\"name\" : { mbean -> mbean.name().getKeyProperty(\"name\") }],\n        \"CollectionCount\", otel.&longCounterCallback)\notel.instrument(garbageCollector, \"jvm.gc.collections.elapsed\",\n        \"the approximate accumulated collection elapsed time in milliseconds\", \"ms\",\n        [\"name\" : { mbean -> mbean.name().getKeyProperty(\"name\") }],\n        \"CollectionTime\", otel.&longCounterCallback)\n\n",
                    "rendered": {
                      "text": "        \"1\", [\"name\" : { mbean -> mbean.name().getKeyProperty(\"name\") }],\n        \"CollectionCount\", otel.&longCounterCallback)\notel.instrument(garbageCollector, \"jvm.gc.collections.elapsed\",\n        \"the approximate accumulated collection elapsed time in milliseconds\", \"ms\",\n        [\"name\" : { mbean -> mbean.name().getKeyProperty(\"name\") }],\n        \"CollectionTime\", otel.&longCounterCallback)\n\n",
                      "markdown": "`        \"1\", [\"name\" : { mbean -> mbean.name().getKeyProperty(\"name\") }],\n        \"CollectionCount\", otel.&longCounterCallback)\notel.instrument(garbageCollector, \"jvm.gc.collections.elapsed\",\n        \"the approximate accumulated collection elapsed time in milliseconds\", \"ms\",\n        [\"name\" : { mbean -> mbean.name().getKeyProperty(\"name\") }],\n        \"CollectionTime\", otel.&longCounterCallback)\n\n`"
                    }
                  },
                  "sourceLanguage": "groovy"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/target-systems/cassandra.groovy"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 48,
                  "endLine": 81,
                  "endColumn": 54,
                  "snippet": {
                    "text": "def storageTotalHints = otel.mbean(\"${storage},name=TotalHints\")\notel.instrument(storageTotalHints,\n        \"cassandra.storage.total_hints.count\",\n        \"Number of hint messages written to this node since [re]start\", \"1\", \"Count\",\n        otel.&longCounterCallback)\n\ndef storageTotalHintsInProgress = otel.mbean(\"${storage},name=TotalHintsInProgress\")\n",
                    "rendered": {
                      "text": "def storageTotalHints = otel.mbean(\"${storage},name=TotalHints\")\notel.instrument(storageTotalHints,\n        \"cassandra.storage.total_hints.count\",\n        \"Number of hint messages written to this node since [re]start\", \"1\", \"Count\",\n        otel.&longCounterCallback)\n\ndef storageTotalHintsInProgress = otel.mbean(\"${storage},name=TotalHintsInProgress\")\n",
                      "markdown": "`def storageTotalHints = otel.mbean(\"${storage},name=TotalHints\")\notel.instrument(storageTotalHints,\n        \"cassandra.storage.total_hints.count\",\n        \"Number of hint messages written to this node since [re]start\", \"1\", \"Count\",\n        otel.&longCounterCallback)\n\ndef storageTotalHintsInProgress = otel.mbean(\"${storage},name=TotalHintsInProgress\")\n`"
                    }
                  },
                  "sourceLanguage": "groovy"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/target-systems/cassandra.groovy"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 43,
                  "endLine": 75,
                  "endColumn": 49,
                  "snippet": {
                    "text": "def storageLoad = otel.mbean(\"${storage},name=Load\")\notel.instrument(storageLoad,\n        \"cassandra.storage.load.count\",\n        \"Size of the on disk data size this node manages\", \"by\", \"Count\",\n        otel.&longUpDownCounterCallback)\n\ndef storageTotalHints = otel.mbean(\"${storage},name=TotalHints\")\n",
                    "rendered": {
                      "text": "def storageLoad = otel.mbean(\"${storage},name=Load\")\notel.instrument(storageLoad,\n        \"cassandra.storage.load.count\",\n        \"Size of the on disk data size this node manages\", \"by\", \"Count\",\n        otel.&longUpDownCounterCallback)\n\ndef storageTotalHints = otel.mbean(\"${storage},name=TotalHints\")\n",
                      "markdown": "`def storageLoad = otel.mbean(\"${storage},name=Load\")\notel.instrument(storageLoad,\n        \"cassandra.storage.load.count\",\n        \"Size of the on disk data size this node manages\", \"by\", \"Count\",\n        otel.&longUpDownCounterCallback)\n\ndef storageTotalHints = otel.mbean(\"${storage},name=TotalHints\")\n`"
                    }
                  },
                  "sourceLanguage": "groovy"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/target-systems/solr.groovy"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 14,
                  "endLine": 38,
                  "endColumn": 20,
                  "snippet": {
                    "text": "def beanSolrCoreRequestTimes = otel.mbeans([\"solr:dom1=core,dom2=*,category=QUERY,scope=*,name=requestTimes\",\n                                        \"solr:dom1=core,dom2=*,category=UPDATE,scope=*,name=requestTimes\"])\notel.instrument(beanSolrCoreRequestTimes, \"solr.request.time.average\",\n  \"The average time of a query, based on Solr's histogram configuration.\",\n  \"ms\",\n  [\"core\" : { mbean -> mbean.name().getKeyProperty(\"dom2\") },\n   \"type\" : { mbean -> mbean.name().getKeyProperty(\"category\") },\n",
                    "rendered": {
                      "text": "def beanSolrCoreRequestTimes = otel.mbeans([\"solr:dom1=core,dom2=*,category=QUERY,scope=*,name=requestTimes\",\n                                        \"solr:dom1=core,dom2=*,category=UPDATE,scope=*,name=requestTimes\"])\notel.instrument(beanSolrCoreRequestTimes, \"solr.request.time.average\",\n  \"The average time of a query, based on Solr's histogram configuration.\",\n  \"ms\",\n  [\"core\" : { mbean -> mbean.name().getKeyProperty(\"dom2\") },\n   \"type\" : { mbean -> mbean.name().getKeyProperty(\"category\") },\n",
                      "markdown": "`def beanSolrCoreRequestTimes = otel.mbeans([\"solr:dom1=core,dom2=*,category=QUERY,scope=*,name=requestTimes\",\n                                        \"solr:dom1=core,dom2=*,category=UPDATE,scope=*,name=requestTimes\"])\notel.instrument(beanSolrCoreRequestTimes, \"solr.request.time.average\",\n  \"The average time of a query, based on Solr's histogram configuration.\",\n  \"ms\",\n  [\"core\" : { mbean -> mbean.name().getKeyProperty(\"dom2\") },\n   \"type\" : { mbean -> mbean.name().getKeyProperty(\"category\") },\n`"
                    }
                  },
                  "sourceLanguage": "groovy"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/k8s-yaml-templates/cwagent-dev-kubernetes-monitoring-onprem/cwagent-serviceaccount.yaml"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 16,
                  "endLine": 1,
                  "endColumn": 25,
                  "snippet": {
                    "text": "# create cwagent service account and role binding\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n",
                    "rendered": {
                      "text": "# create cwagent service account and role binding\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n",
                      "markdown": "`# create cwagent service account and role binding\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/ISSUE_TEMPLATE/bug_report.md"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 14,
                  "endLine": 16,
                  "endColumn": 22,
                  "snippet": {
                    "text": "**Steps to reproduce**\nIf possible, provide a recipe for reproducing the error.\n\n**What did you expect to see?**\nA clear and concise description of what you expected to see.\n\n**What did you see instead?**\n",
                    "rendered": {
                      "text": "**Steps to reproduce**\nIf possible, provide a recipe for reproducing the error.\n\n**What did you expect to see?**\nA clear and concise description of what you expected to see.\n\n**What did you see instead?**\n",
                      "markdown": "`**Steps to reproduce**\nIf possible, provide a recipe for reproducing the error.\n\n**What did you expect to see?**\nA clear and concise description of what you expected to see.\n\n**What did you see instead?**\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/retryer/logthrottle.go"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 6,
                  "endLine": 78,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\taggregatedCnt := 0\n\tfor {\n\t\tselect {\n\t\tcase te = <-r.throttleChan:\n\t\t\tif time.Since(lastReportTime) >= throttleReportTimeout {\n\t\t\t\tr.Log.Infof(\"AWS API call throttling detected, further throttling messages may be suppressed for up to %v depending on the log level, error message: %v\", throttleReportTimeout, te)\n\t\t\t\tlastReportTime = time.Now()\n",
                    "rendered": {
                      "text": "\taggregatedCnt := 0\n\tfor {\n\t\tselect {\n\t\tcase te = <-r.throttleChan:\n\t\t\tif time.Since(lastReportTime) >= throttleReportTimeout {\n\t\t\t\tr.Log.Infof(\"AWS API call throttling detected, further throttling messages may be suppressed for up to %v depending on the log level, error message: %v\", throttleReportTimeout, te)\n\t\t\t\tlastReportTime = time.Now()\n",
                      "markdown": "`\taggregatedCnt := 0\n\tfor {\n\t\tselect {\n\t\tcase te = <-r.throttleChan:\n\t\t\tif time.Since(lastReportTime) >= throttleReportTimeout {\n\t\t\t\tr.Log.Infof(\"AWS API call throttling detected, further throttling messages may be suppressed for up to %v depending on the log level, error message: %v\", throttleReportTimeout, te)\n\t\t\t\tlastReportTime = time.Now()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/retryer/logthrottle.go"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 4,
                  "endLine": 74,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\tdefer ticker.Stop()\n\n\tvar lastReportTime time.Time\n\tvar te throttleEvent\n\taggregatedCnt := 0\n\tfor {\n\t\tselect {\n",
                    "rendered": {
                      "text": "\tdefer ticker.Stop()\n\n\tvar lastReportTime time.Time\n\tvar te throttleEvent\n\taggregatedCnt := 0\n\tfor {\n\t\tselect {\n",
                      "markdown": "`\tdefer ticker.Stop()\n\n\tvar lastReportTime time.Time\n\tvar te throttleEvent\n\taggregatedCnt := 0\n\tfor {\n\t\tselect {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/retryer/logthrottle.go"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 19,
                  "endLine": 57,
                  "snippet": {
                    "text": "\t\tif req.Operation != nil {\n\t\t\tte.Operation = req.Operation.Name\n\t\t}\n\t\tr.throttleChan <- te\n\t}\n\n\t// Fallback to SDK's built in retry rules\n\treturn r.DefaultRetryer.ShouldRetry(req)\n",
                    "rendered": {
                      "text": "\t\tif req.Operation != nil {\n\t\t\tte.Operation = req.Operation.Name\n\t\t}\n\t\tr.throttleChan <- te\n\t}\n\n\t// Fallback to SDK's built in retry rules\n\treturn r.DefaultRetryer.ShouldRetry(req)\n",
                      "markdown": "`\t\tif req.Operation != nil {\n\t\t\tte.Operation = req.Operation.Name\n\t\t}\n\t\tr.throttleChan <- te\n\t}\n\n\t// Fallback to SDK's built in retry rules\n\treturn r.DefaultRetryer.ShouldRetry(req)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/retryer/logthrottle.go"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 1,
                  "endLine": 52,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nfunc (r *LogThrottleRetryer) ShouldRetry(req *request.Request) bool {\n\tif req.IsErrorThrottle() {\n\t\tte := throttleEvent{Err: req.Error}\n\t\tif req.Operation != nil {\n\t\t\tte.Operation = req.Operation.Name\n\t\t}\n",
                    "rendered": {
                      "text": "\nfunc (r *LogThrottleRetryer) ShouldRetry(req *request.Request) bool {\n\tif req.IsErrorThrottle() {\n\t\tte := throttleEvent{Err: req.Error}\n\t\tif req.Operation != nil {\n\t\t\tte.Operation = req.Operation.Name\n\t\t}\n",
                      "markdown": "`\nfunc (r *LogThrottleRetryer) ShouldRetry(req *request.Request) bool {\n\tif req.IsErrorThrottle() {\n\t\tte := throttleEvent{Err: req.Error}\n\t\tif req.Operation != nil {\n\t\t\tte.Operation = req.Operation.Name\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/retryer/logthrottle.go"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 35,
                  "endLine": 99,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\t\t\tif aggregatedCnt > 0 {\n\t\t\t\tr.Log.Infof(\"AWS API call has been throttled %v times in the past %v, last throttle error message: %v\", aggregatedCnt, time.Since(lastReportTime), te)\n\t\t\t}\n\t\t\tr.Log.Debugf(\"LogThrottleRetryer watch throttle events goroutine exiting\")\n\t\t\treturn\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\t\t\tif aggregatedCnt > 0 {\n\t\t\t\tr.Log.Infof(\"AWS API call has been throttled %v times in the past %v, last throttle error message: %v\", aggregatedCnt, time.Since(lastReportTime), te)\n\t\t\t}\n\t\t\tr.Log.Debugf(\"LogThrottleRetryer watch throttle events goroutine exiting\")\n\t\t\treturn\n\t\t}\n\t}\n",
                      "markdown": "`\t\t\tif aggregatedCnt > 0 {\n\t\t\t\tr.Log.Infof(\"AWS API call has been throttled %v times in the past %v, last throttle error message: %v\", aggregatedCnt, time.Since(lastReportTime), te)\n\t\t\t}\n\t\t\tr.Log.Debugf(\"LogThrottleRetryer watch throttle events goroutine exiting\")\n\t\t\treturn\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/retryer/imdsretryer.go"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 10,
                  "endLine": 51,
                  "endColumn": 23,
                  "snippet": {
                    "text": "}\n\nfunc GetDefaultRetryNumber() int {\n\timdsRetryEnv := os.Getenv(envconfig.IMDS_NUMBER_RETRY)\n\timdsRetry, err := strconv.Atoi(imdsRetryEnv)\n\tif err == nil && imdsRetry >= 0 {\n\t\treturn imdsRetry\n",
                    "rendered": {
                      "text": "}\n\nfunc GetDefaultRetryNumber() int {\n\timdsRetryEnv := os.Getenv(envconfig.IMDS_NUMBER_RETRY)\n\timdsRetry, err := strconv.Atoi(imdsRetryEnv)\n\tif err == nil && imdsRetry >= 0 {\n\t\treturn imdsRetry\n",
                      "markdown": "`}\n\nfunc GetDefaultRetryNumber() int {\n\timdsRetryEnv := os.Getenv(envconfig.IMDS_NUMBER_RETRY)\n\timdsRetry, err := strconv.Atoi(imdsRetryEnv)\n\tif err == nil && imdsRetry >= 0 {\n\t\treturn imdsRetry\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/retryer/imdsretryer.go"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 37,
                  "endLine": 28,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n// NewIMDSRetryer allows us to retry imds errors\n// otel component layer retries should come from aws config settings\n// translator layer should come from env vars see GetDefaultRetryNumber()\nfunc NewIMDSRetryer(imdsRetries int) IMDSRetryer {\n\tfmt.Printf(\"I! imds retry client will retry %d times\", imdsRetries)\n\treturn IMDSRetryer{\n",
                    "rendered": {
                      "text": "\n// NewIMDSRetryer allows us to retry imds errors\n// otel component layer retries should come from aws config settings\n// translator layer should come from env vars see GetDefaultRetryNumber()\nfunc NewIMDSRetryer(imdsRetries int) IMDSRetryer {\n\tfmt.Printf(\"I! imds retry client will retry %d times\", imdsRetries)\n\treturn IMDSRetryer{\n",
                      "markdown": "`\n// NewIMDSRetryer allows us to retry imds errors\n// otel component layer retries should come from aws config settings\n// translator layer should come from env vars see GetDefaultRetryNumber()\nfunc NewIMDSRetryer(imdsRetries int) IMDSRetryer {\n\tfmt.Printf(\"I! imds retry client will retry %d times\", imdsRetries)\n\treturn IMDSRetryer{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/retryer/logthrottle_test.go"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 51,
                  "endLine": 65,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\tdefer tearDown()\n\n\tconst throttleDebugLine = \"AWS API call throttled: Operation: Test, Error: RequestLimitExceeded: Test AWS Error\"\n\tconst watchGoroutineExitLine = \"LogThrottleRetryer watch throttle events goroutine exiting\"\n\tconst throttleSummaryLinePrefix = \"AWS API call has been throttled\"\n\tconst throttleBatchSize = 100\n\tconst totalThrottleCnt = throttleBatchSize * 2 // Test total 2 batches\n",
                    "rendered": {
                      "text": "\tdefer tearDown()\n\n\tconst throttleDebugLine = \"AWS API call throttled: Operation: Test, Error: RequestLimitExceeded: Test AWS Error\"\n\tconst watchGoroutineExitLine = \"LogThrottleRetryer watch throttle events goroutine exiting\"\n\tconst throttleSummaryLinePrefix = \"AWS API call has been throttled\"\n\tconst throttleBatchSize = 100\n\tconst totalThrottleCnt = throttleBatchSize * 2 // Test total 2 batches\n",
                      "markdown": "`\tdefer tearDown()\n\n\tconst throttleDebugLine = \"AWS API call throttled: Operation: Test, Error: RequestLimitExceeded: Test AWS Error\"\n\tconst watchGoroutineExitLine = \"LogThrottleRetryer watch throttle events goroutine exiting\"\n\tconst throttleSummaryLinePrefix = \"AWS API call has been throttled\"\n\tconst throttleBatchSize = 100\n\tconst totalThrottleCnt = throttleBatchSize * 2 // Test total 2 batches\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/k8sCommon/kubeletutil/kubeletclient_test.go"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 12,
                  "endLine": 184,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\nfunc (m *MockHttpRoundTripper) RoundTrip(req *http.Request) (*http.Response, error) {\n\targs := m.Called()\n\treturn args.Get(0).(*http.Response), nil\n}\n\n// Test\n",
                    "rendered": {
                      "text": "\nfunc (m *MockHttpRoundTripper) RoundTrip(req *http.Request) (*http.Response, error) {\n\targs := m.Called()\n\treturn args.Get(0).(*http.Response), nil\n}\n\n// Test\n",
                      "markdown": "`\nfunc (m *MockHttpRoundTripper) RoundTrip(req *http.Request) (*http.Response, error) {\n\targs := m.Called()\n\treturn args.Get(0).(*http.Response), nil\n}\n\n// Test\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/k8sCommon/k8sclient/obj_store.go"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 26,
                  "endLine": 52,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n\tvar toCacheObj interface{}\n\tif toCacheObj, err = s.transformFunc(obj); err != nil {\n\t\tlog.Printf(\"W! Failed to update obj %v in the cached store.\", obj)\n\t\treturn err\n\t}\n\n",
                    "rendered": {
                      "text": "\n\tvar toCacheObj interface{}\n\tif toCacheObj, err = s.transformFunc(obj); err != nil {\n\t\tlog.Printf(\"W! Failed to update obj %v in the cached store.\", obj)\n\t\treturn err\n\t}\n\n",
                      "markdown": "`\n\tvar toCacheObj interface{}\n\tif toCacheObj, err = s.transformFunc(obj); err != nil {\n\t\tlog.Printf(\"W! Failed to update obj %v in the cached store.\", obj)\n\t\treturn err\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/k8sCommon/k8sclient/obj_store.go"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 23,
                  "endLine": 46,
                  "endColumn": 29,
                  "snippet": {
                    "text": "func (s *ObjStore) Add(obj interface{}) error {\n\to, err := meta.Accessor(obj)\n\tif err != nil {\n\t\tlog.Printf(\"W! Cannot find the metadata for %v.\", obj)\n\t\treturn err\n\t}\n\n",
                    "rendered": {
                      "text": "func (s *ObjStore) Add(obj interface{}) error {\n\to, err := meta.Accessor(obj)\n\tif err != nil {\n\t\tlog.Printf(\"W! Cannot find the metadata for %v.\", obj)\n\t\treturn err\n\t}\n\n",
                      "markdown": "`func (s *ObjStore) Add(obj interface{}) error {\n\to, err := meta.Accessor(obj)\n\tif err != nil {\n\t\tlog.Printf(\"W! Cannot find the metadata for %v.\", obj)\n\t\treturn err\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 3465,
                  "startColumn": 3,
                  "endLine": 3465,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this file, You can obtain\none at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular file, then\nYou may include the notice in a location (such as a LICENSE file in a relevant\n",
                    "rendered": {
                      "text": "\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this file, You can obtain\none at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular file, then\nYou may include the notice in a location (such as a LICENSE file in a relevant\n",
                      "markdown": "`\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this file, You can obtain\none at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular file, then\nYou may include the notice in a location (such as a LICENSE file in a relevant\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 3320,
                  "startColumn": 26,
                  "endLine": 3320,
                  "endColumn": 30,
                  "snippet": {
                    "text": "      Covered Software is not Incompatible With Secondary Licenses, this\n      License permits You to additionally distribute such Covered Software\n      under the terms of such Secondary License(s), so that the recipient of\n      the Larger Work may, at their option, further distribute the Covered\n      Software under the terms of either this License or such Secondary\n      License(s).\n\n",
                    "rendered": {
                      "text": "      Covered Software is not Incompatible With Secondary Licenses, this\n      License permits You to additionally distribute such Covered Software\n      under the terms of such Secondary License(s), so that the recipient of\n      the Larger Work may, at their option, further distribute the Covered\n      Software under the terms of either this License or such Secondary\n      License(s).\n\n",
                      "markdown": "`      Covered Software is not Incompatible With Secondary Licenses, this\n      License permits You to additionally distribute such Covered Software\n      under the terms of such Secondary License(s), so that the recipient of\n      the Larger Work may, at their option, further distribute the Covered\n      Software under the terms of either this License or such Secondary\n      License(s).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 3303,
                  "startColumn": 53,
                  "endLine": 3303,
                  "endColumn": 57,
                  "snippet": {
                    "text": "         (a) such Covered Software must also be made available in Source Code\n         Form, as described in Section 3.1, and You must inform recipients of\n         the Executable Form how they can obtain a copy of such Source Code\n         Form by reasonable means in a timely manner, at a charge no more than\n         the cost of distribution to the recipient; and\n\n         (b) You may distribute such Executable Form under the terms of this\n",
                    "rendered": {
                      "text": "         (a) such Covered Software must also be made available in Source Code\n         Form, as described in Section 3.1, and You must inform recipients of\n         the Executable Form how they can obtain a copy of such Source Code\n         Form by reasonable means in a timely manner, at a charge no more than\n         the cost of distribution to the recipient; and\n\n         (b) You may distribute such Executable Form under the terms of this\n",
                      "markdown": "`         (a) such Covered Software must also be made available in Source Code\n         Form, as described in Section 3.1, and You must inform recipients of\n         the Executable Form how they can obtain a copy of such Source Code\n         Form by reasonable means in a timely manner, at a charge no more than\n         the cost of distribution to the recipient; and\n\n         (b) You may distribute such Executable Form under the terms of this\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 3208,
                  "startColumn": 57,
                  "endLine": 3208,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\n      1.14. \"You\" (or \"Your\") means an individual or a legal entity exercising\n      rights under this License. For legal entities, \"You\" includes any entity\n      that controls, is controlled by, or is under common control with You. For\n      purposes of this definition, \"control\" means (a) the power, direct or\n      indirect, to cause the direction or management of such entity, whether by\n      contract or otherwise, or (b) ownership of more than fifty percent (50%)\n",
                    "rendered": {
                      "text": "\n      1.14. \"You\" (or \"Your\") means an individual or a legal entity exercising\n      rights under this License. For legal entities, \"You\" includes any entity\n      that controls, is controlled by, or is under common control with You. For\n      purposes of this definition, \"control\" means (a) the power, direct or\n      indirect, to cause the direction or management of such entity, whether by\n      contract or otherwise, or (b) ownership of more than fifty percent (50%)\n",
                      "markdown": "`\n      1.14. \"You\" (or \"Your\") means an individual or a legal entity exercising\n      rights under this License. For legal entities, \"You\" includes any entity\n      that controls, is controlled by, or is under common control with You. For\n      purposes of this definition, \"control\" means (a) the power, direct or\n      indirect, to cause the direction or management of such entity, whether by\n      contract or otherwise, or (b) ownership of more than fifty percent (50%)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 3180,
                  "startColumn": 23,
                  "endLine": 3180,
                  "endColumn": 27,
                  "snippet": {
                    "text": "      1.8. \"License\" means this document.\n\n      1.9. \"Licensable\" means having the right to grant, to the maximum extent\n      possible, whether at the time of the initial grant or subsequently, any\n      and all of the rights conveyed by this License.\n\n      1.10. \"Modifications\" means any of the following:\n",
                    "rendered": {
                      "text": "      1.8. \"License\" means this document.\n\n      1.9. \"Licensable\" means having the right to grant, to the maximum extent\n      possible, whether at the time of the initial grant or subsequently, any\n      and all of the rights conveyed by this License.\n\n      1.10. \"Modifications\" means any of the following:\n",
                      "markdown": "`      1.8. \"License\" means this document.\n\n      1.9. \"Licensable\" means having the right to grant, to the maximum extent\n      possible, whether at the time of the initial grant or subsequently, any\n      and all of the rights conveyed by this License.\n\n      1.10. \"Modifications\" means any of the following:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 3133,
                  "startColumn": 3,
                  "endLine": 3133,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this project, you can obtain\none at http://mozilla.org/MPL/2.0/.\n\n    * Package github.com/hashicorp/go-cleanhttp's source code may be found at:\n      https://src-tarball.s3-us-west-2.amazonaws.com/github_hashicorp.tar\n",
                    "rendered": {
                      "text": "\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this project, you can obtain\none at http://mozilla.org/MPL/2.0/.\n\n    * Package github.com/hashicorp/go-cleanhttp's source code may be found at:\n      https://src-tarball.s3-us-west-2.amazonaws.com/github_hashicorp.tar\n",
                      "markdown": "`\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this project, you can obtain\none at http://mozilla.org/MPL/2.0/.\n\n    * Package github.com/hashicorp/go-cleanhttp's source code may be found at:\n      https://src-tarball.s3-us-west-2.amazonaws.com/github_hashicorp.tar\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 3126,
                  "startColumn": 3,
                  "endLine": 3126,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this project, you can obtain\none at http://mozilla.org/MPL/2.0/.\n** github.com/hashicorp/serf; version v0.9.4 --\nhttps://github.com/hashicorp/serf\nCopyright © 2013 HashiCorp, Inc.\n",
                    "rendered": {
                      "text": "\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this project, you can obtain\none at http://mozilla.org/MPL/2.0/.\n** github.com/hashicorp/serf; version v0.9.4 --\nhttps://github.com/hashicorp/serf\nCopyright © 2013 HashiCorp, Inc.\n",
                      "markdown": "`\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this project, you can obtain\none at http://mozilla.org/MPL/2.0/.\n** github.com/hashicorp/serf; version v0.9.4 --\nhttps://github.com/hashicorp/serf\nCopyright © 2013 HashiCorp, Inc.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 3099,
                  "startColumn": 3,
                  "endLine": 3099,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this file, You can obtain\none at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular file, then\nYou may include the notice in a location (such as a LICENSE file in a relevant\n",
                    "rendered": {
                      "text": "\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this file, You can obtain\none at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular file, then\nYou may include the notice in a location (such as a LICENSE file in a relevant\n",
                      "markdown": "`\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this file, You can obtain\none at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular file, then\nYou may include the notice in a location (such as a LICENSE file in a relevant\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 2954,
                  "startColumn": 26,
                  "endLine": 2954,
                  "endColumn": 30,
                  "snippet": {
                    "text": "      Covered Software is not Incompatible With Secondary Licenses, this\n      License permits You to additionally distribute such Covered Software\n      under the terms of such Secondary License(s), so that the recipient of\n      the Larger Work may, at their option, further distribute the Covered\n      Software under the terms of either this License or such Secondary\n      License(s).\n\n",
                    "rendered": {
                      "text": "      Covered Software is not Incompatible With Secondary Licenses, this\n      License permits You to additionally distribute such Covered Software\n      under the terms of such Secondary License(s), so that the recipient of\n      the Larger Work may, at their option, further distribute the Covered\n      Software under the terms of either this License or such Secondary\n      License(s).\n\n",
                      "markdown": "`      Covered Software is not Incompatible With Secondary Licenses, this\n      License permits You to additionally distribute such Covered Software\n      under the terms of such Secondary License(s), so that the recipient of\n      the Larger Work may, at their option, further distribute the Covered\n      Software under the terms of either this License or such Secondary\n      License(s).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 2937,
                  "startColumn": 53,
                  "endLine": 2937,
                  "endColumn": 57,
                  "snippet": {
                    "text": "         (a) such Covered Software must also be made available in Source Code\n         Form, as described in Section 3.1, and You must inform recipients of\n         the Executable Form how they can obtain a copy of such Source Code\n         Form by reasonable means in a timely manner, at a charge no more than\n         the cost of distribution to the recipient; and\n\n         (b) You may distribute such Executable Form under the terms of this\n",
                    "rendered": {
                      "text": "         (a) such Covered Software must also be made available in Source Code\n         Form, as described in Section 3.1, and You must inform recipients of\n         the Executable Form how they can obtain a copy of such Source Code\n         Form by reasonable means in a timely manner, at a charge no more than\n         the cost of distribution to the recipient; and\n\n         (b) You may distribute such Executable Form under the terms of this\n",
                      "markdown": "`         (a) such Covered Software must also be made available in Source Code\n         Form, as described in Section 3.1, and You must inform recipients of\n         the Executable Form how they can obtain a copy of such Source Code\n         Form by reasonable means in a timely manner, at a charge no more than\n         the cost of distribution to the recipient; and\n\n         (b) You may distribute such Executable Form under the terms of this\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 2842,
                  "startColumn": 57,
                  "endLine": 2842,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\n      1.14. \"You\" (or \"Your\") means an individual or a legal entity exercising\n      rights under this License. For legal entities, \"You\" includes any entity\n      that controls, is controlled by, or is under common control with You. For\n      purposes of this definition, \"control\" means (a) the power, direct or\n      indirect, to cause the direction or management of such entity, whether by\n      contract or otherwise, or (b) ownership of more than fifty percent (50%)\n",
                    "rendered": {
                      "text": "\n      1.14. \"You\" (or \"Your\") means an individual or a legal entity exercising\n      rights under this License. For legal entities, \"You\" includes any entity\n      that controls, is controlled by, or is under common control with You. For\n      purposes of this definition, \"control\" means (a) the power, direct or\n      indirect, to cause the direction or management of such entity, whether by\n      contract or otherwise, or (b) ownership of more than fifty percent (50%)\n",
                      "markdown": "`\n      1.14. \"You\" (or \"Your\") means an individual or a legal entity exercising\n      rights under this License. For legal entities, \"You\" includes any entity\n      that controls, is controlled by, or is under common control with You. For\n      purposes of this definition, \"control\" means (a) the power, direct or\n      indirect, to cause the direction or management of such entity, whether by\n      contract or otherwise, or (b) ownership of more than fifty percent (50%)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 2814,
                  "startColumn": 23,
                  "endLine": 2814,
                  "endColumn": 27,
                  "snippet": {
                    "text": "      1.8. \"License\" means this document.\n\n      1.9. \"Licensable\" means having the right to grant, to the maximum extent\n      possible, whether at the time of the initial grant or subsequently, any\n      and all of the rights conveyed by this License.\n\n      1.10. \"Modifications\" means any of the following:\n",
                    "rendered": {
                      "text": "      1.8. \"License\" means this document.\n\n      1.9. \"Licensable\" means having the right to grant, to the maximum extent\n      possible, whether at the time of the initial grant or subsequently, any\n      and all of the rights conveyed by this License.\n\n      1.10. \"Modifications\" means any of the following:\n",
                      "markdown": "`      1.8. \"License\" means this document.\n\n      1.9. \"Licensable\" means having the right to grant, to the maximum extent\n      possible, whether at the time of the initial grant or subsequently, any\n      and all of the rights conveyed by this License.\n\n      1.10. \"Modifications\" means any of the following:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 2776,
                  "startColumn": 3,
                  "endLine": 2776,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this project, you can obtain\none at http://mozilla.org/MPL/2.0/.\n\nMozilla Public License Version 2.0\n\n",
                    "rendered": {
                      "text": "\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this project, you can obtain\none at http://mozilla.org/MPL/2.0/.\n\nMozilla Public License Version 2.0\n\n",
                      "markdown": "`\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this project, you can obtain\none at http://mozilla.org/MPL/2.0/.\n\nMozilla Public License Version 2.0\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 2769,
                  "startColumn": 3,
                  "endLine": 2769,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this project, you can obtain\none at http://mozilla.org/MPL/2.0/.\n** github.com/hashicorp/memberlist; version v0.1.4 --\nhttps://github.com/hashicorp/memberlist\nCopyright © 2014-2018 HashiCorp, Inc.\n",
                    "rendered": {
                      "text": "\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this project, you can obtain\none at http://mozilla.org/MPL/2.0/.\n** github.com/hashicorp/memberlist; version v0.1.4 --\nhttps://github.com/hashicorp/memberlist\nCopyright © 2014-2018 HashiCorp, Inc.\n",
                      "markdown": "`\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this project, you can obtain\none at http://mozilla.org/MPL/2.0/.\n** github.com/hashicorp/memberlist; version v0.1.4 --\nhttps://github.com/hashicorp/memberlist\nCopyright © 2014-2018 HashiCorp, Inc.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 2762,
                  "startColumn": 3,
                  "endLine": 2762,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this project, you can obtain\none at http://mozilla.org/MPL/2.0/.\n** github.com/hashicorp/go-immutable-radix; version v1.2.0 --\nhttps://github.com/hashicorp/go-immutable-radix\nCopyright © 2014-2018 HashiCorp, Inc.\n",
                    "rendered": {
                      "text": "\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this project, you can obtain\none at http://mozilla.org/MPL/2.0/.\n** github.com/hashicorp/go-immutable-radix; version v1.2.0 --\nhttps://github.com/hashicorp/go-immutable-radix\nCopyright © 2014-2018 HashiCorp, Inc.\n",
                      "markdown": "`\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this project, you can obtain\none at http://mozilla.org/MPL/2.0/.\n** github.com/hashicorp/go-immutable-radix; version v1.2.0 --\nhttps://github.com/hashicorp/go-immutable-radix\nCopyright © 2014-2018 HashiCorp, Inc.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 2284,
                  "startColumn": 40,
                  "endLine": 2284,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\nThe MIT License\n\nCopyright (c) 2014 Benedikt Lang <github at benediktlang.de>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\n",
                    "rendered": {
                      "text": "\nThe MIT License\n\nCopyright (c) 2014 Benedikt Lang <github at benediktlang.de>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\n",
                      "markdown": "`\nThe MIT License\n\nCopyright (c) 2014 Benedikt Lang <github at benediktlang.de>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 2280,
                  "startColumn": 40,
                  "endLine": 2280,
                  "endColumn": 44,
                  "snippet": {
                    "text": "------\n\n** github.com/blang/semver; version v3.1.0 -- https://github.com/blang/semver\nCopyright (c) 2014 Benedikt Lang <github at benediktlang.de>\n\nThe MIT License\n\n",
                    "rendered": {
                      "text": "------\n\n** github.com/blang/semver; version v3.1.0 -- https://github.com/blang/semver\nCopyright (c) 2014 Benedikt Lang <github at benediktlang.de>\n\nThe MIT License\n\n",
                      "markdown": "`------\n\n** github.com/blang/semver; version v3.1.0 -- https://github.com/blang/semver\nCopyright (c) 2014 Benedikt Lang <github at benediktlang.de>\n\nThe MIT License\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 1160,
                  "startColumn": 42,
                  "endLine": 1160,
                  "endColumn": 46,
                  "snippet": {
                    "text": "https://github.com/godbus/dbus\nCopyright (c) 2013, Georg Reinke (<guelfey at gmail dot com>), Google\n\nCopyright (c) 2013, Georg Reinke (<guelfey at gmail dot com>), Google\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\n",
                    "rendered": {
                      "text": "https://github.com/godbus/dbus\nCopyright (c) 2013, Georg Reinke (<guelfey at gmail dot com>), Google\n\nCopyright (c) 2013, Georg Reinke (<guelfey at gmail dot com>), Google\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\n",
                      "markdown": "`https://github.com/godbus/dbus\nCopyright (c) 2013, Georg Reinke (<guelfey at gmail dot com>), Google\n\nCopyright (c) 2013, Georg Reinke (<guelfey at gmail dot com>), Google\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 1158,
                  "startColumn": 42,
                  "endLine": 1158,
                  "endColumn": 46,
                  "snippet": {
                    "text": "All rights reserved.\n** github.com/godbus/dbus; version v0.0.0-20190422162347-ade71ed3457e --\nhttps://github.com/godbus/dbus\nCopyright (c) 2013, Georg Reinke (<guelfey at gmail dot com>), Google\n\nCopyright (c) 2013, Georg Reinke (<guelfey at gmail dot com>), Google\nAll rights reserved.\n",
                    "rendered": {
                      "text": "All rights reserved.\n** github.com/godbus/dbus; version v0.0.0-20190422162347-ade71ed3457e --\nhttps://github.com/godbus/dbus\nCopyright (c) 2013, Georg Reinke (<guelfey at gmail dot com>), Google\n\nCopyright (c) 2013, Georg Reinke (<guelfey at gmail dot com>), Google\nAll rights reserved.\n",
                      "markdown": "`All rights reserved.\n** github.com/godbus/dbus; version v0.0.0-20190422162347-ade71ed3457e --\nhttps://github.com/godbus/dbus\nCopyright (c) 2013, Georg Reinke (<guelfey at gmail dot com>), Google\n\nCopyright (c) 2013, Georg Reinke (<guelfey at gmail dot com>), Google\nAll rights reserved.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 1154,
                  "startColumn": 42,
                  "endLine": 1154,
                  "endColumn": 46,
                  "snippet": {
                    "text": "------\n\n** github.com/godbus/dbus; version v3.1.0 -- https://github.com/godbus/dbus\nCopyright (c) 2013, Georg Reinke (<guelfey at gmail dot com>), Google\nAll rights reserved.\n** github.com/godbus/dbus; version v0.0.0-20190422162347-ade71ed3457e --\nhttps://github.com/godbus/dbus\n",
                    "rendered": {
                      "text": "------\n\n** github.com/godbus/dbus; version v3.1.0 -- https://github.com/godbus/dbus\nCopyright (c) 2013, Georg Reinke (<guelfey at gmail dot com>), Google\nAll rights reserved.\n** github.com/godbus/dbus; version v0.0.0-20190422162347-ade71ed3457e --\nhttps://github.com/godbus/dbus\n",
                      "markdown": "`------\n\n** github.com/godbus/dbus; version v3.1.0 -- https://github.com/godbus/dbus\nCopyright (c) 2013, Georg Reinke (<guelfey at gmail dot com>), Google\nAll rights reserved.\n** github.com/godbus/dbus; version v0.0.0-20190422162347-ade71ed3457e --\nhttps://github.com/godbus/dbus\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 965,
                  "startColumn": 40,
                  "endLine": 966,
                  "snippet": {
                    "text": "\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 912,
                  "startColumn": 44,
                  "endLine": 913,
                  "snippet": {
                    "text": "    Common libraries shared by Prometheus Go components.\n    Copyright 2015 The Prometheus Authors\n\n    This product includes software developed at\n    SoundCloud Ltd. (http://soundcloud.com/).\n* For github.com/prometheus/procfs see also this required NOTICE:\n    Copyright 2014-2015 The Prometheus Authors\n* For github.com/prometheus/prometheus see also this required NOTICE:\n",
                    "rendered": {
                      "text": "    Common libraries shared by Prometheus Go components.\n    Copyright 2015 The Prometheus Authors\n\n    This product includes software developed at\n    SoundCloud Ltd. (http://soundcloud.com/).\n* For github.com/prometheus/procfs see also this required NOTICE:\n    Copyright 2014-2015 The Prometheus Authors\n* For github.com/prometheus/prometheus see also this required NOTICE:\n",
                      "markdown": "`    Common libraries shared by Prometheus Go components.\n    Copyright 2015 The Prometheus Authors\n\n    This product includes software developed at\n    SoundCloud Ltd. (http://soundcloud.com/).\n* For github.com/prometheus/procfs see also this required NOTICE:\n    Copyright 2014-2015 The Prometheus Authors\n* For github.com/prometheus/prometheus see also this required NOTICE:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 884,
                  "startColumn": 44,
                  "endLine": 885,
                  "snippet": {
                    "text": "    Prometheus instrumentation library for Go applications\n    Copyright 2012-2015 The Prometheus Authors\n\n    This product includes software developed at\n    SoundCloud Ltd. (http://soundcloud.com/).\n\n\n    The following components are included in this product:\n",
                    "rendered": {
                      "text": "    Prometheus instrumentation library for Go applications\n    Copyright 2012-2015 The Prometheus Authors\n\n    This product includes software developed at\n    SoundCloud Ltd. (http://soundcloud.com/).\n\n\n    The following components are included in this product:\n",
                      "markdown": "`    Prometheus instrumentation library for Go applications\n    Copyright 2012-2015 The Prometheus Authors\n\n    This product includes software developed at\n    SoundCloud Ltd. (http://soundcloud.com/).\n\n\n    The following components are included in this product:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 863,
                  "startColumn": 44,
                  "endLine": 864,
                  "snippet": {
                    "text": "    Prometheus Alertmanager\n    Copyright 2013-2015 The Prometheus Authors\n\n    This product includes software developed at\n    SoundCloud Ltd. (http://soundcloud.com/).\n\n\n    The following components are included in this product:\n",
                    "rendered": {
                      "text": "    Prometheus Alertmanager\n    Copyright 2013-2015 The Prometheus Authors\n\n    This product includes software developed at\n    SoundCloud Ltd. (http://soundcloud.com/).\n\n\n    The following components are included in this product:\n",
                      "markdown": "`    Prometheus Alertmanager\n    Copyright 2013-2015 The Prometheus Authors\n\n    This product includes software developed at\n    SoundCloud Ltd. (http://soundcloud.com/).\n\n\n    The following components are included in this product:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 819,
                  "startColumn": 44,
                  "endLine": 819,
                  "endColumn": 48,
                  "snippet": {
                    "text": "* For github.com/opencontainers/runc see also this required NOTICE:\n    Copyright 2012-2015 Docker, Inc.\n\n    This product includes software developed at Docker, Inc.\n    (http://www.docker.com).\n\n    The following is courtesy of our legal counsel:\n",
                    "rendered": {
                      "text": "* For github.com/opencontainers/runc see also this required NOTICE:\n    Copyright 2012-2015 Docker, Inc.\n\n    This product includes software developed at Docker, Inc.\n    (http://www.docker.com).\n\n    The following is courtesy of our legal counsel:\n",
                      "markdown": "`* For github.com/opencontainers/runc see also this required NOTICE:\n    Copyright 2012-2015 Docker, Inc.\n\n    This product includes software developed at Docker, Inc.\n    (http://www.docker.com).\n\n    The following is courtesy of our legal counsel:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 777,
                  "startColumn": 40,
                  "endLine": 778,
                  "snippet": {
                    "text": "\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 714,
                  "startColumn": 44,
                  "endLine": 714,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    Docker\n    Copyright 2012-2017 Docker, Inc.\n\n    This product includes software developed at Docker, Inc.\n    (https://www.docker.com).\n\n    This product contains software (https://github.com/creack/pty) developed\n",
                    "rendered": {
                      "text": "    Docker\n    Copyright 2012-2017 Docker, Inc.\n\n    This product includes software developed at Docker, Inc.\n    (https://www.docker.com).\n\n    This product contains software (https://github.com/creack/pty) developed\n",
                      "markdown": "`    Docker\n    Copyright 2012-2017 Docker, Inc.\n\n    This product includes software developed at Docker, Inc.\n    (https://www.docker.com).\n\n    This product contains software (https://github.com/creack/pty) developed\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 693,
                  "startColumn": 44,
                  "endLine": 693,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    Docker\n    Copyright 2012-2017 Docker, Inc.\n\n    This product includes software developed at Docker, Inc.\n    (https://www.docker.com).\n\n    This product contains software (https://github.com/creack/pty) developed\n",
                    "rendered": {
                      "text": "    Docker\n    Copyright 2012-2017 Docker, Inc.\n\n    This product includes software developed at Docker, Inc.\n    (https://www.docker.com).\n\n    This product contains software (https://github.com/creack/pty) developed\n",
                      "markdown": "`    Docker\n    Copyright 2012-2017 Docker, Inc.\n\n    This product includes software developed at Docker, Inc.\n    (https://www.docker.com).\n\n    This product contains software (https://github.com/creack/pty) developed\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 675,
                  "startColumn": 44,
                  "endLine": 675,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    CoreOS Project\n    Copyright 2018 CoreOS, Inc\n\n    This product includes software developed at CoreOS, Inc.\n    (http://www.coreos.com/).\n* For github.com/coreos/go-systemd see also this required NOTICE:\n    Copyright 2018 CoreOS, Inc\n",
                    "rendered": {
                      "text": "    CoreOS Project\n    Copyright 2018 CoreOS, Inc\n\n    This product includes software developed at CoreOS, Inc.\n    (http://www.coreos.com/).\n* For github.com/coreos/go-systemd see also this required NOTICE:\n    Copyright 2018 CoreOS, Inc\n",
                      "markdown": "`    CoreOS Project\n    Copyright 2018 CoreOS, Inc\n\n    This product includes software developed at CoreOS, Inc.\n    (http://www.coreos.com/).\n* For github.com/coreos/go-systemd see also this required NOTICE:\n    Copyright 2018 CoreOS, Inc\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 643,
                  "startColumn": 44,
                  "endLine": 644,
                  "snippet": {
                    "text": "    Microsoft Azure-SDK-for-Go\n    Copyright 2014-2017 Microsoft\n\n    This product includes software developed at\n    the Microsoft Corporation (https://www.microsoft.com).\n* For github.com/Azure/azure-sdk-for-go see also this required NOTICE:\n    Copyright 2020 Microsoft Corporation\n* For github.com/Azure/go-autorest/autorest see also this required NOTICE:\n",
                    "rendered": {
                      "text": "    Microsoft Azure-SDK-for-Go\n    Copyright 2014-2017 Microsoft\n\n    This product includes software developed at\n    the Microsoft Corporation (https://www.microsoft.com).\n* For github.com/Azure/azure-sdk-for-go see also this required NOTICE:\n    Copyright 2020 Microsoft Corporation\n* For github.com/Azure/go-autorest/autorest see also this required NOTICE:\n",
                      "markdown": "`    Microsoft Azure-SDK-for-Go\n    Copyright 2014-2017 Microsoft\n\n    This product includes software developed at\n    the Microsoft Corporation (https://www.microsoft.com).\n* For github.com/Azure/azure-sdk-for-go see also this required NOTICE:\n    Copyright 2020 Microsoft Corporation\n* For github.com/Azure/go-autorest/autorest see also this required NOTICE:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 598,
                  "startColumn": 36,
                  "endLine": 599,
                  "snippet": {
                    "text": "\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 521,
                  "startColumn": 26,
                  "endLine": 521,
                  "endColumn": 30,
                  "snippet": {
                    "text": "      distribution, then any Derivative Works that You distribute must include\n      a readable copy of the attribution notices contained within such NOTICE\n      file, excluding those notices that do not pertain to any part of the\n      Derivative Works, in at least one of the following places: within a\n      NOTICE text file distributed as part of the Derivative Works; within the\n      Source form or documentation, if provided along with the Derivative\n      Works; or, within a display generated by the Derivative Works, if and\n",
                    "rendered": {
                      "text": "      distribution, then any Derivative Works that You distribute must include\n      a readable copy of the attribution notices contained within such NOTICE\n      file, excluding those notices that do not pertain to any part of the\n      Derivative Works, in at least one of the following places: within a\n      NOTICE text file distributed as part of the Derivative Works; within the\n      Source form or documentation, if provided along with the Derivative\n      Works; or, within a display generated by the Derivative Works, if and\n",
                      "markdown": "`      distribution, then any Derivative Works that You distribute must include\n      a readable copy of the attribution notices contained within such NOTICE\n      file, excluding those notices that do not pertain to any part of the\n      Derivative Works, in at least one of the following places: within a\n      NOTICE text file distributed as part of the Derivative Works; within the\n      Source form or documentation, if provided along with the Derivative\n      Works; or, within a display generated by the Derivative Works, if and\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 470,
                  "startColumn": 32,
                  "endLine": 470,
                  "endColumn": 41,
                  "snippet": {
                    "text": "      purposes of this definition, \"submitted\" means any form of electronic,\n      verbal, or written communication sent to the Licensor or its\n      representatives, including but not limited to communication on electronic\n      mailing lists, source code control systems, and issue tracking systems\n      that are managed by, or on behalf of, the Licensor for the purpose of\n      discussing and improving the Work, but excluding communication that is\n      conspicuously marked or otherwise designated in writing by the copyright\n",
                    "rendered": {
                      "text": "      purposes of this definition, \"submitted\" means any form of electronic,\n      verbal, or written communication sent to the Licensor or its\n      representatives, including but not limited to communication on electronic\n      mailing lists, source code control systems, and issue tracking systems\n      that are managed by, or on behalf of, the Licensor for the purpose of\n      discussing and improving the Work, but excluding communication that is\n      conspicuously marked or otherwise designated in writing by the copyright\n",
                      "markdown": "`      purposes of this definition, \"submitted\" means any form of electronic,\n      verbal, or written communication sent to the Licensor or its\n      representatives, including but not limited to communication on electronic\n      mailing lists, source code control systems, and issue tracking systems\n      that are managed by, or on behalf of, the Licensor for the purpose of\n      discussing and improving the Work, but excluding communication that is\n      conspicuously marked or otherwise designated in writing by the copyright\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 430,
                  "startColumn": 67,
                  "endLine": 431,
                  "snippet": {
                    "text": "      copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all other\n      entities that control, are controlled by, or are under common control\n      with that entity. For the purposes of this definition, \"control\" means\n      (i) the power, direct or indirect, to cause the direction or management\n      of such entity, whether by contract or otherwise, or (ii) ownership of\n      fifty percent (50%) or more of the outstanding shares, or (iii)\n",
                    "rendered": {
                      "text": "      copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all other\n      entities that control, are controlled by, or are under common control\n      with that entity. For the purposes of this definition, \"control\" means\n      (i) the power, direct or indirect, to cause the direction or management\n      of such entity, whether by contract or otherwise, or (ii) ownership of\n      fifty percent (50%) or more of the outstanding shares, or (iii)\n",
                      "markdown": "`      copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all other\n      entities that control, are controlled by, or are under common control\n      with that entity. For the purposes of this definition, \"control\" means\n      (i) the power, direct or indirect, to cause the direction or management\n      of such entity, whether by contract or otherwise, or (ii) ownership of\n      fifty percent (50%) or more of the outstanding shares, or (iii)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 57,
                  "endLine": 127,
                  "endColumn": 61,
                  "snippet": {
                    "text": "          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n",
                    "rendered": {
                      "text": "          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n",
                      "markdown": "`          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 60,
                  "endLine": 73,
                  "endColumn": 69,
                  "snippet": {
                    "text": "      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n",
                    "rendered": {
                      "text": "      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n",
                      "markdown": "`      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 5,
                  "endLine": 34,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n",
                    "rendered": {
                      "text": "\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n",
                      "markdown": "`\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 39,
                  "endLine": 9,
                  "snippet": {
                    "text": "\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 3369,
                  "startColumn": 11,
                  "endLine": 3369,
                  "endColumn": 17,
                  "snippet": {
                    "text": "      come back into compliance. Moreover, Your grants from a particular\n      Contributor are reinstated on an ongoing basis if such Contributor\n      notifies You of the non-compliance by some reasonable means, this is the\n      first time You have received notice of non-compliance with this License\n      from such Contributor, and You become compliant prior to 30 days after\n      Your receipt of the notice.\n\n",
                    "rendered": {
                      "text": "      come back into compliance. Moreover, Your grants from a particular\n      Contributor are reinstated on an ongoing basis if such Contributor\n      notifies You of the non-compliance by some reasonable means, this is the\n      first time You have received notice of non-compliance with this License\n      from such Contributor, and You become compliant prior to 30 days after\n      Your receipt of the notice.\n\n",
                      "markdown": "`      come back into compliance. Moreover, Your grants from a particular\n      Contributor are reinstated on an ongoing basis if such Contributor\n      notifies You of the non-compliance by some reasonable means, this is the\n      first time You have received notice of non-compliance with this License\n      from such Contributor, and You become compliant prior to 30 days after\n      Your receipt of the notice.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 3256,
                  "startColumn": 63,
                  "endLine": 3256,
                  "endColumn": 72,
                  "snippet": {
                    "text": "         (c) under Patent Claims infringed by Covered Software in the absence\n         of its Contributions.\n\n      This License does not grant any rights in the trademarks, service marks,\n      or logos of any Contributor (except as may be necessary to comply with\n      the notice requirements in Section 3.4).\n\n",
                    "rendered": {
                      "text": "         (c) under Patent Claims infringed by Covered Software in the absence\n         of its Contributions.\n\n      This License does not grant any rights in the trademarks, service marks,\n      or logos of any Contributor (except as may be necessary to comply with\n      the notice requirements in Section 3.4).\n\n",
                      "markdown": "`         (c) under Patent Claims infringed by Covered Software in the absence\n         of its Contributions.\n\n      This License does not grant any rights in the trademarks, service marks,\n      or logos of any Contributor (except as may be necessary to comply with\n      the notice requirements in Section 3.4).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 3180,
                  "startColumn": 30,
                  "endLine": 3180,
                  "endColumn": 36,
                  "snippet": {
                    "text": "      1.8. \"License\" means this document.\n\n      1.9. \"Licensable\" means having the right to grant, to the maximum extent\n      possible, whether at the time of the initial grant or subsequently, any\n      and all of the rights conveyed by this License.\n\n      1.10. \"Modifications\" means any of the following:\n",
                    "rendered": {
                      "text": "      1.8. \"License\" means this document.\n\n      1.9. \"Licensable\" means having the right to grant, to the maximum extent\n      possible, whether at the time of the initial grant or subsequently, any\n      and all of the rights conveyed by this License.\n\n      1.10. \"Modifications\" means any of the following:\n",
                      "markdown": "`      1.8. \"License\" means this document.\n\n      1.9. \"Licensable\" means having the right to grant, to the maximum extent\n      possible, whether at the time of the initial grant or subsequently, any\n      and all of the rights conveyed by this License.\n\n      1.10. \"Modifications\" means any of the following:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 3003,
                  "startColumn": 11,
                  "endLine": 3003,
                  "endColumn": 17,
                  "snippet": {
                    "text": "      come back into compliance. Moreover, Your grants from a particular\n      Contributor are reinstated on an ongoing basis if such Contributor\n      notifies You of the non-compliance by some reasonable means, this is the\n      first time You have received notice of non-compliance with this License\n      from such Contributor, and You become compliant prior to 30 days after\n      Your receipt of the notice.\n\n",
                    "rendered": {
                      "text": "      come back into compliance. Moreover, Your grants from a particular\n      Contributor are reinstated on an ongoing basis if such Contributor\n      notifies You of the non-compliance by some reasonable means, this is the\n      first time You have received notice of non-compliance with this License\n      from such Contributor, and You become compliant prior to 30 days after\n      Your receipt of the notice.\n\n",
                      "markdown": "`      come back into compliance. Moreover, Your grants from a particular\n      Contributor are reinstated on an ongoing basis if such Contributor\n      notifies You of the non-compliance by some reasonable means, this is the\n      first time You have received notice of non-compliance with this License\n      from such Contributor, and You become compliant prior to 30 days after\n      Your receipt of the notice.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 2890,
                  "startColumn": 63,
                  "endLine": 2890,
                  "endColumn": 72,
                  "snippet": {
                    "text": "         (c) under Patent Claims infringed by Covered Software in the absence\n         of its Contributions.\n\n      This License does not grant any rights in the trademarks, service marks,\n      or logos of any Contributor (except as may be necessary to comply with\n      the notice requirements in Section 3.4).\n\n",
                    "rendered": {
                      "text": "         (c) under Patent Claims infringed by Covered Software in the absence\n         of its Contributions.\n\n      This License does not grant any rights in the trademarks, service marks,\n      or logos of any Contributor (except as may be necessary to comply with\n      the notice requirements in Section 3.4).\n\n",
                      "markdown": "`         (c) under Patent Claims infringed by Covered Software in the absence\n         of its Contributions.\n\n      This License does not grant any rights in the trademarks, service marks,\n      or logos of any Contributor (except as may be necessary to comply with\n      the notice requirements in Section 3.4).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 2814,
                  "startColumn": 30,
                  "endLine": 2814,
                  "endColumn": 36,
                  "snippet": {
                    "text": "      1.8. \"License\" means this document.\n\n      1.9. \"Licensable\" means having the right to grant, to the maximum extent\n      possible, whether at the time of the initial grant or subsequently, any\n      and all of the rights conveyed by this License.\n\n      1.10. \"Modifications\" means any of the following:\n",
                    "rendered": {
                      "text": "      1.8. \"License\" means this document.\n\n      1.9. \"Licensable\" means having the right to grant, to the maximum extent\n      possible, whether at the time of the initial grant or subsequently, any\n      and all of the rights conveyed by this License.\n\n      1.10. \"Modifications\" means any of the following:\n",
                      "markdown": "`      1.8. \"License\" means this document.\n\n      1.9. \"Licensable\" means having the right to grant, to the maximum extent\n      possible, whether at the time of the initial grant or subsequently, any\n      and all of the rights conveyed by this License.\n\n      1.10. \"Modifications\" means any of the following:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 1750,
                  "startColumn": 23,
                  "endLine": 1750,
                  "endColumn": 31,
                  "snippet": {
                    "text": "** github.com/cyphar/filepath-securejoin; version\nv0.2.2-0.20170720062807-ae69057f2299 --\nhttps://github.com/cyphar/filepath-securejoin\nCopyright (C) 2014-2015 Docker Inc & Go Authors. All rights reserved\nCopyright (C) 2017 SUSE LLC. All rights reserved.\n** github.com/edsrzf/mmap-go; version v1.0.0 --\nhttps://github.com/edsrzf/mmap-go\n",
                    "rendered": {
                      "text": "** github.com/cyphar/filepath-securejoin; version\nv0.2.2-0.20170720062807-ae69057f2299 --\nhttps://github.com/cyphar/filepath-securejoin\nCopyright (C) 2014-2015 Docker Inc & Go Authors. All rights reserved\nCopyright (C) 2017 SUSE LLC. All rights reserved.\n** github.com/edsrzf/mmap-go; version v1.0.0 --\nhttps://github.com/edsrzf/mmap-go\n",
                      "markdown": "`** github.com/cyphar/filepath-securejoin; version\nv0.2.2-0.20170720062807-ae69057f2299 --\nhttps://github.com/cyphar/filepath-securejoin\nCopyright (C) 2014-2015 Docker Inc & Go Authors. All rights reserved\nCopyright (C) 2017 SUSE LLC. All rights reserved.\n** github.com/edsrzf/mmap-go; version v1.0.0 --\nhttps://github.com/edsrzf/mmap-go\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 1529,
                  "startColumn": 23,
                  "endLine": 1529,
                  "endColumn": 31,
                  "snippet": {
                    "text": "Copyright (C) 2014-2015 Docker Inc & Go Authors. All rights reserved.\nCopyright (C) 2017 SUSE LLC. All rights reserved.\n\nCopyright (C) 2014-2015 Docker Inc & Go Authors. All rights reserved.\nCopyright (C) 2017 SUSE LLC. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\n",
                    "rendered": {
                      "text": "Copyright (C) 2014-2015 Docker Inc & Go Authors. All rights reserved.\nCopyright (C) 2017 SUSE LLC. All rights reserved.\n\nCopyright (C) 2014-2015 Docker Inc & Go Authors. All rights reserved.\nCopyright (C) 2017 SUSE LLC. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\n",
                      "markdown": "`Copyright (C) 2014-2015 Docker Inc & Go Authors. All rights reserved.\nCopyright (C) 2017 SUSE LLC. All rights reserved.\n\nCopyright (C) 2014-2015 Docker Inc & Go Authors. All rights reserved.\nCopyright (C) 2017 SUSE LLC. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 1526,
                  "startColumn": 23,
                  "endLine": 1526,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n** github.com/cyphar/filepath-securejoin; version v0.2.1-1-gae69057 --\nhttps://github.com/cyphar/filepath-securejoin/\nCopyright (C) 2014-2015 Docker Inc & Go Authors. All rights reserved.\nCopyright (C) 2017 SUSE LLC. All rights reserved.\n\nCopyright (C) 2014-2015 Docker Inc & Go Authors. All rights reserved.\n",
                    "rendered": {
                      "text": "\n** github.com/cyphar/filepath-securejoin; version v0.2.1-1-gae69057 --\nhttps://github.com/cyphar/filepath-securejoin/\nCopyright (C) 2014-2015 Docker Inc & Go Authors. All rights reserved.\nCopyright (C) 2017 SUSE LLC. All rights reserved.\n\nCopyright (C) 2014-2015 Docker Inc & Go Authors. All rights reserved.\n",
                      "markdown": "`\n** github.com/cyphar/filepath-securejoin; version v0.2.1-1-gae69057 --\nhttps://github.com/cyphar/filepath-securejoin/\nCopyright (C) 2014-2015 Docker Inc & Go Authors. All rights reserved.\nCopyright (C) 2017 SUSE LLC. All rights reserved.\n\nCopyright (C) 2014-2015 Docker Inc & Go Authors. All rights reserved.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 825,
                  "startColumn": 23,
                  "endLine": 825,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    The following is courtesy of our legal counsel:\n\n\n    Use and transfer of Docker may be subject to certain restrictions by the\n    United States and other governments.\n    It is your responsibility to ensure that your use and/or transfer does not\n    violate applicable laws.\n",
                    "rendered": {
                      "text": "    The following is courtesy of our legal counsel:\n\n\n    Use and transfer of Docker may be subject to certain restrictions by the\n    United States and other governments.\n    It is your responsibility to ensure that your use and/or transfer does not\n    violate applicable laws.\n",
                      "markdown": "`    The following is courtesy of our legal counsel:\n\n\n    Use and transfer of Docker may be subject to certain restrictions by the\n    United States and other governments.\n    It is your responsibility to ensure that your use and/or transfer does not\n    violate applicable laws.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 723,
                  "startColumn": 23,
                  "endLine": 723,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    The following is courtesy of our legal counsel:\n\n\n    Use and transfer of Docker may be subject to certain restrictions by the\n    United States and other governments.\n    It is your responsibility to ensure that your use and/or transfer does not\n    violate applicable laws.\n",
                    "rendered": {
                      "text": "    The following is courtesy of our legal counsel:\n\n\n    Use and transfer of Docker may be subject to certain restrictions by the\n    United States and other governments.\n    It is your responsibility to ensure that your use and/or transfer does not\n    violate applicable laws.\n",
                      "markdown": "`    The following is courtesy of our legal counsel:\n\n\n    Use and transfer of Docker may be subject to certain restrictions by the\n    United States and other governments.\n    It is your responsibility to ensure that your use and/or transfer does not\n    violate applicable laws.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 711,
                  "startColumn": 3,
                  "endLine": 712,
                  "snippet": {
                    "text": "\n    See also https://www.apache.org/dev/crypto.html and/or seek legal counsel.\n* For github.com/docker/docker see also this required NOTICE:\n    Docker\n    Copyright 2012-2017 Docker, Inc.\n\n    This product includes software developed at Docker, Inc.\n    (https://www.docker.com).\n",
                    "rendered": {
                      "text": "\n    See also https://www.apache.org/dev/crypto.html and/or seek legal counsel.\n* For github.com/docker/docker see also this required NOTICE:\n    Docker\n    Copyright 2012-2017 Docker, Inc.\n\n    This product includes software developed at Docker, Inc.\n    (https://www.docker.com).\n",
                      "markdown": "`\n    See also https://www.apache.org/dev/crypto.html and/or seek legal counsel.\n* For github.com/docker/docker see also this required NOTICE:\n    Docker\n    Copyright 2012-2017 Docker, Inc.\n\n    This product includes software developed at Docker, Inc.\n    (https://www.docker.com).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 702,
                  "startColumn": 23,
                  "endLine": 702,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    The following is courtesy of our legal counsel:\n\n\n    Use and transfer of Docker may be subject to certain restrictions by the\n    United States and other governments.\n    It is your responsibility to ensure that your use and/or transfer does not\n    violate applicable laws.\n",
                    "rendered": {
                      "text": "    The following is courtesy of our legal counsel:\n\n\n    Use and transfer of Docker may be subject to certain restrictions by the\n    United States and other governments.\n    It is your responsibility to ensure that your use and/or transfer does not\n    violate applicable laws.\n",
                      "markdown": "`    The following is courtesy of our legal counsel:\n\n\n    Use and transfer of Docker may be subject to certain restrictions by the\n    United States and other governments.\n    It is your responsibility to ensure that your use and/or transfer does not\n    violate applicable laws.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 690,
                  "startColumn": 3,
                  "endLine": 691,
                  "snippet": {
                    "text": "* For github.com/docker/distribution/ see also this required NOTICE:\n    Copyright The docker Authors\n* For github.com/docker/docker see also this required NOTICE:\n    Docker\n    Copyright 2012-2017 Docker, Inc.\n\n    This product includes software developed at Docker, Inc.\n    (https://www.docker.com).\n",
                    "rendered": {
                      "text": "* For github.com/docker/distribution/ see also this required NOTICE:\n    Copyright The docker Authors\n* For github.com/docker/docker see also this required NOTICE:\n    Docker\n    Copyright 2012-2017 Docker, Inc.\n\n    This product includes software developed at Docker, Inc.\n    (https://www.docker.com).\n",
                      "markdown": "`* For github.com/docker/distribution/ see also this required NOTICE:\n    Copyright The docker Authors\n* For github.com/docker/docker see also this required NOTICE:\n    Docker\n    Copyright 2012-2017 Docker, Inc.\n\n    This product includes software developed at Docker, Inc.\n    (https://www.docker.com).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 688,
                  "startColumn": 17,
                  "endLine": 688,
                  "endColumn": 25,
                  "snippet": {
                    "text": "* For github.com/docker/distribution see also this required NOTICE:\n    Copyright The docker/distribution authors\n* For github.com/docker/distribution/ see also this required NOTICE:\n    Copyright The docker Authors\n* For github.com/docker/docker see also this required NOTICE:\n    Docker\n    Copyright 2012-2017 Docker, Inc.\n",
                    "rendered": {
                      "text": "* For github.com/docker/distribution see also this required NOTICE:\n    Copyright The docker/distribution authors\n* For github.com/docker/distribution/ see also this required NOTICE:\n    Copyright The docker Authors\n* For github.com/docker/docker see also this required NOTICE:\n    Docker\n    Copyright 2012-2017 Docker, Inc.\n",
                      "markdown": "`* For github.com/docker/distribution see also this required NOTICE:\n    Copyright The docker/distribution authors\n* For github.com/docker/distribution/ see also this required NOTICE:\n    Copyright The docker Authors\n* For github.com/docker/docker see also this required NOTICE:\n    Docker\n    Copyright 2012-2017 Docker, Inc.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 547,
                  "startColumn": 21,
                  "endLine": 547,
                  "endColumn": 30,
                  "snippet": {
                    "text": "   you may have executed with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor, except\n   as required for reasonable and customary use in describing the origin of the\n   Work and reproducing the content of the NOTICE file.\n\n",
                    "rendered": {
                      "text": "   you may have executed with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor, except\n   as required for reasonable and customary use in describing the origin of the\n   Work and reproducing the content of the NOTICE file.\n\n",
                      "markdown": "`   you may have executed with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor, except\n   as required for reasonable and customary use in describing the origin of the\n   Work and reproducing the content of the NOTICE file.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/THIRD-PARTY"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 24,
                  "endLine": 156,
                  "endColumn": 33,
                  "snippet": {
                    "text": "      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n",
                    "rendered": {
                      "text": "      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n",
                      "markdown": "`      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/windows_event_log/wineventlog/wineventlog.go"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 142,
                  "endLine": 283,
                  "endColumn": 146,
                  "snippet": {
                    "text": "\t\tcase <-w.done:\n\t\t\terr := w.saveState(offset)\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"E! [wineventlog] Error happened during final file state saving of logfile %s to file state folder %s, duplicate log maybe sent at next start: %v\", w.logGroupName, w.stateFilePath, err)\n\t\t\t}\n\t\t\tbreak\n\t\t}\n",
                    "rendered": {
                      "text": "\t\tcase <-w.done:\n\t\t\terr := w.saveState(offset)\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"E! [wineventlog] Error happened during final file state saving of logfile %s to file state folder %s, duplicate log maybe sent at next start: %v\", w.logGroupName, w.stateFilePath, err)\n\t\t\t}\n\t\t\tbreak\n\t\t}\n",
                      "markdown": "`\t\tcase <-w.done:\n\t\t\terr := w.saveState(offset)\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"E! [wineventlog] Error happened during final file state saving of logfile %s to file state folder %s, duplicate log maybe sent at next start: %v\", w.logGroupName, w.stateFilePath, err)\n\t\t\t}\n\t\t\tbreak\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/windows_event_log/wineventlog/utils_test.go"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 17,
                  "endLine": 76,
                  "endColumn": 531,
                  "snippet": {
                    "text": "\n\tbytes, _ := UTF16ToUTF8BytesForWindowsEventBuffer(data, uint32(bufferUsed))\n\tstr := string(bytes[:])\n\tassert.Equal(t, \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", str)\n\tassert.Equal(t, bufferUsed, len(str))\n}\n\n",
                    "rendered": {
                      "text": "\n\tbytes, _ := UTF16ToUTF8BytesForWindowsEventBuffer(data, uint32(bufferUsed))\n\tstr := string(bytes[:])\n\tassert.Equal(t, \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", str)\n\tassert.Equal(t, bufferUsed, len(str))\n}\n\n",
                      "markdown": "`\n\tbytes, _ := UTF16ToUTF8BytesForWindowsEventBuffer(data, uint32(bufferUsed))\n\tstr := string(bytes[:])\n\tassert.Equal(t, \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", str)\n\tassert.Equal(t, bufferUsed, len(str))\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/windows_event_log/wineventlog/utils_test.go"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 18,
                  "endLine": 55,
                  "endColumn": 5766,
                  "snippet": {
                    "text": "e='TransmittedServices'>-</Data><Data Name='LmPackageName'>-</Data><Data Name='KeyLength'>0</Data><Data Name='ProcessId'>0x0</Data><Data Name='ProcessName'>-</Data><Data Name='IpAddress'>146.56.6.166</Data><Data Name='IpPort'>0</Data></EventData></Event>\", str)\n\n\t// odd bytes test\n\toriginalHexStr = \"3c004500760065006e007400200078006d006c006e0073003d00270068007400740070003a002f002f0073006300680065006d00610073002e006d006900630072006f0073006f00660074002e0063006f006d002f00770069006e002f0032003000300034002f00300038002f006500760065006e00740073002f006500760065006e00740027003e003c00530079007300740065006d003e003c00500072006f007600690064006500720020004e0061006d0065003d0027004d006900630072006f0073006f00660074002d00570069006e0064006f00770073002d00530065006300750072006900740079002d004100750064006900740069006e0067002700200047007500690064003d0027007b00350034003800340039003600320035002d0035003400370038002d0034003900390034002d0041003500420041002d003300450033004200300033003200380043003300300044007d0027002f003e003c004500760065006e007400490044003e0034003600320035003c002f004500760065006e007400490044003e003c00560065007200730069006f006e003e0030003c002f00560065007200730069006f006e003e003c004c006500760065006c003e0030003c002f004c006500760065006c003e003c005400610073006b003e00310032003500340034003c002f005400610073006b003e003c004f00700063006f00640065003e0030003c002f004f00700063006f00640065003e003c004b006500790077006f007200640073003e003000780038003000310030003000300030003000300030003000300030003000300030003c002f004b006500790077006f007200640073003e003c00540069006d00650043007200650061007400650064002000530079007300740065006d00540069006d0065003d00270032003000310039002d00300035002d00300035005400320033003a00310032003a00330037002e003300340039003400370036003100300030005a0027002f003e003c004500760065006e0074005200650063006f0072006400490044003e003600390034003600370034003c002f004500760065006e0074005200650063006f0072006400490044003e003c0043006f007200720065006c006100740069006f006e00200041006300740069007600690074007900490044003d0027007b00320035003200320035004600410031002d0044004100420039002d0030003000300031002d0041003600350046002d003200320032003500420039004400410044003400300031007d0027002f003e003c0045007800650063007500740069006f006e002000500072006f006300650073007300490044003d00270038003000340027002000540068007200650061006400490044003d002700310030003800300027002f003e003c004300680061006e006e0065006c003e00530065006300750072006900740079003c002f004300680061006e006e0065006c003e003c0043006f006d00700075007400650072003e0045004300320041004d0041005a002d0035004a00360049004600530046003c002f0043006f006d00700075007400650072003e003c00530065006300750072006900740079002f003e003c002f00530079007300740065006d003e003c004500760065006e00740044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a00650063007400550073006500720053006900640027003e0053002d0031002d0030002d0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a0065006300740055007300650072004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a0065006300740044006f006d00610069006e004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a006500630074004c006f0067006f006e004900640027003e003000780030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700540061007200670065007400550073006500720053006900640027003e0053002d0031002d0030002d0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270054006100720067006500740055007300650072004e0061006d00650027003e00410044004d0049004e004900530054005200410054004f0052003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270054006100720067006500740044006f006d00610069006e004e0061006d00650027003e003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270053007400610074007500730027003e0030007800630030003000300030003000360064003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004600610069006c0075007200650052006500610073006f006e0027003e002500250032003300310033003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270053007500620053007400610074007500730027003e0030007800630030003000300030003000360061003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006f0067006f006e00540079007000650027003e0033003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006f0067006f006e00500072006f0063006500730073004e0061006d00650027003e004e0074004c006d0053007300700020003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700410075007400680065006e007400690063006100740069006f006e005000610063006b006100670065004e0061006d00650027003e004e0054004c004d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270057006f0072006b00730074006100740069006f006e004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005400720061006e0073006d00690074007400650064005300650072007600690063006500730027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006d005000610063006b006100670065004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004b00650079004c0065006e0067007400680027003e0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700500072006f0063006500730073004900640027003e003000780030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700500072006f0063006500730073004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270049007000410064006400720065007300730027003e003100340036002e00350036002e0036002e003100360036003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004900700050006f007200740027003e0030003c002f0044006100740061003e003c002f004500760065006e00740044006100740061003e003c002f004500760065006e0074003e00000000\"\n\tdata, _ = hex.DecodeString(originalHexStr)\n\tbufferUsed = len(data) / 2\n\tbytes, _ = UTF16ToUTF8BytesForWindowsEventBuffer(data, uint32(bufferUsed))\n\tstr = string(bytes[:])\n\tassert.Equal(t, \"<Event xmlns='http://schemas.microsoft.com/win/2004/08/events/event'><System><Provider Name='Microsoft-Window",
                    "rendered": {
                      "text": "e='TransmittedServices'>-</Data><Data Name='LmPackageName'>-</Data><Data Name='KeyLength'>0</Data><Data Name='ProcessId'>0x0</Data><Data Name='ProcessName'>-</Data><Data Name='IpAddress'>146.56.6.166</Data><Data Name='IpPort'>0</Data></EventData></Event>\", str)\n\n\t// odd bytes test\n\toriginalHexStr = \"3c004500760065006e007400200078006d006c006e0073003d00270068007400740070003a002f002f0073006300680065006d00610073002e006d006900630072006f0073006f00660074002e0063006f006d002f00770069006e002f0032003000300034002f00300038002f006500760065006e00740073002f006500760065006e00740027003e003c00530079007300740065006d003e003c00500072006f007600690064006500720020004e0061006d0065003d0027004d006900630072006f0073006f00660074002d00570069006e0064006f00770073002d00530065006300750072006900740079002d004100750064006900740069006e0067002700200047007500690064003d0027007b00350034003800340039003600320035002d0035003400370038002d0034003900390034002d0041003500420041002d003300450033004200300033003200380043003300300044007d0027002f003e003c004500760065006e007400490044003e0034003600320035003c002f004500760065006e007400490044003e003c00560065007200730069006f006e003e0030003c002f00560065007200730069006f006e003e003c004c006500760065006c003e0030003c002f004c006500760065006c003e003c005400610073006b003e00310032003500340034003c002f005400610073006b003e003c004f00700063006f00640065003e0030003c002f004f00700063006f00640065003e003c004b006500790077006f007200640073003e003000780038003000310030003000300030003000300030003000300030003000300030003c002f004b006500790077006f007200640073003e003c00540069006d00650043007200650061007400650064002000530079007300740065006d00540069006d0065003d00270032003000310039002d00300035002d00300035005400320033003a00310032003a00330037002e003300340039003400370036003100300030005a0027002f003e003c004500760065006e0074005200650063006f0072006400490044003e003600390034003600370034003c002f004500760065006e0074005200650063006f0072006400490044003e003c0043006f007200720065006c006100740069006f006e00200041006300740069007600690074007900490044003d0027007b00320035003200320035004600410031002d0044004100420039002d0030003000300031002d0041003600350046002d003200320032003500420039004400410044003400300031007d0027002f003e003c0045007800650063007500740069006f006e002000500072006f006300650073007300490044003d00270038003000340027002000540068007200650061006400490044003d002700310030003800300027002f003e003c004300680061006e006e0065006c003e00530065006300750072006900740079003c002f004300680061006e006e0065006c003e003c0043006f006d00700075007400650072003e0045004300320041004d0041005a002d0035004a00360049004600530046003c002f0043006f006d00700075007400650072003e003c00530065006300750072006900740079002f003e003c002f00530079007300740065006d003e003c004500760065006e00740044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a00650063007400550073006500720053006900640027003e0053002d0031002d0030002d0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a0065006300740055007300650072004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a0065006300740044006f006d00610069006e004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a006500630074004c006f0067006f006e004900640027003e003000780030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700540061007200670065007400550073006500720053006900640027003e0053002d0031002d0030002d0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270054006100720067006500740055007300650072004e0061006d00650027003e00410044004d0049004e004900530054005200410054004f0052003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270054006100720067006500740044006f006d00610069006e004e0061006d00650027003e003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270053007400610074007500730027003e0030007800630030003000300030003000360064003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004600610069006c0075007200650052006500610073006f006e0027003e002500250032003300310033003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270053007500620053007400610074007500730027003e0030007800630030003000300030003000360061003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006f0067006f006e00540079007000650027003e0033003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006f0067006f006e00500072006f0063006500730073004e0061006d00650027003e004e0074004c006d0053007300700020003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700410075007400680065006e007400690063006100740069006f006e005000610063006b006100670065004e0061006d00650027003e004e0054004c004d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270057006f0072006b00730074006100740069006f006e004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005400720061006e0073006d00690074007400650064005300650072007600690063006500730027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006d005000610063006b006100670065004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004b00650079004c0065006e0067007400680027003e0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700500072006f0063006500730073004900640027003e003000780030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700500072006f0063006500730073004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270049007000410064006400720065007300730027003e003100340036002e00350036002e0036002e003100360036003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004900700050006f007200740027003e0030003c002f0044006100740061003e003c002f004500760065006e00740044006100740061003e003c002f004500760065006e0074003e00000000\"\n\tdata, _ = hex.DecodeString(originalHexStr)\n\tbufferUsed = len(data) / 2\n\tbytes, _ = UTF16ToUTF8BytesForWindowsEventBuffer(data, uint32(bufferUsed))\n\tstr = string(bytes[:])\n\tassert.Equal(t, \"<Event xmlns='http://schemas.microsoft.com/win/2004/08/events/event'><System><Provider Name='Microsoft-Window",
                      "markdown": "`e='TransmittedServices'>-</Data><Data Name='LmPackageName'>-</Data><Data Name='KeyLength'>0</Data><Data Name='ProcessId'>0x0</Data><Data Name='ProcessName'>-</Data><Data Name='IpAddress'>146.56.6.166</Data><Data Name='IpPort'>0</Data></EventData></Event>\", str)\n\n\t// odd bytes test\n\toriginalHexStr = \"3c004500760065006e007400200078006d006c006e0073003d00270068007400740070003a002f002f0073006300680065006d00610073002e006d006900630072006f0073006f00660074002e0063006f006d002f00770069006e002f0032003000300034002f00300038002f006500760065006e00740073002f006500760065006e00740027003e003c00530079007300740065006d003e003c00500072006f007600690064006500720020004e0061006d0065003d0027004d006900630072006f0073006f00660074002d00570069006e0064006f00770073002d00530065006300750072006900740079002d004100750064006900740069006e0067002700200047007500690064003d0027007b00350034003800340039003600320035002d0035003400370038002d0034003900390034002d0041003500420041002d003300450033004200300033003200380043003300300044007d0027002f003e003c004500760065006e007400490044003e0034003600320035003c002f004500760065006e007400490044003e003c00560065007200730069006f006e003e0030003c002f00560065007200730069006f006e003e003c004c006500760065006c003e0030003c002f004c006500760065006c003e003c005400610073006b003e00310032003500340034003c002f005400610073006b003e003c004f00700063006f00640065003e0030003c002f004f00700063006f00640065003e003c004b006500790077006f007200640073003e003000780038003000310030003000300030003000300030003000300030003000300030003c002f004b006500790077006f007200640073003e003c00540069006d00650043007200650061007400650064002000530079007300740065006d00540069006d0065003d00270032003000310039002d00300035002d00300035005400320033003a00310032003a00330037002e003300340039003400370036003100300030005a0027002f003e003c004500760065006e0074005200650063006f0072006400490044003e003600390034003600370034003c002f004500760065006e0074005200650063006f0072006400490044003e003c0043006f007200720065006c006100740069006f006e00200041006300740069007600690074007900490044003d0027007b00320035003200320035004600410031002d0044004100420039002d0030003000300031002d0041003600350046002d003200320032003500420039004400410044003400300031007d0027002f003e003c0045007800650063007500740069006f006e002000500072006f006300650073007300490044003d00270038003000340027002000540068007200650061006400490044003d002700310030003800300027002f003e003c004300680061006e006e0065006c003e00530065006300750072006900740079003c002f004300680061006e006e0065006c003e003c0043006f006d00700075007400650072003e0045004300320041004d0041005a002d0035004a00360049004600530046003c002f0043006f006d00700075007400650072003e003c00530065006300750072006900740079002f003e003c002f00530079007300740065006d003e003c004500760065006e00740044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a00650063007400550073006500720053006900640027003e0053002d0031002d0030002d0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a0065006300740055007300650072004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a0065006300740044006f006d00610069006e004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a006500630074004c006f0067006f006e004900640027003e003000780030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700540061007200670065007400550073006500720053006900640027003e0053002d0031002d0030002d0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270054006100720067006500740055007300650072004e0061006d00650027003e00410044004d0049004e004900530054005200410054004f0052003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270054006100720067006500740044006f006d00610069006e004e0061006d00650027003e003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270053007400610074007500730027003e0030007800630030003000300030003000360064003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004600610069006c0075007200650052006500610073006f006e0027003e002500250032003300310033003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270053007500620053007400610074007500730027003e0030007800630030003000300030003000360061003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006f0067006f006e00540079007000650027003e0033003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006f0067006f006e00500072006f0063006500730073004e0061006d00650027003e004e0074004c006d0053007300700020003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700410075007400680065006e007400690063006100740069006f006e005000610063006b006100670065004e0061006d00650027003e004e0054004c004d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270057006f0072006b00730074006100740069006f006e004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005400720061006e0073006d00690074007400650064005300650072007600690063006500730027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006d005000610063006b006100670065004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004b00650079004c0065006e0067007400680027003e0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700500072006f0063006500730073004900640027003e003000780030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700500072006f0063006500730073004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270049007000410064006400720065007300730027003e003100340036002e00350036002e0036002e003100360036003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004900700050006f007200740027003e0030003c002f0044006100740061003e003c002f004500760065006e00740044006100740061003e003c002f004500760065006e0074003e00000000\"\n\tdata, _ = hex.DecodeString(originalHexStr)\n\tbufferUsed = len(data) / 2\n\tbytes, _ = UTF16ToUTF8BytesForWindowsEventBuffer(data, uint32(bufferUsed))\n\tstr = string(bytes[:])\n\tassert.Equal(t, \"<Event xmlns='http://schemas.microsoft.com/win/2004/08/events/event'><System><Provider Name='Microsoft-Window`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/windows_event_log/wineventlog/utils_test.go"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 19,
                  "endLine": 47,
                  "endColumn": 5765,
                  "snippet": {
                    "text": "func TestDecodingWithDifferentBufferUsedReturned(t *testing.T) {\n\t// one null test\n\tresetState()\n\toriginalHexStr := \"3c004500760065006e007400200078006d006c006e0073003d00270068007400740070003a002f002f0073006300680065006d00610073002e006d006900630072006f0073006f00660074002e0063006f006d002f00770069006e002f0032003000300034002f00300038002f006500760065006e00740073002f006500760065006e00740027003e003c00530079007300740065006d003e003c00500072006f007600690064006500720020004e0061006d0065003d0027004d006900630072006f0073006f00660074002d00570069006e0064006f00770073002d00530065006300750072006900740079002d004100750064006900740069006e0067002700200047007500690064003d0027007b00350034003800340039003600320035002d0035003400370038002d0034003900390034002d0041003500420041002d003300450033004200300033003200380043003300300044007d0027002f003e003c004500760065006e007400490044003e0034003600320035003c002f004500760065006e007400490044003e003c00560065007200730069006f006e003e0030003c002f00560065007200730069006f006e003e003c004c006500760065006c003e0030003c002f004c006500760065006c003e003c005400610073006b003e00310032003500340034003c002f005400610073006b003e003c004f00700063006f00640065003e0030003c002f004f00700063006f00640065003e003c004b006500790077006f007200640073003e003000780038003000310030003000300030003000300030003000300030003000300030003c002f004b006500790077006f007200640073003e003c00540069006d00650043007200650061007400650064002000530079007300740065006d00540069006d0065003d00270032003000310039002d00300035002d00300035005400320033003a00310032003a00330037002e003300340039003400370036003100300030005a0027002f003e003c004500760065006e0074005200650063006f0072006400490044003e003600390034003600370034003c002f004500760065006e0074005200650063006f0072006400490044003e003c0043006f007200720065006c006100740069006f006e00200041006300740069007600690074007900490044003d0027007b00320035003200320035004600410031002d0044004100420039002d0030003000300031002d0041003600350046002d003200320032003500420039004400410044003400300031007d0027002f003e003c0045007800650063007500740069006f006e002000500072006f006300650073007300490044003d00270038003000340027002000540068007200650061006400490044003d002700310030003800300027002f003e003c004300680061006e006e0065006c003e00530065006300750072006900740079003c002f004300680061006e006e0065006c003e003c0043006f006d00700075007400650072003e0045004300320041004d0041005a002d0035004a00360049004600530046003c002f0043006f006d00700075007400650072003e003c00530065006300750072006900740079002f003e003c002f00530079007300740065006d003e003c004500760065006e00740044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a00650063007400550073006500720053006900640027003e0053002d0031002d0030002d0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a0065006300740055007300650072004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a0065006300740044006f006d00610069006e004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a006500630074004c006f0067006f006e004900640027003e003000780030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700540061007200670065007400550073006500720053006900640027003e0053002d0031002d0030002d0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270054006100720067006500740055007300650072004e0061006d00650027003e00410044004d0049004e004900530054005200410054004f0052003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270054006100720067006500740044006f006d00610069006e004e0061006d00650027003e003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270053007400610074007500730027003e0030007800630030003000300030003000360064003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004600610069006c0075007200650052006500610073006f006e0027003e002500250032003300310033003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270053007500620053007400610074007500730027003e0030007800630030003000300030003000360061003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006f0067006f006e00540079007000650027003e0033003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006f0067006f006e00500072006f0063006500730073004e0061006d00650027003e004e0074004c006d0053007300700020003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700410075007400680065006e007400690063006100740069006f006e005000610063006b006100670065004e0061006d00650027003e004e0054004c004d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270057006f0072006b00730074006100740069006f006e004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005400720061006e0073006d00690074007400650064005300650072007600690063006500730027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006d005000610063006b006100670065004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004b00650079004c0065006e0067007400680027003e0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700500072006f0063006500730073004900640027003e003000780030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700500072006f0063006500730073004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270049007000410064006400720065007300730027003e003100340036002e00350036002e0036002e003100360036003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004900700050006f007200740027003e0030003c002f0044006100740061003e003c002f004500760065006e00740044006100740061003e003c002f004500760065006e0074003e000000\"\n\tdata, _ := hex.DecodeString(originalHexStr)\n\tbufferUsed := len(data) / 2\n\tbytes, _ := UTF16ToUTF8BytesForWindowsEventBuffer(data, uint32(bufferUsed))\n",
                    "rendered": {
                      "text": "func TestDecodingWithDifferentBufferUsedReturned(t *testing.T) {\n\t// one null test\n\tresetState()\n\toriginalHexStr := \"3c004500760065006e007400200078006d006c006e0073003d00270068007400740070003a002f002f0073006300680065006d00610073002e006d006900630072006f0073006f00660074002e0063006f006d002f00770069006e002f0032003000300034002f00300038002f006500760065006e00740073002f006500760065006e00740027003e003c00530079007300740065006d003e003c00500072006f007600690064006500720020004e0061006d0065003d0027004d006900630072006f0073006f00660074002d00570069006e0064006f00770073002d00530065006300750072006900740079002d004100750064006900740069006e0067002700200047007500690064003d0027007b00350034003800340039003600320035002d0035003400370038002d0034003900390034002d0041003500420041002d003300450033004200300033003200380043003300300044007d0027002f003e003c004500760065006e007400490044003e0034003600320035003c002f004500760065006e007400490044003e003c00560065007200730069006f006e003e0030003c002f00560065007200730069006f006e003e003c004c006500760065006c003e0030003c002f004c006500760065006c003e003c005400610073006b003e00310032003500340034003c002f005400610073006b003e003c004f00700063006f00640065003e0030003c002f004f00700063006f00640065003e003c004b006500790077006f007200640073003e003000780038003000310030003000300030003000300030003000300030003000300030003c002f004b006500790077006f007200640073003e003c00540069006d00650043007200650061007400650064002000530079007300740065006d00540069006d0065003d00270032003000310039002d00300035002d00300035005400320033003a00310032003a00330037002e003300340039003400370036003100300030005a0027002f003e003c004500760065006e0074005200650063006f0072006400490044003e003600390034003600370034003c002f004500760065006e0074005200650063006f0072006400490044003e003c0043006f007200720065006c006100740069006f006e00200041006300740069007600690074007900490044003d0027007b00320035003200320035004600410031002d0044004100420039002d0030003000300031002d0041003600350046002d003200320032003500420039004400410044003400300031007d0027002f003e003c0045007800650063007500740069006f006e002000500072006f006300650073007300490044003d00270038003000340027002000540068007200650061006400490044003d002700310030003800300027002f003e003c004300680061006e006e0065006c003e00530065006300750072006900740079003c002f004300680061006e006e0065006c003e003c0043006f006d00700075007400650072003e0045004300320041004d0041005a002d0035004a00360049004600530046003c002f0043006f006d00700075007400650072003e003c00530065006300750072006900740079002f003e003c002f00530079007300740065006d003e003c004500760065006e00740044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a00650063007400550073006500720053006900640027003e0053002d0031002d0030002d0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a0065006300740055007300650072004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a0065006300740044006f006d00610069006e004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a006500630074004c006f0067006f006e004900640027003e003000780030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700540061007200670065007400550073006500720053006900640027003e0053002d0031002d0030002d0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270054006100720067006500740055007300650072004e0061006d00650027003e00410044004d0049004e004900530054005200410054004f0052003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270054006100720067006500740044006f006d00610069006e004e0061006d00650027003e003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270053007400610074007500730027003e0030007800630030003000300030003000360064003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004600610069006c0075007200650052006500610073006f006e0027003e002500250032003300310033003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270053007500620053007400610074007500730027003e0030007800630030003000300030003000360061003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006f0067006f006e00540079007000650027003e0033003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006f0067006f006e00500072006f0063006500730073004e0061006d00650027003e004e0074004c006d0053007300700020003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700410075007400680065006e007400690063006100740069006f006e005000610063006b006100670065004e0061006d00650027003e004e0054004c004d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270057006f0072006b00730074006100740069006f006e004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005400720061006e0073006d00690074007400650064005300650072007600690063006500730027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006d005000610063006b006100670065004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004b00650079004c0065006e0067007400680027003e0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700500072006f0063006500730073004900640027003e003000780030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700500072006f0063006500730073004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270049007000410064006400720065007300730027003e003100340036002e00350036002e0036002e003100360036003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004900700050006f007200740027003e0030003c002f0044006100740061003e003c002f004500760065006e00740044006100740061003e003c002f004500760065006e0074003e000000\"\n\tdata, _ := hex.DecodeString(originalHexStr)\n\tbufferUsed := len(data) / 2\n\tbytes, _ := UTF16ToUTF8BytesForWindowsEventBuffer(data, uint32(bufferUsed))\n",
                      "markdown": "`func TestDecodingWithDifferentBufferUsedReturned(t *testing.T) {\n\t// one null test\n\tresetState()\n\toriginalHexStr := \"3c004500760065006e007400200078006d006c006e0073003d00270068007400740070003a002f002f0073006300680065006d00610073002e006d006900630072006f0073006f00660074002e0063006f006d002f00770069006e002f0032003000300034002f00300038002f006500760065006e00740073002f006500760065006e00740027003e003c00530079007300740065006d003e003c00500072006f007600690064006500720020004e0061006d0065003d0027004d006900630072006f0073006f00660074002d00570069006e0064006f00770073002d00530065006300750072006900740079002d004100750064006900740069006e0067002700200047007500690064003d0027007b00350034003800340039003600320035002d0035003400370038002d0034003900390034002d0041003500420041002d003300450033004200300033003200380043003300300044007d0027002f003e003c004500760065006e007400490044003e0034003600320035003c002f004500760065006e007400490044003e003c00560065007200730069006f006e003e0030003c002f00560065007200730069006f006e003e003c004c006500760065006c003e0030003c002f004c006500760065006c003e003c005400610073006b003e00310032003500340034003c002f005400610073006b003e003c004f00700063006f00640065003e0030003c002f004f00700063006f00640065003e003c004b006500790077006f007200640073003e003000780038003000310030003000300030003000300030003000300030003000300030003c002f004b006500790077006f007200640073003e003c00540069006d00650043007200650061007400650064002000530079007300740065006d00540069006d0065003d00270032003000310039002d00300035002d00300035005400320033003a00310032003a00330037002e003300340039003400370036003100300030005a0027002f003e003c004500760065006e0074005200650063006f0072006400490044003e003600390034003600370034003c002f004500760065006e0074005200650063006f0072006400490044003e003c0043006f007200720065006c006100740069006f006e00200041006300740069007600690074007900490044003d0027007b00320035003200320035004600410031002d0044004100420039002d0030003000300031002d0041003600350046002d003200320032003500420039004400410044003400300031007d0027002f003e003c0045007800650063007500740069006f006e002000500072006f006300650073007300490044003d00270038003000340027002000540068007200650061006400490044003d002700310030003800300027002f003e003c004300680061006e006e0065006c003e00530065006300750072006900740079003c002f004300680061006e006e0065006c003e003c0043006f006d00700075007400650072003e0045004300320041004d0041005a002d0035004a00360049004600530046003c002f0043006f006d00700075007400650072003e003c00530065006300750072006900740079002f003e003c002f00530079007300740065006d003e003c004500760065006e00740044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a00650063007400550073006500720053006900640027003e0053002d0031002d0030002d0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a0065006300740055007300650072004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a0065006300740044006f006d00610069006e004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a006500630074004c006f0067006f006e004900640027003e003000780030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700540061007200670065007400550073006500720053006900640027003e0053002d0031002d0030002d0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270054006100720067006500740055007300650072004e0061006d00650027003e00410044004d0049004e004900530054005200410054004f0052003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270054006100720067006500740044006f006d00610069006e004e0061006d00650027003e003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270053007400610074007500730027003e0030007800630030003000300030003000360064003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004600610069006c0075007200650052006500610073006f006e0027003e002500250032003300310033003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270053007500620053007400610074007500730027003e0030007800630030003000300030003000360061003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006f0067006f006e00540079007000650027003e0033003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006f0067006f006e00500072006f0063006500730073004e0061006d00650027003e004e0074004c006d0053007300700020003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700410075007400680065006e007400690063006100740069006f006e005000610063006b006100670065004e0061006d00650027003e004e0054004c004d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270057006f0072006b00730074006100740069006f006e004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005400720061006e0073006d00690074007400650064005300650072007600690063006500730027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006d005000610063006b006100670065004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004b00650079004c0065006e0067007400680027003e0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700500072006f0063006500730073004900640027003e003000780030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700500072006f0063006500730073004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270049007000410064006400720065007300730027003e003100340036002e00350036002e0036002e003100360036003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004900700050006f007200740027003e0030003c002f0044006100740061003e003c002f004500760065006e00740044006100740061003e003c002f004500760065006e0074003e000000\"\n\tdata, _ := hex.DecodeString(originalHexStr)\n\tbufferUsed := len(data) / 2\n\tbytes, _ := UTF16ToUTF8BytesForWindowsEventBuffer(data, uint32(bufferUsed))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/windows_event_log/wineventlog/utils_test.go"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 18,
                  "endLine": 35,
                  "endColumn": 5770,
                  "snippet": {
                    "text": "e='TransmittedServices'>-</Data><Data Name='LmPackageName'>-</Data><Data Name='KeyLength'>0</Data><Data Name='ProcessId'>0x0</Data><Data Name='ProcessName'>-</Data><Data Name='IpAddress'>146.56.6.166</Data><Data Name='IpPort'>0</Data></EventData></Event>\", str)\n\n\t// two nulls test\n\toriginalHexStr = \"3c004500760065006e007400200078006d006c006e0073003d00270068007400740070003a002f002f0073006300680065006d00610073002e006d006900630072006f0073006f00660074002e0063006f006d002f00770069006e002f0032003000300034002f00300038002f006500760065006e00740073002f006500760065006e00740027003e003c00530079007300740065006d003e003c00500072006f007600690064006500720020004e0061006d0065003d0027004d006900630072006f0073006f00660074002d00570069006e0064006f00770073002d00530065006300750072006900740079002d004100750064006900740069006e0067002700200047007500690064003d0027007b00350034003800340039003600320035002d0035003400370038002d0034003900390034002d0041003500420041002d003300450033004200300033003200380043003300300044007d0027002f003e003c004500760065006e007400490044003e0034003600320035003c002f004500760065006e007400490044003e003c00560065007200730069006f006e003e0030003c002f00560065007200730069006f006e003e003c004c006500760065006c003e0030003c002f004c006500760065006c003e003c005400610073006b003e00310032003500340034003c002f005400610073006b003e003c004f00700063006f00640065003e0030003c002f004f00700063006f00640065003e003c004b006500790077006f007200640073003e003000780038003000310030003000300030003000300030003000300030003000300030003c002f004b006500790077006f007200640073003e003c00540069006d00650043007200650061007400650064002000530079007300740065006d00540069006d0065003d00270032003000310039002d00300035002d00300035005400320033003a00310032003a00330037002e003300340039003400370036003100300030005a0027002f003e003c004500760065006e0074005200650063006f0072006400490044003e003600390034003600370034003c002f004500760065006e0074005200650063006f0072006400490044003e003c0043006f007200720065006c006100740069006f006e00200041006300740069007600690074007900490044003d0027007b00320035003200320035004600410031002d0044004100420039002d0030003000300031002d0041003600350046002d003200320032003500420039004400410044003400300031007d0027002f003e003c0045007800650063007500740069006f006e002000500072006f006300650073007300490044003d00270038003000340027002000540068007200650061006400490044003d002700310030003800300027002f003e003c004300680061006e006e0065006c003e00530065006300750072006900740079003c002f004300680061006e006e0065006c003e003c0043006f006d00700075007400650072003e0045004300320041004d0041005a002d0035004a00360049004600530046003c002f0043006f006d00700075007400650072003e003c00530065006300750072006900740079002f003e003c002f00530079007300740065006d003e003c004500760065006e00740044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a00650063007400550073006500720053006900640027003e0053002d0031002d0030002d0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a0065006300740055007300650072004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a0065006300740044006f006d00610069006e004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a006500630074004c006f0067006f006e004900640027003e003000780030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700540061007200670065007400550073006500720053006900640027003e0053002d0031002d0030002d0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270054006100720067006500740055007300650072004e0061006d00650027003e00410044004d0049004e004900530054005200410054004f0052003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270054006100720067006500740044006f006d00610069006e004e0061006d00650027003e003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270053007400610074007500730027003e0030007800630030003000300030003000360064003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004600610069006c0075007200650052006500610073006f006e0027003e002500250032003300310033003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270053007500620053007400610074007500730027003e0030007800630030003000300030003000360061003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006f0067006f006e00540079007000650027003e0033003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006f0067006f006e00500072006f0063006500730073004e0061006d00650027003e004e0074004c006d0053007300700020003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700410075007400680065006e007400690063006100740069006f006e005000610063006b006100670065004e0061006d00650027003e004e0054004c004d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270057006f0072006b00730074006100740069006f006e004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005400720061006e0073006d00690074007400650064005300650072007600690063006500730027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006d005000610063006b006100670065004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004b00650079004c0065006e0067007400680027003e0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700500072006f0063006500730073004900640027003e003000780030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700500072006f0063006500730073004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270049007000410064006400720065007300730027003e003100340036002e00350036002e0036002e003100360036003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004900700050006f007200740027003e0030003c002f0044006100740061003e003c002f004500760065006e00740044006100740061003e003c002f004500760065006e0074003e000000000000\"\n\tdata, _ = hex.DecodeString(originalHexStr)\n\tbufferUsed = len(data)\n\tbytes, _ = UTF16ToUTF8BytesForWindowsEventBuffer(data, uint32(bufferUsed))\n\tstr = string(bytes[:])\n\tassert.Equal(t, \"<Event xmlns='http://schemas.microsoft.com/win/2004/08/events/event'><System><Provider Name='Microsoft-Windows-Se",
                    "rendered": {
                      "text": "e='TransmittedServices'>-</Data><Data Name='LmPackageName'>-</Data><Data Name='KeyLength'>0</Data><Data Name='ProcessId'>0x0</Data><Data Name='ProcessName'>-</Data><Data Name='IpAddress'>146.56.6.166</Data><Data Name='IpPort'>0</Data></EventData></Event>\", str)\n\n\t// two nulls test\n\toriginalHexStr = \"3c004500760065006e007400200078006d006c006e0073003d00270068007400740070003a002f002f0073006300680065006d00610073002e006d006900630072006f0073006f00660074002e0063006f006d002f00770069006e002f0032003000300034002f00300038002f006500760065006e00740073002f006500760065006e00740027003e003c00530079007300740065006d003e003c00500072006f007600690064006500720020004e0061006d0065003d0027004d006900630072006f0073006f00660074002d00570069006e0064006f00770073002d00530065006300750072006900740079002d004100750064006900740069006e0067002700200047007500690064003d0027007b00350034003800340039003600320035002d0035003400370038002d0034003900390034002d0041003500420041002d003300450033004200300033003200380043003300300044007d0027002f003e003c004500760065006e007400490044003e0034003600320035003c002f004500760065006e007400490044003e003c00560065007200730069006f006e003e0030003c002f00560065007200730069006f006e003e003c004c006500760065006c003e0030003c002f004c006500760065006c003e003c005400610073006b003e00310032003500340034003c002f005400610073006b003e003c004f00700063006f00640065003e0030003c002f004f00700063006f00640065003e003c004b006500790077006f007200640073003e003000780038003000310030003000300030003000300030003000300030003000300030003c002f004b006500790077006f007200640073003e003c00540069006d00650043007200650061007400650064002000530079007300740065006d00540069006d0065003d00270032003000310039002d00300035002d00300035005400320033003a00310032003a00330037002e003300340039003400370036003100300030005a0027002f003e003c004500760065006e0074005200650063006f0072006400490044003e003600390034003600370034003c002f004500760065006e0074005200650063006f0072006400490044003e003c0043006f007200720065006c006100740069006f006e00200041006300740069007600690074007900490044003d0027007b00320035003200320035004600410031002d0044004100420039002d0030003000300031002d0041003600350046002d003200320032003500420039004400410044003400300031007d0027002f003e003c0045007800650063007500740069006f006e002000500072006f006300650073007300490044003d00270038003000340027002000540068007200650061006400490044003d002700310030003800300027002f003e003c004300680061006e006e0065006c003e00530065006300750072006900740079003c002f004300680061006e006e0065006c003e003c0043006f006d00700075007400650072003e0045004300320041004d0041005a002d0035004a00360049004600530046003c002f0043006f006d00700075007400650072003e003c00530065006300750072006900740079002f003e003c002f00530079007300740065006d003e003c004500760065006e00740044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a00650063007400550073006500720053006900640027003e0053002d0031002d0030002d0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a0065006300740055007300650072004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a0065006300740044006f006d00610069006e004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a006500630074004c006f0067006f006e004900640027003e003000780030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700540061007200670065007400550073006500720053006900640027003e0053002d0031002d0030002d0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270054006100720067006500740055007300650072004e0061006d00650027003e00410044004d0049004e004900530054005200410054004f0052003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270054006100720067006500740044006f006d00610069006e004e0061006d00650027003e003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270053007400610074007500730027003e0030007800630030003000300030003000360064003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004600610069006c0075007200650052006500610073006f006e0027003e002500250032003300310033003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270053007500620053007400610074007500730027003e0030007800630030003000300030003000360061003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006f0067006f006e00540079007000650027003e0033003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006f0067006f006e00500072006f0063006500730073004e0061006d00650027003e004e0074004c006d0053007300700020003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700410075007400680065006e007400690063006100740069006f006e005000610063006b006100670065004e0061006d00650027003e004e0054004c004d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270057006f0072006b00730074006100740069006f006e004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005400720061006e0073006d00690074007400650064005300650072007600690063006500730027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006d005000610063006b006100670065004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004b00650079004c0065006e0067007400680027003e0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700500072006f0063006500730073004900640027003e003000780030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700500072006f0063006500730073004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270049007000410064006400720065007300730027003e003100340036002e00350036002e0036002e003100360036003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004900700050006f007200740027003e0030003c002f0044006100740061003e003c002f004500760065006e00740044006100740061003e003c002f004500760065006e0074003e000000000000\"\n\tdata, _ = hex.DecodeString(originalHexStr)\n\tbufferUsed = len(data)\n\tbytes, _ = UTF16ToUTF8BytesForWindowsEventBuffer(data, uint32(bufferUsed))\n\tstr = string(bytes[:])\n\tassert.Equal(t, \"<Event xmlns='http://schemas.microsoft.com/win/2004/08/events/event'><System><Provider Name='Microsoft-Windows-Se",
                      "markdown": "`e='TransmittedServices'>-</Data><Data Name='LmPackageName'>-</Data><Data Name='KeyLength'>0</Data><Data Name='ProcessId'>0x0</Data><Data Name='ProcessName'>-</Data><Data Name='IpAddress'>146.56.6.166</Data><Data Name='IpPort'>0</Data></EventData></Event>\", str)\n\n\t// two nulls test\n\toriginalHexStr = \"3c004500760065006e007400200078006d006c006e0073003d00270068007400740070003a002f002f0073006300680065006d00610073002e006d006900630072006f0073006f00660074002e0063006f006d002f00770069006e002f0032003000300034002f00300038002f006500760065006e00740073002f006500760065006e00740027003e003c00530079007300740065006d003e003c00500072006f007600690064006500720020004e0061006d0065003d0027004d006900630072006f0073006f00660074002d00570069006e0064006f00770073002d00530065006300750072006900740079002d004100750064006900740069006e0067002700200047007500690064003d0027007b00350034003800340039003600320035002d0035003400370038002d0034003900390034002d0041003500420041002d003300450033004200300033003200380043003300300044007d0027002f003e003c004500760065006e007400490044003e0034003600320035003c002f004500760065006e007400490044003e003c00560065007200730069006f006e003e0030003c002f00560065007200730069006f006e003e003c004c006500760065006c003e0030003c002f004c006500760065006c003e003c005400610073006b003e00310032003500340034003c002f005400610073006b003e003c004f00700063006f00640065003e0030003c002f004f00700063006f00640065003e003c004b006500790077006f007200640073003e003000780038003000310030003000300030003000300030003000300030003000300030003c002f004b006500790077006f007200640073003e003c00540069006d00650043007200650061007400650064002000530079007300740065006d00540069006d0065003d00270032003000310039002d00300035002d00300035005400320033003a00310032003a00330037002e003300340039003400370036003100300030005a0027002f003e003c004500760065006e0074005200650063006f0072006400490044003e003600390034003600370034003c002f004500760065006e0074005200650063006f0072006400490044003e003c0043006f007200720065006c006100740069006f006e00200041006300740069007600690074007900490044003d0027007b00320035003200320035004600410031002d0044004100420039002d0030003000300031002d0041003600350046002d003200320032003500420039004400410044003400300031007d0027002f003e003c0045007800650063007500740069006f006e002000500072006f006300650073007300490044003d00270038003000340027002000540068007200650061006400490044003d002700310030003800300027002f003e003c004300680061006e006e0065006c003e00530065006300750072006900740079003c002f004300680061006e006e0065006c003e003c0043006f006d00700075007400650072003e0045004300320041004d0041005a002d0035004a00360049004600530046003c002f0043006f006d00700075007400650072003e003c00530065006300750072006900740079002f003e003c002f00530079007300740065006d003e003c004500760065006e00740044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a00650063007400550073006500720053006900640027003e0053002d0031002d0030002d0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a0065006300740055007300650072004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a0065006300740044006f006d00610069006e004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a006500630074004c006f0067006f006e004900640027003e003000780030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700540061007200670065007400550073006500720053006900640027003e0053002d0031002d0030002d0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270054006100720067006500740055007300650072004e0061006d00650027003e00410044004d0049004e004900530054005200410054004f0052003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270054006100720067006500740044006f006d00610069006e004e0061006d00650027003e003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270053007400610074007500730027003e0030007800630030003000300030003000360064003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004600610069006c0075007200650052006500610073006f006e0027003e002500250032003300310033003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270053007500620053007400610074007500730027003e0030007800630030003000300030003000360061003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006f0067006f006e00540079007000650027003e0033003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006f0067006f006e00500072006f0063006500730073004e0061006d00650027003e004e0074004c006d0053007300700020003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700410075007400680065006e007400690063006100740069006f006e005000610063006b006100670065004e0061006d00650027003e004e0054004c004d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270057006f0072006b00730074006100740069006f006e004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005400720061006e0073006d00690074007400650064005300650072007600690063006500730027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006d005000610063006b006100670065004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004b00650079004c0065006e0067007400680027003e0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700500072006f0063006500730073004900640027003e003000780030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700500072006f0063006500730073004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270049007000410064006400720065007300730027003e003100340036002e00350036002e0036002e003100360036003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004900700050006f007200740027003e0030003c002f0044006100740061003e003c002f004500760065006e00740044006100740061003e003c002f004500760065006e0074003e000000000000\"\n\tdata, _ = hex.DecodeString(originalHexStr)\n\tbufferUsed = len(data)\n\tbytes, _ = UTF16ToUTF8BytesForWindowsEventBuffer(data, uint32(bufferUsed))\n\tstr = string(bytes[:])\n\tassert.Equal(t, \"<Event xmlns='http://schemas.microsoft.com/win/2004/08/events/event'><System><Provider Name='Microsoft-Windows-Se`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/windows_event_log/wineventlog/utils_test.go"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 18,
                  "endLine": 27,
                  "endColumn": 5766,
                  "snippet": {
                    "text": "e='TransmittedServices'>-</Data><Data Name='LmPackageName'>-</Data><Data Name='KeyLength'>0</Data><Data Name='ProcessId'>0x0</Data><Data Name='ProcessName'>-</Data><Data Name='IpAddress'>146.56.6.166</Data><Data Name='IpPort'>0</Data></EventData></Event>\", str)\n\n\t// odd bytes test\n\toriginalHexStr = \"3c004500760065006e007400200078006d006c006e0073003d00270068007400740070003a002f002f0073006300680065006d00610073002e006d006900630072006f0073006f00660074002e0063006f006d002f00770069006e002f0032003000300034002f00300038002f006500760065006e00740073002f006500760065006e00740027003e003c00530079007300740065006d003e003c00500072006f007600690064006500720020004e0061006d0065003d0027004d006900630072006f0073006f00660074002d00570069006e0064006f00770073002d00530065006300750072006900740079002d004100750064006900740069006e0067002700200047007500690064003d0027007b00350034003800340039003600320035002d0035003400370038002d0034003900390034002d0041003500420041002d003300450033004200300033003200380043003300300044007d0027002f003e003c004500760065006e007400490044003e0034003600320035003c002f004500760065006e007400490044003e003c00560065007200730069006f006e003e0030003c002f00560065007200730069006f006e003e003c004c006500760065006c003e0030003c002f004c006500760065006c003e003c005400610073006b003e00310032003500340034003c002f005400610073006b003e003c004f00700063006f00640065003e0030003c002f004f00700063006f00640065003e003c004b006500790077006f007200640073003e003000780038003000310030003000300030003000300030003000300030003000300030003c002f004b006500790077006f007200640073003e003c00540069006d00650043007200650061007400650064002000530079007300740065006d00540069006d0065003d00270032003000310039002d00300035002d00300035005400320033003a00310032003a00330037002e003300340039003400370036003100300030005a0027002f003e003c004500760065006e0074005200650063006f0072006400490044003e003600390034003600370034003c002f004500760065006e0074005200650063006f0072006400490044003e003c0043006f007200720065006c006100740069006f006e00200041006300740069007600690074007900490044003d0027007b00320035003200320035004600410031002d0044004100420039002d0030003000300031002d0041003600350046002d003200320032003500420039004400410044003400300031007d0027002f003e003c0045007800650063007500740069006f006e002000500072006f006300650073007300490044003d00270038003000340027002000540068007200650061006400490044003d002700310030003800300027002f003e003c004300680061006e006e0065006c003e00530065006300750072006900740079003c002f004300680061006e006e0065006c003e003c0043006f006d00700075007400650072003e0045004300320041004d0041005a002d0035004a00360049004600530046003c002f0043006f006d00700075007400650072003e003c00530065006300750072006900740079002f003e003c002f00530079007300740065006d003e003c004500760065006e00740044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a00650063007400550073006500720053006900640027003e0053002d0031002d0030002d0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a0065006300740055007300650072004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a0065006300740044006f006d00610069006e004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a006500630074004c006f0067006f006e004900640027003e003000780030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700540061007200670065007400550073006500720053006900640027003e0053002d0031002d0030002d0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270054006100720067006500740055007300650072004e0061006d00650027003e00410044004d0049004e004900530054005200410054004f0052003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270054006100720067006500740044006f006d00610069006e004e0061006d00650027003e003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270053007400610074007500730027003e0030007800630030003000300030003000360064003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004600610069006c0075007200650052006500610073006f006e0027003e002500250032003300310033003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270053007500620053007400610074007500730027003e0030007800630030003000300030003000360061003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006f0067006f006e00540079007000650027003e0033003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006f0067006f006e00500072006f0063006500730073004e0061006d00650027003e004e0074004c006d0053007300700020003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700410075007400680065006e007400690063006100740069006f006e005000610063006b006100670065004e0061006d00650027003e004e0054004c004d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270057006f0072006b00730074006100740069006f006e004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005400720061006e0073006d00690074007400650064005300650072007600690063006500730027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006d005000610063006b006100670065004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004b00650079004c0065006e0067007400680027003e0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700500072006f0063006500730073004900640027003e003000780030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700500072006f0063006500730073004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270049007000410064006400720065007300730027003e003100340036002e00350036002e0036002e003100360036003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004900700050006f007200740027003e0030003c002f0044006100740061003e003c002f004500760065006e00740044006100740061003e003c002f004500760065006e0074003e00000000\"\n\tdata, _ = hex.DecodeString(originalHexStr)\n\tbufferUsed = len(data)\n\tbytes, _ = UTF16ToUTF8BytesForWindowsEventBuffer(data, uint32(bufferUsed))\n\tstr = string(bytes[:])\n\tassert.Equal(t, \"<Event xmlns='http://schemas.microsoft.com/win/2004/08/events/event'><System><Provider Name='Microsoft-Windows-Se",
                    "rendered": {
                      "text": "e='TransmittedServices'>-</Data><Data Name='LmPackageName'>-</Data><Data Name='KeyLength'>0</Data><Data Name='ProcessId'>0x0</Data><Data Name='ProcessName'>-</Data><Data Name='IpAddress'>146.56.6.166</Data><Data Name='IpPort'>0</Data></EventData></Event>\", str)\n\n\t// odd bytes test\n\toriginalHexStr = \"3c004500760065006e007400200078006d006c006e0073003d00270068007400740070003a002f002f0073006300680065006d00610073002e006d006900630072006f0073006f00660074002e0063006f006d002f00770069006e002f0032003000300034002f00300038002f006500760065006e00740073002f006500760065006e00740027003e003c00530079007300740065006d003e003c00500072006f007600690064006500720020004e0061006d0065003d0027004d006900630072006f0073006f00660074002d00570069006e0064006f00770073002d00530065006300750072006900740079002d004100750064006900740069006e0067002700200047007500690064003d0027007b00350034003800340039003600320035002d0035003400370038002d0034003900390034002d0041003500420041002d003300450033004200300033003200380043003300300044007d0027002f003e003c004500760065006e007400490044003e0034003600320035003c002f004500760065006e007400490044003e003c00560065007200730069006f006e003e0030003c002f00560065007200730069006f006e003e003c004c006500760065006c003e0030003c002f004c006500760065006c003e003c005400610073006b003e00310032003500340034003c002f005400610073006b003e003c004f00700063006f00640065003e0030003c002f004f00700063006f00640065003e003c004b006500790077006f007200640073003e003000780038003000310030003000300030003000300030003000300030003000300030003c002f004b006500790077006f007200640073003e003c00540069006d00650043007200650061007400650064002000530079007300740065006d00540069006d0065003d00270032003000310039002d00300035002d00300035005400320033003a00310032003a00330037002e003300340039003400370036003100300030005a0027002f003e003c004500760065006e0074005200650063006f0072006400490044003e003600390034003600370034003c002f004500760065006e0074005200650063006f0072006400490044003e003c0043006f007200720065006c006100740069006f006e00200041006300740069007600690074007900490044003d0027007b00320035003200320035004600410031002d0044004100420039002d0030003000300031002d0041003600350046002d003200320032003500420039004400410044003400300031007d0027002f003e003c0045007800650063007500740069006f006e002000500072006f006300650073007300490044003d00270038003000340027002000540068007200650061006400490044003d002700310030003800300027002f003e003c004300680061006e006e0065006c003e00530065006300750072006900740079003c002f004300680061006e006e0065006c003e003c0043006f006d00700075007400650072003e0045004300320041004d0041005a002d0035004a00360049004600530046003c002f0043006f006d00700075007400650072003e003c00530065006300750072006900740079002f003e003c002f00530079007300740065006d003e003c004500760065006e00740044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a00650063007400550073006500720053006900640027003e0053002d0031002d0030002d0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a0065006300740055007300650072004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a0065006300740044006f006d00610069006e004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a006500630074004c006f0067006f006e004900640027003e003000780030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700540061007200670065007400550073006500720053006900640027003e0053002d0031002d0030002d0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270054006100720067006500740055007300650072004e0061006d00650027003e00410044004d0049004e004900530054005200410054004f0052003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270054006100720067006500740044006f006d00610069006e004e0061006d00650027003e003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270053007400610074007500730027003e0030007800630030003000300030003000360064003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004600610069006c0075007200650052006500610073006f006e0027003e002500250032003300310033003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270053007500620053007400610074007500730027003e0030007800630030003000300030003000360061003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006f0067006f006e00540079007000650027003e0033003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006f0067006f006e00500072006f0063006500730073004e0061006d00650027003e004e0074004c006d0053007300700020003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700410075007400680065006e007400690063006100740069006f006e005000610063006b006100670065004e0061006d00650027003e004e0054004c004d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270057006f0072006b00730074006100740069006f006e004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005400720061006e0073006d00690074007400650064005300650072007600690063006500730027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006d005000610063006b006100670065004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004b00650079004c0065006e0067007400680027003e0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700500072006f0063006500730073004900640027003e003000780030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700500072006f0063006500730073004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270049007000410064006400720065007300730027003e003100340036002e00350036002e0036002e003100360036003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004900700050006f007200740027003e0030003c002f0044006100740061003e003c002f004500760065006e00740044006100740061003e003c002f004500760065006e0074003e00000000\"\n\tdata, _ = hex.DecodeString(originalHexStr)\n\tbufferUsed = len(data)\n\tbytes, _ = UTF16ToUTF8BytesForWindowsEventBuffer(data, uint32(bufferUsed))\n\tstr = string(bytes[:])\n\tassert.Equal(t, \"<Event xmlns='http://schemas.microsoft.com/win/2004/08/events/event'><System><Provider Name='Microsoft-Windows-Se",
                      "markdown": "`e='TransmittedServices'>-</Data><Data Name='LmPackageName'>-</Data><Data Name='KeyLength'>0</Data><Data Name='ProcessId'>0x0</Data><Data Name='ProcessName'>-</Data><Data Name='IpAddress'>146.56.6.166</Data><Data Name='IpPort'>0</Data></EventData></Event>\", str)\n\n\t// odd bytes test\n\toriginalHexStr = \"3c004500760065006e007400200078006d006c006e0073003d00270068007400740070003a002f002f0073006300680065006d00610073002e006d006900630072006f0073006f00660074002e0063006f006d002f00770069006e002f0032003000300034002f00300038002f006500760065006e00740073002f006500760065006e00740027003e003c00530079007300740065006d003e003c00500072006f007600690064006500720020004e0061006d0065003d0027004d006900630072006f0073006f00660074002d00570069006e0064006f00770073002d00530065006300750072006900740079002d004100750064006900740069006e0067002700200047007500690064003d0027007b00350034003800340039003600320035002d0035003400370038002d0034003900390034002d0041003500420041002d003300450033004200300033003200380043003300300044007d0027002f003e003c004500760065006e007400490044003e0034003600320035003c002f004500760065006e007400490044003e003c00560065007200730069006f006e003e0030003c002f00560065007200730069006f006e003e003c004c006500760065006c003e0030003c002f004c006500760065006c003e003c005400610073006b003e00310032003500340034003c002f005400610073006b003e003c004f00700063006f00640065003e0030003c002f004f00700063006f00640065003e003c004b006500790077006f007200640073003e003000780038003000310030003000300030003000300030003000300030003000300030003c002f004b006500790077006f007200640073003e003c00540069006d00650043007200650061007400650064002000530079007300740065006d00540069006d0065003d00270032003000310039002d00300035002d00300035005400320033003a00310032003a00330037002e003300340039003400370036003100300030005a0027002f003e003c004500760065006e0074005200650063006f0072006400490044003e003600390034003600370034003c002f004500760065006e0074005200650063006f0072006400490044003e003c0043006f007200720065006c006100740069006f006e00200041006300740069007600690074007900490044003d0027007b00320035003200320035004600410031002d0044004100420039002d0030003000300031002d0041003600350046002d003200320032003500420039004400410044003400300031007d0027002f003e003c0045007800650063007500740069006f006e002000500072006f006300650073007300490044003d00270038003000340027002000540068007200650061006400490044003d002700310030003800300027002f003e003c004300680061006e006e0065006c003e00530065006300750072006900740079003c002f004300680061006e006e0065006c003e003c0043006f006d00700075007400650072003e0045004300320041004d0041005a002d0035004a00360049004600530046003c002f0043006f006d00700075007400650072003e003c00530065006300750072006900740079002f003e003c002f00530079007300740065006d003e003c004500760065006e00740044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a00650063007400550073006500720053006900640027003e0053002d0031002d0030002d0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a0065006300740055007300650072004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a0065006300740044006f006d00610069006e004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a006500630074004c006f0067006f006e004900640027003e003000780030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700540061007200670065007400550073006500720053006900640027003e0053002d0031002d0030002d0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270054006100720067006500740055007300650072004e0061006d00650027003e00410044004d0049004e004900530054005200410054004f0052003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270054006100720067006500740044006f006d00610069006e004e0061006d00650027003e003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270053007400610074007500730027003e0030007800630030003000300030003000360064003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004600610069006c0075007200650052006500610073006f006e0027003e002500250032003300310033003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270053007500620053007400610074007500730027003e0030007800630030003000300030003000360061003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006f0067006f006e00540079007000650027003e0033003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006f0067006f006e00500072006f0063006500730073004e0061006d00650027003e004e0074004c006d0053007300700020003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700410075007400680065006e007400690063006100740069006f006e005000610063006b006100670065004e0061006d00650027003e004e0054004c004d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270057006f0072006b00730074006100740069006f006e004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005400720061006e0073006d00690074007400650064005300650072007600690063006500730027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006d005000610063006b006100670065004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004b00650079004c0065006e0067007400680027003e0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700500072006f0063006500730073004900640027003e003000780030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700500072006f0063006500730073004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270049007000410064006400720065007300730027003e003100340036002e00350036002e0036002e003100360036003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004900700050006f007200740027003e0030003c002f0044006100740061003e003c002f004500760065006e00740044006100740061003e003c002f004500760065006e0074003e00000000\"\n\tdata, _ = hex.DecodeString(originalHexStr)\n\tbufferUsed = len(data)\n\tbytes, _ = UTF16ToUTF8BytesForWindowsEventBuffer(data, uint32(bufferUsed))\n\tstr = string(bytes[:])\n\tassert.Equal(t, \"<Event xmlns='http://schemas.microsoft.com/win/2004/08/events/event'><System><Provider Name='Microsoft-Windows-Se`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/windows_event_log/wineventlog/utils_test.go"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 19,
                  "endLine": 19,
                  "endColumn": 5765,
                  "snippet": {
                    "text": "func TestPayload_Value(t *testing.T) {\n\t// one null test\n\tresetState()\n\toriginalHexStr := \"3c004500760065006e007400200078006d006c006e0073003d00270068007400740070003a002f002f0073006300680065006d00610073002e006d006900630072006f0073006f00660074002e0063006f006d002f00770069006e002f0032003000300034002f00300038002f006500760065006e00740073002f006500760065006e00740027003e003c00530079007300740065006d003e003c00500072006f007600690064006500720020004e0061006d0065003d0027004d006900630072006f0073006f00660074002d00570069006e0064006f00770073002d00530065006300750072006900740079002d004100750064006900740069006e0067002700200047007500690064003d0027007b00350034003800340039003600320035002d0035003400370038002d0034003900390034002d0041003500420041002d003300450033004200300033003200380043003300300044007d0027002f003e003c004500760065006e007400490044003e0034003600320035003c002f004500760065006e007400490044003e003c00560065007200730069006f006e003e0030003c002f00560065007200730069006f006e003e003c004c006500760065006c003e0030003c002f004c006500760065006c003e003c005400610073006b003e00310032003500340034003c002f005400610073006b003e003c004f00700063006f00640065003e0030003c002f004f00700063006f00640065003e003c004b006500790077006f007200640073003e003000780038003000310030003000300030003000300030003000300030003000300030003c002f004b006500790077006f007200640073003e003c00540069006d00650043007200650061007400650064002000530079007300740065006d00540069006d0065003d00270032003000310039002d00300035002d00300035005400320033003a00310032003a00330037002e003300340039003400370036003100300030005a0027002f003e003c004500760065006e0074005200650063006f0072006400490044003e003600390034003600370034003c002f004500760065006e0074005200650063006f0072006400490044003e003c0043006f007200720065006c006100740069006f006e00200041006300740069007600690074007900490044003d0027007b00320035003200320035004600410031002d0044004100420039002d0030003000300031002d0041003600350046002d003200320032003500420039004400410044003400300031007d0027002f003e003c0045007800650063007500740069006f006e002000500072006f006300650073007300490044003d00270038003000340027002000540068007200650061006400490044003d002700310030003800300027002f003e003c004300680061006e006e0065006c003e00530065006300750072006900740079003c002f004300680061006e006e0065006c003e003c0043006f006d00700075007400650072003e0045004300320041004d0041005a002d0035004a00360049004600530046003c002f0043006f006d00700075007400650072003e003c00530065006300750072006900740079002f003e003c002f00530079007300740065006d003e003c004500760065006e00740044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a00650063007400550073006500720053006900640027003e0053002d0031002d0030002d0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a0065006300740055007300650072004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a0065006300740044006f006d00610069006e004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a006500630074004c006f0067006f006e004900640027003e003000780030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700540061007200670065007400550073006500720053006900640027003e0053002d0031002d0030002d0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270054006100720067006500740055007300650072004e0061006d00650027003e00410044004d0049004e004900530054005200410054004f0052003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270054006100720067006500740044006f006d00610069006e004e0061006d00650027003e003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270053007400610074007500730027003e0030007800630030003000300030003000360064003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004600610069006c0075007200650052006500610073006f006e0027003e002500250032003300310033003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270053007500620053007400610074007500730027003e0030007800630030003000300030003000360061003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006f0067006f006e00540079007000650027003e0033003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006f0067006f006e00500072006f0063006500730073004e0061006d00650027003e004e0074004c006d0053007300700020003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700410075007400680065006e007400690063006100740069006f006e005000610063006b006100670065004e0061006d00650027003e004e0054004c004d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270057006f0072006b00730074006100740069006f006e004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005400720061006e0073006d00690074007400650064005300650072007600690063006500730027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006d005000610063006b006100670065004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004b00650079004c0065006e0067007400680027003e0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700500072006f0063006500730073004900640027003e003000780030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700500072006f0063006500730073004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270049007000410064006400720065007300730027003e003100340036002e00350036002e0036002e003100360036003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004900700050006f007200740027003e0030003c002f0044006100740061003e003c002f004500760065006e00740044006100740061003e003c002f004500760065006e0074003e000000\"\n\tdata, _ := hex.DecodeString(originalHexStr)\n\tbufferUsed := len(data)\n\tbytes, _ := UTF16ToUTF8BytesForWindowsEventBuffer(data, uint32(bufferUsed))\n",
                    "rendered": {
                      "text": "func TestPayload_Value(t *testing.T) {\n\t// one null test\n\tresetState()\n\toriginalHexStr := \"3c004500760065006e007400200078006d006c006e0073003d00270068007400740070003a002f002f0073006300680065006d00610073002e006d006900630072006f0073006f00660074002e0063006f006d002f00770069006e002f0032003000300034002f00300038002f006500760065006e00740073002f006500760065006e00740027003e003c00530079007300740065006d003e003c00500072006f007600690064006500720020004e0061006d0065003d0027004d006900630072006f0073006f00660074002d00570069006e0064006f00770073002d00530065006300750072006900740079002d004100750064006900740069006e0067002700200047007500690064003d0027007b00350034003800340039003600320035002d0035003400370038002d0034003900390034002d0041003500420041002d003300450033004200300033003200380043003300300044007d0027002f003e003c004500760065006e007400490044003e0034003600320035003c002f004500760065006e007400490044003e003c00560065007200730069006f006e003e0030003c002f00560065007200730069006f006e003e003c004c006500760065006c003e0030003c002f004c006500760065006c003e003c005400610073006b003e00310032003500340034003c002f005400610073006b003e003c004f00700063006f00640065003e0030003c002f004f00700063006f00640065003e003c004b006500790077006f007200640073003e003000780038003000310030003000300030003000300030003000300030003000300030003c002f004b006500790077006f007200640073003e003c00540069006d00650043007200650061007400650064002000530079007300740065006d00540069006d0065003d00270032003000310039002d00300035002d00300035005400320033003a00310032003a00330037002e003300340039003400370036003100300030005a0027002f003e003c004500760065006e0074005200650063006f0072006400490044003e003600390034003600370034003c002f004500760065006e0074005200650063006f0072006400490044003e003c0043006f007200720065006c006100740069006f006e00200041006300740069007600690074007900490044003d0027007b00320035003200320035004600410031002d0044004100420039002d0030003000300031002d0041003600350046002d003200320032003500420039004400410044003400300031007d0027002f003e003c0045007800650063007500740069006f006e002000500072006f006300650073007300490044003d00270038003000340027002000540068007200650061006400490044003d002700310030003800300027002f003e003c004300680061006e006e0065006c003e00530065006300750072006900740079003c002f004300680061006e006e0065006c003e003c0043006f006d00700075007400650072003e0045004300320041004d0041005a002d0035004a00360049004600530046003c002f0043006f006d00700075007400650072003e003c00530065006300750072006900740079002f003e003c002f00530079007300740065006d003e003c004500760065006e00740044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a00650063007400550073006500720053006900640027003e0053002d0031002d0030002d0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a0065006300740055007300650072004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a0065006300740044006f006d00610069006e004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a006500630074004c006f0067006f006e004900640027003e003000780030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700540061007200670065007400550073006500720053006900640027003e0053002d0031002d0030002d0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270054006100720067006500740055007300650072004e0061006d00650027003e00410044004d0049004e004900530054005200410054004f0052003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270054006100720067006500740044006f006d00610069006e004e0061006d00650027003e003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270053007400610074007500730027003e0030007800630030003000300030003000360064003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004600610069006c0075007200650052006500610073006f006e0027003e002500250032003300310033003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270053007500620053007400610074007500730027003e0030007800630030003000300030003000360061003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006f0067006f006e00540079007000650027003e0033003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006f0067006f006e00500072006f0063006500730073004e0061006d00650027003e004e0074004c006d0053007300700020003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700410075007400680065006e007400690063006100740069006f006e005000610063006b006100670065004e0061006d00650027003e004e0054004c004d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270057006f0072006b00730074006100740069006f006e004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005400720061006e0073006d00690074007400650064005300650072007600690063006500730027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006d005000610063006b006100670065004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004b00650079004c0065006e0067007400680027003e0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700500072006f0063006500730073004900640027003e003000780030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700500072006f0063006500730073004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270049007000410064006400720065007300730027003e003100340036002e00350036002e0036002e003100360036003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004900700050006f007200740027003e0030003c002f0044006100740061003e003c002f004500760065006e00740044006100740061003e003c002f004500760065006e0074003e000000\"\n\tdata, _ := hex.DecodeString(originalHexStr)\n\tbufferUsed := len(data)\n\tbytes, _ := UTF16ToUTF8BytesForWindowsEventBuffer(data, uint32(bufferUsed))\n",
                      "markdown": "`func TestPayload_Value(t *testing.T) {\n\t// one null test\n\tresetState()\n\toriginalHexStr := \"3c004500760065006e007400200078006d006c006e0073003d00270068007400740070003a002f002f0073006300680065006d00610073002e006d006900630072006f0073006f00660074002e0063006f006d002f00770069006e002f0032003000300034002f00300038002f006500760065006e00740073002f006500760065006e00740027003e003c00530079007300740065006d003e003c00500072006f007600690064006500720020004e0061006d0065003d0027004d006900630072006f0073006f00660074002d00570069006e0064006f00770073002d00530065006300750072006900740079002d004100750064006900740069006e0067002700200047007500690064003d0027007b00350034003800340039003600320035002d0035003400370038002d0034003900390034002d0041003500420041002d003300450033004200300033003200380043003300300044007d0027002f003e003c004500760065006e007400490044003e0034003600320035003c002f004500760065006e007400490044003e003c00560065007200730069006f006e003e0030003c002f00560065007200730069006f006e003e003c004c006500760065006c003e0030003c002f004c006500760065006c003e003c005400610073006b003e00310032003500340034003c002f005400610073006b003e003c004f00700063006f00640065003e0030003c002f004f00700063006f00640065003e003c004b006500790077006f007200640073003e003000780038003000310030003000300030003000300030003000300030003000300030003c002f004b006500790077006f007200640073003e003c00540069006d00650043007200650061007400650064002000530079007300740065006d00540069006d0065003d00270032003000310039002d00300035002d00300035005400320033003a00310032003a00330037002e003300340039003400370036003100300030005a0027002f003e003c004500760065006e0074005200650063006f0072006400490044003e003600390034003600370034003c002f004500760065006e0074005200650063006f0072006400490044003e003c0043006f007200720065006c006100740069006f006e00200041006300740069007600690074007900490044003d0027007b00320035003200320035004600410031002d0044004100420039002d0030003000300031002d0041003600350046002d003200320032003500420039004400410044003400300031007d0027002f003e003c0045007800650063007500740069006f006e002000500072006f006300650073007300490044003d00270038003000340027002000540068007200650061006400490044003d002700310030003800300027002f003e003c004300680061006e006e0065006c003e00530065006300750072006900740079003c002f004300680061006e006e0065006c003e003c0043006f006d00700075007400650072003e0045004300320041004d0041005a002d0035004a00360049004600530046003c002f0043006f006d00700075007400650072003e003c00530065006300750072006900740079002f003e003c002f00530079007300740065006d003e003c004500760065006e00740044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a00650063007400550073006500720053006900640027003e0053002d0031002d0030002d0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a0065006300740055007300650072004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a0065006300740044006f006d00610069006e004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005300750062006a006500630074004c006f0067006f006e004900640027003e003000780030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700540061007200670065007400550073006500720053006900640027003e0053002d0031002d0030002d0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270054006100720067006500740055007300650072004e0061006d00650027003e00410044004d0049004e004900530054005200410054004f0052003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270054006100720067006500740044006f006d00610069006e004e0061006d00650027003e003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270053007400610074007500730027003e0030007800630030003000300030003000360064003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004600610069006c0075007200650052006500610073006f006e0027003e002500250032003300310033003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270053007500620053007400610074007500730027003e0030007800630030003000300030003000360061003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006f0067006f006e00540079007000650027003e0033003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006f0067006f006e00500072006f0063006500730073004e0061006d00650027003e004e0074004c006d0053007300700020003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700410075007400680065006e007400690063006100740069006f006e005000610063006b006100670065004e0061006d00650027003e004e0054004c004d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270057006f0072006b00730074006100740069006f006e004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027005400720061006e0073006d00690074007400650064005300650072007600690063006500730027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004c006d005000610063006b006100670065004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004b00650079004c0065006e0067007400680027003e0030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700500072006f0063006500730073004900640027003e003000780030003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d002700500072006f0063006500730073004e0061006d00650027003e002d003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d00270049007000410064006400720065007300730027003e003100340036002e00350036002e0036002e003100360036003c002f0044006100740061003e003c00440061007400610020004e0061006d0065003d0027004900700050006f007200740027003e0030003c002f0044006100740061003e003c002f004500760065006e00740044006100740061003e003c002f004500760065006e0074003e000000\"\n\tdata, _ := hex.DecodeString(originalHexStr)\n\tbufferUsed := len(data)\n\tbytes, _ := UTF16ToUTF8BytesForWindowsEventBuffer(data, uint32(bufferUsed))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/windows_event_log/wineventlog/utils_test.go"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 22,
                  "endLine": 115,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\t\t\t\"value_1 %value_3% value_2\",\n\t\t},\n\t\t{\n\t\t\t\"Handle % character at the end of message\",\n\t\t\t\"%3 %2%\",\n\t\t\t\"value_3 value_2%\",\n\t\t},\n",
                    "rendered": {
                      "text": "\t\t\t\"value_1 %value_3% value_2\",\n\t\t},\n\t\t{\n\t\t\t\"Handle % character at the end of message\",\n\t\t\t\"%3 %2%\",\n\t\t\t\"value_3 value_2%\",\n\t\t},\n",
                      "markdown": "`\t\t\t\"value_1 %value_3% value_2\",\n\t\t},\n\t\t{\n\t\t\t\"Handle % character at the end of message\",\n\t\t\t\"%3 %2%\",\n\t\t\t\"value_3 value_2%\",\n\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/windows_event_log/wineventlog/utils_test.go"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 42,
                  "endLine": 92,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\t\t{\n\t\t\t\"Placeholders %{number} should be replaced by insertion strings\",\n\t\t\t\"Service %1 in region %3 stop at %2\",\n\t\t\t\"Service value_1 in region value_3 stop at value_2\",\n\t\t},\n\t\t{\n\t\t\t\"String without a placeholder should remain the same after insertion\",\n",
                    "rendered": {
                      "text": "\t\t{\n\t\t\t\"Placeholders %{number} should be replaced by insertion strings\",\n\t\t\t\"Service %1 in region %3 stop at %2\",\n\t\t\t\"Service value_1 in region value_3 stop at value_2\",\n\t\t},\n\t\t{\n\t\t\t\"String without a placeholder should remain the same after insertion\",\n",
                      "markdown": "`\t\t{\n\t\t\t\"Placeholders %{number} should be replaced by insertion strings\",\n\t\t\t\"Service %1 in region %3 stop at %2\",\n\t\t\t\"Service value_1 in region value_3 stop at value_2\",\n\t\t},\n\t\t{\n\t\t\t\"String without a placeholder should remain the same after insertion\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/windows_event_log/wineventlog/utils_test.go"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 32,
                  "endLine": 91,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\t}{\n\t\t{\n\t\t\t\"Placeholders %{number} should be replaced by insertion strings\",\n\t\t\t\"Service %1 in region %3 stop at %2\",\n\t\t\t\"Service value_1 in region value_3 stop at value_2\",\n\t\t},\n\t\t{\n",
                    "rendered": {
                      "text": "\t}{\n\t\t{\n\t\t\t\"Placeholders %{number} should be replaced by insertion strings\",\n\t\t\t\"Service %1 in region %3 stop at %2\",\n\t\t\t\"Service value_1 in region value_3 stop at value_2\",\n\t\t},\n\t\t{\n",
                      "markdown": "`\t}{\n\t\t{\n\t\t\t\"Placeholders %{number} should be replaced by insertion strings\",\n\t\t\t\"Service %1 in region %3 stop at %2\",\n\t\t\t\"Service value_1 in region value_3 stop at value_2\",\n\t\t},\n\t\t{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/windows_event_log/service_monitor.go"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 65,
                  "endLine": 66,
                  "endColumn": 74,
                  "snippet": {
                    "text": "\t\tcase <-ticker.C:\n\t\t\tnewPID, err := getPID(service)\n\t\t\tif err == nil && oldPID != newPID {\n\t\t\t\tlog.Printf(\"D! [windows_event_log] Detected Windows event log service restart\")\n\t\t\t\toldPID = newPID\n\t\t\t\tm.notify()\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\tcase <-ticker.C:\n\t\t\tnewPID, err := getPID(service)\n\t\t\tif err == nil && oldPID != newPID {\n\t\t\t\tlog.Printf(\"D! [windows_event_log] Detected Windows event log service restart\")\n\t\t\t\toldPID = newPID\n\t\t\t\tm.notify()\n\t\t\t}\n",
                      "markdown": "`\t\tcase <-ticker.C:\n\t\t\tnewPID, err := getPID(service)\n\t\t\tif err == nil && oldPID != newPID {\n\t\t\t\tlog.Printf(\"D! [windows_event_log] Detected Windows event log service restart\")\n\t\t\t\toldPID = newPID\n\t\t\t\tm.notify()\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/windows_event_log/service_monitor.go"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 65,
                  "endLine": 46,
                  "endColumn": 74,
                  "snippet": {
                    "text": "func (m *serviceMonitor) start() {\n\tmanager, err := mgr.Connect()\n\tif err != nil {\n\t\tlog.Printf(\"E! [windows_event_log] Unable to connect to Windows service manager: %v\", err)\n\t\treturn\n\t}\n\n",
                    "rendered": {
                      "text": "func (m *serviceMonitor) start() {\n\tmanager, err := mgr.Connect()\n\tif err != nil {\n\t\tlog.Printf(\"E! [windows_event_log] Unable to connect to Windows service manager: %v\", err)\n\t\treturn\n\t}\n\n",
                      "markdown": "`func (m *serviceMonitor) start() {\n\tmanager, err := mgr.Connect()\n\tif err != nil {\n\t\tlog.Printf(\"E! [windows_event_log] Unable to connect to Windows service manager: %v\", err)\n\t\treturn\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/kubernetes_on_prem_config.yaml"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 19,
                  "endLine": 168,
                  "snippet": {
                    "text": "            - dimensions:\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n              metric_name_selectors:\n                - service_number_of_running_pods\n            - dimensions:\n",
                    "rendered": {
                      "text": "            - dimensions:\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n              metric_name_selectors:\n                - service_number_of_running_pods\n            - dimensions:\n",
                      "markdown": "`            - dimensions:\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n              metric_name_selectors:\n                - service_number_of_running_pods\n            - dimensions:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/kubernetes_on_prem_config.yaml"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 19,
                  "endLine": 88,
                  "snippet": {
                    "text": "                  - PodName\n                - - ClusterName\n                  - Namespace\n                  - Service\n              metric_name_selectors:\n                - pod_cpu_reserved_capacity\n                - pod_memory_reserved_capacity\n                - pod_number_of_container_restarts\n",
                    "rendered": {
                      "text": "                  - PodName\n                - - ClusterName\n                  - Namespace\n                  - Service\n              metric_name_selectors:\n                - pod_cpu_reserved_capacity\n                - pod_memory_reserved_capacity\n                - pod_number_of_container_restarts\n",
                      "markdown": "`                  - PodName\n                - - ClusterName\n                  - Namespace\n                  - Service\n              metric_name_selectors:\n                - pod_cpu_reserved_capacity\n                - pod_memory_reserved_capacity\n                - pod_number_of_container_restarts\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/kubernetes_on_prem_config.yaml"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 19,
                  "endLine": 49,
                  "snippet": {
                    "text": "                - - ClusterName\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n                - - ClusterName\n                  - FullPodName\n",
                    "rendered": {
                      "text": "                - - ClusterName\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n                - - ClusterName\n                  - FullPodName\n",
                      "markdown": "`                - - ClusterName\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n                - - ClusterName\n                  - FullPodName\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/advanced_config_linux.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/advanced_config_linux.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 460,
                  "startColumn": 33,
                  "endLine": 460,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                    enabled: true\n                gcp.cloud_run.job.task_index:\n                    enabled: true\n                gcp.gce.instance.hostname:\n                    enabled: false\n                gcp.gce.instance.name:\n                    enabled: false\n",
                    "rendered": {
                      "text": "                    enabled: true\n                gcp.cloud_run.job.task_index:\n                    enabled: true\n                gcp.gce.instance.hostname:\n                    enabled: false\n                gcp.gce.instance.name:\n                    enabled: false\n",
                      "markdown": "`                    enabled: true\n                gcp.cloud_run.job.task_index:\n                    enabled: true\n                gcp.gce.instance.hostname:\n                    enabled: false\n                gcp.gce.instance.name:\n                    enabled: false\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000708"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (OS Type)",
            "id": "BD000708"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 576,
                  "startColumn": 16,
                  "endLine": 576,
                  "endColumn": 23,
                  "snippet": {
                    "text": "                    enabled: true\n                os.description:\n                    enabled: false\n                os.type:\n                    enabled: true\n        timeout: 2s\n        tls:\n",
                    "rendered": {
                      "text": "                    enabled: true\n                os.description:\n                    enabled: false\n                os.type:\n                    enabled: true\n        timeout: 2s\n        tls:\n",
                      "markdown": "`                    enabled: true\n                os.description:\n                    enabled: false\n                os.type:\n                    enabled: true\n        timeout: 2s\n        tls:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000708"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (OS Type)",
            "id": "BD000708"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 358,
                  "startColumn": 16,
                  "endLine": 358,
                  "endColumn": 23,
                  "snippet": {
                    "text": "            resource_attributes:\n                host.name:\n                    enabled: true\n                os.type:\n                    enabled: true\n        ec2:\n            resource_attributes:\n",
                    "rendered": {
                      "text": "            resource_attributes:\n                host.name:\n                    enabled: true\n                os.type:\n                    enabled: true\n        ec2:\n            resource_attributes:\n",
                      "markdown": "`            resource_attributes:\n                host.name:\n                    enabled: true\n                os.type:\n                    enabled: true\n        ec2:\n            resource_attributes:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 13,
                  "endLine": 352,
                  "snippet": {
                    "text": "            token_file: \"\"\n        detectors:\n            - eks\n            - env\n            - ec2\n        disable_keep_alives: false\n        docker:\n            resource_attributes:\n",
                    "rendered": {
                      "text": "            token_file: \"\"\n        detectors:\n            - eks\n            - env\n            - ec2\n        disable_keep_alives: false\n        docker:\n            resource_attributes:\n",
                      "markdown": "`            token_file: \"\"\n        detectors:\n            - eks\n            - env\n            - ec2\n        disable_keep_alives: false\n        docker:\n            resource_attributes:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 19,
                  "endLine": 198,
                  "snippet": {
                    "text": "            - dimensions:\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n              metric_name_selectors:\n                - service_number_of_running_pods\n            - dimensions:\n",
                    "rendered": {
                      "text": "            - dimensions:\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n              metric_name_selectors:\n                - service_number_of_running_pods\n            - dimensions:\n",
                      "markdown": "`            - dimensions:\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n              metric_name_selectors:\n                - service_number_of_running_pods\n            - dimensions:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 19,
                  "endLine": 144,
                  "snippet": {
                    "text": "                - - ClusterName\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n              metric_name_selectors:\n                - pod_cpu_utilization\n",
                    "rendered": {
                      "text": "                - - ClusterName\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n              metric_name_selectors:\n                - pod_cpu_utilization\n",
                      "markdown": "`                - - ClusterName\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n              metric_name_selectors:\n                - pod_cpu_utilization\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 19,
                  "endLine": 93,
                  "snippet": {
                    "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                - - RemoteService\n",
                    "rendered": {
                      "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                - - RemoteService\n",
                      "markdown": "`                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                - - RemoteService\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 19,
                  "endLine": 88,
                  "snippet": {
                    "text": "                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n",
                    "rendered": {
                      "text": "                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n",
                      "markdown": "`                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 19,
                  "endLine": 84,
                  "snippet": {
                    "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n",
                    "rendered": {
                      "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n",
                      "markdown": "`                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 19,
                  "endLine": 78,
                  "snippet": {
                    "text": "                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n",
                    "rendered": {
                      "text": "                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n",
                      "markdown": "`                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 19,
                  "endLine": 73,
                  "snippet": {
                    "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n",
                    "rendered": {
                      "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n",
                      "markdown": "`                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 19,
                  "endLine": 66,
                  "snippet": {
                    "text": "                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n",
                    "rendered": {
                      "text": "                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n",
                      "markdown": "`                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 19,
                  "endLine": 63,
                  "snippet": {
                    "text": "                - - Environment\n                  - RemoteEnvironment\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n",
                    "rendered": {
                      "text": "                - - Environment\n                  - RemoteEnvironment\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n",
                      "markdown": "`                - - Environment\n                  - RemoteEnvironment\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 19,
                  "endLine": 59,
                  "snippet": {
                    "text": "                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteService\n                  - Service\n",
                    "rendered": {
                      "text": "                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteService\n                  - Service\n",
                      "markdown": "`                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteService\n                  - Service\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 19,
                  "endLine": 54,
                  "snippet": {
                    "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n",
                    "rendered": {
                      "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n",
                      "markdown": "`                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 19,
                  "endLine": 47,
                  "snippet": {
                    "text": "                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n",
                    "rendered": {
                      "text": "                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n",
                      "markdown": "`                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 19,
                  "endLine": 41,
                  "snippet": {
                    "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteEnvironment\n                  - RemoteOperation\n",
                    "rendered": {
                      "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteEnvironment\n                  - RemoteOperation\n",
                      "markdown": "`                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteEnvironment\n                  - RemoteOperation\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 19,
                  "endLine": 23,
                  "snippet": {
                    "text": "                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n                    - Telemetry.Source\n                  regex: ^(ServerSpan|LocalRootSpan)$\n",
                    "rendered": {
                      "text": "                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n                    - Telemetry.Source\n                  regex: ^(ServerSpan|LocalRootSpan)$\n",
                      "markdown": "`                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n                    - Telemetry.Source\n                  regex: ^(ServerSpan|LocalRootSpan)$\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_eks_config.yaml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 19,
                  "endLine": 21,
                  "snippet": {
                    "text": "            - dimensions:\n                - - Environment\n                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n",
                    "rendered": {
                      "text": "            - dimensions:\n                - - Environment\n                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n",
                      "markdown": "`            - dimensions:\n                - - Environment\n                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_k8s_config.yaml"
                },
                "region": {
                  "startLine": 461,
                  "startColumn": 33,
                  "endLine": 461,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                    enabled: true\n                gcp.cloud_run.job.task_index:\n                    enabled: true\n                gcp.gce.instance.hostname:\n                    enabled: false\n                gcp.gce.instance.name:\n                    enabled: false\n",
                    "rendered": {
                      "text": "                    enabled: true\n                gcp.cloud_run.job.task_index:\n                    enabled: true\n                gcp.gce.instance.hostname:\n                    enabled: false\n                gcp.gce.instance.name:\n                    enabled: false\n",
                      "markdown": "`                    enabled: true\n                gcp.cloud_run.job.task_index:\n                    enabled: true\n                gcp.gce.instance.hostname:\n                    enabled: false\n                gcp.gce.instance.name:\n                    enabled: false\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000708"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (OS Type)",
            "id": "BD000708"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_k8s_config.yaml"
                },
                "region": {
                  "startLine": 577,
                  "startColumn": 16,
                  "endLine": 577,
                  "endColumn": 23,
                  "snippet": {
                    "text": "                    enabled: true\n                os.description:\n                    enabled: false\n                os.type:\n                    enabled: true\n        timeout: 2s\n        tls:\n",
                    "rendered": {
                      "text": "                    enabled: true\n                os.description:\n                    enabled: false\n                os.type:\n                    enabled: true\n        timeout: 2s\n        tls:\n",
                      "markdown": "`                    enabled: true\n                os.description:\n                    enabled: false\n                os.type:\n                    enabled: true\n        timeout: 2s\n        tls:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000708"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (OS Type)",
            "id": "BD000708"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_k8s_config.yaml"
                },
                "region": {
                  "startLine": 359,
                  "startColumn": 16,
                  "endLine": 359,
                  "endColumn": 23,
                  "snippet": {
                    "text": "            resource_attributes:\n                host.name:\n                    enabled: true\n                os.type:\n                    enabled: true\n        ec2:\n            resource_attributes:\n",
                    "rendered": {
                      "text": "            resource_attributes:\n                host.name:\n                    enabled: true\n                os.type:\n                    enabled: true\n        ec2:\n            resource_attributes:\n",
                      "markdown": "`            resource_attributes:\n                host.name:\n                    enabled: true\n                os.type:\n                    enabled: true\n        ec2:\n            resource_attributes:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_k8s_config.yaml"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 13,
                  "endLine": 353,
                  "snippet": {
                    "text": "            token_file: \"\"\n        detectors:\n            - eks\n            - env\n            - ec2\n        disable_keep_alives: false\n        docker:\n            resource_attributes:\n",
                    "rendered": {
                      "text": "            token_file: \"\"\n        detectors:\n            - eks\n            - env\n            - ec2\n        disable_keep_alives: false\n        docker:\n            resource_attributes:\n",
                      "markdown": "`            token_file: \"\"\n        detectors:\n            - eks\n            - env\n            - ec2\n        disable_keep_alives: false\n        docker:\n            resource_attributes:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_k8s_config.yaml"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 19,
                  "endLine": 198,
                  "snippet": {
                    "text": "            - dimensions:\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n              metric_name_selectors:\n                - service_number_of_running_pods\n            - dimensions:\n",
                    "rendered": {
                      "text": "            - dimensions:\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n              metric_name_selectors:\n                - service_number_of_running_pods\n            - dimensions:\n",
                      "markdown": "`            - dimensions:\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n              metric_name_selectors:\n                - service_number_of_running_pods\n            - dimensions:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_k8s_config.yaml"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 19,
                  "endLine": 144,
                  "snippet": {
                    "text": "                - - ClusterName\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n              metric_name_selectors:\n                - pod_cpu_utilization\n",
                    "rendered": {
                      "text": "                - - ClusterName\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n              metric_name_selectors:\n                - pod_cpu_utilization\n",
                      "markdown": "`                - - ClusterName\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n              metric_name_selectors:\n                - pod_cpu_utilization\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_k8s_config.yaml"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 19,
                  "endLine": 93,
                  "snippet": {
                    "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                - - RemoteService\n",
                    "rendered": {
                      "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                - - RemoteService\n",
                      "markdown": "`                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                - - RemoteService\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_k8s_config.yaml"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 19,
                  "endLine": 88,
                  "snippet": {
                    "text": "                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n",
                    "rendered": {
                      "text": "                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n",
                      "markdown": "`                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_k8s_config.yaml"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 19,
                  "endLine": 84,
                  "snippet": {
                    "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n",
                    "rendered": {
                      "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n",
                      "markdown": "`                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_k8s_config.yaml"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 19,
                  "endLine": 78,
                  "snippet": {
                    "text": "                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n",
                    "rendered": {
                      "text": "                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n",
                      "markdown": "`                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_k8s_config.yaml"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 19,
                  "endLine": 73,
                  "snippet": {
                    "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n",
                    "rendered": {
                      "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n",
                      "markdown": "`                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_k8s_config.yaml"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 19,
                  "endLine": 66,
                  "snippet": {
                    "text": "                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n",
                    "rendered": {
                      "text": "                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n",
                      "markdown": "`                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_k8s_config.yaml"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 19,
                  "endLine": 63,
                  "snippet": {
                    "text": "                - - Environment\n                  - RemoteEnvironment\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n",
                    "rendered": {
                      "text": "                - - Environment\n                  - RemoteEnvironment\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n",
                      "markdown": "`                - - Environment\n                  - RemoteEnvironment\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_k8s_config.yaml"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 19,
                  "endLine": 59,
                  "snippet": {
                    "text": "                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteService\n                  - Service\n",
                    "rendered": {
                      "text": "                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteService\n                  - Service\n",
                      "markdown": "`                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteService\n                  - Service\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_k8s_config.yaml"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 19,
                  "endLine": 54,
                  "snippet": {
                    "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n",
                    "rendered": {
                      "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n",
                      "markdown": "`                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_k8s_config.yaml"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 19,
                  "endLine": 47,
                  "snippet": {
                    "text": "                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n",
                    "rendered": {
                      "text": "                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n",
                      "markdown": "`                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_k8s_config.yaml"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 19,
                  "endLine": 41,
                  "snippet": {
                    "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteEnvironment\n                  - RemoteOperation\n",
                    "rendered": {
                      "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteEnvironment\n                  - RemoteOperation\n",
                      "markdown": "`                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteEnvironment\n                  - RemoteOperation\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_k8s_config.yaml"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 19,
                  "endLine": 23,
                  "snippet": {
                    "text": "                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n                    - Telemetry.Source\n                  regex: ^(ServerSpan|LocalRootSpan)$\n",
                    "rendered": {
                      "text": "                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n                    - Telemetry.Source\n                  regex: ^(ServerSpan|LocalRootSpan)$\n",
                      "markdown": "`                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n                    - Telemetry.Source\n                  regex: ^(ServerSpan|LocalRootSpan)$\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_k8s_config.yaml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 19,
                  "endLine": 21,
                  "snippet": {
                    "text": "            - dimensions:\n                - - Environment\n                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n",
                    "rendered": {
                      "text": "            - dimensions:\n                - - Environment\n                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n",
                      "markdown": "`            - dimensions:\n                - - Environment\n                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/logs_and_kubernetes_config.yaml"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 19,
                  "endLine": 199,
                  "snippet": {
                    "text": "            - dimensions:\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n              metric_name_selectors:\n                - service_number_of_running_pods\n            - dimensions:\n",
                    "rendered": {
                      "text": "            - dimensions:\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n              metric_name_selectors:\n                - service_number_of_running_pods\n            - dimensions:\n",
                      "markdown": "`            - dimensions:\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n              metric_name_selectors:\n                - service_number_of_running_pods\n            - dimensions:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/logs_and_kubernetes_config.yaml"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 19,
                  "endLine": 119,
                  "snippet": {
                    "text": "                  - PodName\n                - - ClusterName\n                  - Namespace\n                  - Service\n              metric_name_selectors:\n                - pod_cpu_reserved_capacity\n                - pod_memory_reserved_capacity\n                - pod_number_of_container_restarts\n",
                    "rendered": {
                      "text": "                  - PodName\n                - - ClusterName\n                  - Namespace\n                  - Service\n              metric_name_selectors:\n                - pod_cpu_reserved_capacity\n                - pod_memory_reserved_capacity\n                - pod_number_of_container_restarts\n",
                      "markdown": "`                  - PodName\n                - - ClusterName\n                  - Namespace\n                  - Service\n              metric_name_selectors:\n                - pod_cpu_reserved_capacity\n                - pod_memory_reserved_capacity\n                - pod_number_of_container_restarts\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/logs_and_kubernetes_config.yaml"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 19,
                  "endLine": 80,
                  "snippet": {
                    "text": "                - - ClusterName\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n                - - ClusterName\n                  - FullPodName\n",
                    "rendered": {
                      "text": "                - - ClusterName\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n                - - ClusterName\n                  - FullPodName\n",
                      "markdown": "`                - - ClusterName\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n                - - ClusterName\n                  - FullPodName\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/log_ecs_metric_only.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = true\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = true\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = true\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/log_ecs_metric_only.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"fake-host-name\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"fake-host-name\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"fake-host-name\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/prometheus_config_windows.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/prometheus_config_windows.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_eks_config.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_and_eks_config.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/advanced_config_windows.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/advanced_config_windows.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/logs_and_kubernetes_config.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/logs_and_kubernetes_config.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_fallback_and_eks_config.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_fallback_and_eks_config.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"host_name_from_env\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/basic_config_windows.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/basic_config_windows.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/complete_windows_config.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/complete_windows_config.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = true\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = true\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = true\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_appsignals_fallback_config.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_appsignals_fallback_config.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/jmx_eks_config_linux.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/jmx_eks_config_linux.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/complete_darwin_config.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/complete_darwin_config.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = true\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"10s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = true\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"10s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = true\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"10s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/procstat_memory_swap_config.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/procstat_memory_swap_config.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/no_skip_log_timestamp_windows.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/no_skip_log_timestamp_windows.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_appsignals_config.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_appsignals_config.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = true\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = true\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = true\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/skip_log_timestamp_default.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/skip_log_timestamp_default.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/drop_origin_linux.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/drop_origin_linux.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_over_fallback_config.yaml"
                },
                "region": {
                  "startLine": 460,
                  "startColumn": 33,
                  "endLine": 460,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                    enabled: true\n                gcp.cloud_run.job.task_index:\n                    enabled: true\n                gcp.gce.instance.hostname:\n                    enabled: false\n                gcp.gce.instance.name:\n                    enabled: false\n",
                    "rendered": {
                      "text": "                    enabled: true\n                gcp.cloud_run.job.task_index:\n                    enabled: true\n                gcp.gce.instance.hostname:\n                    enabled: false\n                gcp.gce.instance.name:\n                    enabled: false\n",
                      "markdown": "`                    enabled: true\n                gcp.cloud_run.job.task_index:\n                    enabled: true\n                gcp.gce.instance.hostname:\n                    enabled: false\n                gcp.gce.instance.name:\n                    enabled: false\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000708"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (OS Type)",
            "id": "BD000708"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_over_fallback_config.yaml"
                },
                "region": {
                  "startLine": 576,
                  "startColumn": 16,
                  "endLine": 576,
                  "endColumn": 23,
                  "snippet": {
                    "text": "                    enabled: true\n                os.description:\n                    enabled: false\n                os.type:\n                    enabled: true\n        timeout: 2s\n        tls:\n",
                    "rendered": {
                      "text": "                    enabled: true\n                os.description:\n                    enabled: false\n                os.type:\n                    enabled: true\n        timeout: 2s\n        tls:\n",
                      "markdown": "`                    enabled: true\n                os.description:\n                    enabled: false\n                os.type:\n                    enabled: true\n        timeout: 2s\n        tls:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000708"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (OS Type)",
            "id": "BD000708"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_over_fallback_config.yaml"
                },
                "region": {
                  "startLine": 358,
                  "startColumn": 16,
                  "endLine": 358,
                  "endColumn": 23,
                  "snippet": {
                    "text": "            resource_attributes:\n                host.name:\n                    enabled: true\n                os.type:\n                    enabled: true\n        ec2:\n            resource_attributes:\n",
                    "rendered": {
                      "text": "            resource_attributes:\n                host.name:\n                    enabled: true\n                os.type:\n                    enabled: true\n        ec2:\n            resource_attributes:\n",
                      "markdown": "`            resource_attributes:\n                host.name:\n                    enabled: true\n                os.type:\n                    enabled: true\n        ec2:\n            resource_attributes:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_over_fallback_config.yaml"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 13,
                  "endLine": 352,
                  "snippet": {
                    "text": "            token_file: \"\"\n        detectors:\n            - eks\n            - env\n            - ec2\n        disable_keep_alives: false\n        docker:\n            resource_attributes:\n",
                    "rendered": {
                      "text": "            token_file: \"\"\n        detectors:\n            - eks\n            - env\n            - ec2\n        disable_keep_alives: false\n        docker:\n            resource_attributes:\n",
                      "markdown": "`            token_file: \"\"\n        detectors:\n            - eks\n            - env\n            - ec2\n        disable_keep_alives: false\n        docker:\n            resource_attributes:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_over_fallback_config.yaml"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 19,
                  "endLine": 198,
                  "snippet": {
                    "text": "            - dimensions:\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n              metric_name_selectors:\n                - service_number_of_running_pods\n            - dimensions:\n",
                    "rendered": {
                      "text": "            - dimensions:\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n              metric_name_selectors:\n                - service_number_of_running_pods\n            - dimensions:\n",
                      "markdown": "`            - dimensions:\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n              metric_name_selectors:\n                - service_number_of_running_pods\n            - dimensions:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_over_fallback_config.yaml"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 19,
                  "endLine": 144,
                  "snippet": {
                    "text": "                - - ClusterName\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n              metric_name_selectors:\n                - pod_cpu_utilization\n",
                    "rendered": {
                      "text": "                - - ClusterName\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n              metric_name_selectors:\n                - pod_cpu_utilization\n",
                      "markdown": "`                - - ClusterName\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n              metric_name_selectors:\n                - pod_cpu_utilization\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_over_fallback_config.yaml"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 19,
                  "endLine": 93,
                  "snippet": {
                    "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                - - RemoteService\n",
                    "rendered": {
                      "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                - - RemoteService\n",
                      "markdown": "`                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                - - RemoteService\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_over_fallback_config.yaml"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 19,
                  "endLine": 88,
                  "snippet": {
                    "text": "                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n",
                    "rendered": {
                      "text": "                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n",
                      "markdown": "`                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_over_fallback_config.yaml"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 19,
                  "endLine": 84,
                  "snippet": {
                    "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n",
                    "rendered": {
                      "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n",
                      "markdown": "`                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_over_fallback_config.yaml"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 19,
                  "endLine": 78,
                  "snippet": {
                    "text": "                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n",
                    "rendered": {
                      "text": "                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n",
                      "markdown": "`                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_over_fallback_config.yaml"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 19,
                  "endLine": 73,
                  "snippet": {
                    "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n",
                    "rendered": {
                      "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n",
                      "markdown": "`                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_over_fallback_config.yaml"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 19,
                  "endLine": 66,
                  "snippet": {
                    "text": "                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n",
                    "rendered": {
                      "text": "                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n",
                      "markdown": "`                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_over_fallback_config.yaml"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 19,
                  "endLine": 63,
                  "snippet": {
                    "text": "                - - Environment\n                  - RemoteEnvironment\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n",
                    "rendered": {
                      "text": "                - - Environment\n                  - RemoteEnvironment\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n",
                      "markdown": "`                - - Environment\n                  - RemoteEnvironment\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteService\n                  - Service\n                - - Environment\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_over_fallback_config.yaml"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 19,
                  "endLine": 59,
                  "snippet": {
                    "text": "                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteService\n                  - Service\n",
                    "rendered": {
                      "text": "                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteService\n                  - Service\n",
                      "markdown": "`                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - RemoteEnvironment\n                  - RemoteService\n                  - Service\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_over_fallback_config.yaml"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 19,
                  "endLine": 54,
                  "snippet": {
                    "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n",
                    "rendered": {
                      "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n",
                      "markdown": "`                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteOperation\n                  - RemoteService\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_over_fallback_config.yaml"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 19,
                  "endLine": 47,
                  "snippet": {
                    "text": "                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n",
                    "rendered": {
                      "text": "                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n",
                      "markdown": "`                  - RemoteEnvironment\n                  - RemoteOperation\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteOperation\n                  - RemoteResourceIdentifier\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_over_fallback_config.yaml"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 19,
                  "endLine": 41,
                  "snippet": {
                    "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteEnvironment\n                  - RemoteOperation\n",
                    "rendered": {
                      "text": "                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteEnvironment\n                  - RemoteOperation\n",
                      "markdown": "`                  - RemoteResourceIdentifier\n                  - RemoteResourceType\n                  - RemoteService\n                  - Service\n                - - Environment\n                  - Operation\n                  - RemoteEnvironment\n                  - RemoteOperation\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_over_fallback_config.yaml"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 19,
                  "endLine": 23,
                  "snippet": {
                    "text": "                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n                    - Telemetry.Source\n                  regex: ^(ServerSpan|LocalRootSpan)$\n",
                    "rendered": {
                      "text": "                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n                    - Telemetry.Source\n                  regex: ^(ServerSpan|LocalRootSpan)$\n",
                      "markdown": "`                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n                    - Telemetry.Source\n                  regex: ^(ServerSpan|LocalRootSpan)$\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/appsignals_over_fallback_config.yaml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 19,
                  "endLine": 21,
                  "snippet": {
                    "text": "            - dimensions:\n                - - Environment\n                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n",
                    "rendered": {
                      "text": "            - dimensions:\n                - - Environment\n                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n",
                      "markdown": "`            - dimensions:\n                - - Environment\n                  - Operation\n                  - Service\n                - - Environment\n                  - Service\n              label_matchers:\n                - label_names:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/statsd_config_windows.conf"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                    "rendered": {
                      "text": "  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n",
                      "markdown": "`  logtarget = \"lumberjack\"\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  omit_hostname = false\n  precision = \"\"\n  quiet = false\n  round_interval = false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/statsd_config_windows.conf"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                    "rendered": {
                      "text": "  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n",
                      "markdown": "`  debug = false\n  flush_interval = \"1s\"\n  flush_jitter = \"0s\"\n  hostname = \"\"\n  interval = \"60s\"\n  logfile = \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\"\n  logtarget = \"lumberjack\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/jmx_eks_config_linux.yaml"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 21,
                  "endLine": 133,
                  "snippet": {
                    "text": "                  new_label: \"\"\n                  new_value: \"\"\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.rejected_sessions\n              match_type: \"\"\n              new_name: \"\"\n",
                    "rendered": {
                      "text": "                  new_label: \"\"\n                  new_value: \"\"\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.rejected_sessions\n              match_type: \"\"\n              new_name: \"\"\n",
                      "markdown": "`                  new_label: \"\"\n                  new_value: \"\"\n              submatch_case: \"\"\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.rejected_sessions\n              match_type: \"\"\n              new_name: \"\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/jmx_eks_config_linux.yaml"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 21,
                  "endLine": 112,
                  "snippet": {
                    "text": "        traces: {}\n    metricstransform/jmx:\n        transforms:\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.sessions\n              match_type: \"\"\n              new_name: \"\"\n",
                    "rendered": {
                      "text": "        traces: {}\n    metricstransform/jmx:\n        transforms:\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.sessions\n              match_type: \"\"\n              new_name: \"\"\n",
                      "markdown": "`        traces: {}\n    metricstransform/jmx:\n        transforms:\n            - action: update\n              aggregation_type: \"\"\n              include: tomcat.sessions\n              match_type: \"\"\n              new_name: \"\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_container_insights_config.yaml"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 19,
                  "endLine": 110,
                  "snippet": {
                    "text": "            - dimensions:\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n              metric_name_selectors:\n                - service_number_of_running_pods\n            - dimensions:\n",
                    "rendered": {
                      "text": "            - dimensions:\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n              metric_name_selectors:\n                - service_number_of_running_pods\n            - dimensions:\n",
                      "markdown": "`            - dimensions:\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n              metric_name_selectors:\n                - service_number_of_running_pods\n            - dimensions:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/sampleConfig/base_container_insights_config.yaml"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 19,
                  "endLine": 56,
                  "snippet": {
                    "text": "                - - ClusterName\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n              metric_name_selectors:\n                - pod_cpu_utilization\n",
                    "rendered": {
                      "text": "                - - ClusterName\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n              metric_name_selectors:\n                - pod_cpu_utilization\n",
                      "markdown": "`                - - ClusterName\n                - - ClusterName\n                  - Namespace\n                  - Service\n                - - ClusterName\n                  - Namespace\n              metric_name_selectors:\n                - pod_cpu_utilization\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/darwin/amazon-cloudwatch-agent-ctl"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 11,
                  "endLine": 212,
                  "endColumn": 15,
                  "snippet": {
                    "text": "          #       default:    only process .tmp files\n          #       append:     process both existing files and .tmp files\n          #       remove:     only process existing files\n          # At this point, all json configs have been validated\n          # multi_config:\n          #       default:    delete non .tmp file, rename .tmp file\n          #       append:     rename .tmp file\n",
                    "rendered": {
                      "text": "          #       default:    only process .tmp files\n          #       append:     process both existing files and .tmp files\n          #       remove:     only process existing files\n          # At this point, all json configs have been validated\n          # multi_config:\n          #       default:    delete non .tmp file, rename .tmp file\n          #       append:     rename .tmp file\n",
                      "markdown": "`          #       default:    only process .tmp files\n          #       append:     process both existing files and .tmp files\n          #       remove:     only process existing files\n          # At this point, all json configs have been validated\n          # multi_config:\n          #       default:    delete non .tmp file, rename .tmp file\n          #       append:     rename .tmp file\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/darwin/amazon-cloudwatch-agent-ctl"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 34,
                  "endLine": 8,
                  "snippet": {
                    "text": "#\n# Licensed under the Amazon Software License (the \"License\").\n# You may not use this file except in compliance with the License.\n# A copy of the License is located at\n#\n#   http://aws.amazon.com/asl/\n#\n# or in the \"license\" file accompanying this file. This file is distributed\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Amazon Software License (the \"License\").\n# You may not use this file except in compliance with the License.\n# A copy of the License is located at\n#\n#   http://aws.amazon.com/asl/\n#\n# or in the \"license\" file accompanying this file. This file is distributed\n",
                      "markdown": "`#\n# Licensed under the Amazon Software License (the \"License\").\n# You may not use this file except in compliance with the License.\n# A copy of the License is located at\n#\n#   http://aws.amazon.com/asl/\n#\n# or in the \"license\" file accompanying this file. This file is distributed\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/darwin/amazon-cloudwatch-agent-ctl"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 19,
                  "endLine": 229,
                  "endColumn": 23,
                  "snippet": {
                    "text": "               done\n          elif [ \"${multi_config}\" = 'append' ]; then\n               for file in \"${JSON_DIR}\"/*.tmp; do\n                    mv -f \"${file}\" \"${JSON_DIR}/$(basename \"${file}\" .tmp)\"\n               done\n          fi\n\n",
                    "rendered": {
                      "text": "               done\n          elif [ \"${multi_config}\" = 'append' ]; then\n               for file in \"${JSON_DIR}\"/*.tmp; do\n                    mv -f \"${file}\" \"${JSON_DIR}/$(basename \"${file}\" .tmp)\"\n               done\n          fi\n\n",
                      "markdown": "`               done\n          elif [ \"${multi_config}\" = 'append' ]; then\n               for file in \"${JSON_DIR}\"/*.tmp; do\n                    mv -f \"${file}\" \"${JSON_DIR}/$(basename \"${file}\" .tmp)\"\n               done\n          fi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/darwin/amazon-cloudwatch-agent-ctl"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 24,
                  "endLine": 224,
                  "endColumn": 28,
                  "snippet": {
                    "text": "                    if [ \"${file}\" = \"${base}\" ]; then\n                         rm -f \"${file}\"\n                    else\n                         mv -f \"${file}\" \"${base}\"\n                    fi\n               done\n          elif [ \"${multi_config}\" = 'append' ]; then\n",
                    "rendered": {
                      "text": "                    if [ \"${file}\" = \"${base}\" ]; then\n                         rm -f \"${file}\"\n                    else\n                         mv -f \"${file}\" \"${base}\"\n                    fi\n               done\n          elif [ \"${multi_config}\" = 'append' ]; then\n",
                      "markdown": "`                    if [ \"${file}\" = \"${base}\" ]; then\n                         rm -f \"${file}\"\n                    else\n                         mv -f \"${file}\" \"${base}\"\n                    fi\n               done\n          elif [ \"${multi_config}\" = 'append' ]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/darwin/amazon-cloudwatch-agent-ctl"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 14,
                  "endLine": 205,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n          chmod ug+rw \"${TOML}\"\n          if [ -f \"${OTEL_YAML}\" ]; then\n               chmod ug+rw \"${OTEL_YAML}\"\n          fi\n\n          # for translator:\n",
                    "rendered": {
                      "text": "\n          chmod ug+rw \"${TOML}\"\n          if [ -f \"${OTEL_YAML}\" ]; then\n               chmod ug+rw \"${OTEL_YAML}\"\n          fi\n\n          # for translator:\n",
                      "markdown": "`\n          chmod ug+rw \"${TOML}\"\n          if [ -f \"${OTEL_YAML}\" ]; then\n               chmod ug+rw \"${OTEL_YAML}\"\n          fi\n\n          # for translator:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/darwin/amazon-cloudwatch-agent-ctl"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 9,
                  "endLine": 203,
                  "endColumn": 16,
                  "snippet": {
                    "text": "          echo \"Configuration validation second phase succeeded\"\n          echo \"Configuration validation succeeded\"\n\n          chmod ug+rw \"${TOML}\"\n          if [ -f \"${OTEL_YAML}\" ]; then\n               chmod ug+rw \"${OTEL_YAML}\"\n          fi\n",
                    "rendered": {
                      "text": "          echo \"Configuration validation second phase succeeded\"\n          echo \"Configuration validation succeeded\"\n\n          chmod ug+rw \"${TOML}\"\n          if [ -f \"${OTEL_YAML}\" ]; then\n               chmod ug+rw \"${OTEL_YAML}\"\n          fi\n",
                      "markdown": "`          echo \"Configuration validation second phase succeeded\"\n          echo \"Configuration validation succeeded\"\n\n          chmod ug+rw \"${TOML}\"\n          if [ -f \"${OTEL_YAML}\" ]; then\n               chmod ug+rw \"${OTEL_YAML}\"\n          fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/darwin/amazon-cloudwatch-agent-ctl"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 14,
                  "endLine": 197,
                  "endColumn": 19,
                  "snippet": {
                    "text": "          if ! ${runAgentSchemaTestCommand} >${CV_LOG_FILE} 2>&1; then\n               echo \"Configuration validation second phase failed\"\n               echo \"======== Error Log ========\"\n               cat ${CV_LOG_FILE}\n               exit 1\n          fi\n          echo \"Configuration validation second phase succeeded\"\n",
                    "rendered": {
                      "text": "          if ! ${runAgentSchemaTestCommand} >${CV_LOG_FILE} 2>&1; then\n               echo \"Configuration validation second phase failed\"\n               echo \"======== Error Log ========\"\n               cat ${CV_LOG_FILE}\n               exit 1\n          fi\n          echo \"Configuration validation second phase succeeded\"\n",
                      "markdown": "`          if ! ${runAgentSchemaTestCommand} >${CV_LOG_FILE} 2>&1; then\n               echo \"Configuration validation second phase failed\"\n               echo \"======== Error Log ========\"\n               cat ${CV_LOG_FILE}\n               exit 1\n          fi\n          echo \"Configuration validation second phase succeeded\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/darwin/amazon-cloudwatch-agent-ctl"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 65,
                  "endLine": 160,
                  "endColumn": 70,
                  "snippet": {
                    "text": "}\n\ncwa_pid() {\n     echo \"$({ sudo launchctl list | grep ${AGENT_LAUNCHD_NAME} | awk '{print $1}'; } 2>/dev/null)\"\n}\n\ncwa_config() {\n",
                    "rendered": {
                      "text": "}\n\ncwa_pid() {\n     echo \"$({ sudo launchctl list | grep ${AGENT_LAUNCHD_NAME} | awk '{print $1}'; } 2>/dev/null)\"\n}\n\ncwa_config() {\n",
                      "markdown": "`}\n\ncwa_pid() {\n     echo \"$({ sudo launchctl list | grep ${AGENT_LAUNCHD_NAME} | awk '{print $1}'; } 2>/dev/null)\"\n}\n\ncwa_config() {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/darwin/amazon-cloudwatch-agent-ctl"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 36,
                  "endLine": 160,
                  "endColumn": 42,
                  "snippet": {
                    "text": "}\n\ncwa_pid() {\n     echo \"$({ sudo launchctl list | grep ${AGENT_LAUNCHD_NAME} | awk '{print $1}'; } 2>/dev/null)\"\n}\n\ncwa_config() {\n",
                    "rendered": {
                      "text": "}\n\ncwa_pid() {\n     echo \"$({ sudo launchctl list | grep ${AGENT_LAUNCHD_NAME} | awk '{print $1}'; } 2>/dev/null)\"\n}\n\ncwa_config() {\n",
                      "markdown": "`}\n\ncwa_pid() {\n     echo \"$({ sudo launchctl list | grep ${AGENT_LAUNCHD_NAME} | awk '{print $1}'; } 2>/dev/null)\"\n}\n\ncwa_config() {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry_jmx_jar_test.go"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 2,
                  "endLine": 21,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\nfunc TestOpentelemetryJMXMetricsJarSHA(t *testing.T) {\n\tvar jmxMetricsGathererVersions = map[string]supportedJar{\n\t\t\"14f28b1c45e6ad91faa7f25462bfd96e6ab3b6980afe5534f92b8a4973895cbb\": {\n\t\t\tversion: \"1.37.0-fix\",\n\t\t\tjar:     \"JMX metrics gatherer w/ Tomcat metrics fix\",\n\t\t},\n",
                    "rendered": {
                      "text": "\nfunc TestOpentelemetryJMXMetricsJarSHA(t *testing.T) {\n\tvar jmxMetricsGathererVersions = map[string]supportedJar{\n\t\t\"14f28b1c45e6ad91faa7f25462bfd96e6ab3b6980afe5534f92b8a4973895cbb\": {\n\t\t\tversion: \"1.37.0-fix\",\n\t\t\tjar:     \"JMX metrics gatherer w/ Tomcat metrics fix\",\n\t\t},\n",
                      "markdown": "`\nfunc TestOpentelemetryJMXMetricsJarSHA(t *testing.T) {\n\tvar jmxMetricsGathererVersions = map[string]supportedJar{\n\t\t\"14f28b1c45e6ad91faa7f25462bfd96e6ab3b6980afe5534f92b8a4973895cbb\": {\n\t\t\tversion: \"1.37.0-fix\",\n\t\t\tjar:     \"JMX metrics gatherer w/ Tomcat metrics fix\",\n\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/META-INF/services/org.codehaus.groovy.transform.ASTTransformation"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 52,
                  "endLine": 7,
                  "snippet": {
                    "text": "# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 429,
                  "startColumn": 43,
                  "endLine": 429,
                  "endColumn": 54,
                  "snippet": {
                    "text": "      - name: Import GPG Key\n        uses: crazy-max/ghaction-import-gpg@v5\n        with:\n          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}\n          passphrase: ${{ secrets.PASSPHRASE }}\n\n      - name: Sign Build Files\n",
                    "rendered": {
                      "text": "      - name: Import GPG Key\n        uses: crazy-max/ghaction-import-gpg@v5\n        with:\n          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}\n          passphrase: ${{ secrets.PASSPHRASE }}\n\n      - name: Sign Build Files\n",
                      "markdown": "`      - name: Import GPG Key\n        uses: crazy-max/ghaction-import-gpg@v5\n        with:\n          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}\n          passphrase: ${{ secrets.PASSPHRASE }}\n\n      - name: Sign Build Files\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 429,
                  "startColumn": 14,
                  "endLine": 429,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      - name: Import GPG Key\n        uses: crazy-max/ghaction-import-gpg@v5\n        with:\n          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}\n          passphrase: ${{ secrets.PASSPHRASE }}\n\n      - name: Sign Build Files\n",
                    "rendered": {
                      "text": "      - name: Import GPG Key\n        uses: crazy-max/ghaction-import-gpg@v5\n        with:\n          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}\n          passphrase: ${{ secrets.PASSPHRASE }}\n\n      - name: Sign Build Files\n",
                      "markdown": "`      - name: Import GPG Key\n        uses: crazy-max/ghaction-import-gpg@v5\n        with:\n          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}\n          passphrase: ${{ secrets.PASSPHRASE }}\n\n      - name: Sign Build Files\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 438,
                  "startColumn": 16,
                  "endLine": 438,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      - name: Upload to s3\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_sig.outputs.cache-hit == false\n        run: |\n          aws s3 cp packages/amazon-cloudwatch-agent.msi.sig s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.PackageBucketKey }}/amazon-cloudwatch-agent.msi.sig\n",
                    "rendered": {
                      "text": "      - name: Upload to s3\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_sig.outputs.cache-hit == false\n        run: |\n          aws s3 cp packages/amazon-cloudwatch-agent.msi.sig s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.PackageBucketKey }}/amazon-cloudwatch-agent.msi.sig\n",
                      "markdown": "`      - name: Upload to s3\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_sig.outputs.cache-hit == false\n        run: |\n          aws s3 cp packages/amazon-cloudwatch-agent.msi.sig s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.PackageBucketKey }}/amazon-cloudwatch-agent.msi.sig\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 425,
                  "startColumn": 16,
                  "endLine": 425,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        run: |\n          mkdir -p packages/amd64\n          mkdir packages/arm64\n          aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.PackageBucketKey }}/amazon-cloudwatch-agent.msi ./packages/amazon-cloudwatch-agent.msi\n      - name: Import GPG Key\n        uses: crazy-max/ghaction-import-gpg@v5\n        with:\n",
                    "rendered": {
                      "text": "        run: |\n          mkdir -p packages/amd64\n          mkdir packages/arm64\n          aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.PackageBucketKey }}/amazon-cloudwatch-agent.msi ./packages/amazon-cloudwatch-agent.msi\n      - name: Import GPG Key\n        uses: crazy-max/ghaction-import-gpg@v5\n        with:\n",
                      "markdown": "`        run: |\n          mkdir -p packages/amd64\n          mkdir packages/arm64\n          aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.PackageBucketKey }}/amazon-cloudwatch-agent.msi ./packages/amazon-cloudwatch-agent.msi\n      - name: Import GPG Key\n        uses: crazy-max/ghaction-import-gpg@v5\n        with:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 394,
                  "startColumn": 9,
                  "endLine": 394,
                  "endColumn": 17,
                  "snippet": {
                    "text": "          docker buildx imagetools inspect --raw $REGISTRY/$REPOSITORYWindows | jq '.manifests[0]' > 2019.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOSITORYWindows | jq '.manifests[1]' > 2022.json\n\n          docker buildx imagetools create -f linux-amd.json -f linux-arm.json -f 2019.json -f 2022.json --tag $REGISTRY/$OrigREPOSITORY\n\n  #GH actions set up gpg only works on ubuntu as of this commit date\n  GPGSignWindowsPackage:\n",
                    "rendered": {
                      "text": "          docker buildx imagetools inspect --raw $REGISTRY/$REPOSITORYWindows | jq '.manifests[0]' > 2019.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOSITORYWindows | jq '.manifests[1]' > 2022.json\n\n          docker buildx imagetools create -f linux-amd.json -f linux-arm.json -f 2019.json -f 2022.json --tag $REGISTRY/$OrigREPOSITORY\n\n  #GH actions set up gpg only works on ubuntu as of this commit date\n  GPGSignWindowsPackage:\n",
                      "markdown": "`          docker buildx imagetools inspect --raw $REGISTRY/$REPOSITORYWindows | jq '.manifests[0]' > 2019.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOSITORYWindows | jq '.manifests[1]' > 2022.json\n\n          docker buildx imagetools create -f linux-amd.json -f linux-arm.json -f 2019.json -f 2022.json --tag $REGISTRY/$OrigREPOSITORY\n\n  #GH actions set up gpg only works on ubuntu as of this commit date\n  GPGSignWindowsPackage:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 392,
                  "startColumn": 9,
                  "endLine": 392,
                  "endColumn": 17,
                  "snippet": {
                    "text": "          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxAmd | jq '.manifests[0]' > linux-amd.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxArm | jq '.manifests[0]' > linux-arm.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOSITORYWindows | jq '.manifests[0]' > 2019.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOSITORYWindows | jq '.manifests[1]' > 2022.json\n\n          docker buildx imagetools create -f linux-amd.json -f linux-arm.json -f 2019.json -f 2022.json --tag $REGISTRY/$OrigREPOSITORY\n\n",
                    "rendered": {
                      "text": "          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxAmd | jq '.manifests[0]' > linux-amd.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxArm | jq '.manifests[0]' > linux-arm.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOSITORYWindows | jq '.manifests[0]' > 2019.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOSITORYWindows | jq '.manifests[1]' > 2022.json\n\n          docker buildx imagetools create -f linux-amd.json -f linux-arm.json -f 2019.json -f 2022.json --tag $REGISTRY/$OrigREPOSITORY\n\n",
                      "markdown": "`          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxAmd | jq '.manifests[0]' > linux-amd.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxArm | jq '.manifests[0]' > linux-arm.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOSITORYWindows | jq '.manifests[0]' > 2019.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOSITORYWindows | jq '.manifests[1]' > 2022.json\n\n          docker buildx imagetools create -f linux-amd.json -f linux-arm.json -f 2019.json -f 2022.json --tag $REGISTRY/$OrigREPOSITORY\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 391,
                  "startColumn": 9,
                  "endLine": 391,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxAmd | jq '.manifests[0]' > linux-amd.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxArm | jq '.manifests[0]' > linux-arm.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOSITORYWindows | jq '.manifests[0]' > 2019.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOSITORYWindows | jq '.manifests[1]' > 2022.json\n\n          docker buildx imagetools create -f linux-amd.json -f linux-arm.json -f 2019.json -f 2022.json --tag $REGISTRY/$OrigREPOSITORY\n",
                    "rendered": {
                      "text": "\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxAmd | jq '.manifests[0]' > linux-amd.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxArm | jq '.manifests[0]' > linux-arm.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOSITORYWindows | jq '.manifests[0]' > 2019.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOSITORYWindows | jq '.manifests[1]' > 2022.json\n\n          docker buildx imagetools create -f linux-amd.json -f linux-arm.json -f 2019.json -f 2022.json --tag $REGISTRY/$OrigREPOSITORY\n",
                      "markdown": "`\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxAmd | jq '.manifests[0]' > linux-amd.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxArm | jq '.manifests[0]' > linux-arm.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOSITORYWindows | jq '.manifests[0]' > 2019.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOSITORYWindows | jq '.manifests[1]' > 2022.json\n\n          docker buildx imagetools create -f linux-amd.json -f linux-arm.json -f 2019.json -f 2022.json --tag $REGISTRY/$OrigREPOSITORY\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 390,
                  "startColumn": 9,
                  "endLine": 390,
                  "endColumn": 17,
                  "snippet": {
                    "text": "          docker manifest push $REGISTRY/$REPOSITORYWindows\n\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxAmd | jq '.manifests[0]' > linux-amd.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxArm | jq '.manifests[0]' > linux-arm.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOSITORYWindows | jq '.manifests[0]' > 2019.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOSITORYWindows | jq '.manifests[1]' > 2022.json\n\n",
                    "rendered": {
                      "text": "          docker manifest push $REGISTRY/$REPOSITORYWindows\n\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxAmd | jq '.manifests[0]' > linux-amd.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxArm | jq '.manifests[0]' > linux-arm.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOSITORYWindows | jq '.manifests[0]' > 2019.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOSITORYWindows | jq '.manifests[1]' > 2022.json\n\n",
                      "markdown": "`          docker manifest push $REGISTRY/$REPOSITORYWindows\n\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxAmd | jq '.manifests[0]' > linux-amd.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxArm | jq '.manifests[0]' > linux-arm.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOSITORYWindows | jq '.manifests[0]' > 2019.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOSITORYWindows | jq '.manifests[1]' > 2022.json\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 389,
                  "startColumn": 9,
                  "endLine": 389,
                  "endColumn": 17,
                  "snippet": {
                    "text": " contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        run: |\n          docker manifest create $REGISTRY/$REPOSITORYWindows --amend $REGISTRY/$REPO2022 --amend $REGISTRY/$REPO2019\n          docker manifest push $REGISTRY/$REPOSITORYWindows\n\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxAmd | jq '.manifests[0]' > linux-amd.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxArm | jq '.manifests[0]' > linux-arm.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOSITORYWindows | jq '.manifests[",
                    "rendered": {
                      "text": " contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        run: |\n          docker manifest create $REGISTRY/$REPOSITORYWindows --amend $REGISTRY/$REPO2022 --amend $REGISTRY/$REPO2019\n          docker manifest push $REGISTRY/$REPOSITORYWindows\n\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxAmd | jq '.manifests[0]' > linux-amd.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxArm | jq '.manifests[0]' > linux-arm.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOSITORYWindows | jq '.manifests[",
                      "markdown": "` contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        run: |\n          docker manifest create $REGISTRY/$REPOSITORYWindows --amend $REGISTRY/$REPO2022 --amend $REGISTRY/$REPO2019\n          docker manifest push $REGISTRY/$REPOSITORYWindows\n\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxAmd | jq '.manifests[0]' > linux-amd.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxArm | jq '.manifests[0]' > linux-arm.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOSITORYWindows | jq '.manifests[`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 387,
                  "startColumn": 9,
                  "endLine": 387,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        run: |\n          docker manifest create $REGISTRY/$REPOSITORYWindows --amend $REGISTRY/$REPO2022 --amend $REGISTRY/$REPO2019\n          docker manifest push $REGISTRY/$REPOSITORYWindows\n\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxAmd | jq '.manifests[0]' > linux-amd.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxArm | jq '.manifests[0]' > linux-arm.json\n",
                    "rendered": {
                      "text": "        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        run: |\n          docker manifest create $REGISTRY/$REPOSITORYWindows --amend $REGISTRY/$REPO2022 --amend $REGISTRY/$REPO2019\n          docker manifest push $REGISTRY/$REPOSITORYWindows\n\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxAmd | jq '.manifests[0]' > linux-amd.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxArm | jq '.manifests[0]' > linux-arm.json\n",
                      "markdown": "`        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        run: |\n          docker manifest create $REGISTRY/$REPOSITORYWindows --amend $REGISTRY/$REPO2022 --amend $REGISTRY/$REPO2019\n          docker manifest push $REGISTRY/$REPOSITORYWindows\n\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxAmd | jq '.manifests[0]' > linux-amd.json\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxArm | jq '.manifests[0]' > linux-arm.json\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 386,
                  "startColumn": 9,
                  "endLine": 386,
                  "endColumn": 17,
                  "snippet": {
                    "text": "          REPOLinuxArm: ${{ steps.repo_name.outputs.ContainerRepositoryName }}:linux-arm64\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        run: |\n          docker manifest create $REGISTRY/$REPOSITORYWindows --amend $REGISTRY/$REPO2022 --amend $REGISTRY/$REPO2019\n          docker manifest push $REGISTRY/$REPOSITORYWindows\n\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxAmd | jq '.manifests[0]' > linux-amd.json\n",
                    "rendered": {
                      "text": "          REPOLinuxArm: ${{ steps.repo_name.outputs.ContainerRepositoryName }}:linux-arm64\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        run: |\n          docker manifest create $REGISTRY/$REPOSITORYWindows --amend $REGISTRY/$REPO2022 --amend $REGISTRY/$REPO2019\n          docker manifest push $REGISTRY/$REPOSITORYWindows\n\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxAmd | jq '.manifests[0]' > linux-amd.json\n",
                      "markdown": "`          REPOLinuxArm: ${{ steps.repo_name.outputs.ContainerRepositoryName }}:linux-arm64\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        run: |\n          docker manifest create $REGISTRY/$REPOSITORYWindows --amend $REGISTRY/$REPO2022 --amend $REGISTRY/$REPO2019\n          docker manifest push $REGISTRY/$REPOSITORYWindows\n\n          docker buildx imagetools inspect --raw $REGISTRY/$REPOLinuxAmd | jq '.manifests[0]' > linux-amd.json\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 371,
                  "startColumn": 57,
                  "endLine": 371,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        env:\n          ContainerRepositoryNameAndTag: ${{ inputs.ContainerRepositoryNameAndTag }}\n        run: |\n          RepoName=`echo $ContainerRepositoryNameAndTag | awk -F: '{print $1}'`\n          echo \"::set-output name=ContainerRepositoryName::$RepoName\"\n\n      - name: Create manifest and push\n",
                    "rendered": {
                      "text": "        env:\n          ContainerRepositoryNameAndTag: ${{ inputs.ContainerRepositoryNameAndTag }}\n        run: |\n          RepoName=`echo $ContainerRepositoryNameAndTag | awk -F: '{print $1}'`\n          echo \"::set-output name=ContainerRepositoryName::$RepoName\"\n\n      - name: Create manifest and push\n",
                      "markdown": "`        env:\n          ContainerRepositoryNameAndTag: ${{ inputs.ContainerRepositoryNameAndTag }}\n        run: |\n          RepoName=`echo $ContainerRepositoryNameAndTag | awk -F: '{print $1}'`\n          echo \"::set-output name=ContainerRepositoryName::$RepoName\"\n\n      - name: Create manifest and push\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 362,
                  "startColumn": 20,
                  "endLine": 362,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        id: login-ecr\n        uses: aws-actions/amazon-ecr-login@v2\n\n      - name: Set up Docker Buildx\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        uses: docker/setup-buildx-action@v3\n\n",
                    "rendered": {
                      "text": "        id: login-ecr\n        uses: aws-actions/amazon-ecr-login@v2\n\n      - name: Set up Docker Buildx\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        uses: docker/setup-buildx-action@v3\n\n",
                      "markdown": "`        id: login-ecr\n        uses: aws-actions/amazon-ecr-login@v2\n\n      - name: Set up Docker Buildx\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        uses: docker/setup-buildx-action@v3\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 349,
                  "startColumn": 29,
                  "endLine": 350,
                  "snippet": {
                    "text": "          fetch-depth: 0\n\n      - name: Install rpm\n        run: sudo apt install rpm\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n        with:\n",
                    "rendered": {
                      "text": "          fetch-depth: 0\n\n      - name: Install rpm\n        run: sudo apt install rpm\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n        with:\n",
                      "markdown": "`          fetch-depth: 0\n\n      - name: Install rpm\n        run: sudo apt install rpm\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n        with:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 349,
                  "startColumn": 17,
                  "endLine": 349,
                  "endColumn": 22,
                  "snippet": {
                    "text": "          fetch-depth: 0\n\n      - name: Install rpm\n        run: sudo apt install rpm\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                    "rendered": {
                      "text": "          fetch-depth: 0\n\n      - name: Install rpm\n        run: sudo apt install rpm\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                      "markdown": "`          fetch-depth: 0\n\n      - name: Install rpm\n        run: sudo apt install rpm\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 21,
                  "endLine": 349,
                  "snippet": {
                    "text": "        with:\n          fetch-depth: 0\n\n      - name: Install rpm\n        run: sudo apt install rpm\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                    "rendered": {
                      "text": "        with:\n          fetch-depth: 0\n\n      - name: Install rpm\n        run: sudo apt install rpm\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                      "markdown": "`        with:\n          fetch-depth: 0\n\n      - name: Install rpm\n        run: sudo apt install rpm\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 334,
                  "startColumn": 9,
                  "endLine": 334,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        run: |\n          Write-Output \"$env:REGISTRY/$env:REPOSITORY\"\n          docker build --platform windows/amd64 -f ./amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localmsi/Dockerfile.Windows --build-arg IMAGE_TAG=ltsc2019 . -t $env:REGISTRY/$env:REPOSITORY\n          docker push $env:REGISTRY/$env:REPOSITORY\n\n  CreateContainerManifest:\n    name: 'CreateManifest'\n",
                    "rendered": {
                      "text": "        run: |\n          Write-Output \"$env:REGISTRY/$env:REPOSITORY\"\n          docker build --platform windows/amd64 -f ./amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localmsi/Dockerfile.Windows --build-arg IMAGE_TAG=ltsc2019 . -t $env:REGISTRY/$env:REPOSITORY\n          docker push $env:REGISTRY/$env:REPOSITORY\n\n  CreateContainerManifest:\n    name: 'CreateManifest'\n",
                      "markdown": "`        run: |\n          Write-Output \"$env:REGISTRY/$env:REPOSITORY\"\n          docker build --platform windows/amd64 -f ./amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localmsi/Dockerfile.Windows --build-arg IMAGE_TAG=ltsc2019 . -t $env:REGISTRY/$env:REPOSITORY\n          docker push $env:REGISTRY/$env:REPOSITORY\n\n  CreateContainerManifest:\n    name: 'CreateManifest'\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 9,
                  "endLine": 333,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        if: contains(inputs.BucketKey, 'test') == false || steps.cached_msi.outputs.cache-hit == false\n        run: |\n          Write-Output \"$env:REGISTRY/$env:REPOSITORY\"\n          docker build --platform windows/amd64 -f ./amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localmsi/Dockerfile.Windows --build-arg IMAGE_TAG=ltsc2019 . -t $env:REGISTRY/$env:REPOSITORY\n          docker push $env:REGISTRY/$env:REPOSITORY\n\n  CreateContainerManifest:\n",
                    "rendered": {
                      "text": "        if: contains(inputs.BucketKey, 'test') == false || steps.cached_msi.outputs.cache-hit == false\n        run: |\n          Write-Output \"$env:REGISTRY/$env:REPOSITORY\"\n          docker build --platform windows/amd64 -f ./amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localmsi/Dockerfile.Windows --build-arg IMAGE_TAG=ltsc2019 . -t $env:REGISTRY/$env:REPOSITORY\n          docker push $env:REGISTRY/$env:REPOSITORY\n\n  CreateContainerManifest:\n",
                      "markdown": "`        if: contains(inputs.BucketKey, 'test') == false || steps.cached_msi.outputs.cache-hit == false\n        run: |\n          Write-Output \"$env:REGISTRY/$env:REPOSITORY\"\n          docker build --platform windows/amd64 -f ./amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localmsi/Dockerfile.Windows --build-arg IMAGE_TAG=ltsc2019 . -t $env:REGISTRY/$env:REPOSITORY\n          docker push $env:REGISTRY/$env:REPOSITORY\n\n  CreateContainerManifest:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 9,
                  "endLine": 316,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        run: |\n          pwd\n          mkdir amd64\n          cp -r buildMSI/msi_dep/amazon-cloudwatch-agent.msi amd64/\n\n      - name: Get ECR Repo name\n        id: repo_name\n",
                    "rendered": {
                      "text": "        run: |\n          pwd\n          mkdir amd64\n          cp -r buildMSI/msi_dep/amazon-cloudwatch-agent.msi amd64/\n\n      - name: Get ECR Repo name\n        id: repo_name\n",
                      "markdown": "`        run: |\n          pwd\n          mkdir amd64\n          cp -r buildMSI/msi_dep/amazon-cloudwatch-agent.msi amd64/\n\n      - name: Get ECR Repo name\n        id: repo_name\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 9,
                  "endLine": 292,
                  "endColumn": 15,
                  "snippet": {
                    "text": "      - name: Create msi\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_msi.outputs.cache-hit == false\n        run : |\n          curl -OLS https://github.com/wixtoolset/wix3/releases/download/wix314rtm/wix314.exe\n          .\\wix314.exe /install /quiet /norestart\n          $wixToolsetBinPath = \";C:\\Program Files (x86)\\WiX Toolset v3.14\\bin;\"\n          $env:PATH = $env:PATH + $wixToolsetBinPath\n",
                    "rendered": {
                      "text": "      - name: Create msi\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_msi.outputs.cache-hit == false\n        run : |\n          curl -OLS https://github.com/wixtoolset/wix3/releases/download/wix314rtm/wix314.exe\n          .\\wix314.exe /install /quiet /norestart\n          $wixToolsetBinPath = \";C:\\Program Files (x86)\\WiX Toolset v3.14\\bin;\"\n          $env:PATH = $env:PATH + $wixToolsetBinPath\n",
                      "markdown": "`      - name: Create msi\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_msi.outputs.cache-hit == false\n        run : |\n          curl -OLS https://github.com/wixtoolset/wix3/releases/download/wix314rtm/wix314.exe\n          .\\wix314.exe /install /quiet /norestart\n          $wixToolsetBinPath = \";C:\\Program Files (x86)\\WiX Toolset v3.14\\bin;\"\n          $env:PATH = $env:PATH + $wixToolsetBinPath\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 287,
                  "startColumn": 19,
                  "endLine": 287,
                  "endColumn": 23,
                  "snippet": {
                    "text": "      # Using the env variable returns \"\" for bucket name thus use the secret\n      - name: Copy msi\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_msi.outputs.cache-hit == false\n        run: aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }}/buildMSI.zip .\n\n      - name: Create msi\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_msi.outputs.cache-hit == false\n",
                    "rendered": {
                      "text": "      # Using the env variable returns \"\" for bucket name thus use the secret\n      - name: Copy msi\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_msi.outputs.cache-hit == false\n        run: aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }}/buildMSI.zip .\n\n      - name: Create msi\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_msi.outputs.cache-hit == false\n",
                      "markdown": "`      # Using the env variable returns \"\" for bucket name thus use the secret\n      - name: Copy msi\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_msi.outputs.cache-hit == false\n        run: aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }}/buildMSI.zip .\n\n      - name: Create msi\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_msi.outputs.cache-hit == false\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 17,
                  "endLine": 284,
                  "endColumn": 22,
                  "snippet": {
                    "text": "          key: \"cached_msi_${{ github.sha }}\"\n          path: go.mod\n\n      # Using the env variable returns \"\" for bucket name thus use the secret\n      - name: Copy msi\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_msi.outputs.cache-hit == false\n        run: aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }}/buildMSI.zip .\n",
                    "rendered": {
                      "text": "          key: \"cached_msi_${{ github.sha }}\"\n          path: go.mod\n\n      # Using the env variable returns \"\" for bucket name thus use the secret\n      - name: Copy msi\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_msi.outputs.cache-hit == false\n        run: aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }}/buildMSI.zip .\n",
                      "markdown": "`          key: \"cached_msi_${{ github.sha }}\"\n          path: go.mod\n\n      # Using the env variable returns \"\" for bucket name thus use the secret\n      - name: Copy msi\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_msi.outputs.cache-hit == false\n        run: aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }}/buildMSI.zip .\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 9,
                  "endLine": 259,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        run: |\n          Write-Output \"$env:REGISTRY/$env:REPOSITORY\"\n          docker build --platform windows/amd64 -f ./amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localmsi/Dockerfile.Windows . -t $env:REGISTRY/$env:REPOSITORY\n          docker push $env:REGISTRY/$env:REPOSITORY\n\n  BuildMSI-2019:\n    name: 'BuildMSI-2019'\n",
                    "rendered": {
                      "text": "        run: |\n          Write-Output \"$env:REGISTRY/$env:REPOSITORY\"\n          docker build --platform windows/amd64 -f ./amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localmsi/Dockerfile.Windows . -t $env:REGISTRY/$env:REPOSITORY\n          docker push $env:REGISTRY/$env:REPOSITORY\n\n  BuildMSI-2019:\n    name: 'BuildMSI-2019'\n",
                      "markdown": "`        run: |\n          Write-Output \"$env:REGISTRY/$env:REPOSITORY\"\n          docker build --platform windows/amd64 -f ./amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localmsi/Dockerfile.Windows . -t $env:REGISTRY/$env:REPOSITORY\n          docker push $env:REGISTRY/$env:REPOSITORY\n\n  BuildMSI-2019:\n    name: 'BuildMSI-2019'\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 9,
                  "endLine": 258,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        if: contains(inputs.BucketKey, 'test') == false || steps.cached_msi.outputs.cache-hit == false\n        run: |\n          Write-Output \"$env:REGISTRY/$env:REPOSITORY\"\n          docker build --platform windows/amd64 -f ./amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localmsi/Dockerfile.Windows . -t $env:REGISTRY/$env:REPOSITORY\n          docker push $env:REGISTRY/$env:REPOSITORY\n\n  BuildMSI-2019:\n",
                    "rendered": {
                      "text": "        if: contains(inputs.BucketKey, 'test') == false || steps.cached_msi.outputs.cache-hit == false\n        run: |\n          Write-Output \"$env:REGISTRY/$env:REPOSITORY\"\n          docker build --platform windows/amd64 -f ./amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localmsi/Dockerfile.Windows . -t $env:REGISTRY/$env:REPOSITORY\n          docker push $env:REGISTRY/$env:REPOSITORY\n\n  BuildMSI-2019:\n",
                      "markdown": "`        if: contains(inputs.BucketKey, 'test') == false || steps.cached_msi.outputs.cache-hit == false\n        run: |\n          Write-Output \"$env:REGISTRY/$env:REPOSITORY\"\n          docker build --platform windows/amd64 -f ./amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localmsi/Dockerfile.Windows . -t $env:REGISTRY/$env:REPOSITORY\n          docker push $env:REGISTRY/$env:REPOSITORY\n\n  BuildMSI-2019:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 9,
                  "endLine": 241,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        run: |\n          pwd\n          mkdir amd64\n          cp -r buildMSI/msi_dep/amazon-cloudwatch-agent.msi amd64/\n\n      - name: Get ECR Repo name\n        id: repo_name\n",
                    "rendered": {
                      "text": "        run: |\n          pwd\n          mkdir amd64\n          cp -r buildMSI/msi_dep/amazon-cloudwatch-agent.msi amd64/\n\n      - name: Get ECR Repo name\n        id: repo_name\n",
                      "markdown": "`        run: |\n          pwd\n          mkdir amd64\n          cp -r buildMSI/msi_dep/amazon-cloudwatch-agent.msi amd64/\n\n      - name: Get ECR Repo name\n        id: repo_name\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 9,
                  "endLine": 217,
                  "endColumn": 15,
                  "snippet": {
                    "text": "      - name: Create msi\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_msi.outputs.cache-hit == false\n        run: |\n          curl -OLS https://github.com/wixtoolset/wix3/releases/download/wix314rtm/wix314.exe\n          .\\wix314.exe /install /quiet /norestart\n          $wixToolsetBinPath = \";C:\\Program Files (x86)\\WiX Toolset v3.14\\bin;\"\n          $env:PATH = $env:PATH + $wixToolsetBinPath\n",
                    "rendered": {
                      "text": "      - name: Create msi\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_msi.outputs.cache-hit == false\n        run: |\n          curl -OLS https://github.com/wixtoolset/wix3/releases/download/wix314rtm/wix314.exe\n          .\\wix314.exe /install /quiet /norestart\n          $wixToolsetBinPath = \";C:\\Program Files (x86)\\WiX Toolset v3.14\\bin;\"\n          $env:PATH = $env:PATH + $wixToolsetBinPath\n",
                      "markdown": "`      - name: Create msi\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_msi.outputs.cache-hit == false\n        run: |\n          curl -OLS https://github.com/wixtoolset/wix3/releases/download/wix314rtm/wix314.exe\n          .\\wix314.exe /install /quiet /norestart\n          $wixToolsetBinPath = \";C:\\Program Files (x86)\\WiX Toolset v3.14\\bin;\"\n          $env:PATH = $env:PATH + $wixToolsetBinPath\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 19,
                  "endLine": 212,
                  "endColumn": 23,
                  "snippet": {
                    "text": "      # Using the env variable returns \"\" for bucket name thus use the secret\n      - name: Copy msi\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_msi.outputs.cache-hit == false\n        run: aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }}/buildMSI.zip .\n\n      - name: Create msi\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_msi.outputs.cache-hit == false\n",
                    "rendered": {
                      "text": "      # Using the env variable returns \"\" for bucket name thus use the secret\n      - name: Copy msi\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_msi.outputs.cache-hit == false\n        run: aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }}/buildMSI.zip .\n\n      - name: Create msi\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_msi.outputs.cache-hit == false\n",
                      "markdown": "`      # Using the env variable returns \"\" for bucket name thus use the secret\n      - name: Copy msi\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_msi.outputs.cache-hit == false\n        run: aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }}/buildMSI.zip .\n\n      - name: Create msi\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_msi.outputs.cache-hit == false\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 17,
                  "endLine": 209,
                  "endColumn": 22,
                  "snippet": {
                    "text": "          key: \"cached_msi_${{ github.sha }}\"\n          path: go.mod\n\n      # Using the env variable returns \"\" for bucket name thus use the secret\n      - name: Copy msi\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_msi.outputs.cache-hit == false\n        run: aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }}/buildMSI.zip .\n",
                    "rendered": {
                      "text": "          key: \"cached_msi_${{ github.sha }}\"\n          path: go.mod\n\n      # Using the env variable returns \"\" for bucket name thus use the secret\n      - name: Copy msi\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_msi.outputs.cache-hit == false\n        run: aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }}/buildMSI.zip .\n",
                      "markdown": "`          key: \"cached_msi_${{ github.sha }}\"\n          path: go.mod\n\n      # Using the env variable returns \"\" for bucket name thus use the secret\n      - name: Copy msi\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_msi.outputs.cache-hit == false\n        run: aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }}/buildMSI.zip .\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 19,
                  "endLine": 184,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n      - name: Upload zip\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_win_zip.outputs.cache-hit == false\n        run: aws s3 cp buildMSI.zip s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }}/buildMSI.zip\n\n  BuildMSI-2022:\n    name: 'BuildMSI-2022'\n",
                    "rendered": {
                      "text": "\n      - name: Upload zip\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_win_zip.outputs.cache-hit == false\n        run: aws s3 cp buildMSI.zip s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }}/buildMSI.zip\n\n  BuildMSI-2022:\n    name: 'BuildMSI-2022'\n",
                      "markdown": "`\n      - name: Upload zip\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_win_zip.outputs.cache-hit == false\n        run: aws s3 cp buildMSI.zip s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }}/buildMSI.zip\n\n  BuildMSI-2022:\n    name: 'BuildMSI-2022'\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 14,
                  "endLine": 179,
                  "endColumn": 19,
                  "snippet": {
                    "text": "      - name: Zip\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_win_zip.outputs.cache-hit == false\n        run: |\n          sudo apt install zip\n          zip buildMSI.zip msi_dep/*\n\n      - name: Upload zip\n",
                    "rendered": {
                      "text": "      - name: Zip\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_win_zip.outputs.cache-hit == false\n        run: |\n          sudo apt install zip\n          zip buildMSI.zip msi_dep/*\n\n      - name: Upload zip\n",
                      "markdown": "`      - name: Zip\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_win_zip.outputs.cache-hit == false\n        run: |\n          sudo apt install zip\n          zip buildMSI.zip msi_dep/*\n\n      - name: Upload zip\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 9,
                  "endLine": 172,
                  "endColumn": 13,
                  "snippet": {
                    "text": "          echo cw agent version $version\n          mkdir msi_dep\n          cp -r msi/tools/. msi_dep/\n          cp -r windows-agent/amazon-cloudwatch-agent/. msi_dep/\n          go run msi/tools/msiversion/msiversionconverter.go $version msi_dep/amazon-cloudwatch-agent.wxs '<version>'\n          go run msi/tools/msiversion/msiversionconverter.go $version msi_dep/manifest.json __VERSION__\n\n",
                    "rendered": {
                      "text": "          echo cw agent version $version\n          mkdir msi_dep\n          cp -r msi/tools/. msi_dep/\n          cp -r windows-agent/amazon-cloudwatch-agent/. msi_dep/\n          go run msi/tools/msiversion/msiversionconverter.go $version msi_dep/amazon-cloudwatch-agent.wxs '<version>'\n          go run msi/tools/msiversion/msiversionconverter.go $version msi_dep/manifest.json __VERSION__\n\n",
                      "markdown": "`          echo cw agent version $version\n          mkdir msi_dep\n          cp -r msi/tools/. msi_dep/\n          cp -r windows-agent/amazon-cloudwatch-agent/. msi_dep/\n          go run msi/tools/msiversion/msiversionconverter.go $version msi_dep/amazon-cloudwatch-agent.wxs '<version>'\n          go run msi/tools/msiversion/msiversionconverter.go $version msi_dep/manifest.json __VERSION__\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 9,
                  "endLine": 171,
                  "endColumn": 13,
                  "snippet": {
                    "text": "          export version=$(cat CWAGENT_VERSION)\n          echo cw agent version $version\n          mkdir msi_dep\n          cp -r msi/tools/. msi_dep/\n          cp -r windows-agent/amazon-cloudwatch-agent/. msi_dep/\n          go run msi/tools/msiversion/msiversionconverter.go $version msi_dep/amazon-cloudwatch-agent.wxs '<version>'\n          go run msi/tools/msiversion/msiversionconverter.go $version msi_dep/manifest.json __VERSION__\n",
                    "rendered": {
                      "text": "          export version=$(cat CWAGENT_VERSION)\n          echo cw agent version $version\n          mkdir msi_dep\n          cp -r msi/tools/. msi_dep/\n          cp -r windows-agent/amazon-cloudwatch-agent/. msi_dep/\n          go run msi/tools/msiversion/msiversionconverter.go $version msi_dep/amazon-cloudwatch-agent.wxs '<version>'\n          go run msi/tools/msiversion/msiversionconverter.go $version msi_dep/manifest.json __VERSION__\n",
                      "markdown": "`          export version=$(cat CWAGENT_VERSION)\n          echo cw agent version $version\n          mkdir msi_dep\n          cp -r msi/tools/. msi_dep/\n          cp -r windows-agent/amazon-cloudwatch-agent/. msi_dep/\n          go run msi/tools/msiversion/msiversionconverter.go $version msi_dep/amazon-cloudwatch-agent.wxs '<version>'\n          go run msi/tools/msiversion/msiversionconverter.go $version msi_dep/manifest.json __VERSION__\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 14,
                  "endLine": 163,
                  "endColumn": 19,
                  "snippet": {
                    "text": "      - name: Unzip\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_win_zip.outputs.cache-hit == false\n        run: |\n          sudo apt install unzip\n          unzip windows/amd64/amazon-cloudwatch-agent.zip -d windows-agent\n      - name: Create msi dep folder and copy deps\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_win_zip.outputs.cache-hit == false\n",
                    "rendered": {
                      "text": "      - name: Unzip\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_win_zip.outputs.cache-hit == false\n        run: |\n          sudo apt install unzip\n          unzip windows/amd64/amazon-cloudwatch-agent.zip -d windows-agent\n      - name: Create msi dep folder and copy deps\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_win_zip.outputs.cache-hit == false\n",
                      "markdown": "`      - name: Unzip\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_win_zip.outputs.cache-hit == false\n        run: |\n          sudo apt install unzip\n          unzip windows/amd64/amazon-cloudwatch-agent.zip -d windows-agent\n      - name: Create msi dep folder and copy deps\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_win_zip.outputs.cache-hit == false\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 16,
                  "endLine": 159,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      - name: Copy binary\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_win_zip.outputs.cache-hit == false\n        run: |\n          aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }} . --recursive\n      - name: Unzip\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_win_zip.outputs.cache-hit == false\n        run: |\n",
                    "rendered": {
                      "text": "      - name: Copy binary\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_win_zip.outputs.cache-hit == false\n        run: |\n          aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }} . --recursive\n      - name: Unzip\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_win_zip.outputs.cache-hit == false\n        run: |\n",
                      "markdown": "`      - name: Copy binary\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_win_zip.outputs.cache-hit == false\n        run: |\n          aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }} . --recursive\n      - name: Unzip\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_win_zip.outputs.cache-hit == false\n        run: |\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 57,
                  "endLine": 102,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        env:\n          ContainerRepositoryNameAndTag: ${{ inputs.ContainerRepositoryNameAndTag }}\n        run: |\n          RepoName=`echo $ContainerRepositoryNameAndTag | awk -F: '{print $1}'`\n          echo \"::set-output name=ContainerRepositoryName::$RepoName\"\n\n      - name: Build Cloudwatch Agent Image amd64\n",
                    "rendered": {
                      "text": "        env:\n          ContainerRepositoryNameAndTag: ${{ inputs.ContainerRepositoryNameAndTag }}\n        run: |\n          RepoName=`echo $ContainerRepositoryNameAndTag | awk -F: '{print $1}'`\n          echo \"::set-output name=ContainerRepositoryName::$RepoName\"\n\n      - name: Build Cloudwatch Agent Image amd64\n",
                      "markdown": "`        env:\n          ContainerRepositoryNameAndTag: ${{ inputs.ContainerRepositoryNameAndTag }}\n        run: |\n          RepoName=`echo $ContainerRepositoryNameAndTag | awk -F: '{print $1}'`\n          echo \"::set-output name=ContainerRepositoryName::$RepoName\"\n\n      - name: Build Cloudwatch Agent Image amd64\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 16,
                  "endLine": 95,
                  "endColumn": 20,
                  "snippet": {
                    "text": "          mkdir amd64\n          mkdir arm64\n          aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }}/linux/amd64/amazon-cloudwatch-agent.deb amd64/amazon-cloudwatch-agent.deb\n          aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }}/linux/arm64/amazon-cloudwatch-agent.deb arm64/amazon-cloudwatch-agent.deb\n\n      - name: Get ECR Repo name\n        id: repo_name\n",
                    "rendered": {
                      "text": "          mkdir amd64\n          mkdir arm64\n          aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }}/linux/amd64/amazon-cloudwatch-agent.deb amd64/amazon-cloudwatch-agent.deb\n          aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }}/linux/arm64/amazon-cloudwatch-agent.deb arm64/amazon-cloudwatch-agent.deb\n\n      - name: Get ECR Repo name\n        id: repo_name\n",
                      "markdown": "`          mkdir amd64\n          mkdir arm64\n          aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }}/linux/amd64/amazon-cloudwatch-agent.deb amd64/amazon-cloudwatch-agent.deb\n          aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }}/linux/arm64/amazon-cloudwatch-agent.deb arm64/amazon-cloudwatch-agent.deb\n\n      - name: Get ECR Repo name\n        id: repo_name\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 16,
                  "endLine": 94,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        run: |\n          mkdir amd64\n          mkdir arm64\n          aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }}/linux/amd64/amazon-cloudwatch-agent.deb amd64/amazon-cloudwatch-agent.deb\n          aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }}/linux/arm64/amazon-cloudwatch-agent.deb arm64/amazon-cloudwatch-agent.deb\n\n      - name: Get ECR Repo name\n",
                    "rendered": {
                      "text": "        run: |\n          mkdir amd64\n          mkdir arm64\n          aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }}/linux/amd64/amazon-cloudwatch-agent.deb amd64/amazon-cloudwatch-agent.deb\n          aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }}/linux/arm64/amazon-cloudwatch-agent.deb arm64/amazon-cloudwatch-agent.deb\n\n      - name: Get ECR Repo name\n",
                      "markdown": "`        run: |\n          mkdir amd64\n          mkdir arm64\n          aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }}/linux/amd64/amazon-cloudwatch-agent.deb amd64/amazon-cloudwatch-agent.deb\n          aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }}/linux/arm64/amazon-cloudwatch-agent.deb arm64/amazon-cloudwatch-agent.deb\n\n      - name: Get ECR Repo name\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 20,
                  "endLine": 80,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        id: login-ecr\n        uses: aws-actions/amazon-ecr-login@v2\n\n      - name: Set up Docker Buildx\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_container.outputs.cache-hit == false\n        uses: docker/setup-buildx-action@v3\n\n",
                    "rendered": {
                      "text": "        id: login-ecr\n        uses: aws-actions/amazon-ecr-login@v2\n\n      - name: Set up Docker Buildx\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_container.outputs.cache-hit == false\n        uses: docker/setup-buildx-action@v3\n\n",
                      "markdown": "`        id: login-ecr\n        uses: aws-actions/amazon-ecr-login@v2\n\n      - name: Set up Docker Buildx\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_container.outputs.cache-hit == false\n        uses: docker/setup-buildx-action@v3\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-docker.yml"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 22,
                  "endLine": 4,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT\n\nname: Build And Upload Docker Image\nenv:\n  CWA_GITHUB_TEST_REPO_NAME: \"aws/amazon-cloudwatch-agent-test\"\n\n",
                    "rendered": {
                      "text": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT\n\nname: Build And Upload Docker Image\nenv:\n  CWA_GITHUB_TEST_REPO_NAME: \"aws/amazon-cloudwatch-agent-test\"\n\n",
                      "markdown": "`# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT\n\nname: Build And Upload Docker Image\nenv:\n  CWA_GITHUB_TEST_REPO_NAME: \"aws/amazon-cloudwatch-agent-test\"\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/stop-localstack.yml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 31,
                  "endLine": 7,
                  "endColumn": 42,
                  "snippet": {
                    "text": "name: Stop Localstack\n\nenv:\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}\n  KEY_NAME: ${{ secrets.KEY_NAME }}\n\non:\n",
                    "rendered": {
                      "text": "name: Stop Localstack\n\nenv:\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}\n  KEY_NAME: ${{ secrets.KEY_NAME }}\n\non:\n",
                      "markdown": "`name: Stop Localstack\n\nenv:\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}\n  KEY_NAME: ${{ secrets.KEY_NAME }}\n\non:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/stop-localstack.yml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 2,
                  "endLine": 7,
                  "endColumn": 13,
                  "snippet": {
                    "text": "name: Stop Localstack\n\nenv:\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}\n  KEY_NAME: ${{ secrets.KEY_NAME }}\n\non:\n",
                    "rendered": {
                      "text": "name: Stop Localstack\n\nenv:\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}\n  KEY_NAME: ${{ secrets.KEY_NAME }}\n\non:\n",
                      "markdown": "`name: Stop Localstack\n\nenv:\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}\n  KEY_NAME: ${{ secrets.KEY_NAME }}\n\non:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/stop-localstack.yml"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 19,
                  "endLine": 54,
                  "endColumn": 23,
                  "snippet": {
                    "text": "          aws-region: ${{ inputs.region }}\n\n      - name: Copy state\n        run: aws s3 cp s3://${{inputs.s3_integration_bucket}}/integration-test/local-stack-terraform-state/${{inputs.github_sha}}/terraform.tfstate .\n\n      - name: Verify Terraform version\n        run: terraform --version\n",
                    "rendered": {
                      "text": "          aws-region: ${{ inputs.region }}\n\n      - name: Copy state\n        run: aws s3 cp s3://${{inputs.s3_integration_bucket}}/integration-test/local-stack-terraform-state/${{inputs.github_sha}}/terraform.tfstate .\n\n      - name: Verify Terraform version\n        run: terraform --version\n",
                      "markdown": "`          aws-region: ${{ inputs.region }}\n\n      - name: Copy state\n        run: aws s3 cp s3://${{inputs.s3_integration_bucket}}/integration-test/local-stack-terraform-state/${{inputs.github_sha}}/terraform.tfstate .\n\n      - name: Verify Terraform version\n        run: terraform --version\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/start-localstack.yml"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 37,
                  "endLine": 74,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        run: >\n          echo run terraform and execute test code &&\n          terraform apply --auto-approve\n          -var=\"ssh_key_value=${{env.PRIVATE_KEY}}\"\n          -var=\"github_test_repo=${{inputs.test_repo_url}}\"\n          -var=\"github_test_repo_branch=${{inputs.test_repo_branch}}\"\n          -var=\"cwa_github_sha=${{inputs.github_sha}}\"\n",
                    "rendered": {
                      "text": "        run: >\n          echo run terraform and execute test code &&\n          terraform apply --auto-approve\n          -var=\"ssh_key_value=${{env.PRIVATE_KEY}}\"\n          -var=\"github_test_repo=${{inputs.test_repo_url}}\"\n          -var=\"github_test_repo_branch=${{inputs.test_repo_branch}}\"\n          -var=\"cwa_github_sha=${{inputs.github_sha}}\"\n",
                      "markdown": "`        run: >\n          echo run terraform and execute test code &&\n          terraform apply --auto-approve\n          -var=\"ssh_key_value=${{env.PRIVATE_KEY}}\"\n          -var=\"github_test_repo=${{inputs.test_repo_url}}\"\n          -var=\"github_test_repo_branch=${{inputs.test_repo_branch}}\"\n          -var=\"cwa_github_sha=${{inputs.github_sha}}\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/start-localstack.yml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 31,
                  "endLine": 7,
                  "endColumn": 42,
                  "snippet": {
                    "text": "name: Start Localstack\n\nenv:\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}\n  KEY_NAME: ${{ secrets.KEY_NAME }}\n\non:\n",
                    "rendered": {
                      "text": "name: Start Localstack\n\nenv:\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}\n  KEY_NAME: ${{ secrets.KEY_NAME }}\n\non:\n",
                      "markdown": "`name: Start Localstack\n\nenv:\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}\n  KEY_NAME: ${{ secrets.KEY_NAME }}\n\non:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/start-localstack.yml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 2,
                  "endLine": 7,
                  "endColumn": 13,
                  "snippet": {
                    "text": "name: Start Localstack\n\nenv:\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}\n  KEY_NAME: ${{ secrets.KEY_NAME }}\n\non:\n",
                    "rendered": {
                      "text": "name: Start Localstack\n\nenv:\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}\n  KEY_NAME: ${{ secrets.KEY_NAME }}\n\non:\n",
                      "markdown": "`name: Start Localstack\n\nenv:\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}\n  KEY_NAME: ${{ secrets.KEY_NAME }}\n\non:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/start-localstack.yml"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 16,
                  "endLine": 84,
                  "endColumn": 20,
                  "snippet": {
                    "text": "          LOCAL_STACK_HOST_NAME=$(terraform output -raw public_dns) &&\n          echo $LOCAL_STACK_HOST_NAME &&\n          echo \"::set-output name=local_stack_host_name::$LOCAL_STACK_HOST_NAME\" &&\n          aws s3 cp terraform.tfstate s3://${{inputs.s3_integration_bucket}}/integration-test/local-stack-terraform-state/${{inputs.github_sha}}/terraform.tfstate\n",
                    "rendered": {
                      "text": "          LOCAL_STACK_HOST_NAME=$(terraform output -raw public_dns) &&\n          echo $LOCAL_STACK_HOST_NAME &&\n          echo \"::set-output name=local_stack_host_name::$LOCAL_STACK_HOST_NAME\" &&\n          aws s3 cp terraform.tfstate s3://${{inputs.s3_integration_bucket}}/integration-test/local-stack-terraform-state/${{inputs.github_sha}}/terraform.tfstate\n",
                      "markdown": "`          LOCAL_STACK_HOST_NAME=$(terraform output -raw public_dns) &&\n          echo $LOCAL_STACK_HOST_NAME &&\n          echo \"::set-output name=local_stack_host_name::$LOCAL_STACK_HOST_NAME\" &&\n          aws s3 cp terraform.tfstate s3://${{inputs.s3_integration_bucket}}/integration-test/local-stack-terraform-state/${{inputs.github_sha}}/terraform.tfstate\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/deploy-canary.yml"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 36,
                  "endLine": 73,
                  "endColumn": 47,
                  "snippet": {
                    "text": "              -var=\"binary_name=amazon-cloudwatch-agent.rpm\" \\\n              -var=\"s3_bucket=${S3_INTEGRATION_BUCKET}\" \\\n              -var=\"ssh_key_name=${KEY_NAME}\" \\\n              -var=\"ssh_key_value=${PRIVATE_KEY}\" \\\n              -var=\"test_name=canary\" \\\n              -var=\"is_canary=true\" \\\n              -var=\"test_dir=./test/canary\" ; then aws s3 cp terraform.tfstate s3://${S3_INTEGRATION_BUCKET}/canary/al2/terraform.tfstate\n",
                    "rendered": {
                      "text": "              -var=\"binary_name=amazon-cloudwatch-agent.rpm\" \\\n              -var=\"s3_bucket=${S3_INTEGRATION_BUCKET}\" \\\n              -var=\"ssh_key_name=${KEY_NAME}\" \\\n              -var=\"ssh_key_value=${PRIVATE_KEY}\" \\\n              -var=\"test_name=canary\" \\\n              -var=\"is_canary=true\" \\\n              -var=\"test_dir=./test/canary\" ; then aws s3 cp terraform.tfstate s3://${S3_INTEGRATION_BUCKET}/canary/al2/terraform.tfstate\n",
                      "markdown": "`              -var=\"binary_name=amazon-cloudwatch-agent.rpm\" \\\n              -var=\"s3_bucket=${S3_INTEGRATION_BUCKET}\" \\\n              -var=\"ssh_key_name=${KEY_NAME}\" \\\n              -var=\"ssh_key_value=${PRIVATE_KEY}\" \\\n              -var=\"test_name=canary\" \\\n              -var=\"is_canary=true\" \\\n              -var=\"test_dir=./test/canary\" ; then aws s3 cp terraform.tfstate s3://${S3_INTEGRATION_BUCKET}/canary/al2/terraform.tfstate\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/deploy-canary.yml"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 31,
                  "endLine": 9,
                  "endColumn": 42,
                  "snippet": {
                    "text": "  TERRAFORM_AWS_ASSUME_ROLE: ${{ secrets.TERRAFORM_AWS_ASSUME_ROLE }}\n  S3_INTEGRATION_BUCKET: ${{ secrets.S3_INTEGRATION_BUCKET }}\n  KEY_NAME: ${{ secrets.KEY_NAME }}\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}\n  CWA_GITHUB_TEST_REPO_NAME: \"aws/amazon-cloudwatch-agent-test\"\n  CWA_GITHUB_TEST_REPO_URL: \"https://github.com/aws/amazon-cloudwatch-agent-test.git\"\n  CWA_GITHUB_TEST_REPO_BRANCH: \"main\"\n",
                    "rendered": {
                      "text": "  TERRAFORM_AWS_ASSUME_ROLE: ${{ secrets.TERRAFORM_AWS_ASSUME_ROLE }}\n  S3_INTEGRATION_BUCKET: ${{ secrets.S3_INTEGRATION_BUCKET }}\n  KEY_NAME: ${{ secrets.KEY_NAME }}\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}\n  CWA_GITHUB_TEST_REPO_NAME: \"aws/amazon-cloudwatch-agent-test\"\n  CWA_GITHUB_TEST_REPO_URL: \"https://github.com/aws/amazon-cloudwatch-agent-test.git\"\n  CWA_GITHUB_TEST_REPO_BRANCH: \"main\"\n",
                      "markdown": "`  TERRAFORM_AWS_ASSUME_ROLE: ${{ secrets.TERRAFORM_AWS_ASSUME_ROLE }}\n  S3_INTEGRATION_BUCKET: ${{ secrets.S3_INTEGRATION_BUCKET }}\n  KEY_NAME: ${{ secrets.KEY_NAME }}\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}\n  CWA_GITHUB_TEST_REPO_NAME: \"aws/amazon-cloudwatch-agent-test\"\n  CWA_GITHUB_TEST_REPO_URL: \"https://github.com/aws/amazon-cloudwatch-agent-test.git\"\n  CWA_GITHUB_TEST_REPO_BRANCH: \"main\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/deploy-canary.yml"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 2,
                  "endLine": 9,
                  "endColumn": 13,
                  "snippet": {
                    "text": "  TERRAFORM_AWS_ASSUME_ROLE: ${{ secrets.TERRAFORM_AWS_ASSUME_ROLE }}\n  S3_INTEGRATION_BUCKET: ${{ secrets.S3_INTEGRATION_BUCKET }}\n  KEY_NAME: ${{ secrets.KEY_NAME }}\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}\n  CWA_GITHUB_TEST_REPO_NAME: \"aws/amazon-cloudwatch-agent-test\"\n  CWA_GITHUB_TEST_REPO_URL: \"https://github.com/aws/amazon-cloudwatch-agent-test.git\"\n  CWA_GITHUB_TEST_REPO_BRANCH: \"main\"\n",
                    "rendered": {
                      "text": "  TERRAFORM_AWS_ASSUME_ROLE: ${{ secrets.TERRAFORM_AWS_ASSUME_ROLE }}\n  S3_INTEGRATION_BUCKET: ${{ secrets.S3_INTEGRATION_BUCKET }}\n  KEY_NAME: ${{ secrets.KEY_NAME }}\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}\n  CWA_GITHUB_TEST_REPO_NAME: \"aws/amazon-cloudwatch-agent-test\"\n  CWA_GITHUB_TEST_REPO_URL: \"https://github.com/aws/amazon-cloudwatch-agent-test.git\"\n  CWA_GITHUB_TEST_REPO_BRANCH: \"main\"\n",
                      "markdown": "`  TERRAFORM_AWS_ASSUME_ROLE: ${{ secrets.TERRAFORM_AWS_ASSUME_ROLE }}\n  S3_INTEGRATION_BUCKET: ${{ secrets.S3_INTEGRATION_BUCKET }}\n  KEY_NAME: ${{ secrets.KEY_NAME }}\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}\n  CWA_GITHUB_TEST_REPO_NAME: \"aws/amazon-cloudwatch-agent-test\"\n  CWA_GITHUB_TEST_REPO_URL: \"https://github.com/aws/amazon-cloudwatch-agent-test.git\"\n  CWA_GITHUB_TEST_REPO_BRANCH: \"main\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/deploy-canary.yml"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 47,
                  "endLine": 66,
                  "endColumn": 77,
                  "snippet": {
                    "text": "            terraform init\n            if terraform apply --auto-approve \\\n              -var=\"github_test_repo=${{env.CWA_GITHUB_TEST_REPO_URL}}\" \\\n              -var=\"github_test_repo_branch=${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\" \\\n              -var=\"user=ec2-user\" \\\n              -var=\"ami=cloudwatch-agent-integration-test-al2*\" \\\n              -var=\"arc=amd64\" \\\n",
                    "rendered": {
                      "text": "            terraform init\n            if terraform apply --auto-approve \\\n              -var=\"github_test_repo=${{env.CWA_GITHUB_TEST_REPO_URL}}\" \\\n              -var=\"github_test_repo_branch=${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\" \\\n              -var=\"user=ec2-user\" \\\n              -var=\"ami=cloudwatch-agent-integration-test-al2*\" \\\n              -var=\"arc=amd64\" \\\n",
                      "markdown": "`            terraform init\n            if terraform apply --auto-approve \\\n              -var=\"github_test_repo=${{env.CWA_GITHUB_TEST_REPO_URL}}\" \\\n              -var=\"github_test_repo_branch=${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\" \\\n              -var=\"user=ec2-user\" \\\n              -var=\"ami=cloudwatch-agent-integration-test-al2*\" \\\n              -var=\"arc=amd64\" \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/deploy-canary.yml"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 18,
                  "endLine": 35,
                  "endColumn": 48,
                  "snippet": {
                    "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v1\n",
                    "rendered": {
                      "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v1\n",
                      "markdown": "`      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v1\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/deploy-canary.yml"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 36,
                  "endLine": 16,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\non:\n  schedule:\n    - cron: \"0 15 * * *\" # Run daily at 15:00 UTC\n  workflow_call:\n  workflow_dispatch:\n\n",
                    "rendered": {
                      "text": "\non:\n  schedule:\n    - cron: \"0 15 * * *\" # Run daily at 15:00 UTC\n  workflow_call:\n  workflow_dispatch:\n\n",
                      "markdown": "`\non:\n  schedule:\n    - cron: \"0 15 * * *\" # Run daily at 15:00 UTC\n  workflow_call:\n  workflow_dispatch:\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/deploy-canary.yml"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 57,
                  "endLine": 76,
                  "endColumn": 61,
                  "snippet": {
                    "text": "              -var=\"ssh_key_value=${PRIVATE_KEY}\" \\\n              -var=\"test_name=canary\" \\\n              -var=\"is_canary=true\" \\\n              -var=\"test_dir=./test/canary\" ; then aws s3 cp terraform.tfstate s3://${S3_INTEGRATION_BUCKET}/canary/al2/terraform.tfstate\n            else\n              terraform destroy -auto-approve && exit 1\n            fi\n",
                    "rendered": {
                      "text": "              -var=\"ssh_key_value=${PRIVATE_KEY}\" \\\n              -var=\"test_name=canary\" \\\n              -var=\"is_canary=true\" \\\n              -var=\"test_dir=./test/canary\" ; then aws s3 cp terraform.tfstate s3://${S3_INTEGRATION_BUCKET}/canary/al2/terraform.tfstate\n            else\n              terraform destroy -auto-approve && exit 1\n            fi\n",
                      "markdown": "`              -var=\"ssh_key_value=${PRIVATE_KEY}\" \\\n              -var=\"test_name=canary\" \\\n              -var=\"is_canary=true\" \\\n              -var=\"test_dir=./test/canary\" ; then aws s3 cp terraform.tfstate s3://${S3_INTEGRATION_BUCKET}/canary/al2/terraform.tfstate\n            else\n              terraform destroy -auto-approve && exit 1\n            fi\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/deploy-canary.yml"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 18,
                  "endLine": 48,
                  "endColumn": 22,
                  "snippet": {
                    "text": "          if aws s3api wait object-exists --bucket ${S3_INTEGRATION_BUCKET} --key canary/al2/terraform.tfstate ;\n          then\n            cd terraform/ec2/linux\n            aws s3 cp s3://${S3_INTEGRATION_BUCKET}/canary/al2/terraform.tfstate .\n            terraform --version\n            terraform init\n            terraform destroy -auto-approve\n",
                    "rendered": {
                      "text": "          if aws s3api wait object-exists --bucket ${S3_INTEGRATION_BUCKET} --key canary/al2/terraform.tfstate ;\n          then\n            cd terraform/ec2/linux\n            aws s3 cp s3://${S3_INTEGRATION_BUCKET}/canary/al2/terraform.tfstate .\n            terraform --version\n            terraform init\n            terraform destroy -auto-approve\n",
                      "markdown": "`          if aws s3api wait object-exists --bucket ${S3_INTEGRATION_BUCKET} --key canary/al2/terraform.tfstate ;\n          then\n            cd terraform/ec2/linux\n            aws s3 cp s3://${S3_INTEGRATION_BUCKET}/canary/al2/terraform.tfstate .\n            terraform --version\n            terraform init\n            terraform destroy -auto-approve\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/containerinstanceprocessor.go"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 35,
                  "endLine": 139,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\t\t}\n\t\tciArn := aws.StringValue(task.Task.ContainerInstanceArn)\n\t\tif ciArn != \"\" {\n\t\t\tif res, ok := p.ec2MetaDataCache.Get(ciArn); ok {\n\t\t\t\tp.stats.AddStats(LRUCacheGetEC2MetaData)\n\t\t\t\ttask.EC2Info = res.(*EC2MetaData)\n\t\t\t} else {\n",
                    "rendered": {
                      "text": "\t\t}\n\t\tciArn := aws.StringValue(task.Task.ContainerInstanceArn)\n\t\tif ciArn != \"\" {\n\t\t\tif res, ok := p.ec2MetaDataCache.Get(ciArn); ok {\n\t\t\t\tp.stats.AddStats(LRUCacheGetEC2MetaData)\n\t\t\t\ttask.EC2Info = res.(*EC2MetaData)\n\t\t\t} else {\n",
                      "markdown": "`\t\t}\n\t\tciArn := aws.StringValue(task.Task.ContainerInstanceArn)\n\t\tif ciArn != \"\" {\n\t\t\tif res, ok := p.ec2MetaDataCache.Get(ciArn); ok {\n\t\t\t\tp.stats.AddStats(LRUCacheGetEC2MetaData)\n\t\t\t\ttask.EC2Info = res.(*EC2MetaData)\n\t\t\t} else {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/containerinstanceprocessor.go"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 7,
                  "endLine": 16,
                  "endColumn": 16,
                  "snippet": {
                    "text": ")\n\nconst (\n\t// ECS Service Quota: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-quotas.html\n\tec2metadataCacheSize = 2000\n\tbatchSize            = 100\n)\n",
                    "rendered": {
                      "text": ")\n\nconst (\n\t// ECS Service Quota: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-quotas.html\n\tec2metadataCacheSize = 2000\n\tbatchSize            = 100\n)\n",
                      "markdown": "`)\n\nconst (\n\t// ECS Service Quota: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-quotas.html\n\tec2metadataCacheSize = 2000\n\tbatchSize            = 100\n)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/taskdefinitionprocessor.go"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 30,
                  "endLine": 58,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\t\t}\n\n\t\tvar td *ecs.TaskDefinition\n\t\tif res, ok := p.taskDefCache.Get(k); ok {\n\t\t\tp.stats.AddStats(LRUCacheGetTaskDefinition)\n\t\t\ttd = res.(*ecs.TaskDefinition)\n\t\t} else {\n",
                    "rendered": {
                      "text": "\t\t}\n\n\t\tvar td *ecs.TaskDefinition\n\t\tif res, ok := p.taskDefCache.Get(k); ok {\n\t\t\tp.stats.AddStats(LRUCacheGetTaskDefinition)\n\t\t\ttd = res.(*ecs.TaskDefinition)\n\t\t} else {\n",
                      "markdown": "`\t\t}\n\n\t\tvar td *ecs.TaskDefinition\n\t\tif res, ok := p.taskDefCache.Get(k); ok {\n\t\t\tp.stats.AddStats(LRUCacheGetTaskDefinition)\n\t\t\ttd = res.(*ecs.TaskDefinition)\n\t\t} else {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/taskdefinitionprocessor.go"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 7,
                  "endLine": 15,
                  "endColumn": 16,
                  "snippet": {
                    "text": ")\n\nconst (\n\t// ECS Service Quota: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-quotas.html\n\ttaskDefCacheSize = 2000\n)\n\n",
                    "rendered": {
                      "text": ")\n\nconst (\n\t// ECS Service Quota: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-quotas.html\n\ttaskDefCacheSize = 2000\n)\n\n",
                      "markdown": "`)\n\nconst (\n\t// ECS Service Quota: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-quotas.html\n\ttaskDefCacheSize = 2000\n)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/serviceendpointdiscoveryprocessor.go"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 54,
                  "endLine": 95,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\t\t\t}\n\t\t}\n\t\tif describeServiceErr != nil {\n\t\t\treturn newServiceDiscoveryError(\"Failed to describe service ARNs for \"+cluster, &describeServiceErr)\n\t\t}\n\t}\n\treturn nil\n",
                    "rendered": {
                      "text": "\t\t\t}\n\t\t}\n\t\tif describeServiceErr != nil {\n\t\t\treturn newServiceDiscoveryError(\"Failed to describe service ARNs for \"+cluster, &describeServiceErr)\n\t\t}\n\t}\n\treturn nil\n",
                      "markdown": "`\t\t\t}\n\t\t}\n\t\tif describeServiceErr != nil {\n\t\t\treturn newServiceDiscoveryError(\"Failed to describe service ARNs for \"+cluster, &describeServiceErr)\n\t\t}\n\t}\n\treturn nil\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/serviceendpointdiscoveryprocessor.go"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 60,
                  "endLine": 50,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\t\tlistServiceResp, listServiceErr := p.svcEcs.ListServices(req)\n\t\tp.stats.AddStats(AWSCLIListServices)\n\t\tif listServiceErr != nil {\n\t\t\treturn taskList, newServiceDiscoveryError(\"Failed to list service ARNs for \"+cluster, &listServiceErr)\n\t\t}\n\t\tservicesToDescribe = p.processServices(listServiceResp, servicesToDescribe)\n\t\tif listServiceResp.NextToken == nil {\n",
                    "rendered": {
                      "text": "\t\tlistServiceResp, listServiceErr := p.svcEcs.ListServices(req)\n\t\tp.stats.AddStats(AWSCLIListServices)\n\t\tif listServiceErr != nil {\n\t\t\treturn taskList, newServiceDiscoveryError(\"Failed to list service ARNs for \"+cluster, &listServiceErr)\n\t\t}\n\t\tservicesToDescribe = p.processServices(listServiceResp, servicesToDescribe)\n\t\tif listServiceResp.NextToken == nil {\n",
                      "markdown": "`\t\tlistServiceResp, listServiceErr := p.svcEcs.ListServices(req)\n\t\tp.stats.AddStats(AWSCLIListServices)\n\t\tif listServiceErr != nil {\n\t\t\treturn taskList, newServiceDiscoveryError(\"Failed to list service ARNs for \"+cluster, &listServiceErr)\n\t\t}\n\t\tservicesToDescribe = p.processServices(listServiceResp, servicesToDescribe)\n\t\tif listServiceResp.NextToken == nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/util/user/userutil_darwin_test.go"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 30,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\tassert.Equal(t, \"darcy\", m[\"name\"])\n\n\tg := `name: PrideAndPrejudice\npassword: *\ngid: 7788\n`\n\tm, err = parseDSOutput(g)\n",
                    "rendered": {
                      "text": "\tassert.Equal(t, \"darcy\", m[\"name\"])\n\n\tg := `name: PrideAndPrejudice\npassword: *\ngid: 7788\n`\n\tm, err = parseDSOutput(g)\n",
                      "markdown": "`\tassert.Equal(t, \"darcy\", m[\"name\"])\n\n\tg := `name: PrideAndPrejudice\npassword: *\ngid: 7788\n`\n\tm, err = parseDSOutput(g)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/util/user/userutil_darwin_test.go"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nfunc TestParseDSOutput(t *testing.T) {\n\tu := `name: darcy\npassword: ********\nuid: 123456\ngid: 78910\ndir: /Users/darcy\n",
                    "rendered": {
                      "text": "\nfunc TestParseDSOutput(t *testing.T) {\n\tu := `name: darcy\npassword: ********\nuid: 123456\ngid: 78910\ndir: /Users/darcy\n",
                      "markdown": "`\nfunc TestParseDSOutput(t *testing.T) {\n\tu := `name: darcy\npassword: ********\nuid: 123456\ngid: 78910\ndir: /Users/darcy\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/util/user/userutil.go"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 3,
                  "endLine": 24,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\ntype ChownFunc func(name string, uid, gid int) error\n\nvar chown ChownFunc = os.Chown\n\n// DetectRunAsUser get the user name from toml config. It runs on all platforms except windows.\nfunc DetectRunAsUser(configMap map[string]any) (string, error) {\n",
                    "rendered": {
                      "text": "\ntype ChownFunc func(name string, uid, gid int) error\n\nvar chown ChownFunc = os.Chown\n\n// DetectRunAsUser get the user name from toml config. It runs on all platforms except windows.\nfunc DetectRunAsUser(configMap map[string]any) (string, error) {\n",
                      "markdown": "`\ntype ChownFunc func(name string, uid, gid int) error\n\nvar chown ChownFunc = os.Chown\n\n// DetectRunAsUser get the user name from toml config. It runs on all platforms except windows.\nfunc DetectRunAsUser(configMap map[string]any) (string, error) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/containerinsightscommon/const.go"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 25,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\tCpuTotal                   = \"cpu_usage_total\"\n\tCpuUser                    = \"cpu_usage_user\"\n\tCpuSystem                  = \"cpu_usage_system\"\n\tCpuLimit                   = \"cpu_limit\"\n\tCpuUtilization             = \"cpu_utilization\"\n\tCpuRequest                 = \"cpu_request\"\n\tCpuReservedCapacity        = \"cpu_reserved_capacity\"\n",
                    "rendered": {
                      "text": "\tCpuTotal                   = \"cpu_usage_total\"\n\tCpuUser                    = \"cpu_usage_user\"\n\tCpuSystem                  = \"cpu_usage_system\"\n\tCpuLimit                   = \"cpu_limit\"\n\tCpuUtilization             = \"cpu_utilization\"\n\tCpuRequest                 = \"cpu_request\"\n\tCpuReservedCapacity        = \"cpu_reserved_capacity\"\n",
                      "markdown": "`\tCpuTotal                   = \"cpu_usage_total\"\n\tCpuUser                    = \"cpu_usage_user\"\n\tCpuSystem                  = \"cpu_usage_system\"\n\tCpuLimit                   = \"cpu_limit\"\n\tCpuUtilization             = \"cpu_utilization\"\n\tCpuRequest                 = \"cpu_request\"\n\tCpuReservedCapacity        = \"cpu_reserved_capacity\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/logs/metrics_collected/prometheus/ruleConfigPath.go"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 82,
                  "endLine": 70,
                  "endColumn": 87,
                  "snippet": {
                    "text": "\t\t\t\tlog.Printf(\"Downloaded the prometheus config from ENV: %v.\", configEnv)\n\t\t\t}\n\t\t} else {\n\t\t\tlog.Panicf(\"Failed to download the Prometheus config yaml from ENV: %v. Reason: ENV does not exist\", configEnv)\n\t\t}\n\t\treturn SectionKeyConfigPath, downloadingPath\n\t}\n",
                    "rendered": {
                      "text": "\t\t\t\tlog.Printf(\"Downloaded the prometheus config from ENV: %v.\", configEnv)\n\t\t\t}\n\t\t} else {\n\t\t\tlog.Panicf(\"Failed to download the Prometheus config yaml from ENV: %v. Reason: ENV does not exist\", configEnv)\n\t\t}\n\t\treturn SectionKeyConfigPath, downloadingPath\n\t}\n",
                      "markdown": "`\t\t\t\tlog.Printf(\"Downloaded the prometheus config from ENV: %v.\", configEnv)\n\t\t\t}\n\t\t} else {\n\t\t\tlog.Panicf(\"Failed to download the Prometheus config yaml from ENV: %v. Reason: ENV does not exist\", configEnv)\n\t\t}\n\t\treturn SectionKeyConfigPath, downloadingPath\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/logs/ruleLogStreamName.go"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 63,
                  "endLine": 45,
                  "endColumn": 71,
                  "snippet": {
                    "text": "\t\t\t\t\ttranslator.AddErrorMessages(GetCurPath(), \"Failed to get hostName for log_stream_name field, please specify value for log_stream_name field\")\n\t\t\t\t\treturn\n\t\t\t\t} else {\n\t\t\t\t\ttranslator.AddInfoMessages(GetCurPath(), fmt.Sprintf(\"Got hostname %s as log_stream_name\", defaultVal))\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n",
                    "rendered": {
                      "text": "\t\t\t\t\ttranslator.AddErrorMessages(GetCurPath(), \"Failed to get hostName for log_stream_name field, please specify value for log_stream_name field\")\n\t\t\t\t\treturn\n\t\t\t\t} else {\n\t\t\t\t\ttranslator.AddInfoMessages(GetCurPath(), fmt.Sprintf(\"Got hostname %s as log_stream_name\", defaultVal))\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n",
                      "markdown": "`\t\t\t\t\ttranslator.AddErrorMessages(GetCurPath(), \"Failed to get hostName for log_stream_name field, please specify value for log_stream_name field\")\n\t\t\t\t\treturn\n\t\t\t\t} else {\n\t\t\t\t\ttranslator.AddInfoMessages(GetCurPath(), fmt.Sprintf(\"Got hostname %s as log_stream_name\", defaultVal))\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/logs/logs_test.go"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 29,
                  "endLine": 192,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\t\t\t\t\t\"region_type\":          \"any\",\n\t\t\t\t\t\"mode\":                 \"OP\",\n\t\t\t\t\t\"endpoint_override\":    \"https://logs-fips.us-east-1.amazonaws.com\",\n\t\t\t\t\t\"log_stream_name\":      hostname,\n\t\t\t\t\t\"force_flush_interval\": \"5s\",\n\t\t\t\t},\n\t\t\t},\n",
                    "rendered": {
                      "text": "\t\t\t\t\t\"region_type\":          \"any\",\n\t\t\t\t\t\"mode\":                 \"OP\",\n\t\t\t\t\t\"endpoint_override\":    \"https://logs-fips.us-east-1.amazonaws.com\",\n\t\t\t\t\t\"log_stream_name\":      hostname,\n\t\t\t\t\t\"force_flush_interval\": \"5s\",\n\t\t\t\t},\n\t\t\t},\n",
                      "markdown": "`\t\t\t\t\t\"region_type\":          \"any\",\n\t\t\t\t\t\"mode\":                 \"OP\",\n\t\t\t\t\t\"endpoint_override\":    \"https://logs-fips.us-east-1.amazonaws.com\",\n\t\t\t\t\t\"log_stream_name\":      hostname,\n\t\t\t\t\t\"force_flush_interval\": \"5s\",\n\t\t\t\t},\n\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/logs/logs_test.go"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 1,
                  "endLine": 182,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tctx := context.CurrentContext()\n\tctx.SetMode(config.ModeOnPrem)\n\n\thostname, _ := os.Hostname()\n\t_, actual := l.ApplyRule(input)\n\texpected := map[string]interface{}{\n\t\t\"outputs\": map[string]interface{}{\n",
                    "rendered": {
                      "text": "\tctx := context.CurrentContext()\n\tctx.SetMode(config.ModeOnPrem)\n\n\thostname, _ := os.Hostname()\n\t_, actual := l.ApplyRule(input)\n\texpected := map[string]interface{}{\n\t\t\"outputs\": map[string]interface{}{\n",
                      "markdown": "`\tctx := context.CurrentContext()\n\tctx.SetMode(config.ModeOnPrem)\n\n\thostname, _ := os.Hostname()\n\t_, actual := l.ApplyRule(input)\n\texpected := map[string]interface{}{\n\t\t\"outputs\": map[string]interface{}{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/logs/logs_test.go"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 29,
                  "endLine": 156,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\t\t\t\t\t\"region\":               \"us-east-1\",\n\t\t\t\t\t\"region_type\":          \"any\",\n\t\t\t\t\t\"mode\":                 \"OP\",\n\t\t\t\t\t\"log_stream_name\":      hostname,\n\t\t\t\t\t\"force_flush_interval\": \"10s\",\n\t\t\t\t},\n\t\t\t},\n",
                    "rendered": {
                      "text": "\t\t\t\t\t\"region\":               \"us-east-1\",\n\t\t\t\t\t\"region_type\":          \"any\",\n\t\t\t\t\t\"mode\":                 \"OP\",\n\t\t\t\t\t\"log_stream_name\":      hostname,\n\t\t\t\t\t\"force_flush_interval\": \"10s\",\n\t\t\t\t},\n\t\t\t},\n",
                      "markdown": "`\t\t\t\t\t\"region\":               \"us-east-1\",\n\t\t\t\t\t\"region_type\":          \"any\",\n\t\t\t\t\t\"mode\":                 \"OP\",\n\t\t\t\t\t\"log_stream_name\":      hostname,\n\t\t\t\t\t\"force_flush_interval\": \"10s\",\n\t\t\t\t},\n\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/logs/logs_test.go"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 1,
                  "endLine": 147,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tctx := context.CurrentContext()\n\tctx.SetMode(config.ModeOnPrem)\n\n\thostname, _ := os.Hostname()\n\t_, actual := l.ApplyRule(input)\n\texpected := map[string]interface{}{\n\t\t\"outputs\": map[string]interface{}{\n",
                    "rendered": {
                      "text": "\tctx := context.CurrentContext()\n\tctx.SetMode(config.ModeOnPrem)\n\n\thostname, _ := os.Hostname()\n\t_, actual := l.ApplyRule(input)\n\texpected := map[string]interface{}{\n\t\t\"outputs\": map[string]interface{}{\n",
                      "markdown": "`\tctx := context.CurrentContext()\n\tctx.SetMode(config.ModeOnPrem)\n\n\thostname, _ := os.Hostname()\n\t_, actual := l.ApplyRule(input)\n\texpected := map[string]interface{}{\n\t\t\"outputs\": map[string]interface{}{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/logs/logs_test.go"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 29,
                  "endLine": 70,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\t\t\t\t\t\"region\":               \"us-east-1\",\n\t\t\t\t\t\"region_type\":          \"any\",\n\t\t\t\t\t\"mode\":                 \"OP\",\n\t\t\t\t\t\"log_stream_name\":      hostname,\n\t\t\t\t\t\"force_flush_interval\": \"5s\",\n\t\t\t\t},\n\t\t\t},\n",
                    "rendered": {
                      "text": "\t\t\t\t\t\"region\":               \"us-east-1\",\n\t\t\t\t\t\"region_type\":          \"any\",\n\t\t\t\t\t\"mode\":                 \"OP\",\n\t\t\t\t\t\"log_stream_name\":      hostname,\n\t\t\t\t\t\"force_flush_interval\": \"5s\",\n\t\t\t\t},\n\t\t\t},\n",
                      "markdown": "`\t\t\t\t\t\"region\":               \"us-east-1\",\n\t\t\t\t\t\"region_type\":          \"any\",\n\t\t\t\t\t\"mode\":                 \"OP\",\n\t\t\t\t\t\"log_stream_name\":      hostname,\n\t\t\t\t\t\"force_flush_interval\": \"5s\",\n\t\t\t\t},\n\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/logs/logs_test.go"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 1,
                  "endLine": 61,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tctx := context.CurrentContext()\n\tctx.SetMode(config.ModeOnPrem)\n\n\thostname, _ := os.Hostname()\n\t_, actual := l.ApplyRule(input)\n\texpected := map[string]interface{}{\n\t\t\"outputs\": map[string]interface{}{\n",
                    "rendered": {
                      "text": "\tctx := context.CurrentContext()\n\tctx.SetMode(config.ModeOnPrem)\n\n\thostname, _ := os.Hostname()\n\t_, actual := l.ApplyRule(input)\n\texpected := map[string]interface{}{\n\t\t\"outputs\": map[string]interface{}{\n",
                      "markdown": "`\tctx := context.CurrentContext()\n\tctx.SetMode(config.ModeOnPrem)\n\n\thostname, _ := os.Hostname()\n\t_, actual := l.ApplyRule(input)\n\texpected := map[string]interface{}{\n\t\t\"outputs\": map[string]interface{}{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/logs/ruleLogCredentials_test.go"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 76,
                  "endLine": 40,
                  "endColumn": 86,
                  "snippet": {
                    "text": "\t}\n\n\tagent.Global_Config.Role_arn = \"global_role_arn_test\"\n\terr = json.Unmarshal([]byte(`{ \"credentials\" : {\"access_key\":\"metric_ak\", \"secret_key\":\"metric_sk\", \"token\": \"dummy_token\", \"profile\": \"dummy_profile\"}}`), &input)\n\tif err == nil {\n\t\t_, returnVal := c.ApplyRule(input)\n\t\tassert.Equal(t, \"global_role_arn_test\", returnVal.(map[string]interface{})[\"role_arn\"], \"Expected to be equal\")\n",
                    "rendered": {
                      "text": "\t}\n\n\tagent.Global_Config.Role_arn = \"global_role_arn_test\"\n\terr = json.Unmarshal([]byte(`{ \"credentials\" : {\"access_key\":\"metric_ak\", \"secret_key\":\"metric_sk\", \"token\": \"dummy_token\", \"profile\": \"dummy_profile\"}}`), &input)\n\tif err == nil {\n\t\t_, returnVal := c.ApplyRule(input)\n\t\tassert.Equal(t, \"global_role_arn_test\", returnVal.(map[string]interface{})[\"role_arn\"], \"Expected to be equal\")\n",
                      "markdown": "`\t}\n\n\tagent.Global_Config.Role_arn = \"global_role_arn_test\"\n\terr = json.Unmarshal([]byte(`{ \"credentials\" : {\"access_key\":\"metric_ak\", \"secret_key\":\"metric_sk\", \"token\": \"dummy_token\", \"profile\": \"dummy_profile\"}}`), &input)\n\tif err == nil {\n\t\t_, returnVal := c.ApplyRule(input)\n\t\tassert.Equal(t, \"global_role_arn_test\", returnVal.(map[string]interface{})[\"role_arn\"], \"Expected to be equal\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/logs/ruleLogCredentials_test.go"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 76,
                  "endLine": 31,
                  "endColumn": 86,
                  "snippet": {
                    "text": "\t}\n\n\tagent.Global_Config.Role_arn = \"global_role_arn_test\"\n\terr = json.Unmarshal([]byte(`{ \"credentials\" : {\"access_key\":\"metric_ak\", \"secret_key\":\"metric_sk\", \"token\": \"dummy_token\", \"profile\": \"dummy_profile\", \"role_arn\": \"role_value\"}}`), &input)\n\tif err == nil {\n\t\t_, returnVal := c.ApplyRule(input)\n\t\tassert.Equal(t, \"role_value\", returnVal.(map[string]interface{})[\"role_arn\"], \"Expected to be equal\")\n",
                    "rendered": {
                      "text": "\t}\n\n\tagent.Global_Config.Role_arn = \"global_role_arn_test\"\n\terr = json.Unmarshal([]byte(`{ \"credentials\" : {\"access_key\":\"metric_ak\", \"secret_key\":\"metric_sk\", \"token\": \"dummy_token\", \"profile\": \"dummy_profile\", \"role_arn\": \"role_value\"}}`), &input)\n\tif err == nil {\n\t\t_, returnVal := c.ApplyRule(input)\n\t\tassert.Equal(t, \"role_value\", returnVal.(map[string]interface{})[\"role_arn\"], \"Expected to be equal\")\n",
                      "markdown": "`\t}\n\n\tagent.Global_Config.Role_arn = \"global_role_arn_test\"\n\terr = json.Unmarshal([]byte(`{ \"credentials\" : {\"access_key\":\"metric_ak\", \"secret_key\":\"metric_sk\", \"token\": \"dummy_token\", \"profile\": \"dummy_profile\", \"role_arn\": \"role_value\"}}`), &input)\n\tif err == nil {\n\t\t_, returnVal := c.ApplyRule(input)\n\t\tassert.Equal(t, \"role_value\", returnVal.(map[string]interface{})[\"role_arn\"], \"Expected to be equal\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/logs/ruleLogCredentials_test.go"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 77,
                  "endLine": 22,
                  "endColumn": 87,
                  "snippet": {
                    "text": "\tctx.SetCredentials(map[string]string{})\n\tc := new(LogCreds)\n\tvar input interface{}\n\terr := json.Unmarshal([]byte(`{ \"credentials\" : {\"access_key\":\"metric_ak\", \"secret_key\":\"metric_sk\", \"token\": \"dummy_token\", \"profile\": \"dummy_profile\", \"role_arn\": \"role_value\"}}`), &input)\n\tif err == nil {\n\t\t_, returnVal := c.ApplyRule(input)\n\t\tassert.Equal(t, \"role_value\", returnVal.(map[string]interface{})[\"role_arn\"], \"Expected to be equal\")\n",
                    "rendered": {
                      "text": "\tctx.SetCredentials(map[string]string{})\n\tc := new(LogCreds)\n\tvar input interface{}\n\terr := json.Unmarshal([]byte(`{ \"credentials\" : {\"access_key\":\"metric_ak\", \"secret_key\":\"metric_sk\", \"token\": \"dummy_token\", \"profile\": \"dummy_profile\", \"role_arn\": \"role_value\"}}`), &input)\n\tif err == nil {\n\t\t_, returnVal := c.ApplyRule(input)\n\t\tassert.Equal(t, \"role_value\", returnVal.(map[string]interface{})[\"role_arn\"], \"Expected to be equal\")\n",
                      "markdown": "`\tctx.SetCredentials(map[string]string{})\n\tc := new(LogCreds)\n\tvar input interface{}\n\terr := json.Unmarshal([]byte(`{ \"credentials\" : {\"access_key\":\"metric_ak\", \"secret_key\":\"metric_sk\", \"token\": \"dummy_token\", \"profile\": \"dummy_profile\", \"role_arn\": \"role_value\"}}`), &input)\n\tif err == nil {\n\t\t_, returnVal := c.ApplyRule(input)\n\t\tassert.Equal(t, \"role_value\", returnVal.(map[string]interface{})[\"role_arn\"], \"Expected to be equal\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/util/placeholderUtil_test.go"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 15,
                  "endLine": 59,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\treturn func() *Metadata {\n\t\treturn &Metadata{\n\t\t\tInstanceID: instanceId,\n\t\t\tHostname:   hostname,\n\t\t\tPrivateIP:  privateIp,\n\t\t\tAccountID:  accountId,\n\t\t}\n",
                    "rendered": {
                      "text": "\treturn func() *Metadata {\n\t\treturn &Metadata{\n\t\t\tInstanceID: instanceId,\n\t\t\tHostname:   hostname,\n\t\t\tPrivateIP:  privateIp,\n\t\t\tAccountID:  accountId,\n\t\t}\n",
                      "markdown": "`\treturn func() *Metadata {\n\t\treturn &Metadata{\n\t\t\tInstanceID: instanceId,\n\t\t\tHostname:   hostname,\n\t\t\tPrivateIP:  privateIp,\n\t\t\tAccountID:  accountId,\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/util/placeholderUtil_test.go"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 38,
                  "endLine": 55,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\tassert.Equal(t, unknownAccountId, m[accountIdPlaceholder])\n}\n\nfunc mockMetadataProvider(instanceId, hostname, privateIp, accountId string) func() *Metadata {\n\treturn func() *Metadata {\n\t\treturn &Metadata{\n\t\t\tInstanceID: instanceId,\n",
                    "rendered": {
                      "text": "\tassert.Equal(t, unknownAccountId, m[accountIdPlaceholder])\n}\n\nfunc mockMetadataProvider(instanceId, hostname, privateIp, accountId string) func() *Metadata {\n\treturn func() *Metadata {\n\t\treturn &Metadata{\n\t\t\tInstanceID: instanceId,\n",
                      "markdown": "`\tassert.Equal(t, unknownAccountId, m[accountIdPlaceholder])\n}\n\nfunc mockMetadataProvider(instanceId, hostname, privateIp, accountId string) func() *Metadata {\n\treturn func() *Metadata {\n\t\treturn &Metadata{\n\t\t\tInstanceID: instanceId,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/util/placeholderUtil_test.go"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 25,
                  "endLine": 14,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\nconst (\n\tdummyInstanceId = \"some_instance_id\"\n\tdummyHostName   = \"some_hostname\"\n\tdummyPrivateIp  = \"some_private_ip\"\n\tdummyAccountId  = \"some_account_id\"\n)\n",
                    "rendered": {
                      "text": "\nconst (\n\tdummyInstanceId = \"some_instance_id\"\n\tdummyHostName   = \"some_hostname\"\n\tdummyPrivateIp  = \"some_private_ip\"\n\tdummyAccountId  = \"some_account_id\"\n)\n",
                      "markdown": "`\nconst (\n\tdummyInstanceId = \"some_instance_id\"\n\tdummyHostName   = \"some_hostname\"\n\tdummyPrivateIp  = \"some_private_ip\"\n\tdummyAccountId  = \"some_account_id\"\n)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/util/placeholderUtil.go"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 9,
                  "endLine": 101,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\nfunc getHostName() string {\n\tif hostname, err := os.Hostname(); err == nil {\n\t\treturn hostname\n\t} else {\n\t\tlog.Println(\"E! getHostName: \", err)\n\t\treturn unknownHostname\n",
                    "rendered": {
                      "text": "\nfunc getHostName() string {\n\tif hostname, err := os.Hostname(); err == nil {\n\t\treturn hostname\n\t} else {\n\t\tlog.Println(\"E! getHostName: \", err)\n\t\treturn unknownHostname\n",
                      "markdown": "`\nfunc getHostName() string {\n\tif hostname, err := os.Hostname(); err == nil {\n\t\treturn hostname\n\t} else {\n\t\tlog.Println(\"E! getHostName: \", err)\n\t\treturn unknownHostname\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/util/placeholderUtil.go"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 4,
                  "endLine": 100,
                  "endColumn": 12,
                  "snippet": {
                    "text": "}\n\nfunc getHostName() string {\n\tif hostname, err := os.Hostname(); err == nil {\n\t\treturn hostname\n\t} else {\n\t\tlog.Println(\"E! getHostName: \", err)\n",
                    "rendered": {
                      "text": "}\n\nfunc getHostName() string {\n\tif hostname, err := os.Hostname(); err == nil {\n\t\treturn hostname\n\t} else {\n\t\tlog.Println(\"E! getHostName: \", err)\n",
                      "markdown": "`}\n\nfunc getHostName() string {\n\tif hostname, err := os.Hostname(); err == nil {\n\t\treturn hostname\n\t} else {\n\t\tlog.Println(\"E! getHostName: \", err)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/util/placeholderUtil.go"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 82,
                  "endLine": 93,
                  "endColumn": 90,
                  "snippet": {
                    "text": "\t\taccountID = unknownAccountId\n\t}\n\n\treturn map[string]string{instanceIdPlaceholder: instanceID, hostnamePlaceholder: hostname,\n\t\tlocalHostnamePlaceholder: localHostname, ipAddressPlaceholder: ipAddress, awsRegionPlaceholder: awsRegion,\n\t\taccountIdPlaceholder: accountID,\n\t}\n",
                    "rendered": {
                      "text": "\t\taccountID = unknownAccountId\n\t}\n\n\treturn map[string]string{instanceIdPlaceholder: instanceID, hostnamePlaceholder: hostname,\n\t\tlocalHostnamePlaceholder: localHostname, ipAddressPlaceholder: ipAddress, awsRegionPlaceholder: awsRegion,\n\t\taccountIdPlaceholder: accountID,\n\t}\n",
                      "markdown": "`\t\taccountID = unknownAccountId\n\t}\n\n\treturn map[string]string{instanceIdPlaceholder: instanceID, hostnamePlaceholder: hostname,\n\t\tlocalHostnamePlaceholder: localHostname, ipAddressPlaceholder: ipAddress, awsRegionPlaceholder: awsRegion,\n\t\taccountIdPlaceholder: accountID,\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/util/placeholderUtil.go"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 2,
                  "endLine": 75,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n\thostname := provider().Hostname\n\tif hostname == \"\" {\n\t\thostname = localHostname\n\t}\n\n\tipAddress := provider().PrivateIP\n",
                    "rendered": {
                      "text": "\n\thostname := provider().Hostname\n\tif hostname == \"\" {\n\t\thostname = localHostname\n\t}\n\n\tipAddress := provider().PrivateIP\n",
                      "markdown": "`\n\thostname := provider().Hostname\n\tif hostname == \"\" {\n\t\thostname = localHostname\n\t}\n\n\tipAddress := provider().PrivateIP\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/util/placeholderUtil.go"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 4,
                  "endLine": 74,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t}\n\n\thostname := provider().Hostname\n\tif hostname == \"\" {\n\t\thostname = localHostname\n\t}\n\n",
                    "rendered": {
                      "text": "\t}\n\n\thostname := provider().Hostname\n\tif hostname == \"\" {\n\t\thostname = localHostname\n\t}\n\n",
                      "markdown": "`\t}\n\n\thostname := provider().Hostname\n\tif hostname == \"\" {\n\t\thostname = localHostname\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/util/placeholderUtil.go"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 1,
                  "endLine": 73,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t\tinstanceID = unknownInstanceId\n\t}\n\n\thostname := provider().Hostname\n\tif hostname == \"\" {\n\t\thostname = localHostname\n\t}\n",
                    "rendered": {
                      "text": "\t\tinstanceID = unknownInstanceId\n\t}\n\n\thostname := provider().Hostname\n\tif hostname == \"\" {\n\t\thostname = localHostname\n\t}\n",
                      "markdown": "`\t\tinstanceID = unknownInstanceId\n\t}\n\n\thostname := provider().Hostname\n\tif hostname == \"\" {\n\t\thostname = localHostname\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/util/placeholderUtil.go"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 36,
                  "endLine": 39,
                  "endColumn": 44,
                  "snippet": {
                    "text": "const (\n\tinstanceIdPlaceholder    = \"{instance_id}\"\n\thostnamePlaceholder      = \"{hostname}\"\n\tlocalHostnamePlaceholder = \"{local_hostname}\" //regardless of ec2 metadata\n\tipAddressPlaceholder     = \"{ip_address}\"\n\tawsRegionPlaceholder     = \"{aws_region}\"\n\tdatePlaceholder          = \"{date}\"\n",
                    "rendered": {
                      "text": "const (\n\tinstanceIdPlaceholder    = \"{instance_id}\"\n\thostnamePlaceholder      = \"{hostname}\"\n\tlocalHostnamePlaceholder = \"{local_hostname}\" //regardless of ec2 metadata\n\tipAddressPlaceholder     = \"{ip_address}\"\n\tawsRegionPlaceholder     = \"{aws_region}\"\n\tdatePlaceholder          = \"{date}\"\n",
                      "markdown": "`const (\n\tinstanceIdPlaceholder    = \"{instance_id}\"\n\thostnamePlaceholder      = \"{hostname}\"\n\tlocalHostnamePlaceholder = \"{local_hostname}\" //regardless of ec2 metadata\n\tipAddressPlaceholder     = \"{ip_address}\"\n\tawsRegionPlaceholder     = \"{aws_region}\"\n\tdatePlaceholder          = \"{date}\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/util/placeholderUtil.go"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 30,
                  "endLine": 38,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\nconst (\n\tinstanceIdPlaceholder    = \"{instance_id}\"\n\thostnamePlaceholder      = \"{hostname}\"\n\tlocalHostnamePlaceholder = \"{local_hostname}\" //regardless of ec2 metadata\n\tipAddressPlaceholder     = \"{ip_address}\"\n\tawsRegionPlaceholder     = \"{aws_region}\"\n",
                    "rendered": {
                      "text": "\nconst (\n\tinstanceIdPlaceholder    = \"{instance_id}\"\n\thostnamePlaceholder      = \"{hostname}\"\n\tlocalHostnamePlaceholder = \"{local_hostname}\" //regardless of ec2 metadata\n\tipAddressPlaceholder     = \"{ip_address}\"\n\tawsRegionPlaceholder     = \"{aws_region}\"\n",
                      "markdown": "`\nconst (\n\tinstanceIdPlaceholder    = \"{instance_id}\"\n\thostnamePlaceholder      = \"{hostname}\"\n\tlocalHostnamePlaceholder = \"{local_hostname}\" //regardless of ec2 metadata\n\tipAddressPlaceholder     = \"{ip_address}\"\n\tawsRegionPlaceholder     = \"{aws_region}\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/util/credsutil_test.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 4,
                  "endLine": 29,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\t\t_, actual := c.ApplyRule(input)\n\t\texpected := map[string]interface{}{\n\t\t\t\"access_key\": \"global_ak\",\n\t\t\t\"secret_key\": \"global_sk\",\n\t\t\t\"token\":      \"global_token\",\n\t\t\t\"profile\":    \"global_profile\",\n\t\t}\n",
                    "rendered": {
                      "text": "\t\t_, actual := c.ApplyRule(input)\n\t\texpected := map[string]interface{}{\n\t\t\t\"access_key\": \"global_ak\",\n\t\t\t\"secret_key\": \"global_sk\",\n\t\t\t\"token\":      \"global_token\",\n\t\t\t\"profile\":    \"global_profile\",\n\t\t}\n",
                      "markdown": "`\t\t_, actual := c.ApplyRule(input)\n\t\texpected := map[string]interface{}{\n\t\t\t\"access_key\": \"global_ak\",\n\t\t\t\"secret_key\": \"global_sk\",\n\t\t\t\"token\":      \"global_token\",\n\t\t\t\"profile\":    \"global_profile\",\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/util/credsutil_test.go"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 3,
                  "endLine": 21,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\terr := json.Unmarshal([]byte(`{ \"cloudwatch_creds\" : {\"access_key\":\"metric_ak\", \"secret_key\":\"metric_sk\", \"token\": \"dummy_token\", \"profile\": \"dummy_profile\"}}`), &input)\n\tagent.Global_Config.Credentials = map[string]interface{}{\n\t\t\"access_key\": \"global_ak\",\n\t\t\"secret_key\": \"global_sk\",\n\t\t\"token\":      \"global_token\",\n\t\t\"profile\":    \"global_profile\",\n\t}\n",
                    "rendered": {
                      "text": "\terr := json.Unmarshal([]byte(`{ \"cloudwatch_creds\" : {\"access_key\":\"metric_ak\", \"secret_key\":\"metric_sk\", \"token\": \"dummy_token\", \"profile\": \"dummy_profile\"}}`), &input)\n\tagent.Global_Config.Credentials = map[string]interface{}{\n\t\t\"access_key\": \"global_ak\",\n\t\t\"secret_key\": \"global_sk\",\n\t\t\"token\":      \"global_token\",\n\t\t\"profile\":    \"global_profile\",\n\t}\n",
                      "markdown": "`\terr := json.Unmarshal([]byte(`{ \"cloudwatch_creds\" : {\"access_key\":\"metric_ak\", \"secret_key\":\"metric_sk\", \"token\": \"dummy_token\", \"profile\": \"dummy_profile\"}}`), &input)\n\tagent.Global_Config.Credentials = map[string]interface{}{\n\t\t\"access_key\": \"global_ak\",\n\t\t\"secret_key\": \"global_sk\",\n\t\t\"token\":      \"global_token\",\n\t\t\"profile\":    \"global_profile\",\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/util/credsutil_test.go"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 82,
                  "endLine": 18,
                  "endColumn": 92,
                  "snippet": {
                    "text": "func TestCreds(t *testing.T) {\n\tc := GetCredsRule(\"cloudwatch_creds\")\n\tvar input interface{}\n\terr := json.Unmarshal([]byte(`{ \"cloudwatch_creds\" : {\"access_key\":\"metric_ak\", \"secret_key\":\"metric_sk\", \"token\": \"dummy_token\", \"profile\": \"dummy_profile\"}}`), &input)\n\tagent.Global_Config.Credentials = map[string]interface{}{\n\t\t\"access_key\": \"global_ak\",\n\t\t\"secret_key\": \"global_sk\",\n",
                    "rendered": {
                      "text": "func TestCreds(t *testing.T) {\n\tc := GetCredsRule(\"cloudwatch_creds\")\n\tvar input interface{}\n\terr := json.Unmarshal([]byte(`{ \"cloudwatch_creds\" : {\"access_key\":\"metric_ak\", \"secret_key\":\"metric_sk\", \"token\": \"dummy_token\", \"profile\": \"dummy_profile\"}}`), &input)\n\tagent.Global_Config.Credentials = map[string]interface{}{\n\t\t\"access_key\": \"global_ak\",\n\t\t\"secret_key\": \"global_sk\",\n",
                      "markdown": "`func TestCreds(t *testing.T) {\n\tc := GetCredsRule(\"cloudwatch_creds\")\n\tvar input interface{}\n\terr := json.Unmarshal([]byte(`{ \"cloudwatch_creds\" : {\"access_key\":\"metric_ak\", \"secret_key\":\"metric_sk\", \"token\": \"dummy_token\", \"profile\": \"dummy_profile\"}}`), &input)\n\tagent.Global_Config.Credentials = map[string]interface{}{\n\t\t\"access_key\": \"global_ak\",\n\t\t\"secret_key\": \"global_sk\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/agent/ruleOmitHostname.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 20,
                  "endLine": 29,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\nfunc init() {\n\to := new(OmitHostname)\n\tRegisterRule(\"omit_hostname\", o)\n}\n",
                    "rendered": {
                      "text": "\nfunc init() {\n\to := new(OmitHostname)\n\tRegisterRule(\"omit_hostname\", o)\n}\n",
                      "markdown": "`\nfunc init() {\n\to := new(OmitHostname)\n\tRegisterRule(\"omit_hostname\", o)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/agent/ruleOmitHostname.go"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 54,
                  "endLine": 21,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\tif os.Getenv(config.RUN_IN_CONTAINER) == config.RUN_IN_CONTAINER_TRUE {\n\t\treturnKey, returnVal = translator.DefaultCase(\"omit_hostname\", true, input)\n\t} else {\n\t\treturnKey, returnVal = translator.DefaultCase(\"omit_hostname\", false, input)\n\t}\n\tcontext.CurrentContext().SetOmitHostname(returnVal.(bool))\n\treturn\n",
                    "rendered": {
                      "text": "\tif os.Getenv(config.RUN_IN_CONTAINER) == config.RUN_IN_CONTAINER_TRUE {\n\t\treturnKey, returnVal = translator.DefaultCase(\"omit_hostname\", true, input)\n\t} else {\n\t\treturnKey, returnVal = translator.DefaultCase(\"omit_hostname\", false, input)\n\t}\n\tcontext.CurrentContext().SetOmitHostname(returnVal.(bool))\n\treturn\n",
                      "markdown": "`\tif os.Getenv(config.RUN_IN_CONTAINER) == config.RUN_IN_CONTAINER_TRUE {\n\t\treturnKey, returnVal = translator.DefaultCase(\"omit_hostname\", true, input)\n\t} else {\n\t\treturnKey, returnVal = translator.DefaultCase(\"omit_hostname\", false, input)\n\t}\n\tcontext.CurrentContext().SetOmitHostname(returnVal.(bool))\n\treturn\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/agent/ruleOmitHostname.go"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 54,
                  "endLine": 19,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\nfunc (o *OmitHostname) ApplyRule(input interface{}) (returnKey string, returnVal interface{}) {\n\tif os.Getenv(config.RUN_IN_CONTAINER) == config.RUN_IN_CONTAINER_TRUE {\n\t\treturnKey, returnVal = translator.DefaultCase(\"omit_hostname\", true, input)\n\t} else {\n\t\treturnKey, returnVal = translator.DefaultCase(\"omit_hostname\", false, input)\n\t}\n",
                    "rendered": {
                      "text": "\nfunc (o *OmitHostname) ApplyRule(input interface{}) (returnKey string, returnVal interface{}) {\n\tif os.Getenv(config.RUN_IN_CONTAINER) == config.RUN_IN_CONTAINER_TRUE {\n\t\treturnKey, returnVal = translator.DefaultCase(\"omit_hostname\", true, input)\n\t} else {\n\t\treturnKey, returnVal = translator.DefaultCase(\"omit_hostname\", false, input)\n\t}\n",
                      "markdown": "`\nfunc (o *OmitHostname) ApplyRule(input interface{}) (returnKey string, returnVal interface{}) {\n\tif os.Getenv(config.RUN_IN_CONTAINER) == config.RUN_IN_CONTAINER_TRUE {\n\t\treturnKey, returnVal = translator.DefaultCase(\"omit_hostname\", true, input)\n\t} else {\n\t\treturnKey, returnVal = translator.DefaultCase(\"omit_hostname\", false, input)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/agent/ruleGlobalCredentials_test.go"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 77,
                  "endLine": 21,
                  "endColumn": 87,
                  "snippet": {
                    "text": "\tctx.SetCredentials(map[string]string{})\n\tc := new(GlobalCreds)\n\tvar input interface{}\n\terr := json.Unmarshal([]byte(`{ \"credentials\" : {\"access_key\":\"metric_ak\", \"secret_key\":\"metric_sk\", \"token\": \"dummy_token\", \"profile\": \"dummy_profile\", \"role_arn\": \"role_value\"}}`), &input)\n\tif err == nil {\n\t\tc.ApplyRule(input)\n\t\tassert.Equal(t, \"role_value\", Global_Config.Role_arn, \"Expected to be equal\")\n",
                    "rendered": {
                      "text": "\tctx.SetCredentials(map[string]string{})\n\tc := new(GlobalCreds)\n\tvar input interface{}\n\terr := json.Unmarshal([]byte(`{ \"credentials\" : {\"access_key\":\"metric_ak\", \"secret_key\":\"metric_sk\", \"token\": \"dummy_token\", \"profile\": \"dummy_profile\", \"role_arn\": \"role_value\"}}`), &input)\n\tif err == nil {\n\t\tc.ApplyRule(input)\n\t\tassert.Equal(t, \"role_value\", Global_Config.Role_arn, \"Expected to be equal\")\n",
                      "markdown": "`\tctx.SetCredentials(map[string]string{})\n\tc := new(GlobalCreds)\n\tvar input interface{}\n\terr := json.Unmarshal([]byte(`{ \"credentials\" : {\"access_key\":\"metric_ak\", \"secret_key\":\"metric_sk\", \"token\": \"dummy_token\", \"profile\": \"dummy_profile\", \"role_arn\": \"role_value\"}}`), &input)\n\tif err == nil {\n\t\tc.ApplyRule(input)\n\t\tassert.Equal(t, \"role_value\", Global_Config.Role_arn, \"Expected to be equal\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/agent/agent_test.go"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 8,
                  "endLine": 146,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\t\"logtarget\":           logger.LogTargetLumberjack,\n\t\t\"metric_batch_size\":   1000,\n\t\t\"metric_buffer_limit\": 10000,\n\t\t\"omit_hostname\":       false,\n\t\t\"precision\":           \"\",\n\t\t\"quiet\":               false,\n\t\t\"round_interval\":      false,\n",
                    "rendered": {
                      "text": "\t\t\"logtarget\":           logger.LogTargetLumberjack,\n\t\t\"metric_batch_size\":   1000,\n\t\t\"metric_buffer_limit\": 10000,\n\t\t\"omit_hostname\":       false,\n\t\t\"precision\":           \"\",\n\t\t\"quiet\":               false,\n\t\t\"round_interval\":      false,\n",
                      "markdown": "`\t\t\"logtarget\":           logger.LogTargetLumberjack,\n\t\t\"metric_batch_size\":   1000,\n\t\t\"metric_buffer_limit\": 10000,\n\t\t\"omit_hostname\":       false,\n\t\t\"precision\":           \"\",\n\t\t\"quiet\":               false,\n\t\t\"round_interval\":      false,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/agent/agent_test.go"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 3,
                  "endLine": 140,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\t\"debug\":               false,\n\t\t\"flush_interval\":      \"1s\",\n\t\t\"flush_jitter\":        \"0s\",\n\t\t\"hostname\":            \"\",\n\t\t\"interval\":            \"60s\",\n\t\t\"logfile\":             Linux_Darwin_Default_Log_Dir,\n\t\t\"logtarget\":           logger.LogTargetLumberjack,\n",
                    "rendered": {
                      "text": "\t\t\"debug\":               false,\n\t\t\"flush_interval\":      \"1s\",\n\t\t\"flush_jitter\":        \"0s\",\n\t\t\"hostname\":            \"\",\n\t\t\"interval\":            \"60s\",\n\t\t\"logfile\":             Linux_Darwin_Default_Log_Dir,\n\t\t\"logtarget\":           logger.LogTargetLumberjack,\n",
                      "markdown": "`\t\t\"debug\":               false,\n\t\t\"flush_interval\":      \"1s\",\n\t\t\"flush_jitter\":        \"0s\",\n\t\t\"hostname\":            \"\",\n\t\t\"interval\":            \"60s\",\n\t\t\"logfile\":             Linux_Darwin_Default_Log_Dir,\n\t\t\"logtarget\":           logger.LogTargetLumberjack,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/agent/agent_test.go"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 8,
                  "endLine": 113,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\t\"logtarget\":           logger.LogTargetLumberjack,\n\t\t\"metric_batch_size\":   1000,\n\t\t\"metric_buffer_limit\": 10000,\n\t\t\"omit_hostname\":       false,\n\t\t\"precision\":           \"\",\n\t\t\"quiet\":               false,\n\t\t\"round_interval\":      false,\n",
                    "rendered": {
                      "text": "\t\t\"logtarget\":           logger.LogTargetLumberjack,\n\t\t\"metric_batch_size\":   1000,\n\t\t\"metric_buffer_limit\": 10000,\n\t\t\"omit_hostname\":       false,\n\t\t\"precision\":           \"\",\n\t\t\"quiet\":               false,\n\t\t\"round_interval\":      false,\n",
                      "markdown": "`\t\t\"logtarget\":           logger.LogTargetLumberjack,\n\t\t\"metric_batch_size\":   1000,\n\t\t\"metric_buffer_limit\": 10000,\n\t\t\"omit_hostname\":       false,\n\t\t\"precision\":           \"\",\n\t\t\"quiet\":               false,\n\t\t\"round_interval\":      false,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/agent/agent_test.go"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 3,
                  "endLine": 107,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\t\"debug\":               false,\n\t\t\"flush_interval\":      \"1s\",\n\t\t\"flush_jitter\":        \"0s\",\n\t\t\"hostname\":            \"\",\n\t\t\"interval\":            \"60s\",\n\t\t\"logfile\":             Linux_Darwin_Default_Log_Dir,\n\t\t\"logtarget\":           logger.LogTargetLumberjack,\n",
                    "rendered": {
                      "text": "\t\t\"debug\":               false,\n\t\t\"flush_interval\":      \"1s\",\n\t\t\"flush_jitter\":        \"0s\",\n\t\t\"hostname\":            \"\",\n\t\t\"interval\":            \"60s\",\n\t\t\"logfile\":             Linux_Darwin_Default_Log_Dir,\n\t\t\"logtarget\":           logger.LogTargetLumberjack,\n",
                      "markdown": "`\t\t\"debug\":               false,\n\t\t\"flush_interval\":      \"1s\",\n\t\t\"flush_jitter\":        \"0s\",\n\t\t\"hostname\":            \"\",\n\t\t\"interval\":            \"60s\",\n\t\t\"logfile\":             Linux_Darwin_Default_Log_Dir,\n\t\t\"logtarget\":           logger.LogTargetLumberjack,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/agent/agent_test.go"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 8,
                  "endLine": 79,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\t\"logtarget\":           logger.LogTargetLumberjack,\n\t\t\"metric_batch_size\":   1000,\n\t\t\"metric_buffer_limit\": 10000,\n\t\t\"omit_hostname\":       false,\n\t\t\"precision\":           \"\",\n\t\t\"quiet\":               false,\n\t\t\"round_interval\":      false,\n",
                    "rendered": {
                      "text": "\t\t\"logtarget\":           logger.LogTargetLumberjack,\n\t\t\"metric_batch_size\":   1000,\n\t\t\"metric_buffer_limit\": 10000,\n\t\t\"omit_hostname\":       false,\n\t\t\"precision\":           \"\",\n\t\t\"quiet\":               false,\n\t\t\"round_interval\":      false,\n",
                      "markdown": "`\t\t\"logtarget\":           logger.LogTargetLumberjack,\n\t\t\"metric_batch_size\":   1000,\n\t\t\"metric_buffer_limit\": 10000,\n\t\t\"omit_hostname\":       false,\n\t\t\"precision\":           \"\",\n\t\t\"quiet\":               false,\n\t\t\"round_interval\":      false,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/agent/agent_test.go"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 3,
                  "endLine": 73,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\t\"debug\":               true,\n\t\t\"flush_interval\":      \"1s\",\n\t\t\"flush_jitter\":        \"0s\",\n\t\t\"hostname\":            \"\",\n\t\t\"interval\":            \"60s\",\n\t\t\"logfile\":             Linux_Darwin_Default_Log_Dir,\n\t\t\"logtarget\":           logger.LogTargetLumberjack,\n",
                    "rendered": {
                      "text": "\t\t\"debug\":               true,\n\t\t\"flush_interval\":      \"1s\",\n\t\t\"flush_jitter\":        \"0s\",\n\t\t\"hostname\":            \"\",\n\t\t\"interval\":            \"60s\",\n\t\t\"logfile\":             Linux_Darwin_Default_Log_Dir,\n\t\t\"logtarget\":           logger.LogTargetLumberjack,\n",
                      "markdown": "`\t\t\"debug\":               true,\n\t\t\"flush_interval\":      \"1s\",\n\t\t\"flush_jitter\":        \"0s\",\n\t\t\"hostname\":            \"\",\n\t\t\"interval\":            \"60s\",\n\t\t\"logfile\":             Linux_Darwin_Default_Log_Dir,\n\t\t\"logtarget\":           logger.LogTargetLumberjack,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/agent/agent_test.go"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 8,
                  "endLine": 45,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\t\"logfile\":             Linux_Darwin_Default_Log_Dir,\n\t\t\"metric_batch_size\":   1000,\n\t\t\"metric_buffer_limit\": 10000,\n\t\t\"omit_hostname\":       false,\n\t\t\"precision\":           \"\",\n\t\t\"quiet\":               false,\n\t\t\"round_interval\":      false,\n",
                    "rendered": {
                      "text": "\t\t\"logfile\":             Linux_Darwin_Default_Log_Dir,\n\t\t\"metric_batch_size\":   1000,\n\t\t\"metric_buffer_limit\": 10000,\n\t\t\"omit_hostname\":       false,\n\t\t\"precision\":           \"\",\n\t\t\"quiet\":               false,\n\t\t\"round_interval\":      false,\n",
                      "markdown": "`\t\t\"logfile\":             Linux_Darwin_Default_Log_Dir,\n\t\t\"metric_batch_size\":   1000,\n\t\t\"metric_buffer_limit\": 10000,\n\t\t\"omit_hostname\":       false,\n\t\t\"precision\":           \"\",\n\t\t\"quiet\":               false,\n\t\t\"round_interval\":      false,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/agent/agent_test.go"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 3,
                  "endLine": 40,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\t\"debug\":               false,\n\t\t\"flush_interval\":      \"1s\",\n\t\t\"flush_jitter\":        \"0s\",\n\t\t\"hostname\":            \"\",\n\t\t\"interval\":            \"59s\",\n\t\t\"logfile\":             Linux_Darwin_Default_Log_Dir,\n\t\t\"metric_batch_size\":   1000,\n",
                    "rendered": {
                      "text": "\t\t\"debug\":               false,\n\t\t\"flush_interval\":      \"1s\",\n\t\t\"flush_jitter\":        \"0s\",\n\t\t\"hostname\":            \"\",\n\t\t\"interval\":            \"59s\",\n\t\t\"logfile\":             Linux_Darwin_Default_Log_Dir,\n\t\t\"metric_batch_size\":   1000,\n",
                      "markdown": "`\t\t\"debug\":               false,\n\t\t\"flush_interval\":      \"1s\",\n\t\t\"flush_jitter\":        \"0s\",\n\t\t\"hostname\":            \"\",\n\t\t\"interval\":            \"59s\",\n\t\t\"logfile\":             Linux_Darwin_Default_Log_Dir,\n\t\t\"metric_batch_size\":   1000,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/agent/ruleHostname.go"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 15,
                  "endLine": 28,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nfunc init() {\n\th := new(Hostname)\n\tRegisterRule(\"hostname\", h)\n}\n",
                    "rendered": {
                      "text": "\nfunc init() {\n\th := new(Hostname)\n\tRegisterRule(\"hostname\", h)\n}\n",
                      "markdown": "`\nfunc init() {\n\th := new(Hostname)\n\tRegisterRule(\"hostname\", h)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/agent/ruleHostname.go"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 48,
                  "endLine": 22,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\tif context.CurrentContext().RunInContainer() {\n\t\tdefaultValue = os.Getenv(config.HOST_NAME)\n\t}\n\treturnKey, returnVal = translator.DefaultCase(\"hostname\", defaultValue, input)\n\treturn\n}\n\n",
                    "rendered": {
                      "text": "\tif context.CurrentContext().RunInContainer() {\n\t\tdefaultValue = os.Getenv(config.HOST_NAME)\n\t}\n\treturnKey, returnVal = translator.DefaultCase(\"hostname\", defaultValue, input)\n\treturn\n}\n\n",
                      "markdown": "`\tif context.CurrentContext().RunInContainer() {\n\t\tdefaultValue = os.Getenv(config.HOST_NAME)\n\t}\n\treturnKey, returnVal = translator.DefaultCase(\"hostname\", defaultValue, input)\n\treturn\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/META-INF/groovy/org.codehaus.groovy.source.Extensions"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 52,
                  "endLine": 7,
                  "snippet": {
                    "text": "# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/META-INF/NOTICE"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 40,
                  "endLine": 5,
                  "snippet": {
                    "text": "Apache Groovy\nCopyright 2003-2023 The Apache Software Foundation\n\nThis product includes software developed at\nThe Apache Software Foundation (http://www.apache.org/).\n\nThis product includes/uses ANTLR2 (http://www.antlr2.org/)\ndeveloped by Terence Parr 1989-2006\n",
                    "rendered": {
                      "text": "Apache Groovy\nCopyright 2003-2023 The Apache Software Foundation\n\nThis product includes software developed at\nThe Apache Software Foundation (http://www.apache.org/).\n\nThis product includes/uses ANTLR2 (http://www.antlr2.org/)\ndeveloped by Terence Parr 1989-2006\n",
                      "markdown": "`Apache Groovy\nCopyright 2003-2023 The Apache Software Foundation\n\nThis product includes software developed at\nThe Apache Software Foundation (http://www.apache.org/).\n\nThis product includes/uses ANTLR2 (http://www.antlr2.org/)\ndeveloped by Terence Parr 1989-2006\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 329,
                  "startColumn": 7,
                  "endLine": 329,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\tARCH=amd64 TARGET_SUPPORTED_ARCH=x86_64 PREPKGPATH=\"$(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg\" $(BUILD_SPACE)/Tools/src/create_darwin.sh\n\tARCH=arm64 TARGET_SUPPORTED_ARCH=aarch64 PREPKGPATH=\"$(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg\" $(BUILD_SPACE)/Tools/src/create_darwin.sh\n\n.PHONY: fmt fmt-sh build test clean\n\n.PHONY: dockerized-build dockerized-build-vendor\ndockerized-build:\n",
                    "rendered": {
                      "text": "\tARCH=amd64 TARGET_SUPPORTED_ARCH=x86_64 PREPKGPATH=\"$(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg\" $(BUILD_SPACE)/Tools/src/create_darwin.sh\n\tARCH=arm64 TARGET_SUPPORTED_ARCH=aarch64 PREPKGPATH=\"$(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg\" $(BUILD_SPACE)/Tools/src/create_darwin.sh\n\n.PHONY: fmt fmt-sh build test clean\n\n.PHONY: dockerized-build dockerized-build-vendor\ndockerized-build:\n",
                      "markdown": "`\tARCH=amd64 TARGET_SUPPORTED_ARCH=x86_64 PREPKGPATH=\"$(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg\" $(BUILD_SPACE)/Tools/src/create_darwin.sh\n\tARCH=arm64 TARGET_SUPPORTED_ARCH=aarch64 PREPKGPATH=\"$(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg\" $(BUILD_SPACE)/Tools/src/create_darwin.sh\n\n.PHONY: fmt fmt-sh build test clean\n\n.PHONY: dockerized-build dockerized-build-vendor\ndockerized-build:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 308,
                  "endLine": 308,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\tcp $(BASE_SPACE)/packaging/darwin/com.amazon.cloudwatch.agent.plist $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\n.PHONY: package-rpm\npackage-rpm: package-prepare-rpm\n",
                    "rendered": {
                      "text": "\tcp $(BASE_SPACE)/packaging/darwin/com.amazon.cloudwatch.agent.plist $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\n.PHONY: package-rpm\npackage-rpm: package-prepare-rpm\n",
                      "markdown": "`\tcp $(BASE_SPACE)/packaging/darwin/com.amazon.cloudwatch.agent.plist $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\n.PHONY: package-rpm\npackage-rpm: package-prepare-rpm\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 306,
                  "endLine": 306,
                  "endColumn": 4,
                  "snippet": {
                    "text": "tch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/darwin/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/darwin/com.amazon.cloudwatch.agent.plist $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\n.PHONY: package-rpm\npackage-rpm: package-prepare-rpm\n\tARCH=amd64 TARGET_SUPPORTED_ARCH=x86_64 PREP",
                    "rendered": {
                      "text": "tch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/darwin/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/darwin/com.amazon.cloudwatch.agent.plist $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\n.PHONY: package-rpm\npackage-rpm: package-prepare-rpm\n\tARCH=amd64 TARGET_SUPPORTED_ARCH=x86_64 PREP",
                      "markdown": "`tch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/darwin/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/darwin/com.amazon.cloudwatch.agent.plist $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\n.PHONY: package-rpm\npackage-rpm: package-prepare-rpm\n\tARCH=amd64 TARGET_SUPPORTED_ARCH=x86_64 PREP`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 305,
                  "endLine": 305,
                  "endColumn": 4,
                  "snippet": {
                    "text": "re-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/darwin/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/darwin/com.amazon.cloudwatch.agent.plist $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\t",
                    "rendered": {
                      "text": "re-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/darwin/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/darwin/com.amazon.cloudwatch.agent.plist $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\t",
                      "markdown": "`re-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/darwin/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/darwin/com.amazon.cloudwatch.agent.plist $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\t`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 304,
                  "endLine": 304,
                  "endColumn": 4,
                  "snippet": {
                    "text": "h-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/darwin/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/darwin/com.amazon.cloudwatch.agent.plist $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packagin",
                    "rendered": {
                      "text": "h-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/darwin/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/darwin/com.amazon.cloudwatch.agent.plist $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packagin",
                      "markdown": "`h-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/darwin/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/darwin/com.amazon.cloudwatch.agent.plist $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packagin`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 303,
                  "endLine": 303,
                  "endColumn": 4,
                  "snippet": {
                    "text": "E)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/darwin/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_S",
                    "rendered": {
                      "text": "E)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/darwin/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_S",
                      "markdown": "`E)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/darwin/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_S`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 302,
                  "endLine": 302,
                  "endColumn": 4,
                  "snippet": {
                    "text": "censing/* $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/pac",
                    "rendered": {
                      "text": "censing/* $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/pac",
                      "markdown": "`censing/* $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/pac`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 301,
                  "endLine": 301,
                  "endColumn": 4,
                  "snippet": {
                    "text": "bin/darwin_arm64/* $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/pr",
                    "rendered": {
                      "text": "bin/darwin_arm64/* $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/pr",
                      "markdown": "`bin/darwin_arm64/* $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/pr`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 300,
                  "endLine": 300,
                  "endColumn": 4,
                  "snippet": {
                    "text": "win\n\tmkdir -p $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/darwin_arm64/* $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/arm",
                    "rendered": {
                      "text": "win\n\tmkdir -p $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/darwin_arm64/* $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/arm",
                      "markdown": "`win\n\tmkdir -p $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/darwin_arm64/* $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/arm`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 299,
                  "endLine": 299,
                  "endColumn": 4,
                  "snippet": {
                    "text": "E)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\t# arm64 darwin\n\tmkdir -p $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/darwin_arm64/* $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch",
                    "rendered": {
                      "text": "E)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\t# arm64 darwin\n\tmkdir -p $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/darwin_arm64/* $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch",
                      "markdown": "`E)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\t# arm64 darwin\n\tmkdir -p $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/darwin_arm64/* $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 298,
                  "endLine": 298,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\n\t# arm64 darwin\n\tmkdir -p $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/darwin_arm64/* $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n",
                    "rendered": {
                      "text": "\n\t# arm64 darwin\n\tmkdir -p $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/darwin_arm64/* $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n",
                      "markdown": "`\n\t# arm64 darwin\n\tmkdir -p $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/darwin_arm64/* $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg/\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 294,
                  "endLine": 294,
                  "endColumn": 4,
                  "snippet": {
                    "text": "tch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/darwin/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/darwin/com.amazon.cloudwatch.agent.plist $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\t# arm64 darwin\n\tmkdir -p $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/darwin_arm64/* $(BUILD",
                    "rendered": {
                      "text": "tch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/darwin/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/darwin/com.amazon.cloudwatch.agent.plist $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\t# arm64 darwin\n\tmkdir -p $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/darwin_arm64/* $(BUILD",
                      "markdown": "`tch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/darwin/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/darwin/com.amazon.cloudwatch.agent.plist $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\t# arm64 darwin\n\tmkdir -p $(BUILD_SPACE)/private/darwin/arm64/tar/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/darwin_arm64/* $(BUILD`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 293,
                  "endLine": 293,
                  "endColumn": 4,
                  "snippet": {
                    "text": "re-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/darwin/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/darwin/com.amazon.cloudwatch.agent.plist $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\t",
                    "rendered": {
                      "text": "re-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/darwin/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/darwin/com.amazon.cloudwatch.agent.plist $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\t",
                      "markdown": "`re-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/darwin/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/darwin/com.amazon.cloudwatch.agent.plist $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\t`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 292,
                  "endLine": 292,
                  "endColumn": 4,
                  "snippet": {
                    "text": "h-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/darwin/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/darwin/com.amazon.cloudwatch.agent.plist $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packagin",
                    "rendered": {
                      "text": "h-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/darwin/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/darwin/com.amazon.cloudwatch.agent.plist $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packagin",
                      "markdown": "`h-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/darwin/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/darwin/com.amazon.cloudwatch.agent.plist $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packagin`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 291,
                  "endLine": 291,
                  "endColumn": 4,
                  "snippet": {
                    "text": "E)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/darwin/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_S",
                    "rendered": {
                      "text": "E)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/darwin/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_S",
                      "markdown": "`E)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/darwin/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_S`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 290,
                  "endLine": 290,
                  "endColumn": 4,
                  "snippet": {
                    "text": "censing/* $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/pac",
                    "rendered": {
                      "text": "censing/* $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/pac",
                      "markdown": "`censing/* $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/pac`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 289,
                  "endLine": 289,
                  "endColumn": 4,
                  "snippet": {
                    "text": "bin/darwin_amd64/* $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/pr",
                    "rendered": {
                      "text": "bin/darwin_amd64/* $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/pr",
                      "markdown": "`bin/darwin_amd64/* $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/pr`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 288,
                  "endLine": 288,
                  "endColumn": 4,
                  "snippet": {
                    "text": "win\n\tmkdir -p $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/darwin_amd64/* $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/amd",
                    "rendered": {
                      "text": "win\n\tmkdir -p $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/darwin_amd64/* $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/amd",
                      "markdown": "`win\n\tmkdir -p $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/darwin_amd64/* $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/amd`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 287,
                  "endLine": 287,
                  "endColumn": 4,
                  "snippet": {
                    "text": "y-jmx-metrics.jar\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\npackage-prepare-darwin-tar:\n\t# amd64 darwin\n\tmkdir -p $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/darwin_amd64/* $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch",
                    "rendered": {
                      "text": "y-jmx-metrics.jar\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\npackage-prepare-darwin-tar:\n\t# amd64 darwin\n\tmkdir -p $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/darwin_amd64/* $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch",
                      "markdown": "`y-jmx-metrics.jar\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\npackage-prepare-darwin-tar:\n\t# amd64 darwin\n\tmkdir -p $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/darwin_amd64/* $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 286,
                  "endLine": 286,
                  "endColumn": 4,
                  "snippet": {
                    "text": "package-prepare-darwin-tar:\n\t# amd64 darwin\n\tmkdir -p $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/darwin_amd64/* $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n",
                    "rendered": {
                      "text": "package-prepare-darwin-tar:\n\t# amd64 darwin\n\tmkdir -p $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/darwin_amd64/* $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n",
                      "markdown": "`package-prepare-darwin-tar:\n\t# amd64 darwin\n\tmkdir -p $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/darwin_amd64/* $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 281,
                  "endLine": 281,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\tcp ${BASE_SPACE}/packaging/windows/install.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/uninstall.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\npackage-prepare-darwin-tar:\n\t# amd64 darwin\n",
                    "rendered": {
                      "text": "\tcp ${BASE_SPACE}/packaging/windows/install.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/uninstall.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\npackage-prepare-darwin-tar:\n\t# amd64 darwin\n",
                      "markdown": "`\tcp ${BASE_SPACE}/packaging/windows/install.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/uninstall.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\npackage-prepare-darwin-tar:\n\t# amd64 darwin\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 280,
                  "endLine": 280,
                  "endColumn": 4,
                  "snippet": {
                    "text": "te/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/install.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/uninstall.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\npackage-prepare-darwin-tar:\n\t# amd64 darwin\n\tmkdir -p $(BUILD_SPACE)/private/darwin/amd64/tar/amaz",
                    "rendered": {
                      "text": "te/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/install.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/uninstall.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\npackage-prepare-darwin-tar:\n\t# amd64 darwin\n\tmkdir -p $(BUILD_SPACE)/private/darwin/amd64/tar/amaz",
                      "markdown": "`te/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/install.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/uninstall.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\npackage-prepare-darwin-tar:\n\t# amd64 darwin\n\tmkdir -p $(BUILD_SPACE)/private/darwin/amd64/tar/amaz`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 279,
                  "endLine": 279,
                  "endColumn": 4,
                  "snippet": {
                    "text": "amazon-cloudwatch-agent-schema.json\n\tcp ${BASE_SPACE}/packaging/windows/amazon-cloudwatch-agent-ctl.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/install.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/uninstall.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\tcp -rf $(BASE_SPAC",
                    "rendered": {
                      "text": "amazon-cloudwatch-agent-schema.json\n\tcp ${BASE_SPACE}/packaging/windows/amazon-cloudwatch-agent-ctl.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/install.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/uninstall.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\tcp -rf $(BASE_SPAC",
                      "markdown": "`amazon-cloudwatch-agent-schema.json\n\tcp ${BASE_SPACE}/packaging/windows/amazon-cloudwatch-agent-ctl.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/install.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/uninstall.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\tcp -rf $(BASE_SPAC`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 278,
                  "endLine": 278,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp ${BASE_SPACE}/packaging/windows/amazon-cloudwatch-agent-ctl.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/install.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/uninstall.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar ",
                    "rendered": {
                      "text": "\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp ${BASE_SPACE}/packaging/windows/amazon-cloudwatch-agent-ctl.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/install.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/uninstall.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar ",
                      "markdown": "`\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp ${BASE_SPACE}/packaging/windows/amazon-cloudwatch-agent-ctl.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/install.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/uninstall.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 277,
                  "endLine": 277,
                  "endColumn": 4,
                  "snippet": {
                    "text": "agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp ${BASE_SPACE}/packaging/windows/amazon-cloudwatch-agent-ctl.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/install.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/unin",
                    "rendered": {
                      "text": "agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp ${BASE_SPACE}/packaging/windows/amazon-cloudwatch-agent-ctl.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/install.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/unin",
                      "markdown": "`agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp ${BASE_SPACE}/packaging/windows/amazon-cloudwatch-agent-ctl.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/install.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/unin`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 276,
                  "endLine": 276,
                  "endColumn": 4,
                  "snippet": {
                    "text": "private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp ${BASE_SPACE}/packaging/windows/amazon-cloudwatch-agent-ctl.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $",
                    "rendered": {
                      "text": "private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp ${BASE_SPACE}/packaging/windows/amazon-cloudwatch-agent-ctl.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $",
                      "markdown": "`private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp ${BASE_SPACE}/packaging/windows/amazon-cloudwatch-agent-ctl.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 275,
                  "endLine": 275,
                  "endColumn": 4,
                  "snippet": {
                    "text": "sing/* $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp ${BASE_SPACE}/p",
                    "rendered": {
                      "text": "sing/* $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp ${BASE_SPACE}/p",
                      "markdown": "`sing/* $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp ${BASE_SPACE}/p`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 274,
                  "endLine": 274,
                  "endColumn": 4,
                  "snippet": {
                    "text": "windows_amd64/* $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/",
                    "rendered": {
                      "text": "windows_amd64/* $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/",
                      "markdown": "`windows_amd64/* $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 273,
                  "endLine": 273,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\tmkdir -p $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/windows_amd64/* $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/windows/",
                    "rendered": {
                      "text": "\tmkdir -p $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/windows_amd64/* $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/windows/",
                      "markdown": "`\tmkdir -p $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/windows_amd64/* $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/windows/`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 272,
                  "endLine": 272,
                  "endColumn": 4,
                  "snippet": {
                    "text": " $(BUILD_SPACE)/\n\tcp -rf $(BASE_SPACE)/packaging $(BUILD_SPACE)/\n\npackage-prepare-win-zip:\n\t# amd64 win\n\tmkdir -p $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/windows_amd64/* $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwa",
                    "rendered": {
                      "text": " $(BUILD_SPACE)/\n\tcp -rf $(BASE_SPACE)/packaging $(BUILD_SPACE)/\n\npackage-prepare-win-zip:\n\t# amd64 win\n\tmkdir -p $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/windows_amd64/* $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwa",
                      "markdown": "` $(BUILD_SPACE)/\n\tcp -rf $(BASE_SPACE)/packaging $(BUILD_SPACE)/\n\npackage-prepare-win-zip:\n\t# amd64 win\n\tmkdir -p $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/windows_amd64/* $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwa`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 271,
                  "endLine": 271,
                  "endColumn": 4,
                  "snippet": {
                    "text": "package-prepare-win-zip:\n\t# amd64 win\n\tmkdir -p $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/windows_amd64/* $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n",
                    "rendered": {
                      "text": "package-prepare-win-zip:\n\t# amd64 win\n\tmkdir -p $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/windows_amd64/* $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n",
                      "markdown": "`package-prepare-win-zip:\n\t# amd64 win\n\tmkdir -p $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/windows_amd64/* $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 266,
                  "endLine": 266,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\tcp -rf $(BASE_SPACE)/packaging $(BUILD_SPACE)/\n\npackage-prepare-win-zip:\n\t# amd64 win\n",
                    "rendered": {
                      "text": "\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\tcp -rf $(BASE_SPACE)/packaging $(BUILD_SPACE)/\n\npackage-prepare-win-zip:\n\t# amd64 win\n",
                      "markdown": "`\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\tcp -rf $(BASE_SPACE)/packaging $(BUILD_SPACE)/\n\npackage-prepare-win-zip:\n\t# amd64 win\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 265,
                  "endLine": 265,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\tcp -rf $(BASE_SPACE)/packaging $(BUILD_SPACE)/\n\npackage-prepare-win-zip:\n",
                    "rendered": {
                      "text": "\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\tcp -rf $(BASE_SPACE)/packaging $(BUILD_SPACE)/\n\npackage-prepare-win-zip:\n",
                      "markdown": "`\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\tcp -rf $(BASE_SPACE)/packaging $(BUILD_SPACE)/\n\npackage-prepare-win-zip:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 263,
                  "endLine": 263,
                  "endColumn": 4,
                  "snippet": {
                    "text": "-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\tcp -rf $(BASE_SPACE)/packaging $(BUILD_SPACE)/\n\npackage-prepare-win-zip:\n\t# amd64 win\n\tmkdir -p $(B",
                    "rendered": {
                      "text": "-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\tcp -rf $(BASE_SPACE)/packaging $(BUILD_SPACE)/\n\npackage-prepare-win-zip:\n\t# amd64 win\n\tmkdir -p $(B",
                      "markdown": "`-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\tcp -rf $(BASE_SPACE)/packaging $(BUILD_SPACE)/\n\npackage-prepare-win-zip:\n\t# amd64 win\n\tmkdir -p $(B`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 262,
                  "endLine": 262,
                  "endColumn": 4,
                  "snippet": {
                    "text": "4/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-me",
                    "rendered": {
                      "text": "4/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-me",
                      "markdown": "`4/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-me`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 261,
                  "endLine": 261,
                  "endColumn": 4,
                  "snippet": {
                    "text": "on-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPA",
                    "rendered": {
                      "text": "on-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPA",
                      "markdown": "`on-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPA`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 260,
                  "endLine": 260,
                  "endColumn": 4,
                  "snippet": {
                    "text": "gent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.",
                    "rendered": {
                      "text": "gent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.",
                      "markdown": "`gent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 259,
                  "endLine": 259,
                  "endColumn": 4,
                  "snippet": {
                    "text": "inux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux",
                    "rendered": {
                      "text": "inux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux",
                      "markdown": "`inux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 258,
                  "endLine": 258,
                  "endColumn": 4,
                  "snippet": {
                    "text": "/licensing/* $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/",
                    "rendered": {
                      "text": "/licensing/* $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/",
                      "markdown": "`/licensing/* $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 257,
                  "endLine": 257,
                  "endColumn": 4,
                  "snippet": {
                    "text": "CE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-clou",
                    "rendered": {
                      "text": "CE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-clou",
                      "markdown": "`CE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-clou`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 256,
                  "endLine": 256,
                  "endColumn": 4,
                  "snippet": {
                    "text": "m64 deb\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/priva",
                    "rendered": {
                      "text": "m64 deb\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/priva",
                      "markdown": "`m64 deb\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/priva`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 255,
                  "endLine": 255,
                  "endColumn": 4,
                  "snippet": {
                    "text": "LD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\t# arm64 deb\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-ag",
                    "rendered": {
                      "text": "LD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\t# arm64 deb\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-ag",
                      "markdown": "`LD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\t# arm64 deb\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-ag`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 254,
                  "endLine": 254,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\n\t# arm64 deb\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n",
                    "rendered": {
                      "text": "\n\t# arm64 deb\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n",
                      "markdown": "`\n\t# arm64 deb\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 250,
                  "endLine": 250,
                  "endColumn": 4,
                  "snippet": {
                    "text": "-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\t# arm64 deb\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE",
                    "rendered": {
                      "text": "-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\t# arm64 deb\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE",
                      "markdown": "`-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\t# arm64 deb\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 249,
                  "endLine": 249,
                  "endColumn": 4,
                  "snippet": {
                    "text": "4/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-me",
                    "rendered": {
                      "text": "4/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-me",
                      "markdown": "`4/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-me`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 248,
                  "endLine": 248,
                  "endColumn": 4,
                  "snippet": {
                    "text": "on-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPA",
                    "rendered": {
                      "text": "on-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPA",
                      "markdown": "`on-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPA`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 247,
                  "endLine": 247,
                  "endColumn": 4,
                  "snippet": {
                    "text": "gent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.",
                    "rendered": {
                      "text": "gent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.",
                      "markdown": "`gent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 246,
                  "endLine": 246,
                  "endColumn": 4,
                  "snippet": {
                    "text": "inux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux",
                    "rendered": {
                      "text": "inux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux",
                      "markdown": "`inux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 245,
                  "endLine": 245,
                  "endColumn": 4,
                  "snippet": {
                    "text": "/licensing/* $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/",
                    "rendered": {
                      "text": "/licensing/* $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/",
                      "markdown": "`/licensing/* $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 244,
                  "endLine": 244,
                  "endColumn": 4,
                  "snippet": {
                    "text": "CE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-clou",
                    "rendered": {
                      "text": "CE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-clou",
                      "markdown": "`CE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-clou`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 243,
                  "endLine": 243,
                  "endColumn": 4,
                  "snippet": {
                    "text": "d64 deb\n\tmkdir -p $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/priva",
                    "rendered": {
                      "text": "d64 deb\n\tmkdir -p $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/priva",
                      "markdown": "`d64 deb\n\tmkdir -p $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/priva`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 242,
                  "endLine": 242,
                  "endColumn": 4,
                  "snippet": {
                    "text": "/opentelemetry-jmx-metrics.jar\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\npackage-prepare-deb:\n\t# amd64 deb\n\tmkdir -p $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-ag",
                    "rendered": {
                      "text": "/opentelemetry-jmx-metrics.jar\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\npackage-prepare-deb:\n\t# amd64 deb\n\tmkdir -p $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-ag",
                      "markdown": "`/opentelemetry-jmx-metrics.jar\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\npackage-prepare-deb:\n\t# amd64 deb\n\tmkdir -p $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-ag`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 241,
                  "endLine": 241,
                  "endColumn": 4,
                  "snippet": {
                    "text": "package-prepare-deb:\n\t# amd64 deb\n\tmkdir -p $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n",
                    "rendered": {
                      "text": "package-prepare-deb:\n\t# amd64 deb\n\tmkdir -p $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n",
                      "markdown": "`package-prepare-deb:\n\t# amd64 deb\n\tmkdir -p $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 236,
                  "endLine": 236,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\npackage-prepare-deb:\n\t# amd64 deb\n",
                    "rendered": {
                      "text": "\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\npackage-prepare-deb:\n\t# amd64 deb\n",
                      "markdown": "`\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\npackage-prepare-deb:\n\t# amd64 deb\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 235,
                  "endLine": 235,
                  "endColumn": 4,
                  "snippet": {
                    "text": "-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\npackage-prepare-deb:\n\t# amd64 deb\n\tmkdir -p $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch",
                    "rendered": {
                      "text": "-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\npackage-prepare-deb:\n\t# amd64 deb\n\tmkdir -p $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch",
                      "markdown": "`-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\npackage-prepare-deb:\n\t# amd64 deb\n\tmkdir -p $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 234,
                  "endLine": 234,
                  "endColumn": 4,
                  "snippet": {
                    "text": "zon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-me",
                    "rendered": {
                      "text": "zon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-me",
                      "markdown": "`zon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-me`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 233,
                  "endLine": 233,
                  "endColumn": 4,
                  "snippet": {
                    "text": "4/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPA",
                    "rendered": {
                      "text": "4/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPA",
                      "markdown": "`4/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPA`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 232,
                  "endLine": 232,
                  "endColumn": 4,
                  "snippet": {
                    "text": "on-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/confi",
                    "rendered": {
                      "text": "on-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/confi",
                      "markdown": "`on-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/confi`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 231,
                  "endLine": 231,
                  "endColumn": 4,
                  "snippet": {
                    "text": "gent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cl",
                    "rendered": {
                      "text": "gent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cl",
                      "markdown": "`gent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cl`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 230,
                  "endLine": 230,
                  "endColumn": 4,
                  "snippet": {
                    "text": "inux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux",
                    "rendered": {
                      "text": "inux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux",
                      "markdown": "`inux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 229,
                  "endLine": 229,
                  "endColumn": 4,
                  "snippet": {
                    "text": "/licensing/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/",
                    "rendered": {
                      "text": "/licensing/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/",
                      "markdown": "`/licensing/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 228,
                  "endLine": 228,
                  "endColumn": 4,
                  "snippet": {
                    "text": "CE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-clou",
                    "rendered": {
                      "text": "CE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-clou",
                      "markdown": "`CE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-clou`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 227,
                  "endLine": 227,
                  "endColumn": 4,
                  "snippet": {
                    "text": "m64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/priva",
                    "rendered": {
                      "text": "m64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/priva",
                      "markdown": "`m64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/priva`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 226,
                  "endLine": 226,
                  "endColumn": 4,
                  "snippet": {
                    "text": "LD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\t# arm64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-ag",
                    "rendered": {
                      "text": "LD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\t# arm64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-ag",
                      "markdown": "`LD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\t# arm64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-ag`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 225,
                  "endLine": 225,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\n\t# arm64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n",
                    "rendered": {
                      "text": "\n\t# arm64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n",
                      "markdown": "`\n\t# arm64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 8,
                  "endLine": 224,
                  "snippet": {
                    "text": "lator/config/schema.json $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\t# arm64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BA",
                    "rendered": {
                      "text": "lator/config/schema.json $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\t# arm64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BA",
                      "markdown": "`lator/config/schema.json $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\t# arm64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BA`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 221,
                  "endLine": 221,
                  "endColumn": 4,
                  "snippet": {
                    "text": "-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\t# arm64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE",
                    "rendered": {
                      "text": "-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\t# arm64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE",
                      "markdown": "`-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-metrics.jar\n\n\t# arm64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 220,
                  "endLine": 220,
                  "endColumn": 4,
                  "snippet": {
                    "text": "zon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-me",
                    "rendered": {
                      "text": "zon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-me",
                      "markdown": "`zon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/opentelemetry-jmx-me`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 219,
                  "endLine": 219,
                  "endColumn": 4,
                  "snippet": {
                    "text": "4/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPA",
                    "rendered": {
                      "text": "4/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPA",
                      "markdown": "`4/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPA`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 218,
                  "endLine": 218,
                  "endColumn": 4,
                  "snippet": {
                    "text": "on-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/confi",
                    "rendered": {
                      "text": "on-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/confi",
                      "markdown": "`on-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/confi`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 217,
                  "endLine": 217,
                  "endColumn": 4,
                  "snippet": {
                    "text": "gent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cl",
                    "rendered": {
                      "text": "gent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cl",
                      "markdown": "`gent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cl`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 216,
                  "endLine": 216,
                  "endColumn": 4,
                  "snippet": {
                    "text": "inux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux",
                    "rendered": {
                      "text": "inux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux",
                      "markdown": "`inux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 215,
                  "endLine": 215,
                  "endColumn": 4,
                  "snippet": {
                    "text": "/licensing/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/",
                    "rendered": {
                      "text": "/licensing/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/",
                      "markdown": "`/licensing/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 214,
                  "endLine": 214,
                  "endColumn": 4,
                  "snippet": {
                    "text": "CE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-clou",
                    "rendered": {
                      "text": "CE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-clou",
                      "markdown": "`CE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-clou`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 213,
                  "endLine": 213,
                  "endColumn": 4,
                  "snippet": {
                    "text": "d64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/priva",
                    "rendered": {
                      "text": "d64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/priva",
                      "markdown": "`d64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/priva`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 212,
                  "endLine": 212,
                  "endColumn": 4,
                  "snippet": {
                    "text": "xt -failfast ./...\n\nclean::\n\trm -rf release/ build/\n\trm -f CWAGENT_VERSION\n\npackage-prepare-rpm:\n\t# amd64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-ag",
                    "rendered": {
                      "text": "xt -failfast ./...\n\nclean::\n\trm -rf release/ build/\n\trm -f CWAGENT_VERSION\n\npackage-prepare-rpm:\n\t# amd64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-ag",
                      "markdown": "`xt -failfast ./...\n\nclean::\n\trm -rf release/ build/\n\trm -f CWAGENT_VERSION\n\npackage-prepare-rpm:\n\t# amd64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-ag`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 211,
                  "endLine": 211,
                  "endColumn": 4,
                  "snippet": {
                    "text": "package-prepare-rpm:\n\t# amd64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n",
                    "rendered": {
                      "text": "package-prepare-rpm:\n\t# amd64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n",
                      "markdown": "`package-prepare-rpm:\n\t# amd64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 8,
                  "endLine": 210,
                  "snippet": {
                    "text": "\trm -f CWAGENT_VERSION\n\npackage-prepare-rpm:\n\t# amd64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n",
                    "rendered": {
                      "text": "\trm -f CWAGENT_VERSION\n\npackage-prepare-rpm:\n\t# amd64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n",
                      "markdown": "`\trm -f CWAGENT_VERSION\n\npackage-prepare-rpm:\n\t# amd64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 19,
                  "endLine": 172,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\nimpi: install-impi\n\t# Skip plugins/plugins.go\n\t@echo $(ALL_SRC) | xargs -n 10 $(IMPI) --local $(CW_AGENT_IMPORT_PATH) --scheme stdThirdPartyLocal --skip plugins/plugins.go\n\t@echo \"Check import order/grouping finished\"\n\naddlicense: install-addlicense\n",
                    "rendered": {
                      "text": "\nimpi: install-impi\n\t# Skip plugins/plugins.go\n\t@echo $(ALL_SRC) | xargs -n 10 $(IMPI) --local $(CW_AGENT_IMPORT_PATH) --scheme stdThirdPartyLocal --skip plugins/plugins.go\n\t@echo \"Check import order/grouping finished\"\n\naddlicense: install-addlicense\n",
                      "markdown": "`\nimpi: install-impi\n\t# Skip plugins/plugins.go\n\t@echo $(ALL_SRC) | xargs -n 10 $(IMPI) --local $(CW_AGENT_IMPORT_PATH) --scheme stdThirdPartyLocal --skip plugins/plugins.go\n\t@echo \"Check import order/grouping finished\"\n\naddlicense: install-addlicense\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 19,
                  "endLine": 165,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\nfmt: install-goimports addlicense\n\tgo fmt ./...\n\t@echo $(ALL_SRC) | xargs -n 10 $(GOIMPORTS) $(GOIMPORTS_OPT)\n\nfmt-sh: install-shfmt\n\t${SHFMT} -w -d -i 5 .\n",
                    "rendered": {
                      "text": "\nfmt: install-goimports addlicense\n\tgo fmt ./...\n\t@echo $(ALL_SRC) | xargs -n 10 $(GOIMPORTS) $(GOIMPORTS_OPT)\n\nfmt-sh: install-shfmt\n\t${SHFMT} -w -d -i 5 .\n",
                      "markdown": "`\nfmt: install-goimports addlicense\n\tgo fmt ./...\n\t@echo $(ALL_SRC) | xargs -n 10 $(GOIMPORTS) $(GOIMPORTS_OPT)\n\nfmt-sh: install-shfmt\n\t${SHFMT} -w -d -i 5 .\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 3,
                  "endLine": 164,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\tcurl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(TOOLS_BIN_DIR) v1.50.1\n\nfmt: install-goimports addlicense\n\tgo fmt ./...\n\t@echo $(ALL_SRC) | xargs -n 10 $(GOIMPORTS) $(GOIMPORTS_OPT)\n\nfmt-sh: install-shfmt\n",
                    "rendered": {
                      "text": "\tcurl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(TOOLS_BIN_DIR) v1.50.1\n\nfmt: install-goimports addlicense\n\tgo fmt ./...\n\t@echo $(ALL_SRC) | xargs -n 10 $(GOIMPORTS) $(GOIMPORTS_OPT)\n\nfmt-sh: install-shfmt\n",
                      "markdown": "`\tcurl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(TOOLS_BIN_DIR) v1.50.1\n\nfmt: install-goimports addlicense\n\tgo fmt ./...\n\t@echo $(ALL_SRC) | xargs -n 10 $(GOIMPORTS) $(GOIMPORTS_OPT)\n\nfmt-sh: install-shfmt\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 161,
                  "endLine": 161,
                  "endColumn": 6,
                  "snippet": {
                    "text": "install-golangci-lint:\n\t#Install from source for golangci-lint is not recommended based on https://golangci-lint.run/usage/install/#install-from-source so using binary\n\t#installation\n\tcurl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(TOOLS_BIN_DIR) v1.50.1\n\nfmt: install-goimports addlicense\n\tgo fmt ./...\n",
                    "rendered": {
                      "text": "install-golangci-lint:\n\t#Install from source for golangci-lint is not recommended based on https://golangci-lint.run/usage/install/#install-from-source so using binary\n\t#installation\n\tcurl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(TOOLS_BIN_DIR) v1.50.1\n\nfmt: install-goimports addlicense\n\tgo fmt ./...\n",
                      "markdown": "`install-golangci-lint:\n\t#Install from source for golangci-lint is not recommended based on https://golangci-lint.run/usage/install/#install-from-source so using binary\n\t#installation\n\tcurl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(TOOLS_BIN_DIR) v1.50.1\n\nfmt: install-goimports addlicense\n\tgo fmt ./...\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 141,
                  "endLine": 141,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\trm -rf tmp\n\tmkdir -p tmp/windows_amd64\n\tcp build/bin/windows_amd64/* tmp/windows_amd64\n\tdocker build --platform windows/amd64 -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile.Windows . -t amazon-cloudwatch-agent\n\trm -rf tmp\n\ninstall-goimports:\n",
                    "rendered": {
                      "text": "\trm -rf tmp\n\tmkdir -p tmp/windows_amd64\n\tcp build/bin/windows_amd64/* tmp/windows_amd64\n\tdocker build --platform windows/amd64 -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile.Windows . -t amazon-cloudwatch-agent\n\trm -rf tmp\n\ninstall-goimports:\n",
                      "markdown": "`\trm -rf tmp\n\tmkdir -p tmp/windows_amd64\n\tcp build/bin/windows_amd64/* tmp/windows_amd64\n\tdocker build --platform windows/amd64 -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile.Windows . -t amazon-cloudwatch-agent\n\trm -rf tmp\n\ninstall-goimports:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 140,
                  "endLine": 140,
                  "endColumn": 4,
                  "snippet": {
                    "text": "build-for-docker-fast-windows-amd64: build-for-docker-windows-amd64\n\trm -rf tmp\n\tmkdir -p tmp/windows_amd64\n\tcp build/bin/windows_amd64/* tmp/windows_amd64\n\tdocker build --platform windows/amd64 -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile.Windows . -t amazon-cloudwatch-agent\n\trm -rf tmp\n\n",
                    "rendered": {
                      "text": "build-for-docker-fast-windows-amd64: build-for-docker-windows-amd64\n\trm -rf tmp\n\tmkdir -p tmp/windows_amd64\n\tcp build/bin/windows_amd64/* tmp/windows_amd64\n\tdocker build --platform windows/amd64 -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile.Windows . -t amazon-cloudwatch-agent\n\trm -rf tmp\n\n",
                      "markdown": "`build-for-docker-fast-windows-amd64: build-for-docker-windows-amd64\n\trm -rf tmp\n\tmkdir -p tmp/windows_amd64\n\tcp build/bin/windows_amd64/* tmp/windows_amd64\n\tdocker build --platform windows/amd64 -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile.Windows . -t amazon-cloudwatch-agent\n\trm -rf tmp\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 135,
                  "endLine": 135,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\tdocker buildx build --platform linux/arm64 . -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile -t $(IMAGE) --load\n\ndocker-push:\n\tdocker push $(IMAGE)\n\nbuild-for-docker-fast-windows-amd64: build-for-docker-windows-amd64\n\trm -rf tmp\n",
                    "rendered": {
                      "text": "\tdocker buildx build --platform linux/arm64 . -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile -t $(IMAGE) --load\n\ndocker-push:\n\tdocker push $(IMAGE)\n\nbuild-for-docker-fast-windows-amd64: build-for-docker-windows-amd64\n\trm -rf tmp\n",
                      "markdown": "`\tdocker buildx build --platform linux/arm64 . -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile -t $(IMAGE) --load\n\ndocker-push:\n\tdocker push $(IMAGE)\n\nbuild-for-docker-fast-windows-amd64: build-for-docker-windows-amd64\n\trm -rf tmp\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 132,
                  "endLine": 132,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\tdocker buildx build --platform linux/amd64 . -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile -t $(IMAGE) --load\n\ndocker-build-arm64: build-for-docker-arm64\n\tdocker buildx build --platform linux/arm64 . -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile -t $(IMAGE) --load\n\ndocker-push:\n\tdocker push $(IMAGE)\n",
                    "rendered": {
                      "text": "\tdocker buildx build --platform linux/amd64 . -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile -t $(IMAGE) --load\n\ndocker-build-arm64: build-for-docker-arm64\n\tdocker buildx build --platform linux/arm64 . -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile -t $(IMAGE) --load\n\ndocker-push:\n\tdocker push $(IMAGE)\n",
                      "markdown": "`\tdocker buildx build --platform linux/amd64 . -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile -t $(IMAGE) --load\n\ndocker-build-arm64: build-for-docker-arm64\n\tdocker buildx build --platform linux/arm64 . -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile -t $(IMAGE) --load\n\ndocker-push:\n\tdocker push $(IMAGE)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 129,
                  "endLine": 129,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\tdocker buildx build --platform linux/amd64,linux/arm64 . -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile -t $(IMAGE)\n\ndocker-build-amd64: build-for-docker-amd64\n\tdocker buildx build --platform linux/amd64 . -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile -t $(IMAGE) --load\n\ndocker-build-arm64: build-for-docker-arm64\n\tdocker buildx build --platform linux/arm64 . -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile -t $(IMAGE) --load\n",
                    "rendered": {
                      "text": "\tdocker buildx build --platform linux/amd64,linux/arm64 . -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile -t $(IMAGE)\n\ndocker-build-amd64: build-for-docker-amd64\n\tdocker buildx build --platform linux/amd64 . -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile -t $(IMAGE) --load\n\ndocker-build-arm64: build-for-docker-arm64\n\tdocker buildx build --platform linux/arm64 . -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile -t $(IMAGE) --load\n",
                      "markdown": "`\tdocker buildx build --platform linux/amd64,linux/arm64 . -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile -t $(IMAGE)\n\ndocker-build-amd64: build-for-docker-amd64\n\tdocker buildx build --platform linux/amd64 . -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile -t $(IMAGE) --load\n\ndocker-build-arm64: build-for-docker-arm64\n\tdocker buildx build --platform linux/arm64 . -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile -t $(IMAGE) --load\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 126,
                  "endLine": 126,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/bin/linux_arm64/opentelemetry-jmx-metrics.jar\n\ndocker-build: build-for-docker-amd64 build-for-docker-arm64\n\tdocker buildx build --platform linux/amd64,linux/arm64 . -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile -t $(IMAGE)\n\ndocker-build-amd64: build-for-docker-amd64\n\tdocker buildx build --platform linux/amd64 . -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile -t $(IMAGE) --load\n",
                    "rendered": {
                      "text": "\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/bin/linux_arm64/opentelemetry-jmx-metrics.jar\n\ndocker-build: build-for-docker-amd64 build-for-docker-arm64\n\tdocker buildx build --platform linux/amd64,linux/arm64 . -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile -t $(IMAGE)\n\ndocker-build-amd64: build-for-docker-amd64\n\tdocker buildx build --platform linux/amd64 . -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile -t $(IMAGE) --load\n",
                      "markdown": "`\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/bin/linux_arm64/opentelemetry-jmx-metrics.jar\n\ndocker-build: build-for-docker-amd64 build-for-docker-arm64\n\tdocker buildx build --platform linux/amd64,linux/arm64 . -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile -t $(IMAGE)\n\ndocker-build-amd64: build-for-docker-amd64\n\tdocker buildx build --platform linux/amd64 . -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile -t $(IMAGE) --load\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 123,
                  "endLine": 123,
                  "endColumn": 4,
                  "snippet": {
                    "text": "-agent github.com/aws/amazon-cloudwatch-agent/cmd/amazon-cloudwatch-agent\n\t$(LINUX_ARM64_BUILD)/start-amazon-cloudwatch-agent github.com/aws/amazon-cloudwatch-agent/cmd/start-amazon-cloudwatch-agent\n\t$(LINUX_ARM64_BUILD)/config-translator github.com/aws/amazon-cloudwatch-agent/cmd/config-translator\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/bin/linux_arm64/opentelemetry-jmx-metrics.jar\n\ndocker-build: build-for-docker-amd64 build-for-docker-arm64\n\tdocker buildx build --platform linux/amd64,linux/arm64 . -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfil",
                    "rendered": {
                      "text": "-agent github.com/aws/amazon-cloudwatch-agent/cmd/amazon-cloudwatch-agent\n\t$(LINUX_ARM64_BUILD)/start-amazon-cloudwatch-agent github.com/aws/amazon-cloudwatch-agent/cmd/start-amazon-cloudwatch-agent\n\t$(LINUX_ARM64_BUILD)/config-translator github.com/aws/amazon-cloudwatch-agent/cmd/config-translator\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/bin/linux_arm64/opentelemetry-jmx-metrics.jar\n\ndocker-build: build-for-docker-amd64 build-for-docker-arm64\n\tdocker buildx build --platform linux/amd64,linux/arm64 . -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfil",
                      "markdown": "`-agent github.com/aws/amazon-cloudwatch-agent/cmd/amazon-cloudwatch-agent\n\t$(LINUX_ARM64_BUILD)/start-amazon-cloudwatch-agent github.com/aws/amazon-cloudwatch-agent/cmd/start-amazon-cloudwatch-agent\n\t$(LINUX_ARM64_BUILD)/config-translator github.com/aws/amazon-cloudwatch-agent/cmd/config-translator\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/bin/linux_arm64/opentelemetry-jmx-metrics.jar\n\ndocker-build: build-for-docker-amd64 build-for-docker-arm64\n\tdocker buildx build --platform linux/amd64,linux/arm64 . -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfil`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 112,
                  "endLine": 112,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\t$(LINUX_AMD64_BUILD)/amazon-cloudwatch-agent github.com/aws/amazon-cloudwatch-agent/cmd/amazon-cloudwatch-agent\n\t$(LINUX_AMD64_BUILD)/start-amazon-cloudwatch-agent github.com/aws/amazon-cloudwatch-agent/cmd/start-amazon-cloudwatch-agent\n\t$(LINUX_AMD64_BUILD)/config-translator github.com/aws/amazon-cloudwatch-agent/cmd/config-translator\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/bin/linux_amd64/opentelemetry-jmx-metrics.jar\n\nbuild-for-docker-windows-amd64:\n\t$(WIN_BUILD)/amazon-cloudwatch-agent.exe github.com/aws/amazon-cloudwatch-agent/cmd/amazon-cloudwatch-agent\n",
                    "rendered": {
                      "text": "\t$(LINUX_AMD64_BUILD)/amazon-cloudwatch-agent github.com/aws/amazon-cloudwatch-agent/cmd/amazon-cloudwatch-agent\n\t$(LINUX_AMD64_BUILD)/start-amazon-cloudwatch-agent github.com/aws/amazon-cloudwatch-agent/cmd/start-amazon-cloudwatch-agent\n\t$(LINUX_AMD64_BUILD)/config-translator github.com/aws/amazon-cloudwatch-agent/cmd/config-translator\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/bin/linux_amd64/opentelemetry-jmx-metrics.jar\n\nbuild-for-docker-windows-amd64:\n\t$(WIN_BUILD)/amazon-cloudwatch-agent.exe github.com/aws/amazon-cloudwatch-agent/cmd/amazon-cloudwatch-agent\n",
                      "markdown": "`\t$(LINUX_AMD64_BUILD)/amazon-cloudwatch-agent github.com/aws/amazon-cloudwatch-agent/cmd/amazon-cloudwatch-agent\n\t$(LINUX_AMD64_BUILD)/start-amazon-cloudwatch-agent github.com/aws/amazon-cloudwatch-agent/cmd/start-amazon-cloudwatch-agent\n\t$(LINUX_AMD64_BUILD)/config-translator github.com/aws/amazon-cloudwatch-agent/cmd/config-translator\n\tcp $(BASE_SPACE)/packaging/opentelemetry-jmx-metrics.jar $(BUILD_SPACE)/bin/linux_amd64/opentelemetry-jmx-metrics.jar\n\nbuild-for-docker-windows-amd64:\n\t$(WIN_BUILD)/amazon-cloudwatch-agent.exe github.com/aws/amazon-cloudwatch-agent/cmd/amazon-cloudwatch-agent\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 64,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\ncopy-version-file: create-version-file\n\tmkdir -p build/bin/\n\tcp CWAGENT_VERSION $(BUILD_SPACE)/bin/CWAGENT_VERSION\n\namazon-cloudwatch-agent-linux: copy-version-file\n\t@echo Building CloudWatchAgent for Linux,Debian with ARM64 and AMD64\n",
                    "rendered": {
                      "text": "\ncopy-version-file: create-version-file\n\tmkdir -p build/bin/\n\tcp CWAGENT_VERSION $(BUILD_SPACE)/bin/CWAGENT_VERSION\n\namazon-cloudwatch-agent-linux: copy-version-file\n\t@echo Building CloudWatchAgent for Linux,Debian with ARM64 and AMD64\n",
                      "markdown": "`\ncopy-version-file: create-version-file\n\tmkdir -p build/bin/\n\tcp CWAGENT_VERSION $(BUILD_SPACE)/bin/CWAGENT_VERSION\n\namazon-cloudwatch-agent-linux: copy-version-file\n\t@echo Building CloudWatchAgent for Linux,Debian with ARM64 and AMD64\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 3,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "build: check_secrets amazon-cloudwatch-agent-linux amazon-cloudwatch-agent-darwin amazon-cloudwatch-agent-windows\n\ncheck_secrets::\n\tif grep --exclude-dir=build --exclude-dir=vendor -exclude=integration/msi/tools/amazon-cloudwatch-agent.wxs -E \"(A3T[A-Z0-9]|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}|(\\\"|')?(AWS|aws|Aws)?_?(SECRET|secret|Secret)?_?(ACCESS|access|Access)?_?(KEY|key|Key)(\\\"|')?\\\\s*(:|=>|=)\\\\s*(\\\"|')?[A-Za-z0-9/\\\\+=]{40}(\\\"|')?\" -Rn .; then echo \"check_secrets failed\"; exit 1; fi;\n\ncreate-version-file:\n\t@echo Version: ${VERSION}\n",
                    "rendered": {
                      "text": "build: check_secrets amazon-cloudwatch-agent-linux amazon-cloudwatch-agent-darwin amazon-cloudwatch-agent-windows\n\ncheck_secrets::\n\tif grep --exclude-dir=build --exclude-dir=vendor -exclude=integration/msi/tools/amazon-cloudwatch-agent.wxs -E \"(A3T[A-Z0-9]|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}|(\\\"|')?(AWS|aws|Aws)?_?(SECRET|secret|Secret)?_?(ACCESS|access|Access)?_?(KEY|key|Key)(\\\"|')?\\\\s*(:|=>|=)\\\\s*(\\\"|')?[A-Za-z0-9/\\\\+=]{40}(\\\"|')?\" -Rn .; then echo \"check_secrets failed\"; exit 1; fi;\n\ncreate-version-file:\n\t@echo Version: ${VERSION}\n",
                      "markdown": "`build: check_secrets amazon-cloudwatch-agent-linux amazon-cloudwatch-agent-darwin amazon-cloudwatch-agent-windows\n\ncheck_secrets::\n\tif grep --exclude-dir=build --exclude-dir=vendor -exclude=integration/msi/tools/amazon-cloudwatch-agent.wxs -E \"(A3T[A-Z0-9]|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}|(\\\"|')?(AWS|aws|Aws)?_?(SECRET|secret|Secret)?_?(ACCESS|access|Access)?_?(KEY|key|Key)(\\\"|')?\\\\s*(:|=>|=)\\\\s*(\\\"|')?[A-Za-z0-9/\\\\+=]{40}(\\\"|')?\" -Rn .; then echo \"check_secrets failed\"; exit 1; fi;\n\ncreate-version-file:\n\t@echo Version: ${VERSION}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 18,
                  "endLine": 36,
                  "endColumn": 24,
                  "snippet": {
                    "text": "DOCKER_WINDOWS_BUILD_FROM_SOURCE = docker build -t $(IMAGE) -f ./amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/source/Dockerfile.Windows\n\nCW_AGENT_IMPORT_PATH=github.com/aws/amazon-cloudwatch-agent\nALL_SRC := $(shell find . -name '*.go' -type f | sort)\nTOOLS_BIN_DIR := $(abspath ./build/tools)\n\nGOIMPORTS_OPT?= -w -local $(CW_AGENT_IMPORT_PATH)\n",
                    "rendered": {
                      "text": "DOCKER_WINDOWS_BUILD_FROM_SOURCE = docker build -t $(IMAGE) -f ./amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/source/Dockerfile.Windows\n\nCW_AGENT_IMPORT_PATH=github.com/aws/amazon-cloudwatch-agent\nALL_SRC := $(shell find . -name '*.go' -type f | sort)\nTOOLS_BIN_DIR := $(abspath ./build/tools)\n\nGOIMPORTS_OPT?= -w -local $(CW_AGENT_IMPORT_PATH)\n",
                      "markdown": "`DOCKER_WINDOWS_BUILD_FROM_SOURCE = docker build -t $(IMAGE) -f ./amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/source/Dockerfile.Windows\n\nCW_AGENT_IMPORT_PATH=github.com/aws/amazon-cloudwatch-agent\nALL_SRC := $(shell find . -name '*.go' -type f | sort)\nTOOLS_BIN_DIR := $(abspath ./build/tools)\n\nGOIMPORTS_OPT?= -w -local $(CW_AGENT_IMPORT_PATH)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 34,
                  "endLine": 33,
                  "endColumn": 42,
                  "snippet": {
                    "text": "IMAGE_TAG = $(VERSION)\nIMAGE = $(IMAGE_REGISTRY)/$(IMAGE_REPO):$(IMAGE_TAG)\nDOCKER_BUILD_FROM_SOURCE = docker build -t $(IMAGE) -f ./amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/source/Dockerfile\nDOCKER_WINDOWS_BUILD_FROM_SOURCE = docker build -t $(IMAGE) -f ./amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/source/Dockerfile.Windows\n\nCW_AGENT_IMPORT_PATH=github.com/aws/amazon-cloudwatch-agent\nALL_SRC := $(shell find . -name '*.go' -type f | sort)\n",
                    "rendered": {
                      "text": "IMAGE_TAG = $(VERSION)\nIMAGE = $(IMAGE_REGISTRY)/$(IMAGE_REPO):$(IMAGE_TAG)\nDOCKER_BUILD_FROM_SOURCE = docker build -t $(IMAGE) -f ./amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/source/Dockerfile\nDOCKER_WINDOWS_BUILD_FROM_SOURCE = docker build -t $(IMAGE) -f ./amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/source/Dockerfile.Windows\n\nCW_AGENT_IMPORT_PATH=github.com/aws/amazon-cloudwatch-agent\nALL_SRC := $(shell find . -name '*.go' -type f | sort)\n",
                      "markdown": "`IMAGE_TAG = $(VERSION)\nIMAGE = $(IMAGE_REGISTRY)/$(IMAGE_REPO):$(IMAGE_TAG)\nDOCKER_BUILD_FROM_SOURCE = docker build -t $(IMAGE) -f ./amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/source/Dockerfile\nDOCKER_WINDOWS_BUILD_FROM_SOURCE = docker build -t $(IMAGE) -f ./amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/source/Dockerfile.Windows\n\nCW_AGENT_IMPORT_PATH=github.com/aws/amazon-cloudwatch-agent\nALL_SRC := $(shell find . -name '*.go' -type f | sort)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 26,
                  "endLine": 32,
                  "endColumn": 34,
                  "snippet": {
                    "text": "IMAGE_REPO = cloudwatch-agent\nIMAGE_TAG = $(VERSION)\nIMAGE = $(IMAGE_REGISTRY)/$(IMAGE_REPO):$(IMAGE_TAG)\nDOCKER_BUILD_FROM_SOURCE = docker build -t $(IMAGE) -f ./amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/source/Dockerfile\nDOCKER_WINDOWS_BUILD_FROM_SOURCE = docker build -t $(IMAGE) -f ./amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/source/Dockerfile.Windows\n\nCW_AGENT_IMPORT_PATH=github.com/aws/amazon-cloudwatch-agent\n",
                    "rendered": {
                      "text": "IMAGE_REPO = cloudwatch-agent\nIMAGE_TAG = $(VERSION)\nIMAGE = $(IMAGE_REGISTRY)/$(IMAGE_REPO):$(IMAGE_TAG)\nDOCKER_BUILD_FROM_SOURCE = docker build -t $(IMAGE) -f ./amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/source/Dockerfile\nDOCKER_WINDOWS_BUILD_FROM_SOURCE = docker build -t $(IMAGE) -f ./amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/source/Dockerfile.Windows\n\nCW_AGENT_IMPORT_PATH=github.com/aws/amazon-cloudwatch-agent\n",
                      "markdown": "`IMAGE_REPO = cloudwatch-agent\nIMAGE_TAG = $(VERSION)\nIMAGE = $(IMAGE_REGISTRY)/$(IMAGE_REPO):$(IMAGE_TAG)\nDOCKER_BUILD_FROM_SOURCE = docker build -t $(IMAGE) -f ./amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/source/Dockerfile\nDOCKER_WINDOWS_BUILD_FROM_SOURCE = docker build -t $(IMAGE) -f ./amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/source/Dockerfile.Windows\n\nCW_AGENT_IMPORT_PATH=github.com/aws/amazon-cloudwatch-agent\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 31,
                  "endLine": 8,
                  "endColumn": 36,
                  "snippet": {
                    "text": "VERSION := $(shell echo ${VERSION} | sed -e \"s/^v//\")\nnightly-release: VERSION := $(shell echo ${VERSION}-nightly-build)\nnightly-release-mac: VERSION := $(shell echo ${VERSION}-nightly-build)\n# In case building outside of a git repo, use the version presented in the CWAGENT_VERSION file as a fallback\nifeq ($(VERSION),)\nVERSION := `cat CWAGENT_VERSION`\nendif\n",
                    "rendered": {
                      "text": "VERSION := $(shell echo ${VERSION} | sed -e \"s/^v//\")\nnightly-release: VERSION := $(shell echo ${VERSION}-nightly-build)\nnightly-release-mac: VERSION := $(shell echo ${VERSION}-nightly-build)\n# In case building outside of a git repo, use the version presented in the CWAGENT_VERSION file as a fallback\nifeq ($(VERSION),)\nVERSION := `cat CWAGENT_VERSION`\nendif\n",
                      "markdown": "`VERSION := $(shell echo ${VERSION} | sed -e \"s/^v//\")\nnightly-release: VERSION := $(shell echo ${VERSION}-nightly-build)\nnightly-release-mac: VERSION := $(shell echo ${VERSION}-nightly-build)\n# In case building outside of a git repo, use the version presented in the CWAGENT_VERSION file as a fallback\nifeq ($(VERSION),)\nVERSION := `cat CWAGENT_VERSION`\nendif\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 36,
                  "endLine": 5,
                  "endColumn": 41,
                  "snippet": {
                    "text": "export BUILD_SPACE=$(BASE_SPACE)/build\n\nVERSION = $(shell echo `git describe --tag --dirty``git status --porcelain 2>/dev/null| grep -q \"^??\" &&echo '-untracked'`)\nVERSION := $(shell echo ${VERSION} | sed -e \"s/^v//\")\nnightly-release: VERSION := $(shell echo ${VERSION}-nightly-build)\nnightly-release-mac: VERSION := $(shell echo ${VERSION}-nightly-build)\n# In case building outside of a git repo, use the version presented in the CWAGENT_VERSION file as a fallback\n",
                    "rendered": {
                      "text": "export BUILD_SPACE=$(BASE_SPACE)/build\n\nVERSION = $(shell echo `git describe --tag --dirty``git status --porcelain 2>/dev/null| grep -q \"^??\" &&echo '-untracked'`)\nVERSION := $(shell echo ${VERSION} | sed -e \"s/^v//\")\nnightly-release: VERSION := $(shell echo ${VERSION}-nightly-build)\nnightly-release-mac: VERSION := $(shell echo ${VERSION}-nightly-build)\n# In case building outside of a git repo, use the version presented in the CWAGENT_VERSION file as a fallback\n",
                      "markdown": "`export BUILD_SPACE=$(BASE_SPACE)/build\n\nVERSION = $(shell echo `git describe --tag --dirty``git status --porcelain 2>/dev/null| grep -q \"^??\" &&echo '-untracked'`)\nVERSION := $(shell echo ${VERSION} | sed -e \"s/^v//\")\nnightly-release: VERSION := $(shell echo ${VERSION}-nightly-build)\nnightly-release-mac: VERSION := $(shell echo ${VERSION}-nightly-build)\n# In case building outside of a git repo, use the version presented in the CWAGENT_VERSION file as a fallback\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/Makefile"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 87,
                  "endLine": 4,
                  "endColumn": 93,
                  "snippet": {
                    "text": "export BASE_SPACE=$(shell pwd)\nexport BUILD_SPACE=$(BASE_SPACE)/build\n\nVERSION = $(shell echo `git describe --tag --dirty``git status --porcelain 2>/dev/null| grep -q \"^??\" &&echo '-untracked'`)\nVERSION := $(shell echo ${VERSION} | sed -e \"s/^v//\")\nnightly-release: VERSION := $(shell echo ${VERSION}-nightly-build)\nnightly-release-mac: VERSION := $(shell echo ${VERSION}-nightly-build)\n",
                    "rendered": {
                      "text": "export BASE_SPACE=$(shell pwd)\nexport BUILD_SPACE=$(BASE_SPACE)/build\n\nVERSION = $(shell echo `git describe --tag --dirty``git status --porcelain 2>/dev/null| grep -q \"^??\" &&echo '-untracked'`)\nVERSION := $(shell echo ${VERSION} | sed -e \"s/^v//\")\nnightly-release: VERSION := $(shell echo ${VERSION}-nightly-build)\nnightly-release-mac: VERSION := $(shell echo ${VERSION}-nightly-build)\n",
                      "markdown": "`export BASE_SPACE=$(shell pwd)\nexport BUILD_SPACE=$(BASE_SPACE)/build\n\nVERSION = $(shell echo `git describe --tag --dirty``git status --porcelain 2>/dev/null| grep -q \"^??\" &&echo '-untracked'`)\nVERSION := $(shell echo ${VERSION} | sed -e \"s/^v//\")\nnightly-release: VERSION := $(shell echo ${VERSION}-nightly-build)\nnightly-release-mac: VERSION := $(shell echo ${VERSION}-nightly-build)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/receiver/adapter/factory.go"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 34,
                  "endLine": 99,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n\t}\n\n\treturn nil, fmt.Errorf(\"unable to find telegraf input with name %s and alias %s\", pluginName, pluginAlias)\n}\n",
                    "rendered": {
                      "text": "\n\t}\n\n\treturn nil, fmt.Errorf(\"unable to find telegraf input with name %s and alias %s\", pluginName, pluginAlias)\n}\n",
                      "markdown": "`\n\t}\n\n\treturn nil, fmt.Errorf(\"unable to find telegraf input with name %s and alias %s\", pluginName, pluginAlias)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/receiver/adapter/README.md"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 3,
                  "endLine": 26,
                  "snippet": {
                    "text": "    Name\n    TagList (each tag with key, value)\n    FieldList (each field with key, value) \n    Time\n    Type (Counter, Gauge, Summary, Histogram, or Untyped)\n}\n```\n\n",
                    "rendered": {
                      "text": "    Name\n    TagList (each tag with key, value)\n    FieldList (each field with key, value) \n    Time\n    Type (Counter, Gauge, Summary, Histogram, or Untyped)\n}\n```\n\n",
                      "markdown": "`    Name\n    TagList (each tag with key, value)\n    FieldList (each field with key, value) \n    Time\n    Type (Counter, Gauge, Summary, Histogram, or Untyped)\n}\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 1062,
                  "startColumn": 25,
                  "endLine": 1062,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\t\t\t_, exists := attributes.Get(common.AttributeEC2AutoScalingGroup)\n\t\t\tassert.False(t, exists)\n\n\t\t\t_, exists = attributes.Get(common.AttributeEC2InstanceId)\n\t\t\tassert.False(t, exists)\n\t\t})\n\t}\n",
                    "rendered": {
                      "text": "\t\t\t_, exists := attributes.Get(common.AttributeEC2AutoScalingGroup)\n\t\t\tassert.False(t, exists)\n\n\t\t\t_, exists = attributes.Get(common.AttributeEC2InstanceId)\n\t\t\tassert.False(t, exists)\n\t\t})\n\t}\n",
                      "markdown": "`\t\t\t_, exists := attributes.Get(common.AttributeEC2AutoScalingGroup)\n\t\t\tassert.False(t, exists)\n\n\t\t\t_, exists = attributes.Get(common.AttributeEC2InstanceId)\n\t\t\tassert.False(t, exists)\n\t\t})\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 1059,
                  "startColumn": 26,
                  "endLine": 1059,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\t\t\tassert.Equal(t, \"/aws/containerinsights/test-cluster/application\", getStrAttr(resourceAttributes, semconv.AttributeAWSLogGroupNames, t))\n\n\t\t\t// EC2 related fields that should not exist for on-prem\n\t\t\t_, exists := attributes.Get(common.AttributeEC2AutoScalingGroup)\n\t\t\tassert.False(t, exists)\n\n\t\t\t_, exists = attributes.Get(common.AttributeEC2InstanceId)\n",
                    "rendered": {
                      "text": "\t\t\tassert.Equal(t, \"/aws/containerinsights/test-cluster/application\", getStrAttr(resourceAttributes, semconv.AttributeAWSLogGroupNames, t))\n\n\t\t\t// EC2 related fields that should not exist for on-prem\n\t\t\t_, exists := attributes.Get(common.AttributeEC2AutoScalingGroup)\n\t\t\tassert.False(t, exists)\n\n\t\t\t_, exists = attributes.Get(common.AttributeEC2InstanceId)\n",
                      "markdown": "`\t\t\tassert.Equal(t, \"/aws/containerinsights/test-cluster/application\", getStrAttr(resourceAttributes, semconv.AttributeAWSLogGroupNames, t))\n\n\t\t\t// EC2 related fields that should not exist for on-prem\n\t\t\t_, exists := attributes.Get(common.AttributeEC2AutoScalingGroup)\n\t\t\tassert.False(t, exists)\n\n\t\t\t_, exists = attributes.Get(common.AttributeEC2InstanceId)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 995,
                  "startColumn": 28,
                  "endLine": 995,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\teksdetector.NewDetector = eksdetector.TestK8sDetector\n\t// helper function to get string values from the attributes\n\tgetStrAttr := func(attributes pcommon.Map, key string, t *testing.T) string {\n\t\tif value, ok := attributes.Get(key); ok {\n\t\t\treturn value.AsString()\n\t\t} else {\n\t\t\tt.Errorf(\"Failed to get value for key: %s\", key)\n",
                    "rendered": {
                      "text": "\teksdetector.NewDetector = eksdetector.TestK8sDetector\n\t// helper function to get string values from the attributes\n\tgetStrAttr := func(attributes pcommon.Map, key string, t *testing.T) string {\n\t\tif value, ok := attributes.Get(key); ok {\n\t\t\treturn value.AsString()\n\t\t} else {\n\t\t\tt.Errorf(\"Failed to get value for key: %s\", key)\n",
                      "markdown": "`\teksdetector.NewDetector = eksdetector.TestK8sDetector\n\t// helper function to get string values from the attributes\n\tgetStrAttr := func(attributes pcommon.Map, key string, t *testing.T) string {\n\t\tif value, ok := attributes.Get(key); ok {\n\t\t\treturn value.AsString()\n\t\t} else {\n\t\t\tt.Errorf(\"Failed to get value for key: %s\", key)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 919,
                  "startColumn": 28,
                  "endLine": 919,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\teksdetector.IsEKS = eksdetector.TestIsEKSCacheK8s\n\t// helper function to get string values from the attributes\n\tgetStrAttr := func(attributes pcommon.Map, key string, t *testing.T) string {\n\t\tif value, ok := attributes.Get(key); ok {\n\t\t\treturn value.AsString()\n\t\t} else {\n\t\t\tt.Errorf(\"Failed to get value for key: %s\", key)\n",
                    "rendered": {
                      "text": "\teksdetector.IsEKS = eksdetector.TestIsEKSCacheK8s\n\t// helper function to get string values from the attributes\n\tgetStrAttr := func(attributes pcommon.Map, key string, t *testing.T) string {\n\t\tif value, ok := attributes.Get(key); ok {\n\t\t\treturn value.AsString()\n\t\t} else {\n\t\t\tt.Errorf(\"Failed to get value for key: %s\", key)\n",
                      "markdown": "`\teksdetector.IsEKS = eksdetector.TestIsEKSCacheK8s\n\t// helper function to get string values from the attributes\n\tgetStrAttr := func(attributes pcommon.Map, key string, t *testing.T) string {\n\t\tif value, ok := attributes.Get(key); ok {\n\t\t\treturn value.AsString()\n\t\t} else {\n\t\t\tt.Errorf(\"Failed to get value for key: %s\", key)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 842,
                  "startColumn": 28,
                  "endLine": 842,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\teksdetector.IsEKS = eksdetector.TestIsEKSCacheEKS\n\t// helper function to get string values from the attributes\n\tgetStrAttr := func(attributes pcommon.Map, key string, t *testing.T) string {\n\t\tif value, ok := attributes.Get(key); ok {\n\t\t\treturn value.AsString()\n\t\t} else {\n\t\t\tt.Errorf(\"Failed to get value for key: %s\", key)\n",
                    "rendered": {
                      "text": "\teksdetector.IsEKS = eksdetector.TestIsEKSCacheEKS\n\t// helper function to get string values from the attributes\n\tgetStrAttr := func(attributes pcommon.Map, key string, t *testing.T) string {\n\t\tif value, ok := attributes.Get(key); ok {\n\t\t\treturn value.AsString()\n\t\t} else {\n\t\t\tt.Errorf(\"Failed to get value for key: %s\", key)\n",
                      "markdown": "`\teksdetector.IsEKS = eksdetector.TestIsEKSCacheEKS\n\t// helper function to get string values from the attributes\n\tgetStrAttr := func(attributes pcommon.Map, key string, t *testing.T) string {\n\t\tif value, ok := attributes.Get(key); ok {\n\t\t\treturn value.AsString()\n\t\t} else {\n\t\t\tt.Errorf(\"Failed to get value for key: %s\", key)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 778,
                  "startColumn": 29,
                  "endLine": 778,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\tt.Run(\"Test Process\", func(t *testing.T) {\n\t\t// helper function to get string values from the attributes\n\t\tgetStrAttr := func(attributes pcommon.Map, key string, t *testing.T) string {\n\t\t\tif value, ok := attributes.Get(key); ok {\n\t\t\t\treturn value.AsString()\n\t\t\t} else {\n\t\t\t\tt.Errorf(\"Failed to get value for key: %s\", key)\n",
                    "rendered": {
                      "text": "\tt.Run(\"Test Process\", func(t *testing.T) {\n\t\t// helper function to get string values from the attributes\n\t\tgetStrAttr := func(attributes pcommon.Map, key string, t *testing.T) string {\n\t\t\tif value, ok := attributes.Get(key); ok {\n\t\t\t\treturn value.AsString()\n\t\t\t} else {\n\t\t\t\tt.Errorf(\"Failed to get value for key: %s\", key)\n",
                      "markdown": "`\tt.Run(\"Test Process\", func(t *testing.T) {\n\t\t// helper function to get string values from the attributes\n\t\tgetStrAttr := func(attributes pcommon.Map, key string, t *testing.T) string {\n\t\t\tif value, ok := attributes.Get(key); ok {\n\t\t\t\treturn value.AsString()\n\t\t\t} else {\n\t\t\t\tt.Errorf(\"Failed to get value for key: %s\", key)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 1036,
                  "startColumn": 37,
                  "endLine": 1036,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\t\t\t\tattr.AWSLocalEnvironment:       \"custom-env\",\n\t\t\t\tcommon.AttributeK8SNamespace:   \"test-namespace-3\",\n\t\t\t\tcommon.AttributeK8SClusterName: \"test-cluster\",\n\t\t\t\tcommon.AttributeHost:           \"hostname\",\n\t\t\t},\n\t\t},\n\t}\n",
                    "rendered": {
                      "text": "\t\t\t\tattr.AWSLocalEnvironment:       \"custom-env\",\n\t\t\t\tcommon.AttributeK8SNamespace:   \"test-namespace-3\",\n\t\t\t\tcommon.AttributeK8SClusterName: \"test-cluster\",\n\t\t\t\tcommon.AttributeHost:           \"hostname\",\n\t\t\t},\n\t\t},\n\t}\n",
                      "markdown": "`\t\t\t\tattr.AWSLocalEnvironment:       \"custom-env\",\n\t\t\t\tcommon.AttributeK8SNamespace:   \"test-namespace-3\",\n\t\t\t\tcommon.AttributeK8SClusterName: \"test-cluster\",\n\t\t\t\tcommon.AttributeHost:           \"hostname\",\n\t\t\t},\n\t\t},\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 1024,
                  "startColumn": 37,
                  "endLine": 1024,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\t\t\t\tattr.AWSLocalEnvironment:       \"k8s:test-cluster/test-namespace-3\",\n\t\t\t\tcommon.AttributeK8SNamespace:   \"test-namespace-3\",\n\t\t\t\tcommon.AttributeK8SClusterName: \"test-cluster\",\n\t\t\t\tcommon.AttributeHost:           \"hostname\",\n\t\t\t},\n\t\t},\n\t\t{\n",
                    "rendered": {
                      "text": "\t\t\t\tattr.AWSLocalEnvironment:       \"k8s:test-cluster/test-namespace-3\",\n\t\t\t\tcommon.AttributeK8SNamespace:   \"test-namespace-3\",\n\t\t\t\tcommon.AttributeK8SClusterName: \"test-cluster\",\n\t\t\t\tcommon.AttributeHost:           \"hostname\",\n\t\t\t},\n\t\t},\n\t\t{\n",
                      "markdown": "`\t\t\t\tattr.AWSLocalEnvironment:       \"k8s:test-cluster/test-namespace-3\",\n\t\t\t\tcommon.AttributeK8SNamespace:   \"test-namespace-3\",\n\t\t\t\tcommon.AttributeK8SClusterName: \"test-cluster\",\n\t\t\t\tcommon.AttributeHost:           \"hostname\",\n\t\t\t},\n\t\t},\n\t\t{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 1008,
                  "startColumn": 25,
                  "endLine": 1008,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\tresourceAttributesBase := map[string]string{\n\t\t\"cloud.provider\":     \"aws\",\n\t\t\"k8s.namespace.name\": \"test-namespace-3\",\n\t\t\"host.name\":          \"hostname\",\n\t}\n\n\ttests := []struct {\n",
                    "rendered": {
                      "text": "\tresourceAttributesBase := map[string]string{\n\t\t\"cloud.provider\":     \"aws\",\n\t\t\"k8s.namespace.name\": \"test-namespace-3\",\n\t\t\"host.name\":          \"hostname\",\n\t}\n\n\ttests := []struct {\n",
                      "markdown": "`\tresourceAttributesBase := map[string]string{\n\t\t\"cloud.provider\":     \"aws\",\n\t\t\"k8s.namespace.name\": \"test-namespace-3\",\n\t\t\"host.name\":          \"hostname\",\n\t}\n\n\ttests := []struct {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 965,
                  "startColumn": 42,
                  "endLine": 965,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\t\t\t\tcommon.AttributeK8SNamespace:        \"test-namespace-3\",\n\t\t\t\tcommon.AttributeK8SClusterName:      \"test-cluster\",\n\t\t\t\tcommon.AttributeEC2InstanceId:       \"instance-id\",\n\t\t\t\tcommon.AttributeHost:                \"hostname\",\n\t\t\t\tcommon.AttributeEC2AutoScalingGroup: \"asg\",\n\t\t\t},\n\t\t},\n",
                    "rendered": {
                      "text": "\t\t\t\tcommon.AttributeK8SNamespace:        \"test-namespace-3\",\n\t\t\t\tcommon.AttributeK8SClusterName:      \"test-cluster\",\n\t\t\t\tcommon.AttributeEC2InstanceId:       \"instance-id\",\n\t\t\t\tcommon.AttributeHost:                \"hostname\",\n\t\t\t\tcommon.AttributeEC2AutoScalingGroup: \"asg\",\n\t\t\t},\n\t\t},\n",
                      "markdown": "`\t\t\t\tcommon.AttributeK8SNamespace:        \"test-namespace-3\",\n\t\t\t\tcommon.AttributeK8SClusterName:      \"test-cluster\",\n\t\t\t\tcommon.AttributeEC2InstanceId:       \"instance-id\",\n\t\t\t\tcommon.AttributeHost:                \"hostname\",\n\t\t\t\tcommon.AttributeEC2AutoScalingGroup: \"asg\",\n\t\t\t},\n\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 951,
                  "startColumn": 42,
                  "endLine": 951,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\t\t\t\tcommon.AttributeK8SNamespace:        \"test-namespace-3\",\n\t\t\t\tcommon.AttributeK8SClusterName:      \"test-cluster\",\n\t\t\t\tcommon.AttributeEC2InstanceId:       \"instance-id\",\n\t\t\t\tcommon.AttributeHost:                \"hostname\",\n\t\t\t\tcommon.AttributeEC2AutoScalingGroup: \"asg\",\n\t\t\t},\n\t\t},\n",
                    "rendered": {
                      "text": "\t\t\t\tcommon.AttributeK8SNamespace:        \"test-namespace-3\",\n\t\t\t\tcommon.AttributeK8SClusterName:      \"test-cluster\",\n\t\t\t\tcommon.AttributeEC2InstanceId:       \"instance-id\",\n\t\t\t\tcommon.AttributeHost:                \"hostname\",\n\t\t\t\tcommon.AttributeEC2AutoScalingGroup: \"asg\",\n\t\t\t},\n\t\t},\n",
                      "markdown": "`\t\t\t\tcommon.AttributeK8SNamespace:        \"test-namespace-3\",\n\t\t\t\tcommon.AttributeK8SClusterName:      \"test-cluster\",\n\t\t\t\tcommon.AttributeEC2InstanceId:       \"instance-id\",\n\t\t\t\tcommon.AttributeHost:                \"hostname\",\n\t\t\t\tcommon.AttributeEC2AutoScalingGroup: \"asg\",\n\t\t\t},\n\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 933,
                  "startColumn": 40,
                  "endLine": 933,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t\"cloud.provider\":                    \"aws\",\n\t\t\"k8s.namespace.name\":                \"test-namespace-3\",\n\t\t\"host.id\":                           \"instance-id\",\n\t\t\"host.name\":                         \"hostname\",\n\t\t\"ec2.tag.aws:autoscaling:groupName\": \"asg\",\n\t}\n\n",
                    "rendered": {
                      "text": "\t\t\"cloud.provider\":                    \"aws\",\n\t\t\"k8s.namespace.name\":                \"test-namespace-3\",\n\t\t\"host.id\":                           \"instance-id\",\n\t\t\"host.name\":                         \"hostname\",\n\t\t\"ec2.tag.aws:autoscaling:groupName\": \"asg\",\n\t}\n\n",
                      "markdown": "`\t\t\"cloud.provider\":                    \"aws\",\n\t\t\"k8s.namespace.name\":                \"test-namespace-3\",\n\t\t\"host.id\":                           \"instance-id\",\n\t\t\"host.name\":                         \"hostname\",\n\t\t\"ec2.tag.aws:autoscaling:groupName\": \"asg\",\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 888,
                  "startColumn": 42,
                  "endLine": 888,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\t\t\t\tcommon.AttributeK8SNamespace:        \"test-namespace-3\",\n\t\t\t\tcommon.AttributeEKSClusterName:      \"test-cluster\",\n\t\t\t\tcommon.AttributeEC2InstanceId:       \"instance-id\",\n\t\t\t\tcommon.AttributeHost:                \"hostname\",\n\t\t\t\tcommon.AttributeEC2AutoScalingGroup: \"asg\",\n\t\t\t},\n\t\t},\n",
                    "rendered": {
                      "text": "\t\t\t\tcommon.AttributeK8SNamespace:        \"test-namespace-3\",\n\t\t\t\tcommon.AttributeEKSClusterName:      \"test-cluster\",\n\t\t\t\tcommon.AttributeEC2InstanceId:       \"instance-id\",\n\t\t\t\tcommon.AttributeHost:                \"hostname\",\n\t\t\t\tcommon.AttributeEC2AutoScalingGroup: \"asg\",\n\t\t\t},\n\t\t},\n",
                      "markdown": "`\t\t\t\tcommon.AttributeK8SNamespace:        \"test-namespace-3\",\n\t\t\t\tcommon.AttributeEKSClusterName:      \"test-cluster\",\n\t\t\t\tcommon.AttributeEC2InstanceId:       \"instance-id\",\n\t\t\t\tcommon.AttributeHost:                \"hostname\",\n\t\t\t\tcommon.AttributeEC2AutoScalingGroup: \"asg\",\n\t\t\t},\n\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 874,
                  "startColumn": 42,
                  "endLine": 874,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\t\t\t\tcommon.AttributeK8SNamespace:        \"test-namespace-3\",\n\t\t\t\tcommon.AttributeEKSClusterName:      \"test-cluster\",\n\t\t\t\tcommon.AttributeEC2InstanceId:       \"instance-id\",\n\t\t\t\tcommon.AttributeHost:                \"hostname\",\n\t\t\t\tcommon.AttributeEC2AutoScalingGroup: \"asg\",\n\t\t\t},\n\t\t},\n",
                    "rendered": {
                      "text": "\t\t\t\tcommon.AttributeK8SNamespace:        \"test-namespace-3\",\n\t\t\t\tcommon.AttributeEKSClusterName:      \"test-cluster\",\n\t\t\t\tcommon.AttributeEC2InstanceId:       \"instance-id\",\n\t\t\t\tcommon.AttributeHost:                \"hostname\",\n\t\t\t\tcommon.AttributeEC2AutoScalingGroup: \"asg\",\n\t\t\t},\n\t\t},\n",
                      "markdown": "`\t\t\t\tcommon.AttributeK8SNamespace:        \"test-namespace-3\",\n\t\t\t\tcommon.AttributeEKSClusterName:      \"test-cluster\",\n\t\t\t\tcommon.AttributeEC2InstanceId:       \"instance-id\",\n\t\t\t\tcommon.AttributeHost:                \"hostname\",\n\t\t\t\tcommon.AttributeEC2AutoScalingGroup: \"asg\",\n\t\t\t},\n\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 856,
                  "startColumn": 40,
                  "endLine": 856,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t\"cloud.provider\":                    \"aws\",\n\t\t\"k8s.namespace.name\":                \"test-namespace-3\",\n\t\t\"host.id\":                           \"instance-id\",\n\t\t\"host.name\":                         \"hostname\",\n\t\t\"ec2.tag.aws:autoscaling:groupName\": \"asg\",\n\t}\n\n",
                    "rendered": {
                      "text": "\t\t\"cloud.provider\":                    \"aws\",\n\t\t\"k8s.namespace.name\":                \"test-namespace-3\",\n\t\t\"host.id\":                           \"instance-id\",\n\t\t\"host.name\":                         \"hostname\",\n\t\t\"ec2.tag.aws:autoscaling:groupName\": \"asg\",\n\t}\n\n",
                      "markdown": "`\t\t\"cloud.provider\":                    \"aws\",\n\t\t\"k8s.namespace.name\":                \"test-namespace-3\",\n\t\t\"host.id\":                           \"instance-id\",\n\t\t\"host.name\":                         \"hostname\",\n\t\t\"ec2.tag.aws:autoscaling:groupName\": \"asg\",\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 827,
                  "startColumn": 36,
                  "endLine": 827,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\t\tassert.NoError(t, err)\n\t\tassert.Equal(t, \"not-an-ip\", getStrAttr(attributes, attr.AWSRemoteService, t))\n\n\t\t// Test case 4: Process with valid IP but getWorkloadAndNamespaceByIP returns error\n\t\tattributes = pcommon.NewMap()\n\t\tattributes.PutStr(attr.AWSRemoteService, \"192.168.1.2\")\n\t\tresourceAttributes = pcommon.NewMap()\n",
                    "rendered": {
                      "text": "\t\tassert.NoError(t, err)\n\t\tassert.Equal(t, \"not-an-ip\", getStrAttr(attributes, attr.AWSRemoteService, t))\n\n\t\t// Test case 4: Process with valid IP but getWorkloadAndNamespaceByIP returns error\n\t\tattributes = pcommon.NewMap()\n\t\tattributes.PutStr(attr.AWSRemoteService, \"192.168.1.2\")\n\t\tresourceAttributes = pcommon.NewMap()\n",
                      "markdown": "`\t\tassert.NoError(t, err)\n\t\tassert.Equal(t, \"not-an-ip\", getStrAttr(attributes, attr.AWSRemoteService, t))\n\n\t\t// Test case 4: Process with valid IP but getWorkloadAndNamespaceByIP returns error\n\t\tattributes = pcommon.NewMap()\n\t\tattributes.PutStr(attr.AWSRemoteService, \"192.168.1.2\")\n\t\tresourceAttributes = pcommon.NewMap()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 808,
                  "startColumn": 52,
                  "endLine": 809,
                  "snippet": {
                    "text": "\t\tassert.Equal(t, \"test-deployment\", getStrAttr(attributes, attr.AWSRemoteService, t))\n\t\tassert.Equal(t, \"eks:test/test-namespace\", getStrAttr(attributes, attr.AWSRemoteEnvironment, t))\n\n\t\t// Test case 2: \"aws.remote.service\" contains only IP\n\t\tattributes = pcommon.NewMap()\n\t\tattributes.PutStr(attr.AWSRemoteService, \"192.0.2.2\")\n\t\tresourceAttributes = pcommon.NewMap()\n\t\tresolver.ipToPod.Store(\"192.0.2.2\", \"test-pod-2\")\n",
                    "rendered": {
                      "text": "\t\tassert.Equal(t, \"test-deployment\", getStrAttr(attributes, attr.AWSRemoteService, t))\n\t\tassert.Equal(t, \"eks:test/test-namespace\", getStrAttr(attributes, attr.AWSRemoteEnvironment, t))\n\n\t\t// Test case 2: \"aws.remote.service\" contains only IP\n\t\tattributes = pcommon.NewMap()\n\t\tattributes.PutStr(attr.AWSRemoteService, \"192.0.2.2\")\n\t\tresourceAttributes = pcommon.NewMap()\n\t\tresolver.ipToPod.Store(\"192.0.2.2\", \"test-pod-2\")\n",
                      "markdown": "`\t\tassert.Equal(t, \"test-deployment\", getStrAttr(attributes, attr.AWSRemoteService, t))\n\t\tassert.Equal(t, \"eks:test/test-namespace\", getStrAttr(attributes, attr.AWSRemoteEnvironment, t))\n\n\t\t// Test case 2: \"aws.remote.service\" contains only IP\n\t\tattributes = pcommon.NewMap()\n\t\tattributes.PutStr(attr.AWSRemoteService, \"192.0.2.2\")\n\t\tresourceAttributes = pcommon.NewMap()\n\t\tresolver.ipToPod.Store(\"192.0.2.2\", \"test-pod-2\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 742,
                  "startColumn": 9,
                  "endLine": 742,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\t\t\tt.Errorf(\"Expected error, got %v\", err)\n\t\t}\n\n\t\t// Test ip in ipToServiceAndNamespace but not in ipToPod\n\t\tnewIP := \"2.3.4.5\"\n\t\tserviceAndNamespace := \"testService@testNamespace\"\n\t\tresolver.ipToServiceAndNamespace.Store(newIP, serviceAndNamespace)\n",
                    "rendered": {
                      "text": "\t\t\tt.Errorf(\"Expected error, got %v\", err)\n\t\t}\n\n\t\t// Test ip in ipToServiceAndNamespace but not in ipToPod\n\t\tnewIP := \"2.3.4.5\"\n\t\tserviceAndNamespace := \"testService@testNamespace\"\n\t\tresolver.ipToServiceAndNamespace.Store(newIP, serviceAndNamespace)\n",
                      "markdown": "`\t\t\tt.Errorf(\"Expected error, got %v\", err)\n\t\t}\n\n\t\t// Test ip in ipToServiceAndNamespace but not in ipToPod\n\t\tnewIP := \"2.3.4.5\"\n\t\tserviceAndNamespace := \"testService@testNamespace\"\n\t\tresolver.ipToServiceAndNamespace.Store(newIP, serviceAndNamespace)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 736,
                  "startColumn": 22,
                  "endLine": 737,
                  "snippet": {
                    "text": "\t\t\tt.Errorf(\"Expected testDeployment@testNamespace, got %s@%s, error: %v\", workload, namespace, err)\n\t\t}\n\n\t\t// Test non-existing IP\n\t\t_, _, err = resolver.getWorkloadAndNamespaceByIP(\"5.6.7.8\")\n\t\tif err == nil || !strings.Contains(err.Error(), \"no kubernetes workload found for ip: 5.6.7.8\") {\n\t\t\tt.Errorf(\"Expected error, got %v\", err)\n\t\t}\n",
                    "rendered": {
                      "text": "\t\t\tt.Errorf(\"Expected testDeployment@testNamespace, got %s@%s, error: %v\", workload, namespace, err)\n\t\t}\n\n\t\t// Test non-existing IP\n\t\t_, _, err = resolver.getWorkloadAndNamespaceByIP(\"5.6.7.8\")\n\t\tif err == nil || !strings.Contains(err.Error(), \"no kubernetes workload found for ip: 5.6.7.8\") {\n\t\t\tt.Errorf(\"Expected error, got %v\", err)\n\t\t}\n",
                      "markdown": "`\t\t\tt.Errorf(\"Expected testDeployment@testNamespace, got %s@%s, error: %v\", workload, namespace, err)\n\t\t}\n\n\t\t// Test non-existing IP\n\t\t_, _, err = resolver.getWorkloadAndNamespaceByIP(\"5.6.7.8\")\n\t\tif err == nil || !strings.Contains(err.Error(), \"no kubernetes workload found for ip: 5.6.7.8\") {\n\t\t\tt.Errorf(\"Expected error, got %v\", err)\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 730,
                  "startColumn": 18,
                  "endLine": 731,
                  "snippet": {
                    "text": "\t\tresolver.ipToPod.Store(ip, pod)\n\t\tresolver.podToWorkloadAndNamespace.Store(pod, workloadAndNamespace)\n\n\t\t// Test existing IP\n\t\tworkload, namespace, err := resolver.getWorkloadAndNamespaceByIP(ip)\n\t\tif err != nil || workload != \"testDeployment\" || namespace != \"testNamespace\" {\n\t\t\tt.Errorf(\"Expected testDeployment@testNamespace, got %s@%s, error: %v\", workload, namespace, err)\n\t\t}\n",
                    "rendered": {
                      "text": "\t\tresolver.ipToPod.Store(ip, pod)\n\t\tresolver.podToWorkloadAndNamespace.Store(pod, workloadAndNamespace)\n\n\t\t// Test existing IP\n\t\tworkload, namespace, err := resolver.getWorkloadAndNamespaceByIP(ip)\n\t\tif err != nil || workload != \"testDeployment\" || namespace != \"testNamespace\" {\n\t\t\tt.Errorf(\"Expected testDeployment@testNamespace, got %s@%s, error: %v\", workload, namespace, err)\n\t\t}\n",
                      "markdown": "`\t\tresolver.ipToPod.Store(ip, pod)\n\t\tresolver.podToWorkloadAndNamespace.Store(pod, workloadAndNamespace)\n\n\t\t// Test existing IP\n\t\tworkload, namespace, err := resolver.getWorkloadAndNamespaceByIP(ip)\n\t\tif err != nil || workload != \"testDeployment\" || namespace != \"testNamespace\" {\n\t\t\tt.Errorf(\"Expected testDeployment@testNamespace, got %s@%s, error: %v\", workload, namespace, err)\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 722,
                  "startColumn": 1,
                  "endLine": 722,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\t\t\tserviceToWorkload:         &sync.Map{},\n\t\t}\n\n\t\tip := \"1.2.3.4\"\n\t\tpod := \"testPod\"\n\t\tworkloadAndNamespace := \"testDeployment@testNamespace\"\n\n",
                    "rendered": {
                      "text": "\t\t\tserviceToWorkload:         &sync.Map{},\n\t\t}\n\n\t\tip := \"1.2.3.4\"\n\t\tpod := \"testPod\"\n\t\tworkloadAndNamespace := \"testDeployment@testNamespace\"\n\n",
                      "markdown": "`\t\t\tserviceToWorkload:         &sync.Map{},\n\t\t}\n\n\t\tip := \"1.2.3.4\"\n\t\tpod := \"testPod\"\n\t\tworkloadAndNamespace := \"testDeployment@testNamespace\"\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 381,
                  "startColumn": 54,
                  "endLine": 381,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n\t// Check that the maps do not contain the service\n\tif _, ok := ipToServiceAndNamespace.Load(\"1.2.3.4\"); ok {\n\t\tt.Errorf(\"ipToServiceAndNamespace still contains the service IP\")\n\t}\n\tif _, ok := serviceAndNamespaceToSelectors.Load(\"myservice@mynamespace\"); ok {\n\t\tt.Errorf(\"serviceAndNamespaceToSelectors still contains the service\")\n",
                    "rendered": {
                      "text": "\n\t// Check that the maps do not contain the service\n\tif _, ok := ipToServiceAndNamespace.Load(\"1.2.3.4\"); ok {\n\t\tt.Errorf(\"ipToServiceAndNamespace still contains the service IP\")\n\t}\n\tif _, ok := serviceAndNamespaceToSelectors.Load(\"myservice@mynamespace\"); ok {\n\t\tt.Errorf(\"serviceAndNamespaceToSelectors still contains the service\")\n",
                      "markdown": "`\n\t// Check that the maps do not contain the service\n\tif _, ok := ipToServiceAndNamespace.Load(\"1.2.3.4\"); ok {\n\t\tt.Errorf(\"ipToServiceAndNamespace still contains the service IP\")\n\t}\n\tif _, ok := serviceAndNamespaceToSelectors.Load(\"myservice@mynamespace\"); ok {\n\t\tt.Errorf(\"serviceAndNamespaceToSelectors still contains the service\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 379,
                  "startColumn": 42,
                  "endLine": 380,
                  "snippet": {
                    "text": "\tsvcWatcher := newServiceWatcherForTesting(ipToServiceAndNamespace, serviceAndNamespaceToSelectors)\n\tsvcWatcher.onDeleteService(service, mockDeleter)\n\n\t// Check that the maps do not contain the service\n\tif _, ok := ipToServiceAndNamespace.Load(\"1.2.3.4\"); ok {\n\t\tt.Errorf(\"ipToServiceAndNamespace still contains the service IP\")\n\t}\n\tif _, ok := serviceAndNamespaceToSelectors.Load(\"myservice@mynamespace\"); ok {\n",
                    "rendered": {
                      "text": "\tsvcWatcher := newServiceWatcherForTesting(ipToServiceAndNamespace, serviceAndNamespaceToSelectors)\n\tsvcWatcher.onDeleteService(service, mockDeleter)\n\n\t// Check that the maps do not contain the service\n\tif _, ok := ipToServiceAndNamespace.Load(\"1.2.3.4\"); ok {\n\t\tt.Errorf(\"ipToServiceAndNamespace still contains the service IP\")\n\t}\n\tif _, ok := serviceAndNamespaceToSelectors.Load(\"myservice@mynamespace\"); ok {\n",
                      "markdown": "`\tsvcWatcher := newServiceWatcherForTesting(ipToServiceAndNamespace, serviceAndNamespaceToSelectors)\n\tsvcWatcher.onDeleteService(service, mockDeleter)\n\n\t// Check that the maps do not contain the service\n\tif _, ok := ipToServiceAndNamespace.Load(\"1.2.3.4\"); ok {\n\t\tt.Errorf(\"ipToServiceAndNamespace still contains the service IP\")\n\t}\n\tif _, ok := serviceAndNamespaceToSelectors.Load(\"myservice@mynamespace\"); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 369,
                  "startColumn": 31,
                  "endLine": 369,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\t\t},\n\t}\n\n\t// Create the maps and add the service to them\n\tipToServiceAndNamespace := &sync.Map{}\n\tipToServiceAndNamespace.Store(\"1.2.3.4\", \"myservice@mynamespace\")\n\tserviceAndNamespaceToSelectors := &sync.Map{}\n",
                    "rendered": {
                      "text": "\t\t},\n\t}\n\n\t// Create the maps and add the service to them\n\tipToServiceAndNamespace := &sync.Map{}\n\tipToServiceAndNamespace.Store(\"1.2.3.4\", \"myservice@mynamespace\")\n\tserviceAndNamespaceToSelectors := &sync.Map{}\n",
                      "markdown": "`\t\t},\n\t}\n\n\t// Create the maps and add the service to them\n\tipToServiceAndNamespace := &sync.Map{}\n\tipToServiceAndNamespace.Store(\"1.2.3.4\", \"myservice@mynamespace\")\n\tserviceAndNamespaceToSelectors := &sync.Map{}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 356,
                  "endLine": 356,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nfunc TestOnDeleteService(t *testing.T) {\n\t// Create a fake service\n\tservice := &corev1.Service{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      \"myservice\",\n\t\t\tNamespace: \"mynamespace\",\n",
                    "rendered": {
                      "text": "\nfunc TestOnDeleteService(t *testing.T) {\n\t// Create a fake service\n\tservice := &corev1.Service{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      \"myservice\",\n\t\t\tNamespace: \"mynamespace\",\n",
                      "markdown": "`\nfunc TestOnDeleteService(t *testing.T) {\n\t// Create a fake service\n\tservice := &corev1.Service{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      \"myservice\",\n\t\t\tNamespace: \"mynamespace\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 355,
                  "startColumn": 17,
                  "endLine": 356,
                  "snippet": {
                    "text": "}\n\nfunc TestOnDeleteService(t *testing.T) {\n\t// Create a fake service\n\tservice := &corev1.Service{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      \"myservice\",\n\t\t\tNamespace: \"mynamespace\",\n",
                    "rendered": {
                      "text": "}\n\nfunc TestOnDeleteService(t *testing.T) {\n\t// Create a fake service\n\tservice := &corev1.Service{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      \"myservice\",\n\t\t\tNamespace: \"mynamespace\",\n",
                      "markdown": "`}\n\nfunc TestOnDeleteService(t *testing.T) {\n\t// Create a fake service\n\tservice := &corev1.Service{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      \"myservice\",\n\t\t\tNamespace: \"mynamespace\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 56,
                  "endLine": 347,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\n\t// Check that the maps contain the expected entries\n\tif _, ok := ipToServiceAndNamespace.Load(\"1.2.3.4\"); !ok {\n\t\tt.Errorf(\"ipToServiceAndNamespace does not contain the service IP\")\n\t}\n\tif _, ok := serviceAndNamespaceToSelectors.Load(\"myservice@mynamespace\"); !ok {\n\t\tt.Errorf(\"serviceAndNamespaceToSelectors does not contain the service\")\n",
                    "rendered": {
                      "text": "\n\t// Check that the maps contain the expected entries\n\tif _, ok := ipToServiceAndNamespace.Load(\"1.2.3.4\"); !ok {\n\t\tt.Errorf(\"ipToServiceAndNamespace does not contain the service IP\")\n\t}\n\tif _, ok := serviceAndNamespaceToSelectors.Load(\"myservice@mynamespace\"); !ok {\n\t\tt.Errorf(\"serviceAndNamespaceToSelectors does not contain the service\")\n",
                      "markdown": "`\n\t// Check that the maps contain the expected entries\n\tif _, ok := ipToServiceAndNamespace.Load(\"1.2.3.4\"); !ok {\n\t\tt.Errorf(\"ipToServiceAndNamespace does not contain the service IP\")\n\t}\n\tif _, ok := serviceAndNamespaceToSelectors.Load(\"myservice@mynamespace\"); !ok {\n\t\tt.Errorf(\"serviceAndNamespaceToSelectors does not contain the service\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 324,
                  "endLine": 324,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nfunc TestOnAddOrUpdateService(t *testing.T) {\n\t// Create a fake service\n\tservice := &corev1.Service{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      \"myservice\",\n\t\t\tNamespace: \"mynamespace\",\n",
                    "rendered": {
                      "text": "\nfunc TestOnAddOrUpdateService(t *testing.T) {\n\t// Create a fake service\n\tservice := &corev1.Service{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      \"myservice\",\n\t\t\tNamespace: \"mynamespace\",\n",
                      "markdown": "`\nfunc TestOnAddOrUpdateService(t *testing.T) {\n\t// Create a fake service\n\tservice := &corev1.Service{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      \"myservice\",\n\t\t\tNamespace: \"mynamespace\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 17,
                  "endLine": 324,
                  "snippet": {
                    "text": "}\n\nfunc TestOnAddOrUpdateService(t *testing.T) {\n\t// Create a fake service\n\tservice := &corev1.Service{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      \"myservice\",\n\t\t\tNamespace: \"mynamespace\",\n",
                    "rendered": {
                      "text": "}\n\nfunc TestOnAddOrUpdateService(t *testing.T) {\n\t// Create a fake service\n\tservice := &corev1.Service{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      \"myservice\",\n\t\t\tNamespace: \"mynamespace\",\n",
                      "markdown": "`}\n\nfunc TestOnAddOrUpdateService(t *testing.T) {\n\t// Create a fake service\n\tservice := &corev1.Service{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      \"myservice\",\n\t\t\tNamespace: \"mynamespace\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 61,
                  "endLine": 318,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\n\t// Check that the function stopped in a reasonable time after the stop signal\n\tif duration > 200*time.Millisecond {\n\t\tt.Errorf(\"mapServiceToWorkload did not stop in a reasonable time after the stop signal, duration: %v\", duration)\n\t}\n}\n\n",
                    "rendered": {
                      "text": "\n\t// Check that the function stopped in a reasonable time after the stop signal\n\tif duration > 200*time.Millisecond {\n\t\tt.Errorf(\"mapServiceToWorkload did not stop in a reasonable time after the stop signal, duration: %v\", duration)\n\t}\n}\n\n",
                      "markdown": "`\n\t// Check that the function stopped in a reasonable time after the stop signal\n\tif duration > 200*time.Millisecond {\n\t\tt.Errorf(\"mapServiceToWorkload did not stop in a reasonable time after the stop signal, duration: %v\", duration)\n\t}\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 51,
                  "endLine": 316,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\tmapper.Start(stopchan)\n\tduration := time.Since(start)\n\n\t// Check that the function stopped in a reasonable time after the stop signal\n\tif duration > 200*time.Millisecond {\n\t\tt.Errorf(\"mapServiceToWorkload did not stop in a reasonable time after the stop signal, duration: %v\", duration)\n\t}\n",
                    "rendered": {
                      "text": "\tmapper.Start(stopchan)\n\tduration := time.Since(start)\n\n\t// Check that the function stopped in a reasonable time after the stop signal\n\tif duration > 200*time.Millisecond {\n\t\tt.Errorf(\"mapServiceToWorkload did not stop in a reasonable time after the stop signal, duration: %v\", duration)\n\t}\n",
                      "markdown": "`\tmapper.Start(stopchan)\n\tduration := time.Since(start)\n\n\t// Check that the function stopped in a reasonable time after the stop signal\n\tif duration > 200*time.Millisecond {\n\t\tt.Errorf(\"mapServiceToWorkload did not stop in a reasonable time after the stop signal, duration: %v\", duration)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 33,
                  "endLine": 292,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n\t// Check that the service does not map to any workload\n\tif _, ok := serviceToWorkload.Load(serviceAndNamespace); ok {\n\t\tt.Errorf(\"Unexpected mapping of service to multiple workloads\")\n\t}\n}\n\n",
                    "rendered": {
                      "text": "\n\t// Check that the service does not map to any workload\n\tif _, ok := serviceToWorkload.Load(serviceAndNamespace); ok {\n\t\tt.Errorf(\"Unexpected mapping of service to multiple workloads\")\n\t}\n}\n\n",
                      "markdown": "`\n\t// Check that the service does not map to any workload\n\tif _, ok := serviceToWorkload.Load(serviceAndNamespace); ok {\n\t\tt.Errorf(\"Unexpected mapping of service to multiple workloads\")\n\t}\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 18,
                  "endLine": 290,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\tmapper := newServiceToWorkloadMapper(serviceAndNamespaceToSelectors, workloadAndNamespaceToLabels, serviceToWorkload, logger, mockDeleter)\n\tmapper.mapServiceToWorkload()\n\n\t// Check that the service does not map to any workload\n\tif _, ok := serviceToWorkload.Load(serviceAndNamespace); ok {\n\t\tt.Errorf(\"Unexpected mapping of service to multiple workloads\")\n\t}\n",
                    "rendered": {
                      "text": "\tmapper := newServiceToWorkloadMapper(serviceAndNamespaceToSelectors, workloadAndNamespaceToLabels, serviceToWorkload, logger, mockDeleter)\n\tmapper.mapServiceToWorkload()\n\n\t// Check that the service does not map to any workload\n\tif _, ok := serviceToWorkload.Load(serviceAndNamespace); ok {\n\t\tt.Errorf(\"Unexpected mapping of service to multiple workloads\")\n\t}\n",
                      "markdown": "`\tmapper := newServiceToWorkloadMapper(serviceAndNamespaceToSelectors, workloadAndNamespaceToLabels, serviceToWorkload, logger, mockDeleter)\n\tmapper.mapServiceToWorkload()\n\n\t// Check that the service does not map to any workload\n\tif _, ok := serviceToWorkload.Load(serviceAndNamespace); ok {\n\t\tt.Errorf(\"Unexpected mapping of service to multiple workloads\")\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 49,
                  "endLine": 284,
                  "snippet": {
                    "text": "\tserviceAndNamespace := \"service@namespace\"\n\tserviceAndNamespaceToSelectors.Store(serviceAndNamespace, mapset.NewSet(\"label1=value1\", \"label2=value2\"))\n\n\t// Add two workloads with matching labels to the service\n\tworkloadAndNamespaceToLabels.Store(\"workload1@namespace\", mapset.NewSet(\"label1=value1\", \"label2=value2\", \"label3=value3\"))\n\tworkloadAndNamespaceToLabels.Store(\"workload2@namespace\", mapset.NewSet(\"label1=value1\", \"label2=value2\", \"label4=value4\"))\n\n\tmapper := newServiceToWorkloadMapper(serviceAndNamespaceToSelectors, workloadAndNamespaceToLabels, serviceToWorkload, logger, mockDeleter)\n",
                    "rendered": {
                      "text": "\tserviceAndNamespace := \"service@namespace\"\n\tserviceAndNamespaceToSelectors.Store(serviceAndNamespace, mapset.NewSet(\"label1=value1\", \"label2=value2\"))\n\n\t// Add two workloads with matching labels to the service\n\tworkloadAndNamespaceToLabels.Store(\"workload1@namespace\", mapset.NewSet(\"label1=value1\", \"label2=value2\", \"label3=value3\"))\n\tworkloadAndNamespaceToLabels.Store(\"workload2@namespace\", mapset.NewSet(\"label1=value1\", \"label2=value2\", \"label4=value4\"))\n\n\tmapper := newServiceToWorkloadMapper(serviceAndNamespaceToSelectors, workloadAndNamespaceToLabels, serviceToWorkload, logger, mockDeleter)\n",
                      "markdown": "`\tserviceAndNamespace := \"service@namespace\"\n\tserviceAndNamespaceToSelectors.Store(serviceAndNamespace, mapset.NewSet(\"label1=value1\", \"label2=value2\"))\n\n\t// Add two workloads with matching labels to the service\n\tworkloadAndNamespaceToLabels.Store(\"workload1@namespace\", mapset.NewSet(\"label1=value1\", \"label2=value2\", \"label3=value3\"))\n\tworkloadAndNamespaceToLabels.Store(\"workload2@namespace\", mapset.NewSet(\"label1=value1\", \"label2=value2\", \"label4=value4\"))\n\n\tmapper := newServiceToWorkloadMapper(serviceAndNamespaceToSelectors, workloadAndNamespaceToLabels, serviceToWorkload, logger, mockDeleter)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 18,
                  "endLine": 267,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\tmapper := newServiceToWorkloadMapper(serviceAndNamespaceToSelectors, workloadAndNamespaceToLabels, serviceToWorkload, logger, mockDeleter)\n\tmapper.mapServiceToWorkload()\n\n\t// Check that the service was deleted from serviceToWorkload\n\tif _, ok := serviceToWorkload.Load(serviceAndNamespace); ok {\n\t\tt.Errorf(\"Service was not deleted from serviceToWorkload\")\n\t}\n",
                    "rendered": {
                      "text": "\tmapper := newServiceToWorkloadMapper(serviceAndNamespaceToSelectors, workloadAndNamespaceToLabels, serviceToWorkload, logger, mockDeleter)\n\tmapper.mapServiceToWorkload()\n\n\t// Check that the service was deleted from serviceToWorkload\n\tif _, ok := serviceToWorkload.Load(serviceAndNamespace); ok {\n\t\tt.Errorf(\"Service was not deleted from serviceToWorkload\")\n\t}\n",
                      "markdown": "`\tmapper := newServiceToWorkloadMapper(serviceAndNamespaceToSelectors, workloadAndNamespaceToLabels, serviceToWorkload, logger, mockDeleter)\n\tmapper.mapServiceToWorkload()\n\n\t// Check that the service was deleted from serviceToWorkload\n\tif _, ok := serviceToWorkload.Load(serviceAndNamespace); ok {\n\t\tt.Errorf(\"Service was not deleted from serviceToWorkload\")\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 9,
                  "endLine": 259,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\tworkloadAndNamespaceToLabels := &sync.Map{}\n\tserviceToWorkload := &sync.Map{}\n\n\t// Add a service with no matching workload\n\tserviceAndNamespace := \"service@namespace\"\n\tserviceAndNamespaceToSelectors.Store(serviceAndNamespace, mapset.NewSet(\"label1=value1\"))\n\tserviceToWorkload.Store(serviceAndNamespace, \"workload@namespace\")\n",
                    "rendered": {
                      "text": "\tworkloadAndNamespaceToLabels := &sync.Map{}\n\tserviceToWorkload := &sync.Map{}\n\n\t// Add a service with no matching workload\n\tserviceAndNamespace := \"service@namespace\"\n\tserviceAndNamespaceToSelectors.Store(serviceAndNamespace, mapset.NewSet(\"label1=value1\"))\n\tserviceToWorkload.Store(serviceAndNamespace, \"workload@namespace\")\n",
                      "markdown": "`\tworkloadAndNamespaceToLabels := &sync.Map{}\n\tserviceToWorkload := &sync.Map{}\n\n\t// Add a service with no matching workload\n\tserviceAndNamespace := \"service@namespace\"\n\tserviceAndNamespaceToSelectors.Store(serviceAndNamespace, mapset.NewSet(\"label1=value1\"))\n\tserviceToWorkload.Store(serviceAndNamespace, \"workload@namespace\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_test.go"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n// TestGetServiceAndNamespace function\nfunc TestGetServiceAndNamespace(t *testing.T) {\n\tservice := &corev1.Service{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      \"testService\",\n\t\t\tNamespace: \"testNamespace\",\n",
                    "rendered": {
                      "text": "\n// TestGetServiceAndNamespace function\nfunc TestGetServiceAndNamespace(t *testing.T) {\n\tservice := &corev1.Service{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      \"testService\",\n\t\t\tNamespace: \"testNamespace\",\n",
                      "markdown": "`\n// TestGetServiceAndNamespace function\nfunc TestGetServiceAndNamespace(t *testing.T) {\n\tservice := &corev1.Service{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      \"testService\",\n\t\t\tNamespace: \"testNamespace\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/ecs_test.go"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 29,
                  "endLine": 79,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, tc.expectedClusterName, attribute.Str())\n\n\t\t\tattribute, ok = attributes.Get(attr.AWSLocalEnvironment)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, tc.expectedEnvironmentName, attribute.Str())\n\t\t})\n",
                    "rendered": {
                      "text": "\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, tc.expectedClusterName, attribute.Str())\n\n\t\t\tattribute, ok = attributes.Get(attr.AWSLocalEnvironment)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, tc.expectedEnvironmentName, attribute.Str())\n\t\t})\n",
                      "markdown": "`\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, tc.expectedClusterName, attribute.Str())\n\n\t\t\tattribute, ok = attributes.Get(attr.AWSLocalEnvironment)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, tc.expectedEnvironmentName, attribute.Str())\n\t\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/ecs_test.go"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 29,
                  "endLine": 75,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, AttributePlatformECS, attribute.Str())\n\n\t\t\tattribute, ok = attributes.Get(attr.AWSECSClusterName)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, tc.expectedClusterName, attribute.Str())\n\n",
                    "rendered": {
                      "text": "\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, AttributePlatformECS, attribute.Str())\n\n\t\t\tattribute, ok = attributes.Get(attr.AWSECSClusterName)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, tc.expectedClusterName, attribute.Str())\n\n",
                      "markdown": "`\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, AttributePlatformECS, attribute.Str())\n\n\t\t\tattribute, ok = attributes.Get(attr.AWSECSClusterName)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, tc.expectedClusterName, attribute.Str())\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/ecs_test.go"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 30,
                  "endLine": 71,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n\t\t\tresolver.Process(attributes, resourceAttributes)\n\n\t\t\tattribute, ok := attributes.Get(common.AttributePlatformType)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, AttributePlatformECS, attribute.Str())\n\n",
                    "rendered": {
                      "text": "\n\t\t\tresolver.Process(attributes, resourceAttributes)\n\n\t\t\tattribute, ok := attributes.Get(common.AttributePlatformType)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, AttributePlatformECS, attribute.Str())\n\n",
                      "markdown": "`\n\t\t\tresolver.Process(attributes, resourceAttributes)\n\n\t\t\tattribute, ok := attributes.Get(common.AttributePlatformType)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, AttributePlatformECS, attribute.Str())\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatch/config_test.go"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 28,
                  "endLine": 60,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tassert.Equal(t, \"val2\", c2.Region)\n\tassert.Equal(t, \"val3\", c2.EndpointOverride)\n\tassert.Equal(t, \"val4\", c2.AccessKey)\n\tassert.Equal(t, \"val5\", c2.SecretKey)\n\tassert.Equal(t, \"val6\", c2.RoleARN)\n\tassert.Equal(t, \"val7\", c2.Profile)\n\tassert.Equal(t, \"val8\", c2.SharedCredentialFilename)\n",
                    "rendered": {
                      "text": "\tassert.Equal(t, \"val2\", c2.Region)\n\tassert.Equal(t, \"val3\", c2.EndpointOverride)\n\tassert.Equal(t, \"val4\", c2.AccessKey)\n\tassert.Equal(t, \"val5\", c2.SecretKey)\n\tassert.Equal(t, \"val6\", c2.RoleARN)\n\tassert.Equal(t, \"val7\", c2.Profile)\n\tassert.Equal(t, \"val8\", c2.SharedCredentialFilename)\n",
                      "markdown": "`\tassert.Equal(t, \"val2\", c2.Region)\n\tassert.Equal(t, \"val3\", c2.EndpointOverride)\n\tassert.Equal(t, \"val4\", c2.AccessKey)\n\tassert.Equal(t, \"val5\", c2.SecretKey)\n\tassert.Equal(t, \"val6\", c2.RoleARN)\n\tassert.Equal(t, \"val7\", c2.Profile)\n\tassert.Equal(t, \"val8\", c2.SharedCredentialFilename)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatch/config_test.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 3,
                  "endLine": 37,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\tassert.Error(t, err)\n\n\t// Test missing namespace.\n\t// Expect valid because factory has a default value.\n\tfp = filepath.Join(\"testdata\", \"missing_namespace.yaml\")\n\t_, err = otelcoltest.LoadConfigAndValidate(fp, factories)\n\tassert.NoError(t, err)\n",
                    "rendered": {
                      "text": "\tassert.Error(t, err)\n\n\t// Test missing namespace.\n\t// Expect valid because factory has a default value.\n\tfp = filepath.Join(\"testdata\", \"missing_namespace.yaml\")\n\t_, err = otelcoltest.LoadConfigAndValidate(fp, factories)\n\tassert.NoError(t, err)\n",
                      "markdown": "`\tassert.Error(t, err)\n\n\t// Test missing namespace.\n\t// Expect valid because factory has a default value.\n\tfp = filepath.Join(\"testdata\", \"missing_namespace.yaml\")\n\t_, err = otelcoltest.LoadConfigAndValidate(fp, factories)\n\tassert.NoError(t, err)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatch/config_test.go"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 3,
                  "endLine": 30,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\tassert.Error(t, err)\n\n\t// Test small force flush interval.\n\t// Expect invalid because of minimum duration check.\n\t// A value of 60 in YAML will be parsed as 60ns.\n\tfp = filepath.Join(\"testdata\", \"small_force_flush_interval.yaml\")\n\t_, err = otelcoltest.LoadConfigAndValidate(fp, factories)\n",
                    "rendered": {
                      "text": "\tassert.Error(t, err)\n\n\t// Test small force flush interval.\n\t// Expect invalid because of minimum duration check.\n\t// A value of 60 in YAML will be parsed as 60ns.\n\tfp = filepath.Join(\"testdata\", \"small_force_flush_interval.yaml\")\n\t_, err = otelcoltest.LoadConfigAndValidate(fp, factories)\n",
                      "markdown": "`\tassert.Error(t, err)\n\n\t// Test small force flush interval.\n\t// Expect invalid because of minimum duration check.\n\t// A value of 60 in YAML will be parsed as 60ns.\n\tfp = filepath.Join(\"testdata\", \"small_force_flush_interval.yaml\")\n\t_, err = otelcoltest.LoadConfigAndValidate(fp, factories)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatch/config_test.go"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 3,
                  "endLine": 24,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\tfactories.Exporters[TypeStr] = factory\n\n\t// Test missing region.\n\t// Expect invalid because factory does not have a default value.\n\tfp := filepath.Join(\"testdata\", \"missing_region.yaml\")\n\t_, err = otelcoltest.LoadConfigAndValidate(fp, factories)\n\tassert.Error(t, err)\n",
                    "rendered": {
                      "text": "\tfactories.Exporters[TypeStr] = factory\n\n\t// Test missing region.\n\t// Expect invalid because factory does not have a default value.\n\tfp := filepath.Join(\"testdata\", \"missing_region.yaml\")\n\t_, err = otelcoltest.LoadConfigAndValidate(fp, factories)\n\tassert.Error(t, err)\n",
                      "markdown": "`\tfactories.Exporters[TypeStr] = factory\n\n\t// Test missing region.\n\t// Expect invalid because factory does not have a default value.\n\tfp := filepath.Join(\"testdata\", \"missing_region.yaml\")\n\t_, err = otelcoltest.LoadConfigAndValidate(fp, factories)\n\tassert.Error(t, err)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatch/cloudwatch_test.go"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 12,
                  "endLine": 375,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\tinput *cloudwatch.PutMetricDataInput,\n) (*cloudwatch.PutMetricDataOutput, error) {\n\targs := svc.Called(input)\n\treturn args.Get(0).(*cloudwatch.PutMetricDataOutput), args.Error(1)\n}\n\nfunc newCloudWatchClient(\n",
                    "rendered": {
                      "text": "\tinput *cloudwatch.PutMetricDataInput,\n) (*cloudwatch.PutMetricDataOutput, error) {\n\targs := svc.Called(input)\n\treturn args.Get(0).(*cloudwatch.PutMetricDataOutput), args.Error(1)\n}\n\nfunc newCloudWatchClient(\n",
                      "markdown": "`\tinput *cloudwatch.PutMetricDataInput,\n) (*cloudwatch.PutMetricDataOutput, error) {\n\targs := svc.Called(input)\n\treturn args.Get(0).(*cloudwatch.PutMetricDataOutput), args.Error(1)\n}\n\nfunc newCloudWatchClient(\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatch/cloudwatch_test.go"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 2,
                  "endLine": 275,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\t\t\t\t\"cpu_usage_guest\": false,\n\t\t\t},\n\t\t},\n\t\t\"TestIsDroppingWithMultipleCategoryWindows\": {\n\t\t\tdropMetricsConfig: map[string]bool{\n\t\t\t\t\"cpu usage_idle\":             true,\n\t\t\t\t\"cpu time_active\":            true,\n",
                    "rendered": {
                      "text": "\t\t\t\t\"cpu_usage_guest\": false,\n\t\t\t},\n\t\t},\n\t\t\"TestIsDroppingWithMultipleCategoryWindows\": {\n\t\t\tdropMetricsConfig: map[string]bool{\n\t\t\t\t\"cpu usage_idle\":             true,\n\t\t\t\t\"cpu time_active\":            true,\n",
                      "markdown": "`\t\t\t\t\"cpu_usage_guest\": false,\n\t\t\t},\n\t\t},\n\t\t\"TestIsDroppingWithMultipleCategoryWindows\": {\n\t\t\tdropMetricsConfig: map[string]bool{\n\t\t\t\t\"cpu usage_idle\":             true,\n\t\t\t\t\"cpu time_active\":            true,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatch/cloudwatch_test.go"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 25,
                  "endLine": 55,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\t// empty\n\tdims = BuildDimensions(make(map[string]string))\n\tassert.Equal(0, len(dims))\n\t// Always expect \"host\". Expect no more than 30.\n\tfor i := 1; i < 40; i++ {\n\t\ttags := make(map[string]string, i)\n\t\tfor j := 0; j < i; j++ {\n",
                    "rendered": {
                      "text": "\t// empty\n\tdims = BuildDimensions(make(map[string]string))\n\tassert.Equal(0, len(dims))\n\t// Always expect \"host\". Expect no more than 30.\n\tfor i := 1; i < 40; i++ {\n\t\ttags := make(map[string]string, i)\n\t\tfor j := 0; j < i; j++ {\n",
                      "markdown": "`\t// empty\n\tdims = BuildDimensions(make(map[string]string))\n\tassert.Equal(0, len(dims))\n\t// Always expect \"host\". Expect no more than 30.\n\tfor i := 1; i < 40; i++ {\n\t\ttags := make(map[string]string, i)\n\t\tfor j := 0; j < i; j++ {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatch/cloudwatch_test.go"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 10,
                  "endLine": 55,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\t// empty\n\tdims = BuildDimensions(make(map[string]string))\n\tassert.Equal(0, len(dims))\n\t// Always expect \"host\". Expect no more than 30.\n\tfor i := 1; i < 40; i++ {\n\t\ttags := make(map[string]string, i)\n\t\tfor j := 0; j < i; j++ {\n",
                    "rendered": {
                      "text": "\t// empty\n\tdims = BuildDimensions(make(map[string]string))\n\tassert.Equal(0, len(dims))\n\t// Always expect \"host\". Expect no more than 30.\n\tfor i := 1; i < 40; i++ {\n\t\ttags := make(map[string]string, i)\n\t\tfor j := 0; j < i; j++ {\n",
                      "markdown": "`\t// empty\n\tdims = BuildDimensions(make(map[string]string))\n\tassert.Equal(0, len(dims))\n\t// Always expect \"host\". Expect no more than 30.\n\tfor i := 1; i < 40; i++ {\n\t\ttags := make(map[string]string, i)\n\t\tfor j := 0; j < i; j++ {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatch/config.go"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 57,
                  "endLine": 19,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\tRegion                   string          `mapstructure:\"region\"`\n\tEndpointOverride         string          `mapstructure:\"endpoint_override,omitempty\"`\n\tAccessKey                string          `mapstructure:\"access_key,omitempty\"`\n\tSecretKey                string          `mapstructure:\"secret_key,omitempty\"`\n\tRoleARN                  string          `mapstructure:\"role_arn,omitempty\"`\n\tProfile                  string          `mapstructure:\"profile,omitempty\"`\n\tSharedCredentialFilename string          `mapstructure:\"shared_credential_file,omitempty\"`\n",
                    "rendered": {
                      "text": "\tRegion                   string          `mapstructure:\"region\"`\n\tEndpointOverride         string          `mapstructure:\"endpoint_override,omitempty\"`\n\tAccessKey                string          `mapstructure:\"access_key,omitempty\"`\n\tSecretKey                string          `mapstructure:\"secret_key,omitempty\"`\n\tRoleARN                  string          `mapstructure:\"role_arn,omitempty\"`\n\tProfile                  string          `mapstructure:\"profile,omitempty\"`\n\tSharedCredentialFilename string          `mapstructure:\"shared_credential_file,omitempty\"`\n",
                      "markdown": "`\tRegion                   string          `mapstructure:\"region\"`\n\tEndpointOverride         string          `mapstructure:\"endpoint_override,omitempty\"`\n\tAccessKey                string          `mapstructure:\"access_key,omitempty\"`\n\tSecretKey                string          `mapstructure:\"secret_key,omitempty\"`\n\tRoleARN                  string          `mapstructure:\"role_arn,omitempty\"`\n\tProfile                  string          `mapstructure:\"profile,omitempty\"`\n\tSharedCredentialFilename string          `mapstructure:\"shared_credential_file,omitempty\"`\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatch/config.go"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\tRegion                   string          `mapstructure:\"region\"`\n\tEndpointOverride         string          `mapstructure:\"endpoint_override,omitempty\"`\n\tAccessKey                string          `mapstructure:\"access_key,omitempty\"`\n\tSecretKey                string          `mapstructure:\"secret_key,omitempty\"`\n\tRoleARN                  string          `mapstructure:\"role_arn,omitempty\"`\n\tProfile                  string          `mapstructure:\"profile,omitempty\"`\n\tSharedCredentialFilename string          `mapstructure:\"shared_credential_file,omitempty\"`\n",
                    "rendered": {
                      "text": "\tRegion                   string          `mapstructure:\"region\"`\n\tEndpointOverride         string          `mapstructure:\"endpoint_override,omitempty\"`\n\tAccessKey                string          `mapstructure:\"access_key,omitempty\"`\n\tSecretKey                string          `mapstructure:\"secret_key,omitempty\"`\n\tRoleARN                  string          `mapstructure:\"role_arn,omitempty\"`\n\tProfile                  string          `mapstructure:\"profile,omitempty\"`\n\tSharedCredentialFilename string          `mapstructure:\"shared_credential_file,omitempty\"`\n",
                      "markdown": "`\tRegion                   string          `mapstructure:\"region\"`\n\tEndpointOverride         string          `mapstructure:\"endpoint_override,omitempty\"`\n\tAccessKey                string          `mapstructure:\"access_key,omitempty\"`\n\tSecretKey                string          `mapstructure:\"secret_key,omitempty\"`\n\tRoleARN                  string          `mapstructure:\"role_arn,omitempty\"`\n\tProfile                  string          `mapstructure:\"profile,omitempty\"`\n\tSharedCredentialFilename string          `mapstructure:\"shared_credential_file,omitempty\"`\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatch/config.go"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 51,
                  "endLine": 51,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\t\treturn errors.New(\"'namespace' must be set\")\n\t}\n\tif c.ForceFlushInterval < time.Millisecond {\n\t\treturn errors.New(\"'force_flush_interval' must be at least 1 millisecond\")\n\t}\n\treturn nil\n}\n",
                    "rendered": {
                      "text": "\t\treturn errors.New(\"'namespace' must be set\")\n\t}\n\tif c.ForceFlushInterval < time.Millisecond {\n\t\treturn errors.New(\"'force_flush_interval' must be at least 1 millisecond\")\n\t}\n\treturn nil\n}\n",
                      "markdown": "`\t\treturn errors.New(\"'namespace' must be set\")\n\t}\n\tif c.ForceFlushInterval < time.Millisecond {\n\t\treturn errors.New(\"'force_flush_interval' must be at least 1 millisecond\")\n\t}\n\treturn nil\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/k8sdecorator/stores/nodeinfo.go"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 25,
                  "endLine": 89,
                  "endColumn": 30,
                  "snippet": {
                    "text": "func (n *nodeInfo) getEbsVolumeId(devName string) string {\n\tn.RLock()\n\tdefer n.RUnlock()\n\tif volId, ok := n.ebsIds.Get(devName); ok {\n\t\treturn volId.(string)\n\t}\n\treturn \"\"\n",
                    "rendered": {
                      "text": "func (n *nodeInfo) getEbsVolumeId(devName string) string {\n\tn.RLock()\n\tdefer n.RUnlock()\n\tif volId, ok := n.ebsIds.Get(devName); ok {\n\t\treturn volId.(string)\n\t}\n\treturn \"\"\n",
                      "markdown": "`func (n *nodeInfo) getEbsVolumeId(devName string) string {\n\tn.RLock()\n\tdefer n.RUnlock()\n\tif volId, ok := n.ebsIds.Get(devName); ok {\n\t\treturn volId.(string)\n\t}\n\treturn \"\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/k8sdecorator/stores/nodeinfo.go"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 7,
                  "endLine": 102,
                  "snippet": {
                    "text": "\nfunc newNodeInfo() *nodeInfo {\n\tnc := &nodeInfo{ebsIds: mapWithExpiry.NewMapWithExpiry(2 * refreshInterval), NodeCapacity: NewNodeCapacity()}\n\treturn nc\n}\n\nfunc (n *nodeInfo) getCPUCapacity() int64 {\n\treturn n.CPUCapacity * 1000\n",
                    "rendered": {
                      "text": "\nfunc newNodeInfo() *nodeInfo {\n\tnc := &nodeInfo{ebsIds: mapWithExpiry.NewMapWithExpiry(2 * refreshInterval), NodeCapacity: NewNodeCapacity()}\n\treturn nc\n}\n\nfunc (n *nodeInfo) getCPUCapacity() int64 {\n\treturn n.CPUCapacity * 1000\n",
                      "markdown": "`\nfunc newNodeInfo() *nodeInfo {\n\tnc := &nodeInfo{ebsIds: mapWithExpiry.NewMapWithExpiry(2 * refreshInterval), NodeCapacity: NewNodeCapacity()}\n\treturn nc\n}\n\nfunc (n *nodeInfo) getCPUCapacity() int64 {\n\treturn n.CPUCapacity * 1000\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/k8sdecorator/stores/nodeinfo.go"
                },
                "region": {
                  "startLine": 100,
                  "endLine": 100,
                  "endColumn": 4,
                  "snippet": {
                    "text": "}\n\nfunc newNodeInfo() *nodeInfo {\n\tnc := &nodeInfo{ebsIds: mapWithExpiry.NewMapWithExpiry(2 * refreshInterval), NodeCapacity: NewNodeCapacity()}\n\treturn nc\n}\n\n",
                    "rendered": {
                      "text": "}\n\nfunc newNodeInfo() *nodeInfo {\n\tnc := &nodeInfo{ebsIds: mapWithExpiry.NewMapWithExpiry(2 * refreshInterval), NodeCapacity: NewNodeCapacity()}\n\treturn nc\n}\n\n",
                      "markdown": "`}\n\nfunc newNodeInfo() *nodeInfo {\n\tnc := &nodeInfo{ebsIds: mapWithExpiry.NewMapWithExpiry(2 * refreshInterval), NodeCapacity: NewNodeCapacity()}\n\treturn nc\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/k8sdecorator/stores/nodeinfo.go"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 86,
                  "endLine": 63,
                  "endColumn": 93,
                  "snippet": {
                    "text": "\t\t\tbreak\n\t\t}\n\n\t\t// isPrefix is set when a line exceeding 4KB which we treat it as error when reading mount file\n\t\tif isPrefix {\n\t\t\tbreak\n\t\t}\n",
                    "rendered": {
                      "text": "\t\t\tbreak\n\t\t}\n\n\t\t// isPrefix is set when a line exceeding 4KB which we treat it as error when reading mount file\n\t\tif isPrefix {\n\t\t\tbreak\n\t\t}\n",
                      "markdown": "`\t\t\tbreak\n\t\t}\n\n\t\t// isPrefix is set when a line exceeding 4KB which we treat it as error when reading mount file\n\t\tif isPrefix {\n\t\t\tbreak\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/k8sdecorator/stores/nodeinfo_test.go"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 28,
                  "endLine": 25,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n\tnodeInfo.extractEbsId(reader)\n\tassert.Equal(t, 1, nodeInfo.ebsIds.Size())\n\tvolId, _ := nodeInfo.ebsIds.Get(\"/dev/nvme1n1\")\n\tassert.Equal(t, \"aws://us-west-2b/vol-0d9f0816149eb2050\", volId.(string))\n}\n",
                    "rendered": {
                      "text": "\n\tnodeInfo.extractEbsId(reader)\n\tassert.Equal(t, 1, nodeInfo.ebsIds.Size())\n\tvolId, _ := nodeInfo.ebsIds.Get(\"/dev/nvme1n1\")\n\tassert.Equal(t, \"aws://us-west-2b/vol-0d9f0816149eb2050\", volId.(string))\n}\n",
                      "markdown": "`\n\tnodeInfo.extractEbsId(reader)\n\tassert.Equal(t, 1, nodeInfo.ebsIds.Size())\n\tvolId, _ := nodeInfo.ebsIds.Get(\"/dev/nvme1n1\")\n\tassert.Equal(t, \"aws://us-west-2b/vol-0d9f0816149eb2050\", volId.(string))\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/k8sdecorator/stores/podstore.go"
                },
                "region": {
                  "startLine": 546,
                  "startColumn": 31,
                  "endLine": 546,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\t\t\tkind := owner.Kind\n\t\t\tname := owner.Name\n\t\t\tif owner.Kind == ReplicaSet {\n\t\t\t\trsToDeployment := k8sclient.Get().ReplicaSet.ReplicaSetToDeployment()\n\t\t\t\tif parent := rsToDeployment[owner.Name]; parent != \"\" {\n\t\t\t\t\tkind = Deployment\n\t\t\t\t\tname = parent\n",
                    "rendered": {
                      "text": "\t\t\tkind := owner.Kind\n\t\t\tname := owner.Name\n\t\t\tif owner.Kind == ReplicaSet {\n\t\t\t\trsToDeployment := k8sclient.Get().ReplicaSet.ReplicaSetToDeployment()\n\t\t\t\tif parent := rsToDeployment[owner.Name]; parent != \"\" {\n\t\t\t\t\tkind = Deployment\n\t\t\t\t\tname = parent\n",
                      "markdown": "`\t\t\tkind := owner.Kind\n\t\t\tname := owner.Name\n\t\t\tif owner.Kind == ReplicaSet {\n\t\t\t\trsToDeployment := k8sclient.Get().ReplicaSet.ReplicaSetToDeployment()\n\t\t\t\tif parent := rsToDeployment[owner.Name]; parent != \"\" {\n\t\t\t\t\tkind = Deployment\n\t\t\t\t\tname = parent\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/k8sdecorator/stores/podstore.go"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 26,
                  "endLine": 169,
                  "endColumn": 31,
                  "snippet": {
                    "text": "func (p *PodStore) getCachedEntry(podKey string) *cachedEntry {\n\tp.Lock()\n\tdefer p.Unlock()\n\tif content, ok := p.cache.Get(podKey); ok {\n\t\treturn content.(*cachedEntry)\n\t}\n\treturn nil\n",
                    "rendered": {
                      "text": "func (p *PodStore) getCachedEntry(podKey string) *cachedEntry {\n\tp.Lock()\n\tdefer p.Unlock()\n\tif content, ok := p.cache.Get(podKey); ok {\n\t\treturn content.(*cachedEntry)\n\t}\n\treturn nil\n",
                      "markdown": "`func (p *PodStore) getCachedEntry(podKey string) *cachedEntry {\n\tp.Lock()\n\tdefer p.Unlock()\n\tif content, ok := p.cache.Get(podKey); ok {\n\t\treturn content.(*cachedEntry)\n\t}\n\treturn nil\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/k8sdecorator/stores/podstore.go"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 31,
                  "endLine": 89,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\t\treturn nil, false\n\t}\n\n\tcontent, ok := prevMeasurement.Get(metricKey)\n\n\tif !ok {\n\t\treturn nil, false\n",
                    "rendered": {
                      "text": "\t\treturn nil, false\n\t}\n\n\tcontent, ok := prevMeasurement.Get(metricKey)\n\n\tif !ok {\n\t\treturn nil, false\n",
                      "markdown": "`\t\treturn nil, false\n\t}\n\n\tcontent, ok := prevMeasurement.Get(metricKey)\n\n\tif !ok {\n\t\treturn nil, false\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/k8sdecorator/stores/utils_test.go"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 73,
                  "endLine": 86,
                  "endColumn": 79,
                  "snippet": {
                    "text": "\t\t},\n\n\t\t{\n\t\t\tname:        \"Get CronJobControllerV2's Name after k8s v1.21 with Unix Time not equal to 10 letters\",\n\t\t\tinputString: \"hello\" + unixTimeMinutesString + \"523\",\n\t\t\texpected:    \"\",\n\t\t},\n",
                    "rendered": {
                      "text": "\t\t},\n\n\t\t{\n\t\t\tname:        \"Get CronJobControllerV2's Name after k8s v1.21 with Unix Time not equal to 10 letters\",\n\t\t\tinputString: \"hello\" + unixTimeMinutesString + \"523\",\n\t\t\texpected:    \"\",\n\t\t},\n",
                      "markdown": "`\t\t},\n\n\t\t{\n\t\t\tname:        \"Get CronJobControllerV2's Name after k8s v1.21 with Unix Time not equal to 10 letters\",\n\t\t\tinputString: \"hello\" + unixTimeMinutesString + \"523\",\n\t\t\texpected:    \"\",\n\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/k8sdecorator/stores/utils_test.go"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 68,
                  "endLine": 70,
                  "endColumn": 74,
                  "snippet": {
                    "text": "\t\t\texpected:    \"\",\n\t\t},\n\t\t{\n\t\t\tname:        \"Get CronJobControllerV2 or CronJob's Name with Unix Time not equal to 10 letters\",\n\t\t\tinputString: \"hello-238\",\n\t\t\texpected:    \"\",\n\t\t},\n",
                    "rendered": {
                      "text": "\t\t\texpected:    \"\",\n\t\t},\n\t\t{\n\t\t\tname:        \"Get CronJobControllerV2 or CronJob's Name with Unix Time not equal to 10 letters\",\n\t\t\tinputString: \"hello-238\",\n\t\t\texpected:    \"\",\n\t\t},\n",
                      "markdown": "`\t\t\texpected:    \"\",\n\t\t},\n\t\t{\n\t\t\tname:        \"Get CronJobControllerV2 or CronJob's Name with Unix Time not equal to 10 letters\",\n\t\t\tinputString: \"hello-238\",\n\t\t\texpected:    \"\",\n\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/groovyjarjarantlr4/v4/tool/templates/unicodedata.st"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 35,
                  "endLine": 59,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\t\tIntervalSet result = propertyCodePointRanges.get(normalizedPropertyCodeOrAlias);\r\n\t\tif (result == null) {\r\n\t\t\tString propertyCode = propertyAliases.get(normalizedPropertyCodeOrAlias);\r\n\t\t\tresult = propertyCodePointRanges.get(propertyCode);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n",
                    "rendered": {
                      "text": "\t\tIntervalSet result = propertyCodePointRanges.get(normalizedPropertyCodeOrAlias);\r\n\t\tif (result == null) {\r\n\t\t\tString propertyCode = propertyAliases.get(normalizedPropertyCodeOrAlias);\r\n\t\t\tresult = propertyCodePointRanges.get(propertyCode);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n",
                      "markdown": "`\t\tIntervalSet result = propertyCodePointRanges.get(normalizedPropertyCodeOrAlias);\r\n\t\tif (result == null) {\r\n\t\t\tString propertyCode = propertyAliases.get(normalizedPropertyCodeOrAlias);\r\n\t\t\tresult = propertyCodePointRanges.get(propertyCode);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/groovyjarjarantlr4/v4/tool/templates/unicodedata.st"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 40,
                  "endLine": 58,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\t\tString normalizedPropertyCodeOrAlias = normalize(propertyCodeOrAlias);\r\n\t\tIntervalSet result = propertyCodePointRanges.get(normalizedPropertyCodeOrAlias);\r\n\t\tif (result == null) {\r\n\t\t\tString propertyCode = propertyAliases.get(normalizedPropertyCodeOrAlias);\r\n\t\t\tresult = propertyCodePointRanges.get(propertyCode);\r\n\t\t}\r\n\t\treturn result;\r\n",
                    "rendered": {
                      "text": "\t\tString normalizedPropertyCodeOrAlias = normalize(propertyCodeOrAlias);\r\n\t\tIntervalSet result = propertyCodePointRanges.get(normalizedPropertyCodeOrAlias);\r\n\t\tif (result == null) {\r\n\t\t\tString propertyCode = propertyAliases.get(normalizedPropertyCodeOrAlias);\r\n\t\t\tresult = propertyCodePointRanges.get(propertyCode);\r\n\t\t}\r\n\t\treturn result;\r\n",
                      "markdown": "`\t\tString normalizedPropertyCodeOrAlias = normalize(propertyCodeOrAlias);\r\n\t\tIntervalSet result = propertyCodePointRanges.get(normalizedPropertyCodeOrAlias);\r\n\t\tif (result == null) {\r\n\t\t\tString propertyCode = propertyAliases.get(normalizedPropertyCodeOrAlias);\r\n\t\t\tresult = propertyCodePointRanges.get(propertyCode);\r\n\t\t}\r\n\t\treturn result;\r\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/groovyjarjarantlr4/v4/tool/templates/unicodedata.st"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 46,
                  "endLine": 56,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\t */\r\n\tpublic static IntervalSet getPropertyCodePoints(String propertyCodeOrAlias) {\r\n\t\tString normalizedPropertyCodeOrAlias = normalize(propertyCodeOrAlias);\r\n\t\tIntervalSet result = propertyCodePointRanges.get(normalizedPropertyCodeOrAlias);\r\n\t\tif (result == null) {\r\n\t\t\tString propertyCode = propertyAliases.get(normalizedPropertyCodeOrAlias);\r\n\t\t\tresult = propertyCodePointRanges.get(propertyCode);\r\n",
                    "rendered": {
                      "text": "\t */\r\n\tpublic static IntervalSet getPropertyCodePoints(String propertyCodeOrAlias) {\r\n\t\tString normalizedPropertyCodeOrAlias = normalize(propertyCodeOrAlias);\r\n\t\tIntervalSet result = propertyCodePointRanges.get(normalizedPropertyCodeOrAlias);\r\n\t\tif (result == null) {\r\n\t\t\tString propertyCode = propertyAliases.get(normalizedPropertyCodeOrAlias);\r\n\t\t\tresult = propertyCodePointRanges.get(propertyCode);\r\n",
                      "markdown": "`\t */\r\n\tpublic static IntervalSet getPropertyCodePoints(String propertyCodeOrAlias) {\r\n\t\tString normalizedPropertyCodeOrAlias = normalize(propertyCodeOrAlias);\r\n\t\tIntervalSet result = propertyCodePointRanges.get(normalizedPropertyCodeOrAlias);\r\n\t\tif (result == null) {\r\n\t\t\tString propertyCode = propertyAliases.get(normalizedPropertyCodeOrAlias);\r\n\t\t\tresult = propertyCodePointRanges.get(propertyCode);\r\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/groovyjarjarantlr4/v4/tool/templates/unicodedata.st"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 77,
                  "endLine": 51,
                  "endColumn": 85,
                  "snippet": {
                    "text": "\t}\r\n\r\n\t/**\r\n\t * Given a Unicode property (general category code, binary property name, or script name),\r\n\t * returns the {@link IntervalSet} of Unicode code point ranges which have that property.\r\n\t */\r\n\tpublic static IntervalSet getPropertyCodePoints(String propertyCodeOrAlias) {\r\n",
                    "rendered": {
                      "text": "\t}\r\n\r\n\t/**\r\n\t * Given a Unicode property (general category code, binary property name, or script name),\r\n\t * returns the {@link IntervalSet} of Unicode code point ranges which have that property.\r\n\t */\r\n\tpublic static IntervalSet getPropertyCodePoints(String propertyCodeOrAlias) {\r\n",
                      "markdown": "`\t}\r\n\r\n\t/**\r\n\t * Given a Unicode property (general category code, binary property name, or script name),\r\n\t * returns the {@link IntervalSet} of Unicode code point ranges which have that property.\r\n\t */\r\n\tpublic static IntervalSet getPropertyCodePoints(String propertyCodeOrAlias) {\r\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/groovyjarjarantlr4/v4/tool/templates/codegen/Java/Java.stg"
                },
                "region": {
                  "startLine": 1039,
                  "startColumn": 53,
                  "endLine": 1039,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\tnew ATNDeserializer().deserialize(_serializedATN.toCharArray());\r\nstatic {\r\n<!\torg.antlr.v4.tool.DOTGenerator dot = new org.antlr.v4.tool.DOTGenerator(null);!>\r\n<!\tSystem.out.println(dot.getDOT(_ATN.decisionToState.get(0), ruleNames, false));!>\r\n<!\tSystem.out.println(dot.getDOT(_ATN.ruleToStartState[2], ruleNames, false));!>\r\n}\r\n>>\r\n",
                    "rendered": {
                      "text": "\tnew ATNDeserializer().deserialize(_serializedATN.toCharArray());\r\nstatic {\r\n<!\torg.antlr.v4.tool.DOTGenerator dot = new org.antlr.v4.tool.DOTGenerator(null);!>\r\n<!\tSystem.out.println(dot.getDOT(_ATN.decisionToState.get(0), ruleNames, false));!>\r\n<!\tSystem.out.println(dot.getDOT(_ATN.ruleToStartState[2], ruleNames, false));!>\r\n}\r\n>>\r\n",
                      "markdown": "`\tnew ATNDeserializer().deserialize(_serializedATN.toCharArray());\r\nstatic {\r\n<!\torg.antlr.v4.tool.DOTGenerator dot = new org.antlr.v4.tool.DOTGenerator(null);!>\r\n<!\tSystem.out.println(dot.getDOT(_ATN.decisionToState.get(0), ruleNames, false));!>\r\n<!\tSystem.out.println(dot.getDOT(_ATN.ruleToStartState[2], ruleNames, false));!>\r\n}\r\n>>\r\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/groovyjarjarantlr4/v4/tool/templates/codegen/Java/Java.stg"
                },
                "region": {
                  "startLine": 681,
                  "startColumn": 61,
                  "endLine": 681,
                  "endColumn": 65,
                  "snippet": {
                    "text": "<if(!isZero.(offset))>(<shiftAmount> - <offset>)<else><shiftAmount><endif>\r\n%>\r\n\r\n// produces more efficient bytecode when bits.ttypes contains at most two items\r\nbitsetInlineComparison(s, bits) ::= <%\r\n<bits.ttypes:{ttype | <s.varName>==<ttype>}; separator=\" || \">\r\n%>\r\n",
                    "rendered": {
                      "text": "<if(!isZero.(offset))>(<shiftAmount> - <offset>)<else><shiftAmount><endif>\r\n%>\r\n\r\n// produces more efficient bytecode when bits.ttypes contains at most two items\r\nbitsetInlineComparison(s, bits) ::= <%\r\n<bits.ttypes:{ttype | <s.varName>==<ttype>}; separator=\" || \">\r\n%>\r\n",
                      "markdown": "`<if(!isZero.(offset))>(<shiftAmount> - <offset>)<else><shiftAmount><endif>\r\n%>\r\n\r\n// produces more efficient bytecode when bits.ttypes contains at most two items\r\nbitsetInlineComparison(s, bits) ::= <%\r\n<bits.ttypes:{ttype | <s.varName>==<ttype>}; separator=\" || \">\r\n%>\r\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/META-INF/groovy-release-info.properties"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 58,
                  "endLine": 9,
                  "snippet": {
                    "text": "#  regarding copyright ownership.  The ASF licenses this file\n#  to you under the Apache License, Version 2.0 (the\n#  \"License\"); you may not use this file except in compliance\n#  with the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing,\n",
                    "rendered": {
                      "text": "#  regarding copyright ownership.  The ASF licenses this file\n#  to you under the Apache License, Version 2.0 (the\n#  \"License\"); you may not use this file except in compliance\n#  with the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing,\n",
                      "markdown": "`#  regarding copyright ownership.  The ASF licenses this file\n#  to you under the Apache License, Version 2.0 (the\n#  \"License\"); you may not use this file except in compliance\n#  with the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/META-INF/native-image/io.grpc.netty.shaded.io.netty/netty-codec/generated/handlers/reflect-config.json"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 68,
                  "endLine": 12,
                  "endColumn": 74,
                  "snippet": {
                    "text": "  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Encoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Encoder\"\n    },\n    \"queryAllPublicMethods\": true\n  },\n",
                    "rendered": {
                      "text": "  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Encoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Encoder\"\n    },\n    \"queryAllPublicMethods\": true\n  },\n",
                      "markdown": "`  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Encoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Encoder\"\n    },\n    \"queryAllPublicMethods\": true\n  },\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/META-INF/native-image/io.grpc.netty.shaded.io.netty/netty-codec/generated/handlers/reflect-config.json"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 57,
                  "endLine": 10,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    \"queryAllPublicMethods\": true\n  },\n  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Encoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Encoder\"\n    },\n",
                    "rendered": {
                      "text": "    \"queryAllPublicMethods\": true\n  },\n  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Encoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Encoder\"\n    },\n",
                      "markdown": "`    \"queryAllPublicMethods\": true\n  },\n  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Encoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Encoder\"\n    },\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/META-INF/native-image/io.grpc.netty.shaded.io.netty/netty-codec/generated/handlers/reflect-config.json"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 68,
                  "endLine": 5,
                  "endColumn": 74,
                  "snippet": {
                    "text": "  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Decoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Decoder\"\n    },\n    \"queryAllPublicMethods\": true\n  },\n",
                    "rendered": {
                      "text": "  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Decoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Decoder\"\n    },\n    \"queryAllPublicMethods\": true\n  },\n",
                      "markdown": "`  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Decoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Decoder\"\n    },\n    \"queryAllPublicMethods\": true\n  },\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/META-INF/native-image/io.grpc.netty.shaded.io.netty/netty-codec/generated/handlers/reflect-config.json"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 57,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "[\n  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Decoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Decoder\"\n    },\n",
                    "rendered": {
                      "text": "[\n  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Decoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Decoder\"\n    },\n",
                      "markdown": "`[\n  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Decoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Decoder\"\n    },\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/META-INF/native-image/io.grpc.netty.shaded.io.netty/netty-codec-socks/generated/handlers/reflect-config.json"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 84,
                  "endLine": 131,
                  "endColumn": 92,
                  "snippet": {
                    "text": "  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.socksx.v5.Socks5PasswordAuthResponseDecoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.socksx.v5.Socks5PasswordAuthResponseDecoder\"\n    },\n    \"queryAllPublicMethods\": true\n  },\n",
                    "rendered": {
                      "text": "  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.socksx.v5.Socks5PasswordAuthResponseDecoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.socksx.v5.Socks5PasswordAuthResponseDecoder\"\n    },\n    \"queryAllPublicMethods\": true\n  },\n",
                      "markdown": "`  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.socksx.v5.Socks5PasswordAuthResponseDecoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.socksx.v5.Socks5PasswordAuthResponseDecoder\"\n    },\n    \"queryAllPublicMethods\": true\n  },\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/META-INF/native-image/io.grpc.netty.shaded.io.netty/netty-codec-socks/generated/handlers/reflect-config.json"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 73,
                  "endLine": 129,
                  "endColumn": 81,
                  "snippet": {
                    "text": "    \"queryAllPublicMethods\": true\n  },\n  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.socksx.v5.Socks5PasswordAuthResponseDecoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.socksx.v5.Socks5PasswordAuthResponseDecoder\"\n    },\n",
                    "rendered": {
                      "text": "    \"queryAllPublicMethods\": true\n  },\n  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.socksx.v5.Socks5PasswordAuthResponseDecoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.socksx.v5.Socks5PasswordAuthResponseDecoder\"\n    },\n",
                      "markdown": "`    \"queryAllPublicMethods\": true\n  },\n  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.socksx.v5.Socks5PasswordAuthResponseDecoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.socksx.v5.Socks5PasswordAuthResponseDecoder\"\n    },\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/META-INF/native-image/io.grpc.netty.shaded.io.netty/netty-codec-socks/generated/handlers/reflect-config.json"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 84,
                  "endLine": 124,
                  "endColumn": 92,
                  "snippet": {
                    "text": "  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.socksx.v5.Socks5PasswordAuthRequestDecoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.socksx.v5.Socks5PasswordAuthRequestDecoder\"\n    },\n    \"queryAllPublicMethods\": true\n  },\n",
                    "rendered": {
                      "text": "  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.socksx.v5.Socks5PasswordAuthRequestDecoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.socksx.v5.Socks5PasswordAuthRequestDecoder\"\n    },\n    \"queryAllPublicMethods\": true\n  },\n",
                      "markdown": "`  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.socksx.v5.Socks5PasswordAuthRequestDecoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.socksx.v5.Socks5PasswordAuthRequestDecoder\"\n    },\n    \"queryAllPublicMethods\": true\n  },\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/META-INF/native-image/io.grpc.netty.shaded.io.netty/netty-codec-socks/generated/handlers/reflect-config.json"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 73,
                  "endLine": 122,
                  "endColumn": 81,
                  "snippet": {
                    "text": "    \"queryAllPublicMethods\": true\n  },\n  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.socksx.v5.Socks5PasswordAuthRequestDecoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.socksx.v5.Socks5PasswordAuthRequestDecoder\"\n    },\n",
                    "rendered": {
                      "text": "    \"queryAllPublicMethods\": true\n  },\n  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.socksx.v5.Socks5PasswordAuthRequestDecoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.socksx.v5.Socks5PasswordAuthRequestDecoder\"\n    },\n",
                      "markdown": "`    \"queryAllPublicMethods\": true\n  },\n  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.socksx.v5.Socks5PasswordAuthRequestDecoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.socksx.v5.Socks5PasswordAuthRequestDecoder\"\n    },\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/META-INF/native-image/io.grpc.netty.shaded.io.netty/netty-handler/generated/handlers/reflect-config.json"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 68,
                  "endLine": 26,
                  "endColumn": 74,
                  "snippet": {
                    "text": "  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Encoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Encoder\"\n    },\n    \"queryAllPublicMethods\": true\n  },\n",
                    "rendered": {
                      "text": "  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Encoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Encoder\"\n    },\n    \"queryAllPublicMethods\": true\n  },\n",
                      "markdown": "`  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Encoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Encoder\"\n    },\n    \"queryAllPublicMethods\": true\n  },\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/META-INF/native-image/io.grpc.netty.shaded.io.netty/netty-handler/generated/handlers/reflect-config.json"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 57,
                  "endLine": 24,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    \"queryAllPublicMethods\": true\n  },\n  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Encoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Encoder\"\n    },\n",
                    "rendered": {
                      "text": "    \"queryAllPublicMethods\": true\n  },\n  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Encoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Encoder\"\n    },\n",
                      "markdown": "`    \"queryAllPublicMethods\": true\n  },\n  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Encoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Encoder\"\n    },\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/META-INF/native-image/io.grpc.netty.shaded.io.netty/netty-handler/generated/handlers/reflect-config.json"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 68,
                  "endLine": 19,
                  "endColumn": 74,
                  "snippet": {
                    "text": "  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Decoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Decoder\"\n    },\n    \"queryAllPublicMethods\": true\n  },\n",
                    "rendered": {
                      "text": "  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Decoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Decoder\"\n    },\n    \"queryAllPublicMethods\": true\n  },\n",
                      "markdown": "`  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Decoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Decoder\"\n    },\n    \"queryAllPublicMethods\": true\n  },\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/META-INF/native-image/io.grpc.netty.shaded.io.netty/netty-handler/generated/handlers/reflect-config.json"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 57,
                  "endLine": 17,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    \"queryAllPublicMethods\": true\n  },\n  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Decoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Decoder\"\n    },\n",
                    "rendered": {
                      "text": "    \"queryAllPublicMethods\": true\n  },\n  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Decoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Decoder\"\n    },\n",
                      "markdown": "`    \"queryAllPublicMethods\": true\n  },\n  {\n    \"name\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Decoder\",\n    \"condition\": {\n      \"typeReachable\": \"io.grpc.netty.shaded.io.netty.handler.codec.base64.Base64Decoder\"\n    },\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build.yml"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 43,
                  "endLine": 111,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        uses: crazy-max/ghaction-import-gpg@v5\n        with:\n          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}\n          passphrase: ${{ secrets.PASSPHRASE }}\n\n      - name: Build Binaries\n",
                    "rendered": {
                      "text": "        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        uses: crazy-max/ghaction-import-gpg@v5\n        with:\n          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}\n          passphrase: ${{ secrets.PASSPHRASE }}\n\n      - name: Build Binaries\n",
                      "markdown": "`        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        uses: crazy-max/ghaction-import-gpg@v5\n        with:\n          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}\n          passphrase: ${{ secrets.PASSPHRASE }}\n\n      - name: Build Binaries\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build.yml"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 14,
                  "endLine": 111,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        uses: crazy-max/ghaction-import-gpg@v5\n        with:\n          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}\n          passphrase: ${{ secrets.PASSPHRASE }}\n\n      - name: Build Binaries\n",
                    "rendered": {
                      "text": "        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        uses: crazy-max/ghaction-import-gpg@v5\n        with:\n          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}\n          passphrase: ${{ secrets.PASSPHRASE }}\n\n      - name: Build Binaries\n",
                      "markdown": "`        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        uses: crazy-max/ghaction-import-gpg@v5\n        with:\n          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}\n          passphrase: ${{ secrets.PASSPHRASE }}\n\n      - name: Build Binaries\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build.yml"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 16,
                  "endLine": 130,
                  "endColumn": 20,
                  "snippet": {
                    "text": "          echo \"BucketKey: ${{ inputs.Bucket }} ${{ inputs.BucketKey }}\"\n          aws s3 cp build/bin s3://${{ inputs.Bucket }}/${{ inputs.BucketKey }} --recursive\n          aws s3 cp build/bin/linux/amd64/amazon-cloudwatch-agent.rpm s3://${{ inputs.Bucket }}/${{ inputs.BucketKey }}/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm\n          aws s3 cp build/bin/linux/arm64/amazon-cloudwatch-agent.rpm s3://${{ inputs.Bucket }}/${{ inputs.BucketKey }}/amazon_linux/arm64/latest/amazon-cloudwatch-agent.rpm\n",
                    "rendered": {
                      "text": "          echo \"BucketKey: ${{ inputs.Bucket }} ${{ inputs.BucketKey }}\"\n          aws s3 cp build/bin s3://${{ inputs.Bucket }}/${{ inputs.BucketKey }} --recursive\n          aws s3 cp build/bin/linux/amd64/amazon-cloudwatch-agent.rpm s3://${{ inputs.Bucket }}/${{ inputs.BucketKey }}/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm\n          aws s3 cp build/bin/linux/arm64/amazon-cloudwatch-agent.rpm s3://${{ inputs.Bucket }}/${{ inputs.BucketKey }}/amazon_linux/arm64/latest/amazon-cloudwatch-agent.rpm\n",
                      "markdown": "`          echo \"BucketKey: ${{ inputs.Bucket }} ${{ inputs.BucketKey }}\"\n          aws s3 cp build/bin s3://${{ inputs.Bucket }}/${{ inputs.BucketKey }} --recursive\n          aws s3 cp build/bin/linux/amd64/amazon-cloudwatch-agent.rpm s3://${{ inputs.Bucket }}/${{ inputs.BucketKey }}/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm\n          aws s3 cp build/bin/linux/arm64/amazon-cloudwatch-agent.rpm s3://${{ inputs.Bucket }}/${{ inputs.BucketKey }}/amazon_linux/arm64/latest/amazon-cloudwatch-agent.rpm\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build.yml"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 16,
                  "endLine": 129,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        run: |\n          echo \"BucketKey: ${{ inputs.Bucket }} ${{ inputs.BucketKey }}\"\n          aws s3 cp build/bin s3://${{ inputs.Bucket }}/${{ inputs.BucketKey }} --recursive\n          aws s3 cp build/bin/linux/amd64/amazon-cloudwatch-agent.rpm s3://${{ inputs.Bucket }}/${{ inputs.BucketKey }}/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm\n          aws s3 cp build/bin/linux/arm64/amazon-cloudwatch-agent.rpm s3://${{ inputs.Bucket }}/${{ inputs.BucketKey }}/amazon_linux/arm64/latest/amazon-cloudwatch-agent.rpm\n",
                    "rendered": {
                      "text": "        run: |\n          echo \"BucketKey: ${{ inputs.Bucket }} ${{ inputs.BucketKey }}\"\n          aws s3 cp build/bin s3://${{ inputs.Bucket }}/${{ inputs.BucketKey }} --recursive\n          aws s3 cp build/bin/linux/amd64/amazon-cloudwatch-agent.rpm s3://${{ inputs.Bucket }}/${{ inputs.BucketKey }}/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm\n          aws s3 cp build/bin/linux/arm64/amazon-cloudwatch-agent.rpm s3://${{ inputs.Bucket }}/${{ inputs.BucketKey }}/amazon_linux/arm64/latest/amazon-cloudwatch-agent.rpm\n",
                      "markdown": "`        run: |\n          echo \"BucketKey: ${{ inputs.Bucket }} ${{ inputs.BucketKey }}\"\n          aws s3 cp build/bin s3://${{ inputs.Bucket }}/${{ inputs.BucketKey }} --recursive\n          aws s3 cp build/bin/linux/amd64/amazon-cloudwatch-agent.rpm s3://${{ inputs.Bucket }}/${{ inputs.BucketKey }}/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm\n          aws s3 cp build/bin/linux/arm64/amazon-cloudwatch-agent.rpm s3://${{ inputs.Bucket }}/${{ inputs.BucketKey }}/amazon_linux/arm64/latest/amazon-cloudwatch-agent.rpm\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build.yml"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 16,
                  "endLine": 128,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        # Copy the RPM to .../amazon_linux/... because BETA customers expect it there.\n        run: |\n          echo \"BucketKey: ${{ inputs.Bucket }} ${{ inputs.BucketKey }}\"\n          aws s3 cp build/bin s3://${{ inputs.Bucket }}/${{ inputs.BucketKey }} --recursive\n          aws s3 cp build/bin/linux/amd64/amazon-cloudwatch-agent.rpm s3://${{ inputs.Bucket }}/${{ inputs.BucketKey }}/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm\n          aws s3 cp build/bin/linux/arm64/amazon-cloud",
                    "rendered": {
                      "text": "\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        # Copy the RPM to .../amazon_linux/... because BETA customers expect it there.\n        run: |\n          echo \"BucketKey: ${{ inputs.Bucket }} ${{ inputs.BucketKey }}\"\n          aws s3 cp build/bin s3://${{ inputs.Bucket }}/${{ inputs.BucketKey }} --recursive\n          aws s3 cp build/bin/linux/amd64/amazon-cloudwatch-agent.rpm s3://${{ inputs.Bucket }}/${{ inputs.BucketKey }}/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm\n          aws s3 cp build/bin/linux/arm64/amazon-cloud",
                      "markdown": "`\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        # Copy the RPM to .../amazon_linux/... because BETA customers expect it there.\n        run: |\n          echo \"BucketKey: ${{ inputs.Bucket }} ${{ inputs.BucketKey }}\"\n          aws s3 cp build/bin s3://${{ inputs.Bucket }}/${{ inputs.BucketKey }} --recursive\n          aws s3 cp build/bin/linux/amd64/amazon-cloudwatch-agent.rpm s3://${{ inputs.Bucket }}/${{ inputs.BucketKey }}/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm\n          aws s3 cp build/bin/linux/arm64/amazon-cloud`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build.yml"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 69,
                  "endLine": 125,
                  "endColumn": 77,
                  "snippet": {
                    "text": "\n      - name: Upload to s3\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        # Copy the RPM to .../amazon_linux/... because BETA customers expect it there.\n        run: |\n          echo \"BucketKey: ${{ inputs.Bucket }} ${{ inputs.BucketKey }}\"\n          aws s3 cp build/bin s3://${{ inputs.Bucket }}/${{ inputs.BucketKey }} --recursive\n",
                    "rendered": {
                      "text": "\n      - name: Upload to s3\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        # Copy the RPM to .../amazon_linux/... because BETA customers expect it there.\n        run: |\n          echo \"BucketKey: ${{ inputs.Bucket }} ${{ inputs.BucketKey }}\"\n          aws s3 cp build/bin s3://${{ inputs.Bucket }}/${{ inputs.BucketKey }} --recursive\n",
                      "markdown": "`\n      - name: Upload to s3\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        # Copy the RPM to .../amazon_linux/... because BETA customers expect it there.\n        run: |\n          echo \"BucketKey: ${{ inputs.Bucket }} ${{ inputs.BucketKey }}\"\n          aws s3 cp build/bin s3://${{ inputs.Bucket }}/${{ inputs.BucketKey }} --recursive\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build.yml"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 18,
                  "endLine": 125,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n      - name: Upload to s3\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        # Copy the RPM to .../amazon_linux/... because BETA customers expect it there.\n        run: |\n          echo \"BucketKey: ${{ inputs.Bucket }} ${{ inputs.BucketKey }}\"\n          aws s3 cp build/bin s3://${{ inputs.Bucket }}/${{ inputs.BucketKey }} --recursive\n",
                    "rendered": {
                      "text": "\n      - name: Upload to s3\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        # Copy the RPM to .../amazon_linux/... because BETA customers expect it there.\n        run: |\n          echo \"BucketKey: ${{ inputs.Bucket }} ${{ inputs.BucketKey }}\"\n          aws s3 cp build/bin s3://${{ inputs.Bucket }}/${{ inputs.BucketKey }} --recursive\n",
                      "markdown": "`\n      - name: Upload to s3\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        # Copy the RPM to .../amazon_linux/... because BETA customers expect it there.\n        run: |\n          echo \"BucketKey: ${{ inputs.Bucket }} ${{ inputs.BucketKey }}\"\n          aws s3 cp build/bin s3://${{ inputs.Bucket }}/${{ inputs.BucketKey }} --recursive\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build.yml"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 29,
                  "endLine": 83,
                  "snippet": {
                    "text": "          cache: false\n\n      - name: Install rpm\n        run: sudo apt install rpm\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n        with:\n",
                    "rendered": {
                      "text": "          cache: false\n\n      - name: Install rpm\n        run: sudo apt install rpm\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n        with:\n",
                      "markdown": "`          cache: false\n\n      - name: Install rpm\n        run: sudo apt install rpm\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n        with:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build.yml"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 17,
                  "endLine": 82,
                  "endColumn": 22,
                  "snippet": {
                    "text": "          cache: false\n\n      - name: Install rpm\n        run: sudo apt install rpm\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                    "rendered": {
                      "text": "          cache: false\n\n      - name: Install rpm\n        run: sudo apt install rpm\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                      "markdown": "`          cache: false\n\n      - name: Install rpm\n        run: sudo apt install rpm\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build.yml"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 21,
                  "endLine": 82,
                  "snippet": {
                    "text": "          go-version: ~1.22.2\n          cache: false\n\n      - name: Install rpm\n        run: sudo apt install rpm\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                    "rendered": {
                      "text": "          go-version: ~1.22.2\n          cache: false\n\n      - name: Install rpm\n        run: sudo apt install rpm\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                      "markdown": "`          go-version: ~1.22.2\n          cache: false\n\n      - name: Install rpm\n        run: sudo apt install rpm\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 1233,
                  "startColumn": 36,
                  "endLine": 1233,
                  "endColumn": 47,
                  "snippet": {
                    "text": "            cd terraform/stress\n            terraform init\n            if terraform apply --auto-approve \\\n              -var=\"ssh_key_value=${PRIVATE_KEY}\"  \\\n              -var=\"cwa_github_sha=${GITHUB_SHA}\" \\\n              -var=\"ami=${{ matrix.arrays.ami }}\" \\\n              -var=\"arc=${{ matrix.arrays.arc }}\" \\\n",
                    "rendered": {
                      "text": "            cd terraform/stress\n            terraform init\n            if terraform apply --auto-approve \\\n              -var=\"ssh_key_value=${PRIVATE_KEY}\"  \\\n              -var=\"cwa_github_sha=${GITHUB_SHA}\" \\\n              -var=\"ami=${{ matrix.arrays.ami }}\" \\\n              -var=\"arc=${{ matrix.arrays.arc }}\" \\\n",
                      "markdown": "`            cd terraform/stress\n            terraform init\n            if terraform apply --auto-approve \\\n              -var=\"ssh_key_value=${PRIVATE_KEY}\"  \\\n              -var=\"cwa_github_sha=${GITHUB_SHA}\" \\\n              -var=\"ami=${{ matrix.arrays.ami }}\" \\\n              -var=\"arc=${{ matrix.arrays.arc }}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 1163,
                  "startColumn": 36,
                  "endLine": 1163,
                  "endColumn": 47,
                  "snippet": {
                    "text": "            cd terraform/stress\n            terraform init\n            if terraform apply --auto-approve \\\n              -var=\"ssh_key_value=${PRIVATE_KEY}\"  \\\n              -var=\"cwa_github_sha=${GITHUB_SHA}\" \\\n              -var=\"ami=${{ matrix.arrays.ami }}\" \\\n              -var=\"arc=${{ matrix.arrays.arc }}\" \\\n",
                    "rendered": {
                      "text": "            cd terraform/stress\n            terraform init\n            if terraform apply --auto-approve \\\n              -var=\"ssh_key_value=${PRIVATE_KEY}\"  \\\n              -var=\"cwa_github_sha=${GITHUB_SHA}\" \\\n              -var=\"ami=${{ matrix.arrays.ami }}\" \\\n              -var=\"arc=${{ matrix.arrays.arc }}\" \\\n",
                      "markdown": "`            cd terraform/stress\n            terraform init\n            if terraform apply --auto-approve \\\n              -var=\"ssh_key_value=${PRIVATE_KEY}\"  \\\n              -var=\"cwa_github_sha=${GITHUB_SHA}\" \\\n              -var=\"ami=${{ matrix.arrays.ami }}\" \\\n              -var=\"arc=${{ matrix.arrays.arc }}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 1092,
                  "startColumn": 36,
                  "endLine": 1092,
                  "endColumn": 47,
                  "snippet": {
                    "text": "            cd terraform/performance\n            terraform init\n            if terraform apply --auto-approve \\\n              -var=\"ssh_key_value=${PRIVATE_KEY}\"  \\\n              -var=\"cwa_github_sha=${GITHUB_SHA}\" \\\n              -var=\"ami=${{ matrix.arrays.ami }}\" \\\n              -var=\"arc=${{ matrix.arrays.arc }}\" \\\n",
                    "rendered": {
                      "text": "            cd terraform/performance\n            terraform init\n            if terraform apply --auto-approve \\\n              -var=\"ssh_key_value=${PRIVATE_KEY}\"  \\\n              -var=\"cwa_github_sha=${GITHUB_SHA}\" \\\n              -var=\"ami=${{ matrix.arrays.ami }}\" \\\n              -var=\"arc=${{ matrix.arrays.arc }}\" \\\n",
                      "markdown": "`            cd terraform/performance\n            terraform init\n            if terraform apply --auto-approve \\\n              -var=\"ssh_key_value=${PRIVATE_KEY}\"  \\\n              -var=\"cwa_github_sha=${GITHUB_SHA}\" \\\n              -var=\"ami=${{ matrix.arrays.ami }}\" \\\n              -var=\"arc=${{ matrix.arrays.arc }}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 1024,
                  "startColumn": 36,
                  "endLine": 1024,
                  "endColumn": 47,
                  "snippet": {
                    "text": "            cd terraform/performance\n            terraform init\n            if terraform apply --auto-approve \\\n              -var=\"ssh_key_value=${PRIVATE_KEY}\"  \\\n              -var=\"cwa_github_sha=${GITHUB_SHA}\" \\\n              -var=\"ami=${{ matrix.arrays.ami }}\" \\\n              -var=\"arc=${{ matrix.arrays.arc }}\" \\\n",
                    "rendered": {
                      "text": "            cd terraform/performance\n            terraform init\n            if terraform apply --auto-approve \\\n              -var=\"ssh_key_value=${PRIVATE_KEY}\"  \\\n              -var=\"cwa_github_sha=${GITHUB_SHA}\" \\\n              -var=\"ami=${{ matrix.arrays.ami }}\" \\\n              -var=\"arc=${{ matrix.arrays.arc }}\" \\\n",
                      "markdown": "`            cd terraform/performance\n            terraform init\n            if terraform apply --auto-approve \\\n              -var=\"ssh_key_value=${PRIVATE_KEY}\"  \\\n              -var=\"cwa_github_sha=${GITHUB_SHA}\" \\\n              -var=\"ami=${{ matrix.arrays.ami }}\" \\\n              -var=\"arc=${{ matrix.arrays.arc }}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 576,
                  "startColumn": 34,
                  "endLine": 576,
                  "endColumn": 45,
                  "snippet": {
                    "text": "            fi\n            terraform init\n            if terraform apply --auto-approve \\\n            -var=\"ssh_key_value=${PRIVATE_KEY}\" -var=\"ssh_key_name=${KEY_NAME}\"  \\\n            -var=\"arc=${{ matrix.arrays.arc }}\" \\\n            -var=\"ec2_instance_type=${{ matrix.arrays.instanceType }}\" \\\n            -var=\"cwa_github_sha=${GITHUB_SHA}\" -var=\"ami=${{ matrix.arrays.ami }}\" \\\n",
                    "rendered": {
                      "text": "            fi\n            terraform init\n            if terraform apply --auto-approve \\\n            -var=\"ssh_key_value=${PRIVATE_KEY}\" -var=\"ssh_key_name=${KEY_NAME}\"  \\\n            -var=\"arc=${{ matrix.arrays.arc }}\" \\\n            -var=\"ec2_instance_type=${{ matrix.arrays.instanceType }}\" \\\n            -var=\"cwa_github_sha=${GITHUB_SHA}\" -var=\"ami=${{ matrix.arrays.ami }}\" \\\n",
                      "markdown": "`            fi\n            terraform init\n            if terraform apply --auto-approve \\\n            -var=\"ssh_key_value=${PRIVATE_KEY}\" -var=\"ssh_key_name=${KEY_NAME}\"  \\\n            -var=\"arc=${{ matrix.arrays.arc }}\" \\\n            -var=\"ec2_instance_type=${{ matrix.arrays.instanceType }}\" \\\n            -var=\"cwa_github_sha=${GITHUB_SHA}\" -var=\"ami=${{ matrix.arrays.ami }}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 495,
                  "startColumn": 34,
                  "endLine": 495,
                  "endColumn": 45,
                  "snippet": {
                    "text": "            terraform init\n            if terraform apply --auto-approve \\\n            -var=\"ec2_instance_type=${{ matrix.arrays.instanceType }}\" \\\n            -var=\"ssh_key_value=${PRIVATE_KEY}\" -var=\"ssh_key_name=${KEY_NAME}\"  \\\n            -var=\"test_name=${{ matrix.arrays.os }}\" \\\n            -var=\"cwa_github_sha=${GITHUB_SHA}\"  \\\n            -var=\"test_dir=${{ matrix.arrays.test_dir }}\" \\\n",
                    "rendered": {
                      "text": "            terraform init\n            if terraform apply --auto-approve \\\n            -var=\"ec2_instance_type=${{ matrix.arrays.instanceType }}\" \\\n            -var=\"ssh_key_value=${PRIVATE_KEY}\" -var=\"ssh_key_name=${KEY_NAME}\"  \\\n            -var=\"test_name=${{ matrix.arrays.os }}\" \\\n            -var=\"cwa_github_sha=${GITHUB_SHA}\"  \\\n            -var=\"test_dir=${{ matrix.arrays.test_dir }}\" \\\n",
                      "markdown": "`            terraform init\n            if terraform apply --auto-approve \\\n            -var=\"ec2_instance_type=${{ matrix.arrays.instanceType }}\" \\\n            -var=\"ssh_key_value=${PRIVATE_KEY}\" -var=\"ssh_key_name=${KEY_NAME}\"  \\\n            -var=\"test_name=${{ matrix.arrays.os }}\" \\\n            -var=\"cwa_github_sha=${GITHUB_SHA}\"  \\\n            -var=\"test_dir=${{ matrix.arrays.test_dir }}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 309,
                  "startColumn": 36,
                  "endLine": 309,
                  "endColumn": 47,
                  "snippet": {
                    "text": "            fi\n            terraform init\n            if terraform apply --auto-approve \\\n              -var=\"ssh_key_value=${PRIVATE_KEY}\" -var=\"ssh_key_name=${KEY_NAME}\" \\\n              -var=\"github_repo=${{env.CWA_GITHUB_TEST_REPO_URL}}\" \\\n              -var=\"cwa_github_sha=${GITHUB_SHA}\" -var=\"ami=${{ matrix.arrays.ami }}\" \\\n              -var=\"test_dir=${{ matrix.arrays.test_dir }}\" \\\n",
                    "rendered": {
                      "text": "            fi\n            terraform init\n            if terraform apply --auto-approve \\\n              -var=\"ssh_key_value=${PRIVATE_KEY}\" -var=\"ssh_key_name=${KEY_NAME}\" \\\n              -var=\"github_repo=${{env.CWA_GITHUB_TEST_REPO_URL}}\" \\\n              -var=\"cwa_github_sha=${GITHUB_SHA}\" -var=\"ami=${{ matrix.arrays.ami }}\" \\\n              -var=\"test_dir=${{ matrix.arrays.test_dir }}\" \\\n",
                      "markdown": "`            fi\n            terraform init\n            if terraform apply --auto-approve \\\n              -var=\"ssh_key_value=${PRIVATE_KEY}\" -var=\"ssh_key_name=${KEY_NAME}\" \\\n              -var=\"github_repo=${{env.CWA_GITHUB_TEST_REPO_URL}}\" \\\n              -var=\"cwa_github_sha=${GITHUB_SHA}\" -var=\"ami=${{ matrix.arrays.ami }}\" \\\n              -var=\"test_dir=${{ matrix.arrays.test_dir }}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 36,
                  "endLine": 277,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n            terraform init\n            if terraform apply --auto-approve \\\n              -var=\"ssh_key_value=${PRIVATE_KEY}\" -var=\"github_test_repo=${{env.CWA_GITHUB_TEST_REPO_URL}}\" \\\n              -var=\"test_name=${{ matrix.arrays.os }}\" \\\n              -var=\"cwa_github_sha=${GITHUB_SHA}\" -var=\"install_agent=${{ matrix.arrays.installAgentCommand }}\" \\\n              -var=\"github_test_repo_branch=${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\" \\\n",
                    "rendered": {
                      "text": "\n            terraform init\n            if terraform apply --auto-approve \\\n              -var=\"ssh_key_value=${PRIVATE_KEY}\" -var=\"github_test_repo=${{env.CWA_GITHUB_TEST_REPO_URL}}\" \\\n              -var=\"test_name=${{ matrix.arrays.os }}\" \\\n              -var=\"cwa_github_sha=${GITHUB_SHA}\" -var=\"install_agent=${{ matrix.arrays.installAgentCommand }}\" \\\n              -var=\"github_test_repo_branch=${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\" \\\n",
                      "markdown": "`\n            terraform init\n            if terraform apply --auto-approve \\\n              -var=\"ssh_key_value=${PRIVATE_KEY}\" -var=\"github_test_repo=${{env.CWA_GITHUB_TEST_REPO_URL}}\" \\\n              -var=\"test_name=${{ matrix.arrays.os }}\" \\\n              -var=\"cwa_github_sha=${GITHUB_SHA}\" -var=\"install_agent=${{ matrix.arrays.installAgentCommand }}\" \\\n              -var=\"github_test_repo_branch=${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 31,
                  "endLine": 6,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\nname: Run Integration Tests\nenv:\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}\n  TERRAFORM_AWS_ASSUME_ROLE: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE }}\n  TERRAFORM_AWS_ASSUME_ROLE_DURATION: 14400 # 4 hours\n  S3_INTEGRATION_BUCKET: ${{ vars.S3_INTEGRATION_BUCKET }}\n",
                    "rendered": {
                      "text": "\nname: Run Integration Tests\nenv:\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}\n  TERRAFORM_AWS_ASSUME_ROLE: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE }}\n  TERRAFORM_AWS_ASSUME_ROLE_DURATION: 14400 # 4 hours\n  S3_INTEGRATION_BUCKET: ${{ vars.S3_INTEGRATION_BUCKET }}\n",
                      "markdown": "`\nname: Run Integration Tests\nenv:\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}\n  TERRAFORM_AWS_ASSUME_ROLE: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE }}\n  TERRAFORM_AWS_ASSUME_ROLE_DURATION: 14400 # 4 hours\n  S3_INTEGRATION_BUCKET: ${{ vars.S3_INTEGRATION_BUCKET }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 2,
                  "endLine": 6,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\nname: Run Integration Tests\nenv:\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}\n  TERRAFORM_AWS_ASSUME_ROLE: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE }}\n  TERRAFORM_AWS_ASSUME_ROLE_DURATION: 14400 # 4 hours\n  S3_INTEGRATION_BUCKET: ${{ vars.S3_INTEGRATION_BUCKET }}\n",
                    "rendered": {
                      "text": "\nname: Run Integration Tests\nenv:\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}\n  TERRAFORM_AWS_ASSUME_ROLE: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE }}\n  TERRAFORM_AWS_ASSUME_ROLE_DURATION: 14400 # 4 hours\n  S3_INTEGRATION_BUCKET: ${{ vars.S3_INTEGRATION_BUCKET }}\n",
                      "markdown": "`\nname: Run Integration Tests\nenv:\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}\n  TERRAFORM_AWS_ASSUME_ROLE: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE }}\n  TERRAFORM_AWS_ASSUME_ROLE_DURATION: 14400 # 4 hours\n  S3_INTEGRATION_BUCKET: ${{ vars.S3_INTEGRATION_BUCKET }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 1270,
                  "startColumn": 18,
                  "endLine": 1270,
                  "endColumn": 48,
                  "snippet": {
                    "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                    "rendered": {
                      "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                      "markdown": "`      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 1199,
                  "startColumn": 18,
                  "endLine": 1199,
                  "endColumn": 48,
                  "snippet": {
                    "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                    "rendered": {
                      "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                      "markdown": "`      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 1129,
                  "startColumn": 18,
                  "endLine": 1129,
                  "endColumn": 48,
                  "snippet": {
                    "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                    "rendered": {
                      "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                      "markdown": "`      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 1061,
                  "startColumn": 18,
                  "endLine": 1061,
                  "endColumn": 48,
                  "snippet": {
                    "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                    "rendered": {
                      "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                      "markdown": "`      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 993,
                  "startColumn": 18,
                  "endLine": 993,
                  "endColumn": 48,
                  "snippet": {
                    "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                    "rendered": {
                      "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                      "markdown": "`      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 913,
                  "startColumn": 18,
                  "endLine": 913,
                  "endColumn": 48,
                  "snippet": {
                    "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                    "rendered": {
                      "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                      "markdown": "`      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 831,
                  "startColumn": 18,
                  "endLine": 831,
                  "endColumn": 48,
                  "snippet": {
                    "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                    "rendered": {
                      "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                      "markdown": "`      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 753,
                  "startColumn": 18,
                  "endLine": 753,
                  "endColumn": 48,
                  "snippet": {
                    "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                    "rendered": {
                      "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                      "markdown": "`      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 670,
                  "startColumn": 18,
                  "endLine": 670,
                  "endColumn": 48,
                  "snippet": {
                    "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                    "rendered": {
                      "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                      "markdown": "`      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 650,
                  "startColumn": 40,
                  "endLine": 650,
                  "endColumn": 87,
                  "snippet": {
                    "text": "    with:\n      region: cn-north-1\n      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}\n      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}\n      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE_CN }}\n      github_sha: ${{github.sha}}\n      s3_integration_bucket: ${{ vars.S3_INTEGRATION_BUCKET_CN }}\n",
                    "rendered": {
                      "text": "    with:\n      region: cn-north-1\n      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}\n      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}\n      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE_CN }}\n      github_sha: ${{github.sha}}\n      s3_integration_bucket: ${{ vars.S3_INTEGRATION_BUCKET_CN }}\n",
                      "markdown": "`    with:\n      region: cn-north-1\n      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}\n      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}\n      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE_CN }}\n      github_sha: ${{github.sha}}\n      s3_integration_bucket: ${{ vars.S3_INTEGRATION_BUCKET_CN }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 633,
                  "startColumn": 40,
                  "endLine": 633,
                  "endColumn": 87,
                  "snippet": {
                    "text": "    with:\n      region: us-gov-east-1\n      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}\n      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}\n      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE_ITAR }}\n      github_sha: ${{github.sha}}\n      s3_integration_bucket: ${{ vars.S3_INTEGRATION_BUCKET_ITAR }}\n",
                    "rendered": {
                      "text": "    with:\n      region: us-gov-east-1\n      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}\n      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}\n      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE_ITAR }}\n      github_sha: ${{github.sha}}\n      s3_integration_bucket: ${{ vars.S3_INTEGRATION_BUCKET_ITAR }}\n",
                      "markdown": "`    with:\n      region: us-gov-east-1\n      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}\n      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}\n      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE_ITAR }}\n      github_sha: ${{github.sha}}\n      s3_integration_bucket: ${{ vars.S3_INTEGRATION_BUCKET_ITAR }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 616,
                  "startColumn": 40,
                  "endLine": 616,
                  "endColumn": 87,
                  "snippet": {
                    "text": "    with:\n      region: us-west-2\n      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}\n      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}\n      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE }}\n      github_sha: ${{github.sha}}\n      s3_integration_bucket: ${{ vars.S3_INTEGRATION_BUCKET }}\n",
                    "rendered": {
                      "text": "    with:\n      region: us-west-2\n      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}\n      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}\n      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE }}\n      github_sha: ${{github.sha}}\n      s3_integration_bucket: ${{ vars.S3_INTEGRATION_BUCKET }}\n",
                      "markdown": "`    with:\n      region: us-west-2\n      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}\n      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}\n      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE }}\n      github_sha: ${{github.sha}}\n      s3_integration_bucket: ${{ vars.S3_INTEGRATION_BUCKET }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 538,
                  "startColumn": 18,
                  "endLine": 538,
                  "endColumn": 48,
                  "snippet": {
                    "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                    "rendered": {
                      "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                      "markdown": "`      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 456,
                  "startColumn": 18,
                  "endLine": 456,
                  "endColumn": 48,
                  "snippet": {
                    "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                    "rendered": {
                      "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                      "markdown": "`      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 436,
                  "startColumn": 40,
                  "endLine": 436,
                  "endColumn": 87,
                  "snippet": {
                    "text": "      test_props: ${{needs.GenerateTestMatrix.outputs.ec2_linux_onprem_matrix}}\n      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}\n      test_repo_url: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_URL }}\n      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}\n      localstack_host: ${{needs.StartLocalStack.outputs.local_stack_host_name}}\n      region: us-west-2\n    secrets: inherit\n",
                    "rendered": {
                      "text": "      test_props: ${{needs.GenerateTestMatrix.outputs.ec2_linux_onprem_matrix}}\n      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}\n      test_repo_url: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_URL }}\n      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}\n      localstack_host: ${{needs.StartLocalStack.outputs.local_stack_host_name}}\n      region: us-west-2\n    secrets: inherit\n",
                      "markdown": "`      test_props: ${{needs.GenerateTestMatrix.outputs.ec2_linux_onprem_matrix}}\n      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}\n      test_repo_url: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_URL }}\n      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}\n      localstack_host: ${{needs.StartLocalStack.outputs.local_stack_host_name}}\n      region: us-west-2\n    secrets: inherit\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 417,
                  "startColumn": 40,
                  "endLine": 417,
                  "endColumn": 87,
                  "snippet": {
                    "text": "      test_props: ${{needs.GenerateTestMatrix.outputs.ec2_linux_china_matrix}}\n      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}\n      test_repo_url: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_URL }}\n      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}\n      localstack_host: ${{needs.StartLocalStackCN.outputs.local_stack_host_name}}\n      region: cn-north-1\n      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE_CN }}\n",
                    "rendered": {
                      "text": "      test_props: ${{needs.GenerateTestMatrix.outputs.ec2_linux_china_matrix}}\n      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}\n      test_repo_url: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_URL }}\n      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}\n      localstack_host: ${{needs.StartLocalStackCN.outputs.local_stack_host_name}}\n      region: cn-north-1\n      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE_CN }}\n",
                      "markdown": "`      test_props: ${{needs.GenerateTestMatrix.outputs.ec2_linux_china_matrix}}\n      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}\n      test_repo_url: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_URL }}\n      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}\n      localstack_host: ${{needs.StartLocalStackCN.outputs.local_stack_host_name}}\n      region: cn-north-1\n      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE_CN }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 399,
                  "startColumn": 40,
                  "endLine": 399,
                  "endColumn": 87,
                  "snippet": {
                    "text": "      test_props: ${{needs.GenerateTestMatrix.outputs.ec2_linux_itar_matrix}}\n      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}\n      test_repo_url: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_URL }}\n      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}\n      localstack_host: ${{needs.StartLocalStackITAR.outputs.local_stack_host_name}}\n      region: us-gov-east-1\n      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE_ITAR }}\n",
                    "rendered": {
                      "text": "      test_props: ${{needs.GenerateTestMatrix.outputs.ec2_linux_itar_matrix}}\n      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}\n      test_repo_url: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_URL }}\n      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}\n      localstack_host: ${{needs.StartLocalStackITAR.outputs.local_stack_host_name}}\n      region: us-gov-east-1\n      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE_ITAR }}\n",
                      "markdown": "`      test_props: ${{needs.GenerateTestMatrix.outputs.ec2_linux_itar_matrix}}\n      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}\n      test_repo_url: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_URL }}\n      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}\n      localstack_host: ${{needs.StartLocalStackITAR.outputs.local_stack_host_name}}\n      region: us-gov-east-1\n      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE_ITAR }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 381,
                  "startColumn": 40,
                  "endLine": 381,
                  "endColumn": 87,
                  "snippet": {
                    "text": "      test_props: ${{needs.GenerateTestMatrix.outputs.ec2_linux_matrix}}\n      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}\n      test_repo_url: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_URL }}\n      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}\n      localstack_host: ${{needs.StartLocalStack.outputs.local_stack_host_name}}\n      region: us-west-2\n      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE }}\n",
                    "rendered": {
                      "text": "      test_props: ${{needs.GenerateTestMatrix.outputs.ec2_linux_matrix}}\n      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}\n      test_repo_url: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_URL }}\n      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}\n      localstack_host: ${{needs.StartLocalStack.outputs.local_stack_host_name}}\n      region: us-west-2\n      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE }}\n",
                      "markdown": "`      test_props: ${{needs.GenerateTestMatrix.outputs.ec2_linux_matrix}}\n      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}\n      test_repo_url: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_URL }}\n      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}\n      localstack_host: ${{needs.StartLocalStack.outputs.local_stack_host_name}}\n      region: us-west-2\n      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 362,
                  "startColumn": 67,
                  "endLine": 362,
                  "endColumn": 97,
                  "snippet": {
                    "text": "        run: |\n          echo \"::set-output name=CWA_GITHUB_TEST_REPO_NAME::${{ env.CWA_GITHUB_TEST_REPO_NAME }}\"\n          echo \"::set-output name=CWA_GITHUB_TEST_REPO_URL::${{ env.CWA_GITHUB_TEST_REPO_URL }}\"\n          echo \"::set-output name=CWA_GITHUB_TEST_REPO_BRANCH::${{ env.CWA_GITHUB_TEST_REPO_BRANCH }}\"\n\n      - name: Echo test variables\n        run: |\n",
                    "rendered": {
                      "text": "        run: |\n          echo \"::set-output name=CWA_GITHUB_TEST_REPO_NAME::${{ env.CWA_GITHUB_TEST_REPO_NAME }}\"\n          echo \"::set-output name=CWA_GITHUB_TEST_REPO_URL::${{ env.CWA_GITHUB_TEST_REPO_URL }}\"\n          echo \"::set-output name=CWA_GITHUB_TEST_REPO_BRANCH::${{ env.CWA_GITHUB_TEST_REPO_BRANCH }}\"\n\n      - name: Echo test variables\n        run: |\n",
                      "markdown": "`        run: |\n          echo \"::set-output name=CWA_GITHUB_TEST_REPO_NAME::${{ env.CWA_GITHUB_TEST_REPO_NAME }}\"\n          echo \"::set-output name=CWA_GITHUB_TEST_REPO_URL::${{ env.CWA_GITHUB_TEST_REPO_URL }}\"\n          echo \"::set-output name=CWA_GITHUB_TEST_REPO_BRANCH::${{ env.CWA_GITHUB_TEST_REPO_BRANCH }}\"\n\n      - name: Echo test variables\n        run: |\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 18,
                  "endLine": 350,
                  "endColumn": 48,
                  "snippet": {
                    "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Set up Go 1.x\n        uses: actions/setup-go@v4\n",
                    "rendered": {
                      "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Set up Go 1.x\n        uses: actions/setup-go@v4\n",
                      "markdown": "`      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Set up Go 1.x\n        uses: actions/setup-go@v4\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 47,
                  "endLine": 315,
                  "endColumn": 77,
                  "snippet": {
                    "text": "              -var=\"test_dir=${{ matrix.arrays.test_dir }}\" \\\n              -var=\"ec2_instance_type=${{ matrix.arrays.instanceType }}\" \\\n              -var=\"github_test_repo=${{env.CWA_GITHUB_TEST_REPO_URL}}\" \\\n              -var=\"github_test_repo_branch=${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\" \\\n              -var=\"s3_bucket=${S3_INTEGRATION_BUCKET}\" ; then terraform destroy -auto-approve\n            else\n              terraform destroy -auto-approve && exit 1\n",
                    "rendered": {
                      "text": "              -var=\"test_dir=${{ matrix.arrays.test_dir }}\" \\\n              -var=\"ec2_instance_type=${{ matrix.arrays.instanceType }}\" \\\n              -var=\"github_test_repo=${{env.CWA_GITHUB_TEST_REPO_URL}}\" \\\n              -var=\"github_test_repo_branch=${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\" \\\n              -var=\"s3_bucket=${S3_INTEGRATION_BUCKET}\" ; then terraform destroy -auto-approve\n            else\n              terraform destroy -auto-approve && exit 1\n",
                      "markdown": "`              -var=\"test_dir=${{ matrix.arrays.test_dir }}\" \\\n              -var=\"ec2_instance_type=${{ matrix.arrays.instanceType }}\" \\\n              -var=\"github_test_repo=${{env.CWA_GITHUB_TEST_REPO_URL}}\" \\\n              -var=\"github_test_repo_branch=${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\" \\\n              -var=\"s3_bucket=${S3_INTEGRATION_BUCKET}\" ; then terraform destroy -auto-approve\n            else\n              terraform destroy -auto-approve && exit 1\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 47,
                  "endLine": 280,
                  "endColumn": 77,
                  "snippet": {
                    "text": "              -var=\"ssh_key_value=${PRIVATE_KEY}\" -var=\"github_test_repo=${{env.CWA_GITHUB_TEST_REPO_URL}}\" \\\n              -var=\"test_name=${{ matrix.arrays.os }}\" \\\n              -var=\"cwa_github_sha=${GITHUB_SHA}\" -var=\"install_agent=${{ matrix.arrays.installAgentCommand }}\" \\\n              -var=\"github_test_repo_branch=${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\" \\\n              -var=\"ec2_instance_type=${{ matrix.arrays.instanceType }}\" \\\n              -var=\"user=${{ matrix.arrays.username }}\" \\\n              -var=\"ami=${{ matrix.arrays.ami }}\" \\\n",
                    "rendered": {
                      "text": "              -var=\"ssh_key_value=${PRIVATE_KEY}\" -var=\"github_test_repo=${{env.CWA_GITHUB_TEST_REPO_URL}}\" \\\n              -var=\"test_name=${{ matrix.arrays.os }}\" \\\n              -var=\"cwa_github_sha=${GITHUB_SHA}\" -var=\"install_agent=${{ matrix.arrays.installAgentCommand }}\" \\\n              -var=\"github_test_repo_branch=${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\" \\\n              -var=\"ec2_instance_type=${{ matrix.arrays.instanceType }}\" \\\n              -var=\"user=${{ matrix.arrays.username }}\" \\\n              -var=\"ami=${{ matrix.arrays.ami }}\" \\\n",
                      "markdown": "`              -var=\"ssh_key_value=${PRIVATE_KEY}\" -var=\"github_test_repo=${{env.CWA_GITHUB_TEST_REPO_URL}}\" \\\n              -var=\"test_name=${{ matrix.arrays.os }}\" \\\n              -var=\"cwa_github_sha=${GITHUB_SHA}\" -var=\"install_agent=${{ matrix.arrays.installAgentCommand }}\" \\\n              -var=\"github_test_repo_branch=${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\" \\\n              -var=\"ec2_instance_type=${{ matrix.arrays.instanceType }}\" \\\n              -var=\"user=${{ matrix.arrays.username }}\" \\\n              -var=\"ami=${{ matrix.arrays.ami }}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 18,
                  "endLine": 238,
                  "endColumn": 48,
                  "snippet": {
                    "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                    "rendered": {
                      "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                      "markdown": "`      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 40,
                  "endLine": 215,
                  "endColumn": 87,
                  "snippet": {
                    "text": "    with:\n      region: cn-north-1\n      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}\n      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}\n      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE_CN }}\n      test_repo_url: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_URL }}\n      github_sha: ${{github.sha}}\n",
                    "rendered": {
                      "text": "    with:\n      region: cn-north-1\n      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}\n      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}\n      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE_CN }}\n      test_repo_url: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_URL }}\n      github_sha: ${{github.sha}}\n",
                      "markdown": "`    with:\n      region: cn-north-1\n      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}\n      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}\n      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE_CN }}\n      test_repo_url: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_URL }}\n      github_sha: ${{github.sha}}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 40,
                  "endLine": 198,
                  "endColumn": 87,
                  "snippet": {
                    "text": "    with:\n      region: us-gov-east-1\n      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}\n      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}\n      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE_ITAR }}\n      test_repo_url: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_URL }}\n      github_sha: ${{github.sha}}\n",
                    "rendered": {
                      "text": "    with:\n      region: us-gov-east-1\n      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}\n      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}\n      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE_ITAR }}\n      test_repo_url: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_URL }}\n      github_sha: ${{github.sha}}\n",
                      "markdown": "`    with:\n      region: us-gov-east-1\n      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}\n      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}\n      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE_ITAR }}\n      test_repo_url: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_URL }}\n      github_sha: ${{github.sha}}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 40,
                  "endLine": 181,
                  "endColumn": 87,
                  "snippet": {
                    "text": "    with:\n      region: us-west-2\n      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}\n      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}\n      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE }}\n      test_repo_url: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_URL }}\n      github_sha: ${{github.sha}}\n",
                    "rendered": {
                      "text": "    with:\n      region: us-west-2\n      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}\n      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}\n      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE }}\n      test_repo_url: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_URL }}\n      github_sha: ${{github.sha}}\n",
                      "markdown": "`    with:\n      region: us-west-2\n      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}\n      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}\n      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE }}\n      test_repo_url: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_URL }}\n      github_sha: ${{github.sha}}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 18,
                  "endLine": 142,
                  "endColumn": 48,
                  "snippet": {
                    "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n          path: test\n\n      - name: Set up Go 1.x\n",
                    "rendered": {
                      "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n          path: test\n\n      - name: Set up Go 1.x\n",
                      "markdown": "`      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n          path: test\n\n      - name: Set up Go 1.x\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 18,
                  "endLine": 84,
                  "endColumn": 48,
                  "snippet": {
                    "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Set up Go 1.x\n        uses: actions/setup-go@v4\n",
                    "rendered": {
                      "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Set up Go 1.x\n        uses: actions/setup-go@v4\n",
                      "markdown": "`      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Set up Go 1.x\n        uses: actions/setup-go@v4\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 560,
                  "startColumn": 37,
                  "endLine": 560,
                  "endColumn": 41,
                  "snippet": {
                    "text": "      - name: Verify Terraform version\n        run: terraform --version\n\n        # nick-fields/retry@v2 starts at base dir\n      - name: Terraform apply\n        if: steps.ec2-mac-integration-test.outputs.cache-hit != 'true'\n        uses: nick-fields/retry@v2\n",
                    "rendered": {
                      "text": "      - name: Verify Terraform version\n        run: terraform --version\n\n        # nick-fields/retry@v2 starts at base dir\n      - name: Terraform apply\n        if: steps.ec2-mac-integration-test.outputs.cache-hit != 'true'\n        uses: nick-fields/retry@v2\n",
                      "markdown": "`      - name: Verify Terraform version\n        run: terraform --version\n\n        # nick-fields/retry@v2 starts at base dir\n      - name: Terraform apply\n        if: steps.ec2-mac-integration-test.outputs.cache-hit != 'true'\n        uses: nick-fields/retry@v2\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 478,
                  "startColumn": 37,
                  "endLine": 478,
                  "endColumn": 41,
                  "snippet": {
                    "text": "      - name: Verify Terraform version\n        run: terraform --version\n\n        # nick-fields/retry@v2 starts at base dir\n      - name: Terraform apply\n        if: steps.ec2-win-integration-test.outputs.cache-hit != 'true'\n        uses: nick-fields/retry@v2\n",
                    "rendered": {
                      "text": "      - name: Verify Terraform version\n        run: terraform --version\n\n        # nick-fields/retry@v2 starts at base dir\n      - name: Terraform apply\n        if: steps.ec2-win-integration-test.outputs.cache-hit != 'true'\n        uses: nick-fields/retry@v2\n",
                      "markdown": "`      - name: Verify Terraform version\n        run: terraform --version\n\n        # nick-fields/retry@v2 starts at base dir\n      - name: Terraform apply\n        if: steps.ec2-win-integration-test.outputs.cache-hit != 'true'\n        uses: nick-fields/retry@v2\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 35,
                  "endLine": 260,
                  "endColumn": 39,
                  "snippet": {
                    "text": "      - name: Verify Terraform version\n        run: terraform --version\n\n      # nick-fields/retry@v2 starts at base dir\n      - name: Terraform apply\n        if: ${{ matrix.arrays.family == 'linux' && steps.ec2-nvidia-integration-test.outputs.cache-hit != 'true' }}\n        uses: nick-fields/retry@v2\n",
                    "rendered": {
                      "text": "      - name: Verify Terraform version\n        run: terraform --version\n\n      # nick-fields/retry@v2 starts at base dir\n      - name: Terraform apply\n        if: ${{ matrix.arrays.family == 'linux' && steps.ec2-nvidia-integration-test.outputs.cache-hit != 'true' }}\n        uses: nick-fields/retry@v2\n",
                      "markdown": "`      - name: Verify Terraform version\n        run: terraform --version\n\n      # nick-fields/retry@v2 starts at base dir\n      - name: Terraform apply\n        if: ${{ matrix.arrays.family == 'linux' && steps.ec2-nvidia-integration-test.outputs.cache-hit != 'true' }}\n        uses: nick-fields/retry@v2\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 943,
                  "startColumn": 83,
                  "endLine": 943,
                  "endColumn": 92,
                  "snippet": {
                    "text": "        uses: nick-fields/retry@v2\n        with:\n          max_attempts: 3\n          timeout_minutes: 60 # EKS takes about 20 minutes to spin up a cluster and service on the cluster\n          retry_wait_seconds: 5\n          command: |\n            if [ \"${{ matrix.arrays.terraform_dir }}\" != \"\" ]; then\n",
                    "rendered": {
                      "text": "        uses: nick-fields/retry@v2\n        with:\n          max_attempts: 3\n          timeout_minutes: 60 # EKS takes about 20 minutes to spin up a cluster and service on the cluster\n          retry_wait_seconds: 5\n          command: |\n            if [ \"${{ matrix.arrays.terraform_dir }}\" != \"\" ]; then\n",
                      "markdown": "`        uses: nick-fields/retry@v2\n        with:\n          max_attempts: 3\n          timeout_minutes: 60 # EKS takes about 20 minutes to spin up a cluster and service on the cluster\n          retry_wait_seconds: 5\n          command: |\n            if [ \"${{ matrix.arrays.terraform_dir }}\" != \"\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/integration-test.yml"
                },
                "region": {
                  "startLine": 861,
                  "startColumn": 83,
                  "endLine": 861,
                  "endColumn": 92,
                  "snippet": {
                    "text": "        uses: nick-fields/retry@v2\n        with:\n          max_attempts: 2\n          timeout_minutes: 90 # EKS takes about 20 minutes to spin up a cluster and service on the cluster\n          retry_wait_seconds: 5\n          command: |\n            if [ \"${{ matrix.arrays.terraform_dir }}\" != \"\" ]; then\n",
                    "rendered": {
                      "text": "        uses: nick-fields/retry@v2\n        with:\n          max_attempts: 2\n          timeout_minutes: 90 # EKS takes about 20 minutes to spin up a cluster and service on the cluster\n          retry_wait_seconds: 5\n          command: |\n            if [ \"${{ matrix.arrays.terraform_dir }}\" != \"\" ]; then\n",
                      "markdown": "`        uses: nick-fields/retry@v2\n        with:\n          max_attempts: 2\n          timeout_minutes: 90 # EKS takes about 20 minutes to spin up a cluster and service on the cluster\n          retry_wait_seconds: 5\n          command: |\n            if [ \"${{ matrix.arrays.terraform_dir }}\" != \"\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/otel-fork-replace.yml"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 42,
                  "endLine": 24,
                  "endColumn": 80,
                  "snippet": {
                    "text": "        id: get-latest-commit\n        run: |\n          if [\"${{ inputs.CommitSha }}\" == \"\"]; then\n            echo \"sha=$(git ls-remote ${{ env.UPSTREAM }} ${{ env.UPSTREAM_BRANCH }} | awk '{print $1;}')\" >> $GITHUB_OUTPUT\n          else\n            echo \"sha=${{ inputs.CommitSha }}\" >> $GITHUB_OUTPUT\n          fi\n",
                    "rendered": {
                      "text": "        id: get-latest-commit\n        run: |\n          if [\"${{ inputs.CommitSha }}\" == \"\"]; then\n            echo \"sha=$(git ls-remote ${{ env.UPSTREAM }} ${{ env.UPSTREAM_BRANCH }} | awk '{print $1;}')\" >> $GITHUB_OUTPUT\n          else\n            echo \"sha=${{ inputs.CommitSha }}\" >> $GITHUB_OUTPUT\n          fi\n",
                      "markdown": "`        id: get-latest-commit\n        run: |\n          if [\"${{ inputs.CommitSha }}\" == \"\"]; then\n            echo \"sha=$(git ls-remote ${{ env.UPSTREAM }} ${{ env.UPSTREAM_BRANCH }} | awk '{print $1;}')\" >> $GITHUB_OUTPUT\n          else\n            echo \"sha=${{ inputs.CommitSha }}\" >> $GITHUB_OUTPUT\n          fi\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/otel-fork-replace.yml"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 30,
                  "endLine": 86,
                  "endColumn": 38,
                  "snippet": {
                    "text": "          pr_allow_empty: false\n          pr_body: |\n            # Description of the issue\n            An automated PR to update the OTel fork components to point to [${{ steps.get-latest-commit.outputs.sha }}](https://github.com/amazon-contributing/opentelemetry-collector-contrib/commit/${{ steps.get-latest-commit.outputs.sha }}).\n            \n            # License\n            By submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.\n",
                    "rendered": {
                      "text": "          pr_allow_empty: false\n          pr_body: |\n            # Description of the issue\n            An automated PR to update the OTel fork components to point to [${{ steps.get-latest-commit.outputs.sha }}](https://github.com/amazon-contributing/opentelemetry-collector-contrib/commit/${{ steps.get-latest-commit.outputs.sha }}).\n            \n            # License\n            By submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.\n",
                      "markdown": "`          pr_allow_empty: false\n          pr_body: |\n            # Description of the issue\n            An automated PR to update the OTel fork components to point to [${{ steps.get-latest-commit.outputs.sha }}](https://github.com/amazon-contributing/opentelemetry-collector-contrib/commit/${{ steps.get-latest-commit.outputs.sha }}).\n            \n            # License\n            By submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/otel-fork-replace.yml"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 13,
                  "endLine": 35,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        with:\n          go-version: ~1.22.2\n          cache: false\n      - name: Update OTel fork components version\n        id: set-matrix\n        run: |\n          git config --global user.name 'Github Action'\n",
                    "rendered": {
                      "text": "        with:\n          go-version: ~1.22.2\n          cache: false\n      - name: Update OTel fork components version\n        id: set-matrix\n        run: |\n          git config --global user.name 'Github Action'\n",
                      "markdown": "`        with:\n          go-version: ~1.22.2\n          cache: false\n      - name: Update OTel fork components version\n        id: set-matrix\n        run: |\n          git config --global user.name 'Github Action'\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/otel-fork-replace.yml"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 5,
                  "endLine": 1,
                  "endColumn": 13,
                  "snippet": {
                    "text": "name: Update OTel fork components version\n\nenv:\n  UPSTREAM: https://github.com/amazon-contributing/opentelemetry-collector-contrib.git\n",
                    "rendered": {
                      "text": "name: Update OTel fork components version\n\nenv:\n  UPSTREAM: https://github.com/amazon-contributing/opentelemetry-collector-contrib.git\n",
                      "markdown": "`name: Update OTel fork components version\n\nenv:\n  UPSTREAM: https://github.com/amazon-contributing/opentelemetry-collector-contrib.git\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/otel-fork-replace.yml"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 9,
                  "endLine": 76,
                  "endColumn": 14,
                  "snippet": {
                    "text": "          git commit -am \"Update OTel fork components to https://github.com/amazon-contributing/opentelemetry-collector-contrib/commit/${{ steps.get-latest-commit.outputs.sha }}\"\n          git push -u origin HEAD\n          git config --global --unset user.name\n          git config --global --unset user.email\n      - name: Create pull request\n        uses: repo-sync/pull-request@v2\n        with:\n",
                    "rendered": {
                      "text": "          git commit -am \"Update OTel fork components to https://github.com/amazon-contributing/opentelemetry-collector-contrib/commit/${{ steps.get-latest-commit.outputs.sha }}\"\n          git push -u origin HEAD\n          git config --global --unset user.name\n          git config --global --unset user.email\n      - name: Create pull request\n        uses: repo-sync/pull-request@v2\n        with:\n",
                      "markdown": "`          git commit -am \"Update OTel fork components to https://github.com/amazon-contributing/opentelemetry-collector-contrib/commit/${{ steps.get-latest-commit.outputs.sha }}\"\n          git push -u origin HEAD\n          git config --global --unset user.name\n          git config --global --unset user.email\n      - name: Create pull request\n        uses: repo-sync/pull-request@v2\n        with:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/otel-fork-replace.yml"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 9,
                  "endLine": 75,
                  "endColumn": 14,
                  "snippet": {
                    "text": "          go mod tidy\n          git commit -am \"Update OTel fork components to https://github.com/amazon-contributing/opentelemetry-collector-contrib/commit/${{ steps.get-latest-commit.outputs.sha }}\"\n          git push -u origin HEAD\n          git config --global --unset user.name\n          git config --global --unset user.email\n      - name: Create pull request\n        uses: repo-sync/pull-request@v2\n",
                    "rendered": {
                      "text": "          go mod tidy\n          git commit -am \"Update OTel fork components to https://github.com/amazon-contributing/opentelemetry-collector-contrib/commit/${{ steps.get-latest-commit.outputs.sha }}\"\n          git push -u origin HEAD\n          git config --global --unset user.name\n          git config --global --unset user.email\n      - name: Create pull request\n        uses: repo-sync/pull-request@v2\n",
                      "markdown": "`          go mod tidy\n          git commit -am \"Update OTel fork components to https://github.com/amazon-contributing/opentelemetry-collector-contrib/commit/${{ steps.get-latest-commit.outputs.sha }}\"\n          git push -u origin HEAD\n          git config --global --unset user.name\n          git config --global --unset user.email\n      - name: Create pull request\n        uses: repo-sync/pull-request@v2\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/otel-fork-replace.yml"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 28,
                  "endLine": 75,
                  "snippet": {
                    "text": "ollector-contrib/pkg/stanza@${{ steps.get-latest-commit.outputs.sha }}\n          go mod tidy\n          git commit -am \"Update OTel fork components to https://github.com/amazon-contributing/opentelemetry-collector-contrib/commit/${{ steps.get-latest-commit.outputs.sha }}\"\n          git push -u origin HEAD\n          git config --global --unset user.name\n          git config --global --unset user.email\n      - name: Create pull request\n        uses: repo-sync/pull-request@v2\n        with:\n          source_branch: otel-fork-replace-${{ steps.get-latest-commit.outputs.sha }}\n          destination_branch:",
                    "rendered": {
                      "text": "ollector-contrib/pkg/stanza@${{ steps.get-latest-commit.outputs.sha }}\n          go mod tidy\n          git commit -am \"Update OTel fork components to https://github.com/amazon-contributing/opentelemetry-collector-contrib/commit/${{ steps.get-latest-commit.outputs.sha }}\"\n          git push -u origin HEAD\n          git config --global --unset user.name\n          git config --global --unset user.email\n      - name: Create pull request\n        uses: repo-sync/pull-request@v2\n        with:\n          source_branch: otel-fork-replace-${{ steps.get-latest-commit.outputs.sha }}\n          destination_branch:",
                      "markdown": "`ollector-contrib/pkg/stanza@${{ steps.get-latest-commit.outputs.sha }}\n          go mod tidy\n          git commit -am \"Update OTel fork components to https://github.com/amazon-contributing/opentelemetry-collector-contrib/commit/${{ steps.get-latest-commit.outputs.sha }}\"\n          git push -u origin HEAD\n          git config --global --unset user.name\n          git config --global --unset user.email\n      - name: Create pull request\n        uses: repo-sync/pull-request@v2\n        with:\n          source_branch: otel-fork-replace-${{ steps.get-latest-commit.outputs.sha }}\n          destination_branch:`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/otel-fork-replace.yml"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 9,
                  "endLine": 74,
                  "endColumn": 14,
                  "snippet": {
                    "text": "          go mod edit -replace github.com/amazon-contributing/opentelemetry-collector-contrib/pkg/stanza=github.com/amazon-contributing/opentelemetry-collector-contrib/pkg/stanza@${{ steps.get-latest-commit.outputs.sha }}\n          go mod tidy\n          git commit -am \"Update OTel fork components to https://github.com/amazon-contributing/opentelemetry-collector-contrib/commit/${{ steps.get-latest-commit.outputs.sha }}\"\n          git push -u origin HEAD\n          git config --global --unset user.name\n          git config --global --unset user.email\n      - name: Create pull request\n",
                    "rendered": {
                      "text": "          go mod edit -replace github.com/amazon-contributing/opentelemetry-collector-contrib/pkg/stanza=github.com/amazon-contributing/opentelemetry-collector-contrib/pkg/stanza@${{ steps.get-latest-commit.outputs.sha }}\n          go mod tidy\n          git commit -am \"Update OTel fork components to https://github.com/amazon-contributing/opentelemetry-collector-contrib/commit/${{ steps.get-latest-commit.outputs.sha }}\"\n          git push -u origin HEAD\n          git config --global --unset user.name\n          git config --global --unset user.email\n      - name: Create pull request\n",
                      "markdown": "`          go mod edit -replace github.com/amazon-contributing/opentelemetry-collector-contrib/pkg/stanza=github.com/amazon-contributing/opentelemetry-collector-contrib/pkg/stanza@${{ steps.get-latest-commit.outputs.sha }}\n          go mod tidy\n          git commit -am \"Update OTel fork components to https://github.com/amazon-contributing/opentelemetry-collector-contrib/commit/${{ steps.get-latest-commit.outputs.sha }}\"\n          git push -u origin HEAD\n          git config --global --unset user.name\n          git config --global --unset user.email\n      - name: Create pull request\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/otel-fork-replace.yml"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 9,
                  "endLine": 73,
                  "endColumn": 14,
                  "snippet": {
                    "text": "          go mod tidy\n          go mod edit -replace github.com/amazon-contributing/opentelemetry-collector-contrib/pkg/stanza=github.com/amazon-contributing/opentelemetry-collector-contrib/pkg/stanza@${{ steps.get-latest-commit.outputs.sha }}\n          go mod tidy\n          git commit -am \"Update OTel fork components to https://github.com/amazon-contributing/opentelemetry-collector-contrib/commit/${{ steps.get-latest-commit.outputs.sha }}\"\n          git push -u origin HEAD\n          git config --global --unset user.name\n          git config --global --unset user.email\n",
                    "rendered": {
                      "text": "          go mod tidy\n          go mod edit -replace github.com/amazon-contributing/opentelemetry-collector-contrib/pkg/stanza=github.com/amazon-contributing/opentelemetry-collector-contrib/pkg/stanza@${{ steps.get-latest-commit.outputs.sha }}\n          go mod tidy\n          git commit -am \"Update OTel fork components to https://github.com/amazon-contributing/opentelemetry-collector-contrib/commit/${{ steps.get-latest-commit.outputs.sha }}\"\n          git push -u origin HEAD\n          git config --global --unset user.name\n          git config --global --unset user.email\n",
                      "markdown": "`          go mod tidy\n          go mod edit -replace github.com/amazon-contributing/opentelemetry-collector-contrib/pkg/stanza=github.com/amazon-contributing/opentelemetry-collector-contrib/pkg/stanza@${{ steps.get-latest-commit.outputs.sha }}\n          go mod tidy\n          git commit -am \"Update OTel fork components to https://github.com/amazon-contributing/opentelemetry-collector-contrib/commit/${{ steps.get-latest-commit.outputs.sha }}\"\n          git push -u origin HEAD\n          git config --global --unset user.name\n          git config --global --unset user.email\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/otel-fork-replace.yml"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 9,
                  "endLine": 40,
                  "endColumn": 14,
                  "snippet": {
                    "text": "ctions/setup-go@v4\n        with:\n          go-version: ~1.22.2\n          cache: false\n      - name: Update OTel fork components version\n        id: set-matrix\n        run: |\n          git config --global user.name 'Github Action'\n          git config --global user.email 'action@github.com'\n          git checkout -b otel-fork-replace-${{ steps.get-latest-commit.outputs.sha }}\n          go mod edit -replace go.opentelemetry.io/collector/config/confighttp=github.com/amazon-contributing/opentelemetry-collector-contrib/config/confighttp@${{ steps.get-latest-commit.outputs.sha }}\n          go mod tidy\n  ",
                    "rendered": {
                      "text": "ctions/setup-go@v4\n        with:\n          go-version: ~1.22.2\n          cache: false\n      - name: Update OTel fork components version\n        id: set-matrix\n        run: |\n          git config --global user.name 'Github Action'\n          git config --global user.email 'action@github.com'\n          git checkout -b otel-fork-replace-${{ steps.get-latest-commit.outputs.sha }}\n          go mod edit -replace go.opentelemetry.io/collector/config/confighttp=github.com/amazon-contributing/opentelemetry-collector-contrib/config/confighttp@${{ steps.get-latest-commit.outputs.sha }}\n          go mod tidy\n  ",
                      "markdown": "`ctions/setup-go@v4\n        with:\n          go-version: ~1.22.2\n          cache: false\n      - name: Update OTel fork components version\n        id: set-matrix\n        run: |\n          git config --global user.name 'Github Action'\n          git config --global user.email 'action@github.com'\n          git checkout -b otel-fork-replace-${{ steps.get-latest-commit.outputs.sha }}\n          go mod edit -replace go.opentelemetry.io/collector/config/confighttp=github.com/amazon-contributing/opentelemetry-collector-contrib/config/confighttp@${{ steps.get-latest-commit.outputs.sha }}\n          go mod tidy\n  `"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/otel-fork-replace.yml"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 9,
                  "endLine": 39,
                  "endColumn": 14,
                  "snippet": {
                    "text": "        id: set-matrix\n        run: |\n          git config --global user.name 'Github Action'\n          git config --global user.email 'action@github.com'\n          git checkout -b otel-fork-replace-${{ steps.get-latest-commit.outputs.sha }}\n          go mod edit -replace go.opentelemetry.io/collector/config/confighttp=github.com/amazon-contributing/opentelemetry-collector-contrib/config/confighttp@${{ steps.get-latest-commit.outputs.sha }}\n          go mod tidy\n",
                    "rendered": {
                      "text": "        id: set-matrix\n        run: |\n          git config --global user.name 'Github Action'\n          git config --global user.email 'action@github.com'\n          git checkout -b otel-fork-replace-${{ steps.get-latest-commit.outputs.sha }}\n          go mod edit -replace go.opentelemetry.io/collector/config/confighttp=github.com/amazon-contributing/opentelemetry-collector-contrib/config/confighttp@${{ steps.get-latest-commit.outputs.sha }}\n          go mod tidy\n",
                      "markdown": "`        id: set-matrix\n        run: |\n          git config --global user.name 'Github Action'\n          git config --global user.email 'action@github.com'\n          git checkout -b otel-fork-replace-${{ steps.get-latest-commit.outputs.sha }}\n          go mod edit -replace go.opentelemetry.io/collector/config/confighttp=github.com/amazon-contributing/opentelemetry-collector-contrib/config/confighttp@${{ steps.get-latest-commit.outputs.sha }}\n          go mod tidy\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/otel-fork-replace.yml"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 9,
                  "endLine": 38,
                  "endColumn": 14,
                  "snippet": {
                    "text": "      - name: Update OTel fork components version\n        id: set-matrix\n        run: |\n          git config --global user.name 'Github Action'\n          git config --global user.email 'action@github.com'\n          git checkout -b otel-fork-replace-${{ steps.get-latest-commit.outputs.sha }}\n          go mod edit -replace go.opentelemetry.io/collector/config/confighttp=github.com/amazon-contributing/opentelemetry-collector-contrib/config/confighttp@${{ steps.get-latest-commit.outputs.sha }}\n",
                    "rendered": {
                      "text": "      - name: Update OTel fork components version\n        id: set-matrix\n        run: |\n          git config --global user.name 'Github Action'\n          git config --global user.email 'action@github.com'\n          git checkout -b otel-fork-replace-${{ steps.get-latest-commit.outputs.sha }}\n          go mod edit -replace go.opentelemetry.io/collector/config/confighttp=github.com/amazon-contributing/opentelemetry-collector-contrib/config/confighttp@${{ steps.get-latest-commit.outputs.sha }}\n",
                      "markdown": "`      - name: Update OTel fork components version\n        id: set-matrix\n        run: |\n          git config --global user.name 'Github Action'\n          git config --global user.email 'action@github.com'\n          git checkout -b otel-fork-replace-${{ steps.get-latest-commit.outputs.sha }}\n          go mod edit -replace go.opentelemetry.io/collector/config/confighttp=github.com/amazon-contributing/opentelemetry-collector-contrib/config/confighttp@${{ steps.get-latest-commit.outputs.sha }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/otel-fork-replace.yml"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 86,
                  "endLine": 24,
                  "endColumn": 91,
                  "snippet": {
                    "text": "        id: get-latest-commit\n        run: |\n          if [\"${{ inputs.CommitSha }}\" == \"\"]; then\n            echo \"sha=$(git ls-remote ${{ env.UPSTREAM }} ${{ env.UPSTREAM_BRANCH }} | awk '{print $1;}')\" >> $GITHUB_OUTPUT\n          else\n            echo \"sha=${{ inputs.CommitSha }}\" >> $GITHUB_OUTPUT\n          fi\n",
                    "rendered": {
                      "text": "        id: get-latest-commit\n        run: |\n          if [\"${{ inputs.CommitSha }}\" == \"\"]; then\n            echo \"sha=$(git ls-remote ${{ env.UPSTREAM }} ${{ env.UPSTREAM_BRANCH }} | awk '{print $1;}')\" >> $GITHUB_OUTPUT\n          else\n            echo \"sha=${{ inputs.CommitSha }}\" >> $GITHUB_OUTPUT\n          fi\n",
                      "markdown": "`        id: get-latest-commit\n        run: |\n          if [\"${{ inputs.CommitSha }}\" == \"\"]; then\n            echo \"sha=$(git ls-remote ${{ env.UPSTREAM }} ${{ env.UPSTREAM_BRANCH }} | awk '{print $1;}')\" >> $GITHUB_OUTPUT\n          else\n            echo \"sha=${{ inputs.CommitSha }}\" >> $GITHUB_OUTPUT\n          fi\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/clean-aws-resources.yml"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 39,
                  "endLine": 8,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\non:\n  schedule:\n    - cron: \"0 0 * * *\" # Run Every Day At Midnight\n  workflow_dispatch:\n\njobs:\n",
                    "rendered": {
                      "text": "\non:\n  schedule:\n    - cron: \"0 0 * * *\" # Run Every Day At Midnight\n  workflow_dispatch:\n\njobs:\n",
                      "markdown": "`\non:\n  schedule:\n    - cron: \"0 0 * * *\" # Run Every Day At Midnight\n  workflow_dispatch:\n\njobs:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/soak-test.yml"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 36,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "              -var=\"binary_name=amazon-cloudwatch-agent.rpm\" \\\n              -var=\"s3_bucket=${S3_INTEGRATION_BUCKET}\" \\\n              -var=\"ssh_key_name=${KEY_NAME}\" \\\n              -var=\"ssh_key_value=${PRIVATE_KEY}\" \\\n              -var=\"test_name=SoakTest\" \\\n              -var=\"test_dir=./test/soak -run TestSoakHigh\"\n\n",
                    "rendered": {
                      "text": "              -var=\"binary_name=amazon-cloudwatch-agent.rpm\" \\\n              -var=\"s3_bucket=${S3_INTEGRATION_BUCKET}\" \\\n              -var=\"ssh_key_name=${KEY_NAME}\" \\\n              -var=\"ssh_key_value=${PRIVATE_KEY}\" \\\n              -var=\"test_name=SoakTest\" \\\n              -var=\"test_dir=./test/soak -run TestSoakHigh\"\n\n",
                      "markdown": "`              -var=\"binary_name=amazon-cloudwatch-agent.rpm\" \\\n              -var=\"s3_bucket=${S3_INTEGRATION_BUCKET}\" \\\n              -var=\"ssh_key_name=${KEY_NAME}\" \\\n              -var=\"ssh_key_value=${PRIVATE_KEY}\" \\\n              -var=\"test_name=SoakTest\" \\\n              -var=\"test_dir=./test/soak -run TestSoakHigh\"\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/soak-test.yml"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 31,
                  "endLine": 9,
                  "endColumn": 42,
                  "snippet": {
                    "text": "  TERRAFORM_AWS_ASSUME_ROLE: ${{ secrets.TERRAFORM_AWS_ASSUME_ROLE }}\n  S3_INTEGRATION_BUCKET: ${{ secrets.S3_INTEGRATION_BUCKET }}\n  KEY_NAME: ${{ secrets.KEY_NAME }}\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}\n  CWA_GITHUB_TEST_REPO_NAME: \"aws/amazon-cloudwatch-agent-test\"\n  CWA_GITHUB_TEST_REPO_URL: \"https://github.com/aws/amazon-cloudwatch-agent-test.git\"\n  CWA_GITHUB_TEST_REPO_BRANCH: \"main\"\n",
                    "rendered": {
                      "text": "  TERRAFORM_AWS_ASSUME_ROLE: ${{ secrets.TERRAFORM_AWS_ASSUME_ROLE }}\n  S3_INTEGRATION_BUCKET: ${{ secrets.S3_INTEGRATION_BUCKET }}\n  KEY_NAME: ${{ secrets.KEY_NAME }}\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}\n  CWA_GITHUB_TEST_REPO_NAME: \"aws/amazon-cloudwatch-agent-test\"\n  CWA_GITHUB_TEST_REPO_URL: \"https://github.com/aws/amazon-cloudwatch-agent-test.git\"\n  CWA_GITHUB_TEST_REPO_BRANCH: \"main\"\n",
                      "markdown": "`  TERRAFORM_AWS_ASSUME_ROLE: ${{ secrets.TERRAFORM_AWS_ASSUME_ROLE }}\n  S3_INTEGRATION_BUCKET: ${{ secrets.S3_INTEGRATION_BUCKET }}\n  KEY_NAME: ${{ secrets.KEY_NAME }}\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}\n  CWA_GITHUB_TEST_REPO_NAME: \"aws/amazon-cloudwatch-agent-test\"\n  CWA_GITHUB_TEST_REPO_URL: \"https://github.com/aws/amazon-cloudwatch-agent-test.git\"\n  CWA_GITHUB_TEST_REPO_BRANCH: \"main\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/soak-test.yml"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 2,
                  "endLine": 9,
                  "endColumn": 13,
                  "snippet": {
                    "text": "  TERRAFORM_AWS_ASSUME_ROLE: ${{ secrets.TERRAFORM_AWS_ASSUME_ROLE }}\n  S3_INTEGRATION_BUCKET: ${{ secrets.S3_INTEGRATION_BUCKET }}\n  KEY_NAME: ${{ secrets.KEY_NAME }}\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}\n  CWA_GITHUB_TEST_REPO_NAME: \"aws/amazon-cloudwatch-agent-test\"\n  CWA_GITHUB_TEST_REPO_URL: \"https://github.com/aws/amazon-cloudwatch-agent-test.git\"\n  CWA_GITHUB_TEST_REPO_BRANCH: \"main\"\n",
                    "rendered": {
                      "text": "  TERRAFORM_AWS_ASSUME_ROLE: ${{ secrets.TERRAFORM_AWS_ASSUME_ROLE }}\n  S3_INTEGRATION_BUCKET: ${{ secrets.S3_INTEGRATION_BUCKET }}\n  KEY_NAME: ${{ secrets.KEY_NAME }}\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}\n  CWA_GITHUB_TEST_REPO_NAME: \"aws/amazon-cloudwatch-agent-test\"\n  CWA_GITHUB_TEST_REPO_URL: \"https://github.com/aws/amazon-cloudwatch-agent-test.git\"\n  CWA_GITHUB_TEST_REPO_BRANCH: \"main\"\n",
                      "markdown": "`  TERRAFORM_AWS_ASSUME_ROLE: ${{ secrets.TERRAFORM_AWS_ASSUME_ROLE }}\n  S3_INTEGRATION_BUCKET: ${{ secrets.S3_INTEGRATION_BUCKET }}\n  KEY_NAME: ${{ secrets.KEY_NAME }}\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}\n  CWA_GITHUB_TEST_REPO_NAME: \"aws/amazon-cloudwatch-agent-test\"\n  CWA_GITHUB_TEST_REPO_URL: \"https://github.com/aws/amazon-cloudwatch-agent-test.git\"\n  CWA_GITHUB_TEST_REPO_BRANCH: \"main\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/soak-test.yml"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 47,
                  "endLine": 94,
                  "endColumn": 77,
                  "snippet": {
                    "text": "            terraform init\n            terraform apply --auto-approve \\\n              -var=\"github_test_repo=${{env.CWA_GITHUB_TEST_REPO_URL}}\" \\\n              -var=\"github_test_repo_branch=${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\" \\\n              -var=\"cwa_github_sha=${GITHUB_SHA}\" \\\n              -var=\"user=ec2-user\" \\\n              -var=\"ami=cloudwatch-agent-integration-test-al2*\" \\\n",
                    "rendered": {
                      "text": "            terraform init\n            terraform apply --auto-approve \\\n              -var=\"github_test_repo=${{env.CWA_GITHUB_TEST_REPO_URL}}\" \\\n              -var=\"github_test_repo_branch=${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\" \\\n              -var=\"cwa_github_sha=${GITHUB_SHA}\" \\\n              -var=\"user=ec2-user\" \\\n              -var=\"ami=cloudwatch-agent-integration-test-al2*\" \\\n",
                      "markdown": "`            terraform init\n            terraform apply --auto-approve \\\n              -var=\"github_test_repo=${{env.CWA_GITHUB_TEST_REPO_URL}}\" \\\n              -var=\"github_test_repo_branch=${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\" \\\n              -var=\"cwa_github_sha=${GITHUB_SHA}\" \\\n              -var=\"user=ec2-user\" \\\n              -var=\"ami=cloudwatch-agent-integration-test-al2*\" \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/soak-test.yml"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 18,
                  "endLine": 74,
                  "endColumn": 48,
                  "snippet": {
                    "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                    "rendered": {
                      "text": "      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n",
                      "markdown": "`      - uses: actions/checkout@v3\n        with:\n          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}\n          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v2\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/soak-test.yml"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 9,
                  "endLine": 16,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\non:\n  schedule:\n    # Run at midnight on Sunday (once a week)\n    - cron: \"0 0 * * 0\"\n  workflow_call:\n  workflow_dispatch:\n",
                    "rendered": {
                      "text": "\non:\n  schedule:\n    # Run at midnight on Sunday (once a week)\n    - cron: \"0 0 * * 0\"\n  workflow_call:\n  workflow_dispatch:\n",
                      "markdown": "`\non:\n  schedule:\n    # Run at midnight on Sunday (once a week)\n    - cron: \"0 0 * * 0\"\n  workflow_call:\n  workflow_dispatch:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/PR-build.yml"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 11,
                  "endLine": 64,
                  "endColumn": 16,
                  "snippet": {
                    "text": "          make fmt fmt-sh\n          if [ ! -z \"`git status --porcelain`\" ]; then\n            echo \"make fmt changed files\"\n            git status\n            exit 1\n          fi\n\n",
                    "rendered": {
                      "text": "          make fmt fmt-sh\n          if [ ! -z \"`git status --porcelain`\" ]; then\n            echo \"make fmt changed files\"\n            git status\n            exit 1\n          fi\n\n",
                      "markdown": "`          make fmt fmt-sh\n          if [ ! -z \"`git status --porcelain`\" ]; then\n            echo \"make fmt changed files\"\n            git status\n            exit 1\n          fi\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/PR-build.yml"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 22,
                  "endLine": 63,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        run: |\n          make fmt fmt-sh\n          if [ ! -z \"`git status --porcelain`\" ]; then\n            echo \"make fmt changed files\"\n            git status\n            exit 1\n          fi\n",
                    "rendered": {
                      "text": "        run: |\n          make fmt fmt-sh\n          if [ ! -z \"`git status --porcelain`\" ]; then\n            echo \"make fmt changed files\"\n            git status\n            exit 1\n          fi\n",
                      "markdown": "`        run: |\n          make fmt fmt-sh\n          if [ ! -z \"`git status --porcelain`\" ]; then\n            echo \"make fmt changed files\"\n            git status\n            exit 1\n          fi\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/PR-build.yml"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 14,
                  "endLine": 61,
                  "endColumn": 19,
                  "snippet": {
                    "text": "      - name: Check format\n        if: needs.changes.outputs.lint == 'true'\n        run: |\n          make fmt fmt-sh\n          if [ ! -z \"`git status --porcelain`\" ]; then\n            echo \"make fmt changed files\"\n            git status\n",
                    "rendered": {
                      "text": "      - name: Check format\n        if: needs.changes.outputs.lint == 'true'\n        run: |\n          make fmt fmt-sh\n          if [ ! -z \"`git status --porcelain`\" ]; then\n            echo \"make fmt changed files\"\n            git status\n",
                      "markdown": "`      - name: Check format\n        if: needs.changes.outputs.lint == 'true'\n        run: |\n          make fmt fmt-sh\n          if [ ! -z \"`git status --porcelain`\" ]; then\n            echo \"make fmt changed files\"\n            git status\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/ec2-integration-test.yml"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 41,
                  "endLine": 99,
                  "endColumn": 52,
                  "snippet": {
                    "text": "            \n            terraform init\n            if terraform apply --auto-approve \\\n              -var=\"ssh_key_value=${{env.PRIVATE_KEY}}\" -var=\"github_test_repo=${{ inputs.test_repo_url }}\" \\\n              -var=\"test_name=${{ matrix.arrays.os }}\" \\\n              -var=\"cwa_github_sha=${{inputs.github_sha}}\" -var=\"install_agent=${{ matrix.arrays.installAgentCommand }}\" \\\n              -var=\"github_test_repo_branch=${{inputs.test_repo_branch}}\" \\\n",
                    "rendered": {
                      "text": "            \n            terraform init\n            if terraform apply --auto-approve \\\n              -var=\"ssh_key_value=${{env.PRIVATE_KEY}}\" -var=\"github_test_repo=${{ inputs.test_repo_url }}\" \\\n              -var=\"test_name=${{ matrix.arrays.os }}\" \\\n              -var=\"cwa_github_sha=${{inputs.github_sha}}\" -var=\"install_agent=${{ matrix.arrays.installAgentCommand }}\" \\\n              -var=\"github_test_repo_branch=${{inputs.test_repo_branch}}\" \\\n",
                      "markdown": "`            \n            terraform init\n            if terraform apply --auto-approve \\\n              -var=\"ssh_key_value=${{env.PRIVATE_KEY}}\" -var=\"github_test_repo=${{ inputs.test_repo_url }}\" \\\n              -var=\"test_name=${{ matrix.arrays.os }}\" \\\n              -var=\"cwa_github_sha=${{inputs.github_sha}}\" -var=\"install_agent=${{ matrix.arrays.installAgentCommand }}\" \\\n              -var=\"github_test_repo_branch=${{inputs.test_repo_branch}}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/ec2-integration-test.yml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 31,
                  "endLine": 7,
                  "endColumn": 42,
                  "snippet": {
                    "text": "name: Reusable EC2 Integration Test\n\nenv:\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}\n  KEY_NAME: ${{ secrets.KEY_NAME }}\n  TERRAFORM_AWS_ASSUME_ROLE_DURATION: 14400 # 4 hours\n\n",
                    "rendered": {
                      "text": "name: Reusable EC2 Integration Test\n\nenv:\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}\n  KEY_NAME: ${{ secrets.KEY_NAME }}\n  TERRAFORM_AWS_ASSUME_ROLE_DURATION: 14400 # 4 hours\n\n",
                      "markdown": "`name: Reusable EC2 Integration Test\n\nenv:\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}\n  KEY_NAME: ${{ secrets.KEY_NAME }}\n  TERRAFORM_AWS_ASSUME_ROLE_DURATION: 14400 # 4 hours\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/ec2-integration-test.yml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 2,
                  "endLine": 7,
                  "endColumn": 13,
                  "snippet": {
                    "text": "name: Reusable EC2 Integration Test\n\nenv:\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}\n  KEY_NAME: ${{ secrets.KEY_NAME }}\n  TERRAFORM_AWS_ASSUME_ROLE_DURATION: 14400 # 4 hours\n\n",
                    "rendered": {
                      "text": "name: Reusable EC2 Integration Test\n\nenv:\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}\n  KEY_NAME: ${{ secrets.KEY_NAME }}\n  TERRAFORM_AWS_ASSUME_ROLE_DURATION: 14400 # 4 hours\n\n",
                      "markdown": "`name: Reusable EC2 Integration Test\n\nenv:\n  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}\n  KEY_NAME: ${{ secrets.KEY_NAME }}\n  TERRAFORM_AWS_ASSUME_ROLE_DURATION: 14400 # 4 hours\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/ec2-integration-test.yml"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 35,
                  "endLine": 82,
                  "endColumn": 39,
                  "snippet": {
                    "text": "      - name: Verify Terraform version\n        run: terraform --version\n\n      # nick-fields/retry@v2 starts at base dir\n      - name: Terraform apply\n        if: steps.cache_if_success.outputs.cache-hit != 'true'\n        uses: nick-fields/retry@v2\n",
                    "rendered": {
                      "text": "      - name: Verify Terraform version\n        run: terraform --version\n\n      # nick-fields/retry@v2 starts at base dir\n      - name: Terraform apply\n        if: steps.cache_if_success.outputs.cache-hit != 'true'\n        uses: nick-fields/retry@v2\n",
                      "markdown": "`      - name: Verify Terraform version\n        run: terraform --version\n\n      # nick-fields/retry@v2 starts at base dir\n      - name: Terraform apply\n        if: steps.cache_if_success.outputs.cache-hit != 'true'\n        uses: nick-fields/retry@v2\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/dependabot.yml"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 23,
                  "endLine": 2,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# To get started with Dependabot version updates, you'll need to specify which\n# package ecosystems to update and where the package manifests are located.\n# Please see the documentation for all configuration options:\n# https://help.github.com/github/administering-a-repository/configuration-options-for-dependency-updates\n\n",
                    "rendered": {
                      "text": "# To get started with Dependabot version updates, you'll need to specify which\n# package ecosystems to update and where the package manifests are located.\n# Please see the documentation for all configuration options:\n# https://help.github.com/github/administering-a-repository/configuration-options-for-dependency-updates\n\n",
                      "markdown": "`# To get started with Dependabot version updates, you'll need to specify which\n# package ecosystems to update and where the package manifests are located.\n# Please see the documentation for all configuration options:\n# https://help.github.com/github/administering-a-repository/configuration-options-for-dependency-updates\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/mapWithExpiry/mapWithExpiry_test.go"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 16,
                  "endLine": 50,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n\ttime.Sleep(time.Second)\n\tstore.CleanUp(time.Now())\n\tval, ok = store.Get(\"key1\")\n\tassert.Equal(t, false, ok)\n\tassert.Equal(t, nil, val)\n\tassert.Equal(t, 0, store.Size())\n",
                    "rendered": {
                      "text": "\n\ttime.Sleep(time.Second)\n\tstore.CleanUp(time.Now())\n\tval, ok = store.Get(\"key1\")\n\tassert.Equal(t, false, ok)\n\tassert.Equal(t, nil, val)\n\tassert.Equal(t, 0, store.Size())\n",
                      "markdown": "`\n\ttime.Sleep(time.Second)\n\tstore.CleanUp(time.Now())\n\tval, ok = store.Get(\"key1\")\n\tassert.Equal(t, false, ok)\n\tassert.Equal(t, nil, val)\n\tassert.Equal(t, 0, store.Size())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/mapWithExpiry/mapWithExpiry_test.go"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 17,
                  "endLine": 43,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tstore.Set(\"key1\", \"value1\")\n\n\tstore.CleanUp(time.Now())\n\tval, ok := store.Get(\"key1\")\n\tassert.Equal(t, true, ok)\n\tassert.Equal(t, \"value1\", val.(string))\n\tassert.Equal(t, 1, store.Size())\n",
                    "rendered": {
                      "text": "\tstore.Set(\"key1\", \"value1\")\n\n\tstore.CleanUp(time.Now())\n\tval, ok := store.Get(\"key1\")\n\tassert.Equal(t, true, ok)\n\tassert.Equal(t, \"value1\", val.(string))\n\tassert.Equal(t, 1, store.Size())\n",
                      "markdown": "`\tstore.Set(\"key1\", \"value1\")\n\n\tstore.CleanUp(time.Now())\n\tval, ok := store.Get(\"key1\")\n\tassert.Equal(t, true, ok)\n\tassert.Equal(t, \"value1\", val.(string))\n\tassert.Equal(t, 1, store.Size())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/mapWithExpiry/mapWithExpiry_test.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 16,
                  "endLine": 33,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\tassert.Equal(t, \"value1\", val.(string))\n\n\tstore.Delete(\"key1\")\n\tval, ok = store.Get(\"key1\")\n\tassert.Equal(t, false, ok)\n\tassert.Equal(t, nil, val)\n}\n",
                    "rendered": {
                      "text": "\tassert.Equal(t, \"value1\", val.(string))\n\n\tstore.Delete(\"key1\")\n\tval, ok = store.Get(\"key1\")\n\tassert.Equal(t, false, ok)\n\tassert.Equal(t, nil, val)\n}\n",
                      "markdown": "`\tassert.Equal(t, \"value1\", val.(string))\n\n\tstore.Delete(\"key1\")\n\tval, ok = store.Get(\"key1\")\n\tassert.Equal(t, false, ok)\n\tassert.Equal(t, nil, val)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/mapWithExpiry/mapWithExpiry_test.go"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 17,
                  "endLine": 28,
                  "endColumn": 22,
                  "snippet": {
                    "text": "func TestMapWithExpiry_delete(t *testing.T) {\n\tstore := NewMapWithExpiry(time.Second)\n\tstore.Set(\"key1\", \"value1\")\n\tval, ok := store.Get(\"key1\")\n\tassert.Equal(t, true, ok)\n\tassert.Equal(t, \"value1\", val.(string))\n\n",
                    "rendered": {
                      "text": "func TestMapWithExpiry_delete(t *testing.T) {\n\tstore := NewMapWithExpiry(time.Second)\n\tstore.Set(\"key1\", \"value1\")\n\tval, ok := store.Get(\"key1\")\n\tassert.Equal(t, true, ok)\n\tassert.Equal(t, \"value1\", val.(string))\n\n",
                      "markdown": "`func TestMapWithExpiry_delete(t *testing.T) {\n\tstore := NewMapWithExpiry(time.Second)\n\tstore.Set(\"key1\", \"value1\")\n\tval, ok := store.Get(\"key1\")\n\tassert.Equal(t, true, ok)\n\tassert.Equal(t, \"value1\", val.(string))\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/mapWithExpiry/mapWithExpiry_test.go"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 16,
                  "endLine": 20,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\tassert.Equal(t, true, ok)\n\tassert.Equal(t, \"value1\", val.(string))\n\n\tval, ok = store.Get(\"key2\")\n\tassert.Equal(t, false, ok)\n\tassert.Equal(t, nil, val)\n}\n",
                    "rendered": {
                      "text": "\tassert.Equal(t, true, ok)\n\tassert.Equal(t, \"value1\", val.(string))\n\n\tval, ok = store.Get(\"key2\")\n\tassert.Equal(t, false, ok)\n\tassert.Equal(t, nil, val)\n}\n",
                      "markdown": "`\tassert.Equal(t, true, ok)\n\tassert.Equal(t, \"value1\", val.(string))\n\n\tval, ok = store.Get(\"key2\")\n\tassert.Equal(t, false, ok)\n\tassert.Equal(t, nil, val)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/mapWithExpiry/mapWithExpiry_test.go"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 17,
                  "endLine": 16,
                  "endColumn": 22,
                  "snippet": {
                    "text": "func TestMapWithExpiry_add(t *testing.T) {\n\tstore := NewMapWithExpiry(time.Second)\n\tstore.Set(\"key1\", \"value1\")\n\tval, ok := store.Get(\"key1\")\n\tassert.Equal(t, true, ok)\n\tassert.Equal(t, \"value1\", val.(string))\n\n",
                    "rendered": {
                      "text": "func TestMapWithExpiry_add(t *testing.T) {\n\tstore := NewMapWithExpiry(time.Second)\n\tstore.Set(\"key1\", \"value1\")\n\tval, ok := store.Get(\"key1\")\n\tassert.Equal(t, true, ok)\n\tassert.Equal(t, \"value1\", val.(string))\n\n",
                      "markdown": "`func TestMapWithExpiry_add(t *testing.T) {\n\tstore := NewMapWithExpiry(time.Second)\n\tstore.Set(\"key1\", \"value1\")\n\tval, ok := store.Get(\"key1\")\n\tassert.Equal(t, true, ok)\n\tassert.Equal(t, \"value1\", val.(string))\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/k8sCommon/k8sclient/clientset.go"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 23,
                  "endLine": 54,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n\tconfig, err := rest.InClusterConfig()\n\tif err != nil {\n\t\tlog.Printf(\"W! Cannot find in cluster config: %v\", err)\n\t\tconfig, err = clientcmd.BuildConfigFromFlags(\"\", filepath.Join(os.Getenv(\"HOME\"), \".kube/config\"))\n\t\tif err != nil {\n\t\t\tlog.Printf(\"E! Failed to build config: %v\", err)\n",
                    "rendered": {
                      "text": "\n\tconfig, err := rest.InClusterConfig()\n\tif err != nil {\n\t\tlog.Printf(\"W! Cannot find in cluster config: %v\", err)\n\t\tconfig, err = clientcmd.BuildConfigFromFlags(\"\", filepath.Join(os.Getenv(\"HOME\"), \".kube/config\"))\n\t\tif err != nil {\n\t\t\tlog.Printf(\"E! Failed to build config: %v\", err)\n",
                      "markdown": "`\n\tconfig, err := rest.InClusterConfig()\n\tif err != nil {\n\t\tlog.Printf(\"W! Cannot find in cluster config: %v\", err)\n\t\tconfig, err = clientcmd.BuildConfigFromFlags(\"\", filepath.Join(os.Getenv(\"HOME\"), \".kube/config\"))\n\t\tif err != nil {\n\t\t\tlog.Printf(\"E! Failed to build config: %v\", err)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/k8sCommon/k8sclient/clientset.go"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\n\tEp   EpClient\n\tPod  PodClient\n\tNode NodeClient\n\n\tReplicaSet ReplicaSetClient\n}\n",
                    "rendered": {
                      "text": "\n\tEp   EpClient\n\tPod  PodClient\n\tNode NodeClient\n\n\tReplicaSet ReplicaSetClient\n}\n",
                      "markdown": "`\n\tEp   EpClient\n\tPod  PodClient\n\tNode NodeClient\n\n\tReplicaSet ReplicaSetClient\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/mapstructure/encoder.go"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 58,
                  "endLine": 163,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\tfor i := 0; i < value.Len(); i++ {\n\t\tvar err error\n\t\tif result[i], err = e.encode(value.Index(i)); err != nil {\n\t\t\treturn nil, fmt.Errorf(\"error encoding element in slice at index %d: %w\", i, err)\n\t\t}\n\t}\n\treturn result, nil\n",
                    "rendered": {
                      "text": "\tfor i := 0; i < value.Len(); i++ {\n\t\tvar err error\n\t\tif result[i], err = e.encode(value.Index(i)); err != nil {\n\t\t\treturn nil, fmt.Errorf(\"error encoding element in slice at index %d: %w\", i, err)\n\t\t}\n\t}\n\treturn result, nil\n",
                      "markdown": "`\tfor i := 0; i < value.Len(); i++ {\n\t\tvar err error\n\t\tif result[i], err = e.encode(value.Index(i)); err != nil {\n\t\t\treturn nil, fmt.Errorf(\"error encoding element in slice at index %d: %w\", i, err)\n\t\t}\n\t}\n\treturn result, nil\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/mapstructure/marshaler_test.go"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 29,
                  "endLine": 95,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\tsub, err := conf.Sub(\"testconfig\")\n\tassert.NoError(t, err)\n\tassert.True(t, sub.IsSet(\"additional\"))\n\tassert.Equal(t, \"field\", sub.Get(\"additional\"))\n\tvarBool := false\n\tnmCfg.TestConfig.Boolean = &varBool\n\tassert.Error(t, conf.Marshal(nmCfg))\n",
                    "rendered": {
                      "text": "\tsub, err := conf.Sub(\"testconfig\")\n\tassert.NoError(t, err)\n\tassert.True(t, sub.IsSet(\"additional\"))\n\tassert.Equal(t, \"field\", sub.Get(\"additional\"))\n\tvarBool := false\n\tnmCfg.TestConfig.Boolean = &varBool\n\tassert.Error(t, conf.Marshal(nmCfg))\n",
                      "markdown": "`\tsub, err := conf.Sub(\"testconfig\")\n\tassert.NoError(t, err)\n\tassert.True(t, sub.IsSet(\"additional\"))\n\tassert.Equal(t, \"field\", sub.Get(\"additional\"))\n\tvarBool := false\n\tnmCfg.TestConfig.Boolean = &varBool\n\tassert.Error(t, conf.Marshal(nmCfg))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/mapstructure/marshaler_test.go"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 30,
                  "endLine": 81,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tgot, err := Marshal(cfg)\n\tassert.NoError(t, err)\n\tconf := confmap.NewFromStringMap(got)\n\tassert.Equal(t, \"field\", conf.Get(\"additional\"))\n\n\ttype NestedMarshaler struct {\n\t\tTestConfig *TestConfig\n",
                    "rendered": {
                      "text": "\tgot, err := Marshal(cfg)\n\tassert.NoError(t, err)\n\tconf := confmap.NewFromStringMap(got)\n\tassert.Equal(t, \"field\", conf.Get(\"additional\"))\n\n\ttype NestedMarshaler struct {\n\t\tTestConfig *TestConfig\n",
                      "markdown": "`\tgot, err := Marshal(cfg)\n\tassert.NoError(t, err)\n\tconf := confmap.NewFromStringMap(got)\n\tassert.Equal(t, \"field\", conf.Get(\"additional\"))\n\n\ttype NestedMarshaler struct {\n\t\tTestConfig *TestConfig\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/mapstructure/marshaler_test.go"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 68,
                  "endLine": 52,
                  "endColumn": 73,
                  "snippet": {
                    "text": "\tassert.NoError(t, err)\n\tconf := confmap.NewFromStringMap(got)\n\tassert.Equal(t, true, conf.Get(\"bool\"))\n\tassert.Equal(t, map[string]any{\"string_\": \"this is a string\"}, conf.Get(\"map\"))\n}\n\nfunc TestMarshalDuplicateID(t *testing.T) {\n",
                    "rendered": {
                      "text": "\tassert.NoError(t, err)\n\tconf := confmap.NewFromStringMap(got)\n\tassert.Equal(t, true, conf.Get(\"bool\"))\n\tassert.Equal(t, map[string]any{\"string_\": \"this is a string\"}, conf.Get(\"map\"))\n}\n\nfunc TestMarshalDuplicateID(t *testing.T) {\n",
                      "markdown": "`\tassert.NoError(t, err)\n\tconf := confmap.NewFromStringMap(got)\n\tassert.Equal(t, true, conf.Get(\"bool\"))\n\tassert.Equal(t, map[string]any{\"string_\": \"this is a string\"}, conf.Get(\"map\"))\n}\n\nfunc TestMarshalDuplicateID(t *testing.T) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/mapstructure/marshaler_test.go"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\tgot, err := Marshal(cfg)\n\tassert.NoError(t, err)\n\tconf := confmap.NewFromStringMap(got)\n\tassert.Equal(t, true, conf.Get(\"bool\"))\n\tassert.Equal(t, map[string]any{\"string_\": \"this is a string\"}, conf.Get(\"map\"))\n}\n\n",
                    "rendered": {
                      "text": "\tgot, err := Marshal(cfg)\n\tassert.NoError(t, err)\n\tconf := confmap.NewFromStringMap(got)\n\tassert.Equal(t, true, conf.Get(\"bool\"))\n\tassert.Equal(t, map[string]any{\"string_\": \"this is a string\"}, conf.Get(\"map\"))\n}\n\n",
                      "markdown": "`\tgot, err := Marshal(cfg)\n\tassert.NoError(t, err)\n\tconf := confmap.NewFromStringMap(got)\n\tassert.Equal(t, true, conf.Get(\"bool\"))\n\tassert.Equal(t, map[string]any{\"string_\": \"this is a string\"}, conf.Get(\"map\"))\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/README.md"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 49,
                  "endLine": 54,
                  "endColumn": 57,
                  "snippet": {
                    "text": "r Prometheus metrics. Only one value is allowed                          |\n|sd_metrics_path_label| Optional    | Container's docker label name that specify the Prometheus metric path. If not specified, the default path /metrics is assumed.          |\n|sd_job_name_label    | Optional    | Container's docker label name that specify the Prometheus scrape job name. If not specified, the job name in prometheus.yaml is used.   |\n\n\n#### Task Definition Based Auto Discovery\n\n|Configuration Field  |             | Description                                                   |\n|---------------------|-----------",
                    "rendered": {
                      "text": "r Prometheus metrics. Only one value is allowed                          |\n|sd_metrics_path_label| Optional    | Container's docker label name that specify the Prometheus metric path. If not specified, the default path /metrics is assumed.          |\n|sd_job_name_label    | Optional    | Container's docker label name that specify the Prometheus scrape job name. If not specified, the job name in prometheus.yaml is used.   |\n\n\n#### Task Definition Based Auto Discovery\n\n|Configuration Field  |             | Description                                                   |\n|---------------------|-----------",
                      "markdown": "`r Prometheus metrics. Only one value is allowed                          |\n|sd_metrics_path_label| Optional    | Container's docker label name that specify the Prometheus metric path. If not specified, the default path /metrics is assumed.          |\n|sd_job_name_label    | Optional    | Container's docker label name that specify the Prometheus scrape job name. If not specified, the job name in prometheus.yaml is used.   |\n\n\n#### Task Definition Based Auto Discovery\n\n|Configuration Field  |             | Description                                                   |\n|---------------------|-----------`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/README.md"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 49,
                  "endLine": 53,
                  "endColumn": 57,
                  "snippet": {
                    "text": "---------|---------------------------------------------------------------|\n|sd_port_label        | Mandatory   | Container's docker label name that specify the containerPort for Prometheus metrics. Only one value is allowed                          |\n|sd_metrics_path_label| Optional    | Container's docker label name that specify the Prometheus metric path. If not specified, the default path /metrics is assumed.          |\n|sd_job_name_label    | Optional    | Container's docker label name that specify the Prometheus scrape job name. If not specified, the job name in prometheus.yaml is used.   |\n\n\n###",
                    "rendered": {
                      "text": "---------|---------------------------------------------------------------|\n|sd_port_label        | Mandatory   | Container's docker label name that specify the containerPort for Prometheus metrics. Only one value is allowed                          |\n|sd_metrics_path_label| Optional    | Container's docker label name that specify the Prometheus metric path. If not specified, the default path /metrics is assumed.          |\n|sd_job_name_label    | Optional    | Container's docker label name that specify the Prometheus scrape job name. If not specified, the job name in prometheus.yaml is used.   |\n\n\n###",
                      "markdown": "`---------|---------------------------------------------------------------|\n|sd_port_label        | Mandatory   | Container's docker label name that specify the containerPort for Prometheus metrics. Only one value is allowed                          |\n|sd_metrics_path_label| Optional    | Container's docker label name that specify the Prometheus metric path. If not specified, the default path /metrics is assumed.          |\n|sd_job_name_label    | Optional    | Container's docker label name that specify the Prometheus scrape job name. If not specified, the job name in prometheus.yaml is used.   |\n\n\n###`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/README.md"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 49,
                  "endLine": 52,
                  "endColumn": 57,
                  "snippet": {
                    "text": "cker Label Based Auto Discovery Configuration\n\n|Configuration Field  |             | Description                                                   |\n|---------------------|-------------|---------------------------------------------------------------|\n|sd_port_label        | Mandatory   | Container's docker label name that specify the containerPort for Prometheus metrics. Only one value is allowed                          |\n|sd_metrics_path_label| Optional    | Container's docker label name that specify the Prometheus metric path. If not specified, the default path /metrics is assumed.          |\n|sd_j",
                    "rendered": {
                      "text": "cker Label Based Auto Discovery Configuration\n\n|Configuration Field  |             | Description                                                   |\n|---------------------|-------------|---------------------------------------------------------------|\n|sd_port_label        | Mandatory   | Container's docker label name that specify the containerPort for Prometheus metrics. Only one value is allowed                          |\n|sd_metrics_path_label| Optional    | Container's docker label name that specify the Prometheus metric path. If not specified, the default path /metrics is assumed.          |\n|sd_j",
                      "markdown": "`cker Label Based Auto Discovery Configuration\n\n|Configuration Field  |             | Description                                                   |\n|---------------------|-------------|---------------------------------------------------------------|\n|sd_port_label        | Mandatory   | Container's docker label name that specify the containerPort for Prometheus metrics. Only one value is allowed                          |\n|sd_metrics_path_label| Optional    | Container's docker label name that specify the Prometheus metric path. If not specified, the default path /metrics is assumed.          |\n|sd_j`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/README.md"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 4,
                  "endLine": 48,
                  "endColumn": 12,
                  "snippet": {
                    "text": "|sd_metrics_path                 | Optional    | Prometheus metric path. If not specified, the default path /metrics is assumed        |\n|sd_job_name                     | Optional    | Prometheus scrape job name. If not specified, the job name in prometheus.yaml is used   |\n\n#### Docker Label Based Auto Discovery Configuration\n\n|Configuration Field  |             | Description                                                   |\n|---------------------|-------------|---------------------------------------------------------------|\n",
                    "rendered": {
                      "text": "|sd_metrics_path                 | Optional    | Prometheus metric path. If not specified, the default path /metrics is assumed        |\n|sd_job_name                     | Optional    | Prometheus scrape job name. If not specified, the job name in prometheus.yaml is used   |\n\n#### Docker Label Based Auto Discovery Configuration\n\n|Configuration Field  |             | Description                                                   |\n|---------------------|-------------|---------------------------------------------------------------|\n",
                      "markdown": "`|sd_metrics_path                 | Optional    | Prometheus metric path. If not specified, the default path /metrics is assumed        |\n|sd_job_name                     | Optional    | Prometheus scrape job name. If not specified, the job name in prometheus.yaml is used   |\n\n#### Docker Label Based Auto Discovery Configuration\n\n|Configuration Field  |             | Description                                                   |\n|---------------------|-------------|---------------------------------------------------------------|\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/README.md"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 52,
                  "endLine": 42,
                  "endColumn": 61,
                  "snippet": {
                    "text": "#### Service Endpoint Based Auto Discovery\n\n|Configuration Field  |             | Description                                                   |\n|---------------------|-------------|---------------------------------------------------------------|\n|sd_service_name_pattern         | Mandatory   | ECS service name regex pattern             |\n|sd_metrics_ports                | Mandatory   | semicolon separated containerPort for Prometheus metrics.    |\n|sd_container_name_pattern       | Optional    | ECS task container name regex pattern                        |\n|sd_metrics_path                 | Optional",
                    "rendered": {
                      "text": "#### Service Endpoint Based Auto Discovery\n\n|Configuration Field  |             | Description                                                   |\n|---------------------|-------------|---------------------------------------------------------------|\n|sd_service_name_pattern         | Mandatory   | ECS service name regex pattern             |\n|sd_metrics_ports                | Mandatory   | semicolon separated containerPort for Prometheus metrics.    |\n|sd_container_name_pattern       | Optional    | ECS task container name regex pattern                        |\n|sd_metrics_path                 | Optional",
                      "markdown": "`#### Service Endpoint Based Auto Discovery\n\n|Configuration Field  |             | Description                                                   |\n|---------------------|-------------|---------------------------------------------------------------|\n|sd_service_name_pattern         | Mandatory   | ECS service name regex pattern             |\n|sd_metrics_ports                | Mandatory   | semicolon separated containerPort for Prometheus metrics.    |\n|sd_container_name_pattern       | Optional    | ECS task container name regex pattern                        |\n|sd_metrics_path                 | Optional`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/README.md"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 4,
                  "endLine": 38,
                  "endColumn": 13,
                  "snippet": {
                    "text": "ery configurations. If this structure is nil, docker label based service discovery is disabled                |\n|task_definition_list | Optional    | ECS task definition based service discovery configurations slice. If this slice is empty, task definition based service discovery is disabled  |\n\n#### Service Endpoint Based Auto Discovery\n\n|Configuration Field  |             | Description                                                   |\n|---------------------|-------------|---------------------------------------------------------------|\n|sd_service_name_pattern         | Mandatory   | ECS service name",
                    "rendered": {
                      "text": "ery configurations. If this structure is nil, docker label based service discovery is disabled                |\n|task_definition_list | Optional    | ECS task definition based service discovery configurations slice. If this slice is empty, task definition based service discovery is disabled  |\n\n#### Service Endpoint Based Auto Discovery\n\n|Configuration Field  |             | Description                                                   |\n|---------------------|-------------|---------------------------------------------------------------|\n|sd_service_name_pattern         | Mandatory   | ECS service name",
                      "markdown": "`ery configurations. If this structure is nil, docker label based service discovery is disabled                |\n|task_definition_list | Optional    | ECS task definition based service discovery configurations slice. If this slice is empty, task definition based service discovery is disabled  |\n\n#### Service Endpoint Based Auto Discovery\n\n|Configuration Field  |             | Description                                                   |\n|---------------------|-------------|---------------------------------------------------------------|\n|sd_service_name_pattern         | Mandatory   | ECS service name`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/README.md"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 149,
                  "endLine": 36,
                  "endColumn": 158,
                  "snippet": {
                    "text": "    | docker label based service discovery configurations. If this structure is nil, docker label based service discovery is disabled                |\n|task_definition_list | Optional    | ECS task definition based service discovery configurations slice. If this slice is empty, task definition based service discovery is disabled  |\n\n#### Service Endpoint Based Auto Discovery\n\n|Configuration Field  |             | Description                                                   |\n|---------------------|-------------|---------------------------------------------------------------|\n|sd_service_name_pattern  ",
                    "rendered": {
                      "text": "    | docker label based service discovery configurations. If this structure is nil, docker label based service discovery is disabled                |\n|task_definition_list | Optional    | ECS task definition based service discovery configurations slice. If this slice is empty, task definition based service discovery is disabled  |\n\n#### Service Endpoint Based Auto Discovery\n\n|Configuration Field  |             | Description                                                   |\n|---------------------|-------------|---------------------------------------------------------------|\n|sd_service_name_pattern  ",
                      "markdown": "`    | docker label based service discovery configurations. If this structure is nil, docker label based service discovery is disabled                |\n|task_definition_list | Optional    | ECS task definition based service discovery configurations slice. If this slice is empty, task definition based service discovery is disabled  |\n\n#### Service Endpoint Based Auto Discovery\n\n|Configuration Field  |             | Description                                                   |\n|---------------------|-------------|---------------------------------------------------------------|\n|sd_service_name_pattern  `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/README.md"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 63,
                  "endLine": 36,
                  "endColumn": 72,
                  "snippet": {
                    "text": " yaml file for the Prometheus target results        |\n|docker_label         | Optional    | docker label based service discovery configurations. If this structure is nil, docker label based service discovery is disabled                |\n|task_definition_list | Optional    | ECS task definition based service discovery configurations slice. If this slice is empty, task definition based service discovery is disabled  |\n\n#### Service Endpoint Based Auto Discovery\n\n|Configuration Field  |             | Description                                                   |\n|---------------------|-------------|-----",
                    "rendered": {
                      "text": " yaml file for the Prometheus target results        |\n|docker_label         | Optional    | docker label based service discovery configurations. If this structure is nil, docker label based service discovery is disabled                |\n|task_definition_list | Optional    | ECS task definition based service discovery configurations slice. If this slice is empty, task definition based service discovery is disabled  |\n\n#### Service Endpoint Based Auto Discovery\n\n|Configuration Field  |             | Description                                                   |\n|---------------------|-------------|-----",
                      "markdown": "` yaml file for the Prometheus target results        |\n|docker_label         | Optional    | docker label based service discovery configurations. If this structure is nil, docker label based service discovery is disabled                |\n|task_definition_list | Optional    | ECS task definition based service discovery configurations slice. If this slice is empty, task definition based service discovery is disabled  |\n\n#### Service Endpoint Based Auto Discovery\n\n|Configuration Field  |             | Description                                                   |\n|---------------------|-------------|-----`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/README.md"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 135,
                  "endLine": 35,
                  "endColumn": 144,
                  "snippet": {
                    "text": " target ECS clusters' AWS region name                       |\n|sd_result_file       | Mandatory   | path of the yaml file for the Prometheus target results        |\n|docker_label         | Optional    | docker label based service discovery configurations. If this structure is nil, docker label based service discovery is disabled                |\n|task_definition_list | Optional    | ECS task definition based service discovery configurations slice. If this slice is empty, task definition based service discovery is disabled  |\n\n#### Service Endpoint Based Auto Discovery\n\n|Configuration Field  |          ",
                    "rendered": {
                      "text": " target ECS clusters' AWS region name                       |\n|sd_result_file       | Mandatory   | path of the yaml file for the Prometheus target results        |\n|docker_label         | Optional    | docker label based service discovery configurations. If this structure is nil, docker label based service discovery is disabled                |\n|task_definition_list | Optional    | ECS task definition based service discovery configurations slice. If this slice is empty, task definition based service discovery is disabled  |\n\n#### Service Endpoint Based Auto Discovery\n\n|Configuration Field  |          ",
                      "markdown": "` target ECS clusters' AWS region name                       |\n|sd_result_file       | Mandatory   | path of the yaml file for the Prometheus target results        |\n|docker_label         | Optional    | docker label based service discovery configurations. If this structure is nil, docker label based service discovery is disabled                |\n|task_definition_list | Optional    | ECS task definition based service discovery configurations slice. If this slice is empty, task definition based service discovery is disabled  |\n\n#### Service Endpoint Based Auto Discovery\n\n|Configuration Field  |          `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/README.md"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 116,
                  "endLine": 35,
                  "endColumn": 124,
                  "snippet": {
                    "text": "| Mandatory   | the target ECS clusters' AWS region name                       |\n|sd_result_file       | Mandatory   | path of the yaml file for the Prometheus target results        |\n|docker_label         | Optional    | docker label based service discovery configurations. If this structure is nil, docker label based service discovery is disabled                |\n|task_definition_list | Optional    | ECS task definition based service discovery configurations slice. If this slice is empty, task definition based service discovery is disabled  |\n\n#### Service Endpoint Based Auto Discovery\n\n|Configuratio",
                    "rendered": {
                      "text": "| Mandatory   | the target ECS clusters' AWS region name                       |\n|sd_result_file       | Mandatory   | path of the yaml file for the Prometheus target results        |\n|docker_label         | Optional    | docker label based service discovery configurations. If this structure is nil, docker label based service discovery is disabled                |\n|task_definition_list | Optional    | ECS task definition based service discovery configurations slice. If this slice is empty, task definition based service discovery is disabled  |\n\n#### Service Endpoint Based Auto Discovery\n\n|Configuratio",
                      "markdown": "`| Mandatory   | the target ECS clusters' AWS region name                       |\n|sd_result_file       | Mandatory   | path of the yaml file for the Prometheus target results        |\n|docker_label         | Optional    | docker label based service discovery configurations. If this structure is nil, docker label based service discovery is disabled                |\n|task_definition_list | Optional    | ECS task definition based service discovery configurations slice. If this slice is empty, task definition based service discovery is disabled  |\n\n#### Service Endpoint Based Auto Discovery\n\n|Configuratio`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/README.md"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 56,
                  "endLine": 35,
                  "endColumn": 65,
                  "snippet": {
                    "text": " service discovery                  |\n|sd_cluster_region    | Mandatory   | the target ECS clusters' AWS region name                       |\n|sd_result_file       | Mandatory   | path of the yaml file for the Prometheus target results        |\n|docker_label         | Optional    | docker label based service discovery configurations. If this structure is nil, docker label based service discovery is disabled                |\n|task_definition_list | Optional    | ECS task definition based service discovery configurations slice. If this slice is empty, task definition based service discovery is disabled  |",
                    "rendered": {
                      "text": " service discovery                  |\n|sd_cluster_region    | Mandatory   | the target ECS clusters' AWS region name                       |\n|sd_result_file       | Mandatory   | path of the yaml file for the Prometheus target results        |\n|docker_label         | Optional    | docker label based service discovery configurations. If this structure is nil, docker label based service discovery is disabled                |\n|task_definition_list | Optional    | ECS task definition based service discovery configurations slice. If this slice is empty, task definition based service discovery is disabled  |",
                      "markdown": "` service discovery                  |\n|sd_cluster_region    | Mandatory   | the target ECS clusters' AWS region name                       |\n|sd_result_file       | Mandatory   | path of the yaml file for the Prometheus target results        |\n|docker_label         | Optional    | docker label based service discovery configurations. If this structure is nil, docker label based service discovery is disabled                |\n|task_definition_list | Optional    | ECS task definition based service discovery configurations slice. If this slice is empty, task definition based service discovery is disabled  |`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/README.md"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 37,
                  "endLine": 35,
                  "endColumn": 45,
                  "snippet": {
                    "text": "CS cluster name for service discovery                  |\n|sd_cluster_region    | Mandatory   | the target ECS clusters' AWS region name                       |\n|sd_result_file       | Mandatory   | path of the yaml file for the Prometheus target results        |\n|docker_label         | Optional    | docker label based service discovery configurations. If this structure is nil, docker label based service discovery is disabled                |\n|task_definition_list | Optional    | ECS task definition based service discovery configurations slice. If this slice is empty, task definition based service disc",
                    "rendered": {
                      "text": "CS cluster name for service discovery                  |\n|sd_cluster_region    | Mandatory   | the target ECS clusters' AWS region name                       |\n|sd_result_file       | Mandatory   | path of the yaml file for the Prometheus target results        |\n|docker_label         | Optional    | docker label based service discovery configurations. If this structure is nil, docker label based service discovery is disabled                |\n|task_definition_list | Optional    | ECS task definition based service discovery configurations slice. If this slice is empty, task definition based service disc",
                      "markdown": "`CS cluster name for service discovery                  |\n|sd_cluster_region    | Mandatory   | the target ECS clusters' AWS region name                       |\n|sd_result_file       | Mandatory   | path of the yaml file for the Prometheus target results        |\n|docker_label         | Optional    | docker label based service discovery configurations. If this structure is nil, docker label based service discovery is disabled                |\n|task_definition_list | Optional    | ECS task definition based service discovery configurations slice. If this slice is empty, task definition based service disc`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/README.md"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 65,
                  "endLine": 32,
                  "endColumn": 74,
                  "snippet": {
                    "text": "                           |\n|---------------------|-------------|----------------------------------------------------------------|\n|sd_frequency         | Mandatory   | frequency to discover the prometheus exporters                 |\n|sd_target_cluster    | Mandatory   | target ECS cluster name for service discovery                  |\n|sd_cluster_region    | Mandatory   | the target ECS clusters' AWS region name                       |\n|sd_result_file       | Mandatory   | path of the yaml file for the Prometheus target results        |\n|docker_label         | Optional    | docker label based service ",
                    "rendered": {
                      "text": "                           |\n|---------------------|-------------|----------------------------------------------------------------|\n|sd_frequency         | Mandatory   | frequency to discover the prometheus exporters                 |\n|sd_target_cluster    | Mandatory   | target ECS cluster name for service discovery                  |\n|sd_cluster_region    | Mandatory   | the target ECS clusters' AWS region name                       |\n|sd_result_file       | Mandatory   | path of the yaml file for the Prometheus target results        |\n|docker_label         | Optional    | docker label based service ",
                      "markdown": "`                           |\n|---------------------|-------------|----------------------------------------------------------------|\n|sd_frequency         | Mandatory   | frequency to discover the prometheus exporters                 |\n|sd_target_cluster    | Mandatory   | target ECS cluster name for service discovery                  |\n|sd_cluster_region    | Mandatory   | the target ECS clusters' AWS region name                       |\n|sd_result_file       | Mandatory   | path of the yaml file for the Prometheus target results        |\n|docker_label         | Optional    | docker label based service `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/README.md"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 141,
                  "endLine": 20,
                  "endColumn": 150,
                  "snippet": {
                    "text": "5. Check the Task Definition ARN if there is Task Definition ARN Regex config\n6. Filter the ECS tasks that match the above two checking for further processing\n7. Get the containerInstance/ec2 instance info from LRU cache if the tasks is running on EC2 launch type. LRU cache size (2000) based on [ECS service quota](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-quotas.html)\n8. Call `ECS: DescribeContainerInstances` and `EC2:DescribeInstances` for the instances have not been cached. Batching Call with batch size = 100.\n9. Export the ECS Prometheus targets into file configured by `sd_",
                    "rendered": {
                      "text": "5. Check the Task Definition ARN if there is Task Definition ARN Regex config\n6. Filter the ECS tasks that match the above two checking for further processing\n7. Get the containerInstance/ec2 instance info from LRU cache if the tasks is running on EC2 launch type. LRU cache size (2000) based on [ECS service quota](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-quotas.html)\n8. Call `ECS: DescribeContainerInstances` and `EC2:DescribeInstances` for the instances have not been cached. Batching Call with batch size = 100.\n9. Export the ECS Prometheus targets into file configured by `sd_",
                      "markdown": "`5. Check the Task Definition ARN if there is Task Definition ARN Regex config\n6. Filter the ECS tasks that match the above two checking for further processing\n7. Get the containerInstance/ec2 instance info from LRU cache if the tasks is running on EC2 launch type. LRU cache size (2000) based on [ECS service quota](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-quotas.html)\n8. Call `ECS: DescribeContainerInstances` and `EC2:DescribeInstances` for the instances have not been cached. Batching Call with batch size = 100.\n9. Export the ECS Prometheus targets into file configured by `sd_`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/README.md"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 66,
                  "endLine": 17,
                  "endColumn": 75,
                  "snippet": {
                    "text": "sk Definition from LRU cache, if there is none in cache, call `ECS:DescribeTaskDefinition` and cache. LRU cache size (2000) based on [ECS service quota](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-quotas.html)\n4. Check the Container Docker Label if there is Docker Label based Service Discovery config\n5. Check the Task Definition ARN if there is Task Definition ARN Regex config\n6. Filter the ECS tasks that match the above two checking for further processing\n7. Get the containerInstance/ec2 instance info from LRU cache if the tasks is running on EC2 launch type. LRU cache size (20",
                    "rendered": {
                      "text": "sk Definition from LRU cache, if there is none in cache, call `ECS:DescribeTaskDefinition` and cache. LRU cache size (2000) based on [ECS service quota](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-quotas.html)\n4. Check the Container Docker Label if there is Docker Label based Service Discovery config\n5. Check the Task Definition ARN if there is Task Definition ARN Regex config\n6. Filter the ECS tasks that match the above two checking for further processing\n7. Get the containerInstance/ec2 instance info from LRU cache if the tasks is running on EC2 launch type. LRU cache size (20",
                      "markdown": "`sk Definition from LRU cache, if there is none in cache, call `ECS:DescribeTaskDefinition` and cache. LRU cache size (2000) based on [ECS service quota](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-quotas.html)\n4. Check the Container Docker Label if there is Docker Label based Service Discovery config\n5. Check the Task Definition ARN if there is Task Definition ARN Regex config\n6. Filter the ECS tasks that match the above two checking for further processing\n7. Get the containerInstance/ec2 instance info from LRU cache if the tasks is running on EC2 launch type. LRU cache size (20`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/README.md"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 47,
                  "endLine": 17,
                  "endColumn": 55,
                  "snippet": {
                    "text": "`\n3. Get the ECS Task Definition from LRU cache, if there is none in cache, call `ECS:DescribeTaskDefinition` and cache. LRU cache size (2000) based on [ECS service quota](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-quotas.html)\n4. Check the Container Docker Label if there is Docker Label based Service Discovery config\n5. Check the Task Definition ARN if there is Task Definition ARN Regex config\n6. Filter the ECS tasks that match the above two checking for further processing\n7. Get the containerInstance/ec2 instance info from LRU cache if the tasks is running on EC2 launch type",
                    "rendered": {
                      "text": "`\n3. Get the ECS Task Definition from LRU cache, if there is none in cache, call `ECS:DescribeTaskDefinition` and cache. LRU cache size (2000) based on [ECS service quota](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-quotas.html)\n4. Check the Container Docker Label if there is Docker Label based Service Discovery config\n5. Check the Task Definition ARN if there is Task Definition ARN Regex config\n6. Filter the ECS tasks that match the above two checking for further processing\n7. Get the containerInstance/ec2 instance info from LRU cache if the tasks is running on EC2 launch type",
                      "markdown": "``\n3. Get the ECS Task Definition from LRU cache, if there is none in cache, call `ECS:DescribeTaskDefinition` and cache. LRU cache size (2000) based on [ECS service quota](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-quotas.html)\n4. Check the Container Docker Label if there is Docker Label based Service Discovery config\n5. Check the Task Definition ARN if there is Task Definition ARN Regex config\n6. Filter the ECS tasks that match the above two checking for further processing\n7. Get the containerInstance/ec2 instance info from LRU cache if the tasks is running on EC2 launch type`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/README.md"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 22,
                  "endLine": 17,
                  "endColumn": 30,
                  "snippet": {
                    "text": ":DescribeTasks batch call`\n3. Get the ECS Task Definition from LRU cache, if there is none in cache, call `ECS:DescribeTaskDefinition` and cache. LRU cache size (2000) based on [ECS service quota](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-quotas.html)\n4. Check the Container Docker Label if there is Docker Label based Service Discovery config\n5. Check the Task Definition ARN if there is Task Definition ARN Regex config\n6. Filter the ECS tasks that match the above two checking for further processing\n7. Get the containerInstance/ec2 instance info from LRU cache if the tasks is r",
                    "rendered": {
                      "text": ":DescribeTasks batch call`\n3. Get the ECS Task Definition from LRU cache, if there is none in cache, call `ECS:DescribeTaskDefinition` and cache. LRU cache size (2000) based on [ECS service quota](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-quotas.html)\n4. Check the Container Docker Label if there is Docker Label based Service Discovery config\n5. Check the Task Definition ARN if there is Task Definition ARN Regex config\n6. Filter the ECS tasks that match the above two checking for further processing\n7. Get the containerInstance/ec2 instance info from LRU cache if the tasks is r",
                      "markdown": "`:DescribeTasks batch call`\n3. Get the ECS Task Definition from LRU cache, if there is none in cache, call `ECS:DescribeTaskDefinition` and cache. LRU cache size (2000) based on [ECS service quota](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-quotas.html)\n4. Check the Container Docker Label if there is Docker Label based Service Discovery config\n5. Check the Task Definition ARN if there is Task Definition ARN Regex config\n6. Filter the ECS tasks that match the above two checking for further processing\n7. Get the containerInstance/ec2 instance info from LRU cache if the tasks is r`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/README.md"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 154,
                  "endLine": 16,
                  "endColumn": 163,
                  "snippet": {
                    "text": "e specific ECS cluster by `ECS:ListTasks paginated call`\n2. Describe the ECS tasks based on the ListTasks response `ECS:DescribeTasks batch call`\n3. Get the ECS Task Definition from LRU cache, if there is none in cache, call `ECS:DescribeTaskDefinition` and cache. LRU cache size (2000) based on [ECS service quota](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-quotas.html)\n4. Check the Container Docker Label if there is Docker Label based Service Discovery config\n5. Check the Task Definition ARN if there is Task Definition ARN Regex config\n6. Filter the ECS tasks that match the abo",
                    "rendered": {
                      "text": "e specific ECS cluster by `ECS:ListTasks paginated call`\n2. Describe the ECS tasks based on the ListTasks response `ECS:DescribeTasks batch call`\n3. Get the ECS Task Definition from LRU cache, if there is none in cache, call `ECS:DescribeTaskDefinition` and cache. LRU cache size (2000) based on [ECS service quota](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-quotas.html)\n4. Check the Container Docker Label if there is Docker Label based Service Discovery config\n5. Check the Task Definition ARN if there is Task Definition ARN Regex config\n6. Filter the ECS tasks that match the abo",
                      "markdown": "`e specific ECS cluster by `ECS:ListTasks paginated call`\n2. Describe the ECS tasks based on the ListTasks response `ECS:DescribeTasks batch call`\n3. Get the ECS Task Definition from LRU cache, if there is none in cache, call `ECS:DescribeTaskDefinition` and cache. LRU cache size (2000) based on [ECS service quota](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-quotas.html)\n4. Check the Container Docker Label if there is Docker Label based Service Discovery config\n5. Check the Task Definition ARN if there is Task Definition ARN Regex config\n6. Filter the ECS tasks that match the abo`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/README.md"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 4,
                  "endLine": 12,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\nTwo modes can be enabled together and CWAgent will de-dup the discovered targets based on: *{private_ip}:{port}/{metrics_path}*\n\n#### Service Discovery Workflow\n\n1. List the current running ECS task ARNs for the specific ECS cluster by `ECS:ListTasks paginated call`\n2. Describe the ECS tasks based on the ListTasks response `ECS:DescribeTasks batch call`\n",
                    "rendered": {
                      "text": "\nTwo modes can be enabled together and CWAgent will de-dup the discovered targets based on: *{private_ip}:{port}/{metrics_path}*\n\n#### Service Discovery Workflow\n\n1. List the current running ECS task ARNs for the specific ECS cluster by `ECS:ListTasks paginated call`\n2. Describe the ECS tasks based on the ListTasks response `ECS:DescribeTasks batch call`\n",
                      "markdown": "`\nTwo modes can be enabled together and CWAgent will de-dup the discovered targets based on: *{private_ip}:{port}/{metrics_path}*\n\n#### Service Discovery Workflow\n\n1. List the current running ECS task ARNs for the specific ECS cluster by `ECS:ListTasks paginated call`\n2. Describe the ECS tasks based on the ListTasks response `ECS:DescribeTasks batch call`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/README.md"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 232,
                  "endLine": 7,
                  "endColumn": 240,
                  "snippet": {
                    "text": "es to discover the Prometheus targets based on the customer config:\n* **Mode 1: Docker label Based:** Customers add the docker labels to the containers to indicate the port and metric path of the Prometheus metrics. Customers configure the CWAgent to discover the Prometheus targets with the matching docker label and container port.\n* **Mode 2: ECS Task Definition ARN based:**  Customers configure the CWAgent to discover the Prometheus targets when its ECS task definition arn matches the configured regex and it matches the configured container ports.\n\nTwo modes can be enabled together and CWAgent will ",
                    "rendered": {
                      "text": "es to discover the Prometheus targets based on the customer config:\n* **Mode 1: Docker label Based:** Customers add the docker labels to the containers to indicate the port and metric path of the Prometheus metrics. Customers configure the CWAgent to discover the Prometheus targets with the matching docker label and container port.\n* **Mode 2: ECS Task Definition ARN based:**  Customers configure the CWAgent to discover the Prometheus targets when its ECS task definition arn matches the configured regex and it matches the configured container ports.\n\nTwo modes can be enabled together and CWAgent will ",
                      "markdown": "`es to discover the Prometheus targets based on the customer config:\n* **Mode 1: Docker label Based:** Customers add the docker labels to the containers to indicate the port and metric path of the Prometheus metrics. Customers configure the CWAgent to discover the Prometheus targets with the matching docker label and container port.\n* **Mode 2: ECS Task Definition ARN based:**  Customers configure the CWAgent to discover the Prometheus targets when its ECS task definition arn matches the configured regex and it matches the configured container ports.\n\nTwo modes can be enabled together and CWAgent will `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/README.md"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 51,
                  "endLine": 7,
                  "endColumn": 59,
                  "snippet": {
                    "text": "## ECS Prometheus Exporter Auto Discovery\n\n### Overview\nThis module provides the Prometheus exporter auto discovery functionality based on the ECS task metadata.\n\nThere are two modes to discover the Prometheus targets based on the customer config:\n* **Mode 1: Docker label Based:** Customers add the docker labels to the containers to indicate the port and metric path of the Prometheus metrics. Customers configure the CWAgent to discover the Prometheus targets with the matching docker label and container port.\n* **Mode 2: ECS Task Definition ARN based:**  Customers configure the CWAgent to discover the",
                    "rendered": {
                      "text": "## ECS Prometheus Exporter Auto Discovery\n\n### Overview\nThis module provides the Prometheus exporter auto discovery functionality based on the ECS task metadata.\n\nThere are two modes to discover the Prometheus targets based on the customer config:\n* **Mode 1: Docker label Based:** Customers add the docker labels to the containers to indicate the port and metric path of the Prometheus metrics. Customers configure the CWAgent to discover the Prometheus targets with the matching docker label and container port.\n* **Mode 2: ECS Task Definition ARN based:**  Customers configure the CWAgent to discover the",
                      "markdown": "`## ECS Prometheus Exporter Auto Discovery\n\n### Overview\nThis module provides the Prometheus exporter auto discovery functionality based on the ECS task metadata.\n\nThere are two modes to discover the Prometheus targets based on the customer config:\n* **Mode 1: Docker label Based:** Customers add the docker labels to the containers to indicate the port and metric path of the Prometheus metrics. Customers configure the CWAgent to discover the Prometheus targets with the matching docker label and container port.\n* **Mode 2: ECS Task Definition ARN based:**  Customers configure the CWAgent to discover the`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/README.md"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 11,
                  "endLine": 7,
                  "endColumn": 19,
                  "snippet": {
                    "text": "## ECS Prometheus Exporter Auto Discovery\n\n### Overview\nThis module provides the Prometheus exporter auto discovery functionality based on the ECS task metadata.\n\nThere are two modes to discover the Prometheus targets based on the customer config:\n* **Mode 1: Docker label Based:** Customers add the docker labels to the containers to indicate the port and metric path of the Prometheus metrics. Customers configure the CWAgent to discover the Prometheus targets with the matching docker label and container port.\n* **Mode 2: ECS Task Definition ARN based:**  Custome",
                    "rendered": {
                      "text": "## ECS Prometheus Exporter Auto Discovery\n\n### Overview\nThis module provides the Prometheus exporter auto discovery functionality based on the ECS task metadata.\n\nThere are two modes to discover the Prometheus targets based on the customer config:\n* **Mode 1: Docker label Based:** Customers add the docker labels to the containers to indicate the port and metric path of the Prometheus metrics. Customers configure the CWAgent to discover the Prometheus targets with the matching docker label and container port.\n* **Mode 2: ECS Task Definition ARN based:**  Custome",
                      "markdown": "`## ECS Prometheus Exporter Auto Discovery\n\n### Overview\nThis module provides the Prometheus exporter auto discovery functionality based on the ECS task metadata.\n\nThere are two modes to discover the Prometheus targets based on the customer config:\n* **Mode 1: Docker label Based:** Customers add the docker labels to the containers to indicate the port and metric path of the Prometheus metrics. Customers configure the CWAgent to discover the Prometheus targets with the matching docker label and container port.\n* **Mode 2: ECS Task Definition ARN based:**  Custome`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/decoratedtask.go"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 3,
                  "endLine": 320,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\nfunc (t *DecoratedTask) ExporterInformation(config *ServiceDiscoveryConfig, dockerLabelRegex *regexp.Regexp, targets map[string]*PrometheusTarget) {\n\tip := t.getPrivateIp()\n\tif ip == \"\" {\n\t\treturn\n\t}\n\tfor _, c := range t.TaskDefinition.ContainerDefinitions {\n",
                    "rendered": {
                      "text": "\nfunc (t *DecoratedTask) ExporterInformation(config *ServiceDiscoveryConfig, dockerLabelRegex *regexp.Regexp, targets map[string]*PrometheusTarget) {\n\tip := t.getPrivateIp()\n\tif ip == \"\" {\n\t\treturn\n\t}\n\tfor _, c := range t.TaskDefinition.ContainerDefinitions {\n",
                      "markdown": "`\nfunc (t *DecoratedTask) ExporterInformation(config *ServiceDiscoveryConfig, dockerLabelRegex *regexp.Regexp, targets map[string]*PrometheusTarget) {\n\tip := t.getPrivateIp()\n\tif ip == \"\" {\n\t\treturn\n\t}\n\tfor _, c := range t.TaskDefinition.ContainerDefinitions {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/decoratedtask.go"
                },
                "region": {
                  "startLine": 319,
                  "endLine": 319,
                  "endColumn": 4,
                  "snippet": {
                    "text": "}\n\nfunc (t *DecoratedTask) ExporterInformation(config *ServiceDiscoveryConfig, dockerLabelRegex *regexp.Regexp, targets map[string]*PrometheusTarget) {\n\tip := t.getPrivateIp()\n\tif ip == \"\" {\n\t\treturn\n\t}\n",
                    "rendered": {
                      "text": "}\n\nfunc (t *DecoratedTask) ExporterInformation(config *ServiceDiscoveryConfig, dockerLabelRegex *regexp.Regexp, targets map[string]*PrometheusTarget) {\n\tip := t.getPrivateIp()\n\tif ip == \"\" {\n\t\treturn\n\t}\n",
                      "markdown": "`}\n\nfunc (t *DecoratedTask) ExporterInformation(config *ServiceDiscoveryConfig, dockerLabelRegex *regexp.Regexp, targets map[string]*PrometheusTarget) {\n\tip := t.getPrivateIp()\n\tif ip == \"\" {\n\t\treturn\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/decoratedtask.go"
                },
                "region": {
                  "startLine": 276,
                  "endLine": 276,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nfunc (t *DecoratedTask) exportServiceEndpointBasedTarget(config *ServiceDiscoveryConfig,\n\tdockerLabelReg *regexp.Regexp,\n\tip string,\n\tc *ecs.ContainerDefinition,\n\ttargets map[string]*PrometheusTarget) {\n\n",
                    "rendered": {
                      "text": "\nfunc (t *DecoratedTask) exportServiceEndpointBasedTarget(config *ServiceDiscoveryConfig,\n\tdockerLabelReg *regexp.Regexp,\n\tip string,\n\tc *ecs.ContainerDefinition,\n\ttargets map[string]*PrometheusTarget) {\n\n",
                      "markdown": "`\nfunc (t *DecoratedTask) exportServiceEndpointBasedTarget(config *ServiceDiscoveryConfig,\n\tdockerLabelReg *regexp.Regexp,\n\tip string,\n\tc *ecs.ContainerDefinition,\n\ttargets map[string]*PrometheusTarget) {\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/decoratedtask.go"
                },
                "region": {
                  "startLine": 233,
                  "endLine": 233,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nfunc (t *DecoratedTask) exportTaskDefinitionBasedTarget(config *ServiceDiscoveryConfig,\n\tdockerLabelReg *regexp.Regexp,\n\tip string,\n\tc *ecs.ContainerDefinition,\n\ttargets map[string]*PrometheusTarget) {\n\n",
                    "rendered": {
                      "text": "\nfunc (t *DecoratedTask) exportTaskDefinitionBasedTarget(config *ServiceDiscoveryConfig,\n\tdockerLabelReg *regexp.Regexp,\n\tip string,\n\tc *ecs.ContainerDefinition,\n\ttargets map[string]*PrometheusTarget) {\n\n",
                      "markdown": "`\nfunc (t *DecoratedTask) exportTaskDefinitionBasedTarget(config *ServiceDiscoveryConfig,\n\tdockerLabelReg *regexp.Regexp,\n\tip string,\n\tc *ecs.ContainerDefinition,\n\ttargets map[string]*PrometheusTarget) {\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/decoratedtask.go"
                },
                "region": {
                  "startLine": 186,
                  "endLine": 186,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nfunc (t *DecoratedTask) exportDockerLabelBasedTarget(config *ServiceDiscoveryConfig,\n\tdockerLabelReg *regexp.Regexp,\n\tip string,\n\tc *ecs.ContainerDefinition,\n\ttargets map[string]*PrometheusTarget) {\n\n",
                    "rendered": {
                      "text": "\nfunc (t *DecoratedTask) exportDockerLabelBasedTarget(config *ServiceDiscoveryConfig,\n\tdockerLabelReg *regexp.Regexp,\n\tip string,\n\tc *ecs.ContainerDefinition,\n\ttargets map[string]*PrometheusTarget) {\n\n",
                      "markdown": "`\nfunc (t *DecoratedTask) exportDockerLabelBasedTarget(config *ServiceDiscoveryConfig,\n\tdockerLabelReg *regexp.Regexp,\n\tip string,\n\tc *ecs.ContainerDefinition,\n\ttargets map[string]*PrometheusTarget) {\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/decoratedtask.go"
                },
                "region": {
                  "startLine": 133,
                  "endLine": 133,
                  "endColumn": 4,
                  "snippet": {
                    "text": "func (t *DecoratedTask) generatePrometheusTarget(\n\tdockerLabelReg *regexp.Regexp,\n\tc *ecs.ContainerDefinition,\n\tip string,\n\tmappedPort int64,\n\tmetricsPath string,\n\tcustomizedJobName string) *PrometheusTarget {\n",
                    "rendered": {
                      "text": "func (t *DecoratedTask) generatePrometheusTarget(\n\tdockerLabelReg *regexp.Regexp,\n\tc *ecs.ContainerDefinition,\n\tip string,\n\tmappedPort int64,\n\tmetricsPath string,\n\tcustomizedJobName string) *PrometheusTarget {\n",
                      "markdown": "`func (t *DecoratedTask) generatePrometheusTarget(\n\tdockerLabelReg *regexp.Regexp,\n\tc *ecs.ContainerDefinition,\n\tip string,\n\tmappedPort int64,\n\tmetricsPath string,\n\tcustomizedJobName string) *PrometheusTarget {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/util/user/userutil_darwin.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 12,
                  "snippet": {
                    "text": "func dsLookup(username string) (*user.User, error) {\n\t// dscacheutil -q user -a name cwagent\n\t// name: cwagent\n\t// password: ********\n\t// uid: 1881561228\n\t// gid: 2896053708\n\t// dir: /Users/cwagent\n",
                    "rendered": {
                      "text": "func dsLookup(username string) (*user.User, error) {\n\t// dscacheutil -q user -a name cwagent\n\t// name: cwagent\n\t// password: ********\n\t// uid: 1881561228\n\t// gid: 2896053708\n\t// dir: /Users/cwagent\n",
                      "markdown": "`func dsLookup(username string) (*user.User, error) {\n\t// dscacheutil -q user -a name cwagent\n\t// name: cwagent\n\t// password: ********\n\t// uid: 1881561228\n\t// gid: 2896053708\n\t// dir: /Users/cwagent\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/util/user/userutil_darwin.go"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 1,
                  "endLine": 65,
                  "endColumn": 6,
                  "snippet": {
                    "text": "func runDS(args ...string) (map[string]string, error) {\n\tb, err := exec.Command(dsbin, args...).CombinedOutput()\n\tif err != nil {\n\t\tcmd := strings.Join(append([]string{dsbin}, args...), \" \")\n\t\treturn nil, fmt.Errorf(\"error query directory service using %s: %w output %s\", cmd, err, b)\n\t}\n\treturn parseDSOutput(string(b))\n",
                    "rendered": {
                      "text": "func runDS(args ...string) (map[string]string, error) {\n\tb, err := exec.Command(dsbin, args...).CombinedOutput()\n\tif err != nil {\n\t\tcmd := strings.Join(append([]string{dsbin}, args...), \" \")\n\t\treturn nil, fmt.Errorf(\"error query directory service using %s: %w output %s\", cmd, err, b)\n\t}\n\treturn parseDSOutput(string(b))\n",
                      "markdown": "`func runDS(args ...string) (map[string]string, error) {\n\tb, err := exec.Command(dsbin, args...).CombinedOutput()\n\tif err != nil {\n\t\tcmd := strings.Join(append([]string{dsbin}, args...), \" \")\n\t\treturn nil, fmt.Errorf(\"error query directory service using %s: %w output %s\", cmd, err, b)\n\t}\n\treturn parseDSOutput(string(b))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/util/user/userutil_darwin.go"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 47,
                  "endLine": 66,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\tb, err := exec.Command(dsbin, args...).CombinedOutput()\n\tif err != nil {\n\t\tcmd := strings.Join(append([]string{dsbin}, args...), \" \")\n\t\treturn nil, fmt.Errorf(\"error query directory service using %s: %w output %s\", cmd, err, b)\n\t}\n\treturn parseDSOutput(string(b))\n}\n",
                    "rendered": {
                      "text": "\tb, err := exec.Command(dsbin, args...).CombinedOutput()\n\tif err != nil {\n\t\tcmd := strings.Join(append([]string{dsbin}, args...), \" \")\n\t\treturn nil, fmt.Errorf(\"error query directory service using %s: %w output %s\", cmd, err, b)\n\t}\n\treturn parseDSOutput(string(b))\n}\n",
                      "markdown": "`\tb, err := exec.Command(dsbin, args...).CombinedOutput()\n\tif err != nil {\n\t\tcmd := strings.Join(append([]string{dsbin}, args...), \" \")\n\t\treturn nil, fmt.Errorf(\"error query directory service using %s: %w output %s\", cmd, err, b)\n\t}\n\treturn parseDSOutput(string(b))\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/exec_unix.go"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 29,
                  "endLine": 22,
                  "endColumn": 38,
                  "snippet": {
                    "text": "// WaitTimeout waits for the given command to finish with a timeout.\n// It assumes the command has already been started.\n// If the command times out, it attempts to kill the process.\nfunc WaitTimeout(c *exec.Cmd, timeout time.Duration) error {\n\tvar kill *time.Timer\n\tterm := time.AfterFunc(timeout, func() {\n\t\terr := syscall.Kill(-c.Process.Pid, syscall.SIGTERM)\n",
                    "rendered": {
                      "text": "// WaitTimeout waits for the given command to finish with a timeout.\n// It assumes the command has already been started.\n// If the command times out, it attempts to kill the process.\nfunc WaitTimeout(c *exec.Cmd, timeout time.Duration) error {\n\tvar kill *time.Timer\n\tterm := time.AfterFunc(timeout, func() {\n\t\terr := syscall.Kill(-c.Process.Pid, syscall.SIGTERM)\n",
                      "markdown": "`// WaitTimeout waits for the given command to finish with a timeout.\n// It assumes the command has already been started.\n// If the command times out, it attempts to kill the process.\nfunc WaitTimeout(c *exec.Cmd, timeout time.Duration) error {\n\tvar kill *time.Timer\n\tterm := time.AfterFunc(timeout, func() {\n\t\terr := syscall.Kill(-c.Process.Pid, syscall.SIGTERM)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/exec_windows.go"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 29,
                  "endLine": 17,
                  "endColumn": 38,
                  "snippet": {
                    "text": "// WaitTimeout waits for the given command to finish with a timeout.\n// It assumes the command has already been started.\n// If the command times out, it attempts to kill the process.\nfunc WaitTimeout(c *exec.Cmd, timeout time.Duration) error {\n\ttimer := time.AfterFunc(timeout, func() {\n\t\terr := c.Process.Kill()\n\t\tif err != nil {\n",
                    "rendered": {
                      "text": "// WaitTimeout waits for the given command to finish with a timeout.\n// It assumes the command has already been started.\n// If the command times out, it attempts to kill the process.\nfunc WaitTimeout(c *exec.Cmd, timeout time.Duration) error {\n\ttimer := time.AfterFunc(timeout, func() {\n\t\terr := c.Process.Kill()\n\t\tif err != nil {\n",
                      "markdown": "`// WaitTimeout waits for the given command to finish with a timeout.\n// It assumes the command has already been started.\n// If the command times out, it attempts to kill the process.\nfunc WaitTimeout(c *exec.Cmd, timeout time.Duration) error {\n\ttimer := time.AfterFunc(timeout, func() {\n\t\terr := c.Process.Kill()\n\t\tif err != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/go.mod"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 79,
                  "endLine": 57,
                  "endColumn": 88,
                  "snippet": {
                    "text": "l v1.8.4\n\n//consul@v1.8.4 points to a commit in go-discover that depends on an older version of kubernetes: kubernetes-1.16.9\n//https://github.com/hashicorp/consul/blob/12b16df320052414244659e4dadda078f67849ed/go.mod#L38\n//This commit contains a dependency in launchpad.net which requires the version control system Bazaar to be set up\n//https://github.com/hashicorp/go-discover/commit/ad1e96bde088162a25dc224d687440181b704162#diff-37aff102a57d3d7b797f152915a6dc16R44\n//To avoid the requirement for Bazaar, we want to replace go-discover with a newer version. However to avoid the upgrade of k8s.io lib from\n/",
                    "rendered": {
                      "text": "l v1.8.4\n\n//consul@v1.8.4 points to a commit in go-discover that depends on an older version of kubernetes: kubernetes-1.16.9\n//https://github.com/hashicorp/consul/blob/12b16df320052414244659e4dadda078f67849ed/go.mod#L38\n//This commit contains a dependency in launchpad.net which requires the version control system Bazaar to be set up\n//https://github.com/hashicorp/go-discover/commit/ad1e96bde088162a25dc224d687440181b704162#diff-37aff102a57d3d7b797f152915a6dc16R44\n//To avoid the requirement for Bazaar, we want to replace go-discover with a newer version. However to avoid the upgrade of k8s.io lib from\n/",
                      "markdown": "`l v1.8.4\n\n//consul@v1.8.4 points to a commit in go-discover that depends on an older version of kubernetes: kubernetes-1.16.9\n//https://github.com/hashicorp/consul/blob/12b16df320052414244659e4dadda078f67849ed/go.mod#L38\n//This commit contains a dependency in launchpad.net which requires the version control system Bazaar to be set up\n//https://github.com/hashicorp/go-discover/commit/ad1e96bde088162a25dc224d687440181b704162#diff-37aff102a57d3d7b797f152915a6dc16R44\n//To avoid the requirement for Bazaar, we want to replace go-discover with a newer version. However to avoid the upgrade of k8s.io lib from\n/`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/go.mod"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 112,
                  "endLine": 108,
                  "endColumn": 121,
                  "snippet": {
                    "text": "\tgithub.com/influxdata/telegraf v0.0.0-00010101000000-000000000000\n\tgithub.com/influxdata/wlog v0.0.0-20160411224016-7c63b0a71ef8\n\tgithub.com/jellydator/ttlcache/v3 v3.2.0\n\tgithub.com/kardianos/service v1.2.1 // Keep this pinned to v1.2.1. v1.2.2 causes the agent to not register as a service on Windows\n\tgithub.com/knadh/koanf v1.5.0\n\tgithub.com/knadh/koanf/v2 v2.1.1\n\tgithub.com/kr/pretty v0.3.1\n",
                    "rendered": {
                      "text": "\tgithub.com/influxdata/telegraf v0.0.0-00010101000000-000000000000\n\tgithub.com/influxdata/wlog v0.0.0-20160411224016-7c63b0a71ef8\n\tgithub.com/jellydator/ttlcache/v3 v3.2.0\n\tgithub.com/kardianos/service v1.2.1 // Keep this pinned to v1.2.1. v1.2.2 causes the agent to not register as a service on Windows\n\tgithub.com/knadh/koanf v1.5.0\n\tgithub.com/knadh/koanf/v2 v2.1.1\n\tgithub.com/kr/pretty v0.3.1\n",
                      "markdown": "`\tgithub.com/influxdata/telegraf v0.0.0-00010101000000-000000000000\n\tgithub.com/influxdata/wlog v0.0.0-20160411224016-7c63b0a71ef8\n\tgithub.com/jellydator/ttlcache/v3 v3.2.0\n\tgithub.com/kardianos/service v1.2.1 // Keep this pinned to v1.2.1. v1.2.2 causes the agent to not register as a service on Windows\n\tgithub.com/knadh/koanf v1.5.0\n\tgithub.com/knadh/koanf/v2 v2.1.1\n\tgithub.com/kr/pretty v0.3.1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/go.mod"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 96,
                  "endLine": 86,
                  "snippet": {
                    "text": "// go-kit has the fix for nats-io/jwt/v2 merged but not released yet. Replacing this version for now until next release.\nreplace github.com/go-kit/kit => github.com/go-kit/kit v0.12.1-0.20220808180842-62c81a0f3047\n\n// openshift removed all tags from their repo, use the pseudoversion from the release-3.9 branch HEAD\nreplace github.com/openshift/api v3.9.0+incompatible => github.com/openshift/api v0.0.0-20180801171038-322a19404e37\n\n// forces version bump to support log group classes\nreplace github.com/aws/aws-sdk-go => github.com/aws/aws-sdk-go v1.48.6\n",
                    "rendered": {
                      "text": "// go-kit has the fix for nats-io/jwt/v2 merged but not released yet. Replacing this version for now until next release.\nreplace github.com/go-kit/kit => github.com/go-kit/kit v0.12.1-0.20220808180842-62c81a0f3047\n\n// openshift removed all tags from their repo, use the pseudoversion from the release-3.9 branch HEAD\nreplace github.com/openshift/api v3.9.0+incompatible => github.com/openshift/api v0.0.0-20180801171038-322a19404e37\n\n// forces version bump to support log group classes\nreplace github.com/aws/aws-sdk-go => github.com/aws/aws-sdk-go v1.48.6\n",
                      "markdown": "`// go-kit has the fix for nats-io/jwt/v2 merged but not released yet. Replacing this version for now until next release.\nreplace github.com/go-kit/kit => github.com/go-kit/kit v0.12.1-0.20220808180842-62c81a0f3047\n\n// openshift removed all tags from their repo, use the pseudoversion from the release-3.9 branch HEAD\nreplace github.com/openshift/api v3.9.0+incompatible => github.com/openshift/api v0.0.0-20180801171038-322a19404e37\n\n// forces version bump to support log group classes\nreplace github.com/aws/aws-sdk-go => github.com/aws/aws-sdk-go v1.48.6\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/go.mod"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 91,
                  "endLine": 64,
                  "endColumn": 96,
                  "snippet": {
                    "text": "sul is used only in telegraf, so the replacement here should not affect amazon-cloudwatch-agent\nreplace github.com/hashicorp/go-discover => github.com/hashicorp/go-discover v0.0.0-20200713171816-3392d2f47463\n\n//proxy.golang.org has versions of golang.zx2c4.com/wireguard with leading v's, whereas the git repo has tags without\n//leading v's: https://git.zx2c4.com/wireguard-go/refs/tags\n//So, fetching this module with version v0.0.20200121 (as done by the transitive dependency\n//https://github.com/WireGuard/wgctrl-go/blob/e35592f146e40ce8057113d14aafcc3da231fbac/go.mod#L12 ) was not working when\n//usi",
                    "rendered": {
                      "text": "sul is used only in telegraf, so the replacement here should not affect amazon-cloudwatch-agent\nreplace github.com/hashicorp/go-discover => github.com/hashicorp/go-discover v0.0.0-20200713171816-3392d2f47463\n\n//proxy.golang.org has versions of golang.zx2c4.com/wireguard with leading v's, whereas the git repo has tags without\n//leading v's: https://git.zx2c4.com/wireguard-go/refs/tags\n//So, fetching this module with version v0.0.20200121 (as done by the transitive dependency\n//https://github.com/WireGuard/wgctrl-go/blob/e35592f146e40ce8057113d14aafcc3da231fbac/go.mod#L12 ) was not working when\n//usi",
                      "markdown": "`sul is used only in telegraf, so the replacement here should not affect amazon-cloudwatch-agent\nreplace github.com/hashicorp/go-discover => github.com/hashicorp/go-discover v0.0.0-20200713171816-3392d2f47463\n\n//proxy.golang.org has versions of golang.zx2c4.com/wireguard with leading v's, whereas the git repo has tags without\n//leading v's: https://git.zx2c4.com/wireguard-go/refs/tags\n//So, fetching this module with version v0.0.20200121 (as done by the transitive dependency\n//https://github.com/WireGuard/wgctrl-go/blob/e35592f146e40ce8057113d14aafcc3da231fbac/go.mod#L12 ) was not working when\n//usi`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/processor/rollupprocessor/cache_test.go"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 20,
                  "endLine": 19,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\tcache := &nopRollupCache{}\n\tkey := cache.Key(pcommon.NewMap())\n\tassert.Equal(t, \"\", key)\n\tassert.Nil(t, cache.Get(key))\n\tassert.Nil(t, cache.Set(key, nil, time.Millisecond))\n}\n\n",
                    "rendered": {
                      "text": "\tcache := &nopRollupCache{}\n\tkey := cache.Key(pcommon.NewMap())\n\tassert.Equal(t, \"\", key)\n\tassert.Nil(t, cache.Get(key))\n\tassert.Nil(t, cache.Set(key, nil, time.Millisecond))\n}\n\n",
                      "markdown": "`\tcache := &nopRollupCache{}\n\tkey := cache.Key(pcommon.NewMap())\n\tassert.Equal(t, \"\", key)\n\tassert.Nil(t, cache.Get(key))\n\tassert.Nil(t, cache.Set(key, nil, time.Millisecond))\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/processor/rollupprocessor/processor.go"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 30,
                  "endLine": 162,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\t\tattributes := pcommon.NewMap()\n\t\tattributes.EnsureCapacity(len(rollupGroup))\n\t\tfor _, key := range rollupGroup {\n\t\t\tvalue, ok := baseAttributes.Get(key)\n\t\t\tif !ok {\n\t\t\t\tbreak\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\tattributes := pcommon.NewMap()\n\t\tattributes.EnsureCapacity(len(rollupGroup))\n\t\tfor _, key := range rollupGroup {\n\t\t\tvalue, ok := baseAttributes.Get(key)\n\t\t\tif !ok {\n\t\t\t\tbreak\n\t\t\t}\n",
                      "markdown": "`\t\tattributes := pcommon.NewMap()\n\t\tattributes.EnsureCapacity(len(rollupGroup))\n\t\tfor _, key := range rollupGroup {\n\t\t\tvalue, ok := baseAttributes.Get(key)\n\t\t\tif !ok {\n\t\t\t\tbreak\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/processor/rollupprocessor/processor.go"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 15,
                  "endLine": 135,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t\treturn\n\t\t}\n\t\tkey := cache.Key(origDataPoint.Attributes())\n\t\titem := cache.Get(key)\n\t\tvar rollup []pcommon.Map\n\t\tif item == nil {\n\t\t\trollup = buildRollup(attributeGroups, origDataPoint.Attributes())\n",
                    "rendered": {
                      "text": "\t\t\treturn\n\t\t}\n\t\tkey := cache.Key(origDataPoint.Attributes())\n\t\titem := cache.Get(key)\n\t\tvar rollup []pcommon.Map\n\t\tif item == nil {\n\t\t\trollup = buildRollup(attributeGroups, origDataPoint.Attributes())\n",
                      "markdown": "`\t\t\treturn\n\t\t}\n\t\tkey := cache.Key(origDataPoint.Attributes())\n\t\titem := cache.Get(key)\n\t\tvar rollup []pcommon.Map\n\t\tif item == nil {\n\t\t\trollup = buildRollup(attributeGroups, origDataPoint.Attributes())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cfg/aws/refreshable_shared_credentials_provider_test.go"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 13,
                  "endLine": 39,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\ttime.Sleep(2 * time.Second)\n\n\tassert.True(t, p.IsExpired(), \"Expect creds to be expired.\")\n\tcreds, _ = p.Get()\n\tassert.Equal(t, \"o1rLDaaaccc\", creds.SecretAccessKey)\n\tassert.False(t, p.IsExpired(), \"Expect creds not to be expired.\")\n\n",
                    "rendered": {
                      "text": "\ttime.Sleep(2 * time.Second)\n\n\tassert.True(t, p.IsExpired(), \"Expect creds to be expired.\")\n\tcreds, _ = p.Get()\n\tassert.Equal(t, \"o1rLDaaaccc\", creds.SecretAccessKey)\n\tassert.False(t, p.IsExpired(), \"Expect creds not to be expired.\")\n\n",
                      "markdown": "`\ttime.Sleep(2 * time.Second)\n\n\tassert.True(t, p.IsExpired(), \"Expect creds to be expired.\")\n\tcreds, _ = p.Get()\n\tassert.Equal(t, \"o1rLDaaaccc\", creds.SecretAccessKey)\n\tassert.False(t, p.IsExpired(), \"Expect creds not to be expired.\")\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cfg/aws/refreshable_shared_credentials_provider_test.go"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 14,
                  "endLine": 27,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t},\n\t\tExpiryWindow: 1 * time.Second,\n\t})\n\tcreds, _ := p.Get()\n\tassert.Equal(t, \"o1rLD3ykKN09\", creds.SecretAccessKey)\n\ttime.Sleep(1 * time.Millisecond)\n\n",
                    "rendered": {
                      "text": "\t\t},\n\t\tExpiryWindow: 1 * time.Second,\n\t})\n\tcreds, _ := p.Get()\n\tassert.Equal(t, \"o1rLD3ykKN09\", creds.SecretAccessKey)\n\ttime.Sleep(1 * time.Millisecond)\n\n",
                      "markdown": "`\t\t},\n\t\tExpiryWindow: 1 * time.Second,\n\t})\n\tcreds, _ := p.Get()\n\tassert.Equal(t, \"o1rLD3ykKN09\", creds.SecretAccessKey)\n\ttime.Sleep(1 * time.Millisecond)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cfg/aws/credentials.go"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 36,
                  "endLine": 102,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\t\t}\n\t}\n\tlog.Printf(\"D! Successfully created credential sessions\\n\")\n\tcred, err := ses.Config.Credentials.Get()\n\tif err != nil {\n\t\tlog.Printf(\"E! Failed to get credential from session: %v\", err)\n\t} else {\n",
                    "rendered": {
                      "text": "\t\t}\n\t}\n\tlog.Printf(\"D! Successfully created credential sessions\\n\")\n\tcred, err := ses.Config.Credentials.Get()\n\tif err != nil {\n\t\tlog.Printf(\"E! Failed to get credential from session: %v\", err)\n\t} else {\n",
                      "markdown": "`\t\t}\n\t}\n\tlog.Printf(\"D! Successfully created credential sessions\\n\")\n\tcred, err := ses.Config.Credentials.Get()\n\tif err != nil {\n\t\tlog.Printf(\"E! Failed to get credential from session: %v\", err)\n\t} else {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cfg/aws/credentials.go"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 59,
                  "endLine": 248,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\t\t},\n\t\tCredentials: func(c *CredentialConfig) *credentials.Credentials {\n\t\t\tif c.AccessKey != \"\" || c.SecretKey != \"\" {\n\t\t\t\treturn credentials.NewStaticCredentials(c.AccessKey, c.SecretKey, c.Token)\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n",
                    "rendered": {
                      "text": "\t\t},\n\t\tCredentials: func(c *CredentialConfig) *credentials.Credentials {\n\t\t\tif c.AccessKey != \"\" || c.SecretKey != \"\" {\n\t\t\t\treturn credentials.NewStaticCredentials(c.AccessKey, c.SecretKey, c.Token)\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n",
                      "markdown": "`\t\t},\n\t\tCredentials: func(c *CredentialConfig) *credentials.Credentials {\n\t\t\tif c.AccessKey != \"\" || c.SecretKey != \"\" {\n\t\t\t\treturn credentials.NewStaticCredentials(c.AccessKey, c.SecretKey, c.Token)\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cfg/aws/credentials.go"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 29,
                  "endLine": 247,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t\t\treturn \"StaticCredentialsProvider\"\n\t\t},\n\t\tCredentials: func(c *CredentialConfig) *credentials.Credentials {\n\t\t\tif c.AccessKey != \"\" || c.SecretKey != \"\" {\n\t\t\t\treturn credentials.NewStaticCredentials(c.AccessKey, c.SecretKey, c.Token)\n\t\t\t}\n\t\t\treturn nil\n",
                    "rendered": {
                      "text": "\t\t\treturn \"StaticCredentialsProvider\"\n\t\t},\n\t\tCredentials: func(c *CredentialConfig) *credentials.Credentials {\n\t\t\tif c.AccessKey != \"\" || c.SecretKey != \"\" {\n\t\t\t\treturn credentials.NewStaticCredentials(c.AccessKey, c.SecretKey, c.Token)\n\t\t\t}\n\t\t\treturn nil\n",
                      "markdown": "`\t\t\treturn \"StaticCredentialsProvider\"\n\t\t},\n\t\tCredentials: func(c *CredentialConfig) *credentials.Credentials {\n\t\t\tif c.AccessKey != \"\" || c.SecretKey != \"\" {\n\t\t\t\treturn credentials.NewStaticCredentials(c.AccessKey, c.SecretKey, c.Token)\n\t\t\t}\n\t\t\treturn nil\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cfg/aws/credentials.go"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 1,
                  "endLine": 40,
                  "endColumn": 10,
                  "snippet": {
                    "text": "type CredentialConfig struct {\n\tRegion    string\n\tAccessKey string\n\tSecretKey string\n\tRoleARN   string\n\tProfile   string\n\tFilename  string\n",
                    "rendered": {
                      "text": "type CredentialConfig struct {\n\tRegion    string\n\tAccessKey string\n\tSecretKey string\n\tRoleARN   string\n\tProfile   string\n\tFilename  string\n",
                      "markdown": "`type CredentialConfig struct {\n\tRegion    string\n\tAccessKey string\n\tSecretKey string\n\tRoleARN   string\n\tProfile   string\n\tFilename  string\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cfg/aws/credentials.go"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 11,
                  "endLine": 118,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t}\n\t\tif len(found) > 0 {\n\t\t\tlog.Printf(\"W! Unused shared config file(s) found: %v. If you would like to use them, \"+\n\t\t\t\t\"please update your common-config.toml.\", found)\n\t\t\tagent.UsageFlags().Set(agent.FlagSharedConfigFallback)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\t\t}\n\t\tif len(found) > 0 {\n\t\t\tlog.Printf(\"W! Unused shared config file(s) found: %v. If you would like to use them, \"+\n\t\t\t\t\"please update your common-config.toml.\", found)\n\t\t\tagent.UsageFlags().Set(agent.FlagSharedConfigFallback)\n\t\t}\n\t}\n",
                      "markdown": "`\t\t}\n\t\tif len(found) > 0 {\n\t\t\tlog.Printf(\"W! Unused shared config file(s) found: %v. If you would like to use them, \"+\n\t\t\t\t\"please update your common-config.toml.\", found)\n\t\t\tagent.UsageFlags().Set(agent.FlagSharedConfigFallback)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cfg/envconfig/envconfig_test.go"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 6,
                  "endLine": 31,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\tt.Setenv(RunInContainer, \"TRUE\")\n\tassert.False(t, IsRunningInContainer())\n\n\tt.Setenv(RunInContainer, TrueValue)\n\tassert.True(t, IsRunningInContainer())\n}\n",
                    "rendered": {
                      "text": "\tt.Setenv(RunInContainer, \"TRUE\")\n\tassert.False(t, IsRunningInContainer())\n\n\tt.Setenv(RunInContainer, TrueValue)\n\tassert.True(t, IsRunningInContainer())\n}\n",
                      "markdown": "`\tt.Setenv(RunInContainer, \"TRUE\")\n\tassert.False(t, IsRunningInContainer())\n\n\tt.Setenv(RunInContainer, TrueValue)\n\tassert.True(t, IsRunningInContainer())\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cfg/envconfig/envconfig_test.go"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 6,
                  "endLine": 28,
                  "endColumn": 16,
                  "snippet": {
                    "text": "func TestIsRunningInContainer(t *testing.T) {\n\tassert.False(t, IsRunningInContainer())\n\n\tt.Setenv(RunInContainer, \"TRUE\")\n\tassert.False(t, IsRunningInContainer())\n\n\tt.Setenv(RunInContainer, TrueValue)\n",
                    "rendered": {
                      "text": "func TestIsRunningInContainer(t *testing.T) {\n\tassert.False(t, IsRunningInContainer())\n\n\tt.Setenv(RunInContainer, \"TRUE\")\n\tassert.False(t, IsRunningInContainer())\n\n\tt.Setenv(RunInContainer, TrueValue)\n",
                      "markdown": "`func TestIsRunningInContainer(t *testing.T) {\n\tassert.False(t, IsRunningInContainer())\n\n\tt.Setenv(RunInContainer, \"TRUE\")\n\tassert.False(t, IsRunningInContainer())\n\n\tt.Setenv(RunInContainer, TrueValue)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cfg/envconfig/envconfig.go"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 39,
                  "endLine": 66,
                  "endColumn": 81,
                  "snippet": {
                    "text": "}\n\nfunc IsWindowsHostProcessContainer() bool {\n\tif runtime.GOOS == \"windows\" && os.Getenv(RunInContainer) == TrueValue && os.Getenv(RunAsHostProcessContainer) == TrueValue {\n\t\treturn true\n\t}\n\treturn false\n",
                    "rendered": {
                      "text": "}\n\nfunc IsWindowsHostProcessContainer() bool {\n\tif runtime.GOOS == \"windows\" && os.Getenv(RunInContainer) == TrueValue && os.Getenv(RunAsHostProcessContainer) == TrueValue {\n\t\treturn true\n\t}\n\treturn false\n",
                      "markdown": "`}\n\nfunc IsWindowsHostProcessContainer() bool {\n\tif runtime.GOOS == \"windows\" && os.Getenv(RunInContainer) == TrueValue && os.Getenv(RunAsHostProcessContainer) == TrueValue {\n\t\treturn true\n\t}\n\treturn false\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cfg/envconfig/envconfig.go"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 14,
                  "endLine": 62,
                  "endColumn": 24,
                  "snippet": {
                    "text": "}\n\nfunc IsRunningInContainer() bool {\n\treturn os.Getenv(RunInContainer) == TrueValue\n}\n\nfunc IsWindowsHostProcessContainer() bool {\n",
                    "rendered": {
                      "text": "}\n\nfunc IsRunningInContainer() bool {\n\treturn os.Getenv(RunInContainer) == TrueValue\n}\n\nfunc IsWindowsHostProcessContainer() bool {\n",
                      "markdown": "`}\n\nfunc IsRunningInContainer() bool {\n\treturn os.Getenv(RunInContainer) == TrueValue\n}\n\nfunc IsWindowsHostProcessContainer() bool {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/cfg/envconfig/envconfig.go"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 34,
                  "endLine": 48,
                  "endColumn": 39,
                  "snippet": {
                    "text": ")\n\n// getUsageDataEnabled returns true for true or invalid\n// examples of invalid are not set env var, \"\", \"invalid\"\nfunc getUsageDataEnabled() bool {\n\tok, err := strconv.ParseBool(os.Getenv(CWAGENT_USAGE_DATA))\n\treturn ok || err != nil\n",
                    "rendered": {
                      "text": ")\n\n// getUsageDataEnabled returns true for true or invalid\n// examples of invalid are not set env var, \"\", \"invalid\"\nfunc getUsageDataEnabled() bool {\n\tok, err := strconv.ParseBool(os.Getenv(CWAGENT_USAGE_DATA))\n\treturn ok || err != nil\n",
                      "markdown": "`)\n\n// getUsageDataEnabled returns true for true or invalid\n// examples of invalid are not set env var, \"\", \"invalid\"\nfunc getUsageDataEnabled() bool {\n\tok, err := strconv.ParseBool(os.Getenv(CWAGENT_USAGE_DATA))\n\treturn ok || err != nil\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 3464,
                  "startColumn": 3,
                  "endLine": 3464,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this file, You can obtain\none at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular file, then\nYou may include the notice in a location (such as a LICENSE file in a relevant\n",
                    "rendered": {
                      "text": "\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this file, You can obtain\none at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular file, then\nYou may include the notice in a location (such as a LICENSE file in a relevant\n",
                      "markdown": "`\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this file, You can obtain\none at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular file, then\nYou may include the notice in a location (such as a LICENSE file in a relevant\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 3319,
                  "startColumn": 26,
                  "endLine": 3319,
                  "endColumn": 30,
                  "snippet": {
                    "text": "      Covered Software is not Incompatible With Secondary Licenses, this\n      License permits You to additionally distribute such Covered Software\n      under the terms of such Secondary License(s), so that the recipient of\n      the Larger Work may, at their option, further distribute the Covered\n      Software under the terms of either this License or such Secondary\n      License(s).\n\n",
                    "rendered": {
                      "text": "      Covered Software is not Incompatible With Secondary Licenses, this\n      License permits You to additionally distribute such Covered Software\n      under the terms of such Secondary License(s), so that the recipient of\n      the Larger Work may, at their option, further distribute the Covered\n      Software under the terms of either this License or such Secondary\n      License(s).\n\n",
                      "markdown": "`      Covered Software is not Incompatible With Secondary Licenses, this\n      License permits You to additionally distribute such Covered Software\n      under the terms of such Secondary License(s), so that the recipient of\n      the Larger Work may, at their option, further distribute the Covered\n      Software under the terms of either this License or such Secondary\n      License(s).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 3302,
                  "startColumn": 53,
                  "endLine": 3302,
                  "endColumn": 57,
                  "snippet": {
                    "text": "         (a) such Covered Software must also be made available in Source Code\n         Form, as described in Section 3.1, and You must inform recipients of\n         the Executable Form how they can obtain a copy of such Source Code\n         Form by reasonable means in a timely manner, at a charge no more than\n         the cost of distribution to the recipient; and\n\n         (b) You may distribute such Executable Form under the terms of this\n",
                    "rendered": {
                      "text": "         (a) such Covered Software must also be made available in Source Code\n         Form, as described in Section 3.1, and You must inform recipients of\n         the Executable Form how they can obtain a copy of such Source Code\n         Form by reasonable means in a timely manner, at a charge no more than\n         the cost of distribution to the recipient; and\n\n         (b) You may distribute such Executable Form under the terms of this\n",
                      "markdown": "`         (a) such Covered Software must also be made available in Source Code\n         Form, as described in Section 3.1, and You must inform recipients of\n         the Executable Form how they can obtain a copy of such Source Code\n         Form by reasonable means in a timely manner, at a charge no more than\n         the cost of distribution to the recipient; and\n\n         (b) You may distribute such Executable Form under the terms of this\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 3207,
                  "startColumn": 57,
                  "endLine": 3207,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\n      1.14. \"You\" (or \"Your\") means an individual or a legal entity exercising\n      rights under this License. For legal entities, \"You\" includes any entity\n      that controls, is controlled by, or is under common control with You. For\n      purposes of this definition, \"control\" means (a) the power, direct or\n      indirect, to cause the direction or management of such entity, whether by\n      contract or otherwise, or (b) ownership of more than fifty percent (50%)\n",
                    "rendered": {
                      "text": "\n      1.14. \"You\" (or \"Your\") means an individual or a legal entity exercising\n      rights under this License. For legal entities, \"You\" includes any entity\n      that controls, is controlled by, or is under common control with You. For\n      purposes of this definition, \"control\" means (a) the power, direct or\n      indirect, to cause the direction or management of such entity, whether by\n      contract or otherwise, or (b) ownership of more than fifty percent (50%)\n",
                      "markdown": "`\n      1.14. \"You\" (or \"Your\") means an individual or a legal entity exercising\n      rights under this License. For legal entities, \"You\" includes any entity\n      that controls, is controlled by, or is under common control with You. For\n      purposes of this definition, \"control\" means (a) the power, direct or\n      indirect, to cause the direction or management of such entity, whether by\n      contract or otherwise, or (b) ownership of more than fifty percent (50%)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 3179,
                  "startColumn": 23,
                  "endLine": 3179,
                  "endColumn": 27,
                  "snippet": {
                    "text": "      1.8. \"License\" means this document.\n\n      1.9. \"Licensable\" means having the right to grant, to the maximum extent\n      possible, whether at the time of the initial grant or subsequently, any\n      and all of the rights conveyed by this License.\n\n      1.10. \"Modifications\" means any of the following:\n",
                    "rendered": {
                      "text": "      1.8. \"License\" means this document.\n\n      1.9. \"Licensable\" means having the right to grant, to the maximum extent\n      possible, whether at the time of the initial grant or subsequently, any\n      and all of the rights conveyed by this License.\n\n      1.10. \"Modifications\" means any of the following:\n",
                      "markdown": "`      1.8. \"License\" means this document.\n\n      1.9. \"Licensable\" means having the right to grant, to the maximum extent\n      possible, whether at the time of the initial grant or subsequently, any\n      and all of the rights conveyed by this License.\n\n      1.10. \"Modifications\" means any of the following:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 3132,
                  "startColumn": 3,
                  "endLine": 3132,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this project, you can obtain\none at http://mozilla.org/MPL/2.0/.\n\n    * Package github.com/hashicorp/go-cleanhttp's source code may be found at:\n      https://src-tarball.s3-us-west-2.amazonaws.com/github_hashicorp.tar\n",
                    "rendered": {
                      "text": "\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this project, you can obtain\none at http://mozilla.org/MPL/2.0/.\n\n    * Package github.com/hashicorp/go-cleanhttp's source code may be found at:\n      https://src-tarball.s3-us-west-2.amazonaws.com/github_hashicorp.tar\n",
                      "markdown": "`\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this project, you can obtain\none at http://mozilla.org/MPL/2.0/.\n\n    * Package github.com/hashicorp/go-cleanhttp's source code may be found at:\n      https://src-tarball.s3-us-west-2.amazonaws.com/github_hashicorp.tar\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 3125,
                  "startColumn": 3,
                  "endLine": 3125,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this project, you can obtain\none at http://mozilla.org/MPL/2.0/.\n** github.com/hashicorp/serf; version v0.9.4 --\nhttps://github.com/hashicorp/serf\nCopyright © 2013 HashiCorp, Inc.\n",
                    "rendered": {
                      "text": "\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this project, you can obtain\none at http://mozilla.org/MPL/2.0/.\n** github.com/hashicorp/serf; version v0.9.4 --\nhttps://github.com/hashicorp/serf\nCopyright © 2013 HashiCorp, Inc.\n",
                      "markdown": "`\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this project, you can obtain\none at http://mozilla.org/MPL/2.0/.\n** github.com/hashicorp/serf; version v0.9.4 --\nhttps://github.com/hashicorp/serf\nCopyright © 2013 HashiCorp, Inc.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 3098,
                  "startColumn": 3,
                  "endLine": 3098,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this file, You can obtain\none at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular file, then\nYou may include the notice in a location (such as a LICENSE file in a relevant\n",
                    "rendered": {
                      "text": "\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this file, You can obtain\none at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular file, then\nYou may include the notice in a location (such as a LICENSE file in a relevant\n",
                      "markdown": "`\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this file, You can obtain\none at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular file, then\nYou may include the notice in a location (such as a LICENSE file in a relevant\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 2953,
                  "startColumn": 26,
                  "endLine": 2953,
                  "endColumn": 30,
                  "snippet": {
                    "text": "      Covered Software is not Incompatible With Secondary Licenses, this\n      License permits You to additionally distribute such Covered Software\n      under the terms of such Secondary License(s), so that the recipient of\n      the Larger Work may, at their option, further distribute the Covered\n      Software under the terms of either this License or such Secondary\n      License(s).\n\n",
                    "rendered": {
                      "text": "      Covered Software is not Incompatible With Secondary Licenses, this\n      License permits You to additionally distribute such Covered Software\n      under the terms of such Secondary License(s), so that the recipient of\n      the Larger Work may, at their option, further distribute the Covered\n      Software under the terms of either this License or such Secondary\n      License(s).\n\n",
                      "markdown": "`      Covered Software is not Incompatible With Secondary Licenses, this\n      License permits You to additionally distribute such Covered Software\n      under the terms of such Secondary License(s), so that the recipient of\n      the Larger Work may, at their option, further distribute the Covered\n      Software under the terms of either this License or such Secondary\n      License(s).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 2936,
                  "startColumn": 53,
                  "endLine": 2936,
                  "endColumn": 57,
                  "snippet": {
                    "text": "         (a) such Covered Software must also be made available in Source Code\n         Form, as described in Section 3.1, and You must inform recipients of\n         the Executable Form how they can obtain a copy of such Source Code\n         Form by reasonable means in a timely manner, at a charge no more than\n         the cost of distribution to the recipient; and\n\n         (b) You may distribute such Executable Form under the terms of this\n",
                    "rendered": {
                      "text": "         (a) such Covered Software must also be made available in Source Code\n         Form, as described in Section 3.1, and You must inform recipients of\n         the Executable Form how they can obtain a copy of such Source Code\n         Form by reasonable means in a timely manner, at a charge no more than\n         the cost of distribution to the recipient; and\n\n         (b) You may distribute such Executable Form under the terms of this\n",
                      "markdown": "`         (a) such Covered Software must also be made available in Source Code\n         Form, as described in Section 3.1, and You must inform recipients of\n         the Executable Form how they can obtain a copy of such Source Code\n         Form by reasonable means in a timely manner, at a charge no more than\n         the cost of distribution to the recipient; and\n\n         (b) You may distribute such Executable Form under the terms of this\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 2841,
                  "startColumn": 57,
                  "endLine": 2841,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\n      1.14. \"You\" (or \"Your\") means an individual or a legal entity exercising\n      rights under this License. For legal entities, \"You\" includes any entity\n      that controls, is controlled by, or is under common control with You. For\n      purposes of this definition, \"control\" means (a) the power, direct or\n      indirect, to cause the direction or management of such entity, whether by\n      contract or otherwise, or (b) ownership of more than fifty percent (50%)\n",
                    "rendered": {
                      "text": "\n      1.14. \"You\" (or \"Your\") means an individual or a legal entity exercising\n      rights under this License. For legal entities, \"You\" includes any entity\n      that controls, is controlled by, or is under common control with You. For\n      purposes of this definition, \"control\" means (a) the power, direct or\n      indirect, to cause the direction or management of such entity, whether by\n      contract or otherwise, or (b) ownership of more than fifty percent (50%)\n",
                      "markdown": "`\n      1.14. \"You\" (or \"Your\") means an individual or a legal entity exercising\n      rights under this License. For legal entities, \"You\" includes any entity\n      that controls, is controlled by, or is under common control with You. For\n      purposes of this definition, \"control\" means (a) the power, direct or\n      indirect, to cause the direction or management of such entity, whether by\n      contract or otherwise, or (b) ownership of more than fifty percent (50%)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 2813,
                  "startColumn": 23,
                  "endLine": 2813,
                  "endColumn": 27,
                  "snippet": {
                    "text": "      1.8. \"License\" means this document.\n\n      1.9. \"Licensable\" means having the right to grant, to the maximum extent\n      possible, whether at the time of the initial grant or subsequently, any\n      and all of the rights conveyed by this License.\n\n      1.10. \"Modifications\" means any of the following:\n",
                    "rendered": {
                      "text": "      1.8. \"License\" means this document.\n\n      1.9. \"Licensable\" means having the right to grant, to the maximum extent\n      possible, whether at the time of the initial grant or subsequently, any\n      and all of the rights conveyed by this License.\n\n      1.10. \"Modifications\" means any of the following:\n",
                      "markdown": "`      1.8. \"License\" means this document.\n\n      1.9. \"Licensable\" means having the right to grant, to the maximum extent\n      possible, whether at the time of the initial grant or subsequently, any\n      and all of the rights conveyed by this License.\n\n      1.10. \"Modifications\" means any of the following:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 2775,
                  "startColumn": 3,
                  "endLine": 2775,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this project, you can obtain\none at http://mozilla.org/MPL/2.0/.\n\nMozilla Public License Version 2.0\n\n",
                    "rendered": {
                      "text": "\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this project, you can obtain\none at http://mozilla.org/MPL/2.0/.\n\nMozilla Public License Version 2.0\n\n",
                      "markdown": "`\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this project, you can obtain\none at http://mozilla.org/MPL/2.0/.\n\nMozilla Public License Version 2.0\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 2768,
                  "startColumn": 3,
                  "endLine": 2768,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this project, you can obtain\none at http://mozilla.org/MPL/2.0/.\n** github.com/hashicorp/memberlist; version v0.1.4 --\nhttps://github.com/hashicorp/memberlist\nCopyright © 2014-2018 HashiCorp, Inc.\n",
                    "rendered": {
                      "text": "\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this project, you can obtain\none at http://mozilla.org/MPL/2.0/.\n** github.com/hashicorp/memberlist; version v0.1.4 --\nhttps://github.com/hashicorp/memberlist\nCopyright © 2014-2018 HashiCorp, Inc.\n",
                      "markdown": "`\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this project, you can obtain\none at http://mozilla.org/MPL/2.0/.\n** github.com/hashicorp/memberlist; version v0.1.4 --\nhttps://github.com/hashicorp/memberlist\nCopyright © 2014-2018 HashiCorp, Inc.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 2761,
                  "startColumn": 3,
                  "endLine": 2761,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this project, you can obtain\none at http://mozilla.org/MPL/2.0/.\n** github.com/hashicorp/go-immutable-radix; version v1.2.0 --\nhttps://github.com/hashicorp/go-immutable-radix\nCopyright © 2014-2018 HashiCorp, Inc.\n",
                    "rendered": {
                      "text": "\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this project, you can obtain\none at http://mozilla.org/MPL/2.0/.\n** github.com/hashicorp/go-immutable-radix; version v1.2.0 --\nhttps://github.com/hashicorp/go-immutable-radix\nCopyright © 2014-2018 HashiCorp, Inc.\n",
                      "markdown": "`\nThis Source Code Form is subject to the terms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not distributed with this project, you can obtain\none at http://mozilla.org/MPL/2.0/.\n** github.com/hashicorp/go-immutable-radix; version v1.2.0 --\nhttps://github.com/hashicorp/go-immutable-radix\nCopyright © 2014-2018 HashiCorp, Inc.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 2283,
                  "startColumn": 40,
                  "endLine": 2283,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\nThe MIT License\n\nCopyright (c) 2014 Benedikt Lang <github at benediktlang.de>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\n",
                    "rendered": {
                      "text": "\nThe MIT License\n\nCopyright (c) 2014 Benedikt Lang <github at benediktlang.de>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\n",
                      "markdown": "`\nThe MIT License\n\nCopyright (c) 2014 Benedikt Lang <github at benediktlang.de>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 2279,
                  "startColumn": 40,
                  "endLine": 2279,
                  "endColumn": 44,
                  "snippet": {
                    "text": "------\n\n** github.com/blang/semver; version v3.1.0 -- https://github.com/blang/semver\nCopyright (c) 2014 Benedikt Lang <github at benediktlang.de>\n\nThe MIT License\n\n",
                    "rendered": {
                      "text": "------\n\n** github.com/blang/semver; version v3.1.0 -- https://github.com/blang/semver\nCopyright (c) 2014 Benedikt Lang <github at benediktlang.de>\n\nThe MIT License\n\n",
                      "markdown": "`------\n\n** github.com/blang/semver; version v3.1.0 -- https://github.com/blang/semver\nCopyright (c) 2014 Benedikt Lang <github at benediktlang.de>\n\nThe MIT License\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 1159,
                  "startColumn": 42,
                  "endLine": 1159,
                  "endColumn": 46,
                  "snippet": {
                    "text": "https://github.com/godbus/dbus\nCopyright (c) 2013, Georg Reinke (<guelfey at gmail dot com>), Google\n\nCopyright (c) 2013, Georg Reinke (<guelfey at gmail dot com>), Google\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\n",
                    "rendered": {
                      "text": "https://github.com/godbus/dbus\nCopyright (c) 2013, Georg Reinke (<guelfey at gmail dot com>), Google\n\nCopyright (c) 2013, Georg Reinke (<guelfey at gmail dot com>), Google\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\n",
                      "markdown": "`https://github.com/godbus/dbus\nCopyright (c) 2013, Georg Reinke (<guelfey at gmail dot com>), Google\n\nCopyright (c) 2013, Georg Reinke (<guelfey at gmail dot com>), Google\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 1157,
                  "startColumn": 42,
                  "endLine": 1157,
                  "endColumn": 46,
                  "snippet": {
                    "text": "All rights reserved.\n** github.com/godbus/dbus; version v0.0.0-20190422162347-ade71ed3457e --\nhttps://github.com/godbus/dbus\nCopyright (c) 2013, Georg Reinke (<guelfey at gmail dot com>), Google\n\nCopyright (c) 2013, Georg Reinke (<guelfey at gmail dot com>), Google\nAll rights reserved.\n",
                    "rendered": {
                      "text": "All rights reserved.\n** github.com/godbus/dbus; version v0.0.0-20190422162347-ade71ed3457e --\nhttps://github.com/godbus/dbus\nCopyright (c) 2013, Georg Reinke (<guelfey at gmail dot com>), Google\n\nCopyright (c) 2013, Georg Reinke (<guelfey at gmail dot com>), Google\nAll rights reserved.\n",
                      "markdown": "`All rights reserved.\n** github.com/godbus/dbus; version v0.0.0-20190422162347-ade71ed3457e --\nhttps://github.com/godbus/dbus\nCopyright (c) 2013, Georg Reinke (<guelfey at gmail dot com>), Google\n\nCopyright (c) 2013, Georg Reinke (<guelfey at gmail dot com>), Google\nAll rights reserved.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 1153,
                  "startColumn": 42,
                  "endLine": 1153,
                  "endColumn": 46,
                  "snippet": {
                    "text": "------\n\n** github.com/godbus/dbus; version v3.1.0 -- https://github.com/godbus/dbus\nCopyright (c) 2013, Georg Reinke (<guelfey at gmail dot com>), Google\nAll rights reserved.\n** github.com/godbus/dbus; version v0.0.0-20190422162347-ade71ed3457e --\nhttps://github.com/godbus/dbus\n",
                    "rendered": {
                      "text": "------\n\n** github.com/godbus/dbus; version v3.1.0 -- https://github.com/godbus/dbus\nCopyright (c) 2013, Georg Reinke (<guelfey at gmail dot com>), Google\nAll rights reserved.\n** github.com/godbus/dbus; version v0.0.0-20190422162347-ade71ed3457e --\nhttps://github.com/godbus/dbus\n",
                      "markdown": "`------\n\n** github.com/godbus/dbus; version v3.1.0 -- https://github.com/godbus/dbus\nCopyright (c) 2013, Georg Reinke (<guelfey at gmail dot com>), Google\nAll rights reserved.\n** github.com/godbus/dbus; version v0.0.0-20190422162347-ade71ed3457e --\nhttps://github.com/godbus/dbus\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 964,
                  "startColumn": 40,
                  "endLine": 965,
                  "snippet": {
                    "text": "\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 911,
                  "startColumn": 44,
                  "endLine": 912,
                  "snippet": {
                    "text": "    Common libraries shared by Prometheus Go components.\n    Copyright 2015 The Prometheus Authors\n\n    This product includes software developed at\n    SoundCloud Ltd. (http://soundcloud.com/).\n* For github.com/prometheus/procfs see also this required NOTICE:\n    Copyright 2014-2015 The Prometheus Authors\n* For github.com/prometheus/prometheus see also this required NOTICE:\n",
                    "rendered": {
                      "text": "    Common libraries shared by Prometheus Go components.\n    Copyright 2015 The Prometheus Authors\n\n    This product includes software developed at\n    SoundCloud Ltd. (http://soundcloud.com/).\n* For github.com/prometheus/procfs see also this required NOTICE:\n    Copyright 2014-2015 The Prometheus Authors\n* For github.com/prometheus/prometheus see also this required NOTICE:\n",
                      "markdown": "`    Common libraries shared by Prometheus Go components.\n    Copyright 2015 The Prometheus Authors\n\n    This product includes software developed at\n    SoundCloud Ltd. (http://soundcloud.com/).\n* For github.com/prometheus/procfs see also this required NOTICE:\n    Copyright 2014-2015 The Prometheus Authors\n* For github.com/prometheus/prometheus see also this required NOTICE:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 883,
                  "startColumn": 44,
                  "endLine": 884,
                  "snippet": {
                    "text": "    Prometheus instrumentation library for Go applications\n    Copyright 2012-2015 The Prometheus Authors\n\n    This product includes software developed at\n    SoundCloud Ltd. (http://soundcloud.com/).\n\n\n    The following components are included in this product:\n",
                    "rendered": {
                      "text": "    Prometheus instrumentation library for Go applications\n    Copyright 2012-2015 The Prometheus Authors\n\n    This product includes software developed at\n    SoundCloud Ltd. (http://soundcloud.com/).\n\n\n    The following components are included in this product:\n",
                      "markdown": "`    Prometheus instrumentation library for Go applications\n    Copyright 2012-2015 The Prometheus Authors\n\n    This product includes software developed at\n    SoundCloud Ltd. (http://soundcloud.com/).\n\n\n    The following components are included in this product:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 862,
                  "startColumn": 44,
                  "endLine": 863,
                  "snippet": {
                    "text": "    Prometheus Alertmanager\n    Copyright 2013-2015 The Prometheus Authors\n\n    This product includes software developed at\n    SoundCloud Ltd. (http://soundcloud.com/).\n\n\n    The following components are included in this product:\n",
                    "rendered": {
                      "text": "    Prometheus Alertmanager\n    Copyright 2013-2015 The Prometheus Authors\n\n    This product includes software developed at\n    SoundCloud Ltd. (http://soundcloud.com/).\n\n\n    The following components are included in this product:\n",
                      "markdown": "`    Prometheus Alertmanager\n    Copyright 2013-2015 The Prometheus Authors\n\n    This product includes software developed at\n    SoundCloud Ltd. (http://soundcloud.com/).\n\n\n    The following components are included in this product:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 818,
                  "startColumn": 44,
                  "endLine": 818,
                  "endColumn": 48,
                  "snippet": {
                    "text": "* For github.com/opencontainers/runc see also this required NOTICE:\n    Copyright 2012-2015 Docker, Inc.\n\n    This product includes software developed at Docker, Inc.\n    (http://www.docker.com).\n\n    The following is courtesy of our legal counsel:\n",
                    "rendered": {
                      "text": "* For github.com/opencontainers/runc see also this required NOTICE:\n    Copyright 2012-2015 Docker, Inc.\n\n    This product includes software developed at Docker, Inc.\n    (http://www.docker.com).\n\n    The following is courtesy of our legal counsel:\n",
                      "markdown": "`* For github.com/opencontainers/runc see also this required NOTICE:\n    Copyright 2012-2015 Docker, Inc.\n\n    This product includes software developed at Docker, Inc.\n    (http://www.docker.com).\n\n    The following is courtesy of our legal counsel:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 776,
                  "startColumn": 40,
                  "endLine": 777,
                  "snippet": {
                    "text": "\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 713,
                  "startColumn": 44,
                  "endLine": 713,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    Docker\n    Copyright 2012-2017 Docker, Inc.\n\n    This product includes software developed at Docker, Inc.\n    (https://www.docker.com).\n\n    This product contains software (https://github.com/creack/pty) developed\n",
                    "rendered": {
                      "text": "    Docker\n    Copyright 2012-2017 Docker, Inc.\n\n    This product includes software developed at Docker, Inc.\n    (https://www.docker.com).\n\n    This product contains software (https://github.com/creack/pty) developed\n",
                      "markdown": "`    Docker\n    Copyright 2012-2017 Docker, Inc.\n\n    This product includes software developed at Docker, Inc.\n    (https://www.docker.com).\n\n    This product contains software (https://github.com/creack/pty) developed\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 692,
                  "startColumn": 44,
                  "endLine": 692,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    Docker\n    Copyright 2012-2017 Docker, Inc.\n\n    This product includes software developed at Docker, Inc.\n    (https://www.docker.com).\n\n    This product contains software (https://github.com/creack/pty) developed\n",
                    "rendered": {
                      "text": "    Docker\n    Copyright 2012-2017 Docker, Inc.\n\n    This product includes software developed at Docker, Inc.\n    (https://www.docker.com).\n\n    This product contains software (https://github.com/creack/pty) developed\n",
                      "markdown": "`    Docker\n    Copyright 2012-2017 Docker, Inc.\n\n    This product includes software developed at Docker, Inc.\n    (https://www.docker.com).\n\n    This product contains software (https://github.com/creack/pty) developed\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 674,
                  "startColumn": 44,
                  "endLine": 674,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    CoreOS Project\n    Copyright 2018 CoreOS, Inc\n\n    This product includes software developed at CoreOS, Inc.\n    (http://www.coreos.com/).\n* For github.com/coreos/go-systemd see also this required NOTICE:\n    Copyright 2018 CoreOS, Inc\n",
                    "rendered": {
                      "text": "    CoreOS Project\n    Copyright 2018 CoreOS, Inc\n\n    This product includes software developed at CoreOS, Inc.\n    (http://www.coreos.com/).\n* For github.com/coreos/go-systemd see also this required NOTICE:\n    Copyright 2018 CoreOS, Inc\n",
                      "markdown": "`    CoreOS Project\n    Copyright 2018 CoreOS, Inc\n\n    This product includes software developed at CoreOS, Inc.\n    (http://www.coreos.com/).\n* For github.com/coreos/go-systemd see also this required NOTICE:\n    Copyright 2018 CoreOS, Inc\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 642,
                  "startColumn": 44,
                  "endLine": 643,
                  "snippet": {
                    "text": "    Microsoft Azure-SDK-for-Go\n    Copyright 2014-2017 Microsoft\n\n    This product includes software developed at\n    the Microsoft Corporation (https://www.microsoft.com).\n* For github.com/Azure/azure-sdk-for-go see also this required NOTICE:\n    Copyright 2020 Microsoft Corporation\n* For github.com/Azure/go-autorest/autorest see also this required NOTICE:\n",
                    "rendered": {
                      "text": "    Microsoft Azure-SDK-for-Go\n    Copyright 2014-2017 Microsoft\n\n    This product includes software developed at\n    the Microsoft Corporation (https://www.microsoft.com).\n* For github.com/Azure/azure-sdk-for-go see also this required NOTICE:\n    Copyright 2020 Microsoft Corporation\n* For github.com/Azure/go-autorest/autorest see also this required NOTICE:\n",
                      "markdown": "`    Microsoft Azure-SDK-for-Go\n    Copyright 2014-2017 Microsoft\n\n    This product includes software developed at\n    the Microsoft Corporation (https://www.microsoft.com).\n* For github.com/Azure/azure-sdk-for-go see also this required NOTICE:\n    Copyright 2020 Microsoft Corporation\n* For github.com/Azure/go-autorest/autorest see also this required NOTICE:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 598,
                  "startColumn": 36,
                  "endLine": 599,
                  "snippet": {
                    "text": "\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 521,
                  "startColumn": 26,
                  "endLine": 521,
                  "endColumn": 30,
                  "snippet": {
                    "text": "      distribution, then any Derivative Works that You distribute must include\n      a readable copy of the attribution notices contained within such NOTICE\n      file, excluding those notices that do not pertain to any part of the\n      Derivative Works, in at least one of the following places: within a\n      NOTICE text file distributed as part of the Derivative Works; within the\n      Source form or documentation, if provided along with the Derivative\n      Works; or, within a display generated by the Derivative Works, if and\n",
                    "rendered": {
                      "text": "      distribution, then any Derivative Works that You distribute must include\n      a readable copy of the attribution notices contained within such NOTICE\n      file, excluding those notices that do not pertain to any part of the\n      Derivative Works, in at least one of the following places: within a\n      NOTICE text file distributed as part of the Derivative Works; within the\n      Source form or documentation, if provided along with the Derivative\n      Works; or, within a display generated by the Derivative Works, if and\n",
                      "markdown": "`      distribution, then any Derivative Works that You distribute must include\n      a readable copy of the attribution notices contained within such NOTICE\n      file, excluding those notices that do not pertain to any part of the\n      Derivative Works, in at least one of the following places: within a\n      NOTICE text file distributed as part of the Derivative Works; within the\n      Source form or documentation, if provided along with the Derivative\n      Works; or, within a display generated by the Derivative Works, if and\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 470,
                  "startColumn": 32,
                  "endLine": 470,
                  "endColumn": 41,
                  "snippet": {
                    "text": "      purposes of this definition, \"submitted\" means any form of electronic,\n      verbal, or written communication sent to the Licensor or its\n      representatives, including but not limited to communication on electronic\n      mailing lists, source code control systems, and issue tracking systems\n      that are managed by, or on behalf of, the Licensor for the purpose of\n      discussing and improving the Work, but excluding communication that is\n      conspicuously marked or otherwise designated in writing by the copyright\n",
                    "rendered": {
                      "text": "      purposes of this definition, \"submitted\" means any form of electronic,\n      verbal, or written communication sent to the Licensor or its\n      representatives, including but not limited to communication on electronic\n      mailing lists, source code control systems, and issue tracking systems\n      that are managed by, or on behalf of, the Licensor for the purpose of\n      discussing and improving the Work, but excluding communication that is\n      conspicuously marked or otherwise designated in writing by the copyright\n",
                      "markdown": "`      purposes of this definition, \"submitted\" means any form of electronic,\n      verbal, or written communication sent to the Licensor or its\n      representatives, including but not limited to communication on electronic\n      mailing lists, source code control systems, and issue tracking systems\n      that are managed by, or on behalf of, the Licensor for the purpose of\n      discussing and improving the Work, but excluding communication that is\n      conspicuously marked or otherwise designated in writing by the copyright\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 430,
                  "startColumn": 67,
                  "endLine": 431,
                  "snippet": {
                    "text": "      copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all other\n      entities that control, are controlled by, or are under common control\n      with that entity. For the purposes of this definition, \"control\" means\n      (i) the power, direct or indirect, to cause the direction or management\n      of such entity, whether by contract or otherwise, or (ii) ownership of\n      fifty percent (50%) or more of the outstanding shares, or (iii)\n",
                    "rendered": {
                      "text": "      copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all other\n      entities that control, are controlled by, or are under common control\n      with that entity. For the purposes of this definition, \"control\" means\n      (i) the power, direct or indirect, to cause the direction or management\n      of such entity, whether by contract or otherwise, or (ii) ownership of\n      fifty percent (50%) or more of the outstanding shares, or (iii)\n",
                      "markdown": "`      copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all other\n      entities that control, are controlled by, or are under common control\n      with that entity. For the purposes of this definition, \"control\" means\n      (i) the power, direct or indirect, to cause the direction or management\n      of such entity, whether by contract or otherwise, or (ii) ownership of\n      fifty percent (50%) or more of the outstanding shares, or (iii)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 57,
                  "endLine": 127,
                  "endColumn": 61,
                  "snippet": {
                    "text": "          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n",
                    "rendered": {
                      "text": "          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n",
                      "markdown": "`          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 60,
                  "endLine": 73,
                  "endColumn": 69,
                  "snippet": {
                    "text": "      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n",
                    "rendered": {
                      "text": "      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n",
                      "markdown": "`      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 5,
                  "endLine": 34,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n",
                    "rendered": {
                      "text": "\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n",
                      "markdown": "`\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 39,
                  "endLine": 9,
                  "snippet": {
                    "text": "\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 3368,
                  "startColumn": 11,
                  "endLine": 3368,
                  "endColumn": 17,
                  "snippet": {
                    "text": "      come back into compliance. Moreover, Your grants from a particular\n      Contributor are reinstated on an ongoing basis if such Contributor\n      notifies You of the non-compliance by some reasonable means, this is the\n      first time You have received notice of non-compliance with this License\n      from such Contributor, and You become compliant prior to 30 days after\n      Your receipt of the notice.\n\n",
                    "rendered": {
                      "text": "      come back into compliance. Moreover, Your grants from a particular\n      Contributor are reinstated on an ongoing basis if such Contributor\n      notifies You of the non-compliance by some reasonable means, this is the\n      first time You have received notice of non-compliance with this License\n      from such Contributor, and You become compliant prior to 30 days after\n      Your receipt of the notice.\n\n",
                      "markdown": "`      come back into compliance. Moreover, Your grants from a particular\n      Contributor are reinstated on an ongoing basis if such Contributor\n      notifies You of the non-compliance by some reasonable means, this is the\n      first time You have received notice of non-compliance with this License\n      from such Contributor, and You become compliant prior to 30 days after\n      Your receipt of the notice.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 3255,
                  "startColumn": 63,
                  "endLine": 3255,
                  "endColumn": 72,
                  "snippet": {
                    "text": "         (c) under Patent Claims infringed by Covered Software in the absence\n         of its Contributions.\n\n      This License does not grant any rights in the trademarks, service marks,\n      or logos of any Contributor (except as may be necessary to comply with\n      the notice requirements in Section 3.4).\n\n",
                    "rendered": {
                      "text": "         (c) under Patent Claims infringed by Covered Software in the absence\n         of its Contributions.\n\n      This License does not grant any rights in the trademarks, service marks,\n      or logos of any Contributor (except as may be necessary to comply with\n      the notice requirements in Section 3.4).\n\n",
                      "markdown": "`         (c) under Patent Claims infringed by Covered Software in the absence\n         of its Contributions.\n\n      This License does not grant any rights in the trademarks, service marks,\n      or logos of any Contributor (except as may be necessary to comply with\n      the notice requirements in Section 3.4).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 3179,
                  "startColumn": 30,
                  "endLine": 3179,
                  "endColumn": 36,
                  "snippet": {
                    "text": "      1.8. \"License\" means this document.\n\n      1.9. \"Licensable\" means having the right to grant, to the maximum extent\n      possible, whether at the time of the initial grant or subsequently, any\n      and all of the rights conveyed by this License.\n\n      1.10. \"Modifications\" means any of the following:\n",
                    "rendered": {
                      "text": "      1.8. \"License\" means this document.\n\n      1.9. \"Licensable\" means having the right to grant, to the maximum extent\n      possible, whether at the time of the initial grant or subsequently, any\n      and all of the rights conveyed by this License.\n\n      1.10. \"Modifications\" means any of the following:\n",
                      "markdown": "`      1.8. \"License\" means this document.\n\n      1.9. \"Licensable\" means having the right to grant, to the maximum extent\n      possible, whether at the time of the initial grant or subsequently, any\n      and all of the rights conveyed by this License.\n\n      1.10. \"Modifications\" means any of the following:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 3002,
                  "startColumn": 11,
                  "endLine": 3002,
                  "endColumn": 17,
                  "snippet": {
                    "text": "      come back into compliance. Moreover, Your grants from a particular\n      Contributor are reinstated on an ongoing basis if such Contributor\n      notifies You of the non-compliance by some reasonable means, this is the\n      first time You have received notice of non-compliance with this License\n      from such Contributor, and You become compliant prior to 30 days after\n      Your receipt of the notice.\n\n",
                    "rendered": {
                      "text": "      come back into compliance. Moreover, Your grants from a particular\n      Contributor are reinstated on an ongoing basis if such Contributor\n      notifies You of the non-compliance by some reasonable means, this is the\n      first time You have received notice of non-compliance with this License\n      from such Contributor, and You become compliant prior to 30 days after\n      Your receipt of the notice.\n\n",
                      "markdown": "`      come back into compliance. Moreover, Your grants from a particular\n      Contributor are reinstated on an ongoing basis if such Contributor\n      notifies You of the non-compliance by some reasonable means, this is the\n      first time You have received notice of non-compliance with this License\n      from such Contributor, and You become compliant prior to 30 days after\n      Your receipt of the notice.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 2889,
                  "startColumn": 63,
                  "endLine": 2889,
                  "endColumn": 72,
                  "snippet": {
                    "text": "         (c) under Patent Claims infringed by Covered Software in the absence\n         of its Contributions.\n\n      This License does not grant any rights in the trademarks, service marks,\n      or logos of any Contributor (except as may be necessary to comply with\n      the notice requirements in Section 3.4).\n\n",
                    "rendered": {
                      "text": "         (c) under Patent Claims infringed by Covered Software in the absence\n         of its Contributions.\n\n      This License does not grant any rights in the trademarks, service marks,\n      or logos of any Contributor (except as may be necessary to comply with\n      the notice requirements in Section 3.4).\n\n",
                      "markdown": "`         (c) under Patent Claims infringed by Covered Software in the absence\n         of its Contributions.\n\n      This License does not grant any rights in the trademarks, service marks,\n      or logos of any Contributor (except as may be necessary to comply with\n      the notice requirements in Section 3.4).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 2813,
                  "startColumn": 30,
                  "endLine": 2813,
                  "endColumn": 36,
                  "snippet": {
                    "text": "      1.8. \"License\" means this document.\n\n      1.9. \"Licensable\" means having the right to grant, to the maximum extent\n      possible, whether at the time of the initial grant or subsequently, any\n      and all of the rights conveyed by this License.\n\n      1.10. \"Modifications\" means any of the following:\n",
                    "rendered": {
                      "text": "      1.8. \"License\" means this document.\n\n      1.9. \"Licensable\" means having the right to grant, to the maximum extent\n      possible, whether at the time of the initial grant or subsequently, any\n      and all of the rights conveyed by this License.\n\n      1.10. \"Modifications\" means any of the following:\n",
                      "markdown": "`      1.8. \"License\" means this document.\n\n      1.9. \"Licensable\" means having the right to grant, to the maximum extent\n      possible, whether at the time of the initial grant or subsequently, any\n      and all of the rights conveyed by this License.\n\n      1.10. \"Modifications\" means any of the following:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 1749,
                  "startColumn": 23,
                  "endLine": 1749,
                  "endColumn": 31,
                  "snippet": {
                    "text": "** github.com/cyphar/filepath-securejoin; version\nv0.2.2-0.20170720062807-ae69057f2299 --\nhttps://github.com/cyphar/filepath-securejoin\nCopyright (C) 2014-2015 Docker Inc & Go Authors. All rights reserved\nCopyright (C) 2017 SUSE LLC. All rights reserved.\n** github.com/edsrzf/mmap-go; version v1.0.0 --\nhttps://github.com/edsrzf/mmap-go\n",
                    "rendered": {
                      "text": "** github.com/cyphar/filepath-securejoin; version\nv0.2.2-0.20170720062807-ae69057f2299 --\nhttps://github.com/cyphar/filepath-securejoin\nCopyright (C) 2014-2015 Docker Inc & Go Authors. All rights reserved\nCopyright (C) 2017 SUSE LLC. All rights reserved.\n** github.com/edsrzf/mmap-go; version v1.0.0 --\nhttps://github.com/edsrzf/mmap-go\n",
                      "markdown": "`** github.com/cyphar/filepath-securejoin; version\nv0.2.2-0.20170720062807-ae69057f2299 --\nhttps://github.com/cyphar/filepath-securejoin\nCopyright (C) 2014-2015 Docker Inc & Go Authors. All rights reserved\nCopyright (C) 2017 SUSE LLC. All rights reserved.\n** github.com/edsrzf/mmap-go; version v1.0.0 --\nhttps://github.com/edsrzf/mmap-go\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 1528,
                  "startColumn": 23,
                  "endLine": 1528,
                  "endColumn": 31,
                  "snippet": {
                    "text": "Copyright (C) 2014-2015 Docker Inc & Go Authors. All rights reserved.\nCopyright (C) 2017 SUSE LLC. All rights reserved.\n\nCopyright (C) 2014-2015 Docker Inc & Go Authors. All rights reserved.\nCopyright (C) 2017 SUSE LLC. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\n",
                    "rendered": {
                      "text": "Copyright (C) 2014-2015 Docker Inc & Go Authors. All rights reserved.\nCopyright (C) 2017 SUSE LLC. All rights reserved.\n\nCopyright (C) 2014-2015 Docker Inc & Go Authors. All rights reserved.\nCopyright (C) 2017 SUSE LLC. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\n",
                      "markdown": "`Copyright (C) 2014-2015 Docker Inc & Go Authors. All rights reserved.\nCopyright (C) 2017 SUSE LLC. All rights reserved.\n\nCopyright (C) 2014-2015 Docker Inc & Go Authors. All rights reserved.\nCopyright (C) 2017 SUSE LLC. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 1525,
                  "startColumn": 23,
                  "endLine": 1525,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n** github.com/cyphar/filepath-securejoin; version v0.2.1-1-gae69057 --\nhttps://github.com/cyphar/filepath-securejoin/\nCopyright (C) 2014-2015 Docker Inc & Go Authors. All rights reserved.\nCopyright (C) 2017 SUSE LLC. All rights reserved.\n\nCopyright (C) 2014-2015 Docker Inc & Go Authors. All rights reserved.\n",
                    "rendered": {
                      "text": "\n** github.com/cyphar/filepath-securejoin; version v0.2.1-1-gae69057 --\nhttps://github.com/cyphar/filepath-securejoin/\nCopyright (C) 2014-2015 Docker Inc & Go Authors. All rights reserved.\nCopyright (C) 2017 SUSE LLC. All rights reserved.\n\nCopyright (C) 2014-2015 Docker Inc & Go Authors. All rights reserved.\n",
                      "markdown": "`\n** github.com/cyphar/filepath-securejoin; version v0.2.1-1-gae69057 --\nhttps://github.com/cyphar/filepath-securejoin/\nCopyright (C) 2014-2015 Docker Inc & Go Authors. All rights reserved.\nCopyright (C) 2017 SUSE LLC. All rights reserved.\n\nCopyright (C) 2014-2015 Docker Inc & Go Authors. All rights reserved.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 824,
                  "startColumn": 23,
                  "endLine": 824,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    The following is courtesy of our legal counsel:\n\n\n    Use and transfer of Docker may be subject to certain restrictions by the\n    United States and other governments.\n    It is your responsibility to ensure that your use and/or transfer does not\n    violate applicable laws.\n",
                    "rendered": {
                      "text": "    The following is courtesy of our legal counsel:\n\n\n    Use and transfer of Docker may be subject to certain restrictions by the\n    United States and other governments.\n    It is your responsibility to ensure that your use and/or transfer does not\n    violate applicable laws.\n",
                      "markdown": "`    The following is courtesy of our legal counsel:\n\n\n    Use and transfer of Docker may be subject to certain restrictions by the\n    United States and other governments.\n    It is your responsibility to ensure that your use and/or transfer does not\n    violate applicable laws.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 722,
                  "startColumn": 23,
                  "endLine": 722,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    The following is courtesy of our legal counsel:\n\n\n    Use and transfer of Docker may be subject to certain restrictions by the\n    United States and other governments.\n    It is your responsibility to ensure that your use and/or transfer does not\n    violate applicable laws.\n",
                    "rendered": {
                      "text": "    The following is courtesy of our legal counsel:\n\n\n    Use and transfer of Docker may be subject to certain restrictions by the\n    United States and other governments.\n    It is your responsibility to ensure that your use and/or transfer does not\n    violate applicable laws.\n",
                      "markdown": "`    The following is courtesy of our legal counsel:\n\n\n    Use and transfer of Docker may be subject to certain restrictions by the\n    United States and other governments.\n    It is your responsibility to ensure that your use and/or transfer does not\n    violate applicable laws.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 710,
                  "startColumn": 3,
                  "endLine": 711,
                  "snippet": {
                    "text": "\n    See also https://www.apache.org/dev/crypto.html and/or seek legal counsel.\n* For github.com/docker/docker see also this required NOTICE:\n    Docker\n    Copyright 2012-2017 Docker, Inc.\n\n    This product includes software developed at Docker, Inc.\n    (https://www.docker.com).\n",
                    "rendered": {
                      "text": "\n    See also https://www.apache.org/dev/crypto.html and/or seek legal counsel.\n* For github.com/docker/docker see also this required NOTICE:\n    Docker\n    Copyright 2012-2017 Docker, Inc.\n\n    This product includes software developed at Docker, Inc.\n    (https://www.docker.com).\n",
                      "markdown": "`\n    See also https://www.apache.org/dev/crypto.html and/or seek legal counsel.\n* For github.com/docker/docker see also this required NOTICE:\n    Docker\n    Copyright 2012-2017 Docker, Inc.\n\n    This product includes software developed at Docker, Inc.\n    (https://www.docker.com).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 701,
                  "startColumn": 23,
                  "endLine": 701,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    The following is courtesy of our legal counsel:\n\n\n    Use and transfer of Docker may be subject to certain restrictions by the\n    United States and other governments.\n    It is your responsibility to ensure that your use and/or transfer does not\n    violate applicable laws.\n",
                    "rendered": {
                      "text": "    The following is courtesy of our legal counsel:\n\n\n    Use and transfer of Docker may be subject to certain restrictions by the\n    United States and other governments.\n    It is your responsibility to ensure that your use and/or transfer does not\n    violate applicable laws.\n",
                      "markdown": "`    The following is courtesy of our legal counsel:\n\n\n    Use and transfer of Docker may be subject to certain restrictions by the\n    United States and other governments.\n    It is your responsibility to ensure that your use and/or transfer does not\n    violate applicable laws.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 689,
                  "startColumn": 3,
                  "endLine": 690,
                  "snippet": {
                    "text": "* For github.com/docker/distribution/ see also this required NOTICE:\n    Copyright The docker Authors\n* For github.com/docker/docker see also this required NOTICE:\n    Docker\n    Copyright 2012-2017 Docker, Inc.\n\n    This product includes software developed at Docker, Inc.\n    (https://www.docker.com).\n",
                    "rendered": {
                      "text": "* For github.com/docker/distribution/ see also this required NOTICE:\n    Copyright The docker Authors\n* For github.com/docker/docker see also this required NOTICE:\n    Docker\n    Copyright 2012-2017 Docker, Inc.\n\n    This product includes software developed at Docker, Inc.\n    (https://www.docker.com).\n",
                      "markdown": "`* For github.com/docker/distribution/ see also this required NOTICE:\n    Copyright The docker Authors\n* For github.com/docker/docker see also this required NOTICE:\n    Docker\n    Copyright 2012-2017 Docker, Inc.\n\n    This product includes software developed at Docker, Inc.\n    (https://www.docker.com).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 687,
                  "startColumn": 17,
                  "endLine": 687,
                  "endColumn": 25,
                  "snippet": {
                    "text": "* For github.com/docker/distribution see also this required NOTICE:\n    Copyright The docker/distribution authors\n* For github.com/docker/distribution/ see also this required NOTICE:\n    Copyright The docker Authors\n* For github.com/docker/docker see also this required NOTICE:\n    Docker\n    Copyright 2012-2017 Docker, Inc.\n",
                    "rendered": {
                      "text": "* For github.com/docker/distribution see also this required NOTICE:\n    Copyright The docker/distribution authors\n* For github.com/docker/distribution/ see also this required NOTICE:\n    Copyright The docker Authors\n* For github.com/docker/docker see also this required NOTICE:\n    Docker\n    Copyright 2012-2017 Docker, Inc.\n",
                      "markdown": "`* For github.com/docker/distribution see also this required NOTICE:\n    Copyright The docker/distribution authors\n* For github.com/docker/distribution/ see also this required NOTICE:\n    Copyright The docker Authors\n* For github.com/docker/docker see also this required NOTICE:\n    Docker\n    Copyright 2012-2017 Docker, Inc.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 547,
                  "startColumn": 21,
                  "endLine": 547,
                  "endColumn": 30,
                  "snippet": {
                    "text": "   you may have executed with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor, except\n   as required for reasonable and customary use in describing the origin of the\n   Work and reproducing the content of the NOTICE file.\n\n",
                    "rendered": {
                      "text": "   you may have executed with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor, except\n   as required for reasonable and customary use in describing the origin of the\n   Work and reproducing the content of the NOTICE file.\n\n",
                      "markdown": "`   you may have executed with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor, except\n   as required for reasonable and customary use in describing the origin of the\n   Work and reproducing the content of the NOTICE file.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/licensing/THIRD-PARTY-LICENSES"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 24,
                  "endLine": 156,
                  "endColumn": 33,
                  "snippet": {
                    "text": "      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n",
                    "rendered": {
                      "text": "      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n",
                      "markdown": "`      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/paths/paths.go"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tJSON           = \"amazon-cloudwatch-agent.json\"\n\tTOML           = \"amazon-cloudwatch-agent.toml\"\n\tYAML           = \"amazon-cloudwatch-agent.yaml\"\n\tENV            = \"env-config.json\"\n\tAGENT_LOG_FILE = \"amazon-cloudwatch-agent.log\"\n\tJMXJarName     = \"opentelemetry-jmx-metrics.jar\"\n)\n",
                    "rendered": {
                      "text": "\tJSON           = \"amazon-cloudwatch-agent.json\"\n\tTOML           = \"amazon-cloudwatch-agent.toml\"\n\tYAML           = \"amazon-cloudwatch-agent.yaml\"\n\tENV            = \"env-config.json\"\n\tAGENT_LOG_FILE = \"amazon-cloudwatch-agent.log\"\n\tJMXJarName     = \"opentelemetry-jmx-metrics.jar\"\n)\n",
                      "markdown": "`\tJSON           = \"amazon-cloudwatch-agent.json\"\n\tTOML           = \"amazon-cloudwatch-agent.toml\"\n\tYAML           = \"amazon-cloudwatch-agent.yaml\"\n\tENV            = \"env-config.json\"\n\tAGENT_LOG_FILE = \"amazon-cloudwatch-agent.log\"\n\tJMXJarName     = \"opentelemetry-jmx-metrics.jar\"\n)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/xraydaemonmigration/testdata/cfg.yaml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 18,
                  "endLine": 7,
                  "endColumn": 27,
                  "snippet": {
                    "text": "Concurrency: 8\n# Send segments to AWS X-Ray service in a specific region\nRegion: \"us-east-1\"\n# Change the X-Ray service endpoint to which the daemon sends segment documents.\nEndpoint: \"\"\nSocket:\n  # Change the address and port on which the daemon listens for UDP packets containing segment documents.\n",
                    "rendered": {
                      "text": "Concurrency: 8\n# Send segments to AWS X-Ray service in a specific region\nRegion: \"us-east-1\"\n# Change the X-Ray service endpoint to which the daemon sends segment documents.\nEndpoint: \"\"\nSocket:\n  # Change the address and port on which the daemon listens for UDP packets containing segment documents.\n",
                      "markdown": "`Concurrency: 8\n# Send segments to AWS X-Ray service in a specific region\nRegion: \"us-east-1\"\n# Change the X-Ray service endpoint to which the daemon sends segment documents.\nEndpoint: \"\"\nSocket:\n  # Change the address and port on which the daemon listens for UDP packets containing segment documents.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/xraydaemonmigration/testdata/cfg.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 28,
                  "endLine": 5,
                  "endColumn": 37,
                  "snippet": {
                    "text": "TotalBufferSizeMB: 23\n# Maximum number of concurrent calls to AWS X-Ray to upload segment documents.\nConcurrency: 8\n# Send segments to AWS X-Ray service in a specific region\nRegion: \"us-east-1\"\n# Change the X-Ray service endpoint to which the daemon sends segment documents.\nEndpoint: \"\"\n",
                    "rendered": {
                      "text": "TotalBufferSizeMB: 23\n# Maximum number of concurrent calls to AWS X-Ray to upload segment documents.\nConcurrency: 8\n# Send segments to AWS X-Ray service in a specific region\nRegion: \"us-east-1\"\n# Change the X-Ray service endpoint to which the daemon sends segment documents.\nEndpoint: \"\"\n",
                      "markdown": "`TotalBufferSizeMB: 23\n# Maximum number of concurrent calls to AWS X-Ray to upload segment documents.\nConcurrency: 8\n# Send segments to AWS X-Ray service in a specific region\nRegion: \"us-east-1\"\n# Change the X-Ray service endpoint to which the daemon sends segment documents.\nEndpoint: \"\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/tool/xraydaemonmigration/migrate.go"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 97,
                  "endLine": 51,
                  "endColumn": 106,
                  "snippet": {
                    "text": "ck for EC2 instance metadata.\")\n\tnewFlag.IntVarF(&yamlConfig.TotalBufferSizeMB, \"buffer-memory\", \"m\", yamlConfig.TotalBufferSizeMB, \"Change the amount of memory in MB that buffers can use (minimum 3).\")\n\tnewFlag.StringVarF(&yamlConfig.Region, \"region\", \"n\", yamlConfig.Region, \"Send segments to X-Ray service in a specific region.\")\n\tnewFlag.StringVarF(&yamlConfig.Socket.UDPAddress, \"bind\", \"b\", yamlConfig.Socket.UDPAddress, \"Overrides default UDP address (127.0.0.1:2000).\")\n\tnewFlag.StringVarF(&yamlConfig.Socket.TCPAddress, \"bind-tcp\", \"t\", yamlConfig.Socket.TCPAddress, \"Overrides default TCP address (1",
                    "rendered": {
                      "text": "ck for EC2 instance metadata.\")\n\tnewFlag.IntVarF(&yamlConfig.TotalBufferSizeMB, \"buffer-memory\", \"m\", yamlConfig.TotalBufferSizeMB, \"Change the amount of memory in MB that buffers can use (minimum 3).\")\n\tnewFlag.StringVarF(&yamlConfig.Region, \"region\", \"n\", yamlConfig.Region, \"Send segments to X-Ray service in a specific region.\")\n\tnewFlag.StringVarF(&yamlConfig.Socket.UDPAddress, \"bind\", \"b\", yamlConfig.Socket.UDPAddress, \"Overrides default UDP address (127.0.0.1:2000).\")\n\tnewFlag.StringVarF(&yamlConfig.Socket.TCPAddress, \"bind-tcp\", \"t\", yamlConfig.Socket.TCPAddress, \"Overrides default TCP address (1",
                      "markdown": "`ck for EC2 instance metadata.\")\n\tnewFlag.IntVarF(&yamlConfig.TotalBufferSizeMB, \"buffer-memory\", \"m\", yamlConfig.TotalBufferSizeMB, \"Change the amount of memory in MB that buffers can use (minimum 3).\")\n\tnewFlag.StringVarF(&yamlConfig.Region, \"region\", \"n\", yamlConfig.Region, \"Send segments to X-Ray service in a specific region.\")\n\tnewFlag.StringVarF(&yamlConfig.Socket.UDPAddress, \"bind\", \"b\", yamlConfig.Socket.UDPAddress, \"Overrides default UDP address (127.0.0.1:2000).\")\n\tnewFlag.StringVarF(&yamlConfig.Socket.TCPAddress, \"bind-tcp\", \"t\", yamlConfig.Socket.TCPAddress, \"Overrides default TCP address (1`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/defaultKeyCase.go"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 54,
                  "endLine": 43,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\t} else {\n\t\tAddErrorMessages(\n\t\t\tfmt.Sprintf(\"time interval key: %s\", key),\n\t\t\tfmt.Sprintf(\"%s value (%v) in json is not valid for time interval.\", key, returnVal))\n\t}\n\treturn\n}\n",
                    "rendered": {
                      "text": "\t} else {\n\t\tAddErrorMessages(\n\t\t\tfmt.Sprintf(\"time interval key: %s\", key),\n\t\t\tfmt.Sprintf(\"%s value (%v) in json is not valid for time interval.\", key, returnVal))\n\t}\n\treturn\n}\n",
                      "markdown": "`\t} else {\n\t\tAddErrorMessages(\n\t\t\tfmt.Sprintf(\"time interval key: %s\", key),\n\t\t\tfmt.Sprintf(\"%s value (%v) in json is not valid for time interval.\", key, returnVal))\n\t}\n\treturn\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatch/testdata/full.yaml"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 4,
                  "endLine": 10,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    region: val2\n    endpoint_override: val3\n    access_key: val4\n    secret_key: val5\n    role_arn: val6\n    profile: val7\n    shared_credential_file: val8\n",
                    "rendered": {
                      "text": "    region: val2\n    endpoint_override: val3\n    access_key: val4\n    secret_key: val5\n    role_arn: val6\n    profile: val7\n    shared_credential_file: val8\n",
                      "markdown": "`    region: val2\n    endpoint_override: val3\n    access_key: val4\n    secret_key: val5\n    role_arn: val6\n    profile: val7\n    shared_credential_file: val8\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/attributesresolver_test.go"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 27,
                  "endLine": 162,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n\t\t\tresourceAttributes.PutStr(semconv.AttributeDeploymentEnvironment, \"env3\")\n\t\t\tresolver.Process(attributes, resourceAttributes)\n\t\t\tenvAttr, ok = attributes.Get(attr.AWSLocalEnvironment)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, \"env3\", envAttr.Str())\n\t\t})\n",
                    "rendered": {
                      "text": "\n\t\t\tresourceAttributes.PutStr(semconv.AttributeDeploymentEnvironment, \"env3\")\n\t\t\tresolver.Process(attributes, resourceAttributes)\n\t\t\tenvAttr, ok = attributes.Get(attr.AWSLocalEnvironment)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, \"env3\", envAttr.Str())\n\t\t})\n",
                      "markdown": "`\n\t\t\tresourceAttributes.PutStr(semconv.AttributeDeploymentEnvironment, \"env3\")\n\t\t\tresolver.Process(attributes, resourceAttributes)\n\t\t\tenvAttr, ok = attributes.Get(attr.AWSLocalEnvironment)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, \"env3\", envAttr.Str())\n\t\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/attributesresolver_test.go"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 27,
                  "endLine": 153,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\t\t\tresourceAttributes.PutStr(attr.AWSHostedInEnvironment, \"error\")\n\t\t\tresourceAttributes.PutStr(semconv.AttributeDeploymentEnvironment, \"env2\")\n\t\t\tresolver.Process(attributes, resourceAttributes)\n\t\t\tenvAttr, ok = attributes.Get(attr.AWSLocalEnvironment)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, \"env2\", envAttr.Str())\n\n",
                    "rendered": {
                      "text": "\t\t\tresourceAttributes.PutStr(attr.AWSHostedInEnvironment, \"error\")\n\t\t\tresourceAttributes.PutStr(semconv.AttributeDeploymentEnvironment, \"env2\")\n\t\t\tresolver.Process(attributes, resourceAttributes)\n\t\t\tenvAttr, ok = attributes.Get(attr.AWSLocalEnvironment)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, \"env2\", envAttr.Str())\n\n",
                      "markdown": "`\t\t\tresourceAttributes.PutStr(attr.AWSHostedInEnvironment, \"error\")\n\t\t\tresourceAttributes.PutStr(semconv.AttributeDeploymentEnvironment, \"env2\")\n\t\t\tresolver.Process(attributes, resourceAttributes)\n\t\t\tenvAttr, ok = attributes.Get(attr.AWSLocalEnvironment)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, \"env2\", envAttr.Str())\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/attributesresolver_test.go"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 28,
                  "endLine": 143,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\t\t\t// insert custom env\n\t\t\tresourceAttributes.PutStr(attr.AWSHostedInEnvironment, \"env1\")\n\t\t\tresolver.Process(attributes, resourceAttributes)\n\t\t\tenvAttr, ok := attributes.Get(attr.AWSLocalEnvironment)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, \"env1\", envAttr.Str())\n\n",
                    "rendered": {
                      "text": "\t\t\t// insert custom env\n\t\t\tresourceAttributes.PutStr(attr.AWSHostedInEnvironment, \"env1\")\n\t\t\tresolver.Process(attributes, resourceAttributes)\n\t\t\tenvAttr, ok := attributes.Get(attr.AWSLocalEnvironment)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, \"env1\", envAttr.Str())\n\n",
                      "markdown": "`\t\t\t// insert custom env\n\t\t\tresourceAttributes.PutStr(attr.AWSHostedInEnvironment, \"env1\")\n\t\t\tresolver.Process(attributes, resourceAttributes)\n\t\t\tenvAttr, ok := attributes.Get(attr.AWSLocalEnvironment)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, \"env1\", envAttr.Str())\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/attributesresolver_test.go"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 26,
                  "endLine": 106,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tresourceAttributes.PutStr(attr.ResourceDetectionHostName, \"hostname\")\n\n\tresolver.Process(attributes, resourceAttributes)\n\tenvAttr, ok := attributes.Get(common.AttributeHost)\n\tassert.True(t, ok)\n\tassert.Equal(t, \"hostname\", envAttr.AsString())\n}\n",
                    "rendered": {
                      "text": "\tresourceAttributes.PutStr(attr.ResourceDetectionHostName, \"hostname\")\n\n\tresolver.Process(attributes, resourceAttributes)\n\tenvAttr, ok := attributes.Get(common.AttributeHost)\n\tassert.True(t, ok)\n\tassert.Equal(t, \"hostname\", envAttr.AsString())\n}\n",
                      "markdown": "`\tresourceAttributes.PutStr(attr.ResourceDetectionHostName, \"hostname\")\n\n\tresolver.Process(attributes, resourceAttributes)\n\tenvAttr, ok := attributes.Get(common.AttributeHost)\n\tassert.True(t, ok)\n\tassert.Equal(t, \"hostname\", envAttr.AsString())\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/attributesresolver_test.go"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 26,
                  "endLine": 91,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tplatformAttr, ok := attributes.Get(common.AttributePlatformType)\n\tassert.True(t, ok)\n\tassert.Equal(t, \"AWS::EC2\", platformAttr.Str())\n\tenvAttr, ok := attributes.Get(attr.AWSLocalEnvironment)\n\tassert.True(t, ok)\n\tassert.Equal(t, \"ec2:my-asg\", envAttr.Str())\n}\n",
                    "rendered": {
                      "text": "\tplatformAttr, ok := attributes.Get(common.AttributePlatformType)\n\tassert.True(t, ok)\n\tassert.Equal(t, \"AWS::EC2\", platformAttr.Str())\n\tenvAttr, ok := attributes.Get(attr.AWSLocalEnvironment)\n\tassert.True(t, ok)\n\tassert.Equal(t, \"ec2:my-asg\", envAttr.Str())\n}\n",
                      "markdown": "`\tplatformAttr, ok := attributes.Get(common.AttributePlatformType)\n\tassert.True(t, ok)\n\tassert.Equal(t, \"AWS::EC2\", platformAttr.Str())\n\tenvAttr, ok := attributes.Get(attr.AWSLocalEnvironment)\n\tassert.True(t, ok)\n\tassert.Equal(t, \"ec2:my-asg\", envAttr.Str())\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/attributesresolver_test.go"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 31,
                  "endLine": 88,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\tresourceAttributes.PutStr(attr.ResourceDetectionASG, \"my-asg\")\n\n\tresolver.Process(attributes, resourceAttributes)\n\tplatformAttr, ok := attributes.Get(common.AttributePlatformType)\n\tassert.True(t, ok)\n\tassert.Equal(t, \"AWS::EC2\", platformAttr.Str())\n\tenvAttr, ok := attributes.Get(attr.AWSLocalEnvironment)\n",
                    "rendered": {
                      "text": "\tresourceAttributes.PutStr(attr.ResourceDetectionASG, \"my-asg\")\n\n\tresolver.Process(attributes, resourceAttributes)\n\tplatformAttr, ok := attributes.Get(common.AttributePlatformType)\n\tassert.True(t, ok)\n\tassert.Equal(t, \"AWS::EC2\", platformAttr.Str())\n\tenvAttr, ok := attributes.Get(attr.AWSLocalEnvironment)\n",
                      "markdown": "`\tresourceAttributes.PutStr(attr.ResourceDetectionASG, \"my-asg\")\n\n\tresolver.Process(attributes, resourceAttributes)\n\tplatformAttr, ok := attributes.Get(common.AttributePlatformType)\n\tassert.True(t, ok)\n\tassert.Equal(t, \"AWS::EC2\", platformAttr.Str())\n\tenvAttr, ok := attributes.Get(attr.AWSLocalEnvironment)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/attributesresolver_test.go"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 29,
                  "endLine": 71,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, tt.platformType, attribute.Str())\n\n\t\t\tattribute, ok = attributes.Get(attr.AWSLocalEnvironment)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, tt.platformCode+\":default\", attribute.Str())\n\t\t})\n",
                    "rendered": {
                      "text": "\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, tt.platformType, attribute.Str())\n\n\t\t\tattribute, ok = attributes.Get(attr.AWSLocalEnvironment)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, tt.platformCode+\":default\", attribute.Str())\n\t\t})\n",
                      "markdown": "`\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, tt.platformType, attribute.Str())\n\n\t\t\tattribute, ok = attributes.Get(attr.AWSLocalEnvironment)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, tt.platformCode+\":default\", attribute.Str())\n\t\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/attributesresolver_test.go"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 30,
                  "endLine": 67,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n\t\t\tresolver.Process(attributes, resourceAttributes)\n\n\t\t\tattribute, ok := attributes.Get(common.AttributePlatformType)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, tt.platformType, attribute.Str())\n\n",
                    "rendered": {
                      "text": "\n\t\t\tresolver.Process(attributes, resourceAttributes)\n\n\t\t\tattribute, ok := attributes.Get(common.AttributePlatformType)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, tt.platformType, attribute.Str())\n\n",
                      "markdown": "`\n\t\t\tresolver.Process(attributes, resourceAttributes)\n\n\t\t\tattribute, ok := attributes.Get(common.AttributePlatformType)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, tt.platformType, attribute.Str())\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/attributesresolver_test.go"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 3,
                  "endLine": 162,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n\t\t\tresourceAttributes.PutStr(semconv.AttributeDeploymentEnvironment, \"env3\")\n\t\t\tresolver.Process(attributes, resourceAttributes)\n\t\t\tenvAttr, ok = attributes.Get(attr.AWSLocalEnvironment)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, \"env3\", envAttr.Str())\n\t\t})\n",
                    "rendered": {
                      "text": "\n\t\t\tresourceAttributes.PutStr(semconv.AttributeDeploymentEnvironment, \"env3\")\n\t\t\tresolver.Process(attributes, resourceAttributes)\n\t\t\tenvAttr, ok = attributes.Get(attr.AWSLocalEnvironment)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, \"env3\", envAttr.Str())\n\t\t})\n",
                      "markdown": "`\n\t\t\tresourceAttributes.PutStr(semconv.AttributeDeploymentEnvironment, \"env3\")\n\t\t\tresolver.Process(attributes, resourceAttributes)\n\t\t\tenvAttr, ok = attributes.Get(attr.AWSLocalEnvironment)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, \"env3\", envAttr.Str())\n\t\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/attributesresolver_test.go"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 3,
                  "endLine": 153,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\t\t\tresourceAttributes.PutStr(attr.AWSHostedInEnvironment, \"error\")\n\t\t\tresourceAttributes.PutStr(semconv.AttributeDeploymentEnvironment, \"env2\")\n\t\t\tresolver.Process(attributes, resourceAttributes)\n\t\t\tenvAttr, ok = attributes.Get(attr.AWSLocalEnvironment)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, \"env2\", envAttr.Str())\n\n",
                    "rendered": {
                      "text": "\t\t\tresourceAttributes.PutStr(attr.AWSHostedInEnvironment, \"error\")\n\t\t\tresourceAttributes.PutStr(semconv.AttributeDeploymentEnvironment, \"env2\")\n\t\t\tresolver.Process(attributes, resourceAttributes)\n\t\t\tenvAttr, ok = attributes.Get(attr.AWSLocalEnvironment)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, \"env2\", envAttr.Str())\n\n",
                      "markdown": "`\t\t\tresourceAttributes.PutStr(attr.AWSHostedInEnvironment, \"error\")\n\t\t\tresourceAttributes.PutStr(semconv.AttributeDeploymentEnvironment, \"env2\")\n\t\t\tresolver.Process(attributes, resourceAttributes)\n\t\t\tenvAttr, ok = attributes.Get(attr.AWSLocalEnvironment)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, \"env2\", envAttr.Str())\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/attributesresolver_test.go"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 3,
                  "endLine": 143,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\t\t\t// insert custom env\n\t\t\tresourceAttributes.PutStr(attr.AWSHostedInEnvironment, \"env1\")\n\t\t\tresolver.Process(attributes, resourceAttributes)\n\t\t\tenvAttr, ok := attributes.Get(attr.AWSLocalEnvironment)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, \"env1\", envAttr.Str())\n\n",
                    "rendered": {
                      "text": "\t\t\t// insert custom env\n\t\t\tresourceAttributes.PutStr(attr.AWSHostedInEnvironment, \"env1\")\n\t\t\tresolver.Process(attributes, resourceAttributes)\n\t\t\tenvAttr, ok := attributes.Get(attr.AWSLocalEnvironment)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, \"env1\", envAttr.Str())\n\n",
                      "markdown": "`\t\t\t// insert custom env\n\t\t\tresourceAttributes.PutStr(attr.AWSHostedInEnvironment, \"env1\")\n\t\t\tresolver.Process(attributes, resourceAttributes)\n\t\t\tenvAttr, ok := attributes.Get(attr.AWSLocalEnvironment)\n\t\t\tassert.True(t, ok)\n\t\t\tassert.Equal(t, \"env1\", envAttr.Str())\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/attributesresolver_test.go"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 1,
                  "endLine": 106,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\tresourceAttributes.PutStr(attr.ResourceDetectionHostName, \"hostname\")\n\n\tresolver.Process(attributes, resourceAttributes)\n\tenvAttr, ok := attributes.Get(common.AttributeHost)\n\tassert.True(t, ok)\n\tassert.Equal(t, \"hostname\", envAttr.AsString())\n}\n",
                    "rendered": {
                      "text": "\tresourceAttributes.PutStr(attr.ResourceDetectionHostName, \"hostname\")\n\n\tresolver.Process(attributes, resourceAttributes)\n\tenvAttr, ok := attributes.Get(common.AttributeHost)\n\tassert.True(t, ok)\n\tassert.Equal(t, \"hostname\", envAttr.AsString())\n}\n",
                      "markdown": "`\tresourceAttributes.PutStr(attr.ResourceDetectionHostName, \"hostname\")\n\n\tresolver.Process(attributes, resourceAttributes)\n\tenvAttr, ok := attributes.Get(common.AttributeHost)\n\tassert.True(t, ok)\n\tassert.Equal(t, \"hostname\", envAttr.AsString())\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/attributesresolver_test.go"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 1,
                  "endLine": 91,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\tplatformAttr, ok := attributes.Get(common.AttributePlatformType)\n\tassert.True(t, ok)\n\tassert.Equal(t, \"AWS::EC2\", platformAttr.Str())\n\tenvAttr, ok := attributes.Get(attr.AWSLocalEnvironment)\n\tassert.True(t, ok)\n\tassert.Equal(t, \"ec2:my-asg\", envAttr.Str())\n}\n",
                    "rendered": {
                      "text": "\tplatformAttr, ok := attributes.Get(common.AttributePlatformType)\n\tassert.True(t, ok)\n\tassert.Equal(t, \"AWS::EC2\", platformAttr.Str())\n\tenvAttr, ok := attributes.Get(attr.AWSLocalEnvironment)\n\tassert.True(t, ok)\n\tassert.Equal(t, \"ec2:my-asg\", envAttr.Str())\n}\n",
                      "markdown": "`\tplatformAttr, ok := attributes.Get(common.AttributePlatformType)\n\tassert.True(t, ok)\n\tassert.Equal(t, \"AWS::EC2\", platformAttr.Str())\n\tenvAttr, ok := attributes.Get(attr.AWSLocalEnvironment)\n\tassert.True(t, ok)\n\tassert.Equal(t, \"ec2:my-asg\", envAttr.Str())\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/attributesresolver_test.go"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 18,
                  "endLine": 108,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\tresolver.Process(attributes, resourceAttributes)\n\tenvAttr, ok := attributes.Get(common.AttributeHost)\n\tassert.True(t, ok)\n\tassert.Equal(t, \"hostname\", envAttr.AsString())\n}\n\nfunc TestResourceAttributesResolverWithCustomEnvironment(t *testing.T) {\n",
                    "rendered": {
                      "text": "\tresolver.Process(attributes, resourceAttributes)\n\tenvAttr, ok := attributes.Get(common.AttributeHost)\n\tassert.True(t, ok)\n\tassert.Equal(t, \"hostname\", envAttr.AsString())\n}\n\nfunc TestResourceAttributesResolverWithCustomEnvironment(t *testing.T) {\n",
                      "markdown": "`\tresolver.Process(attributes, resourceAttributes)\n\tenvAttr, ok := attributes.Get(common.AttributeHost)\n\tassert.True(t, ok)\n\tassert.Equal(t, \"hostname\", envAttr.AsString())\n}\n\nfunc TestResourceAttributesResolverWithCustomEnvironment(t *testing.T) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/attributesresolver_test.go"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 60,
                  "endLine": 103,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\n\tattributes := pcommon.NewMap()\n\tresourceAttributes := pcommon.NewMap()\n\tresourceAttributes.PutStr(attr.ResourceDetectionHostName, \"hostname\")\n\n\tresolver.Process(attributes, resourceAttributes)\n\tenvAttr, ok := attributes.Get(common.AttributeHost)\n",
                    "rendered": {
                      "text": "\n\tattributes := pcommon.NewMap()\n\tresourceAttributes := pcommon.NewMap()\n\tresourceAttributes.PutStr(attr.ResourceDetectionHostName, \"hostname\")\n\n\tresolver.Process(attributes, resourceAttributes)\n\tenvAttr, ok := attributes.Get(common.AttributeHost)\n",
                      "markdown": "`\n\tattributes := pcommon.NewMap()\n\tresourceAttributes := pcommon.NewMap()\n\tresourceAttributes.PutStr(attr.ResourceDetectionHostName, \"hostname\")\n\n\tresolver.Process(attributes, resourceAttributes)\n\tenvAttr, ok := attributes.Get(common.AttributeHost)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/attributesresolver_test.go"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 19,
                  "endLine": 141,
                  "snippet": {
                    "text": "\t\t\tresourceAttributes.PutStr(attr.ResourceDetectionASG, \"my-asg\")\n\t\t\tresourceAttributes.PutStr(semconv.AttributeAWSECSTaskARN, \"arn:aws:ecs:us-west-1:123456789123:task/my-cluster/10838bed-421f-43ef-870a-f43feacbbb5b\")\n\n\t\t\t// insert custom env\n\t\t\tresourceAttributes.PutStr(attr.AWSHostedInEnvironment, \"env1\")\n\t\t\tresolver.Process(attributes, resourceAttributes)\n\t\t\tenvAttr, ok := attributes.Get(attr.AWSLocalEnvironment)\n\t\t\tassert.True(t, ok)\n",
                    "rendered": {
                      "text": "\t\t\tresourceAttributes.PutStr(attr.ResourceDetectionASG, \"my-asg\")\n\t\t\tresourceAttributes.PutStr(semconv.AttributeAWSECSTaskARN, \"arn:aws:ecs:us-west-1:123456789123:task/my-cluster/10838bed-421f-43ef-870a-f43feacbbb5b\")\n\n\t\t\t// insert custom env\n\t\t\tresourceAttributes.PutStr(attr.AWSHostedInEnvironment, \"env1\")\n\t\t\tresolver.Process(attributes, resourceAttributes)\n\t\t\tenvAttr, ok := attributes.Get(attr.AWSLocalEnvironment)\n\t\t\tassert.True(t, ok)\n",
                      "markdown": "`\t\t\tresourceAttributes.PutStr(attr.ResourceDetectionASG, \"my-asg\")\n\t\t\tresourceAttributes.PutStr(semconv.AttributeAWSECSTaskARN, \"arn:aws:ecs:us-west-1:123456789123:task/my-cluster/10838bed-421f-43ef-870a-f43feacbbb5b\")\n\n\t\t\t// insert custom env\n\t\t\tresourceAttributes.PutStr(attr.AWSHostedInEnvironment, \"env1\")\n\t\t\tresolver.Process(attributes, resourceAttributes)\n\t\t\tenvAttr, ok := attributes.Get(attr.AWSLocalEnvironment)\n\t\t\tassert.True(t, ok)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/attributesresolver_test.go"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 20,
                  "endLine": 137,
                  "snippet": {
                    "text": "\n\t\t\tattributes := pcommon.NewMap()\n\t\t\tresourceAttributes := pcommon.NewMap()\n\t\t\t// insert default env\n\t\t\tresourceAttributes.PutStr(attr.ResourceDetectionASG, \"my-asg\")\n\t\t\tresourceAttributes.PutStr(semconv.AttributeAWSECSTaskARN, \"arn:aws:ecs:us-west-1:123456789123:task/my-cluster/10838bed-421f-43ef-870a-f43feacbbb5b\")\n\n\t\t\t// insert custom env\n",
                    "rendered": {
                      "text": "\n\t\t\tattributes := pcommon.NewMap()\n\t\t\tresourceAttributes := pcommon.NewMap()\n\t\t\t// insert default env\n\t\t\tresourceAttributes.PutStr(attr.ResourceDetectionASG, \"my-asg\")\n\t\t\tresourceAttributes.PutStr(semconv.AttributeAWSECSTaskARN, \"arn:aws:ecs:us-west-1:123456789123:task/my-cluster/10838bed-421f-43ef-870a-f43feacbbb5b\")\n\n\t\t\t// insert custom env\n",
                      "markdown": "`\n\t\t\tattributes := pcommon.NewMap()\n\t\t\tresourceAttributes := pcommon.NewMap()\n\t\t\t// insert default env\n\t\t\tresourceAttributes.PutStr(attr.ResourceDetectionASG, \"my-asg\")\n\t\t\tresourceAttributes.PutStr(semconv.AttributeAWSECSTaskARN, \"arn:aws:ecs:us-west-1:123456789123:task/my-cluster/10838bed-421f-43ef-870a-f43feacbbb5b\")\n\n\t\t\t// insert custom env\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/normalizer/attributesnormalizer_test.go"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 25,
                  "endLine": 257,
                  "endColumn": 30,
                  "snippet": {
                    "text": "}\n\nfunc assertStringAttributeEqual(t *testing.T, attributes pcommon.Map, attrKey, attrVal string) {\n\tif val, ok := attributes.Get(attrKey); ok {\n\t\tif val.AsString() != attrVal {\n\t\t\tt.Errorf(\"Attribute was not copied correctly: got %v, want %v\", val.AsString(), attrVal)\n\t\t}\n",
                    "rendered": {
                      "text": "}\n\nfunc assertStringAttributeEqual(t *testing.T, attributes pcommon.Map, attrKey, attrVal string) {\n\tif val, ok := attributes.Get(attrKey); ok {\n\t\tif val.AsString() != attrVal {\n\t\t\tt.Errorf(\"Attribute was not copied correctly: got %v, want %v\", val.AsString(), attrVal)\n\t\t}\n",
                      "markdown": "`}\n\nfunc assertStringAttributeEqual(t *testing.T, attributes pcommon.Map, attrKey, attrVal string) {\n\tif val, ok := attributes.Get(attrKey); ok {\n\t\tif val.AsString() != attrVal {\n\t\t\tt.Errorf(\"Attribute was not copied correctly: got %v, want %v\", val.AsString(), attrVal)\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/normalizer/attributesnormalizer_test.go"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 27,
                  "endLine": 251,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\t\tt.Errorf(\"AWSRemoteResourceCfnPrimaryIdentifier was not removed\")\n\t}\n\n\tif value, ok := attributes.Get(\"RemoteResourceCfnPrimaryIdentifier\"); !ok || value.AsString() != \"arn:123:abc-value\" {\n\t\tt.Errorf(\"RemoteResourceCfnPrimaryIdentifier has incorrect value: got %v, want %v\", value.AsString(), \"arn:123:abc-value\")\n\t}\n}\n",
                    "rendered": {
                      "text": "\t\tt.Errorf(\"AWSRemoteResourceCfnPrimaryIdentifier was not removed\")\n\t}\n\n\tif value, ok := attributes.Get(\"RemoteResourceCfnPrimaryIdentifier\"); !ok || value.AsString() != \"arn:123:abc-value\" {\n\t\tt.Errorf(\"RemoteResourceCfnPrimaryIdentifier has incorrect value: got %v, want %v\", value.AsString(), \"arn:123:abc-value\")\n\t}\n}\n",
                      "markdown": "`\t\tt.Errorf(\"AWSRemoteResourceCfnPrimaryIdentifier was not removed\")\n\t}\n\n\tif value, ok := attributes.Get(\"RemoteResourceCfnPrimaryIdentifier\"); !ok || value.AsString() != \"arn:123:abc-value\" {\n\t\tt.Errorf(\"RemoteResourceCfnPrimaryIdentifier has incorrect value: got %v, want %v\", value.AsString(), \"arn:123:abc-value\")\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/normalizer/attributesnormalizer_test.go"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 23,
                  "endLine": 247,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\tresourceAttributes := pcommon.NewMap()\n\tnormalizer.renameAttributes(attributes, resourceAttributes, false)\n\n\tif _, ok := attributes.Get(attr.AWSRemoteResourceCfnPrimaryIdentifier); ok {\n\t\tt.Errorf(\"AWSRemoteResourceCfnPrimaryIdentifier was not removed\")\n\t}\n\n",
                    "rendered": {
                      "text": "\tresourceAttributes := pcommon.NewMap()\n\tnormalizer.renameAttributes(attributes, resourceAttributes, false)\n\n\tif _, ok := attributes.Get(attr.AWSRemoteResourceCfnPrimaryIdentifier); ok {\n\t\tt.Errorf(\"AWSRemoteResourceCfnPrimaryIdentifier was not removed\")\n\t}\n\n",
                      "markdown": "`\tresourceAttributes := pcommon.NewMap()\n\tnormalizer.renameAttributes(attributes, resourceAttributes, false)\n\n\tif _, ok := attributes.Get(attr.AWSRemoteResourceCfnPrimaryIdentifier); ok {\n\t\tt.Errorf(\"AWSRemoteResourceCfnPrimaryIdentifier was not removed\")\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/normalizer/attributesnormalizer_test.go"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 21,
                  "endLine": 233,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n\ttruncateAttributesByLength(attributes)\n\n\tval, _ := attributes.Get(attr.AWSRemoteDbUser)\n\tassert.True(t, len(val.Str()) <= defaultMetricAttributeLength)\n}\n\n",
                    "rendered": {
                      "text": "\n\ttruncateAttributesByLength(attributes)\n\n\tval, _ := attributes.Get(attr.AWSRemoteDbUser)\n\tassert.True(t, len(val.Str()) <= defaultMetricAttributeLength)\n}\n\n",
                      "markdown": "`\n\ttruncateAttributesByLength(attributes)\n\n\tval, _ := attributes.Get(attr.AWSRemoteDbUser)\n\tassert.True(t, len(val.Str()) <= defaultMetricAttributeLength)\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/normalizer/attributesnormalizer_test.go"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 27,
                  "endLine": 216,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\t\tt.Errorf(\"AWSRemoteDbUser was not removed\")\n\t}\n\n\tif value, ok := attributes.Get(\"RemoteDbUser\"); !ok || value.AsString() != \"remoteDbUser-value\" {\n\t\tt.Errorf(\"MetricAttributeRemoteDbUser has incorrect value: got %v, want %v\", value.AsString(), \"remoteDbUser-value\")\n\t}\n}\n",
                    "rendered": {
                      "text": "\t\tt.Errorf(\"AWSRemoteDbUser was not removed\")\n\t}\n\n\tif value, ok := attributes.Get(\"RemoteDbUser\"); !ok || value.AsString() != \"remoteDbUser-value\" {\n\t\tt.Errorf(\"MetricAttributeRemoteDbUser has incorrect value: got %v, want %v\", value.AsString(), \"remoteDbUser-value\")\n\t}\n}\n",
                      "markdown": "`\t\tt.Errorf(\"AWSRemoteDbUser was not removed\")\n\t}\n\n\tif value, ok := attributes.Get(\"RemoteDbUser\"); !ok || value.AsString() != \"remoteDbUser-value\" {\n\t\tt.Errorf(\"MetricAttributeRemoteDbUser has incorrect value: got %v, want %v\", value.AsString(), \"remoteDbUser-value\")\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/normalizer/attributesnormalizer_test.go"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 23,
                  "endLine": 212,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\tresourceAttributes := pcommon.NewMap()\n\tnormalizer.renameAttributes(attributes, resourceAttributes, false)\n\n\tif _, ok := attributes.Get(attr.AWSRemoteDbUser); ok {\n\t\tt.Errorf(\"AWSRemoteDbUser was not removed\")\n\t}\n\n",
                    "rendered": {
                      "text": "\tresourceAttributes := pcommon.NewMap()\n\tnormalizer.renameAttributes(attributes, resourceAttributes, false)\n\n\tif _, ok := attributes.Get(attr.AWSRemoteDbUser); ok {\n\t\tt.Errorf(\"AWSRemoteDbUser was not removed\")\n\t}\n\n",
                      "markdown": "`\tresourceAttributes := pcommon.NewMap()\n\tnormalizer.renameAttributes(attributes, resourceAttributes, false)\n\n\tif _, ok := attributes.Get(attr.AWSRemoteDbUser); ok {\n\t\tt.Errorf(\"AWSRemoteDbUser was not removed\")\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/normalizer/attributesnormalizer_test.go"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 32,
                  "endLine": 188,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\t\t\t}\n\t\t\tn.normalizeTelemetryAttributes(tt.attributes, tt.resourceAttributes, tt.isTrace)\n\n\t\t\tif value, ok := tt.attributes.Get(\"Telemetry.SDK\"); !ok {\n\t\t\t\tif !tt.isTrace {\n\t\t\t\t\tt.Errorf(\"attribute is not found.\")\n\t\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\t}\n\t\t\tn.normalizeTelemetryAttributes(tt.attributes, tt.resourceAttributes, tt.isTrace)\n\n\t\t\tif value, ok := tt.attributes.Get(\"Telemetry.SDK\"); !ok {\n\t\t\t\tif !tt.isTrace {\n\t\t\t\t\tt.Errorf(\"attribute is not found.\")\n\t\t\t\t}\n",
                      "markdown": "`\t\t\t}\n\t\t\tn.normalizeTelemetryAttributes(tt.attributes, tt.resourceAttributes, tt.isTrace)\n\n\t\t\tif value, ok := tt.attributes.Get(\"Telemetry.SDK\"); !ok {\n\t\t\t\tif !tt.isTrace {\n\t\t\t\t\tt.Errorf(\"attribute is not found.\")\n\t\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/normalizer/attributesnormalizer_test.go"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 20,
                  "endLine": 128,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\tassert.True(t, len(val.Str()) == maxServiceNameLength)\n\tval, _ = attributes.Get(attr.AWSRemoteService)\n\tassert.True(t, len(val.Str()) == maxServiceNameLength)\n\tval, _ = attributes.Get(attr.AWSRemoteResourceIdentifier)\n\tassert.True(t, len(val.Str()) == 300)\n}\n\n",
                    "rendered": {
                      "text": "\tassert.True(t, len(val.Str()) == maxServiceNameLength)\n\tval, _ = attributes.Get(attr.AWSRemoteService)\n\tassert.True(t, len(val.Str()) == maxServiceNameLength)\n\tval, _ = attributes.Get(attr.AWSRemoteResourceIdentifier)\n\tassert.True(t, len(val.Str()) == 300)\n}\n\n",
                      "markdown": "`\tassert.True(t, len(val.Str()) == maxServiceNameLength)\n\tval, _ = attributes.Get(attr.AWSRemoteService)\n\tassert.True(t, len(val.Str()) == maxServiceNameLength)\n\tval, _ = attributes.Get(attr.AWSRemoteResourceIdentifier)\n\tassert.True(t, len(val.Str()) == 300)\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/normalizer/attributesnormalizer_test.go"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 20,
                  "endLine": 126,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\tassert.True(t, len(val.Str()) == maxEnvironmentLength)\n\tval, _ = attributes.Get(attr.AWSLocalService)\n\tassert.True(t, len(val.Str()) == maxServiceNameLength)\n\tval, _ = attributes.Get(attr.AWSRemoteService)\n\tassert.True(t, len(val.Str()) == maxServiceNameLength)\n\tval, _ = attributes.Get(attr.AWSRemoteResourceIdentifier)\n\tassert.True(t, len(val.Str()) == 300)\n",
                    "rendered": {
                      "text": "\tassert.True(t, len(val.Str()) == maxEnvironmentLength)\n\tval, _ = attributes.Get(attr.AWSLocalService)\n\tassert.True(t, len(val.Str()) == maxServiceNameLength)\n\tval, _ = attributes.Get(attr.AWSRemoteService)\n\tassert.True(t, len(val.Str()) == maxServiceNameLength)\n\tval, _ = attributes.Get(attr.AWSRemoteResourceIdentifier)\n\tassert.True(t, len(val.Str()) == 300)\n",
                      "markdown": "`\tassert.True(t, len(val.Str()) == maxEnvironmentLength)\n\tval, _ = attributes.Get(attr.AWSLocalService)\n\tassert.True(t, len(val.Str()) == maxServiceNameLength)\n\tval, _ = attributes.Get(attr.AWSRemoteService)\n\tassert.True(t, len(val.Str()) == maxServiceNameLength)\n\tval, _ = attributes.Get(attr.AWSRemoteResourceIdentifier)\n\tassert.True(t, len(val.Str()) == 300)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/normalizer/attributesnormalizer_test.go"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 20,
                  "endLine": 124,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\tassert.True(t, len(val.Str()) == maxEnvironmentLength)\n\tval, _ = attributes.Get(attr.AWSRemoteEnvironment)\n\tassert.True(t, len(val.Str()) == maxEnvironmentLength)\n\tval, _ = attributes.Get(attr.AWSLocalService)\n\tassert.True(t, len(val.Str()) == maxServiceNameLength)\n\tval, _ = attributes.Get(attr.AWSRemoteService)\n\tassert.True(t, len(val.Str()) == maxServiceNameLength)\n",
                    "rendered": {
                      "text": "\tassert.True(t, len(val.Str()) == maxEnvironmentLength)\n\tval, _ = attributes.Get(attr.AWSRemoteEnvironment)\n\tassert.True(t, len(val.Str()) == maxEnvironmentLength)\n\tval, _ = attributes.Get(attr.AWSLocalService)\n\tassert.True(t, len(val.Str()) == maxServiceNameLength)\n\tval, _ = attributes.Get(attr.AWSRemoteService)\n\tassert.True(t, len(val.Str()) == maxServiceNameLength)\n",
                      "markdown": "`\tassert.True(t, len(val.Str()) == maxEnvironmentLength)\n\tval, _ = attributes.Get(attr.AWSRemoteEnvironment)\n\tassert.True(t, len(val.Str()) == maxEnvironmentLength)\n\tval, _ = attributes.Get(attr.AWSLocalService)\n\tassert.True(t, len(val.Str()) == maxServiceNameLength)\n\tval, _ = attributes.Get(attr.AWSRemoteService)\n\tassert.True(t, len(val.Str()) == maxServiceNameLength)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/normalizer/attributesnormalizer_test.go"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 20,
                  "endLine": 122,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n\tval, _ := attributes.Get(attr.AWSLocalEnvironment)\n\tassert.True(t, len(val.Str()) == maxEnvironmentLength)\n\tval, _ = attributes.Get(attr.AWSRemoteEnvironment)\n\tassert.True(t, len(val.Str()) == maxEnvironmentLength)\n\tval, _ = attributes.Get(attr.AWSLocalService)\n\tassert.True(t, len(val.Str()) == maxServiceNameLength)\n",
                    "rendered": {
                      "text": "\n\tval, _ := attributes.Get(attr.AWSLocalEnvironment)\n\tassert.True(t, len(val.Str()) == maxEnvironmentLength)\n\tval, _ = attributes.Get(attr.AWSRemoteEnvironment)\n\tassert.True(t, len(val.Str()) == maxEnvironmentLength)\n\tval, _ = attributes.Get(attr.AWSLocalService)\n\tassert.True(t, len(val.Str()) == maxServiceNameLength)\n",
                      "markdown": "`\n\tval, _ := attributes.Get(attr.AWSLocalEnvironment)\n\tassert.True(t, len(val.Str()) == maxEnvironmentLength)\n\tval, _ = attributes.Get(attr.AWSRemoteEnvironment)\n\tassert.True(t, len(val.Str()) == maxEnvironmentLength)\n\tval, _ = attributes.Get(attr.AWSLocalService)\n\tassert.True(t, len(val.Str()) == maxServiceNameLength)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/normalizer/attributesnormalizer_test.go"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 21,
                  "endLine": 120,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n\ttruncateAttributesByLength(attributes)\n\n\tval, _ := attributes.Get(attr.AWSLocalEnvironment)\n\tassert.True(t, len(val.Str()) == maxEnvironmentLength)\n\tval, _ = attributes.Get(attr.AWSRemoteEnvironment)\n\tassert.True(t, len(val.Str()) == maxEnvironmentLength)\n",
                    "rendered": {
                      "text": "\n\ttruncateAttributesByLength(attributes)\n\n\tval, _ := attributes.Get(attr.AWSLocalEnvironment)\n\tassert.True(t, len(val.Str()) == maxEnvironmentLength)\n\tval, _ = attributes.Get(attr.AWSRemoteEnvironment)\n\tassert.True(t, len(val.Str()) == maxEnvironmentLength)\n",
                      "markdown": "`\n\ttruncateAttributesByLength(attributes)\n\n\tval, _ := attributes.Get(attr.AWSLocalEnvironment)\n\tassert.True(t, len(val.Str()) == maxEnvironmentLength)\n\tval, _ = attributes.Get(attr.AWSRemoteEnvironment)\n\tassert.True(t, len(val.Str()) == maxEnvironmentLength)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/normalizer/attributesnormalizer_test.go"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 35,
                  "endLine": 74,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\t\tassertStringAttributeEqual(t, resourceAttributes, replacementKey, replacementKey+\"-value\")\n\t}\n\n\tif value, ok := resourceAttributes.Get(\"K8s.Node\"); !ok || value.AsString() != \"i-01ef7d37f42caa168\" {\n\t\tt.Errorf(\"replacementKey has incorrect value: got %v, want %v\", value.AsString(), \"i-01ef7d37f42caa168\")\n\t}\n}\n",
                    "rendered": {
                      "text": "\t\tassertStringAttributeEqual(t, resourceAttributes, replacementKey, replacementKey+\"-value\")\n\t}\n\n\tif value, ok := resourceAttributes.Get(\"K8s.Node\"); !ok || value.AsString() != \"i-01ef7d37f42caa168\" {\n\t\tt.Errorf(\"replacementKey has incorrect value: got %v, want %v\", value.AsString(), \"i-01ef7d37f42caa168\")\n\t}\n}\n",
                      "markdown": "`\t\tassertStringAttributeEqual(t, resourceAttributes, replacementKey, replacementKey+\"-value\")\n\t}\n\n\tif value, ok := resourceAttributes.Get(\"K8s.Node\"); !ok || value.AsString() != \"i-01ef7d37f42caa168\" {\n\t\tt.Errorf(\"replacementKey has incorrect value: got %v, want %v\", value.AsString(), \"i-01ef7d37f42caa168\")\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/normalizer/attributesnormalizer_test.go"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 32,
                  "endLine": 64,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n\t// Check that the original key has been removed\n\tfor originalKey := range resourceAttributesRenamingForTrace {\n\t\tif _, ok := resourceAttributes.Get(originalKey); ok {\n\t\t\tt.Errorf(\"originalKey was not removed\")\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\n\t// Check that the original key has been removed\n\tfor originalKey := range resourceAttributesRenamingForTrace {\n\t\tif _, ok := resourceAttributes.Get(originalKey); ok {\n\t\t\tt.Errorf(\"originalKey was not removed\")\n\t\t}\n\t}\n",
                      "markdown": "`\n\t// Check that the original key has been removed\n\tfor originalKey := range resourceAttributesRenamingForTrace {\n\t\tif _, ok := resourceAttributes.Get(originalKey); ok {\n\t\t\tt.Errorf(\"originalKey was not removed\")\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/normalizer/attributesnormalizer_test.go"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 24,
                  "endLine": 35,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n\t// Check that the original key has been removed\n\tfor originalKey := range attributesRenamingForMetric {\n\t\tif _, ok := attributes.Get(originalKey); ok {\n\t\t\tt.Errorf(\"originalKey was not removed\")\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\n\t// Check that the original key has been removed\n\tfor originalKey := range attributesRenamingForMetric {\n\t\tif _, ok := attributes.Get(originalKey); ok {\n\t\t\tt.Errorf(\"originalKey was not removed\")\n\t\t}\n\t}\n",
                      "markdown": "`\n\t// Check that the original key has been removed\n\tfor originalKey := range attributesRenamingForMetric {\n\t\tif _, ok := attributes.Get(originalKey); ok {\n\t\t\tt.Errorf(\"originalKey was not removed\")\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/normalizer/attributesnormalizer_test.go"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 3,
                  "endLine": 174,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\t\t},\n\t\t{\n\n\t\t\t\"testAppendAttributesToMetricWithAllValuesMissing\",\n\t\t\tpcommon.NewMap(),\n\t\t\tpcommon.NewMap(),\n\t\t\tfalse,\n",
                    "rendered": {
                      "text": "\t\t},\n\t\t{\n\n\t\t\t\"testAppendAttributesToMetricWithAllValuesMissing\",\n\t\t\tpcommon.NewMap(),\n\t\t\tpcommon.NewMap(),\n\t\t\tfalse,\n",
                      "markdown": "`\t\t},\n\t\t{\n\n\t\t\t\"testAppendAttributesToMetricWithAllValuesMissing\",\n\t\t\tpcommon.NewMap(),\n\t\t\tpcommon.NewMap(),\n\t\t\tfalse,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/normalizer/attributesnormalizer_test.go"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 3,
                  "endLine": 166,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t\t\"opentelemetry,0.0.1auto,go,Auto\",\n\t\t},\n\t\t{\n\t\t\t\"testAppendAttributesToMetricWithSomeValuesMissing\",\n\t\t\tpcommon.NewMap(),\n\t\t\tincompleteResourceAttributes,\n\t\t\tfalse,\n",
                    "rendered": {
                      "text": "\t\t\t\"opentelemetry,0.0.1auto,go,Auto\",\n\t\t},\n\t\t{\n\t\t\t\"testAppendAttributesToMetricWithSomeValuesMissing\",\n\t\t\tpcommon.NewMap(),\n\t\t\tincompleteResourceAttributes,\n\t\t\tfalse,\n",
                      "markdown": "`\t\t\t\"opentelemetry,0.0.1auto,go,Auto\",\n\t\t},\n\t\t{\n\t\t\t\"testAppendAttributesToMetricWithSomeValuesMissing\",\n\t\t\tpcommon.NewMap(),\n\t\t\tincompleteResourceAttributes,\n\t\t\tfalse,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/normalizer/attributesnormalizer_test.go"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 3,
                  "endLine": 159,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t\ttrue,\n\t\t\t\"\",\n\t\t}, {\n\t\t\t\"testAppendAttributesToMetricWithValuesFound\",\n\t\t\tpcommon.NewMap(),\n\t\t\tcompleteResourceAttributes,\n\t\t\tfalse,\n",
                    "rendered": {
                      "text": "\t\t\ttrue,\n\t\t\t\"\",\n\t\t}, {\n\t\t\t\"testAppendAttributesToMetricWithValuesFound\",\n\t\t\tpcommon.NewMap(),\n\t\t\tcompleteResourceAttributes,\n\t\t\tfalse,\n",
                      "markdown": "`\t\t\ttrue,\n\t\t\t\"\",\n\t\t}, {\n\t\t\t\"testAppendAttributesToMetricWithValuesFound\",\n\t\t\tpcommon.NewMap(),\n\t\t\tcompleteResourceAttributes,\n\t\t\tfalse,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/normalizer/attributesnormalizer.go"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 27,
                  "endLine": 230,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\t\t\t\tattributes.PutStr(attrKey, truncateStringByLength(val.Str(), maxServiceNameLength))\n\t\t\t}\n\t\tdefault:\n\t\t\tif val, ok := attributes.Get(attrKey); ok {\n\t\t\t\tattributes.PutStr(attrKey, truncateStringByLength(val.Str(), defaultMetricAttributeLength))\n\t\t\t}\n\t\t}\n",
                    "rendered": {
                      "text": "\t\t\t\tattributes.PutStr(attrKey, truncateStringByLength(val.Str(), maxServiceNameLength))\n\t\t\t}\n\t\tdefault:\n\t\t\tif val, ok := attributes.Get(attrKey); ok {\n\t\t\t\tattributes.PutStr(attrKey, truncateStringByLength(val.Str(), defaultMetricAttributeLength))\n\t\t\t}\n\t\t}\n",
                      "markdown": "`\t\t\t\tattributes.PutStr(attrKey, truncateStringByLength(val.Str(), maxServiceNameLength))\n\t\t\t}\n\t\tdefault:\n\t\t\tif val, ok := attributes.Get(attrKey); ok {\n\t\t\t\tattributes.PutStr(attrKey, truncateStringByLength(val.Str(), defaultMetricAttributeLength))\n\t\t\t}\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/normalizer/attributesnormalizer.go"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 27,
                  "endLine": 226,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\t\t\t\tattributes.PutStr(attrKey, truncateStringByLength(val.Str(), maxEnvironmentLength))\n\t\t\t}\n\t\tcase attr.AWSLocalService, attr.AWSRemoteService:\n\t\t\tif val, ok := attributes.Get(attrKey); ok {\n\t\t\t\tattributes.PutStr(attrKey, truncateStringByLength(val.Str(), maxServiceNameLength))\n\t\t\t}\n\t\tdefault:\n",
                    "rendered": {
                      "text": "\t\t\t\tattributes.PutStr(attrKey, truncateStringByLength(val.Str(), maxEnvironmentLength))\n\t\t\t}\n\t\tcase attr.AWSLocalService, attr.AWSRemoteService:\n\t\t\tif val, ok := attributes.Get(attrKey); ok {\n\t\t\t\tattributes.PutStr(attrKey, truncateStringByLength(val.Str(), maxServiceNameLength))\n\t\t\t}\n\t\tdefault:\n",
                      "markdown": "`\t\t\t\tattributes.PutStr(attrKey, truncateStringByLength(val.Str(), maxEnvironmentLength))\n\t\t\t}\n\t\tcase attr.AWSLocalService, attr.AWSRemoteService:\n\t\t\tif val, ok := attributes.Get(attrKey); ok {\n\t\t\t\tattributes.PutStr(attrKey, truncateStringByLength(val.Str(), maxServiceNameLength))\n\t\t\t}\n\t\tdefault:\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/normalizer/attributesnormalizer.go"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 27,
                  "endLine": 222,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\tfor attrKey := range attributesRenamingForMetric {\n\t\tswitch attrKey {\n\t\tcase attr.AWSLocalEnvironment, attr.AWSRemoteEnvironment:\n\t\t\tif val, ok := attributes.Get(attrKey); ok {\n\t\t\t\tattributes.PutStr(attrKey, truncateStringByLength(val.Str(), maxEnvironmentLength))\n\t\t\t}\n\t\tcase attr.AWSLocalService, attr.AWSRemoteService:\n",
                    "rendered": {
                      "text": "\tfor attrKey := range attributesRenamingForMetric {\n\t\tswitch attrKey {\n\t\tcase attr.AWSLocalEnvironment, attr.AWSRemoteEnvironment:\n\t\t\tif val, ok := attributes.Get(attrKey); ok {\n\t\t\t\tattributes.PutStr(attrKey, truncateStringByLength(val.Str(), maxEnvironmentLength))\n\t\t\t}\n\t\tcase attr.AWSLocalService, attr.AWSRemoteService:\n",
                      "markdown": "`\tfor attrKey := range attributesRenamingForMetric {\n\t\tswitch attrKey {\n\t\tcase attr.AWSLocalEnvironment, attr.AWSRemoteEnvironment:\n\t\t\tif val, ok := attributes.Get(attrKey); ok {\n\t\t\t\tattributes.PutStr(attrKey, truncateStringByLength(val.Str(), maxEnvironmentLength))\n\t\t\t}\n\t\tcase attr.AWSLocalService, attr.AWSRemoteService:\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/normalizer/attributesnormalizer.go"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 24,
                  "endLine": 207,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t\t\tattrs.Remove(original)\n\t\t\tif original == semconv.AttributeK8SPodName {\n\t\t\t\t// only rename host.id if the pod name is set\n\t\t\t\tif host, ok := attrs.Get(\"host.id\"); ok {\n\t\t\t\t\tattrs.PutStr(\"K8s.Node\", host.AsString())\n\t\t\t\t}\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\tattrs.Remove(original)\n\t\t\tif original == semconv.AttributeK8SPodName {\n\t\t\t\t// only rename host.id if the pod name is set\n\t\t\t\tif host, ok := attrs.Get(\"host.id\"); ok {\n\t\t\t\t\tattrs.PutStr(\"K8s.Node\", host.AsString())\n\t\t\t\t}\n\t\t\t}\n",
                      "markdown": "`\t\t\tattrs.Remove(original)\n\t\t\tif original == semconv.AttributeK8SPodName {\n\t\t\t\t// only rename host.id if the pod name is set\n\t\t\t\tif host, ok := attrs.Get(\"host.id\"); ok {\n\t\t\t\t\tattrs.PutStr(\"K8s.Node\", host.AsString())\n\t\t\t\t}\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/normalizer/attributesnormalizer.go"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 23,
                  "endLine": 202,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\nfunc rename(attrs pcommon.Map, renameMap map[string]string) {\n\tfor original, replacement := range renameMap {\n\t\tif value, ok := attrs.Get(original); ok {\n\t\t\tattrs.PutStr(replacement, value.AsString())\n\t\t\tattrs.Remove(original)\n\t\t\tif original == semconv.AttributeK8SPodName {\n",
                    "rendered": {
                      "text": "\nfunc rename(attrs pcommon.Map, renameMap map[string]string) {\n\tfor original, replacement := range renameMap {\n\t\tif value, ok := attrs.Get(original); ok {\n\t\t\tattrs.PutStr(replacement, value.AsString())\n\t\t\tattrs.Remove(original)\n\t\t\tif original == semconv.AttributeK8SPodName {\n",
                      "markdown": "`\nfunc rename(attrs pcommon.Map, renameMap map[string]string) {\n\tfor original, replacement := range renameMap {\n\t\tif value, ok := attrs.Get(original); ok {\n\t\t\tattrs.PutStr(replacement, value.AsString())\n\t\t\tattrs.Remove(original)\n\t\t\tif original == semconv.AttributeK8SPodName {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/normalizer/attributesnormalizer.go"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 25,
                  "endLine": 182,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\tattributes.PutStr(common.MetricAttributeTelemetryAgent, fmt.Sprintf(\"CWAgent/%s\", version.Number()))\n\n\tvar telemetrySource string\n\tif val, ok := attributes.Get(attr.AWSSpanKind); ok {\n\t\tswitch val.Str() {\n\t\tcase \"CLIENT\":\n\t\t\ttelemetrySource = \"ClientSpan\"\n",
                    "rendered": {
                      "text": "\tattributes.PutStr(common.MetricAttributeTelemetryAgent, fmt.Sprintf(\"CWAgent/%s\", version.Number()))\n\n\tvar telemetrySource string\n\tif val, ok := attributes.Get(attr.AWSSpanKind); ok {\n\t\tswitch val.Str() {\n\t\tcase \"CLIENT\":\n\t\t\ttelemetrySource = \"ClientSpan\"\n",
                      "markdown": "`\tattributes.PutStr(common.MetricAttributeTelemetryAgent, fmt.Sprintf(\"CWAgent/%s\", version.Number()))\n\n\tvar telemetrySource string\n\tif val, ok := attributes.Get(attr.AWSSpanKind); ok {\n\t\tswitch val.Str() {\n\t\tcase \"CLIENT\":\n\t\t\ttelemetrySource = \"ClientSpan\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/normalizer/attributesnormalizer.go"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 46,
                  "endLine": 131,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\t}\n\t// If a metric doesn't `aws.local.service` attribute, copy it from resource attributes. This is now only used in\n\t// processing runtime metrics.\n\tif serviceAttribute, ok := resourceAttributes.Get(attr.AWSLocalService); ok {\n\t\tattributes.PutStr(attr.AWSLocalService, serviceAttribute.AsString())\n\t}\n}\n",
                    "rendered": {
                      "text": "\t}\n\t// If a metric doesn't `aws.local.service` attribute, copy it from resource attributes. This is now only used in\n\t// processing runtime metrics.\n\tif serviceAttribute, ok := resourceAttributes.Get(attr.AWSLocalService); ok {\n\t\tattributes.PutStr(attr.AWSLocalService, serviceAttribute.AsString())\n\t}\n}\n",
                      "markdown": "`\t}\n\t// If a metric doesn't `aws.local.service` attribute, copy it from resource attributes. This is now only used in\n\t// processing runtime metrics.\n\tif serviceAttribute, ok := resourceAttributes.Get(attr.AWSLocalService); ok {\n\t\tattributes.PutStr(attr.AWSLocalService, serviceAttribute.AsString())\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/normalizer/attributesnormalizer.go"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 37,
                  "endLine": 123,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\t\t\tattributes.PutStr(v, resourceAttrValue.AsString())\n\t\t\tif k == semconv.AttributeK8SPodName {\n\t\t\t\t// only copy \"host.id\" from resource attributes to \"K8s.Node\" in attributesif the pod name is set\n\t\t\t\tif host, ok := resourceAttributes.Get(\"host.id\"); ok {\n\t\t\t\t\tattributes.PutStr(\"K8s.Node\", host.AsString())\n\t\t\t\t}\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\tattributes.PutStr(v, resourceAttrValue.AsString())\n\t\t\tif k == semconv.AttributeK8SPodName {\n\t\t\t\t// only copy \"host.id\" from resource attributes to \"K8s.Node\" in attributesif the pod name is set\n\t\t\t\tif host, ok := resourceAttributes.Get(\"host.id\"); ok {\n\t\t\t\t\tattributes.PutStr(\"K8s.Node\", host.AsString())\n\t\t\t\t}\n\t\t\t}\n",
                      "markdown": "`\t\t\tattributes.PutStr(v, resourceAttrValue.AsString())\n\t\t\tif k == semconv.AttributeK8SPodName {\n\t\t\t\t// only copy \"host.id\" from resource attributes to \"K8s.Node\" in attributesif the pod name is set\n\t\t\t\tif host, ok := resourceAttributes.Get(\"host.id\"); ok {\n\t\t\t\t\tattributes.PutStr(\"K8s.Node\", host.AsString())\n\t\t\t\t}\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/normalizer/attributesnormalizer.go"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 41,
                  "endLine": 117,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\tfor k, v := range resourceToMetricAttributes {\n\t\tif resourceAttrValue, ok := resourceAttributes.Get(k); ok {\n\t\t\t// print some debug info when an attribute value is overwritten\n\t\t\tif originalAttrValue, ok := attributes.Get(k); ok {\n\t\t\t\tn.logger.Debug(\"attribute value is overwritten\", zap.String(\"attribute\", k), zap.String(\"original\", originalAttrValue.AsString()), zap.String(\"new\", resourceAttrValue.AsString()))\n\t\t\t}\n\t\t\tattributes.PutStr(v, resourceAttrValue.AsString())\n",
                    "rendered": {
                      "text": "\tfor k, v := range resourceToMetricAttributes {\n\t\tif resourceAttrValue, ok := resourceAttributes.Get(k); ok {\n\t\t\t// print some debug info when an attribute value is overwritten\n\t\t\tif originalAttrValue, ok := attributes.Get(k); ok {\n\t\t\t\tn.logger.Debug(\"attribute value is overwritten\", zap.String(\"attribute\", k), zap.String(\"original\", originalAttrValue.AsString()), zap.String(\"new\", resourceAttrValue.AsString()))\n\t\t\t}\n\t\t\tattributes.PutStr(v, resourceAttrValue.AsString())\n",
                      "markdown": "`\tfor k, v := range resourceToMetricAttributes {\n\t\tif resourceAttrValue, ok := resourceAttributes.Get(k); ok {\n\t\t\t// print some debug info when an attribute value is overwritten\n\t\t\tif originalAttrValue, ok := attributes.Get(k); ok {\n\t\t\t\tn.logger.Debug(\"attribute value is overwritten\", zap.String(\"attribute\", k), zap.String(\"original\", originalAttrValue.AsString()), zap.String(\"new\", resourceAttrValue.AsString()))\n\t\t\t}\n\t\t\tattributes.PutStr(v, resourceAttrValue.AsString())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/normalizer/attributesnormalizer.go"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 48,
                  "endLine": 115,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\t\treturn\n\t}\n\tfor k, v := range resourceToMetricAttributes {\n\t\tif resourceAttrValue, ok := resourceAttributes.Get(k); ok {\n\t\t\t// print some debug info when an attribute value is overwritten\n\t\t\tif originalAttrValue, ok := attributes.Get(k); ok {\n\t\t\t\tn.logger.Debug(\"attribute value is overwritten\", zap.String(\"attribute\", k), zap.String(\"original\", originalAttrValue.AsString()), zap.String(\"new\", resourceAttrValue.AsString()))\n",
                    "rendered": {
                      "text": "\t\treturn\n\t}\n\tfor k, v := range resourceToMetricAttributes {\n\t\tif resourceAttrValue, ok := resourceAttributes.Get(k); ok {\n\t\t\t// print some debug info when an attribute value is overwritten\n\t\t\tif originalAttrValue, ok := attributes.Get(k); ok {\n\t\t\t\tn.logger.Debug(\"attribute value is overwritten\", zap.String(\"attribute\", k), zap.String(\"original\", originalAttrValue.AsString()), zap.String(\"new\", resourceAttrValue.AsString()))\n",
                      "markdown": "`\t\treturn\n\t}\n\tfor k, v := range resourceToMetricAttributes {\n\t\tif resourceAttrValue, ok := resourceAttributes.Get(k); ok {\n\t\t\t// print some debug info when an attribute value is overwritten\n\t\t\tif originalAttrValue, ok := attributes.Get(k); ok {\n\t\t\t\tn.logger.Debug(\"attribute value is overwritten\", zap.String(\"attribute\", k), zap.String(\"original\", originalAttrValue.AsString()), zap.String(\"new\", resourceAttrValue.AsString()))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/processor_test.go"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 56,
                  "endLine": 234,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\t}\n\n\thistogram := m.ResourceMetrics().At(4).ScopeMetrics().At(0).Metrics().At(0).Histogram()\n\tif val, ok := histogram.DataPoints().At(0).Attributes().Get(dimensionName); !ok {\n\t\tt.Errorf(\"no dimension value is found with key %s\\n\", dimensionName)\n\t} else {\n\t\tnewVal := val.AsString()\n",
                    "rendered": {
                      "text": "\t}\n\n\thistogram := m.ResourceMetrics().At(4).ScopeMetrics().At(0).Metrics().At(0).Histogram()\n\tif val, ok := histogram.DataPoints().At(0).Attributes().Get(dimensionName); !ok {\n\t\tt.Errorf(\"no dimension value is found with key %s\\n\", dimensionName)\n\t} else {\n\t\tnewVal := val.AsString()\n",
                      "markdown": "`\t}\n\n\thistogram := m.ResourceMetrics().At(4).ScopeMetrics().At(0).Metrics().At(0).Histogram()\n\tif val, ok := histogram.DataPoints().At(0).Attributes().Get(dimensionName); !ok {\n\t\tt.Errorf(\"no dimension value is found with key %s\\n\", dimensionName)\n\t} else {\n\t\tnewVal := val.AsString()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/processor_test.go"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 54,
                  "endLine": 224,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\t}\n\n\tsummary := m.ResourceMetrics().At(3).ScopeMetrics().At(0).Metrics().At(0).Summary()\n\tif val, ok := summary.DataPoints().At(0).Attributes().Get(dimensionName); !ok {\n\t\tt.Errorf(\"no dimension value is found with key %s\\n\", dimensionName)\n\t} else {\n\t\tnewVal := val.AsString()\n",
                    "rendered": {
                      "text": "\t}\n\n\tsummary := m.ResourceMetrics().At(3).ScopeMetrics().At(0).Metrics().At(0).Summary()\n\tif val, ok := summary.DataPoints().At(0).Attributes().Get(dimensionName); !ok {\n\t\tt.Errorf(\"no dimension value is found with key %s\\n\", dimensionName)\n\t} else {\n\t\tnewVal := val.AsString()\n",
                      "markdown": "`\t}\n\n\tsummary := m.ResourceMetrics().At(3).ScopeMetrics().At(0).Metrics().At(0).Summary()\n\tif val, ok := summary.DataPoints().At(0).Attributes().Get(dimensionName); !ok {\n\t\tt.Errorf(\"no dimension value is found with key %s\\n\", dimensionName)\n\t} else {\n\t\tnewVal := val.AsString()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/processor_test.go"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 60,
                  "endLine": 214,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\t}\n\n\texpoHistogram := m.ResourceMetrics().At(2).ScopeMetrics().At(0).Metrics().At(0).ExponentialHistogram()\n\tif val, ok := expoHistogram.DataPoints().At(0).Attributes().Get(dimensionName); !ok {\n\t\tt.Errorf(\"no dimension value is found with key %s\\n\", dimensionName)\n\t} else {\n\t\tnewVal := val.AsString()\n",
                    "rendered": {
                      "text": "\t}\n\n\texpoHistogram := m.ResourceMetrics().At(2).ScopeMetrics().At(0).Metrics().At(0).ExponentialHistogram()\n\tif val, ok := expoHistogram.DataPoints().At(0).Attributes().Get(dimensionName); !ok {\n\t\tt.Errorf(\"no dimension value is found with key %s\\n\", dimensionName)\n\t} else {\n\t\tnewVal := val.AsString()\n",
                      "markdown": "`\t}\n\n\texpoHistogram := m.ResourceMetrics().At(2).ScopeMetrics().At(0).Metrics().At(0).ExponentialHistogram()\n\tif val, ok := expoHistogram.DataPoints().At(0).Attributes().Get(dimensionName); !ok {\n\t\tt.Errorf(\"no dimension value is found with key %s\\n\", dimensionName)\n\t} else {\n\t\tnewVal := val.AsString()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/processor_test.go"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 50,
                  "endLine": 204,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\t}\n\n\tsum := m.ResourceMetrics().At(1).ScopeMetrics().At(0).Metrics().At(0).Sum()\n\tif val, ok := sum.DataPoints().At(0).Attributes().Get(dimensionName); !ok {\n\t\tt.Errorf(\"no dimension value is found with key %s\\n\", dimensionName)\n\t} else {\n\t\tnewVal := val.AsString()\n",
                    "rendered": {
                      "text": "\t}\n\n\tsum := m.ResourceMetrics().At(1).ScopeMetrics().At(0).Metrics().At(0).Sum()\n\tif val, ok := sum.DataPoints().At(0).Attributes().Get(dimensionName); !ok {\n\t\tt.Errorf(\"no dimension value is found with key %s\\n\", dimensionName)\n\t} else {\n\t\tnewVal := val.AsString()\n",
                      "markdown": "`\t}\n\n\tsum := m.ResourceMetrics().At(1).ScopeMetrics().At(0).Metrics().At(0).Sum()\n\tif val, ok := sum.DataPoints().At(0).Attributes().Get(dimensionName); !ok {\n\t\tt.Errorf(\"no dimension value is found with key %s\\n\", dimensionName)\n\t} else {\n\t\tnewVal := val.AsString()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/processor_test.go"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 52,
                  "endLine": 197,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\tvar agreedValue string\n\n\tgauge := m.ResourceMetrics().At(0).ScopeMetrics().At(0).Metrics().At(0).Gauge()\n\tif val, ok := gauge.DataPoints().At(0).Attributes().Get(dimensionName); !ok {\n\t\tt.Errorf(\"no dimension value is found with key %s\\n\", dimensionName)\n\t} else {\n\t\tagreedValue = val.AsString()\n",
                    "rendered": {
                      "text": "\tvar agreedValue string\n\n\tgauge := m.ResourceMetrics().At(0).ScopeMetrics().At(0).Metrics().At(0).Gauge()\n\tif val, ok := gauge.DataPoints().At(0).Attributes().Get(dimensionName); !ok {\n\t\tt.Errorf(\"no dimension value is found with key %s\\n\", dimensionName)\n\t} else {\n\t\tagreedValue = val.AsString()\n",
                      "markdown": "`\tvar agreedValue string\n\n\tgauge := m.ResourceMetrics().At(0).ScopeMetrics().At(0).Metrics().At(0).Gauge()\n\tif val, ok := gauge.DataPoints().At(0).Attributes().Get(dimensionName); !ok {\n\t\tt.Errorf(\"no dimension value is found with key %s\\n\", dimensionName)\n\t} else {\n\t\tagreedValue = val.AsString()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/processor_test.go"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 40,
                  "endLine": 155,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\tap.processTraces(ctx, traces)\n\n\tactualSpan := traces.ResourceSpans().At(0).ScopeSpans().At(0).Spans().At(0)\n\tactualVal, _ := actualSpan.Attributes().Get(\"dim_val\")\n\tassert.Equal(t, \"test2\", actualVal.AsString())\n}\n\n",
                    "rendered": {
                      "text": "\tap.processTraces(ctx, traces)\n\n\tactualSpan := traces.ResourceSpans().At(0).ScopeSpans().At(0).Spans().At(0)\n\tactualVal, _ := actualSpan.Attributes().Get(\"dim_val\")\n\tassert.Equal(t, \"test2\", actualVal.AsString())\n}\n\n",
                      "markdown": "`\tap.processTraces(ctx, traces)\n\n\tactualSpan := traces.ResourceSpans().At(0).ScopeSpans().At(0).Spans().At(0)\n\tactualVal, _ := actualSpan.Attributes().Get(\"dim_val\")\n\tassert.Equal(t, \"test2\", actualVal.AsString())\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/inputs/windows_event_log/wineventlog/sys_call.go"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 79,
                  "endLine": 120,
                  "endColumn": 88,
                  "snippet": {
                    "text": "\treturn\n}\n\nfunc EvtNext(resultSet EvtHandle, eventArraySize uint32, eventArray *EvtHandle, timeout uint32, flags uint32, numReturned *uint32) (err error) {\n\tr1, _, e1 := syscall.Syscall6(procEvtNext.Addr(), 6, uintptr(resultSet), uintptr(eventArraySize), uintptr(unsafe.Pointer(eventArray)), uintptr(timeout), uintptr(flags), uintptr(unsafe.Pointer(numReturned)))\n\tif r1 == 0 {\n\t\tif e1 != 0 {\n",
                    "rendered": {
                      "text": "\treturn\n}\n\nfunc EvtNext(resultSet EvtHandle, eventArraySize uint32, eventArray *EvtHandle, timeout uint32, flags uint32, numReturned *uint32) (err error) {\n\tr1, _, e1 := syscall.Syscall6(procEvtNext.Addr(), 6, uintptr(resultSet), uintptr(eventArraySize), uintptr(unsafe.Pointer(eventArray)), uintptr(timeout), uintptr(flags), uintptr(unsafe.Pointer(numReturned)))\n\tif r1 == 0 {\n\t\tif e1 != 0 {\n",
                      "markdown": "`\treturn\n}\n\nfunc EvtNext(resultSet EvtHandle, eventArraySize uint32, eventArray *EvtHandle, timeout uint32, flags uint32, numReturned *uint32) (err error) {\n\tr1, _, e1 := syscall.Syscall6(procEvtNext.Addr(), 6, uintptr(resultSet), uintptr(eventArraySize), uintptr(unsafe.Pointer(eventArray)), uintptr(timeout), uintptr(flags), uintptr(unsafe.Pointer(numReturned)))\n\tif r1 == 0 {\n\t\tif e1 != 0 {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/META-INF/maven/com.google.code.gson/gson/pom.xml"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 21,
                  "endLine": 168,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        <version>3.3.0</version>\n        <executions>\n          <execution>\n            <id>post-obfuscate-class</id>\n            <phase>process-test-classes</phase>\n            <goals>\n              <goal>copy-resources</goal>\n",
                    "rendered": {
                      "text": "        <version>3.3.0</version>\n        <executions>\n          <execution>\n            <id>post-obfuscate-class</id>\n            <phase>process-test-classes</phase>\n            <goals>\n              <goal>copy-resources</goal>\n",
                      "markdown": "`        <version>3.3.0</version>\n        <executions>\n          <execution>\n            <id>post-obfuscate-class</id>\n            <phase>process-test-classes</phase>\n            <goals>\n              <goal>copy-resources</goal>\n`"
                    }
                  },
                  "sourceLanguage": "pom.xml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/META-INF/maven/com.google.code.gson/gson/pom.xml"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 27,
                  "endLine": 152,
                  "endColumn": 36,
                  "snippet": {
                    "text": "          </execution>\n        </executions>\n        <configuration>\n          <obfuscate>true</obfuscate>\n          <injar>test-classes-obfuscated-injar</injar>\n          <outjar>test-classes-obfuscated-outjar</outjar>\n          <inFilter>**/*.class</inFilter>\n",
                    "rendered": {
                      "text": "          </execution>\n        </executions>\n        <configuration>\n          <obfuscate>true</obfuscate>\n          <injar>test-classes-obfuscated-injar</injar>\n          <outjar>test-classes-obfuscated-outjar</outjar>\n          <inFilter>**/*.class</inFilter>\n",
                      "markdown": "`          </execution>\n        </executions>\n        <configuration>\n          <obfuscate>true</obfuscate>\n          <injar>test-classes-obfuscated-injar</injar>\n          <outjar>test-classes-obfuscated-outjar</outjar>\n          <inFilter>**/*.class</inFilter>\n`"
                    }
                  },
                  "sourceLanguage": "pom.xml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/META-INF/maven/com.google.code.gson/gson/pom.xml"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 11,
                  "endLine": 152,
                  "endColumn": 20,
                  "snippet": {
                    "text": "          </execution>\n        </executions>\n        <configuration>\n          <obfuscate>true</obfuscate>\n          <injar>test-classes-obfuscated-injar</injar>\n          <outjar>test-classes-obfuscated-outjar</outjar>\n          <inFilter>**/*.class</inFilter>\n",
                    "rendered": {
                      "text": "          </execution>\n        </executions>\n        <configuration>\n          <obfuscate>true</obfuscate>\n          <injar>test-classes-obfuscated-injar</injar>\n          <outjar>test-classes-obfuscated-outjar</outjar>\n          <inFilter>**/*.class</inFilter>\n",
                      "markdown": "`          </execution>\n        </executions>\n        <configuration>\n          <obfuscate>true</obfuscate>\n          <injar>test-classes-obfuscated-injar</injar>\n          <outjar>test-classes-obfuscated-outjar</outjar>\n          <inFilter>**/*.class</inFilter>\n`"
                    }
                  },
                  "sourceLanguage": "pom.xml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/META-INF/maven/com.google.code.gson/gson/pom.xml"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 16,
                  "endLine": 144,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        <version>2.6.0</version>\n        <executions>\n          <execution>\n            <id>obfuscate-test-class</id>\n            <phase>process-test-classes</phase>\n            <goals>\n              <goal>proguard</goal>\n",
                    "rendered": {
                      "text": "        <version>2.6.0</version>\n        <executions>\n          <execution>\n            <id>obfuscate-test-class</id>\n            <phase>process-test-classes</phase>\n            <goals>\n              <goal>proguard</goal>\n",
                      "markdown": "`        <version>2.6.0</version>\n        <executions>\n          <execution>\n            <id>obfuscate-test-class</id>\n            <phase>process-test-classes</phase>\n            <goals>\n              <goal>proguard</goal>\n`"
                    }
                  },
                  "sourceLanguage": "pom.xml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/META-INF/maven/com.google.code.gson/gson/pom.xml"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 20,
                  "endLine": 118,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        <version>1.0.1</version>\n        <executions>\n          <execution>\n            <id>pre-obfuscate-class</id>\n            <phase>process-test-classes</phase>\n            <goals>\n              <goal>rename</goal>\n",
                    "rendered": {
                      "text": "        <version>1.0.1</version>\n        <executions>\n          <execution>\n            <id>pre-obfuscate-class</id>\n            <phase>process-test-classes</phase>\n            <goals>\n              <goal>rename</goal>\n",
                      "markdown": "`        <version>1.0.1</version>\n        <executions>\n          <execution>\n            <id>pre-obfuscate-class</id>\n            <phase>process-test-classes</phase>\n            <goals>\n              <goal>rename</goal>\n`"
                    }
                  },
                  "sourceLanguage": "pom.xml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/META-INF/maven/com.google.code.gson/gson/pom.xml"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 10,
                  "endLine": 206,
                  "endColumn": 16,
                  "snippet": {
                    "text": "      <!-- Uses ModiTect instead of separate maven-compiler-plugin executions \n        for better Eclipse IDE support, see https://github.com/eclipse-m2e/m2e-core/issues/393 -->\n      <!-- Note: For some reason this has to be executed before javadoc plugin; otherwise `javadoc:jar` goal fails\n        to find source files -->\n      <plugin>\n        <groupId>org.moditect</groupId>\n        <artifactId>moditect-maven-plugin</artifactId>\n",
                    "rendered": {
                      "text": "      <!-- Uses ModiTect instead of separate maven-compiler-plugin executions \n        for better Eclipse IDE support, see https://github.com/eclipse-m2e/m2e-core/issues/393 -->\n      <!-- Note: For some reason this has to be executed before javadoc plugin; otherwise `javadoc:jar` goal fails\n        to find source files -->\n      <plugin>\n        <groupId>org.moditect</groupId>\n        <artifactId>moditect-maven-plugin</artifactId>\n",
                      "markdown": "`      <!-- Uses ModiTect instead of separate maven-compiler-plugin executions \n        for better Eclipse IDE support, see https://github.com/eclipse-m2e/m2e-core/issues/393 -->\n      <!-- Note: For some reason this has to be executed before javadoc plugin; otherwise `javadoc:jar` goal fails\n        to find source files -->\n      <plugin>\n        <groupId>org.moditect</groupId>\n        <artifactId>moditect-maven-plugin</artifactId>\n`"
                    }
                  },
                  "sourceLanguage": "pom.xml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-packages.yml"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 43,
                  "endLine": 172,
                  "endColumn": 54,
                  "snippet": {
                    "text": "      - name: Import GPG Key\n        uses: crazy-max/ghaction-import-gpg@v5\n        with:\n          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}\n          passphrase: ${{ secrets.PASSPHRASE }}\n\n      - name: Sign Build Files\n",
                    "rendered": {
                      "text": "      - name: Import GPG Key\n        uses: crazy-max/ghaction-import-gpg@v5\n        with:\n          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}\n          passphrase: ${{ secrets.PASSPHRASE }}\n\n      - name: Sign Build Files\n",
                      "markdown": "`      - name: Import GPG Key\n        uses: crazy-max/ghaction-import-gpg@v5\n        with:\n          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}\n          passphrase: ${{ secrets.PASSPHRASE }}\n\n      - name: Sign Build Files\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-packages.yml"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 14,
                  "endLine": 172,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      - name: Import GPG Key\n        uses: crazy-max/ghaction-import-gpg@v5\n        with:\n          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}\n          passphrase: ${{ secrets.PASSPHRASE }}\n\n      - name: Sign Build Files\n",
                    "rendered": {
                      "text": "      - name: Import GPG Key\n        uses: crazy-max/ghaction-import-gpg@v5\n        with:\n          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}\n          passphrase: ${{ secrets.PASSPHRASE }}\n\n      - name: Sign Build Files\n",
                      "markdown": "`      - name: Import GPG Key\n        uses: crazy-max/ghaction-import-gpg@v5\n        with:\n          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}\n          passphrase: ${{ secrets.PASSPHRASE }}\n\n      - name: Sign Build Files\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-packages.yml"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 16,
                  "endLine": 182,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        if: contains(inputs.BucketKey, 'test') == false || steps.cached_sig.outputs.cache-hit == false\n        run: |\n          aws s3 cp packages/amd64/amazon-cloudwatch-agent.pkg.sig s3://${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }}/amd64/amazon-cloudwatch-agent.pkg.sig\n          aws s3 cp packages/arm64/amazon-cloudwatch-agent.pkg.sig s3://${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }}/arm64/amazon-cloudwatch-agent.pkg.sig\n",
                    "rendered": {
                      "text": "        if: contains(inputs.BucketKey, 'test') == false || steps.cached_sig.outputs.cache-hit == false\n        run: |\n          aws s3 cp packages/amd64/amazon-cloudwatch-agent.pkg.sig s3://${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }}/amd64/amazon-cloudwatch-agent.pkg.sig\n          aws s3 cp packages/arm64/amazon-cloudwatch-agent.pkg.sig s3://${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }}/arm64/amazon-cloudwatch-agent.pkg.sig\n",
                      "markdown": "`        if: contains(inputs.BucketKey, 'test') == false || steps.cached_sig.outputs.cache-hit == false\n        run: |\n          aws s3 cp packages/amd64/amazon-cloudwatch-agent.pkg.sig s3://${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }}/amd64/amazon-cloudwatch-agent.pkg.sig\n          aws s3 cp packages/arm64/amazon-cloudwatch-agent.pkg.sig s3://${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }}/arm64/amazon-cloudwatch-agent.pkg.sig\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-packages.yml"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 16,
                  "endLine": 181,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      - name: Upload to s3\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_sig.outputs.cache-hit == false\n        run: |\n          aws s3 cp packages/amd64/amazon-cloudwatch-agent.pkg.sig s3://${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }}/amd64/amazon-cloudwatch-agent.pkg.sig\n          aws s3 cp packages/arm64/amazon-cloudwatch-agent.pkg.sig s3://${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }}/arm64/amazon-cloudwatch-agent.pkg.sig\n",
                    "rendered": {
                      "text": "      - name: Upload to s3\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_sig.outputs.cache-hit == false\n        run: |\n          aws s3 cp packages/amd64/amazon-cloudwatch-agent.pkg.sig s3://${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }}/amd64/amazon-cloudwatch-agent.pkg.sig\n          aws s3 cp packages/arm64/amazon-cloudwatch-agent.pkg.sig s3://${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }}/arm64/amazon-cloudwatch-agent.pkg.sig\n",
                      "markdown": "`      - name: Upload to s3\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_sig.outputs.cache-hit == false\n        run: |\n          aws s3 cp packages/amd64/amazon-cloudwatch-agent.pkg.sig s3://${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }}/amd64/amazon-cloudwatch-agent.pkg.sig\n          aws s3 cp packages/arm64/amazon-cloudwatch-agent.pkg.sig s3://${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }}/arm64/amazon-cloudwatch-agent.pkg.sig\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-packages.yml"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 16,
                  "endLine": 168,
                  "endColumn": 20,
                  "snippet": {
                    "text": "          mkdir -p packages/amd64\n          mkdir packages/arm64\n          aws s3 cp s3://${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }}/amd64/amazon-cloudwatch-agent.pkg ./packages/amd64/amazon-cloudwatch-agent.pkg\n          aws s3 cp s3://${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }}/arm64/amazon-cloudwatch-agent.pkg ./packages/arm64/amazon-cloudwatch-agent.pkg\n      - name: Import GPG Key\n        uses: crazy-max/ghaction-import-gpg@v5\n        with:\n",
                    "rendered": {
                      "text": "          mkdir -p packages/amd64\n          mkdir packages/arm64\n          aws s3 cp s3://${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }}/amd64/amazon-cloudwatch-agent.pkg ./packages/amd64/amazon-cloudwatch-agent.pkg\n          aws s3 cp s3://${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }}/arm64/amazon-cloudwatch-agent.pkg ./packages/arm64/amazon-cloudwatch-agent.pkg\n      - name: Import GPG Key\n        uses: crazy-max/ghaction-import-gpg@v5\n        with:\n",
                      "markdown": "`          mkdir -p packages/amd64\n          mkdir packages/arm64\n          aws s3 cp s3://${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }}/amd64/amazon-cloudwatch-agent.pkg ./packages/amd64/amazon-cloudwatch-agent.pkg\n          aws s3 cp s3://${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }}/arm64/amazon-cloudwatch-agent.pkg ./packages/arm64/amazon-cloudwatch-agent.pkg\n      - name: Import GPG Key\n        uses: crazy-max/ghaction-import-gpg@v5\n        with:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-packages.yml"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 16,
                  "endLine": 167,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        run: |\n          mkdir -p packages/amd64\n          mkdir packages/arm64\n          aws s3 cp s3://${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }}/amd64/amazon-cloudwatch-agent.pkg ./packages/amd64/amazon-cloudwatch-agent.pkg\n          aws s3 cp s3://${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }}/arm64/amazon-cloudwatch-agent.pkg ./packages/arm64/amazon-cloudwatch-agent.pkg\n      - name: Import GPG Key\n        uses: crazy-max/ghaction-import-gpg@v5\n",
                    "rendered": {
                      "text": "        run: |\n          mkdir -p packages/amd64\n          mkdir packages/arm64\n          aws s3 cp s3://${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }}/amd64/amazon-cloudwatch-agent.pkg ./packages/amd64/amazon-cloudwatch-agent.pkg\n          aws s3 cp s3://${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }}/arm64/amazon-cloudwatch-agent.pkg ./packages/arm64/amazon-cloudwatch-agent.pkg\n      - name: Import GPG Key\n        uses: crazy-max/ghaction-import-gpg@v5\n",
                      "markdown": "`        run: |\n          mkdir -p packages/amd64\n          mkdir packages/arm64\n          aws s3 cp s3://${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }}/amd64/amazon-cloudwatch-agent.pkg ./packages/amd64/amazon-cloudwatch-agent.pkg\n          aws s3 cp s3://${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }}/arm64/amazon-cloudwatch-agent.pkg ./packages/arm64/amazon-cloudwatch-agent.pkg\n      - name: Import GPG Key\n        uses: crazy-max/ghaction-import-gpg@v5\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-packages.yml"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 9,
                  "endLine": 133,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        working-directory: /tmp/\n        run: |\n          chmod +x create_pkg.sh\n          chmod +x arm64/create_pkg.sh\n          ./create_pkg.sh ${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }} \"nosha\" amd64\n          cd arm64\n          ./create_pkg.sh ${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }} \"nosha\" arm64\n",
                    "rendered": {
                      "text": "        working-directory: /tmp/\n        run: |\n          chmod +x create_pkg.sh\n          chmod +x arm64/create_pkg.sh\n          ./create_pkg.sh ${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }} \"nosha\" amd64\n          cd arm64\n          ./create_pkg.sh ${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }} \"nosha\" arm64\n",
                      "markdown": "`        working-directory: /tmp/\n        run: |\n          chmod +x create_pkg.sh\n          chmod +x arm64/create_pkg.sh\n          ./create_pkg.sh ${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }} \"nosha\" amd64\n          cd arm64\n          ./create_pkg.sh ${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }} \"nosha\" arm64\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-packages.yml"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 9,
                  "endLine": 132,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        working-directory: /tmp/\n        run: |\n          chmod +x create_pkg.sh\n          chmod +x arm64/create_pkg.sh\n          ./create_pkg.sh ${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }} \"nosha\" amd64\n          cd arm64\n",
                    "rendered": {
                      "text": "        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        working-directory: /tmp/\n        run: |\n          chmod +x create_pkg.sh\n          chmod +x arm64/create_pkg.sh\n          ./create_pkg.sh ${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }} \"nosha\" amd64\n          cd arm64\n",
                      "markdown": "`        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        working-directory: /tmp/\n        run: |\n          chmod +x create_pkg.sh\n          chmod +x arm64/create_pkg.sh\n          ./create_pkg.sh ${{ inputs.Bucket }}/${{ inputs.PackageBucketKey }} \"nosha\" amd64\n          cd arm64\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-packages.yml"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 9,
                  "endLine": 126,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        working-directory: test\n        run: |\n          cp -r pkg/tools/. /tmp/\n          cp -r pkg/tools/. /tmp/arm64/\n\n      - name: Build And Upload PKG\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n",
                    "rendered": {
                      "text": "        working-directory: test\n        run: |\n          cp -r pkg/tools/. /tmp/\n          cp -r pkg/tools/. /tmp/arm64/\n\n      - name: Build And Upload PKG\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n",
                      "markdown": "`        working-directory: test\n        run: |\n          cp -r pkg/tools/. /tmp/\n          cp -r pkg/tools/. /tmp/arm64/\n\n      - name: Build And Upload PKG\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-packages.yml"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 9,
                  "endLine": 125,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        working-directory: test\n        run: |\n          cp -r pkg/tools/. /tmp/\n          cp -r pkg/tools/. /tmp/arm64/\n\n      - name: Build And Upload PKG\n",
                    "rendered": {
                      "text": "        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        working-directory: test\n        run: |\n          cp -r pkg/tools/. /tmp/\n          cp -r pkg/tools/. /tmp/arm64/\n\n      - name: Build And Upload PKG\n",
                      "markdown": "`        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n        working-directory: test\n        run: |\n          cp -r pkg/tools/. /tmp/\n          cp -r pkg/tools/. /tmp/arm64/\n\n      - name: Build And Upload PKG\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-packages.yml"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 9,
                  "endLine": 119,
                  "endColumn": 13,
                  "snippet": {
                    "text": "          echo cw agent version $(cat CWAGENT_VERSION)\n          cp -r build/bin/darwin/amd64/. /tmp/\n          cp -r build/bin/darwin/arm64/. /tmp/arm64/\n          cp build/bin/CWAGENT_VERSION /tmp/CWAGENT_VERSION\n\n      - name: Create pkg dep folder and copy deps\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n",
                    "rendered": {
                      "text": "          echo cw agent version $(cat CWAGENT_VERSION)\n          cp -r build/bin/darwin/amd64/. /tmp/\n          cp -r build/bin/darwin/arm64/. /tmp/arm64/\n          cp build/bin/CWAGENT_VERSION /tmp/CWAGENT_VERSION\n\n      - name: Create pkg dep folder and copy deps\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n",
                      "markdown": "`          echo cw agent version $(cat CWAGENT_VERSION)\n          cp -r build/bin/darwin/amd64/. /tmp/\n          cp -r build/bin/darwin/arm64/. /tmp/arm64/\n          cp build/bin/CWAGENT_VERSION /tmp/CWAGENT_VERSION\n\n      - name: Create pkg dep folder and copy deps\n        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-packages.yml"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 9,
                  "endLine": 118,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        run: |\n          echo cw agent version $(cat CWAGENT_VERSION)\n          cp -r build/bin/darwin/amd64/. /tmp/\n          cp -r build/bin/darwin/arm64/. /tmp/arm64/\n          cp build/bin/CWAGENT_VERSION /tmp/CWAGENT_VERSION\n\n      - name: Create pkg dep folder and copy deps\n",
                    "rendered": {
                      "text": "        run: |\n          echo cw agent version $(cat CWAGENT_VERSION)\n          cp -r build/bin/darwin/amd64/. /tmp/\n          cp -r build/bin/darwin/arm64/. /tmp/arm64/\n          cp build/bin/CWAGENT_VERSION /tmp/CWAGENT_VERSION\n\n      - name: Create pkg dep folder and copy deps\n",
                      "markdown": "`        run: |\n          echo cw agent version $(cat CWAGENT_VERSION)\n          cp -r build/bin/darwin/amd64/. /tmp/\n          cp -r build/bin/darwin/arm64/. /tmp/arm64/\n          cp build/bin/CWAGENT_VERSION /tmp/CWAGENT_VERSION\n\n      - name: Create pkg dep folder and copy deps\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/test-build-packages.yml"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 9,
                  "endLine": 117,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        working-directory: cwa\n        run: |\n          echo cw agent version $(cat CWAGENT_VERSION)\n          cp -r build/bin/darwin/amd64/. /tmp/\n          cp -r build/bin/darwin/arm64/. /tmp/arm64/\n          cp build/bin/CWAGENT_VERSION /tmp/CWAGENT_VERSION\n\n",
                    "rendered": {
                      "text": "        working-directory: cwa\n        run: |\n          echo cw agent version $(cat CWAGENT_VERSION)\n          cp -r build/bin/darwin/amd64/. /tmp/\n          cp -r build/bin/darwin/arm64/. /tmp/arm64/\n          cp build/bin/CWAGENT_VERSION /tmp/CWAGENT_VERSION\n\n",
                      "markdown": "`        working-directory: cwa\n        run: |\n          echo cw agent version $(cat CWAGENT_VERSION)\n          cp -r build/bin/darwin/amd64/. /tmp/\n          cp -r build/bin/darwin/arm64/. /tmp/arm64/\n          cp build/bin/CWAGENT_VERSION /tmp/CWAGENT_VERSION\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.github/workflows/nightly-build.yml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 29,
                  "endLine": 5,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\non:\n  schedule:\n    - cron: '0 0 * * *' # run at midnight\n  workflow_dispatch:\n\njobs:\n",
                    "rendered": {
                      "text": "\non:\n  schedule:\n    - cron: '0 0 * * *' # run at midnight\n  workflow_dispatch:\n\njobs:\n",
                      "markdown": "`\non:\n  schedule:\n    - cron: '0 0 * * *' # run at midnight\n  workflow_dispatch:\n\njobs:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/k8sCommon/k8sclient/node.go"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 57,
                  "endLine": 151,
                  "endColumn": 63,
                  "snippet": {
                    "text": "func transformFuncNode(obj interface{}) (interface{}, error) {\n\tnode, ok := obj.(*v1.Node)\n\tif !ok {\n\t\treturn nil, errors.New(fmt.Sprintf(\"input obj %v is not Node type\", obj))\n\t}\n\tinfo := new(nodeInfo)\n\tinfo.conditions = []*nodeCondition{}\n",
                    "rendered": {
                      "text": "func transformFuncNode(obj interface{}) (interface{}, error) {\n\tnode, ok := obj.(*v1.Node)\n\tif !ok {\n\t\treturn nil, errors.New(fmt.Sprintf(\"input obj %v is not Node type\", obj))\n\t}\n\tinfo := new(nodeInfo)\n\tinfo.conditions = []*nodeCondition{}\n",
                      "markdown": "`func transformFuncNode(obj interface{}) (interface{}, error) {\n\tnode, ok := obj.(*v1.Node)\n\tif !ok {\n\t\treturn nil, errors.New(fmt.Sprintf(\"input obj %v is not Node type\", obj))\n\t}\n\tinfo := new(nodeInfo)\n\tinfo.conditions = []*nodeCondition{}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/k8sCommon/k8sclient/node.go"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 16,
                  "endLine": 130,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tif err := wait.Poll(50*time.Millisecond, 2*time.Second, func() (done bool, err error) {\n\t\treturn reflector.LastSyncResourceVersion() != \"\", nil\n\t}); err != nil {\n\t\tlog.Printf(\"W! Node initial sync timeout: %v\", err)\n\t}\n\n\tc.inited = true\n",
                    "rendered": {
                      "text": "\tif err := wait.Poll(50*time.Millisecond, 2*time.Second, func() (done bool, err error) {\n\t\treturn reflector.LastSyncResourceVersion() != \"\", nil\n\t}); err != nil {\n\t\tlog.Printf(\"W! Node initial sync timeout: %v\", err)\n\t}\n\n\tc.inited = true\n",
                      "markdown": "`\tif err := wait.Poll(50*time.Millisecond, 2*time.Second, func() (done bool, err error) {\n\t\treturn reflector.LastSyncResourceVersion() != \"\", nil\n\t}); err != nil {\n\t\tlog.Printf(\"W! Node initial sync timeout: %v\", err)\n\t}\n\n\tc.inited = true\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/k8sCommon/k8sclient/node.go"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 1,
                  "endLine": 85,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\tclusterFailedNodeCountNew := 0\n\tclusterNodeCountNew := 0\n\tfor _, obj := range objsList {\n\t\tnode := obj.(*nodeInfo)\n\n\t\tclusterNodeCountNew++\n\n",
                    "rendered": {
                      "text": "\tclusterFailedNodeCountNew := 0\n\tclusterNodeCountNew := 0\n\tfor _, obj := range objsList {\n\t\tnode := obj.(*nodeInfo)\n\n\t\tclusterNodeCountNew++\n\n",
                      "markdown": "`\tclusterFailedNodeCountNew := 0\n\tclusterNodeCountNew := 0\n\tfor _, obj := range objsList {\n\t\tnode := obj.(*nodeInfo)\n\n\t\tclusterNodeCountNew++\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.golangci.yml"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 18,
                  "endLine": 8,
                  "endColumn": 22,
                  "snippet": {
                    "text": "  # Timeout for analysis, e.g. 30s, 5m, default is 1m\n  timeout: 20m\n\n  # Exit code when at least one issue was found, default is 1\n  issues-exit-code: 1\n\n  # Include test files or not, default is true\n",
                    "rendered": {
                      "text": "  # Timeout for analysis, e.g. 30s, 5m, default is 1m\n  timeout: 20m\n\n  # Exit code when at least one issue was found, default is 1\n  issues-exit-code: 1\n\n  # Include test files or not, default is true\n",
                      "markdown": "`  # Timeout for analysis, e.g. 30s, 5m, default is 1m\n  timeout: 20m\n\n  # Exit code when at least one issue was found, default is 1\n  issues-exit-code: 1\n\n  # Include test files or not, default is true\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/.golangci.yml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 3,
                  "endLine": 5,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  # The default concurrency value is the number of available CPU.\n  concurrency: 4\n\n  # Timeout for analysis, e.g. 30s, 5m, default is 1m\n  timeout: 20m\n\n  # Exit code when at least one issue was found, default is 1\n",
                    "rendered": {
                      "text": "  # The default concurrency value is the number of available CPU.\n  concurrency: 4\n\n  # Timeout for analysis, e.g. 30s, 5m, default is 1m\n  timeout: 20m\n\n  # Exit code when at least one issue was found, default is 1\n",
                      "markdown": "`  # The default concurrency value is the number of available CPU.\n  concurrency: 4\n\n  # Timeout for analysis, e.g. 30s, 5m, default is 1m\n  timeout: 20m\n\n  # Exit code when at least one issue was found, default is 1\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/README.md"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 62,
                  "endLine": 119,
                  "endColumn": 66,
                  "snippet": {
                    "text": "## Distributions\nYou can download the official release from S3, refer to [link](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/download-cloudwatch-agent-commandline.html)\n\nNightly s3 release are not production ready and should be used at own risk\n1. Download Binaries\n    1. Linux\n        * https://amazoncloudwatch-agent.s3.amazonaws.com/nightly-build/latest/linux_{amd64/arm64}/amazon-cloudwatch-agent\n",
                    "rendered": {
                      "text": "## Distributions\nYou can download the official release from S3, refer to [link](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/download-cloudwatch-agent-commandline.html)\n\nNightly s3 release are not production ready and should be used at own risk\n1. Download Binaries\n    1. Linux\n        * https://amazoncloudwatch-agent.s3.amazonaws.com/nightly-build/latest/linux_{amd64/arm64}/amazon-cloudwatch-agent\n",
                      "markdown": "`## Distributions\nYou can download the official release from S3, refer to [link](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/download-cloudwatch-agent-commandline.html)\n\nNightly s3 release are not production ready and should be used at own risk\n1. Download Binaries\n    1. Linux\n        * https://amazoncloudwatch-agent.s3.amazonaws.com/nightly-build/latest/linux_{amd64/arm64}/amazon-cloudwatch-agent\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/README.md"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 40,
                  "endLine": 79,
                  "endColumn": 48,
                  "snippet": {
                    "text": "| `build`                  | `build` builds the agent for Linux, Debian and Windows amd64 environment |\n| `release`                | *(Default)* `release` builds the agent and also packages it into a RPM, DEB and ZIP package |\n| `clean`                  | `clean` removes build artifacts |\n| `dockerized-build`       | build using docker container without local go environment |\n\n## Features\n### Log Filtering\n",
                    "rendered": {
                      "text": "| `build`                  | `build` builds the agent for Linux, Debian and Windows amd64 environment |\n| `release`                | *(Default)* `release` builds the agent and also packages it into a RPM, DEB and ZIP package |\n| `clean`                  | `clean` removes build artifacts |\n| `dockerized-build`       | build using docker container without local go environment |\n\n## Features\n### Log Filtering\n",
                      "markdown": "`| `build`                  | `build` builds the agent for Linux, Debian and Windows amd64 environment |\n| `release`                | *(Default)* `release` builds the agent and also packages it into a RPM, DEB and ZIP package |\n| `clean`                  | `clean` removes build artifacts |\n| `dockerized-build`       | build using docker container without local go environment |\n\n## Features\n### Log Filtering\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/README.md"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 6,
                  "endLine": 49,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n* Install your own build of the agent\n\n    1. rpm package\n\n        * `rpm -Uvh amazon-cloudwatch-agent.rpm`\n\n",
                    "rendered": {
                      "text": "\n* Install your own build of the agent\n\n    1. rpm package\n\n        * `rpm -Uvh amazon-cloudwatch-agent.rpm`\n\n",
                      "markdown": "`\n* Install your own build of the agent\n\n    1. rpm package\n\n        * `rpm -Uvh amazon-cloudwatch-agent.rpm`\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/README.md"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 4,
                  "endLine": 31,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n* Install rpm-build\n```\nsudo yum install -y rpmdevtools rpm-build\n```\n* Run `make build` to build the CloudWatch Agent for Linux, Debian, Windows environment.\n\n",
                    "rendered": {
                      "text": "\n* Install rpm-build\n```\nsudo yum install -y rpmdevtools rpm-build\n```\n* Run `make build` to build the CloudWatch Agent for Linux, Debian, Windows environment.\n\n",
                      "markdown": "`\n* Install rpm-build\n```\nsudo yum install -y rpmdevtools rpm-build\n```\n* Run `make build` to build the CloudWatch Agent for Linux, Debian, Windows environment.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatch/convert_otel.go"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 20,
                  "endLine": 59,
                  "endColumn": 25,
                  "snippet": {
                    "text": "// getAggregationInterval removes this special dimension and returns its value.\nfunc getAggregationInterval(attributes *pcommon.Map) time.Duration {\n\tvar interval time.Duration\n\tv, ok := attributes.Get(aggregationIntervalTagKey)\n\tif !ok {\n\t\treturn interval\n\t}\n",
                    "rendered": {
                      "text": "// getAggregationInterval removes this special dimension and returns its value.\nfunc getAggregationInterval(attributes *pcommon.Map) time.Duration {\n\tvar interval time.Duration\n\tv, ok := attributes.Get(aggregationIntervalTagKey)\n\tif !ok {\n\t\treturn interval\n\t}\n",
                      "markdown": "`// getAggregationInterval removes this special dimension and returns its value.\nfunc getAggregationInterval(attributes *pcommon.Map) time.Duration {\n\tvar interval time.Duration\n\tv, ok := attributes.Get(aggregationIntervalTagKey)\n\tif !ok {\n\t\treturn interval\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatch/convert_otel.go"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 20,
                  "endLine": 46,
                  "endColumn": 25,
                  "snippet": {
                    "text": "// Return 1 if it was present and set to \"true\". Else return 60.\nfunc checkHighResolution(attributes *pcommon.Map) int64 {\n\tvar resolution int64 = 60\n\tv, ok := attributes.Get(highResolutionTagKey)\n\tif ok {\n\t\tif strings.EqualFold(v.AsString(), \"true\") {\n\t\t\tresolution = 1\n",
                    "rendered": {
                      "text": "// Return 1 if it was present and set to \"true\". Else return 60.\nfunc checkHighResolution(attributes *pcommon.Map) int64 {\n\tvar resolution int64 = 60\n\tv, ok := attributes.Get(highResolutionTagKey)\n\tif ok {\n\t\tif strings.EqualFold(v.AsString(), \"true\") {\n\t\t\tresolution = 1\n",
                      "markdown": "`// Return 1 if it was present and set to \"true\". Else return 60.\nfunc checkHighResolution(attributes *pcommon.Map) int64 {\n\tvar resolution int64 = 60\n\tv, ok := attributes.Get(highResolutionTagKey)\n\tif ok {\n\t\tif strings.EqualFold(v.AsString(), \"true\") {\n\t\t\tresolution = 1\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatch/README.md"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 47,
                  "endLine": 16,
                  "endColumn": 57,
                  "snippet": {
                    "text": "The AmazonCloudWatch Exporter uses a credential chain for Authentication with the EC2\nAPI endpoint. In the following order the plugin will attempt to authenticate.\n1. STS Credentials if Role ARN is specified\n2. Explicit credentials from 'access_key' and 'secret_key'\n3. Shared profile from 'profile' (https://stackoverflow.com/a/66121705)\n\nThe next will be the default credential chain from [AWS SDK Go](https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials)\n",
                    "rendered": {
                      "text": "The AmazonCloudWatch Exporter uses a credential chain for Authentication with the EC2\nAPI endpoint. In the following order the plugin will attempt to authenticate.\n1. STS Credentials if Role ARN is specified\n2. Explicit credentials from 'access_key' and 'secret_key'\n3. Shared profile from 'profile' (https://stackoverflow.com/a/66121705)\n\nThe next will be the default credential chain from [AWS SDK Go](https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials)\n",
                      "markdown": "`The AmazonCloudWatch Exporter uses a credential chain for Authentication with the EC2\nAPI endpoint. In the following order the plugin will attempt to authenticate.\n1. STS Credentials if Role ARN is specified\n2. Explicit credentials from 'access_key' and 'secret_key'\n3. Shared profile from 'profile' (https://stackoverflow.com/a/66121705)\n\nThe next will be the default credential chain from [AWS SDK Go](https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatch/README.md"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 58,
                  "endLine": 33,
                  "endColumn": 64,
                  "snippet": {
                    "text": "                                                                       | Default    | \n|--------------------------| ---------------------------------------------------------------------------------------------------------------| -----------|\n|`region`                  | is the Amazon region that you wish to connect to. (e.g us-west-2, us-west-2)                                   | \"\"         |\n|`namespace`               | is the namespace used for AWS CloudWatch metrics.                                                              | \"CWAgent   |\n|`endpoint_override`       | is the endpoint you want ",
                    "rendered": {
                      "text": "                                                                       | Default    | \n|--------------------------| ---------------------------------------------------------------------------------------------------------------| -----------|\n|`region`                  | is the Amazon region that you wish to connect to. (e.g us-west-2, us-west-2)                                   | \"\"         |\n|`namespace`               | is the namespace used for AWS CloudWatch metrics.                                                              | \"CWAgent   |\n|`endpoint_override`       | is the endpoint you want ",
                      "markdown": "`                                                                       | Default    | \n|--------------------------| ---------------------------------------------------------------------------------------------------------------| -----------|\n|`region`                  | is the Amazon region that you wish to connect to. (e.g us-west-2, us-west-2)                                   | \"\"         |\n|`namespace`               | is the namespace used for AWS CloudWatch metrics.                                                              | \"CWAgent   |\n|`endpoint_override`       | is the endpoint you want `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatchlogs/cloudwatchlogs.go"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 11,
                  "endLine": 155,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\tagent.UsageFlags().SetValue(agent.FlagRegionType, c.RegionType)\n\tagent.UsageFlags().SetValue(agent.FlagMode, c.Mode)\n\tif containerInsightsRegexp.MatchString(t.Group) {\n\t\tuseragent.Get().SetContainerInsightsFlag()\n\t}\n\tclient.Handlers.Build.PushBackNamed(handlers.NewRequestCompressionHandler([]string{\"PutLogEvents\"}))\n\tif c.middleware != nil {\n",
                    "rendered": {
                      "text": "\tagent.UsageFlags().SetValue(agent.FlagRegionType, c.RegionType)\n\tagent.UsageFlags().SetValue(agent.FlagMode, c.Mode)\n\tif containerInsightsRegexp.MatchString(t.Group) {\n\t\tuseragent.Get().SetContainerInsightsFlag()\n\t}\n\tclient.Handlers.Build.PushBackNamed(handlers.NewRequestCompressionHandler([]string{\"PutLogEvents\"}))\n\tif c.middleware != nil {\n",
                      "markdown": "`\tagent.UsageFlags().SetValue(agent.FlagRegionType, c.RegionType)\n\tagent.UsageFlags().SetValue(agent.FlagMode, c.Mode)\n\tif containerInsightsRegexp.MatchString(t.Group) {\n\t\tuseragent.Get().SetContainerInsightsFlag()\n\t}\n\tclient.Handlers.Build.PushBackNamed(handlers.NewRequestCompressionHandler([]string{\"PutLogEvents\"}))\n\tif c.middleware != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatchlogs/cloudwatchlogs.go"
                },
                "region": {
                  "startLine": 381,
                  "startColumn": 3,
                  "endLine": 381,
                  "endColumn": 13,
                  "snippet": {
                    "text": "  ## 5) shared credentials file\n  ## 6) EC2 Instance Profile\n  #access_key = \"\"\n  #secret_key = \"\"\n  #token = \"\"\n  #role_arn = \"\"\n  #profile = \"\"\n",
                    "rendered": {
                      "text": "  ## 5) shared credentials file\n  ## 6) EC2 Instance Profile\n  #access_key = \"\"\n  #secret_key = \"\"\n  #token = \"\"\n  #role_arn = \"\"\n  #profile = \"\"\n",
                      "markdown": "`  ## 5) shared credentials file\n  ## 6) EC2 Instance Profile\n  #access_key = \"\"\n  #secret_key = \"\"\n  #token = \"\"\n  #role_arn = \"\"\n  #profile = \"\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatchlogs/cloudwatchlogs.go"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 52,
                  "endLine": 375,
                  "endColumn": 62,
                  "snippet": {
                    "text": "  ## Amazon Credentials\n  ## Credentials are loaded in the following order\n  ## 1) Assumed credentials via STS if role_arn is specified\n  ## 2) explicit credentials from 'access_key' and 'secret_key'\n  ## 3) shared profile from 'profile'\n  ## 4) environment variables\n  ## 5) shared credentials file\n",
                    "rendered": {
                      "text": "  ## Amazon Credentials\n  ## Credentials are loaded in the following order\n  ## 1) Assumed credentials via STS if role_arn is specified\n  ## 2) explicit credentials from 'access_key' and 'secret_key'\n  ## 3) shared profile from 'profile'\n  ## 4) environment variables\n  ## 5) shared credentials file\n",
                      "markdown": "`  ## Amazon Credentials\n  ## Credentials are loaded in the following order\n  ## 1) Assumed credentials via STS if role_arn is specified\n  ## 2) explicit credentials from 'access_key' and 'secret_key'\n  ## 3) shared profile from 'profile'\n  ## 4) environment variables\n  ## 5) shared credentials file\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatchlogs/cloudwatchlogs.go"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 15,
                  "endLine": 135,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\tcredentialConfig := &configaws.CredentialConfig{\n\t\tRegion:    c.Region,\n\t\tAccessKey: c.AccessKey,\n\t\tSecretKey: c.SecretKey,\n\t\tRoleARN:   c.RoleARN,\n\t\tProfile:   c.Profile,\n\t\tFilename:  c.Filename,\n",
                    "rendered": {
                      "text": "\tcredentialConfig := &configaws.CredentialConfig{\n\t\tRegion:    c.Region,\n\t\tAccessKey: c.AccessKey,\n\t\tSecretKey: c.SecretKey,\n\t\tRoleARN:   c.RoleARN,\n\t\tProfile:   c.Profile,\n\t\tFilename:  c.Filename,\n",
                      "markdown": "`\tcredentialConfig := &configaws.CredentialConfig{\n\t\tRegion:    c.Region,\n\t\tAccessKey: c.AccessKey,\n\t\tSecretKey: c.SecretKey,\n\t\tRoleARN:   c.RoleARN,\n\t\tProfile:   c.Profile,\n\t\tFilename:  c.Filename,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatchlogs/cloudwatchlogs.go"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 2,
                  "endLine": 135,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\tcredentialConfig := &configaws.CredentialConfig{\n\t\tRegion:    c.Region,\n\t\tAccessKey: c.AccessKey,\n\t\tSecretKey: c.SecretKey,\n\t\tRoleARN:   c.RoleARN,\n\t\tProfile:   c.Profile,\n\t\tFilename:  c.Filename,\n",
                    "rendered": {
                      "text": "\tcredentialConfig := &configaws.CredentialConfig{\n\t\tRegion:    c.Region,\n\t\tAccessKey: c.AccessKey,\n\t\tSecretKey: c.SecretKey,\n\t\tRoleARN:   c.RoleARN,\n\t\tProfile:   c.Profile,\n\t\tFilename:  c.Filename,\n",
                      "markdown": "`\tcredentialConfig := &configaws.CredentialConfig{\n\t\tRegion:    c.Region,\n\t\tAccessKey: c.AccessKey,\n\t\tSecretKey: c.SecretKey,\n\t\tRoleARN:   c.RoleARN,\n\t\tProfile:   c.Profile,\n\t\tFilename:  c.Filename,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatchlogs/cloudwatchlogs.go"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 32,
                  "endLine": 62,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\tMode             string `toml:\"mode\"`\n\tEndpointOverride string `toml:\"endpoint_override\"`\n\tAccessKey        string `toml:\"access_key\"`\n\tSecretKey        string `toml:\"secret_key\"`\n\tRoleARN          string `toml:\"role_arn\"`\n\tProfile          string `toml:\"profile\"`\n\tFilename         string `toml:\"shared_credential_file\"`\n",
                    "rendered": {
                      "text": "\tMode             string `toml:\"mode\"`\n\tEndpointOverride string `toml:\"endpoint_override\"`\n\tAccessKey        string `toml:\"access_key\"`\n\tSecretKey        string `toml:\"secret_key\"`\n\tRoleARN          string `toml:\"role_arn\"`\n\tProfile          string `toml:\"profile\"`\n\tFilename         string `toml:\"shared_credential_file\"`\n",
                      "markdown": "`\tMode             string `toml:\"mode\"`\n\tEndpointOverride string `toml:\"endpoint_override\"`\n\tAccessKey        string `toml:\"access_key\"`\n\tSecretKey        string `toml:\"secret_key\"`\n\tRoleARN          string `toml:\"role_arn\"`\n\tProfile          string `toml:\"profile\"`\n\tFilename         string `toml:\"shared_credential_file\"`\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatchlogs/cloudwatchlogs.go"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 1,
                  "endLine": 62,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\tMode             string `toml:\"mode\"`\n\tEndpointOverride string `toml:\"endpoint_override\"`\n\tAccessKey        string `toml:\"access_key\"`\n\tSecretKey        string `toml:\"secret_key\"`\n\tRoleARN          string `toml:\"role_arn\"`\n\tProfile          string `toml:\"profile\"`\n\tFilename         string `toml:\"shared_credential_file\"`\n",
                    "rendered": {
                      "text": "\tMode             string `toml:\"mode\"`\n\tEndpointOverride string `toml:\"endpoint_override\"`\n\tAccessKey        string `toml:\"access_key\"`\n\tSecretKey        string `toml:\"secret_key\"`\n\tRoleARN          string `toml:\"role_arn\"`\n\tProfile          string `toml:\"profile\"`\n\tFilename         string `toml:\"shared_credential_file\"`\n",
                      "markdown": "`\tMode             string `toml:\"mode\"`\n\tEndpointOverride string `toml:\"endpoint_override\"`\n\tAccessKey        string `toml:\"access_key\"`\n\tSecretKey        string `toml:\"secret_key\"`\n\tRoleARN          string `toml:\"role_arn\"`\n\tProfile          string `toml:\"profile\"`\n\tFilename         string `toml:\"shared_credential_file\"`\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatchlogs/cloudwatchlogs.go"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 24,
                  "endLine": 178,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\t}\n\tcwd := c.getDest(t)\n\tif cwd == nil {\n\t\tc.Log.Warnf(\"unable to find log destination, group: %v, stream: %v\", t.Group, t.Stream)\n\t\treturn\n\t}\n\tcwd.switchToEMF()\n",
                    "rendered": {
                      "text": "\t}\n\tcwd := c.getDest(t)\n\tif cwd == nil {\n\t\tc.Log.Warnf(\"unable to find log destination, group: %v, stream: %v\", t.Group, t.Stream)\n\t\treturn\n\t}\n\tcwd.switchToEMF()\n",
                      "markdown": "`\t}\n\tcwd := c.getDest(t)\n\tif cwd == nil {\n\t\tc.Log.Warnf(\"unable to find log destination, group: %v, stream: %v\", t.Group, t.Stream)\n\t\treturn\n\t}\n\tcwd.switchToEMF()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatchlogs/cloudwatchlogs.go"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 25,
                  "endLine": 174,
                  "endColumn": 31,
                  "snippet": {
                    "text": "func (c *CloudWatchLogs) writeMetricAsStructuredLog(m telegraf.Metric) {\n\tt, err := c.getTargetFromMetric(m)\n\tif err != nil {\n\t\tc.Log.Errorf(\"Failed to find target: %v\", err)\n\t}\n\tcwd := c.getDest(t)\n\tif cwd == nil {\n",
                    "rendered": {
                      "text": "func (c *CloudWatchLogs) writeMetricAsStructuredLog(m telegraf.Metric) {\n\tt, err := c.getTargetFromMetric(m)\n\tif err != nil {\n\t\tc.Log.Errorf(\"Failed to find target: %v\", err)\n\t}\n\tcwd := c.getDest(t)\n\tif cwd == nil {\n",
                      "markdown": "`func (c *CloudWatchLogs) writeMetricAsStructuredLog(m telegraf.Metric) {\n\tt, err := c.getTargetFromMetric(m)\n\tif err != nil {\n\t\tc.Log.Errorf(\"Failed to find target: %v\", err)\n\t}\n\tcwd := c.getDest(t)\n\tif cwd == nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatchlogs/pusher.go"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 114,
                  "endLine": 96,
                  "endColumn": 120,
                  "snippet": {
                    "text": "\nfunc (p *pusher) AddEventNonBlocking(e logs.LogEvent) {\n\tif !hasValidTime(e) {\n\t\tp.Log.Errorf(\"The log entry in (%v/%v) with timestamp (%v) comparing to the current time (%v) is out of accepted time range. Discard the log entry.\", p.Group, p.Stream, e.Time(), time.Now())\n\t\treturn\n\t}\n\n",
                    "rendered": {
                      "text": "\nfunc (p *pusher) AddEventNonBlocking(e logs.LogEvent) {\n\tif !hasValidTime(e) {\n\t\tp.Log.Errorf(\"The log entry in (%v/%v) with timestamp (%v) comparing to the current time (%v) is out of accepted time range. Discard the log entry.\", p.Group, p.Stream, e.Time(), time.Now())\n\t\treturn\n\t}\n\n",
                      "markdown": "`\nfunc (p *pusher) AddEventNonBlocking(e logs.LogEvent) {\n\tif !hasValidTime(e) {\n\t\tp.Log.Errorf(\"The log entry in (%v/%v) with timestamp (%v) comparing to the current time (%v) is out of accepted time range. Discard the log entry.\", p.Group, p.Stream, e.Time(), time.Now())\n\t\treturn\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatchlogs/pusher.go"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 85,
                  "endLine": 96,
                  "endColumn": 91,
                  "snippet": {
                    "text": "\nfunc (p *pusher) AddEventNonBlocking(e logs.LogEvent) {\n\tif !hasValidTime(e) {\n\t\tp.Log.Errorf(\"The log entry in (%v/%v) with timestamp (%v) comparing to the current time (%v) is out of accepted time range. Discard the log entry.\", p.Group, p.Stream, e.Time(), time.Now())\n\t\treturn\n\t}\n\n",
                    "rendered": {
                      "text": "\nfunc (p *pusher) AddEventNonBlocking(e logs.LogEvent) {\n\tif !hasValidTime(e) {\n\t\tp.Log.Errorf(\"The log entry in (%v/%v) with timestamp (%v) comparing to the current time (%v) is out of accepted time range. Discard the log entry.\", p.Group, p.Stream, e.Time(), time.Now())\n\t\treturn\n\t}\n\n",
                      "markdown": "`\nfunc (p *pusher) AddEventNonBlocking(e logs.LogEvent) {\n\tif !hasValidTime(e) {\n\t\tp.Log.Errorf(\"The log entry in (%v/%v) with timestamp (%v) comparing to the current time (%v) is out of accepted time range. Discard the log entry.\", p.Group, p.Stream, e.Time(), time.Now())\n\t\treturn\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatchlogs/pusher.go"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 114,
                  "endLine": 88,
                  "endColumn": 120,
                  "snippet": {
                    "text": "\nfunc (p *pusher) AddEvent(e logs.LogEvent) {\n\tif !hasValidTime(e) {\n\t\tp.Log.Errorf(\"The log entry in (%v/%v) with timestamp (%v) comparing to the current time (%v) is out of accepted time range. Discard the log entry.\", p.Group, p.Stream, e.Time(), time.Now())\n\t\treturn\n\t}\n\tp.eventsCh <- e\n",
                    "rendered": {
                      "text": "\nfunc (p *pusher) AddEvent(e logs.LogEvent) {\n\tif !hasValidTime(e) {\n\t\tp.Log.Errorf(\"The log entry in (%v/%v) with timestamp (%v) comparing to the current time (%v) is out of accepted time range. Discard the log entry.\", p.Group, p.Stream, e.Time(), time.Now())\n\t\treturn\n\t}\n\tp.eventsCh <- e\n",
                      "markdown": "`\nfunc (p *pusher) AddEvent(e logs.LogEvent) {\n\tif !hasValidTime(e) {\n\t\tp.Log.Errorf(\"The log entry in (%v/%v) with timestamp (%v) comparing to the current time (%v) is out of accepted time range. Discard the log entry.\", p.Group, p.Stream, e.Time(), time.Now())\n\t\treturn\n\t}\n\tp.eventsCh <- e\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatchlogs/pusher.go"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 85,
                  "endLine": 88,
                  "endColumn": 91,
                  "snippet": {
                    "text": "\nfunc (p *pusher) AddEvent(e logs.LogEvent) {\n\tif !hasValidTime(e) {\n\t\tp.Log.Errorf(\"The log entry in (%v/%v) with timestamp (%v) comparing to the current time (%v) is out of accepted time range. Discard the log entry.\", p.Group, p.Stream, e.Time(), time.Now())\n\t\treturn\n\t}\n\tp.eventsCh <- e\n",
                    "rendered": {
                      "text": "\nfunc (p *pusher) AddEvent(e logs.LogEvent) {\n\tif !hasValidTime(e) {\n\t\tp.Log.Errorf(\"The log entry in (%v/%v) with timestamp (%v) comparing to the current time (%v) is out of accepted time range. Discard the log entry.\", p.Group, p.Stream, e.Time(), time.Now())\n\t\treturn\n\t}\n\tp.eventsCh <- e\n",
                      "markdown": "`\nfunc (p *pusher) AddEvent(e logs.LogEvent) {\n\tif !hasValidTime(e) {\n\t\tp.Log.Errorf(\"The log entry in (%v/%v) with timestamp (%v) comparing to the current time (%v) is out of accepted time range. Discard the log entry.\", p.Group, p.Stream, e.Time(), time.Now())\n\t\treturn\n\t}\n\tp.eventsCh <- e\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatchlogs/pusher.go"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 29,
                  "endLine": 66,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\twg                    *sync.WaitGroup\n}\n\nfunc NewPusher(target Target, service CloudWatchLogsService, flushTimeout time.Duration, retryDuration time.Duration, logger telegraf.Logger, stop <-chan struct{}, wg *sync.WaitGroup) *pusher {\n\tp := &pusher{\n\t\tTarget:          target,\n\t\tService:         service,\n",
                    "rendered": {
                      "text": "\twg                    *sync.WaitGroup\n}\n\nfunc NewPusher(target Target, service CloudWatchLogsService, flushTimeout time.Duration, retryDuration time.Duration, logger telegraf.Logger, stop <-chan struct{}, wg *sync.WaitGroup) *pusher {\n\tp := &pusher{\n\t\tTarget:          target,\n\t\tService:         service,\n",
                      "markdown": "`\twg                    *sync.WaitGroup\n}\n\nfunc NewPusher(target Target, service CloudWatchLogsService, flushTimeout time.Duration, retryDuration time.Duration, logger telegraf.Logger, stop <-chan struct{}, wg *sync.WaitGroup) *pusher {\n\tp := &pusher{\n\t\tTarget:          target,\n\t\tService:         service,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatchlogs/pusher.go"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 41,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\ntype pusher struct {\n\tTarget\n\tService       CloudWatchLogsService\n\tFlushTimeout  time.Duration\n\tRetryDuration time.Duration\n\tLog           telegraf.Logger\n",
                    "rendered": {
                      "text": "\ntype pusher struct {\n\tTarget\n\tService       CloudWatchLogsService\n\tFlushTimeout  time.Duration\n\tRetryDuration time.Duration\n\tLog           telegraf.Logger\n",
                      "markdown": "`\ntype pusher struct {\n\tTarget\n\tService       CloudWatchLogsService\n\tFlushTimeout  time.Duration\n\tRetryDuration time.Duration\n\tLog           telegraf.Logger\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatchlogs/cloudwatchlogs_test.go"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 19,
                  "endLine": 81,
                  "endColumn": 29,
                  "snippet": {
                    "text": "func TestDuplicateDestination(t *testing.T) {\n\tc := &CloudWatchLogs{\n\t\tAccessKey:      \"access_key\",\n\t\tSecretKey:      \"secret_key\",\n\t\tcwDests:        make(map[Target]*cwDest),\n\t\tpusherStopChan: make(chan struct{}),\n\t}\n",
                    "rendered": {
                      "text": "func TestDuplicateDestination(t *testing.T) {\n\tc := &CloudWatchLogs{\n\t\tAccessKey:      \"access_key\",\n\t\tSecretKey:      \"secret_key\",\n\t\tcwDests:        make(map[Target]*cwDest),\n\t\tpusherStopChan: make(chan struct{}),\n\t}\n",
                      "markdown": "`func TestDuplicateDestination(t *testing.T) {\n\tc := &CloudWatchLogs{\n\t\tAccessKey:      \"access_key\",\n\t\tSecretKey:      \"secret_key\",\n\t\tcwDests:        make(map[Target]*cwDest),\n\t\tpusherStopChan: make(chan struct{}),\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatchlogs/cloudwatchlogs_test.go"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 2,
                  "endLine": 81,
                  "endColumn": 11,
                  "snippet": {
                    "text": "func TestDuplicateDestination(t *testing.T) {\n\tc := &CloudWatchLogs{\n\t\tAccessKey:      \"access_key\",\n\t\tSecretKey:      \"secret_key\",\n\t\tcwDests:        make(map[Target]*cwDest),\n\t\tpusherStopChan: make(chan struct{}),\n\t}\n",
                    "rendered": {
                      "text": "func TestDuplicateDestination(t *testing.T) {\n\tc := &CloudWatchLogs{\n\t\tAccessKey:      \"access_key\",\n\t\tSecretKey:      \"secret_key\",\n\t\tcwDests:        make(map[Target]*cwDest),\n\t\tpusherStopChan: make(chan struct{}),\n\t}\n",
                      "markdown": "`func TestDuplicateDestination(t *testing.T) {\n\tc := &CloudWatchLogs{\n\t\tAccessKey:      \"access_key\",\n\t\tSecretKey:      \"secret_key\",\n\t\tcwDests:        make(map[Target]*cwDest),\n\t\tpusherStopChan: make(chan struct{}),\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatchlogs/cloudwatchlogs_test.go"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 21,
                  "endLine": 65,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\t\t\t\tLogGroupName:   \"G1\",\n\t\t\t\tLogStreamName:  \"S1\",\n\t\t\t\tAccessKey:      \"access_key\",\n\t\t\t\tSecretKey:      \"secret_key\",\n\t\t\t\tpusherStopChan: make(chan struct{}),\n\t\t\t\tcwDests:        make(map[Target]*cwDest),\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\t\tLogGroupName:   \"G1\",\n\t\t\t\tLogStreamName:  \"S1\",\n\t\t\t\tAccessKey:      \"access_key\",\n\t\t\t\tSecretKey:      \"secret_key\",\n\t\t\t\tpusherStopChan: make(chan struct{}),\n\t\t\t\tcwDests:        make(map[Target]*cwDest),\n\t\t\t}\n",
                      "markdown": "`\t\t\t\tLogGroupName:   \"G1\",\n\t\t\t\tLogStreamName:  \"S1\",\n\t\t\t\tAccessKey:      \"access_key\",\n\t\t\t\tSecretKey:      \"secret_key\",\n\t\t\t\tpusherStopChan: make(chan struct{}),\n\t\t\t\tcwDests:        make(map[Target]*cwDest),\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatchlogs/cloudwatchlogs_test.go"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 4,
                  "endLine": 65,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\t\t\t\tLogGroupName:   \"G1\",\n\t\t\t\tLogStreamName:  \"S1\",\n\t\t\t\tAccessKey:      \"access_key\",\n\t\t\t\tSecretKey:      \"secret_key\",\n\t\t\t\tpusherStopChan: make(chan struct{}),\n\t\t\t\tcwDests:        make(map[Target]*cwDest),\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\t\tLogGroupName:   \"G1\",\n\t\t\t\tLogStreamName:  \"S1\",\n\t\t\t\tAccessKey:      \"access_key\",\n\t\t\t\tSecretKey:      \"secret_key\",\n\t\t\t\tpusherStopChan: make(chan struct{}),\n\t\t\t\tcwDests:        make(map[Target]*cwDest),\n\t\t\t}\n",
                      "markdown": "`\t\t\t\tLogGroupName:   \"G1\",\n\t\t\t\tLogStreamName:  \"S1\",\n\t\t\t\tAccessKey:      \"access_key\",\n\t\t\t\tSecretKey:      \"secret_key\",\n\t\t\t\tpusherStopChan: make(chan struct{}),\n\t\t\t\tcwDests:        make(map[Target]*cwDest),\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatchlogs/cloudwatchlogs_test.go"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 2,
                  "endLine": 47,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\t\t\texpectedLogGroupRetention: -1,\n\t\t\texpectedLogClass:          util.StandardLogGroupClass,\n\t\t},\n\t\t\"WithOverrideGroupStreamInfrequentLogGroup\": {\n\t\t\tcfgLogGroup:               \"Group5\",\n\t\t\tcfgLogStream:              \"Stream5\",\n\t\t\tcfgLogRetention:           -1,\n",
                    "rendered": {
                      "text": "\t\t\texpectedLogGroupRetention: -1,\n\t\t\texpectedLogClass:          util.StandardLogGroupClass,\n\t\t},\n\t\t\"WithOverrideGroupStreamInfrequentLogGroup\": {\n\t\t\tcfgLogGroup:               \"Group5\",\n\t\t\tcfgLogStream:              \"Stream5\",\n\t\t\tcfgLogRetention:           -1,\n",
                      "markdown": "`\t\t\texpectedLogGroupRetention: -1,\n\t\t\texpectedLogClass:          util.StandardLogGroupClass,\n\t\t},\n\t\t\"WithOverrideGroupStreamInfrequentLogGroup\": {\n\t\t\tcfgLogGroup:               \"Group5\",\n\t\t\tcfgLogStream:              \"Stream5\",\n\t\t\tcfgLogRetention:           -1,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatchlogs/pusher_test.go"
                },
                "region": {
                  "startLine": 575,
                  "startColumn": 105,
                  "endLine": 575,
                  "endColumn": 109,
                  "snippet": {
                    "text": "\tp.createLogGroupAndStream()\n\n\trequire.Equal(t, 1, cnt_cls, \"CreateLogSteam was not called after CreateLogGroup returned ResourceAlreadyExistsException.\")\n\trequire.Equal(t, 0, cnt_clg, \"CreateLogGroup should not be called when logstream is created successfully at first time.\")\n\n\t// test creating group fails\n\tcnt_clg = 0\n",
                    "rendered": {
                      "text": "\tp.createLogGroupAndStream()\n\n\trequire.Equal(t, 1, cnt_cls, \"CreateLogSteam was not called after CreateLogGroup returned ResourceAlreadyExistsException.\")\n\trequire.Equal(t, 0, cnt_clg, \"CreateLogGroup should not be called when logstream is created successfully at first time.\")\n\n\t// test creating group fails\n\tcnt_clg = 0\n",
                      "markdown": "`\tp.createLogGroupAndStream()\n\n\trequire.Equal(t, 1, cnt_cls, \"CreateLogSteam was not called after CreateLogGroup returned ResourceAlreadyExistsException.\")\n\trequire.Equal(t, 0, cnt_clg, \"CreateLogGroup should not be called when logstream is created successfully at first time.\")\n\n\t// test creating group fails\n\tcnt_clg = 0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatchlogs/pusher_test.go"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 58,
                  "endLine": 344,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\n\t\tfor i, le := range in.LogEvents {\n\t\t\tif *le.Message != fmt.Sprintf(\"MSG - %v\", i) {\n\t\t\t\tt.Errorf(\"PutLogEvents received message in wrong order expect 'MSG - %d', but got %v\", i, *le.Message)\n\t\t\t}\n\t\t\tif i != 0 && *le.Timestamp < *in.LogEvents[i-1].Timestamp {\n\t\t\t\tt.Errorf(\"PutLogEvents received message in wrong order\")\n",
                    "rendered": {
                      "text": "\n\t\tfor i, le := range in.LogEvents {\n\t\t\tif *le.Message != fmt.Sprintf(\"MSG - %v\", i) {\n\t\t\t\tt.Errorf(\"PutLogEvents received message in wrong order expect 'MSG - %d', but got %v\", i, *le.Message)\n\t\t\t}\n\t\t\tif i != 0 && *le.Timestamp < *in.LogEvents[i-1].Timestamp {\n\t\t\t\tt.Errorf(\"PutLogEvents received message in wrong order\")\n",
                      "markdown": "`\n\t\tfor i, le := range in.LogEvents {\n\t\t\tif *le.Message != fmt.Sprintf(\"MSG - %v\", i) {\n\t\t\t\tt.Errorf(\"PutLogEvents received message in wrong order expect 'MSG - %d', but got %v\", i, *le.Message)\n\t\t\t}\n\t\t\tif i != 0 && *le.Timestamp < *in.LogEvents[i-1].Timestamp {\n\t\t\t\tt.Errorf(\"PutLogEvents received message in wrong order\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatchlogs/pusher_test.go"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 74,
                  "endLine": 289,
                  "snippet": {
                    "text": "\n\tstop, p := testPreparation(-1, &s, 1*time.Hour, maxRetryTimeout)\n\tfor i := 0; i < 3; i++ {\n\t\tp.AddEvent(evtMock{\"msg\", time.Time{}, nil}) // time.Time{} creates zero time\n\t}\n\ttime.Sleep(10 * time.Millisecond)\n\tfor i := 0; i < 5; i++ {\n\t\tp.send()\n",
                    "rendered": {
                      "text": "\n\tstop, p := testPreparation(-1, &s, 1*time.Hour, maxRetryTimeout)\n\tfor i := 0; i < 3; i++ {\n\t\tp.AddEvent(evtMock{\"msg\", time.Time{}, nil}) // time.Time{} creates zero time\n\t}\n\ttime.Sleep(10 * time.Millisecond)\n\tfor i := 0; i < 5; i++ {\n\t\tp.send()\n",
                      "markdown": "`\n\tstop, p := testPreparation(-1, &s, 1*time.Hour, maxRetryTimeout)\n\tfor i := 0; i < 3; i++ {\n\t\tp.AddEvent(evtMock{\"msg\", time.Time{}, nil}) // time.Time{} creates zero time\n\t}\n\ttime.Sleep(10 * time.Millisecond)\n\tfor i := 0; i < 5; i++ {\n\t\tp.send()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatchlogs/pusher_test.go"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 67,
                  "endLine": 65,
                  "endColumn": 76,
                  "snippet": {
                    "text": "\tvar s svcMock\n\tstop, p := testPreparation(-1, &s, time.Second, maxRetryTimeout)\n\n\trequire.Equal(t, &s, p.Service, \"Pusher service does not match the service passed in\")\n\trequire.Equal(t, p.Group, \"G\", fmt.Sprintf(\"Pusher initialized with the wrong target: %v\", p.Target))\n\trequire.Equal(t, p.Stream, \"S\", fmt.Sprintf(\"Pusher initialized with the wrong target: %v\", p.Target))\n\n",
                    "rendered": {
                      "text": "\tvar s svcMock\n\tstop, p := testPreparation(-1, &s, time.Second, maxRetryTimeout)\n\n\trequire.Equal(t, &s, p.Service, \"Pusher service does not match the service passed in\")\n\trequire.Equal(t, p.Group, \"G\", fmt.Sprintf(\"Pusher initialized with the wrong target: %v\", p.Target))\n\trequire.Equal(t, p.Stream, \"S\", fmt.Sprintf(\"Pusher initialized with the wrong target: %v\", p.Target))\n\n",
                      "markdown": "`\tvar s svcMock\n\tstop, p := testPreparation(-1, &s, time.Second, maxRetryTimeout)\n\n\trequire.Equal(t, &s, p.Service, \"Pusher service does not match the service passed in\")\n\trequire.Equal(t, p.Group, \"G\", fmt.Sprintf(\"Pusher initialized with the wrong target: %v\", p.Target))\n\trequire.Equal(t, p.Stream, \"S\", fmt.Sprintf(\"Pusher initialized with the wrong target: %v\", p.Target))\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/outputs/cloudwatchlogs/pusher_test.go"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 40,
                  "endLine": 65,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tvar s svcMock\n\tstop, p := testPreparation(-1, &s, time.Second, maxRetryTimeout)\n\n\trequire.Equal(t, &s, p.Service, \"Pusher service does not match the service passed in\")\n\trequire.Equal(t, p.Group, \"G\", fmt.Sprintf(\"Pusher initialized with the wrong target: %v\", p.Target))\n\trequire.Equal(t, p.Stream, \"S\", fmt.Sprintf(\"Pusher initialized with the wrong target: %v\", p.Target))\n\n",
                    "rendered": {
                      "text": "\tvar s svcMock\n\tstop, p := testPreparation(-1, &s, time.Second, maxRetryTimeout)\n\n\trequire.Equal(t, &s, p.Service, \"Pusher service does not match the service passed in\")\n\trequire.Equal(t, p.Group, \"G\", fmt.Sprintf(\"Pusher initialized with the wrong target: %v\", p.Target))\n\trequire.Equal(t, p.Stream, \"S\", fmt.Sprintf(\"Pusher initialized with the wrong target: %v\", p.Target))\n\n",
                      "markdown": "`\tvar s svcMock\n\tstop, p := testPreparation(-1, &s, time.Second, maxRetryTimeout)\n\n\trequire.Equal(t, &s, p.Service, \"Pusher service does not match the service passed in\")\n\trequire.Equal(t, p.Group, \"G\", fmt.Sprintf(\"Pusher initialized with the wrong target: %v\", p.Target))\n\trequire.Equal(t, p.Stream, \"S\", fmt.Sprintf(\"Pusher initialized with the wrong target: %v\", p.Target))\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/rules/common.go"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 25,
                  "endLine": 85,
                  "endColumn": 30,
                  "snippet": {
                    "text": "func matchesSelectors(attributes pcommon.Map, selectorMatchers []SelectorMatcherItem, isTrace bool) bool {\n\tfor _, item := range selectorMatchers {\n\t\texactKey := convertToManagedAttributeKey(item.Key, isTrace)\n\t\tvalue, ok := attributes.Get(exactKey)\n\t\tif !ok {\n\t\t\treturn false\n\t\t}\n",
                    "rendered": {
                      "text": "func matchesSelectors(attributes pcommon.Map, selectorMatchers []SelectorMatcherItem, isTrace bool) bool {\n\tfor _, item := range selectorMatchers {\n\t\texactKey := convertToManagedAttributeKey(item.Key, isTrace)\n\t\tvalue, ok := attributes.Get(exactKey)\n\t\tif !ok {\n\t\t\treturn false\n\t\t}\n",
                      "markdown": "`func matchesSelectors(attributes pcommon.Map, selectorMatchers []SelectorMatcherItem, isTrace bool) bool {\n\tfor _, item := range selectorMatchers {\n\t\texactKey := convertToManagedAttributeKey(item.Key, isTrace)\n\t\tvalue, ok := attributes.Get(exactKey)\n\t\tif !ok {\n\t\t\treturn false\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/prune/metric_pruner.go"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 24,
                  "endLine": 25,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t\t\t\treturn true, errors.New(\"Metric attribute \" + attributeKey + \" must contain only ASCII characters.\")\n\t\t\t}\n\t\t}\n\t\tif _, ok := attributes.Get(common.MetricAttributeTelemetrySource); !ok {\n\t\t\treturn true, errors.New(fmt.Sprintf(\"Metric must contain %s.\", common.MetricAttributeTelemetrySource))\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\t\t\t\treturn true, errors.New(\"Metric attribute \" + attributeKey + \" must contain only ASCII characters.\")\n\t\t\t}\n\t\t}\n\t\tif _, ok := attributes.Get(common.MetricAttributeTelemetrySource); !ok {\n\t\t\treturn true, errors.New(fmt.Sprintf(\"Metric must contain %s.\", common.MetricAttributeTelemetrySource))\n\t\t}\n\t}\n",
                      "markdown": "`\t\t\t\treturn true, errors.New(\"Metric attribute \" + attributeKey + \" must contain only ASCII characters.\")\n\t\t\t}\n\t\t}\n\t\tif _, ok := attributes.Get(common.MetricAttributeTelemetrySource); !ok {\n\t\t\treturn true, errors.New(fmt.Sprintf(\"Metric must contain %s.\", common.MetricAttributeTelemetrySource))\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/prune/metric_pruner.go"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 26,
                  "endLine": 20,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\nfunc (p *MetricPruner) ShouldBeDropped(attributes pcommon.Map) (bool, error) {\n\tfor _, attributeKey := range common.CWMetricAttributes {\n\t\tif val, ok := attributes.Get(attributeKey); ok {\n\t\t\tif !isAsciiPrintable(val.Str()) {\n\t\t\t\treturn true, errors.New(\"Metric attribute \" + attributeKey + \" must contain only ASCII characters.\")\n\t\t\t}\n",
                    "rendered": {
                      "text": "\nfunc (p *MetricPruner) ShouldBeDropped(attributes pcommon.Map) (bool, error) {\n\tfor _, attributeKey := range common.CWMetricAttributes {\n\t\tif val, ok := attributes.Get(attributeKey); ok {\n\t\t\tif !isAsciiPrintable(val.Str()) {\n\t\t\t\treturn true, errors.New(\"Metric attribute \" + attributeKey + \" must contain only ASCII characters.\")\n\t\t\t}\n",
                      "markdown": "`\nfunc (p *MetricPruner) ShouldBeDropped(attributes pcommon.Map) (bool, error) {\n\tfor _, attributeKey := range common.CWMetricAttributes {\n\t\tif val, ok := attributes.Get(attributeKey); ok {\n\t\t\tif !isAsciiPrintable(val.Str()) {\n\t\t\t\treturn true, errors.New(\"Metric attribute \" + attributeKey + \" must contain only ASCII characters.\")\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/cardinalitycontrol/metrics_limiter_test.go"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 19,
                  "endLine": 137,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n\t\tok, _ := limiter.Admit(\"latency\", attr, emptyResourceAttributes)\n\t\tassert.True(t, ok)\n\t\t_, exists := attr.Get(common.AttributeTmpReserved)\n\t\tassert.False(t, exists)\n\t}\n}\n",
                    "rendered": {
                      "text": "\n\t\tok, _ := limiter.Admit(\"latency\", attr, emptyResourceAttributes)\n\t\tassert.True(t, ok)\n\t\t_, exists := attr.Get(common.AttributeTmpReserved)\n\t\tassert.False(t, exists)\n\t}\n}\n",
                      "markdown": "`\n\t\tok, _ := limiter.Admit(\"latency\", attr, emptyResourceAttributes)\n\t\tassert.True(t, ok)\n\t\t_, exists := attr.Get(common.AttributeTmpReserved)\n\t\tassert.False(t, exists)\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/cardinalitycontrol/metrics_limiter_test.go"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 24,
                  "endLine": 49,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t\t\t\t\tindexedAttrKey == common.CWMetricAttributeRemoteService {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tattrValue, _ := attr.Get(indexedAttrKey)\n\t\t\t\tif indexedAttrKey == common.CWMetricAttributeLocalOperation {\n\t\t\t\t\tassert.Equal(t, UnprocessedServiceOperationValue, attrValue.AsString())\n\t\t\t\t} else if indexedAttrKey == common.CWMetricAttributeRemoteOperation {\n",
                    "rendered": {
                      "text": "\t\t\t\t\tindexedAttrKey == common.CWMetricAttributeRemoteService {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tattrValue, _ := attr.Get(indexedAttrKey)\n\t\t\t\tif indexedAttrKey == common.CWMetricAttributeLocalOperation {\n\t\t\t\t\tassert.Equal(t, UnprocessedServiceOperationValue, attrValue.AsString())\n\t\t\t\t} else if indexedAttrKey == common.CWMetricAttributeRemoteOperation {\n",
                      "markdown": "`\t\t\t\t\tindexedAttrKey == common.CWMetricAttributeRemoteService {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tattrValue, _ := attr.Get(indexedAttrKey)\n\t\t\t\tif indexedAttrKey == common.CWMetricAttributeLocalOperation {\n\t\t\t\t\tassert.Equal(t, UnprocessedServiceOperationValue, attrValue.AsString())\n\t\t\t\t} else if indexedAttrKey == common.CWMetricAttributeRemoteOperation {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/cardinalitycontrol/metrics_limiter_test.go"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 21,
                  "endLine": 40,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\tfor i := 0; i < 10; i++ {\n\t\tattr := newLowCardinalityAttributes(100)\n\t\tif ok, _ := limiter.Admit(\"latency\", attr, emptyResourceAttributes); ok {\n\t\t\tuniqKey, _ := attr.Get(\"RemoteOperation\")\n\t\t\tadmittedAttributes[uniqKey.AsString()] = attr\n\t\t} else {\n\t\t\tfor _, indexedAttrKey := range awsDeclaredMetricAttributes {\n",
                    "rendered": {
                      "text": "\tfor i := 0; i < 10; i++ {\n\t\tattr := newLowCardinalityAttributes(100)\n\t\tif ok, _ := limiter.Admit(\"latency\", attr, emptyResourceAttributes); ok {\n\t\t\tuniqKey, _ := attr.Get(\"RemoteOperation\")\n\t\t\tadmittedAttributes[uniqKey.AsString()] = attr\n\t\t} else {\n\t\t\tfor _, indexedAttrKey := range awsDeclaredMetricAttributes {\n",
                      "markdown": "`\tfor i := 0; i < 10; i++ {\n\t\tattr := newLowCardinalityAttributes(100)\n\t\tif ok, _ := limiter.Admit(\"latency\", attr, emptyResourceAttributes); ok {\n\t\t\tuniqKey, _ := attr.Get(\"RemoteOperation\")\n\t\t\tadmittedAttributes[uniqKey.AsString()] = attr\n\t\t} else {\n\t\t\tfor _, indexedAttrKey := range awsDeclaredMetricAttributes {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/cardinalitycontrol/metrics_limiter.go"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 36,
                  "endLine": 207,
                  "endColumn": 41,
                  "snippet": {
                    "text": "func (s *service) InsertMetricDataToSecondary(md *MetricData) {\n\tif s.secondaryCMS != nil {\n\t\ts.secondaryCMS.Insert(md)\n\t\tupdatedFrequency := s.secondaryCMS.Get(md)\n\t\tupdatedMd := copyMetricDataWithUpdatedFrequency(md, updatedFrequency)\n\t\ts.secondaryTopK.Push(md, updatedMd)\n\t}\n",
                    "rendered": {
                      "text": "func (s *service) InsertMetricDataToSecondary(md *MetricData) {\n\tif s.secondaryCMS != nil {\n\t\ts.secondaryCMS.Insert(md)\n\t\tupdatedFrequency := s.secondaryCMS.Get(md)\n\t\tupdatedMd := copyMetricDataWithUpdatedFrequency(md, updatedFrequency)\n\t\ts.secondaryTopK.Push(md, updatedMd)\n\t}\n",
                      "markdown": "`func (s *service) InsertMetricDataToSecondary(md *MetricData) {\n\tif s.secondaryCMS != nil {\n\t\ts.secondaryCMS.Insert(md)\n\t\tupdatedFrequency := s.secondaryCMS.Get(md)\n\t\tupdatedMd := copyMetricDataWithUpdatedFrequency(md, updatedFrequency)\n\t\ts.secondaryTopK.Push(md, updatedMd)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/cardinalitycontrol/metrics_limiter.go"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 33,
                  "endLine": 199,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\nfunc (s *service) InsertMetricDataToPrimary(md *MetricData) {\n\ts.primaryCMS.Insert(md)\n\tupdatedFrequency := s.primaryCMS.Get(md)\n\tupdatedMd := copyMetricDataWithUpdatedFrequency(md, updatedFrequency)\n\ts.primaryTopK.Push(md, updatedMd)\n}\n",
                    "rendered": {
                      "text": "\nfunc (s *service) InsertMetricDataToPrimary(md *MetricData) {\n\ts.primaryCMS.Insert(md)\n\tupdatedFrequency := s.primaryCMS.Get(md)\n\tupdatedMd := copyMetricDataWithUpdatedFrequency(md, updatedFrequency)\n\ts.primaryTopK.Push(md, updatedMd)\n}\n",
                      "markdown": "`\nfunc (s *service) InsertMetricDataToPrimary(md *MetricData) {\n\ts.primaryCMS.Insert(md)\n\tupdatedFrequency := s.primaryCMS.Get(md)\n\tupdatedMd := copyMetricDataWithUpdatedFrequency(md, updatedFrequency)\n\ts.primaryTopK.Push(md, updatedMd)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/cardinalitycontrol/metrics_limiter.go"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 27,
                  "endLine": 151,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\tlabels := map[string]string{}\n\tsvcName := svcNameAttr.AsString()\n\tfor _, attrKey := range awsDeclaredMetricAttributes {\n\t\tif attr, ok := attributes.Get(attrKey); ok {\n\t\t\tlabels[attrKey] = attr.AsString()\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\tlabels := map[string]string{}\n\tsvcName := svcNameAttr.AsString()\n\tfor _, attrKey := range awsDeclaredMetricAttributes {\n\t\tif attr, ok := attributes.Get(attrKey); ok {\n\t\t\tlabels[attrKey] = attr.AsString()\n\t\t}\n\t}\n",
                      "markdown": "`\tlabels := map[string]string{}\n\tsvcName := svcNameAttr.AsString()\n\tfor _, attrKey := range awsDeclaredMetricAttributes {\n\t\tif attr, ok := attributes.Get(attrKey); ok {\n\t\t\tlabels[attrKey] = attr.AsString()\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/cardinalitycontrol/metrics_limiter.go"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 34,
                  "endLine": 144,
                  "endColumn": 39,
                  "snippet": {
                    "text": "}\n\nfunc (m *MetricsLimiter) filterAWSDeclaredAttributes(attributes, resourceAttributes pcommon.Map) (map[string]string, string, bool) {\n\tsvcNameAttr, exists := attributes.Get(common.CWMetricAttributeLocalService)\n\tif !exists {\n\t\treturn nil, \"\", false\n\t}\n",
                    "rendered": {
                      "text": "}\n\nfunc (m *MetricsLimiter) filterAWSDeclaredAttributes(attributes, resourceAttributes pcommon.Map) (map[string]string, string, bool) {\n\tsvcNameAttr, exists := attributes.Get(common.CWMetricAttributeLocalService)\n\tif !exists {\n\t\treturn nil, \"\", false\n\t}\n",
                      "markdown": "`}\n\nfunc (m *MetricsLimiter) filterAWSDeclaredAttributes(attributes, resourceAttributes pcommon.Map) (map[string]string, string, bool) {\n\tsvcNameAttr, exists := attributes.Get(common.CWMetricAttributeLocalService)\n\tif !exists {\n\t\treturn nil, \"\", false\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/cardinalitycontrol/metrics_limiter.go"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 26,
                  "endLine": 115,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n\tmetricData := newMetricData(serviceName, metricName, labels)\n\n\treserved, _ := attributes.Get(common.AttributeTmpReserved)\n\tif reserved.Bool() {\n\t\tattributes.Remove(common.AttributeTmpReserved)\n\t\treturn true, nil\n",
                    "rendered": {
                      "text": "\n\tmetricData := newMetricData(serviceName, metricName, labels)\n\n\treserved, _ := attributes.Get(common.AttributeTmpReserved)\n\tif reserved.Bool() {\n\t\tattributes.Remove(common.AttributeTmpReserved)\n\t\treturn true, nil\n",
                      "markdown": "`\n\tmetricData := newMetricData(serviceName, metricName, labels)\n\n\treserved, _ := attributes.Get(common.AttributeTmpReserved)\n\tif reserved.Bool() {\n\t\tattributes.Remove(common.AttributeTmpReserved)\n\t\treturn true, nil\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/cardinalitycontrol/metrics_limiter.go"
                },
                "region": {
                  "startLine": 389,
                  "startColumn": 34,
                  "endLine": 389,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\t\t}\n\t}()\n\n\tsvc.logger.Info(fmt.Sprintf(\"[%s] service entry is created.\\n\", name))\n\treturn svc\n}\n\n",
                    "rendered": {
                      "text": "\t\t}\n\t}()\n\n\tsvc.logger.Info(fmt.Sprintf(\"[%s] service entry is created.\\n\", name))\n\treturn svc\n}\n\n",
                      "markdown": "`\t\t}\n\t}()\n\n\tsvc.logger.Info(fmt.Sprintf(\"[%s] service entry is created.\\n\", name))\n\treturn svc\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/cardinalitycontrol/metrics_limiter.go"
                },
                "region": {
                  "startLine": 217,
                  "endLine": 217,
                  "endColumn": 9,
                  "snippet": {
                    "text": "type MetricData struct {\n\thashKey   string\n\tname      string\n\tservice   string\n\tfrequency int\n}\n\n",
                    "rendered": {
                      "text": "type MetricData struct {\n\thashKey   string\n\tname      string\n\tservice   string\n\tfrequency int\n}\n\n",
                      "markdown": "`type MetricData struct {\n\thashKey   string\n\tname      string\n\tservice   string\n\tfrequency int\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/cardinalitycontrol/metrics_limiter.go"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 4,
                  "endLine": 178,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\t}\n}\n\ntype service struct {\n\tlogger     *zap.Logger\n\tname       string\n\tcancelFunc context.CancelFunc\n",
                    "rendered": {
                      "text": "\t}\n}\n\ntype service struct {\n\tlogger     *zap.Logger\n\tname       string\n\tcancelFunc context.CancelFunc\n",
                      "markdown": "`\t}\n}\n\ntype service struct {\n\tlogger     *zap.Logger\n\tname       string\n\tcancelFunc context.CancelFunc\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/cardinalitycontrol/metrics_limiter.go"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 29,
                  "endLine": 173,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\tdefer m.mapLock.Unlock()\n\n\tfor _, name := range svcToRemove {\n\t\tm.logger.Info(\"remove stale service \" + name + \".\")\n\t\tdelete(m.services, name)\n\t}\n}\n",
                    "rendered": {
                      "text": "\tdefer m.mapLock.Unlock()\n\n\tfor _, name := range svcToRemove {\n\t\tm.logger.Info(\"remove stale service \" + name + \".\")\n\t\tdelete(m.services, name)\n\t}\n}\n",
                      "markdown": "`\tdefer m.mapLock.Unlock()\n\n\tfor _, name := range svcToRemove {\n\t\tm.logger.Info(\"remove stale service \" + name + \".\")\n\t\tdelete(m.services, name)\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/cardinalitycontrol/count_min_sketch_test.go"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 13,
                  "endLine": 63,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n\t\terr := 0\n\t\tfor _, data := range metricDataArray {\n\t\t\tval := cms.Get(data)\n\t\t\tif data.frequency != val {\n\t\t\t\terr += 1\n\t\t\t}\n",
                    "rendered": {
                      "text": "\n\t\terr := 0\n\t\tfor _, data := range metricDataArray {\n\t\t\tval := cms.Get(data)\n\t\t\tif data.frequency != val {\n\t\t\t\terr += 1\n\t\t\t}\n",
                      "markdown": "`\n\t\terr := 0\n\t\tfor _, data := range metricDataArray {\n\t\t\tval := cms.Get(data)\n\t\t\tif data.frequency != val {\n\t\t\t\terr += 1\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/cardinalitycontrol/count_min_sketch_test.go"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 12,
                  "endLine": 26,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t\t\tfrequency: 1,\n\t\t}\n\t\tcms.Insert(md)\n\t\tval := cms.Get(md)\n\t\tassert.Equal(t, 1+i, val)\n\t}\n}\n",
                    "rendered": {
                      "text": "\t\t\tfrequency: 1,\n\t\t}\n\t\tcms.Insert(md)\n\t\tval := cms.Get(md)\n\t\tassert.Equal(t, 1+i, val)\n\t}\n}\n",
                      "markdown": "`\t\t\tfrequency: 1,\n\t\t}\n\t\tcms.Insert(md)\n\t\tval := cms.Get(md)\n\t\tassert.Equal(t, 1+i, val)\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_utils.go"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 7,
                  "endLine": 141,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\nfunc isIP(ipString string) bool {\n\tip := net.ParseIP(ipString)\n\treturn ip != nil\n}\n",
                    "rendered": {
                      "text": "\nfunc isIP(ipString string) bool {\n\tip := net.ParseIP(ipString)\n\treturn ip != nil\n}\n",
                      "markdown": "`\nfunc isIP(ipString string) bool {\n\tip := net.ParseIP(ipString)\n\treturn ip != nil\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_utils.go"
                },
                "region": {
                  "startLine": 140,
                  "endLine": 140,
                  "endColumn": 4,
                  "snippet": {
                    "text": "}\n\nfunc isIP(ipString string) bool {\n\tip := net.ParseIP(ipString)\n\treturn ip != nil\n}\n",
                    "rendered": {
                      "text": "}\n\nfunc isIP(ipString string) bool {\n\tip := net.ParseIP(ipString)\n\treturn ip != nil\n}\n",
                      "markdown": "`}\n\nfunc isIP(ipString string) bool {\n\tip := net.ParseIP(ipString)\n\treturn ip != nil\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes_utils.go"
                },
                "region": {
                  "startLine": 118,
                  "endLine": 118,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\t\treturn \"\", \"\", false\n\t}\n\n\tip := result[1]\n\tport := result[2]\n\n\treturn ip, port, true\n",
                    "rendered": {
                      "text": "\t\treturn \"\", \"\", false\n\t}\n\n\tip := result[1]\n\tport := result[2]\n\n\treturn ip, port, true\n",
                      "markdown": "`\t\treturn \"\", \"\", false\n\t}\n\n\tip := result[1]\n\tport := result[2]\n\n\treturn ip, port, true\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/ecs.go"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 38,
                  "endLine": 88,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\t\tparts := strings.Split(clusterAttr.Str(), \"/\")\n\t\tclusterName = parts[len(parts)-1]\n\t}\n\tif taskAttr, ok := resourceAttributes.Get(semconv.AttributeAWSECSTaskARN); ok {\n\t\tparts := strings.SplitAfterN(taskAttr.Str(), \":task/\", 2)\n\t\tif len(parts) == 2 {\n\t\t\ttaskParts := strings.Split(parts[1], \"/\")\n",
                    "rendered": {
                      "text": "\t\tparts := strings.Split(clusterAttr.Str(), \"/\")\n\t\tclusterName = parts[len(parts)-1]\n\t}\n\tif taskAttr, ok := resourceAttributes.Get(semconv.AttributeAWSECSTaskARN); ok {\n\t\tparts := strings.SplitAfterN(taskAttr.Str(), \":task/\", 2)\n\t\tif len(parts) == 2 {\n\t\t\ttaskParts := strings.Split(parts[1], \"/\")\n",
                      "markdown": "`\t\tparts := strings.Split(clusterAttr.Str(), \"/\")\n\t\tclusterName = parts[len(parts)-1]\n\t}\n\tif taskAttr, ok := resourceAttributes.Get(semconv.AttributeAWSECSTaskARN); ok {\n\t\tparts := strings.SplitAfterN(taskAttr.Str(), \":task/\", 2)\n\t\tif len(parts) == 2 {\n\t\t\ttaskParts := strings.Split(parts[1], \"/\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/ecs.go"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 41,
                  "endLine": 84,
                  "endColumn": 46,
                  "snippet": {
                    "text": "}\n\nfunc getECSResourcesFromResourceAttributes(resourceAttributes pcommon.Map) (clusterName, taskId string) {\n\tif clusterAttr, ok := resourceAttributes.Get(semconv.AttributeAWSECSClusterARN); ok {\n\t\tparts := strings.Split(clusterAttr.Str(), \"/\")\n\t\tclusterName = parts[len(parts)-1]\n\t}\n",
                    "rendered": {
                      "text": "}\n\nfunc getECSResourcesFromResourceAttributes(resourceAttributes pcommon.Map) (clusterName, taskId string) {\n\tif clusterAttr, ok := resourceAttributes.Get(semconv.AttributeAWSECSClusterARN); ok {\n\t\tparts := strings.Split(clusterAttr.Str(), \"/\")\n\t\tclusterName = parts[len(parts)-1]\n\t}\n",
                      "markdown": "`}\n\nfunc getECSResourcesFromResourceAttributes(resourceAttributes pcommon.Map) (clusterName, taskId string) {\n\tif clusterAttr, ok := resourceAttributes.Get(semconv.AttributeAWSECSClusterARN); ok {\n\t\tparts := strings.Split(clusterAttr.Str(), \"/\")\n\t\tclusterName = parts[len(parts)-1]\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/ecs.go"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 36,
                  "endLine": 56,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\tif val, ok := attributes.Get(attr.AWSLocalEnvironment); ok {\n\t\treturn val.Str()\n\t}\n\tif val, found := resourceAttributes.Get(attr.AWSHostedInEnvironment); found {\n\t\treturn val.Str()\n\t}\n\tif e.hostIn != \"\" {\n",
                    "rendered": {
                      "text": "\tif val, ok := attributes.Get(attr.AWSLocalEnvironment); ok {\n\t\treturn val.Str()\n\t}\n\tif val, found := resourceAttributes.Get(attr.AWSHostedInEnvironment); found {\n\t\treturn val.Str()\n\t}\n\tif e.hostIn != \"\" {\n",
                      "markdown": "`\tif val, ok := attributes.Get(attr.AWSLocalEnvironment); ok {\n\t\treturn val.Str()\n\t}\n\tif val, found := resourceAttributes.Get(attr.AWSHostedInEnvironment); found {\n\t\treturn val.Str()\n\t}\n\tif e.hostIn != \"\" {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/ecs.go"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 25,
                  "endLine": 53,
                  "endColumn": 30,
                  "snippet": {
                    "text": "// 6. Cluster name from CWA (auto-detected)\n// 7. Hardcoded `default`\nfunc (e *ecsResourceAttributesResolver) getLocalEnvironment(attributes pcommon.Map, resourceAttributes pcommon.Map, clusterName string) string {\n\tif val, ok := attributes.Get(attr.AWSLocalEnvironment); ok {\n\t\treturn val.Str()\n\t}\n\tif val, found := resourceAttributes.Get(attr.AWSHostedInEnvironment); found {\n",
                    "rendered": {
                      "text": "// 6. Cluster name from CWA (auto-detected)\n// 7. Hardcoded `default`\nfunc (e *ecsResourceAttributesResolver) getLocalEnvironment(attributes pcommon.Map, resourceAttributes pcommon.Map, clusterName string) string {\n\tif val, ok := attributes.Get(attr.AWSLocalEnvironment); ok {\n\t\treturn val.Str()\n\t}\n\tif val, found := resourceAttributes.Get(attr.AWSHostedInEnvironment); found {\n",
                      "markdown": "`// 6. Cluster name from CWA (auto-detected)\n// 7. Hardcoded `default`\nfunc (e *ecsResourceAttributesResolver) getLocalEnvironment(attributes pcommon.Map, resourceAttributes pcommon.Map, clusterName string) string {\n\tif val, ok := attributes.Get(attr.AWSLocalEnvironment); ok {\n\t\treturn val.Str()\n\t}\n\tif val, found := resourceAttributes.Get(attr.AWSHostedInEnvironment); found {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/ecs.go"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 34,
                  "endLine": 25,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\nfunc (e *ecsResourceAttributesResolver) Process(attributes, resourceAttributes pcommon.Map) error {\n\tfor attrKey, mappingKey := range e.attributeMap {\n\t\tif val, ok := resourceAttributes.Get(attrKey); ok {\n\t\t\tattributes.PutStr(mappingKey, val.Str())\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\nfunc (e *ecsResourceAttributesResolver) Process(attributes, resourceAttributes pcommon.Map) error {\n\tfor attrKey, mappingKey := range e.attributeMap {\n\t\tif val, ok := resourceAttributes.Get(attrKey); ok {\n\t\t\tattributes.PutStr(mappingKey, val.Str())\n\t\t}\n\t}\n",
                      "markdown": "`\nfunc (e *ecsResourceAttributesResolver) Process(attributes, resourceAttributes pcommon.Map) error {\n\tfor attrKey, mappingKey := range e.attributeMap {\n\t\tif val, ok := resourceAttributes.Get(attrKey); ok {\n\t\t\tattributes.PutStr(mappingKey, val.Str())\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/ecs.go"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 32,
                  "endLine": 36,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\t}\n\n\tattributes.PutStr(common.AttributePlatformType, e.platformType)\n\tattributes.PutStr(attr.AWSLocalEnvironment, e.getLocalEnvironment(attributes, resourceAttributes, clusterName))\n\tattributes.PutStr(attr.AWSECSClusterName, clusterName)\n\tif taskId != \"\" {\n\t\tattributes.PutStr(attr.AWSECSTaskID, taskId)\n",
                    "rendered": {
                      "text": "\t}\n\n\tattributes.PutStr(common.AttributePlatformType, e.platformType)\n\tattributes.PutStr(attr.AWSLocalEnvironment, e.getLocalEnvironment(attributes, resourceAttributes, clusterName))\n\tattributes.PutStr(attr.AWSECSClusterName, clusterName)\n\tif taskId != \"\" {\n\t\tattributes.PutStr(attr.AWSECSTaskID, taskId)\n",
                      "markdown": "`\t}\n\n\tattributes.PutStr(common.AttributePlatformType, e.platformType)\n\tattributes.PutStr(attr.AWSLocalEnvironment, e.getLocalEnvironment(attributes, resourceAttributes, clusterName))\n\tattributes.PutStr(attr.AWSECSClusterName, clusterName)\n\tif taskId != \"\" {\n\t\tattributes.PutStr(attr.AWSECSTaskID, taskId)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 616,
                  "startColumn": 25,
                  "endLine": 616,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\t\tnamespace = \"UnknownNamespace\"\n\t}\n\n\tif val, ok := attributes.Get(attr.AWSLocalEnvironment); !ok {\n\t\tenv := generateLocalEnvironment(h.platformCode, h.clusterName+\"/\"+namespace)\n\t\tattributes.PutStr(attr.AWSLocalEnvironment, env)\n\t} else {\n",
                    "rendered": {
                      "text": "\t\tnamespace = \"UnknownNamespace\"\n\t}\n\n\tif val, ok := attributes.Get(attr.AWSLocalEnvironment); !ok {\n\t\tenv := generateLocalEnvironment(h.platformCode, h.clusterName+\"/\"+namespace)\n\t\tattributes.PutStr(attr.AWSLocalEnvironment, env)\n\t} else {\n",
                      "markdown": "`\t\tnamespace = \"UnknownNamespace\"\n\t}\n\n\tif val, ok := attributes.Get(attr.AWSLocalEnvironment); !ok {\n\t\tenv := generateLocalEnvironment(h.platformCode, h.clusterName+\"/\"+namespace)\n\t\tattributes.PutStr(attr.AWSLocalEnvironment, env)\n\t} else {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 610,
                  "startColumn": 36,
                  "endLine": 610,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\t\tattributes.PutStr(common.AttributeK8SClusterName, h.clusterName)\n\t}\n\tvar namespace string\n\tif nsAttr, ok := resourceAttributes.Get(semconv.AttributeK8SNamespaceName); ok {\n\t\tnamespace = nsAttr.Str()\n\t} else {\n\t\tnamespace = \"UnknownNamespace\"\n",
                    "rendered": {
                      "text": "\t\tattributes.PutStr(common.AttributeK8SClusterName, h.clusterName)\n\t}\n\tvar namespace string\n\tif nsAttr, ok := resourceAttributes.Get(semconv.AttributeK8SNamespaceName); ok {\n\t\tnamespace = nsAttr.Str()\n\t} else {\n\t\tnamespace = \"UnknownNamespace\"\n",
                      "markdown": "`\t\tattributes.PutStr(common.AttributeK8SClusterName, h.clusterName)\n\t}\n\tvar namespace string\n\tif nsAttr, ok := resourceAttributes.Get(semconv.AttributeK8SNamespaceName); ok {\n\t\tnamespace = nsAttr.Str()\n\t} else {\n\t\tnamespace = \"UnknownNamespace\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 598,
                  "startColumn": 34,
                  "endLine": 598,
                  "endColumn": 39,
                  "snippet": {
                    "text": "}\nfunc (h *kubernetesResourceAttributesResolver) Process(attributes, resourceAttributes pcommon.Map) error {\n\tfor attrKey, mappingKey := range h.attributeMap {\n\t\tif val, ok := resourceAttributes.Get(attrKey); ok {\n\t\t\tattributes.PutStr(mappingKey, val.AsString())\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "}\nfunc (h *kubernetesResourceAttributesResolver) Process(attributes, resourceAttributes pcommon.Map) error {\n\tfor attrKey, mappingKey := range h.attributeMap {\n\t\tif val, ok := resourceAttributes.Get(attrKey); ok {\n\t\t\tattributes.PutStr(mappingKey, val.AsString())\n\t\t}\n\t}\n",
                      "markdown": "`}\nfunc (h *kubernetesResourceAttributesResolver) Process(attributes, resourceAttributes pcommon.Map) error {\n\tfor attrKey, mappingKey := range h.attributeMap {\n\t\tif val, ok := resourceAttributes.Get(attrKey); ok {\n\t\t\tattributes.PutStr(mappingKey, val.AsString())\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 574,
                  "startColumn": 23,
                  "endLine": 574,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\t\t}\n\t}\n\n\tif _, ok := attributes.Get(attr.AWSRemoteEnvironment); !ok {\n\t\tif namespace != \"\" {\n\t\t\tattributes.PutStr(attr.AWSRemoteEnvironment, fmt.Sprintf(\"%s:%s/%s\", e.platformCode, e.clusterName, namespace))\n\t\t}\n",
                    "rendered": {
                      "text": "\t\t}\n\t}\n\n\tif _, ok := attributes.Get(attr.AWSRemoteEnvironment); !ok {\n\t\tif namespace != \"\" {\n\t\t\tattributes.PutStr(attr.AWSRemoteEnvironment, fmt.Sprintf(\"%s:%s/%s\", e.platformCode, e.clusterName, namespace))\n\t\t}\n",
                      "markdown": "`\t\t}\n\t}\n\n\tif _, ok := attributes.Get(attr.AWSRemoteEnvironment); !ok {\n\t\tif namespace != \"\" {\n\t\t\tattributes.PutStr(attr.AWSRemoteEnvironment, fmt.Sprintf(\"%s:%s/%s\", e.platformCode, e.clusterName, namespace))\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 550,
                  "startColumn": 27,
                  "endLine": 550,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\nfunc (e *kubernetesResolver) Process(attributes, resourceAttributes pcommon.Map) error {\n\tvar namespace string\n\tif value, ok := attributes.Get(attr.AWSRemoteService); ok {\n\t\tvalueStr := value.AsString()\n\t\tipStr := \"\"\n\t\tif ip, _, ok := extractIPPort(valueStr); ok {\n",
                    "rendered": {
                      "text": "\nfunc (e *kubernetesResolver) Process(attributes, resourceAttributes pcommon.Map) error {\n\tvar namespace string\n\tif value, ok := attributes.Get(attr.AWSRemoteService); ok {\n\t\tvalueStr := value.AsString()\n\t\tipStr := \"\"\n\t\tif ip, _, ok := extractIPPort(valueStr); ok {\n",
                      "markdown": "`\nfunc (e *kubernetesResolver) Process(attributes, resourceAttributes pcommon.Map) error {\n\tvar namespace string\n\tif value, ok := attributes.Get(attr.AWSRemoteService); ok {\n\t\tvalueStr := value.AsString()\n\t\tipStr := \"\"\n\t\tif ip, _, ok := extractIPPort(valueStr); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 68,
                  "endLine": 106,
                  "endColumn": 76,
                  "snippet": {
                    "text": "key interface{}) {\n\tgo func() {\n\t\ttime.Sleep(td.Delay)\n\t\tm.Delete(key)\n\t}()\n}\n\nfunc (s *serviceWatcher) onAddOrUpdateService(service *corev1.Service) {\n\t// service can also have an external IP (or ingress IP) that could be accessed\n\t// this field can be either an IP address (in some edge case) or a hostname (see \"EXTERNAL-IP\" column in \"k get svc\" output)\n\t// [ec2-user@ip-172-31-11-104 one-step]$ k get svc -A\n\t// NAMESPACE           NAME                          TYPE           CLUSTER-IP       EXTERNAL-IP                                                              PORT(S)                             ",
                    "rendered": {
                      "text": "key interface{}) {\n\tgo func() {\n\t\ttime.Sleep(td.Delay)\n\t\tm.Delete(key)\n\t}()\n}\n\nfunc (s *serviceWatcher) onAddOrUpdateService(service *corev1.Service) {\n\t// service can also have an external IP (or ingress IP) that could be accessed\n\t// this field can be either an IP address (in some edge case) or a hostname (see \"EXTERNAL-IP\" column in \"k get svc\" output)\n\t// [ec2-user@ip-172-31-11-104 one-step]$ k get svc -A\n\t// NAMESPACE           NAME                          TYPE           CLUSTER-IP       EXTERNAL-IP                                                              PORT(S)                             ",
                      "markdown": "`key interface{}) {\n\tgo func() {\n\t\ttime.Sleep(td.Delay)\n\t\tm.Delete(key)\n\t}()\n}\n\nfunc (s *serviceWatcher) onAddOrUpdateService(service *corev1.Service) {\n\t// service can also have an external IP (or ingress IP) that could be accessed\n\t// this field can be either an IP address (in some edge case) or a hostname (see \"EXTERNAL-IP\" column in \"k get svc\" output)\n\t// [ec2-user@ip-172-31-11-104 one-step]$ k get svc -A\n\t// NAMESPACE           NAME                          TYPE           CLUSTER-IP       EXTERNAL-IP                                                              PORT(S)                             `"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 307,
                  "startColumn": 47,
                  "endLine": 307,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\t\t},\n\t\tUpdateFunc: func(oldObj, newObj interface{}) {\n\t\t\tservice := newObj.(*corev1.Service)\n\t\t\ts.logger.Debug(\"list and watch for services: UPDATE \" + service.Name)\n\t\t\ts.onAddOrUpdateService(service)\n\t\t},\n\t\tDeleteFunc: func(obj interface{}) {\n",
                    "rendered": {
                      "text": "\t\t},\n\t\tUpdateFunc: func(oldObj, newObj interface{}) {\n\t\t\tservice := newObj.(*corev1.Service)\n\t\t\ts.logger.Debug(\"list and watch for services: UPDATE \" + service.Name)\n\t\t\ts.onAddOrUpdateService(service)\n\t\t},\n\t\tDeleteFunc: func(obj interface{}) {\n",
                      "markdown": "`\t\t},\n\t\tUpdateFunc: func(oldObj, newObj interface{}) {\n\t\t\tservice := newObj.(*corev1.Service)\n\t\t\ts.logger.Debug(\"list and watch for services: UPDATE \" + service.Name)\n\t\t\ts.onAddOrUpdateService(service)\n\t\t},\n\t\tDeleteFunc: func(obj interface{}) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 43,
                  "endLine": 258,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\t\tUpdateFunc: func(oldObj, newObj interface{}) {\n\t\t\tpod := newObj.(*corev1.Pod)\n\t\t\toldPod := oldObj.(*corev1.Pod)\n\t\t\tp.logger.Debug(\"list and watch for pods: UPDATE \" + pod.Name)\n\t\t\tp.onAddOrUpdatePod(pod, oldPod)\n\t\t},\n\t\tDeleteFunc: func(obj interface{}) {\n",
                    "rendered": {
                      "text": "\t\tUpdateFunc: func(oldObj, newObj interface{}) {\n\t\t\tpod := newObj.(*corev1.Pod)\n\t\t\toldPod := oldObj.(*corev1.Pod)\n\t\t\tp.logger.Debug(\"list and watch for pods: UPDATE \" + pod.Name)\n\t\t\tp.onAddOrUpdatePod(pod, oldPod)\n\t\t},\n\t\tDeleteFunc: func(obj interface{}) {\n",
                      "markdown": "`\t\tUpdateFunc: func(oldObj, newObj interface{}) {\n\t\t\tpod := newObj.(*corev1.Pod)\n\t\t\toldPod := oldObj.(*corev1.Pod)\n\t\t\tp.logger.Debug(\"list and watch for pods: UPDATE \" + pod.Name)\n\t\t\tp.onAddOrUpdatePod(pod, oldPod)\n\t\t},\n\t\tDeleteFunc: func(obj interface{}) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 8,
                  "endLine": 35,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t// This posed a problem because:\n\t//   1. Metric data is aggregated and emitted every 1 minute.\n\t//   2. If this aggregated metric data, which contains the IP of the now-destroyed pod, arrives\n\t//      at the EKS resolver after the IP records have already been deleted, the metric can't be processed correctly.\n\t//\n\t// To mitigate this issue, we've introduced a 2-minute deletion delay. This ensures that any\n\t// metric data that arrives within those 2 minutes, containing the old IP, will still get mapped correctly to a service.\n",
                    "rendered": {
                      "text": "\t// This posed a problem because:\n\t//   1. Metric data is aggregated and emitted every 1 minute.\n\t//   2. If this aggregated metric data, which contains the IP of the now-destroyed pod, arrives\n\t//      at the EKS resolver after the IP records have already been deleted, the metric can't be processed correctly.\n\t//\n\t// To mitigate this issue, we've introduced a 2-minute deletion delay. This ensures that any\n\t// metric data that arrives within those 2 minutes, containing the old IP, will still get mapped correctly to a service.\n",
                      "markdown": "`\t// This posed a problem because:\n\t//   1. Metric data is aggregated and emitted every 1 minute.\n\t//   2. If this aggregated metric data, which contains the IP of the now-destroyed pod, arrives\n\t//      at the EKS resolver after the IP records have already been deleted, the metric can't be processed correctly.\n\t//\n\t// To mitigate this issue, we've introduced a 2-minute deletion delay. This ensures that any\n\t// metric data that arrives within those 2 minutes, containing the old IP, will still get mapped correctly to a service.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 617,
                  "startColumn": 1,
                  "endLine": 617,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t}\n\n\tif val, ok := attributes.Get(attr.AWSLocalEnvironment); !ok {\n\t\tenv := generateLocalEnvironment(h.platformCode, h.clusterName+\"/\"+namespace)\n\t\tattributes.PutStr(attr.AWSLocalEnvironment, env)\n\t} else {\n\t\tattributes.PutStr(attr.AWSLocalEnvironment, val.Str())\n",
                    "rendered": {
                      "text": "\t}\n\n\tif val, ok := attributes.Get(attr.AWSLocalEnvironment); !ok {\n\t\tenv := generateLocalEnvironment(h.platformCode, h.clusterName+\"/\"+namespace)\n\t\tattributes.PutStr(attr.AWSLocalEnvironment, env)\n\t} else {\n\t\tattributes.PutStr(attr.AWSLocalEnvironment, val.Str())\n",
                      "markdown": "`\t}\n\n\tif val, ok := attributes.Get(attr.AWSLocalEnvironment); !ok {\n\t\tenv := generateLocalEnvironment(h.platformCode, h.clusterName+\"/\"+namespace)\n\t\tattributes.PutStr(attr.AWSLocalEnvironment, env)\n\t} else {\n\t\tattributes.PutStr(attr.AWSLocalEnvironment, val.Str())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 558,
                  "startColumn": 11,
                  "endLine": 559,
                  "snippet": {
                    "text": "\t\t\t\tattributes.PutStr(attr.AWSRemoteService, workload)\n\t\t\t\tnamespace = ns\n\t\t\t} else {\n\t\t\t\tipStr = ip\n\t\t\t}\n\t\t} else if isIP(valueStr) {\n\t\t\tipStr = valueStr\n\t\t}\n",
                    "rendered": {
                      "text": "\t\t\t\tattributes.PutStr(attr.AWSRemoteService, workload)\n\t\t\t\tnamespace = ns\n\t\t\t} else {\n\t\t\t\tipStr = ip\n\t\t\t}\n\t\t} else if isIP(valueStr) {\n\t\t\tipStr = valueStr\n\t\t}\n",
                      "markdown": "`\t\t\t\tattributes.PutStr(attr.AWSRemoteService, workload)\n\t\t\t\tnamespace = ns\n\t\t\t} else {\n\t\t\t\tipStr = ip\n\t\t\t}\n\t\t} else if isIP(valueStr) {\n\t\t\tipStr = valueStr\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 491,
                  "startColumn": 27,
                  "endLine": 491,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\t\tsvcWatcher := newServiceWatcher(logger, serviceInformer, timedDeleter)\n\n\t\tsafeStopCh := &safeChannel{ch: make(chan struct{}), closed: false}\n\t\t// initialize the pod and service watchers for the cluster\n\t\tpoWatcher.run(safeStopCh.ch)\n\t\tsvcWatcher.Run(safeStopCh.ch)\n\t\t// wait for caches to sync (for once) so that clients knows about the pods and services in the cluster\n",
                    "rendered": {
                      "text": "\t\tsvcWatcher := newServiceWatcher(logger, serviceInformer, timedDeleter)\n\n\t\tsafeStopCh := &safeChannel{ch: make(chan struct{}), closed: false}\n\t\t// initialize the pod and service watchers for the cluster\n\t\tpoWatcher.run(safeStopCh.ch)\n\t\tsvcWatcher.Run(safeStopCh.ch)\n\t\t// wait for caches to sync (for once) so that clients knows about the pods and services in the cluster\n",
                      "markdown": "`\t\tsvcWatcher := newServiceWatcher(logger, serviceInformer, timedDeleter)\n\n\t\tsafeStopCh := &safeChannel{ch: make(chan struct{}), closed: false}\n\t\t// initialize the pod and service watchers for the cluster\n\t\tpoWatcher.run(safeStopCh.ch)\n\t\tsvcWatcher.Run(safeStopCh.ch)\n\t\t// wait for caches to sync (for once) so that clients knows about the pods and services in the cluster\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 483,
                  "startColumn": 35,
                  "endLine": 483,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\tserviceInformer := sharedInformerFactory.Core().V1().Services().Informer()\n\t\terr = serviceInformer.SetTransform(minimizeService)\n\t\tif err != nil {\n\t\t\tlogger.Error(\"failed to minimize Service objects\", zap.Error(err))\n\t\t}\n\n\t\ttimedDeleter := &TimedDeleter{Delay: deletionDelay}\n",
                    "rendered": {
                      "text": "\t\tserviceInformer := sharedInformerFactory.Core().V1().Services().Informer()\n\t\terr = serviceInformer.SetTransform(minimizeService)\n\t\tif err != nil {\n\t\t\tlogger.Error(\"failed to minimize Service objects\", zap.Error(err))\n\t\t}\n\n\t\ttimedDeleter := &TimedDeleter{Delay: deletionDelay}\n",
                      "markdown": "`\t\tserviceInformer := sharedInformerFactory.Core().V1().Services().Informer()\n\t\terr = serviceInformer.SetTransform(minimizeService)\n\t\tif err != nil {\n\t\t\tlogger.Error(\"failed to minimize Service objects\", zap.Error(err))\n\t\t}\n\n\t\ttimedDeleter := &TimedDeleter{Delay: deletionDelay}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 390,
                  "startColumn": 23,
                  "endLine": 390,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\t\t\t\treturn\n\t\t\tcase <-time.After(time.Minute + 30*time.Second):\n\t\t\t\tm.mapServiceToWorkload()\n\t\t\t\tm.logger.Debug(\"Map service to workload at:\", zap.Time(\"time\", time.Now()))\n\t\t\t}\n\t\t}\n\t}()\n",
                    "rendered": {
                      "text": "\t\t\t\treturn\n\t\t\tcase <-time.After(time.Minute + 30*time.Second):\n\t\t\t\tm.mapServiceToWorkload()\n\t\t\t\tm.logger.Debug(\"Map service to workload at:\", zap.Time(\"time\", time.Now()))\n\t\t\t}\n\t\t}\n\t}()\n",
                      "markdown": "`\t\t\t\treturn\n\t\t\tcase <-time.After(time.Minute + 30*time.Second):\n\t\t\t\tm.mapServiceToWorkload()\n\t\t\t\tm.logger.Debug(\"Map service to workload at:\", zap.Time(\"time\", time.Now()))\n\t\t\t}\n\t\t}\n\t}()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 381,
                  "startColumn": 31,
                  "endLine": 381,
                  "endColumn": 40,
                  "snippet": {
                    "text": "func (m *serviceToWorkloadMapper) Start(stopCh chan struct{}) {\n\t// do the first mapping immediately\n\tm.mapServiceToWorkload()\n\tm.logger.Debug(\"First-time map service to workload at:\", zap.Time(\"time\", time.Now()))\n\n\tgo func() {\n\t\tfor {\n",
                    "rendered": {
                      "text": "func (m *serviceToWorkloadMapper) Start(stopCh chan struct{}) {\n\t// do the first mapping immediately\n\tm.mapServiceToWorkload()\n\tm.logger.Debug(\"First-time map service to workload at:\", zap.Time(\"time\", time.Now()))\n\n\tgo func() {\n\t\tfor {\n",
                      "markdown": "`func (m *serviceToWorkloadMapper) Start(stopCh chan struct{}) {\n\t// do the first mapping immediately\n\tm.mapServiceToWorkload()\n\tm.logger.Debug(\"First-time map service to workload at:\", zap.Time(\"time\", time.Now()))\n\n\tgo func() {\n\t\tfor {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 20,
                  "endLine": 346,
                  "endColumn": 29,
                  "snippet": {
                    "text": "}\n\nfunc (m *serviceToWorkloadMapper) mapServiceToWorkload() {\n\tm.logger.Debug(\"Map service to workload at:\", zap.Time(\"time\", time.Now()))\n\n\tm.serviceAndNamespaceToSelectors.Range(func(key, value interface{}) bool {\n\t\tvar workloads []string\n",
                    "rendered": {
                      "text": "}\n\nfunc (m *serviceToWorkloadMapper) mapServiceToWorkload() {\n\tm.logger.Debug(\"Map service to workload at:\", zap.Time(\"time\", time.Now()))\n\n\tm.serviceAndNamespaceToSelectors.Range(func(key, value interface{}) bool {\n\t\tvar workloads []string\n",
                      "markdown": "`}\n\nfunc (m *serviceToWorkloadMapper) mapServiceToWorkload() {\n\tm.logger.Debug(\"Map service to workload at:\", zap.Time(\"time\", time.Now()))\n\n\tm.serviceAndNamespaceToSelectors.Range(func(key, value interface{}) bool {\n\t\tvar workloads []string\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 50,
                  "endLine": 321,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\nfunc (s *serviceWatcher) waitForCacheSync(stopCh chan struct{}) {\n\tif !cache.WaitForNamedCacheSync(\"serviceWatcher\", stopCh, s.informer.HasSynced) {\n\t\ts.logger.Fatal(\"timed out waiting for kubernetes service watcher caches to sync\")\n\t}\n\n\ts.logger.Info(\"serviceWatcher: Cache synced\")\n",
                    "rendered": {
                      "text": "\nfunc (s *serviceWatcher) waitForCacheSync(stopCh chan struct{}) {\n\tif !cache.WaitForNamedCacheSync(\"serviceWatcher\", stopCh, s.informer.HasSynced) {\n\t\ts.logger.Fatal(\"timed out waiting for kubernetes service watcher caches to sync\")\n\t}\n\n\ts.logger.Info(\"serviceWatcher: Cache synced\")\n",
                      "markdown": "`\nfunc (s *serviceWatcher) waitForCacheSync(stopCh chan struct{}) {\n\tif !cache.WaitForNamedCacheSync(\"serviceWatcher\", stopCh, s.informer.HasSynced) {\n\t\ts.logger.Fatal(\"timed out waiting for kubernetes service watcher caches to sync\")\n\t}\n\n\ts.logger.Info(\"serviceWatcher: Cache synced\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 27,
                  "endLine": 312,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\t\t},\n\t\tDeleteFunc: func(obj interface{}) {\n\t\t\tservice := obj.(*corev1.Service)\n\t\t\ts.logger.Debug(\"list and watch for services: DELETE \" + service.Name)\n\t\t\ts.onDeleteService(service, s.deleter)\n\t\t},\n\t})\n",
                    "rendered": {
                      "text": "\t\t},\n\t\tDeleteFunc: func(obj interface{}) {\n\t\t\tservice := obj.(*corev1.Service)\n\t\t\ts.logger.Debug(\"list and watch for services: DELETE \" + service.Name)\n\t\t\ts.onDeleteService(service, s.deleter)\n\t\t},\n\t})\n",
                      "markdown": "`\t\t},\n\t\tDeleteFunc: func(obj interface{}) {\n\t\t\tservice := obj.(*corev1.Service)\n\t\t\ts.logger.Debug(\"list and watch for services: DELETE \" + service.Name)\n\t\t\ts.onDeleteService(service, s.deleter)\n\t\t},\n\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 2,
                  "endLine": 311,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\t\ts.onAddOrUpdateService(service)\n\t\t},\n\t\tDeleteFunc: func(obj interface{}) {\n\t\t\tservice := obj.(*corev1.Service)\n\t\t\ts.logger.Debug(\"list and watch for services: DELETE \" + service.Name)\n\t\t\ts.onDeleteService(service, s.deleter)\n\t\t},\n",
                    "rendered": {
                      "text": "\t\t\ts.onAddOrUpdateService(service)\n\t\t},\n\t\tDeleteFunc: func(obj interface{}) {\n\t\t\tservice := obj.(*corev1.Service)\n\t\t\ts.logger.Debug(\"list and watch for services: DELETE \" + service.Name)\n\t\t\ts.onDeleteService(service, s.deleter)\n\t\t},\n",
                      "markdown": "`\t\t\ts.onAddOrUpdateService(service)\n\t\t},\n\t\tDeleteFunc: func(obj interface{}) {\n\t\t\tservice := obj.(*corev1.Service)\n\t\t\ts.logger.Debug(\"list and watch for services: DELETE \" + service.Name)\n\t\t\ts.onDeleteService(service, s.deleter)\n\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 307,
                  "startColumn": 27,
                  "endLine": 307,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\t\t},\n\t\tUpdateFunc: func(oldObj, newObj interface{}) {\n\t\t\tservice := newObj.(*corev1.Service)\n\t\t\ts.logger.Debug(\"list and watch for services: UPDATE \" + service.Name)\n\t\t\ts.onAddOrUpdateService(service)\n\t\t},\n\t\tDeleteFunc: func(obj interface{}) {\n",
                    "rendered": {
                      "text": "\t\t},\n\t\tUpdateFunc: func(oldObj, newObj interface{}) {\n\t\t\tservice := newObj.(*corev1.Service)\n\t\t\ts.logger.Debug(\"list and watch for services: UPDATE \" + service.Name)\n\t\t\ts.onAddOrUpdateService(service)\n\t\t},\n\t\tDeleteFunc: func(obj interface{}) {\n",
                      "markdown": "`\t\t},\n\t\tUpdateFunc: func(oldObj, newObj interface{}) {\n\t\t\tservice := newObj.(*corev1.Service)\n\t\t\ts.logger.Debug(\"list and watch for services: UPDATE \" + service.Name)\n\t\t\ts.onAddOrUpdateService(service)\n\t\t},\n\t\tDeleteFunc: func(obj interface{}) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 2,
                  "endLine": 306,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\t\ts.onAddOrUpdateService(service)\n\t\t},\n\t\tUpdateFunc: func(oldObj, newObj interface{}) {\n\t\t\tservice := newObj.(*corev1.Service)\n\t\t\ts.logger.Debug(\"list and watch for services: UPDATE \" + service.Name)\n\t\t\ts.onAddOrUpdateService(service)\n\t\t},\n",
                    "rendered": {
                      "text": "\t\t\ts.onAddOrUpdateService(service)\n\t\t},\n\t\tUpdateFunc: func(oldObj, newObj interface{}) {\n\t\t\tservice := newObj.(*corev1.Service)\n\t\t\ts.logger.Debug(\"list and watch for services: UPDATE \" + service.Name)\n\t\t\ts.onAddOrUpdateService(service)\n\t\t},\n",
                      "markdown": "`\t\t\ts.onAddOrUpdateService(service)\n\t\t},\n\t\tUpdateFunc: func(oldObj, newObj interface{}) {\n\t\t\tservice := newObj.(*corev1.Service)\n\t\t\ts.logger.Debug(\"list and watch for services: UPDATE \" + service.Name)\n\t\t\ts.onAddOrUpdateService(service)\n\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 27,
                  "endLine": 302,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\ts.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{\n\t\tAddFunc: func(obj interface{}) {\n\t\t\tservice := obj.(*corev1.Service)\n\t\t\ts.logger.Debug(\"list and watch for services: ADD \" + service.Name)\n\t\t\ts.onAddOrUpdateService(service)\n\t\t},\n\t\tUpdateFunc: func(oldObj, newObj interface{}) {\n",
                    "rendered": {
                      "text": "\ts.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{\n\t\tAddFunc: func(obj interface{}) {\n\t\t\tservice := obj.(*corev1.Service)\n\t\t\ts.logger.Debug(\"list and watch for services: ADD \" + service.Name)\n\t\t\ts.onAddOrUpdateService(service)\n\t\t},\n\t\tUpdateFunc: func(oldObj, newObj interface{}) {\n",
                      "markdown": "`\ts.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{\n\t\tAddFunc: func(obj interface{}) {\n\t\t\tservice := obj.(*corev1.Service)\n\t\t\ts.logger.Debug(\"list and watch for services: ADD \" + service.Name)\n\t\t\ts.onAddOrUpdateService(service)\n\t\t},\n\t\tUpdateFunc: func(oldObj, newObj interface{}) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 2,
                  "endLine": 301,
                  "endColumn": 11,
                  "snippet": {
                    "text": "func (s *serviceWatcher) Run(stopCh chan struct{}) {\n\ts.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{\n\t\tAddFunc: func(obj interface{}) {\n\t\t\tservice := obj.(*corev1.Service)\n\t\t\ts.logger.Debug(\"list and watch for services: ADD \" + service.Name)\n\t\t\ts.onAddOrUpdateService(service)\n\t\t},\n",
                    "rendered": {
                      "text": "func (s *serviceWatcher) Run(stopCh chan struct{}) {\n\ts.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{\n\t\tAddFunc: func(obj interface{}) {\n\t\t\tservice := obj.(*corev1.Service)\n\t\t\ts.logger.Debug(\"list and watch for services: ADD \" + service.Name)\n\t\t\ts.onAddOrUpdateService(service)\n\t\t},\n",
                      "markdown": "`func (s *serviceWatcher) Run(stopCh chan struct{}) {\n\ts.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{\n\t\tAddFunc: func(obj interface{}) {\n\t\t\tservice := obj.(*corev1.Service)\n\t\t\ts.logger.Debug(\"list and watch for services: ADD \" + service.Name)\n\t\t\ts.onAddOrUpdateService(service)\n\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 27,
                  "endLine": 263,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\t\t},\n\t\tDeleteFunc: func(obj interface{}) {\n\t\t\tpod := obj.(*corev1.Pod)\n\t\t\tp.logger.Debug(\"list and watch for pods: DELETE \" + pod.Name)\n\t\t\tp.onDeletePod(obj)\n\t\t},\n\t})\n",
                    "rendered": {
                      "text": "\t\t},\n\t\tDeleteFunc: func(obj interface{}) {\n\t\t\tpod := obj.(*corev1.Pod)\n\t\t\tp.logger.Debug(\"list and watch for pods: DELETE \" + pod.Name)\n\t\t\tp.onDeletePod(obj)\n\t\t},\n\t})\n",
                      "markdown": "`\t\t},\n\t\tDeleteFunc: func(obj interface{}) {\n\t\t\tpod := obj.(*corev1.Pod)\n\t\t\tp.logger.Debug(\"list and watch for pods: DELETE \" + pod.Name)\n\t\t\tp.onDeletePod(obj)\n\t\t},\n\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 27,
                  "endLine": 258,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\t\tUpdateFunc: func(oldObj, newObj interface{}) {\n\t\t\tpod := newObj.(*corev1.Pod)\n\t\t\toldPod := oldObj.(*corev1.Pod)\n\t\t\tp.logger.Debug(\"list and watch for pods: UPDATE \" + pod.Name)\n\t\t\tp.onAddOrUpdatePod(pod, oldPod)\n\t\t},\n\t\tDeleteFunc: func(obj interface{}) {\n",
                    "rendered": {
                      "text": "\t\tUpdateFunc: func(oldObj, newObj interface{}) {\n\t\t\tpod := newObj.(*corev1.Pod)\n\t\t\toldPod := oldObj.(*corev1.Pod)\n\t\t\tp.logger.Debug(\"list and watch for pods: UPDATE \" + pod.Name)\n\t\t\tp.onAddOrUpdatePod(pod, oldPod)\n\t\t},\n\t\tDeleteFunc: func(obj interface{}) {\n",
                      "markdown": "`\t\tUpdateFunc: func(oldObj, newObj interface{}) {\n\t\t\tpod := newObj.(*corev1.Pod)\n\t\t\toldPod := oldObj.(*corev1.Pod)\n\t\t\tp.logger.Debug(\"list and watch for pods: UPDATE \" + pod.Name)\n\t\t\tp.onAddOrUpdatePod(pod, oldPod)\n\t\t},\n\t\tDeleteFunc: func(obj interface{}) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 27,
                  "endLine": 252,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\tp.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{\n\t\tAddFunc: func(obj interface{}) {\n\t\t\tpod := obj.(*corev1.Pod)\n\t\t\tp.logger.Debug(\"list and watch for pod: ADD \" + pod.Name)\n\t\t\tp.onAddOrUpdatePod(pod, nil)\n\t\t},\n\t\tUpdateFunc: func(oldObj, newObj interface{}) {\n",
                    "rendered": {
                      "text": "\tp.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{\n\t\tAddFunc: func(obj interface{}) {\n\t\t\tpod := obj.(*corev1.Pod)\n\t\t\tp.logger.Debug(\"list and watch for pod: ADD \" + pod.Name)\n\t\t\tp.onAddOrUpdatePod(pod, nil)\n\t\t},\n\t\tUpdateFunc: func(oldObj, newObj interface{}) {\n",
                      "markdown": "`\tp.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{\n\t\tAddFunc: func(obj interface{}) {\n\t\t\tpod := obj.(*corev1.Pod)\n\t\t\tp.logger.Debug(\"list and watch for pod: ADD \" + pod.Name)\n\t\t\tp.onAddOrUpdatePod(pod, nil)\n\t\t},\n\t\tUpdateFunc: func(oldObj, newObj interface{}) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 30,
                  "endLine": 209,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\t\tp.removeHostNetworkRecords(pod)\n\t}\n\tif pod.Status.PodIP != \"\" {\n\t\tp.logger.Debug(\"deleting pod ip from cache\", zap.String(\"podNetwork\", pod.Status.PodIP))\n\t\tp.deleter.DeleteWithDelay(p.ipToPod, pod.Status.PodIP)\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tp.removeHostNetworkRecords(pod)\n\t}\n\tif pod.Status.PodIP != \"\" {\n\t\tp.logger.Debug(\"deleting pod ip from cache\", zap.String(\"podNetwork\", pod.Status.PodIP))\n\t\tp.deleter.DeleteWithDelay(p.ipToPod, pod.Status.PodIP)\n\t}\n\n",
                      "markdown": "`\t\tp.removeHostNetworkRecords(pod)\n\t}\n\tif pod.Status.PodIP != \"\" {\n\t\tp.logger.Debug(\"deleting pod ip from cache\", zap.String(\"podNetwork\", pod.Status.PodIP))\n\t\tp.deleter.DeleteWithDelay(p.ipToPod, pod.Status.PodIP)\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 31,
                  "endLine": 205,
                  "endColumn": 35,
                  "snippet": {
                    "text": "func (p *podWatcher) onDeletePod(obj interface{}) {\n\tpod := obj.(*corev1.Pod)\n\tif pod.Spec.HostNetwork && pod.Status.HostIP != \"\" {\n\t\tp.logger.Debug(\"deleting host ip from cache\", zap.String(\"hostNetwork\", pod.Status.HostIP))\n\t\tp.removeHostNetworkRecords(pod)\n\t}\n\tif pod.Status.PodIP != \"\" {\n",
                    "rendered": {
                      "text": "func (p *podWatcher) onDeletePod(obj interface{}) {\n\tpod := obj.(*corev1.Pod)\n\tif pod.Spec.HostNetwork && pod.Status.HostIP != \"\" {\n\t\tp.logger.Debug(\"deleting host ip from cache\", zap.String(\"hostNetwork\", pod.Status.HostIP))\n\t\tp.removeHostNetworkRecords(pod)\n\t}\n\tif pod.Status.PodIP != \"\" {\n",
                      "markdown": "`func (p *podWatcher) onDeletePod(obj interface{}) {\n\tpod := obj.(*corev1.Pod)\n\tif pod.Spec.HostNetwork && pod.Status.HostIP != \"\" {\n\t\tp.logger.Debug(\"deleting host ip from cache\", zap.String(\"hostNetwork\", pod.Status.HostIP))\n\t\tp.removeHostNetworkRecords(pod)\n\t}\n\tif pod.Status.PodIP != \"\" {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 31,
                  "endLine": 168,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\t}\n\tif oldPod.Status.PodIP != newPod.Status.PodIP {\n\t\tif oldPod.Status.PodIP != \"\" {\n\t\t\tp.logger.Debug(\"deleting pod ip from cache\", zap.String(\"podNetwork\", oldPod.Status.PodIP))\n\t\t\tp.deleter.DeleteWithDelay(p.ipToPod, oldPod.Status.PodIP)\n\t\t}\n\t\tif newPod.Status.PodIP != \"\" {\n",
                    "rendered": {
                      "text": "\t}\n\tif oldPod.Status.PodIP != newPod.Status.PodIP {\n\t\tif oldPod.Status.PodIP != \"\" {\n\t\t\tp.logger.Debug(\"deleting pod ip from cache\", zap.String(\"podNetwork\", oldPod.Status.PodIP))\n\t\t\tp.deleter.DeleteWithDelay(p.ipToPod, oldPod.Status.PodIP)\n\t\t}\n\t\tif newPod.Status.PodIP != \"\" {\n",
                      "markdown": "`\t}\n\tif oldPod.Status.PodIP != newPod.Status.PodIP {\n\t\tif oldPod.Status.PodIP != \"\" {\n\t\t\tp.logger.Debug(\"deleting pod ip from cache\", zap.String(\"podNetwork\", oldPod.Status.PodIP))\n\t\t\tp.deleter.DeleteWithDelay(p.ipToPod, oldPod.Status.PodIP)\n\t\t}\n\t\tif newPod.Status.PodIP != \"\" {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 32,
                  "endLine": 157,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\t// HostNetwork is an immutable field\n\tif newPod.Spec.HostNetwork && oldPod.Status.HostIP != newPod.Status.HostIP {\n\t\tif oldPod.Status.HostIP != \"\" {\n\t\t\tp.logger.Debug(\"deleting host ip from cache\", zap.String(\"hostNetwork\", oldPod.Status.HostIP))\n\t\t\tp.removeHostNetworkRecords(oldPod)\n\t\t}\n\t\tif newPod.Status.HostIP != \"\" {\n",
                    "rendered": {
                      "text": "\t// HostNetwork is an immutable field\n\tif newPod.Spec.HostNetwork && oldPod.Status.HostIP != newPod.Status.HostIP {\n\t\tif oldPod.Status.HostIP != \"\" {\n\t\t\tp.logger.Debug(\"deleting host ip from cache\", zap.String(\"hostNetwork\", oldPod.Status.HostIP))\n\t\t\tp.removeHostNetworkRecords(oldPod)\n\t\t}\n\t\tif newPod.Status.HostIP != \"\" {\n",
                      "markdown": "`\t// HostNetwork is an immutable field\n\tif newPod.Spec.HostNetwork && oldPod.Status.HostIP != newPod.Status.HostIP {\n\t\tif oldPod.Status.HostIP != \"\" {\n\t\t\tp.logger.Debug(\"deleting host ip from cache\", zap.String(\"hostNetwork\", oldPod.Status.HostIP))\n\t\t\tp.removeHostNetworkRecords(oldPod)\n\t\t}\n\t\tif newPod.Status.HostIP != \"\" {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 31,
                  "endLine": 106,
                  "endColumn": 35,
                  "snippet": {
                    "text": "eleter) DeleteWithDelay(m *sync.Map, key interface{}) {\n\tgo func() {\n\t\ttime.Sleep(td.Delay)\n\t\tm.Delete(key)\n\t}()\n}\n\nfunc (s *serviceWatcher) onAddOrUpdateService(service *corev1.Service) {\n\t// service can also have an external IP (or ingress IP) that could be accessed\n\t// this field can be either an IP address (in some edge case) or a hostname (see \"EXTERNAL-IP\" column in \"k get svc\" output)\n\t// [ec2-user@ip-172-31-11-104 one-step]$ k get svc -A\n\t// NAMESPACE           NAME                          TYPE           CLUSTER-IP       EXTERNAL-IP                                                         ",
                    "rendered": {
                      "text": "eleter) DeleteWithDelay(m *sync.Map, key interface{}) {\n\tgo func() {\n\t\ttime.Sleep(td.Delay)\n\t\tm.Delete(key)\n\t}()\n}\n\nfunc (s *serviceWatcher) onAddOrUpdateService(service *corev1.Service) {\n\t// service can also have an external IP (or ingress IP) that could be accessed\n\t// this field can be either an IP address (in some edge case) or a hostname (see \"EXTERNAL-IP\" column in \"k get svc\" output)\n\t// [ec2-user@ip-172-31-11-104 one-step]$ k get svc -A\n\t// NAMESPACE           NAME                          TYPE           CLUSTER-IP       EXTERNAL-IP                                                         ",
                      "markdown": "`eleter) DeleteWithDelay(m *sync.Map, key interface{}) {\n\tgo func() {\n\t\ttime.Sleep(td.Delay)\n\t\tm.Delete(key)\n\t}()\n}\n\nfunc (s *serviceWatcher) onAddOrUpdateService(service *corev1.Service) {\n\t// service can also have an external IP (or ingress IP) that could be accessed\n\t// this field can be either an IP address (in some edge case) or a hostname (see \"EXTERNAL-IP\" column in \"k get svc\" output)\n\t// [ec2-user@ip-172-31-11-104 one-step]$ k get svc -A\n\t// NAMESPACE           NAME                          TYPE           CLUSTER-IP       EXTERNAL-IP                                                         `"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 37,
                  "endLine": 105,
                  "endColumn": 41,
                  "snippet": {
                    "text": "}\n\nfunc (s *serviceWatcher) onAddOrUpdateService(service *corev1.Service) {\n\t// service can also have an external IP (or ingress IP) that could be accessed\n\t// this field can be either an IP address (in some edge case) or a hostname (see \"EXTERNAL-IP\" column in \"k get svc\" output)\n\t// [ec2-user@ip-172-31-11-104 one-step]$ k get svc -A\n\t// NAMESPACE           NAME                          TYPE           CLUSTER-IP       EXTERNAL-IP                                                              PORT(S)                                     AGE\n",
                    "rendered": {
                      "text": "}\n\nfunc (s *serviceWatcher) onAddOrUpdateService(service *corev1.Service) {\n\t// service can also have an external IP (or ingress IP) that could be accessed\n\t// this field can be either an IP address (in some edge case) or a hostname (see \"EXTERNAL-IP\" column in \"k get svc\" output)\n\t// [ec2-user@ip-172-31-11-104 one-step]$ k get svc -A\n\t// NAMESPACE           NAME                          TYPE           CLUSTER-IP       EXTERNAL-IP                                                              PORT(S)                                     AGE\n",
                      "markdown": "`}\n\nfunc (s *serviceWatcher) onAddOrUpdateService(service *corev1.Service) {\n\t// service can also have an external IP (or ingress IP) that could be accessed\n\t// this field can be either an IP address (in some edge case) or a hostname (see \"EXTERNAL-IP\" column in \"k get svc\" output)\n\t// [ec2-user@ip-172-31-11-104 one-step]$ k get svc -A\n\t// NAMESPACE           NAME                          TYPE           CLUSTER-IP       EXTERNAL-IP                                                              PORT(S)                                     AGE\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 3,
                  "endLine": 105,
                  "endColumn": 12,
                  "snippet": {
                    "text": "}\n\nfunc (s *serviceWatcher) onAddOrUpdateService(service *corev1.Service) {\n\t// service can also have an external IP (or ingress IP) that could be accessed\n\t// this field can be either an IP address (in some edge case) or a hostname (see \"EXTERNAL-IP\" column in \"k get svc\" output)\n\t// [ec2-user@ip-172-31-11-104 one-step]$ k get svc -A\n\t// NAMESPACE           NAME                          TYPE           CLUSTER-IP       EXTERNAL-IP                                                              PORT(S)                                     AGE\n",
                    "rendered": {
                      "text": "}\n\nfunc (s *serviceWatcher) onAddOrUpdateService(service *corev1.Service) {\n\t// service can also have an external IP (or ingress IP) that could be accessed\n\t// this field can be either an IP address (in some edge case) or a hostname (see \"EXTERNAL-IP\" column in \"k get svc\" output)\n\t// [ec2-user@ip-172-31-11-104 one-step]$ k get svc -A\n\t// NAMESPACE           NAME                          TYPE           CLUSTER-IP       EXTERNAL-IP                                                              PORT(S)                                     AGE\n",
                      "markdown": "`}\n\nfunc (s *serviceWatcher) onAddOrUpdateService(service *corev1.Service) {\n\t// service can also have an external IP (or ingress IP) that could be accessed\n\t// this field can be either an IP address (in some edge case) or a hostname (see \"EXTERNAL-IP\" column in \"k get svc\" output)\n\t// [ec2-user@ip-172-31-11-104 one-step]$ k get svc -A\n\t// NAMESPACE           NAME                          TYPE           CLUSTER-IP       EXTERNAL-IP                                                              PORT(S)                                     AGE\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 38,
                  "endLine": 35,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\t// This posed a problem because:\n\t//   1. Metric data is aggregated and emitted every 1 minute.\n\t//   2. If this aggregated metric data, which contains the IP of the now-destroyed pod, arrives\n\t//      at the EKS resolver after the IP records have already been deleted, the metric can't be processed correctly.\n\t//\n\t// To mitigate this issue, we've introduced a 2-minute deletion delay. This ensures that any\n\t// metric data that arrives within those 2 minutes, containing the old IP, will still get mapped correctly to a service.\n",
                    "rendered": {
                      "text": "\t// This posed a problem because:\n\t//   1. Metric data is aggregated and emitted every 1 minute.\n\t//   2. If this aggregated metric data, which contains the IP of the now-destroyed pod, arrives\n\t//      at the EKS resolver after the IP records have already been deleted, the metric can't be processed correctly.\n\t//\n\t// To mitigate this issue, we've introduced a 2-minute deletion delay. This ensures that any\n\t// metric data that arrives within those 2 minutes, containing the old IP, will still get mapped correctly to a service.\n",
                      "markdown": "`\t// This posed a problem because:\n\t//   1. Metric data is aggregated and emitted every 1 minute.\n\t//   2. If this aggregated metric data, which contains the IP of the now-destroyed pod, arrives\n\t//      at the EKS resolver after the IP records have already been deleted, the metric can't be processed correctly.\n\t//\n\t// To mitigate this issue, we've introduced a 2-minute deletion delay. This ensures that any\n\t// metric data that arrives within those 2 minutes, containing the old IP, will still get mapped correctly to a service.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 59,
                  "endLine": 34,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\t// Previously, EKS resolver would instantly remove the IP to Service mapping when a pod was destroyed.\n\t// This posed a problem because:\n\t//   1. Metric data is aggregated and emitted every 1 minute.\n\t//   2. If this aggregated metric data, which contains the IP of the now-destroyed pod, arrives\n\t//      at the EKS resolver after the IP records have already been deleted, the metric can't be processed correctly.\n\t//\n\t// To mitigate this issue, we've introduced a 2-minute deletion delay. This ensures that any\n",
                    "rendered": {
                      "text": "\t// Previously, EKS resolver would instantly remove the IP to Service mapping when a pod was destroyed.\n\t// This posed a problem because:\n\t//   1. Metric data is aggregated and emitted every 1 minute.\n\t//   2. If this aggregated metric data, which contains the IP of the now-destroyed pod, arrives\n\t//      at the EKS resolver after the IP records have already been deleted, the metric can't be processed correctly.\n\t//\n\t// To mitigate this issue, we've introduced a 2-minute deletion delay. This ensures that any\n",
                      "markdown": "`\t// Previously, EKS resolver would instantly remove the IP to Service mapping when a pod was destroyed.\n\t// This posed a problem because:\n\t//   1. Metric data is aggregated and emitted every 1 minute.\n\t//   2. If this aggregated metric data, which contains the IP of the now-destroyed pod, arrives\n\t//      at the EKS resolver after the IP records have already been deleted, the metric can't be processed correctly.\n\t//\n\t// To mitigate this issue, we've introduced a 2-minute deletion delay. This ensures that any\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 61,
                  "endLine": 31,
                  "endColumn": 70,
                  "snippet": {
                    "text": "\nconst (\n\t// Deletion delay adjustment:\n\t// Previously, EKS resolver would instantly remove the IP to Service mapping when a pod was destroyed.\n\t// This posed a problem because:\n\t//   1. Metric data is aggregated and emitted every 1 minute.\n\t//   2. If this aggregated metric data, which contains the IP of the now-destroyed pod, arrives\n",
                    "rendered": {
                      "text": "\nconst (\n\t// Deletion delay adjustment:\n\t// Previously, EKS resolver would instantly remove the IP to Service mapping when a pod was destroyed.\n\t// This posed a problem because:\n\t//   1. Metric data is aggregated and emitted every 1 minute.\n\t//   2. If this aggregated metric data, which contains the IP of the now-destroyed pod, arrives\n",
                      "markdown": "`\nconst (\n\t// Deletion delay adjustment:\n\t// Previously, EKS resolver would instantly remove the IP to Service mapping when a pod was destroyed.\n\t// This posed a problem because:\n\t//   1. Metric data is aggregated and emitted every 1 minute.\n\t//   2. If this aggregated metric data, which contains the IP of the now-destroyed pod, arrives\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/kubernetes.go"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 55,
                  "endLine": 31,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\nconst (\n\t// Deletion delay adjustment:\n\t// Previously, EKS resolver would instantly remove the IP to Service mapping when a pod was destroyed.\n\t// This posed a problem because:\n\t//   1. Metric data is aggregated and emitted every 1 minute.\n\t//   2. If this aggregated metric data, which contains the IP of the now-destroyed pod, arrives\n",
                    "rendered": {
                      "text": "\nconst (\n\t// Deletion delay adjustment:\n\t// Previously, EKS resolver would instantly remove the IP to Service mapping when a pod was destroyed.\n\t// This posed a problem because:\n\t//   1. Metric data is aggregated and emitted every 1 minute.\n\t//   2. If this aggregated metric data, which contains the IP of the now-destroyed pod, arrives\n",
                      "markdown": "`\nconst (\n\t// Deletion delay adjustment:\n\t// Previously, EKS resolver would instantly remove the IP to Service mapping when a pod was destroyed.\n\t// This posed a problem because:\n\t//   1. Metric data is aggregated and emitted every 1 minute.\n\t//   2. If this aggregated metric data, which contains the IP of the now-destroyed pod, arrives\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/attributesresolver.go"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 41,
                  "endLine": 122,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\t\treturn val.Str()\n\t}\n\tif defaultEnvPrefix == appsignalsconfig.PlatformEC2 {\n\t\tif asgAttr, found := resourceAttributes.Get(attr.ResourceDetectionASG); found {\n\t\t\treturn generateLocalEnvironment(defaultEnvPrefix, asgAttr.Str())\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\t\treturn val.Str()\n\t}\n\tif defaultEnvPrefix == appsignalsconfig.PlatformEC2 {\n\t\tif asgAttr, found := resourceAttributes.Get(attr.ResourceDetectionASG); found {\n\t\t\treturn generateLocalEnvironment(defaultEnvPrefix, asgAttr.Str())\n\t\t}\n\t}\n",
                      "markdown": "`\t\treturn val.Str()\n\t}\n\tif defaultEnvPrefix == appsignalsconfig.PlatformEC2 {\n\t\tif asgAttr, found := resourceAttributes.Get(attr.ResourceDetectionASG); found {\n\t\t\treturn generateLocalEnvironment(defaultEnvPrefix, asgAttr.Str())\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/attributesresolver.go"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 36,
                  "endLine": 118,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\tif val, ok := attributes.Get(attr.AWSLocalEnvironment); ok {\n\t\treturn val.Str()\n\t}\n\tif val, found := resourceAttributes.Get(attr.AWSHostedInEnvironment); found {\n\t\treturn val.Str()\n\t}\n\tif defaultEnvPrefix == appsignalsconfig.PlatformEC2 {\n",
                    "rendered": {
                      "text": "\tif val, ok := attributes.Get(attr.AWSLocalEnvironment); ok {\n\t\treturn val.Str()\n\t}\n\tif val, found := resourceAttributes.Get(attr.AWSHostedInEnvironment); found {\n\t\treturn val.Str()\n\t}\n\tif defaultEnvPrefix == appsignalsconfig.PlatformEC2 {\n",
                      "markdown": "`\tif val, ok := attributes.Get(attr.AWSLocalEnvironment); ok {\n\t\treturn val.Str()\n\t}\n\tif val, found := resourceAttributes.Get(attr.AWSHostedInEnvironment); found {\n\t\treturn val.Str()\n\t}\n\tif defaultEnvPrefix == appsignalsconfig.PlatformEC2 {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/attributesresolver.go"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 25,
                  "endLine": 115,
                  "endColumn": 30,
                  "snippet": {
                    "text": "}\n\nfunc getLocalEnvironment(attributes, resourceAttributes pcommon.Map, defaultEnvPrefix string) string {\n\tif val, ok := attributes.Get(attr.AWSLocalEnvironment); ok {\n\t\treturn val.Str()\n\t}\n\tif val, found := resourceAttributes.Get(attr.AWSHostedInEnvironment); found {\n",
                    "rendered": {
                      "text": "}\n\nfunc getLocalEnvironment(attributes, resourceAttributes pcommon.Map, defaultEnvPrefix string) string {\n\tif val, ok := attributes.Get(attr.AWSLocalEnvironment); ok {\n\t\treturn val.Str()\n\t}\n\tif val, found := resourceAttributes.Get(attr.AWSHostedInEnvironment); found {\n",
                      "markdown": "`}\n\nfunc getLocalEnvironment(attributes, resourceAttributes pcommon.Map, defaultEnvPrefix string) string {\n\tif val, ok := attributes.Get(attr.AWSLocalEnvironment); ok {\n\t\treturn val.Str()\n\t}\n\tif val, found := resourceAttributes.Get(attr.AWSHostedInEnvironment); found {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/attributesresolver.go"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 34,
                  "endLine": 105,
                  "endColumn": 39,
                  "snippet": {
                    "text": "}\nfunc (h *resourceAttributesResolver) Process(attributes, resourceAttributes pcommon.Map) error {\n\tfor attrKey, mappingKey := range h.attributeMap {\n\t\tif val, ok := resourceAttributes.Get(attrKey); ok {\n\t\t\tattributes.PutStr(mappingKey, val.Str())\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "}\nfunc (h *resourceAttributesResolver) Process(attributes, resourceAttributes pcommon.Map) error {\n\tfor attrKey, mappingKey := range h.attributeMap {\n\t\tif val, ok := resourceAttributes.Get(attrKey); ok {\n\t\t\tattributes.PutStr(mappingKey, val.Str())\n\t\t}\n\t}\n",
                      "markdown": "`}\nfunc (h *resourceAttributesResolver) Process(attributes, resourceAttributes pcommon.Map) error {\n\tfor attrKey, mappingKey := range h.attributeMap {\n\t\tif val, ok := resourceAttributes.Get(attrKey); ok {\n\t\t\tattributes.PutStr(mappingKey, val.Str())\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/plugins/processors/awsapplicationsignals/internal/resolver/attributesresolver.go"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 32,
                  "endLine": 109,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t\tattributes.PutStr(mappingKey, val.Str())\n\t\t}\n\t}\n\tattributes.PutStr(attr.AWSLocalEnvironment, getLocalEnvironment(attributes, resourceAttributes, h.defaultEnvPrefix))\n\tattributes.PutStr(common.AttributePlatformType, h.platformType)\n\treturn nil\n}\n",
                    "rendered": {
                      "text": "\t\t\tattributes.PutStr(mappingKey, val.Str())\n\t\t}\n\t}\n\tattributes.PutStr(attr.AWSLocalEnvironment, getLocalEnvironment(attributes, resourceAttributes, h.defaultEnvPrefix))\n\tattributes.PutStr(common.AttributePlatformType, h.platformType)\n\treturn nil\n}\n",
                      "markdown": "`\t\t\tattributes.PutStr(mappingKey, val.Str())\n\t\t}\n\t}\n\tattributes.PutStr(attr.AWSLocalEnvironment, getLocalEnvironment(attributes, resourceAttributes, h.defaultEnvPrefix))\n\tattributes.PutStr(common.AttributePlatformType, h.platformType)\n\treturn nil\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/config/envconst.go"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 27,
                  "endLine": 9,
                  "endColumn": 43,
                  "snippet": {
                    "text": "import \"github.com/aws/amazon-cloudwatch-agent/cfg/envconfig\"\n\nconst (\n\tRUN_IN_CONTAINER        = envconfig.RunInContainer\n\tRUN_IN_CONTAINER_TRUE   = envconfig.TrueValue\n\tRUN_IN_AWS              = envconfig.RunInAWS\n\tRUN_IN_AWS_TRUE         = envconfig.TrueValue\n",
                    "rendered": {
                      "text": "import \"github.com/aws/amazon-cloudwatch-agent/cfg/envconfig\"\n\nconst (\n\tRUN_IN_CONTAINER        = envconfig.RunInContainer\n\tRUN_IN_CONTAINER_TRUE   = envconfig.TrueValue\n\tRUN_IN_AWS              = envconfig.RunInAWS\n\tRUN_IN_AWS_TRUE         = envconfig.TrueValue\n",
                      "markdown": "`import \"github.com/aws/amazon-cloudwatch-agent/cfg/envconfig\"\n\nconst (\n\tRUN_IN_CONTAINER        = envconfig.RunInContainer\n\tRUN_IN_CONTAINER_TRUE   = envconfig.TrueValue\n\tRUN_IN_AWS              = envconfig.RunInAWS\n\tRUN_IN_AWS_TRUE         = envconfig.TrueValue\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/toenvconfig/toEnvConfig.go"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n\tsslConfig := util.GetSSL(context.CurrentContext().SSL())\n\tif len(sslConfig) > 0 {\n\t\tenvVars[envconfig.AWS_CA_BUNDLE] = sslConfig[commonconfig.CABundlePath]\n\t}\n\n\tbytes, err := json.MarshalIndent(envVars, \"\", \"\\t\")\n",
                    "rendered": {
                      "text": "\n\tsslConfig := util.GetSSL(context.CurrentContext().SSL())\n\tif len(sslConfig) > 0 {\n\t\tenvVars[envconfig.AWS_CA_BUNDLE] = sslConfig[commonconfig.CABundlePath]\n\t}\n\n\tbytes, err := json.MarshalIndent(envVars, \"\", \"\\t\")\n",
                      "markdown": "`\n\tsslConfig := util.GetSSL(context.CurrentContext().SSL())\n\tif len(sslConfig) > 0 {\n\t\tenvVars[envconfig.AWS_CA_BUNDLE] = sslConfig[commonconfig.CABundlePath]\n\t}\n\n\tbytes, err := json.MarshalIndent(envVars, \"\", \"\\t\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/toenvconfig/toEnvConfig.go"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 2,
                  "endLine": 58,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n\tproxy = util.GetNoProxy(context.CurrentContext().Proxy())\n\tif len(proxy) > 0 {\n\t\tenvVars[envconfig.NO_PROXY] = proxy[commonconfig.NoProxy]\n\t}\n\n\tsslConfig := util.GetSSL(context.CurrentContext().SSL())\n",
                    "rendered": {
                      "text": "\n\tproxy = util.GetNoProxy(context.CurrentContext().Proxy())\n\tif len(proxy) > 0 {\n\t\tenvVars[envconfig.NO_PROXY] = proxy[commonconfig.NoProxy]\n\t}\n\n\tsslConfig := util.GetSSL(context.CurrentContext().SSL())\n",
                      "markdown": "`\n\tproxy = util.GetNoProxy(context.CurrentContext().Proxy())\n\tif len(proxy) > 0 {\n\t\tenvVars[envconfig.NO_PROXY] = proxy[commonconfig.NoProxy]\n\t}\n\n\tsslConfig := util.GetSSL(context.CurrentContext().SSL())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/toenvconfig/toEnvConfig.go"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 2,
                  "endLine": 53,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n\tproxy = util.GetHttpsProxy(context.CurrentContext().Proxy())\n\tif len(proxy) > 0 {\n\t\tenvVars[envconfig.HTTPS_PROXY] = proxy[commonconfig.HttpsProxy]\n\t}\n\n\tproxy = util.GetNoProxy(context.CurrentContext().Proxy())\n",
                    "rendered": {
                      "text": "\n\tproxy = util.GetHttpsProxy(context.CurrentContext().Proxy())\n\tif len(proxy) > 0 {\n\t\tenvVars[envconfig.HTTPS_PROXY] = proxy[commonconfig.HttpsProxy]\n\t}\n\n\tproxy = util.GetNoProxy(context.CurrentContext().Proxy())\n",
                      "markdown": "`\n\tproxy = util.GetHttpsProxy(context.CurrentContext().Proxy())\n\tif len(proxy) > 0 {\n\t\tenvVars[envconfig.HTTPS_PROXY] = proxy[commonconfig.HttpsProxy]\n\t}\n\n\tproxy = util.GetNoProxy(context.CurrentContext().Proxy())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/toenvconfig/toEnvConfig.go"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 2,
                  "endLine": 48,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n\tproxy := util.GetHttpProxy(context.CurrentContext().Proxy())\n\tif len(proxy) > 0 {\n\t\tenvVars[envconfig.HTTP_PROXY] = proxy[commonconfig.HttpProxy]\n\t}\n\n\tproxy = util.GetHttpsProxy(context.CurrentContext().Proxy())\n",
                    "rendered": {
                      "text": "\n\tproxy := util.GetHttpProxy(context.CurrentContext().Proxy())\n\tif len(proxy) > 0 {\n\t\tenvVars[envconfig.HTTP_PROXY] = proxy[commonconfig.HttpProxy]\n\t}\n\n\tproxy = util.GetHttpsProxy(context.CurrentContext().Proxy())\n",
                      "markdown": "`\n\tproxy := util.GetHttpProxy(context.CurrentContext().Proxy())\n\tif len(proxy) > 0 {\n\t\tenvVars[envconfig.HTTP_PROXY] = proxy[commonconfig.HttpProxy]\n\t}\n\n\tproxy = util.GetHttpsProxy(context.CurrentContext().Proxy())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/toenvconfig/toEnvConfig.go"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 7,
                  "endLine": 24,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tusageDataKey      = \"usage_data\"\n)\n\nfunc ToEnvConfig(jsonConfigValue map[string]interface{}) []byte {\n\tenvVars := make(map[string]string)\n\n\tif agentMap, ok := jsonConfigValue[agent.SectionKey].(map[string]interface{}); ok {\n",
                    "rendered": {
                      "text": "\tusageDataKey      = \"usage_data\"\n)\n\nfunc ToEnvConfig(jsonConfigValue map[string]interface{}) []byte {\n\tenvVars := make(map[string]string)\n\n\tif agentMap, ok := jsonConfigValue[agent.SectionKey].(map[string]interface{}); ok {\n",
                      "markdown": "`\tusageDataKey      = \"usage_data\"\n)\n\nfunc ToEnvConfig(jsonConfigValue map[string]interface{}) []byte {\n\tenvVars := make(map[string]string)\n\n\tif agentMap, ok := jsonConfigValue[agent.SectionKey].(map[string]interface{}); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/toenvconfig/toEnvConfig.go"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 39,
                  "endLine": 40,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t\tenvVars[envconfig.AWS_SDK_LOG_LEVEL] = awsSdkLogLevel\n\t\t}\n\n\t\t// Set CWAGENT_USAGE_DATA to FALSE in env config if present and false in agent section\n\t\tif usageData, ok := agentMap[usageDataKey].(bool); ok && !usageData {\n\t\t\tenvVars[envconfig.CWAGENT_USAGE_DATA] = \"FALSE\"\n\t\t}\n",
                    "rendered": {
                      "text": "\t\t\tenvVars[envconfig.AWS_SDK_LOG_LEVEL] = awsSdkLogLevel\n\t\t}\n\n\t\t// Set CWAGENT_USAGE_DATA to FALSE in env config if present and false in agent section\n\t\tif usageData, ok := agentMap[usageDataKey].(bool); ok && !usageData {\n\t\t\tenvVars[envconfig.CWAGENT_USAGE_DATA] = \"FALSE\"\n\t\t}\n",
                      "markdown": "`\t\t\tenvVars[envconfig.AWS_SDK_LOG_LEVEL] = awsSdkLogLevel\n\t\t}\n\n\t\t// Set CWAGENT_USAGE_DATA to FALSE in env config if present and false in agent section\n\t\tif usageData, ok := agentMap[usageDataKey].(bool); ok && !usageData {\n\t\t\tenvVars[envconfig.CWAGENT_USAGE_DATA] = \"FALSE\"\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/toenvconfig/toEnvConfig.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 38,
                  "endLine": 32,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\t\tif userAgent, ok := agentMap[userAgentKey].(string); ok {\n\t\t\tenvVars[envconfig.CWAGENT_USER_AGENT] = userAgent\n\t\t}\n\t\t// Set CWAGENT_LOG_LEVEL to DEBUG in env config if present and true in agent section\n\t\tif isDebug, ok := agentMap[debugKey].(bool); ok && isDebug {\n\t\t\tenvVars[envconfig.CWAGENT_LOG_LEVEL] = \"DEBUG\"\n\t\t}\n",
                    "rendered": {
                      "text": "\t\tif userAgent, ok := agentMap[userAgentKey].(string); ok {\n\t\t\tenvVars[envconfig.CWAGENT_USER_AGENT] = userAgent\n\t\t}\n\t\t// Set CWAGENT_LOG_LEVEL to DEBUG in env config if present and true in agent section\n\t\tif isDebug, ok := agentMap[debugKey].(bool); ok && isDebug {\n\t\t\tenvVars[envconfig.CWAGENT_LOG_LEVEL] = \"DEBUG\"\n\t\t}\n",
                      "markdown": "`\t\tif userAgent, ok := agentMap[userAgentKey].(string); ok {\n\t\t\tenvVars[envconfig.CWAGENT_USER_AGENT] = userAgent\n\t\t}\n\t\t// Set CWAGENT_LOG_LEVEL to DEBUG in env config if present and true in agent section\n\t\tif isDebug, ok := agentMap[debugKey].(bool); ok && isDebug {\n\t\t\tenvVars[envconfig.CWAGENT_LOG_LEVEL] = \"DEBUG\"\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/tocwconfig/toenvconfig/toEnvConfig.go"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 30,
                  "endLine": 28,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tenvVars := make(map[string]string)\n\n\tif agentMap, ok := jsonConfigValue[agent.SectionKey].(map[string]interface{}); ok {\n\t\t// Set CWAGENT_USER_AGENT to env config if specified by the json config in agent section\n\t\tif userAgent, ok := agentMap[userAgentKey].(string); ok {\n\t\t\tenvVars[envconfig.CWAGENT_USER_AGENT] = userAgent\n\t\t}\n",
                    "rendered": {
                      "text": "\tenvVars := make(map[string]string)\n\n\tif agentMap, ok := jsonConfigValue[agent.SectionKey].(map[string]interface{}); ok {\n\t\t// Set CWAGENT_USER_AGENT to env config if specified by the json config in agent section\n\t\tif userAgent, ok := agentMap[userAgentKey].(string); ok {\n\t\t\tenvVars[envconfig.CWAGENT_USER_AGENT] = userAgent\n\t\t}\n",
                      "markdown": "`\tenvVars := make(map[string]string)\n\n\tif agentMap, ok := jsonConfigValue[agent.SectionKey].(map[string]interface{}); ok {\n\t\t// Set CWAGENT_USER_AGENT to env config if specified by the json config in agent section\n\t\tif userAgent, ok := agentMap[userAgentKey].(string); ok {\n\t\t\tenvVars[envconfig.CWAGENT_USER_AGENT] = userAgent\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/exporter/awsemf/prometheus.go"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 27,
                  "endLine": 104,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\tif !conf.IsSet(metricDeclarationKey) {\n\t\treturn nil\n\t}\n\tmetricDeclarations := conf.Get(metricDeclarationKey)\n\tvar declarations []map[string]interface{}\n\tfor _, md := range metricDeclarations.([]interface{}) {\n\t\tmetricDeclaration := md.(map[string]interface{})\n",
                    "rendered": {
                      "text": "\tif !conf.IsSet(metricDeclarationKey) {\n\t\treturn nil\n\t}\n\tmetricDeclarations := conf.Get(metricDeclarationKey)\n\tvar declarations []map[string]interface{}\n\tfor _, md := range metricDeclarations.([]interface{}) {\n\t\tmetricDeclaration := md.(map[string]interface{})\n",
                      "markdown": "`\tif !conf.IsSet(metricDeclarationKey) {\n\t\treturn nil\n\t}\n\tmetricDeclarations := conf.Get(metricDeclarationKey)\n\tvar declarations []map[string]interface{}\n\tfor _, md := range metricDeclarations.([]interface{}) {\n\t\tmetricDeclaration := md.(map[string]interface{})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/exporter/awsemf/prometheus.go"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 12,
                  "endLine": 80,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t\treturn nil\n\t}\n\n\tmus := conf.Get(metricUnitKey)\n\tmetricUnits := mus.(map[string]interface{})\n\tvar metricDescriptors []map[string]string\n\tfor mName, unit := range metricUnits {\n",
                    "rendered": {
                      "text": "\t\treturn nil\n\t}\n\n\tmus := conf.Get(metricUnitKey)\n\tmetricUnits := mus.(map[string]interface{})\n\tvar metricDescriptors []map[string]string\n\tfor mName, unit := range metricUnits {\n",
                      "markdown": "`\t\treturn nil\n\t}\n\n\tmus := conf.Get(metricUnitKey)\n\tmetricUnits := mus.(map[string]interface{})\n\tvar metricDescriptors []map[string]string\n\tfor mName, unit := range metricUnits {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/exporter/awsemf/translator_test.go"
                },
                "region": {
                  "startLine": 744,
                  "startColumn": 2,
                  "endLine": 744,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\t\t\t\t\"local_mode\": false,\n\t\t\t},\n\t\t},\n\t\t\"GenerateAwsEmfExporterConfigPrometheusNoEmfProcessor\": {\n\t\t\tinput: map[string]any{\n\t\t\t\t\"logs\": map[string]any{\n\t\t\t\t\t\"metrics_collected\": map[string]any{\n",
                    "rendered": {
                      "text": "\t\t\t\t\"local_mode\": false,\n\t\t\t},\n\t\t},\n\t\t\"GenerateAwsEmfExporterConfigPrometheusNoEmfProcessor\": {\n\t\t\tinput: map[string]any{\n\t\t\t\t\"logs\": map[string]any{\n\t\t\t\t\t\"metrics_collected\": map[string]any{\n",
                      "markdown": "`\t\t\t\t\"local_mode\": false,\n\t\t\t},\n\t\t},\n\t\t\"GenerateAwsEmfExporterConfigPrometheusNoEmfProcessor\": {\n\t\t\tinput: map[string]any{\n\t\t\t\t\"logs\": map[string]any{\n\t\t\t\t\t\"metrics_collected\": map[string]any{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/exporter/awsemf/translator_test.go"
                },
                "region": {
                  "startLine": 701,
                  "startColumn": 2,
                  "endLine": 701,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\t\t\t\t\"local_mode\":         false,\n\t\t\t},\n\t\t},\n\t\t\"GenerateAwsEmfExporterConfigPrometheusNoDeclarations\": {\n\t\t\tinput: map[string]any{\n\t\t\t\t\"logs\": map[string]any{\n\t\t\t\t\t\"metrics_collected\": map[string]any{\n",
                    "rendered": {
                      "text": "\t\t\t\t\"local_mode\":         false,\n\t\t\t},\n\t\t},\n\t\t\"GenerateAwsEmfExporterConfigPrometheusNoDeclarations\": {\n\t\t\tinput: map[string]any{\n\t\t\t\t\"logs\": map[string]any{\n\t\t\t\t\t\"metrics_collected\": map[string]any{\n",
                      "markdown": "`\t\t\t\t\"local_mode\":         false,\n\t\t\t},\n\t\t},\n\t\t\"GenerateAwsEmfExporterConfigPrometheusNoDeclarations\": {\n\t\t\tinput: map[string]any{\n\t\t\t\t\"logs\": map[string]any{\n\t\t\t\t\t\"metrics_collected\": map[string]any{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/exporter/awsemf/translator_test.go"
                },
                "region": {
                  "startLine": 667,
                  "startColumn": 2,
                  "endLine": 667,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\t\t\t\t\"local_mode\": false,\n\t\t\t},\n\t\t},\n\t\t\"GenerateAwsEmfExporterConfigPrometheusDisableMetricExtraction\": {\n\t\t\tinput: map[string]any{\n\t\t\t\t\"logs\": map[string]any{\n\t\t\t\t\t\"metrics_collected\": map[string]any{\n",
                    "rendered": {
                      "text": "\t\t\t\t\"local_mode\": false,\n\t\t\t},\n\t\t},\n\t\t\"GenerateAwsEmfExporterConfigPrometheusDisableMetricExtraction\": {\n\t\t\tinput: map[string]any{\n\t\t\t\t\"logs\": map[string]any{\n\t\t\t\t\t\"metrics_collected\": map[string]any{\n",
                      "markdown": "`\t\t\t\t\"local_mode\": false,\n\t\t\t},\n\t\t},\n\t\t\"GenerateAwsEmfExporterConfigPrometheusDisableMetricExtraction\": {\n\t\t\tinput: map[string]any{\n\t\t\t\t\"logs\": map[string]any{\n\t\t\t\t\t\"metrics_collected\": map[string]any{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/exporter/awsemf/translator_test.go"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 2,
                  "endLine": 258,
                  "endColumn": 78,
                  "snippet": {
                    "text": "\t\t\t\t\"local_mode\":         false,\n\t\t\t},\n\t\t},\n\t\t\"GenerateAwsEmfExporterConfigKubernetesWithEnableFullPodAndContainerMetrics\": {\n\t\t\tinput: map[string]any{\n\t\t\t\t\"logs\": map[string]any{\n\t\t\t\t\t\"metrics_collected\": map[string]any{\n",
                    "rendered": {
                      "text": "\t\t\t\t\"local_mode\":         false,\n\t\t\t},\n\t\t},\n\t\t\"GenerateAwsEmfExporterConfigKubernetesWithEnableFullPodAndContainerMetrics\": {\n\t\t\tinput: map[string]any{\n\t\t\t\t\"logs\": map[string]any{\n\t\t\t\t\t\"metrics_collected\": map[string]any{\n",
                      "markdown": "`\t\t\t\t\"local_mode\":         false,\n\t\t\t},\n\t\t},\n\t\t\"GenerateAwsEmfExporterConfigKubernetesWithEnableFullPodAndContainerMetrics\": {\n\t\t\tinput: map[string]any{\n\t\t\t\t\"logs\": map[string]any{\n\t\t\t\t\t\"metrics_collected\": map[string]any{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/exporter/awsemf/translator_test.go"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 2,
                  "endLine": 189,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\t\t\t\t\"local_mode\":         false,\n\t\t\t},\n\t\t},\n\t\t\"GenerateAwsEmfExporterConfigKubernetesDisableMetricExtraction\": {\n\t\t\tinput: map[string]any{\n\t\t\t\t\"logs\": map[string]any{\n\t\t\t\t\t\"metrics_collected\": map[string]any{\n",
                    "rendered": {
                      "text": "\t\t\t\t\"local_mode\":         false,\n\t\t\t},\n\t\t},\n\t\t\"GenerateAwsEmfExporterConfigKubernetesDisableMetricExtraction\": {\n\t\t\tinput: map[string]any{\n\t\t\t\t\"logs\": map[string]any{\n\t\t\t\t\t\"metrics_collected\": map[string]any{\n",
                      "markdown": "`\t\t\t\t\"local_mode\":         false,\n\t\t\t},\n\t\t},\n\t\t\"GenerateAwsEmfExporterConfigKubernetesDisableMetricExtraction\": {\n\t\t\tinput: map[string]any{\n\t\t\t\t\"logs\": map[string]any{\n\t\t\t\t\t\"metrics_collected\": map[string]any{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/exporter/awsemf/translator_test.go"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 2,
                  "endLine": 80,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\t\t\t\t\"local_mode\":         false,\n\t\t\t},\n\t\t},\n\t\t\"GenerateAwsEmfExporterConfigEcsDisableMetricExtraction\": {\n\t\t\tinput: map[string]any{\n\t\t\t\t\"logs\": map[string]any{\n\t\t\t\t\t\"metrics_collected\": map[string]any{\n",
                    "rendered": {
                      "text": "\t\t\t\t\"local_mode\":         false,\n\t\t\t},\n\t\t},\n\t\t\"GenerateAwsEmfExporterConfigEcsDisableMetricExtraction\": {\n\t\t\tinput: map[string]any{\n\t\t\t\t\"logs\": map[string]any{\n\t\t\t\t\t\"metrics_collected\": map[string]any{\n",
                      "markdown": "`\t\t\t\t\"local_mode\":         false,\n\t\t\t},\n\t\t},\n\t\t\"GenerateAwsEmfExporterConfigEcsDisableMetricExtraction\": {\n\t\t\tinput: map[string]any{\n\t\t\t\t\"logs\": map[string]any{\n\t\t\t\t\t\"metrics_collected\": map[string]any{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/exporter/awsemf/translator_test.go"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\ttt := NewTranslator()\n\trequire.EqualValues(t, \"awsemf\", tt.ID().String())\n\ttestCases := map[string]struct {\n\t\tenv     map[string]string\n\t\tinput   map[string]any\n\t\twant    map[string]any // Can't construct & use awsemfexporter.Config as it uses internal only types\n\t\twantErr error\n",
                    "rendered": {
                      "text": "\ttt := NewTranslator()\n\trequire.EqualValues(t, \"awsemf\", tt.ID().String())\n\ttestCases := map[string]struct {\n\t\tenv     map[string]string\n\t\tinput   map[string]any\n\t\twant    map[string]any // Can't construct & use awsemfexporter.Config as it uses internal only types\n\t\twantErr error\n",
                      "markdown": "`\ttt := NewTranslator()\n\trequire.EqualValues(t, \"awsemf\", tt.ID().String())\n\ttestCases := map[string]struct {\n\t\tenv     map[string]string\n\t\tinput   map[string]any\n\t\twant    map[string]any // Can't construct & use awsemfexporter.Config as it uses internal only types\n\t\twantErr error\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/exporter/otel_aws_cloudwatch_logs/translator.go"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 31,
                  "endLine": 114,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\t\tcfg.LogStreamName = fmt.Sprintf(\"%v\", conf.Get(streamNameKey))\n\t} else {\n\t\trule := logs.LogStreamName{}\n\t\t_, val := rule.ApplyRule(conf.Get(common.LogsKey))\n\t\tif logStreamName, ok := val.(map[string]interface{})[common.LogStreamName]; !ok {\n\t\t\treturn &common.MissingKeyError{ID: t.ID(), JsonKey: streamNameKey}\n\t\t} else {\n",
                    "rendered": {
                      "text": "\t\tcfg.LogStreamName = fmt.Sprintf(\"%v\", conf.Get(streamNameKey))\n\t} else {\n\t\trule := logs.LogStreamName{}\n\t\t_, val := rule.ApplyRule(conf.Get(common.LogsKey))\n\t\tif logStreamName, ok := val.(map[string]interface{})[common.LogStreamName]; !ok {\n\t\t\treturn &common.MissingKeyError{ID: t.ID(), JsonKey: streamNameKey}\n\t\t} else {\n",
                      "markdown": "`\t\tcfg.LogStreamName = fmt.Sprintf(\"%v\", conf.Get(streamNameKey))\n\t} else {\n\t\trule := logs.LogStreamName{}\n\t\t_, val := rule.ApplyRule(conf.Get(common.LogsKey))\n\t\tif logStreamName, ok := val.(map[string]interface{})[common.LogStreamName]; !ok {\n\t\t\treturn &common.MissingKeyError{ID: t.ID(), JsonKey: streamNameKey}\n\t\t} else {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/exporter/otel_aws_cloudwatch_logs/translator.go"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 44,
                  "endLine": 111,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tcfg.Region = agent.Global_Config.Region\n\n\tif conf.IsSet(streamNameKey) {\n\t\tcfg.LogStreamName = fmt.Sprintf(\"%v\", conf.Get(streamNameKey))\n\t} else {\n\t\trule := logs.LogStreamName{}\n\t\t_, val := rule.ApplyRule(conf.Get(common.LogsKey))\n",
                    "rendered": {
                      "text": "\tcfg.Region = agent.Global_Config.Region\n\n\tif conf.IsSet(streamNameKey) {\n\t\tcfg.LogStreamName = fmt.Sprintf(\"%v\", conf.Get(streamNameKey))\n\t} else {\n\t\trule := logs.LogStreamName{}\n\t\t_, val := rule.ApplyRule(conf.Get(common.LogsKey))\n",
                      "markdown": "`\tcfg.Region = agent.Global_Config.Region\n\n\tif conf.IsSet(streamNameKey) {\n\t\tcfg.LogStreamName = fmt.Sprintf(\"%v\", conf.Get(streamNameKey))\n\t} else {\n\t\trule := logs.LogStreamName{}\n\t\t_, val := rule.ApplyRule(conf.Get(common.LogsKey))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/exporter/otel_aws_cloudwatch_logs/translator_test.go"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 27,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\ttt := NewTranslatorWithName(common.PipelineNameEmfLogs)\n\trequire.EqualValues(t, \"awscloudwatchlogs/emf_logs\", tt.ID().String())\n\ttestCases := map[string]struct {\n\t\tenv     map[string]string\n\t\tinput   map[string]any\n\t\twant    func() *awscloudwatchlogsexporter.Config\n\t\twantErr error\n",
                    "rendered": {
                      "text": "\ttt := NewTranslatorWithName(common.PipelineNameEmfLogs)\n\trequire.EqualValues(t, \"awscloudwatchlogs/emf_logs\", tt.ID().String())\n\ttestCases := map[string]struct {\n\t\tenv     map[string]string\n\t\tinput   map[string]any\n\t\twant    func() *awscloudwatchlogsexporter.Config\n\t\twantErr error\n",
                      "markdown": "`\ttt := NewTranslatorWithName(common.PipelineNameEmfLogs)\n\trequire.EqualValues(t, \"awscloudwatchlogs/emf_logs\", tt.ID().String())\n\ttestCases := map[string]struct {\n\t\tenv     map[string]string\n\t\tinput   map[string]any\n\t\twant    func() *awscloudwatchlogsexporter.Config\n\t\twantErr error\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/exporter/awscloudwatch/translator_test.go"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 52,
                  "endLine": 161,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\t\t\t\tassert.Equal(t, testCase.want.ForceFlushInterval, gotCfg.ForceFlushInterval)\n\t\t\t\tassert.Equal(t, testCase.want.RoleARN, gotCfg.RoleARN)\n\t\t\t\tassert.Equal(t, testCase.want.AccessKey, gotCfg.AccessKey)\n\t\t\t\tassert.Equal(t, testCase.want.SecretKey, gotCfg.SecretKey)\n\t\t\t\tassert.Equal(t, testCase.want.Token, gotCfg.Token)\n\t\t\t\tassert.Equal(t, testCase.want.Profile, gotCfg.Profile)\n\t\t\t\tassert.Equal(t, testCase.want.SharedCredentialFilename, gotCfg.SharedCredentialFilename)\n",
                    "rendered": {
                      "text": "\t\t\t\tassert.Equal(t, testCase.want.ForceFlushInterval, gotCfg.ForceFlushInterval)\n\t\t\t\tassert.Equal(t, testCase.want.RoleARN, gotCfg.RoleARN)\n\t\t\t\tassert.Equal(t, testCase.want.AccessKey, gotCfg.AccessKey)\n\t\t\t\tassert.Equal(t, testCase.want.SecretKey, gotCfg.SecretKey)\n\t\t\t\tassert.Equal(t, testCase.want.Token, gotCfg.Token)\n\t\t\t\tassert.Equal(t, testCase.want.Profile, gotCfg.Profile)\n\t\t\t\tassert.Equal(t, testCase.want.SharedCredentialFilename, gotCfg.SharedCredentialFilename)\n",
                      "markdown": "`\t\t\t\tassert.Equal(t, testCase.want.ForceFlushInterval, gotCfg.ForceFlushInterval)\n\t\t\t\tassert.Equal(t, testCase.want.RoleARN, gotCfg.RoleARN)\n\t\t\t\tassert.Equal(t, testCase.want.AccessKey, gotCfg.AccessKey)\n\t\t\t\tassert.Equal(t, testCase.want.SecretKey, gotCfg.SecretKey)\n\t\t\t\tassert.Equal(t, testCase.want.Token, gotCfg.Token)\n\t\t\t\tassert.Equal(t, testCase.want.Profile, gotCfg.Profile)\n\t\t\t\tassert.Equal(t, testCase.want.SharedCredentialFilename, gotCfg.SharedCredentialFilename)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/exporter/awscloudwatch/translator_test.go"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 34,
                  "endLine": 161,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\t\t\t\tassert.Equal(t, testCase.want.ForceFlushInterval, gotCfg.ForceFlushInterval)\n\t\t\t\tassert.Equal(t, testCase.want.RoleARN, gotCfg.RoleARN)\n\t\t\t\tassert.Equal(t, testCase.want.AccessKey, gotCfg.AccessKey)\n\t\t\t\tassert.Equal(t, testCase.want.SecretKey, gotCfg.SecretKey)\n\t\t\t\tassert.Equal(t, testCase.want.Token, gotCfg.Token)\n\t\t\t\tassert.Equal(t, testCase.want.Profile, gotCfg.Profile)\n\t\t\t\tassert.Equal(t, testCase.want.SharedCredentialFilename, gotCfg.SharedCredentialFilename)\n",
                    "rendered": {
                      "text": "\t\t\t\tassert.Equal(t, testCase.want.ForceFlushInterval, gotCfg.ForceFlushInterval)\n\t\t\t\tassert.Equal(t, testCase.want.RoleARN, gotCfg.RoleARN)\n\t\t\t\tassert.Equal(t, testCase.want.AccessKey, gotCfg.AccessKey)\n\t\t\t\tassert.Equal(t, testCase.want.SecretKey, gotCfg.SecretKey)\n\t\t\t\tassert.Equal(t, testCase.want.Token, gotCfg.Token)\n\t\t\t\tassert.Equal(t, testCase.want.Profile, gotCfg.Profile)\n\t\t\t\tassert.Equal(t, testCase.want.SharedCredentialFilename, gotCfg.SharedCredentialFilename)\n",
                      "markdown": "`\t\t\t\tassert.Equal(t, testCase.want.ForceFlushInterval, gotCfg.ForceFlushInterval)\n\t\t\t\tassert.Equal(t, testCase.want.RoleARN, gotCfg.RoleARN)\n\t\t\t\tassert.Equal(t, testCase.want.AccessKey, gotCfg.AccessKey)\n\t\t\t\tassert.Equal(t, testCase.want.SecretKey, gotCfg.SecretKey)\n\t\t\t\tassert.Equal(t, testCase.want.Token, gotCfg.Token)\n\t\t\t\tassert.Equal(t, testCase.want.Profile, gotCfg.Profile)\n\t\t\t\tassert.Equal(t, testCase.want.SharedCredentialFilename, gotCfg.SharedCredentialFilename)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/exporter/awscloudwatch/translator_test.go"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 31,
                  "endLine": 101,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\t\t\t\tMaxValuesPerDatum:        150,\n\t\t\t\tRoleARN:                  \"global_arn\",\n\t\t\t\tAccessKey:                \"access_key\",\n\t\t\t\tSecretKey:                \"secret_key\",\n\t\t\t\tToken:                    \"token\",\n\t\t\t\tProfile:                  \"profile\",\n\t\t\t\tSharedCredentialFilename: \"shared\",\n",
                    "rendered": {
                      "text": "\t\t\t\tMaxValuesPerDatum:        150,\n\t\t\t\tRoleARN:                  \"global_arn\",\n\t\t\t\tAccessKey:                \"access_key\",\n\t\t\t\tSecretKey:                \"secret_key\",\n\t\t\t\tToken:                    \"token\",\n\t\t\t\tProfile:                  \"profile\",\n\t\t\t\tSharedCredentialFilename: \"shared\",\n",
                      "markdown": "`\t\t\t\tMaxValuesPerDatum:        150,\n\t\t\t\tRoleARN:                  \"global_arn\",\n\t\t\t\tAccessKey:                \"access_key\",\n\t\t\t\tSecretKey:                \"secret_key\",\n\t\t\t\tToken:                    \"token\",\n\t\t\t\tProfile:                  \"profile\",\n\t\t\t\tSharedCredentialFilename: \"shared\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/exporter/awscloudwatch/translator_test.go"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 4,
                  "endLine": 101,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\t\t\t\tMaxValuesPerDatum:        150,\n\t\t\t\tRoleARN:                  \"global_arn\",\n\t\t\t\tAccessKey:                \"access_key\",\n\t\t\t\tSecretKey:                \"secret_key\",\n\t\t\t\tToken:                    \"token\",\n\t\t\t\tProfile:                  \"profile\",\n\t\t\t\tSharedCredentialFilename: \"shared\",\n",
                    "rendered": {
                      "text": "\t\t\t\tMaxValuesPerDatum:        150,\n\t\t\t\tRoleARN:                  \"global_arn\",\n\t\t\t\tAccessKey:                \"access_key\",\n\t\t\t\tSecretKey:                \"secret_key\",\n\t\t\t\tToken:                    \"token\",\n\t\t\t\tProfile:                  \"profile\",\n\t\t\t\tSharedCredentialFilename: \"shared\",\n",
                      "markdown": "`\t\t\t\tMaxValuesPerDatum:        150,\n\t\t\t\tRoleARN:                  \"global_arn\",\n\t\t\t\tAccessKey:                \"access_key\",\n\t\t\t\tSecretKey:                \"secret_key\",\n\t\t\t\tToken:                    \"token\",\n\t\t\t\tProfile:                  \"profile\",\n\t\t\t\tSharedCredentialFilename: \"shared\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/exporter/awscloudwatch/translator_test.go"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 31,
                  "endLine": 89,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\t\t\tinput: map[string]interface{}{\"metrics\": map[string]interface{}{}},\n\t\t\tcredentials: map[string]interface{}{\n\t\t\t\t\"access_key\":             \"access_key\",\n\t\t\t\t\"secret_key\":             \"secret_key\",\n\t\t\t\t\"token\":                  \"token\",\n\t\t\t\t\"profile\":                \"profile\",\n\t\t\t\t\"shared_credential_file\": \"shared\",\n",
                    "rendered": {
                      "text": "\t\t\tinput: map[string]interface{}{\"metrics\": map[string]interface{}{}},\n\t\t\tcredentials: map[string]interface{}{\n\t\t\t\t\"access_key\":             \"access_key\",\n\t\t\t\t\"secret_key\":             \"secret_key\",\n\t\t\t\t\"token\":                  \"token\",\n\t\t\t\t\"profile\":                \"profile\",\n\t\t\t\t\"shared_credential_file\": \"shared\",\n",
                      "markdown": "`\t\t\tinput: map[string]interface{}{\"metrics\": map[string]interface{}{}},\n\t\t\tcredentials: map[string]interface{}{\n\t\t\t\t\"access_key\":             \"access_key\",\n\t\t\t\t\"secret_key\":             \"secret_key\",\n\t\t\t\t\"token\":                  \"token\",\n\t\t\t\t\"profile\":                \"profile\",\n\t\t\t\t\"shared_credential_file\": \"shared\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/exporter/awscloudwatch/translator_test.go"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 5,
                  "endLine": 89,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\t\t\tinput: map[string]interface{}{\"metrics\": map[string]interface{}{}},\n\t\t\tcredentials: map[string]interface{}{\n\t\t\t\t\"access_key\":             \"access_key\",\n\t\t\t\t\"secret_key\":             \"secret_key\",\n\t\t\t\t\"token\":                  \"token\",\n\t\t\t\t\"profile\":                \"profile\",\n\t\t\t\t\"shared_credential_file\": \"shared\",\n",
                    "rendered": {
                      "text": "\t\t\tinput: map[string]interface{}{\"metrics\": map[string]interface{}{}},\n\t\t\tcredentials: map[string]interface{}{\n\t\t\t\t\"access_key\":             \"access_key\",\n\t\t\t\t\"secret_key\":             \"secret_key\",\n\t\t\t\t\"token\":                  \"token\",\n\t\t\t\t\"profile\":                \"profile\",\n\t\t\t\t\"shared_credential_file\": \"shared\",\n",
                      "markdown": "`\t\t\tinput: map[string]interface{}{\"metrics\": map[string]interface{}{}},\n\t\t\tcredentials: map[string]interface{}{\n\t\t\t\t\"access_key\":             \"access_key\",\n\t\t\t\t\"secret_key\":             \"secret_key\",\n\t\t\t\t\"token\":                  \"token\",\n\t\t\t\t\"profile\":                \"profile\",\n\t\t\t\t\"shared_credential_file\": \"shared\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/exporter/awscloudwatch/translator_test.go"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 25,
                  "endLine": 81,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\t\t\t\tMaxValuesPerDatum:  150,\n\t\t\t\tRoleARN:            \"global_arn\",\n\t\t\t\tAccessKey:          \"access_key\",\n\t\t\t\tSecretKey:          \"secret_key\",\n\t\t\t\tToken:              \"token\",\n\t\t\t},\n\t\t},\n",
                    "rendered": {
                      "text": "\t\t\t\tMaxValuesPerDatum:  150,\n\t\t\t\tRoleARN:            \"global_arn\",\n\t\t\t\tAccessKey:          \"access_key\",\n\t\t\t\tSecretKey:          \"secret_key\",\n\t\t\t\tToken:              \"token\",\n\t\t\t},\n\t\t},\n",
                      "markdown": "`\t\t\t\tMaxValuesPerDatum:  150,\n\t\t\t\tRoleARN:            \"global_arn\",\n\t\t\t\tAccessKey:          \"access_key\",\n\t\t\t\tSecretKey:          \"secret_key\",\n\t\t\t\tToken:              \"token\",\n\t\t\t},\n\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/exporter/awscloudwatch/translator_test.go"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 4,
                  "endLine": 81,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\t\t\t\tMaxValuesPerDatum:  150,\n\t\t\t\tRoleARN:            \"global_arn\",\n\t\t\t\tAccessKey:          \"access_key\",\n\t\t\t\tSecretKey:          \"secret_key\",\n\t\t\t\tToken:              \"token\",\n\t\t\t},\n\t\t},\n",
                    "rendered": {
                      "text": "\t\t\t\tMaxValuesPerDatum:  150,\n\t\t\t\tRoleARN:            \"global_arn\",\n\t\t\t\tAccessKey:          \"access_key\",\n\t\t\t\tSecretKey:          \"secret_key\",\n\t\t\t\tToken:              \"token\",\n\t\t\t},\n\t\t},\n",
                      "markdown": "`\t\t\t\tMaxValuesPerDatum:  150,\n\t\t\t\tRoleARN:            \"global_arn\",\n\t\t\t\tAccessKey:          \"access_key\",\n\t\t\t\tSecretKey:          \"secret_key\",\n\t\t\t\tToken:              \"token\",\n\t\t\t},\n\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/exporter/awscloudwatch/translator_test.go"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 20,
                  "endLine": 69,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\t\t\tinput: map[string]interface{}{\"metrics\": map[string]interface{}{}},\n\t\t\tcredentials: map[string]interface{}{\n\t\t\t\t\"access_key\":  \"access_key\",\n\t\t\t\t\"secret_key\":  \"secret_key\",\n\t\t\t\t\"token\":       \"token\",\n\t\t\t\t\"prof\":        \"invalid field name\",\n\t\t\t\t\"shared_cred\": \"invalid field name\",\n",
                    "rendered": {
                      "text": "\t\t\tinput: map[string]interface{}{\"metrics\": map[string]interface{}{}},\n\t\t\tcredentials: map[string]interface{}{\n\t\t\t\t\"access_key\":  \"access_key\",\n\t\t\t\t\"secret_key\":  \"secret_key\",\n\t\t\t\t\"token\":       \"token\",\n\t\t\t\t\"prof\":        \"invalid field name\",\n\t\t\t\t\"shared_cred\": \"invalid field name\",\n",
                      "markdown": "`\t\t\tinput: map[string]interface{}{\"metrics\": map[string]interface{}{}},\n\t\t\tcredentials: map[string]interface{}{\n\t\t\t\t\"access_key\":  \"access_key\",\n\t\t\t\t\"secret_key\":  \"secret_key\",\n\t\t\t\t\"token\":       \"token\",\n\t\t\t\t\"prof\":        \"invalid field name\",\n\t\t\t\t\"shared_cred\": \"invalid field name\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/exporter/awscloudwatch/translator_test.go"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 5,
                  "endLine": 69,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\t\t\tinput: map[string]interface{}{\"metrics\": map[string]interface{}{}},\n\t\t\tcredentials: map[string]interface{}{\n\t\t\t\t\"access_key\":  \"access_key\",\n\t\t\t\t\"secret_key\":  \"secret_key\",\n\t\t\t\t\"token\":       \"token\",\n\t\t\t\t\"prof\":        \"invalid field name\",\n\t\t\t\t\"shared_cred\": \"invalid field name\",\n",
                    "rendered": {
                      "text": "\t\t\tinput: map[string]interface{}{\"metrics\": map[string]interface{}{}},\n\t\t\tcredentials: map[string]interface{}{\n\t\t\t\t\"access_key\":  \"access_key\",\n\t\t\t\t\"secret_key\":  \"secret_key\",\n\t\t\t\t\"token\":       \"token\",\n\t\t\t\t\"prof\":        \"invalid field name\",\n\t\t\t\t\"shared_cred\": \"invalid field name\",\n",
                      "markdown": "`\t\t\tinput: map[string]interface{}{\"metrics\": map[string]interface{}{}},\n\t\t\tcredentials: map[string]interface{}{\n\t\t\t\t\"access_key\":  \"access_key\",\n\t\t\t\t\"secret_key\":  \"secret_key\",\n\t\t\t\t\"token\":       \"token\",\n\t\t\t\t\"prof\":        \"invalid field name\",\n\t\t\t\t\"shared_cred\": \"invalid field name\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/translator/translate/otel/pipeline/host/translators.go"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 17,
                  "endLine": 45,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\t// Gather OTLP receivers\n\tswitch v := conf.Get(common.ConfigKey(configSection, common.OtlpKey)).(type) {\n\tcase []any:\n\t\tfor index := range v {\n\t\t\tdeltaReceivers.Set(otlpreceiver.NewTranslator(\n",
                    "rendered": {
                      "text": "\t}\n\n\t// Gather OTLP receivers\n\tswitch v := conf.Get(common.ConfigKey(configSection, common.OtlpKey)).(type) {\n\tcase []any:\n\t\tfor index := range v {\n\t\t\tdeltaReceivers.Set(otlpreceiver.NewTranslator(\n",
                      "markdown": "`\t}\n\n\t// Gather OTLP receivers\n\tswitch v := conf.Get(common.ConfigKey(configSection, common.OtlpKey)).(type) {\n\tcase []any:\n\t\tfor index := range v {\n\t\t\tdeltaReceivers.Set(otlpreceiver.NewTranslator(\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/META-INF/maven/com.google.errorprone/error_prone_annotations/pom.xml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 38,
                  "endLine": 8,
                  "snippet": {
                    "text": "\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "pom.xml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/target-systems/kafka-producer.groovy"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 30,
                  "endLine": 19,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\ndef producerMetrics = otel.mbeans(\"kafka.producer:client-id=*,type=producer-metrics\")\notel.instrument(producerMetrics, \"kafka.producer.io-wait-time-ns-avg\",\n        \"The average length of time the I/O thread spent waiting for a socket ready for reads or writes\", \"ns\",\n        [\"client-id\" : { mbean -> mbean.name().getKeyProperty(\"client-id\") }],\n        \"io-wait-time-ns-avg\", otel.&doubleValueCallback)\notel.instrument(producerMetrics, \"kafka.producer.outgoing-byte-rate\",\n",
                    "rendered": {
                      "text": "\ndef producerMetrics = otel.mbeans(\"kafka.producer:client-id=*,type=producer-metrics\")\notel.instrument(producerMetrics, \"kafka.producer.io-wait-time-ns-avg\",\n        \"The average length of time the I/O thread spent waiting for a socket ready for reads or writes\", \"ns\",\n        [\"client-id\" : { mbean -> mbean.name().getKeyProperty(\"client-id\") }],\n        \"io-wait-time-ns-avg\", otel.&doubleValueCallback)\notel.instrument(producerMetrics, \"kafka.producer.outgoing-byte-rate\",\n",
                      "markdown": "`\ndef producerMetrics = otel.mbeans(\"kafka.producer:client-id=*,type=producer-metrics\")\notel.instrument(producerMetrics, \"kafka.producer.io-wait-time-ns-avg\",\n        \"The average length of time the I/O thread spent waiting for a socket ready for reads or writes\", \"ns\",\n        [\"client-id\" : { mbean -> mbean.name().getKeyProperty(\"client-id\") }],\n        \"io-wait-time-ns-avg\", otel.&doubleValueCallback)\notel.instrument(producerMetrics, \"kafka.producer.outgoing-byte-rate\",\n`"
                    }
                  },
                  "sourceLanguage": "groovy"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/target-systems/kafka.groovy"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 43,
                  "endLine": 153,
                  "endColumn": 51,
                  "snippet": {
                    "text": "                                \"kafka.server:type=ReplicaManager,name=IsrExpandsPerSec\"])\notel.instrument(isrOperations,\n  \"kafka.isr.operation.count\",\n  \"The number of in-sync replica shrink and expand operations\",\n  \"{operations}\",\n  [\n    \"operation\" : { mbean -> switch(mbean.name().getKeyProperty(\"name\")) {\n",
                    "rendered": {
                      "text": "                                \"kafka.server:type=ReplicaManager,name=IsrExpandsPerSec\"])\notel.instrument(isrOperations,\n  \"kafka.isr.operation.count\",\n  \"The number of in-sync replica shrink and expand operations\",\n  \"{operations}\",\n  [\n    \"operation\" : { mbean -> switch(mbean.name().getKeyProperty(\"name\")) {\n",
                      "markdown": "`                                \"kafka.server:type=ReplicaManager,name=IsrExpandsPerSec\"])\notel.instrument(isrOperations,\n  \"kafka.isr.operation.count\",\n  \"The number of in-sync replica shrink and expand operations\",\n  \"{operations}\",\n  [\n    \"operation\" : { mbean -> switch(mbean.name().getKeyProperty(\"name\")) {\n`"
                    }
                  },
                  "sourceLanguage": "groovy"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/target-systems/kafka.groovy"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 69,
                  "endLine": 194,
                  "endColumn": 75,
                  "snippet": {
                    "text": "        \"ms\", \"Count\", otel.&longCounterCallback)\notel.instrument(logFlushRate, \"kafka.logs.flush.time.median\", \"log flush time - 50th percentile\",\n        \"ms\", \"50thPercentile\", otel.&doubleValueCallback)\notel.instrument(logFlushRate, \"kafka.logs.flush.time.99p\", \"log flush time - 99th percentile\",\n        \"ms\", \"99thPercentile\", otel.&doubleValueCallback)\n",
                    "rendered": {
                      "text": "        \"ms\", \"Count\", otel.&longCounterCallback)\notel.instrument(logFlushRate, \"kafka.logs.flush.time.median\", \"log flush time - 50th percentile\",\n        \"ms\", \"50thPercentile\", otel.&doubleValueCallback)\notel.instrument(logFlushRate, \"kafka.logs.flush.time.99p\", \"log flush time - 99th percentile\",\n        \"ms\", \"99thPercentile\", otel.&doubleValueCallback)\n",
                      "markdown": "`        \"ms\", \"Count\", otel.&longCounterCallback)\notel.instrument(logFlushRate, \"kafka.logs.flush.time.median\", \"log flush time - 50th percentile\",\n        \"ms\", \"50thPercentile\", otel.&doubleValueCallback)\notel.instrument(logFlushRate, \"kafka.logs.flush.time.99p\", \"log flush time - 99th percentile\",\n        \"ms\", \"99thPercentile\", otel.&doubleValueCallback)\n`"
                    }
                  },
                  "sourceLanguage": "groovy"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/target-systems/kafka.groovy"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 72,
                  "endLine": 192,
                  "endColumn": 78,
                  "snippet": {
                    "text": "def logFlushRate = otel.mbean(\"kafka.log:type=LogFlushStats,name=LogFlushRateAndTimeMs\")\notel.instrument(logFlushRate, \"kafka.logs.flush.time.count\", \"log flush count\",\n        \"ms\", \"Count\", otel.&longCounterCallback)\notel.instrument(logFlushRate, \"kafka.logs.flush.time.median\", \"log flush time - 50th percentile\",\n        \"ms\", \"50thPercentile\", otel.&doubleValueCallback)\notel.instrument(logFlushRate, \"kafka.logs.flush.time.99p\", \"log flush time - 99th percentile\",\n        \"ms\", \"99thPercentile\", otel.&doubleValueCallback)\n",
                    "rendered": {
                      "text": "def logFlushRate = otel.mbean(\"kafka.log:type=LogFlushStats,name=LogFlushRateAndTimeMs\")\notel.instrument(logFlushRate, \"kafka.logs.flush.time.count\", \"log flush count\",\n        \"ms\", \"Count\", otel.&longCounterCallback)\notel.instrument(logFlushRate, \"kafka.logs.flush.time.median\", \"log flush time - 50th percentile\",\n        \"ms\", \"50thPercentile\", otel.&doubleValueCallback)\notel.instrument(logFlushRate, \"kafka.logs.flush.time.99p\", \"log flush time - 99th percentile\",\n        \"ms\", \"99thPercentile\", otel.&doubleValueCallback)\n",
                      "markdown": "`def logFlushRate = otel.mbean(\"kafka.log:type=LogFlushStats,name=LogFlushRateAndTimeMs\")\notel.instrument(logFlushRate, \"kafka.logs.flush.time.count\", \"log flush count\",\n        \"ms\", \"Count\", otel.&longCounterCallback)\notel.instrument(logFlushRate, \"kafka.logs.flush.time.median\", \"log flush time - 50th percentile\",\n        \"ms\", \"50thPercentile\", otel.&doubleValueCallback)\notel.instrument(logFlushRate, \"kafka.logs.flush.time.99p\", \"log flush time - 99th percentile\",\n        \"ms\", \"99thPercentile\", otel.&doubleValueCallback)\n`"
                    }
                  },
                  "sourceLanguage": "groovy"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/target-systems/kafka.groovy"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 43,
                  "endLine": 153,
                  "endColumn": 51,
                  "snippet": {
                    "text": "                                \"kafka.server:type=ReplicaManager,name=IsrExpandsPerSec\"])\notel.instrument(isrOperations,\n  \"kafka.isr.operation.count\",\n  \"The number of in-sync replica shrink and expand operations\",\n  \"{operations}\",\n  [\n    \"operation\" : { mbean -> switch(mbean.name().getKeyProperty(\"name\")) {\n",
                    "rendered": {
                      "text": "                                \"kafka.server:type=ReplicaManager,name=IsrExpandsPerSec\"])\notel.instrument(isrOperations,\n  \"kafka.isr.operation.count\",\n  \"The number of in-sync replica shrink and expand operations\",\n  \"{operations}\",\n  [\n    \"operation\" : { mbean -> switch(mbean.name().getKeyProperty(\"name\")) {\n",
                      "markdown": "`                                \"kafka.server:type=ReplicaManager,name=IsrExpandsPerSec\"])\notel.instrument(isrOperations,\n  \"kafka.isr.operation.count\",\n  \"The number of in-sync replica shrink and expand operations\",\n  \"{operations}\",\n  [\n    \"operation\" : { mbean -> switch(mbean.name().getKeyProperty(\"name\")) {\n`"
                    }
                  },
                  "sourceLanguage": "groovy"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/target-systems/kafka.groovy"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 43,
                  "endLine": 91,
                  "endColumn": 52,
                  "snippet": {
                    "text": "  \"99thPercentile\", otel.&doubleValueCallback)\notel.instrument(requestTime,\n  \"kafka.request.time.avg\",\n  \"The average time the broker has taken to service requests\",\n  \"ms\",\n  [\n    \"type\" : { mbean -> mbean.name().getKeyProperty(\"request\").toLowerCase() },\n",
                    "rendered": {
                      "text": "  \"99thPercentile\", otel.&doubleValueCallback)\notel.instrument(requestTime,\n  \"kafka.request.time.avg\",\n  \"The average time the broker has taken to service requests\",\n  \"ms\",\n  [\n    \"type\" : { mbean -> mbean.name().getKeyProperty(\"request\").toLowerCase() },\n",
                      "markdown": "`  \"99thPercentile\", otel.&doubleValueCallback)\notel.instrument(requestTime,\n  \"kafka.request.time.avg\",\n  \"The average time the broker has taken to service requests\",\n  \"ms\",\n  [\n    \"type\" : { mbean -> mbean.name().getKeyProperty(\"request\").toLowerCase() },\n`"
                    }
                  },
                  "sourceLanguage": "groovy"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/target-systems/kafka.groovy"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 14,
                  "endLine": 91,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  \"99thPercentile\", otel.&doubleValueCallback)\notel.instrument(requestTime,\n  \"kafka.request.time.avg\",\n  \"The average time the broker has taken to service requests\",\n  \"ms\",\n  [\n    \"type\" : { mbean -> mbean.name().getKeyProperty(\"request\").toLowerCase() },\n",
                    "rendered": {
                      "text": "  \"99thPercentile\", otel.&doubleValueCallback)\notel.instrument(requestTime,\n  \"kafka.request.time.avg\",\n  \"The average time the broker has taken to service requests\",\n  \"ms\",\n  [\n    \"type\" : { mbean -> mbean.name().getKeyProperty(\"request\").toLowerCase() },\n",
                      "markdown": "`  \"99thPercentile\", otel.&doubleValueCallback)\notel.instrument(requestTime,\n  \"kafka.request.time.avg\",\n  \"The average time the broker has taken to service requests\",\n  \"ms\",\n  [\n    \"type\" : { mbean -> mbean.name().getKeyProperty(\"request\").toLowerCase() },\n`"
                    }
                  },
                  "sourceLanguage": "groovy"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/target-systems/kafka.groovy"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 51,
                  "endLine": 83,
                  "endColumn": 60,
                  "snippet": {
                    "text": "  \"50thPercentile\", otel.&doubleValueCallback)\notel.instrument(requestTime,\n  \"kafka.request.time.99p\",\n  \"The 99th percentile time the broker has taken to service requests\",\n  \"ms\",\n  [\n    \"type\" : { mbean -> mbean.name().getKeyProperty(\"request\").toLowerCase() },\n",
                    "rendered": {
                      "text": "  \"50thPercentile\", otel.&doubleValueCallback)\notel.instrument(requestTime,\n  \"kafka.request.time.99p\",\n  \"The 99th percentile time the broker has taken to service requests\",\n  \"ms\",\n  [\n    \"type\" : { mbean -> mbean.name().getKeyProperty(\"request\").toLowerCase() },\n",
                      "markdown": "`  \"50thPercentile\", otel.&doubleValueCallback)\notel.instrument(requestTime,\n  \"kafka.request.time.99p\",\n  \"The 99th percentile time the broker has taken to service requests\",\n  \"ms\",\n  [\n    \"type\" : { mbean -> mbean.name().getKeyProperty(\"request\").toLowerCase() },\n`"
                    }
                  },
                  "sourceLanguage": "groovy"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/target-systems/kafka.groovy"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 22,
                  "endLine": 83,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  \"50thPercentile\", otel.&doubleValueCallback)\notel.instrument(requestTime,\n  \"kafka.request.time.99p\",\n  \"The 99th percentile time the broker has taken to service requests\",\n  \"ms\",\n  [\n    \"type\" : { mbean -> mbean.name().getKeyProperty(\"request\").toLowerCase() },\n",
                    "rendered": {
                      "text": "  \"50thPercentile\", otel.&doubleValueCallback)\notel.instrument(requestTime,\n  \"kafka.request.time.99p\",\n  \"The 99th percentile time the broker has taken to service requests\",\n  \"ms\",\n  [\n    \"type\" : { mbean -> mbean.name().getKeyProperty(\"request\").toLowerCase() },\n",
                      "markdown": "`  \"50thPercentile\", otel.&doubleValueCallback)\notel.instrument(requestTime,\n  \"kafka.request.time.99p\",\n  \"The 99th percentile time the broker has taken to service requests\",\n  \"ms\",\n  [\n    \"type\" : { mbean -> mbean.name().getKeyProperty(\"request\").toLowerCase() },\n`"
                    }
                  },
                  "sourceLanguage": "groovy"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/target-systems/kafka.groovy"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 51,
                  "endLine": 75,
                  "endColumn": 60,
                  "snippet": {
                    "text": "  \"Count\", otel.&longCounterCallback)\notel.instrument(requestTime,\n  \"kafka.request.time.50p\",\n  \"The 50th percentile time the broker has taken to service requests\",\n  \"ms\",\n  [\n    \"type\" : { mbean -> mbean.name().getKeyProperty(\"request\").toLowerCase() },\n",
                    "rendered": {
                      "text": "  \"Count\", otel.&longCounterCallback)\notel.instrument(requestTime,\n  \"kafka.request.time.50p\",\n  \"The 50th percentile time the broker has taken to service requests\",\n  \"ms\",\n  [\n    \"type\" : { mbean -> mbean.name().getKeyProperty(\"request\").toLowerCase() },\n",
                      "markdown": "`  \"Count\", otel.&longCounterCallback)\notel.instrument(requestTime,\n  \"kafka.request.time.50p\",\n  \"The 50th percentile time the broker has taken to service requests\",\n  \"ms\",\n  [\n    \"type\" : { mbean -> mbean.name().getKeyProperty(\"request\").toLowerCase() },\n`"
                    }
                  },
                  "sourceLanguage": "groovy"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/target-systems/kafka.groovy"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 22,
                  "endLine": 75,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  \"Count\", otel.&longCounterCallback)\notel.instrument(requestTime,\n  \"kafka.request.time.50p\",\n  \"The 50th percentile time the broker has taken to service requests\",\n  \"ms\",\n  [\n    \"type\" : { mbean -> mbean.name().getKeyProperty(\"request\").toLowerCase() },\n",
                    "rendered": {
                      "text": "  \"Count\", otel.&longCounterCallback)\notel.instrument(requestTime,\n  \"kafka.request.time.50p\",\n  \"The 50th percentile time the broker has taken to service requests\",\n  \"ms\",\n  [\n    \"type\" : { mbean -> mbean.name().getKeyProperty(\"request\").toLowerCase() },\n",
                      "markdown": "`  \"Count\", otel.&longCounterCallback)\notel.instrument(requestTime,\n  \"kafka.request.time.50p\",\n  \"The 50th percentile time the broker has taken to service requests\",\n  \"ms\",\n  [\n    \"type\" : { mbean -> mbean.name().getKeyProperty(\"request\").toLowerCase() },\n`"
                    }
                  },
                  "sourceLanguage": "groovy"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/target-systems/kafka.groovy"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 41,
                  "endLine": 67,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  \"kafka.network:type=RequestMetrics,name=TotalTimeMs,request=FetchFollower\"])\notel.instrument(requestTime,\n  \"kafka.request.time.total\",\n  \"The total time the broker has taken to service requests\",\n  \"ms\",\n  [\n    \"type\" : { mbean -> mbean.name().getKeyProperty(\"request\").toLowerCase() },\n",
                    "rendered": {
                      "text": "  \"kafka.network:type=RequestMetrics,name=TotalTimeMs,request=FetchFollower\"])\notel.instrument(requestTime,\n  \"kafka.request.time.total\",\n  \"The total time the broker has taken to service requests\",\n  \"ms\",\n  [\n    \"type\" : { mbean -> mbean.name().getKeyProperty(\"request\").toLowerCase() },\n",
                      "markdown": "`  \"kafka.network:type=RequestMetrics,name=TotalTimeMs,request=FetchFollower\"])\notel.instrument(requestTime,\n  \"kafka.request.time.total\",\n  \"The total time the broker has taken to service requests\",\n  \"ms\",\n  [\n    \"type\" : { mbean -> mbean.name().getKeyProperty(\"request\").toLowerCase() },\n`"
                    }
                  },
                  "sourceLanguage": "groovy"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/target-systems/kafka.groovy"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 12,
                  "endLine": 67,
                  "endColumn": 18,
                  "snippet": {
                    "text": "  \"kafka.network:type=RequestMetrics,name=TotalTimeMs,request=FetchFollower\"])\notel.instrument(requestTime,\n  \"kafka.request.time.total\",\n  \"The total time the broker has taken to service requests\",\n  \"ms\",\n  [\n    \"type\" : { mbean -> mbean.name().getKeyProperty(\"request\").toLowerCase() },\n",
                    "rendered": {
                      "text": "  \"kafka.network:type=RequestMetrics,name=TotalTimeMs,request=FetchFollower\"])\notel.instrument(requestTime,\n  \"kafka.request.time.total\",\n  \"The total time the broker has taken to service requests\",\n  \"ms\",\n  [\n    \"type\" : { mbean -> mbean.name().getKeyProperty(\"request\").toLowerCase() },\n",
                      "markdown": "`  \"kafka.network:type=RequestMetrics,name=TotalTimeMs,request=FetchFollower\"])\notel.instrument(requestTime,\n  \"kafka.request.time.total\",\n  \"The total time the broker has taken to service requests\",\n  \"ms\",\n  [\n    \"type\" : { mbean -> mbean.name().getKeyProperty(\"request\").toLowerCase() },\n`"
                    }
                  },
                  "sourceLanguage": "groovy"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/target-systems/jetty.groovy"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 78,
                  "endLine": 27,
                  "endColumn": 84,
                  "snippet": {
                    "text": "otel.instrument(beanSessions, \"jetty.session.time.total\", \"The total time sessions have been active.\", \"s\",\n  [\"resource\" : { mbean -> mbean.name().getKeyProperty(\"context\") }],\n  \"sessionTimeTotal\", otel.&longUpDownCounterCallback)\notel.instrument(beanSessions, \"jetty.session.time.max\", \"The maximum amount of time a session has been active.\", \"s\",\n  [\"resource\" : { mbean -> mbean.name().getKeyProperty(\"context\") }],\n  \"sessionTimeMax\", otel.&longValueCallback)\n\n",
                    "rendered": {
                      "text": "otel.instrument(beanSessions, \"jetty.session.time.total\", \"The total time sessions have been active.\", \"s\",\n  [\"resource\" : { mbean -> mbean.name().getKeyProperty(\"context\") }],\n  \"sessionTimeTotal\", otel.&longUpDownCounterCallback)\notel.instrument(beanSessions, \"jetty.session.time.max\", \"The maximum amount of time a session has been active.\", \"s\",\n  [\"resource\" : { mbean -> mbean.name().getKeyProperty(\"context\") }],\n  \"sessionTimeMax\", otel.&longValueCallback)\n\n",
                      "markdown": "`otel.instrument(beanSessions, \"jetty.session.time.total\", \"The total time sessions have been active.\", \"s\",\n  [\"resource\" : { mbean -> mbean.name().getKeyProperty(\"context\") }],\n  \"sessionTimeTotal\", otel.&longUpDownCounterCallback)\notel.instrument(beanSessions, \"jetty.session.time.max\", \"The maximum amount of time a session has been active.\", \"s\",\n  [\"resource\" : { mbean -> mbean.name().getKeyProperty(\"context\") }],\n  \"sessionTimeMax\", otel.&longValueCallback)\n\n`"
                    }
                  },
                  "sourceLanguage": "groovy"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/packaging/opentelemetry-jmx-metrics.jar/target-systems/jetty.groovy"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 68,
                  "endLine": 24,
                  "endColumn": 74,
                  "snippet": {
                    "text": "otel.instrument(beanSessions, \"jetty.session.count\", \"The number of sessions established in total.\", \"{sessions}\",\n  [\"resource\" : { mbean -> mbean.name().getKeyProperty(\"context\") }],\n  \"sessionsCreated\", otel.&longCounterCallback)\notel.instrument(beanSessions, \"jetty.session.time.total\", \"The total time sessions have been active.\", \"s\",\n  [\"resource\" : { mbean -> mbean.name().getKeyProperty(\"context\") }],\n  \"sessionTimeTotal\", otel.&longUpDownCounterCallback)\notel.instrument(beanSessions, \"jetty.session.time.max\", \"The maximum amount of time a session has been active.\", \"s\",\n",
                    "rendered": {
                      "text": "otel.instrument(beanSessions, \"jetty.session.count\", \"The number of sessions established in total.\", \"{sessions}\",\n  [\"resource\" : { mbean -> mbean.name().getKeyProperty(\"context\") }],\n  \"sessionsCreated\", otel.&longCounterCallback)\notel.instrument(beanSessions, \"jetty.session.time.total\", \"The total time sessions have been active.\", \"s\",\n  [\"resource\" : { mbean -> mbean.name().getKeyProperty(\"context\") }],\n  \"sessionTimeTotal\", otel.&longUpDownCounterCallback)\notel.instrument(beanSessions, \"jetty.session.time.max\", \"The maximum amount of time a session has been active.\", \"s\",\n",
                      "markdown": "`otel.instrument(beanSessions, \"jetty.session.count\", \"The number of sessions established in total.\", \"{sessions}\",\n  [\"resource\" : { mbean -> mbean.name().getKeyProperty(\"context\") }],\n  \"sessionsCreated\", otel.&longCounterCallback)\notel.instrument(beanSessions, \"jetty.session.time.total\", \"The total time sessions have been active.\", \"s\",\n  [\"resource\" : { mbean -> mbean.name().getKeyProperty(\"context\") }],\n  \"sessionTimeTotal\", otel.&longUpDownCounterCallback)\notel.instrument(beanSessions, \"jetty.session.time.max\", \"The maximum amount of time a session has been active.\", \"s\",\n`"
                    }
                  },
                  "sourceLanguage": "groovy"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/k8s-yaml-templates/cwagent-latest-kubernetes-monitoring-onprem/cwagent-serviceaccount.yaml"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 16,
                  "endLine": 1,
                  "endColumn": 25,
                  "snippet": {
                    "text": "# create cwagent service account and role binding\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n",
                    "rendered": {
                      "text": "# create cwagent service account and role binding\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n",
                      "markdown": "`# create cwagent service account and role binding\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/source/Dockerfile"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 19,
                  "snippet": {
                    "text": "ARG TARGETARCH\nRUN mkdir -p /opt/aws/amazon-cloudwatch-agent/etc\nRUN mkdir -p /opt/aws/amazon-cloudwatch-agent/var\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\nCOPY --from=builder /go/src/github.com/aws/amazon-cloudwatch-agent/build/bin/linux_${TARGETARCH}/ /opt/aws/amazon-cloudwatch-agent/bin\n",
                    "rendered": {
                      "text": "ARG TARGETARCH\nRUN mkdir -p /opt/aws/amazon-cloudwatch-agent/etc\nRUN mkdir -p /opt/aws/amazon-cloudwatch-agent/var\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\nCOPY --from=builder /go/src/github.com/aws/amazon-cloudwatch-agent/build/bin/linux_${TARGETARCH}/ /opt/aws/amazon-cloudwatch-agent/bin\n",
                      "markdown": "`ARG TARGETARCH\nRUN mkdir -p /opt/aws/amazon-cloudwatch-agent/etc\nRUN mkdir -p /opt/aws/amazon-cloudwatch-agent/var\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\nCOPY --from=builder /go/src/github.com/aws/amazon-cloudwatch-agent/build/bin/linux_${TARGETARCH}/ /opt/aws/amazon-cloudwatch-agent/bin\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/source/Dockerfile"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 42,
                  "endColumn": 4,
                  "snippet": {
                    "text": "COPY --from=cert /tmp /tmp\nCOPY --from=cert /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt\nCOPY --from=cert /opt/aws/amazon-cloudwatch-agent /opt/aws/amazon-cloudwatch-agent\n\nENV RUN_IN_CONTAINER=\"True\"\nENTRYPOINT [\"/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\"]\n",
                    "rendered": {
                      "text": "COPY --from=cert /tmp /tmp\nCOPY --from=cert /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt\nCOPY --from=cert /opt/aws/amazon-cloudwatch-agent /opt/aws/amazon-cloudwatch-agent\n\nENV RUN_IN_CONTAINER=\"True\"\nENTRYPOINT [\"/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\"]\n",
                      "markdown": "`COPY --from=cert /tmp /tmp\nCOPY --from=cert /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt\nCOPY --from=cert /opt/aws/amazon-cloudwatch-agent /opt/aws/amazon-cloudwatch-agent\n\nENV RUN_IN_CONTAINER=\"True\"\nENTRYPOINT [\"/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\"]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/source/Dockerfile"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 3,
                  "endLine": 32,
                  "endColumn": 12,
                  "snippet": {
                    "text": "RUN mkdir -p /opt/aws/amazon-cloudwatch-agent/etc\nRUN mkdir -p /opt/aws/amazon-cloudwatch-agent/var\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\nCOPY --from=builder /go/src/github.com/aws/amazon-cloudwatch-agent/build/bin/linux_${TARGETARCH}/ /opt/aws/amazon-cloudwatch-agent/bin\n\n",
                    "rendered": {
                      "text": "RUN mkdir -p /opt/aws/amazon-cloudwatch-agent/etc\nRUN mkdir -p /opt/aws/amazon-cloudwatch-agent/var\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\nCOPY --from=builder /go/src/github.com/aws/amazon-cloudwatch-agent/build/bin/linux_${TARGETARCH}/ /opt/aws/amazon-cloudwatch-agent/bin\n\n",
                      "markdown": "`RUN mkdir -p /opt/aws/amazon-cloudwatch-agent/etc\nRUN mkdir -p /opt/aws/amazon-cloudwatch-agent/var\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\nCOPY --from=builder /go/src/github.com/aws/amazon-cloudwatch-agent/build/bin/linux_${TARGETARCH}/ /opt/aws/amazon-cloudwatch-agent/bin\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/source/Dockerfile"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 3,
                  "endLine": 31,
                  "endColumn": 12,
                  "snippet": {
                    "text": "ARG TARGETARCH\nRUN mkdir -p /opt/aws/amazon-cloudwatch-agent/etc\nRUN mkdir -p /opt/aws/amazon-cloudwatch-agent/var\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\nCOPY --from=builder /go/src/github.com/aws/amazon-cloudwatch-agent/build/bin/linux_${TARGETARCH}/ /opt/aws/amazon-cloudwatch-agent/bin\n",
                    "rendered": {
                      "text": "ARG TARGETARCH\nRUN mkdir -p /opt/aws/amazon-cloudwatch-agent/etc\nRUN mkdir -p /opt/aws/amazon-cloudwatch-agent/var\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\nCOPY --from=builder /go/src/github.com/aws/amazon-cloudwatch-agent/build/bin/linux_${TARGETARCH}/ /opt/aws/amazon-cloudwatch-agent/bin\n",
                      "markdown": "`ARG TARGETARCH\nRUN mkdir -p /opt/aws/amazon-cloudwatch-agent/etc\nRUN mkdir -p /opt/aws/amazon-cloudwatch-agent/var\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\nCOPY --from=builder /go/src/github.com/aws/amazon-cloudwatch-agent/build/bin/linux_${TARGETARCH}/ /opt/aws/amazon-cloudwatch-agent/bin\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/source/Dockerfile"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 20,
                  "endLine": 14,
                  "endColumn": 4,
                  "snippet": {
                    "text": "RUN mkdir -p /go/src/github.com/aws/amazon-cloudwatch-agent/\nWORKDIR /go/src/github.com/aws/amazon-cloudwatch-agent/\n\nARG GO111MODULE=\"on\"\nENV GO111MODULE=${GO111MODULE}\n\nCOPY go.mod /go/src/github.com/aws/amazon-cloudwatch-agent/\nCOPY go.sum /go/src/github.com/aws/amazon-cloudwatch-agent/\n",
                    "rendered": {
                      "text": "RUN mkdir -p /go/src/github.com/aws/amazon-cloudwatch-agent/\nWORKDIR /go/src/github.com/aws/amazon-cloudwatch-agent/\n\nARG GO111MODULE=\"on\"\nENV GO111MODULE=${GO111MODULE}\n\nCOPY go.mod /go/src/github.com/aws/amazon-cloudwatch-agent/\nCOPY go.sum /go/src/github.com/aws/amazon-cloudwatch-agent/\n",
                      "markdown": "`RUN mkdir -p /go/src/github.com/aws/amazon-cloudwatch-agent/\nWORKDIR /go/src/github.com/aws/amazon-cloudwatch-agent/\n\nARG GO111MODULE=\"on\"\nENV GO111MODULE=${GO111MODULE}\n\nCOPY go.mod /go/src/github.com/aws/amazon-cloudwatch-agent/\nCOPY go.sum /go/src/github.com/aws/amazon-cloudwatch-agent/\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/source/Dockerfile"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 14,
                  "endLine": 9,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\n# NOTE: This arg will be populated by docker buildx\n# https://docs.docker.com/engine/reference/builder/#automatic-platform-args-in-the-global-scope\nARG TARGETARCH\nENV GOPROXY=direct\nRUN mkdir -p /go/src/github.com/aws/amazon-cloudwatch-agent/\nWORKDIR /go/src/github.com/aws/amazon-cloudwatch-agent/\n\n",
                    "rendered": {
                      "text": "\n# NOTE: This arg will be populated by docker buildx\n# https://docs.docker.com/engine/reference/builder/#automatic-platform-args-in-the-global-scope\nARG TARGETARCH\nENV GOPROXY=direct\nRUN mkdir -p /go/src/github.com/aws/amazon-cloudwatch-agent/\nWORKDIR /go/src/github.com/aws/amazon-cloudwatch-agent/\n\n",
                      "markdown": "`\n# NOTE: This arg will be populated by docker buildx\n# https://docs.docker.com/engine/reference/builder/#automatic-platform-args-in-the-global-scope\nARG TARGETARCH\nENV GOPROXY=direct\nRUN mkdir -p /go/src/github.com/aws/amazon-cloudwatch-agent/\nWORKDIR /go/src/github.com/aws/amazon-cloudwatch-agent/\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/source/Dockerfile"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 37,
                  "endLine": 6,
                  "endColumn": 45,
                  "snippet": {
                    "text": "ARG CERT_IMAGE=ubuntu:latest\nFROM $GO_IMAGE as builder\n\n# NOTE: This arg will be populated by docker buildx\n# https://docs.docker.com/engine/reference/builder/#automatic-platform-args-in-the-global-scope\nARG TARGETARCH\nENV GOPROXY=direct\n",
                    "rendered": {
                      "text": "ARG CERT_IMAGE=ubuntu:latest\nFROM $GO_IMAGE as builder\n\n# NOTE: This arg will be populated by docker buildx\n# https://docs.docker.com/engine/reference/builder/#automatic-platform-args-in-the-global-scope\nARG TARGETARCH\nENV GOPROXY=direct\n",
                      "markdown": "`ARG CERT_IMAGE=ubuntu:latest\nFROM $GO_IMAGE as builder\n\n# NOTE: This arg will be populated by docker buildx\n# https://docs.docker.com/engine/reference/builder/#automatic-platform-args-in-the-global-scope\nARG TARGETARCH\nENV GOPROXY=direct\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/source/Dockerfile.Windows"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 36,
                  "endLine": 31,
                  "endColumn": 46,
                  "snippet": {
                    "text": "RUN choco install make\n\n# Run make and build CW agent inside container\nRUN make build-for-docker-windows-${env:TARGETARCH}\n\n# Build target CW agent container image for Windows\nFROM mcr.microsoft.com/windows/nanoserver:$TAG\n",
                    "rendered": {
                      "text": "RUN choco install make\n\n# Run make and build CW agent inside container\nRUN make build-for-docker-windows-${env:TARGETARCH}\n\n# Build target CW agent container image for Windows\nFROM mcr.microsoft.com/windows/nanoserver:$TAG\n",
                      "markdown": "`RUN choco install make\n\n# Run make and build CW agent inside container\nRUN make build-for-docker-windows-${env:TARGETARCH}\n\n# Build target CW agent container image for Windows\nFROM mcr.microsoft.com/windows/nanoserver:$TAG\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/source/Dockerfile.Windows"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 27,
                  "endLine": 45,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nCOPY --from=builder C:\\\\go\\\\src\\\\github.com\\\\aws\\\\amazon-cloudwatch-agent\\\\build\\\\bin\\\\windows_$TARGETARCH\\\\ $CONTAINER_CLOUDWATCHAGENT_PATH\n\nENV RUN_IN_CONTAINER=\"True\"\nCMD [\"start-amazon-cloudwatch-agent.exe\"]",
                    "rendered": {
                      "text": "\nCOPY --from=builder C:\\\\go\\\\src\\\\github.com\\\\aws\\\\amazon-cloudwatch-agent\\\\build\\\\bin\\\\windows_$TARGETARCH\\\\ $CONTAINER_CLOUDWATCHAGENT_PATH\n\nENV RUN_IN_CONTAINER=\"True\"\nCMD [\"start-amazon-cloudwatch-agent.exe\"]",
                      "markdown": "`\nCOPY --from=builder C:\\\\go\\\\src\\\\github.com\\\\aws\\\\amazon-cloudwatch-agent\\\\build\\\\bin\\\\windows_$TARGETARCH\\\\ $CONTAINER_CLOUDWATCHAGENT_PATH\n\nENV RUN_IN_CONTAINER=\"True\"\nCMD [\"start-amazon-cloudwatch-agent.exe\"]`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/source/Dockerfile.Windows"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 44,
                  "endColumn": 4,
                  "snippet": {
                    "text": "WORKDIR $CONTAINER_CLOUDWATCHAGENT_PATH\n\nCOPY --from=builder C:\\\\go\\\\src\\\\github.com\\\\aws\\\\amazon-cloudwatch-agent\\\\build\\\\bin\\\\windows_$TARGETARCH\\\\ $CONTAINER_CLOUDWATCHAGENT_PATH\n\nENV RUN_IN_CONTAINER=\"True\"\nCMD [\"start-amazon-cloudwatch-agent.exe\"]",
                    "rendered": {
                      "text": "WORKDIR $CONTAINER_CLOUDWATCHAGENT_PATH\n\nCOPY --from=builder C:\\\\go\\\\src\\\\github.com\\\\aws\\\\amazon-cloudwatch-agent\\\\build\\\\bin\\\\windows_$TARGETARCH\\\\ $CONTAINER_CLOUDWATCHAGENT_PATH\n\nENV RUN_IN_CONTAINER=\"True\"\nCMD [\"start-amazon-cloudwatch-agent.exe\"]",
                      "markdown": "`WORKDIR $CONTAINER_CLOUDWATCHAGENT_PATH\n\nCOPY --from=builder C:\\\\go\\\\src\\\\github.com\\\\aws\\\\amazon-cloudwatch-agent\\\\build\\\\bin\\\\windows_$TARGETARCH\\\\ $CONTAINER_CLOUDWATCHAGENT_PATH\n\nENV RUN_IN_CONTAINER=\"True\"\nCMD [\"start-amazon-cloudwatch-agent.exe\"]`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/source/Dockerfile.Windows"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 20,
                  "endLine": 18,
                  "endColumn": 4,
                  "snippet": {
                    "text": "WORKDIR \"C:\\go\\src\\github.com\\aws\\amazon-cloudwatch-agent\"\n\nENV GOPROXY=direct\nARG GO111MODULE=\"on\"\nENV GO111MODULE=${GO111MODULE}\n\nCOPY go.mod \"C:\\go\\src\\github.com\\aws\\amazon-cloudwatch-agent\"\nCOPY go.sum \"C:\\go\\src\\github.com\\aws\\amazon-cloudwatch-agent\"\n",
                    "rendered": {
                      "text": "WORKDIR \"C:\\go\\src\\github.com\\aws\\amazon-cloudwatch-agent\"\n\nENV GOPROXY=direct\nARG GO111MODULE=\"on\"\nENV GO111MODULE=${GO111MODULE}\n\nCOPY go.mod \"C:\\go\\src\\github.com\\aws\\amazon-cloudwatch-agent\"\nCOPY go.sum \"C:\\go\\src\\github.com\\aws\\amazon-cloudwatch-agent\"\n",
                      "markdown": "`WORKDIR \"C:\\go\\src\\github.com\\aws\\amazon-cloudwatch-agent\"\n\nENV GOPROXY=direct\nARG GO111MODULE=\"on\"\nENV GO111MODULE=${GO111MODULE}\n\nCOPY go.mod \"C:\\go\\src\\github.com\\aws\\amazon-cloudwatch-agent\"\nCOPY go.sum \"C:\\go\\src\\github.com\\aws\\amazon-cloudwatch-agent\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/source/Dockerfile.Windows"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 16,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nRUN New-Item -ItemType Directory -Path \"C:\\go\\src\\github.com\\aws\\amazon-cloudwatch-agent\" -Force\nWORKDIR \"C:\\go\\src\\github.com\\aws\\amazon-cloudwatch-agent\"\n\nENV GOPROXY=direct\nARG GO111MODULE=\"on\"\nENV GO111MODULE=${GO111MODULE}\n\n",
                    "rendered": {
                      "text": "\nRUN New-Item -ItemType Directory -Path \"C:\\go\\src\\github.com\\aws\\amazon-cloudwatch-agent\" -Force\nWORKDIR \"C:\\go\\src\\github.com\\aws\\amazon-cloudwatch-agent\"\n\nENV GOPROXY=direct\nARG GO111MODULE=\"on\"\nENV GO111MODULE=${GO111MODULE}\n\n",
                      "markdown": "`\nRUN New-Item -ItemType Directory -Path \"C:\\go\\src\\github.com\\aws\\amazon-cloudwatch-agent\" -Force\nWORKDIR \"C:\\go\\src\\github.com\\aws\\amazon-cloudwatch-agent\"\n\nENV GOPROXY=direct\nARG GO111MODULE=\"on\"\nENV GO111MODULE=${GO111MODULE}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 11,
                  "endLine": 11,
                  "endColumn": 19,
                  "snippet": {
                    "text": "ARG TARGETARCH\nRUN mkdir -p /opt/aws/amazon-cloudwatch-agent/etc\nRUN mkdir -p /opt/aws/amazon-cloudwatch-agent/var\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\nCOPY build/bin/linux_${TARGETARCH}/ /opt/aws/amazon-cloudwatch-agent/bin\n",
                    "rendered": {
                      "text": "ARG TARGETARCH\nRUN mkdir -p /opt/aws/amazon-cloudwatch-agent/etc\nRUN mkdir -p /opt/aws/amazon-cloudwatch-agent/var\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\nCOPY build/bin/linux_${TARGETARCH}/ /opt/aws/amazon-cloudwatch-agent/bin\n",
                      "markdown": "`ARG TARGETARCH\nRUN mkdir -p /opt/aws/amazon-cloudwatch-agent/etc\nRUN mkdir -p /opt/aws/amazon-cloudwatch-agent/var\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\nCOPY build/bin/linux_${TARGETARCH}/ /opt/aws/amazon-cloudwatch-agent/bin\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 22,
                  "endColumn": 4,
                  "snippet": {
                    "text": "COPY --from=cert /tmp /tmp\nCOPY --from=cert /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt\nCOPY --from=cert /opt/aws/amazon-cloudwatch-agent /opt/aws/amazon-cloudwatch-agent\n\nENV RUN_IN_CONTAINER=\"True\"\nENTRYPOINT [\"/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\"]\n",
                    "rendered": {
                      "text": "COPY --from=cert /tmp /tmp\nCOPY --from=cert /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt\nCOPY --from=cert /opt/aws/amazon-cloudwatch-agent /opt/aws/amazon-cloudwatch-agent\n\nENV RUN_IN_CONTAINER=\"True\"\nENTRYPOINT [\"/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\"]\n",
                      "markdown": "`COPY --from=cert /tmp /tmp\nCOPY --from=cert /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt\nCOPY --from=cert /opt/aws/amazon-cloudwatch-agent /opt/aws/amazon-cloudwatch-agent\n\nENV RUN_IN_CONTAINER=\"True\"\nENTRYPOINT [\"/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\"]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 3,
                  "endLine": 12,
                  "endColumn": 12,
                  "snippet": {
                    "text": "RUN mkdir -p /opt/aws/amazon-cloudwatch-agent/etc\nRUN mkdir -p /opt/aws/amazon-cloudwatch-agent/var\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\nCOPY build/bin/linux_${TARGETARCH}/ /opt/aws/amazon-cloudwatch-agent/bin\n\n",
                    "rendered": {
                      "text": "RUN mkdir -p /opt/aws/amazon-cloudwatch-agent/etc\nRUN mkdir -p /opt/aws/amazon-cloudwatch-agent/var\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\nCOPY build/bin/linux_${TARGETARCH}/ /opt/aws/amazon-cloudwatch-agent/bin\n\n",
                      "markdown": "`RUN mkdir -p /opt/aws/amazon-cloudwatch-agent/etc\nRUN mkdir -p /opt/aws/amazon-cloudwatch-agent/var\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\nCOPY build/bin/linux_${TARGETARCH}/ /opt/aws/amazon-cloudwatch-agent/bin\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 3,
                  "endLine": 11,
                  "endColumn": 12,
                  "snippet": {
                    "text": "ARG TARGETARCH\nRUN mkdir -p /opt/aws/amazon-cloudwatch-agent/etc\nRUN mkdir -p /opt/aws/amazon-cloudwatch-agent/var\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\nCOPY build/bin/linux_${TARGETARCH}/ /opt/aws/amazon-cloudwatch-agent/bin\n",
                    "rendered": {
                      "text": "ARG TARGETARCH\nRUN mkdir -p /opt/aws/amazon-cloudwatch-agent/etc\nRUN mkdir -p /opt/aws/amazon-cloudwatch-agent/var\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\nCOPY build/bin/linux_${TARGETARCH}/ /opt/aws/amazon-cloudwatch-agent/bin\n",
                      "markdown": "`ARG TARGETARCH\nRUN mkdir -p /opt/aws/amazon-cloudwatch-agent/etc\nRUN mkdir -p /opt/aws/amazon-cloudwatch-agent/var\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\nCOPY build/bin/linux_${TARGETARCH}/ /opt/aws/amazon-cloudwatch-agent/bin\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile.Windows"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 27,
                  "endLine": 22,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nCOPY \"./tmp/windows_${TARGETARCH}\" $CONTAINER_CLOUDWATCHAGENT_PATH\n\nENV RUN_IN_CONTAINER=\"True\"\nCMD [\"start-amazon-cloudwatch-agent.exe\"]",
                    "rendered": {
                      "text": "\nCOPY \"./tmp/windows_${TARGETARCH}\" $CONTAINER_CLOUDWATCHAGENT_PATH\n\nENV RUN_IN_CONTAINER=\"True\"\nCMD [\"start-amazon-cloudwatch-agent.exe\"]",
                      "markdown": "`\nCOPY \"./tmp/windows_${TARGETARCH}\" $CONTAINER_CLOUDWATCHAGENT_PATH\n\nENV RUN_IN_CONTAINER=\"True\"\nCMD [\"start-amazon-cloudwatch-agent.exe\"]`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localbin/Dockerfile.Windows"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 21,
                  "endColumn": 4,
                  "snippet": {
                    "text": "WORKDIR $CONTAINER_CLOUDWATCHAGENT_PATH\n\nCOPY \"./tmp/windows_${TARGETARCH}\" $CONTAINER_CLOUDWATCHAGENT_PATH\n\nENV RUN_IN_CONTAINER=\"True\"\nCMD [\"start-amazon-cloudwatch-agent.exe\"]",
                    "rendered": {
                      "text": "WORKDIR $CONTAINER_CLOUDWATCHAGENT_PATH\n\nCOPY \"./tmp/windows_${TARGETARCH}\" $CONTAINER_CLOUDWATCHAGENT_PATH\n\nENV RUN_IN_CONTAINER=\"True\"\nCMD [\"start-amazon-cloudwatch-agent.exe\"]",
                      "markdown": "`WORKDIR $CONTAINER_CLOUDWATCHAGENT_PATH\n\nCOPY \"./tmp/windows_${TARGETARCH}\" $CONTAINER_CLOUDWATCHAGENT_PATH\n\nENV RUN_IN_CONTAINER=\"True\"\nCMD [\"start-amazon-cloudwatch-agent.exe\"]`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localdeb/Dockerfile"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 11,
                  "endLine": 6,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\nARG TARGETARCH\n\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\n\n",
                    "rendered": {
                      "text": "\nARG TARGETARCH\n\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\n\n",
                      "markdown": "`\nARG TARGETARCH\n\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localdeb/Dockerfile"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 24,
                  "endColumn": 4,
                  "snippet": {
                    "text": "COPY --from=build /tmp /tmp\nCOPY --from=build /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt\nCOPY --from=build /opt/aws/amazon-cloudwatch-agent /opt/aws/amazon-cloudwatch-agent\n\nENV RUN_IN_CONTAINER=\"True\"\nENTRYPOINT [\"/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\"]\n",
                    "rendered": {
                      "text": "COPY --from=build /tmp /tmp\nCOPY --from=build /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt\nCOPY --from=build /opt/aws/amazon-cloudwatch-agent /opt/aws/amazon-cloudwatch-agent\n\nENV RUN_IN_CONTAINER=\"True\"\nENTRYPOINT [\"/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\"]\n",
                      "markdown": "`COPY --from=build /tmp /tmp\nCOPY --from=build /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt\nCOPY --from=build /opt/aws/amazon-cloudwatch-agent /opt/aws/amazon-cloudwatch-agent\n\nENV RUN_IN_CONTAINER=\"True\"\nENTRYPOINT [\"/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\"]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localdeb/Dockerfile"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 3,
                  "endLine": 12,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nCOPY ${TARGETARCH}/amazon-cloudwatch-agent.deb /tmp/amazon-cloudwatch-agent.deb\n\nRUN dpkg -i -E /tmp/amazon-cloudwatch-agent.deb && \\\n    rm -rf /tmp/* && \\\n    rm -rf /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-config-wizard && \\\n    rm -rf /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl && \\\n",
                    "rendered": {
                      "text": "\nCOPY ${TARGETARCH}/amazon-cloudwatch-agent.deb /tmp/amazon-cloudwatch-agent.deb\n\nRUN dpkg -i -E /tmp/amazon-cloudwatch-agent.deb && \\\n    rm -rf /tmp/* && \\\n    rm -rf /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-config-wizard && \\\n    rm -rf /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl && \\\n",
                      "markdown": "`\nCOPY ${TARGETARCH}/amazon-cloudwatch-agent.deb /tmp/amazon-cloudwatch-agent.deb\n\nRUN dpkg -i -E /tmp/amazon-cloudwatch-agent.deb && \\\n    rm -rf /tmp/* && \\\n    rm -rf /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-config-wizard && \\\n    rm -rf /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl && \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localdeb/Dockerfile"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 3,
                  "endLine": 7,
                  "endColumn": 12,
                  "snippet": {
                    "text": "ARG TARGETARCH\n\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\n\nCOPY ${TARGETARCH}/amazon-cloudwatch-agent.deb /tmp/amazon-cloudwatch-agent.deb\n",
                    "rendered": {
                      "text": "ARG TARGETARCH\n\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\n\nCOPY ${TARGETARCH}/amazon-cloudwatch-agent.deb /tmp/amazon-cloudwatch-agent.deb\n",
                      "markdown": "`ARG TARGETARCH\n\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\n\nCOPY ${TARGETARCH}/amazon-cloudwatch-agent.deb /tmp/amazon-cloudwatch-agent.deb\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localdeb/Dockerfile"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 3,
                  "endLine": 6,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\nARG TARGETARCH\n\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\n\n",
                    "rendered": {
                      "text": "\nARG TARGETARCH\n\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\n\n",
                      "markdown": "`\nARG TARGETARCH\n\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localmsi/Dockerfile.Windows"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 27,
                  "endLine": 32,
                  "endColumn": 4,
                  "snippet": {
                    "text": "COPY --from=builder $CONTAINER_CLOUDWATCHAGENT_PATH $CONTAINER_CLOUDWATCHAGENT_PATH\nCOPY --from=builder $CONTAINER_CLOUDWATCHAGENT_PATH $CONTAINER_CLOUDWATCHAGENT_DATA_PATH\n\nENV RUN_IN_CONTAINER=\"True\"\nCMD [\"start-amazon-cloudwatch-agent.exe\"]\n",
                    "rendered": {
                      "text": "COPY --from=builder $CONTAINER_CLOUDWATCHAGENT_PATH $CONTAINER_CLOUDWATCHAGENT_PATH\nCOPY --from=builder $CONTAINER_CLOUDWATCHAGENT_PATH $CONTAINER_CLOUDWATCHAGENT_DATA_PATH\n\nENV RUN_IN_CONTAINER=\"True\"\nCMD [\"start-amazon-cloudwatch-agent.exe\"]\n",
                      "markdown": "`COPY --from=builder $CONTAINER_CLOUDWATCHAGENT_PATH $CONTAINER_CLOUDWATCHAGENT_PATH\nCOPY --from=builder $CONTAINER_CLOUDWATCHAGENT_PATH $CONTAINER_CLOUDWATCHAGENT_DATA_PATH\n\nENV RUN_IN_CONTAINER=\"True\"\nCMD [\"start-amazon-cloudwatch-agent.exe\"]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localmsi/Dockerfile.Windows"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 31,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nCOPY --from=builder $CONTAINER_CLOUDWATCHAGENT_PATH $CONTAINER_CLOUDWATCHAGENT_PATH\nCOPY --from=builder $CONTAINER_CLOUDWATCHAGENT_PATH $CONTAINER_CLOUDWATCHAGENT_DATA_PATH\n\nENV RUN_IN_CONTAINER=\"True\"\nCMD [\"start-amazon-cloudwatch-agent.exe\"]\n",
                    "rendered": {
                      "text": "\nCOPY --from=builder $CONTAINER_CLOUDWATCHAGENT_PATH $CONTAINER_CLOUDWATCHAGENT_PATH\nCOPY --from=builder $CONTAINER_CLOUDWATCHAGENT_PATH $CONTAINER_CLOUDWATCHAGENT_DATA_PATH\n\nENV RUN_IN_CONTAINER=\"True\"\nCMD [\"start-amazon-cloudwatch-agent.exe\"]\n",
                      "markdown": "`\nCOPY --from=builder $CONTAINER_CLOUDWATCHAGENT_PATH $CONTAINER_CLOUDWATCHAGENT_PATH\nCOPY --from=builder $CONTAINER_CLOUDWATCHAGENT_PATH $CONTAINER_CLOUDWATCHAGENT_DATA_PATH\n\nENV RUN_IN_CONTAINER=\"True\"\nCMD [\"start-amazon-cloudwatch-agent.exe\"]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/Dockerfile"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 11,
                  "endLine": 7,
                  "endColumn": 19,
                  "snippet": {
                    "text": "# https://docs.docker.com/engine/reference/builder/#automatic-platform-args-in-the-global-scope\nARG TARGETARCH\n\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates curl && \\\n    rm -rf /var/lib/apt/lists/*\n\n",
                    "rendered": {
                      "text": "# https://docs.docker.com/engine/reference/builder/#automatic-platform-args-in-the-global-scope\nARG TARGETARCH\n\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates curl && \\\n    rm -rf /var/lib/apt/lists/*\n\n",
                      "markdown": "`# https://docs.docker.com/engine/reference/builder/#automatic-platform-args-in-the-global-scope\nARG TARGETARCH\n\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates curl && \\\n    rm -rf /var/lib/apt/lists/*\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/Dockerfile"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 26,
                  "endColumn": 4,
                  "snippet": {
                    "text": "COPY --from=build /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt\n\nCOPY --from=build /opt/aws/amazon-cloudwatch-agent /opt/aws/amazon-cloudwatch-agent\n\nENV RUN_IN_CONTAINER=\"True\"\nENTRYPOINT [\"/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\"]\n",
                    "rendered": {
                      "text": "COPY --from=build /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt\n\nCOPY --from=build /opt/aws/amazon-cloudwatch-agent /opt/aws/amazon-cloudwatch-agent\n\nENV RUN_IN_CONTAINER=\"True\"\nENTRYPOINT [\"/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\"]\n",
                      "markdown": "`COPY --from=build /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt\n\nCOPY --from=build /opt/aws/amazon-cloudwatch-agent /opt/aws/amazon-cloudwatch-agent\n\nENV RUN_IN_CONTAINER=\"True\"\nENTRYPOINT [\"/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent\"]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/Dockerfile"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 3,
                  "endLine": 12,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    rm -rf /var/lib/apt/lists/*\n\nRUN curl -O https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/${TARGETARCH:-$(dpkg --print-architecture)}/latest/amazon-cloudwatch-agent.deb && \\\n    dpkg -i -E amazon-cloudwatch-agent.deb && \\\n    rm -rf /tmp/* && \\\n    rm -rf /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-config-wizard && \\\n    rm -rf /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl && \\\n",
                    "rendered": {
                      "text": "    rm -rf /var/lib/apt/lists/*\n\nRUN curl -O https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/${TARGETARCH:-$(dpkg --print-architecture)}/latest/amazon-cloudwatch-agent.deb && \\\n    dpkg -i -E amazon-cloudwatch-agent.deb && \\\n    rm -rf /tmp/* && \\\n    rm -rf /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-config-wizard && \\\n    rm -rf /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl && \\\n",
                      "markdown": "`    rm -rf /var/lib/apt/lists/*\n\nRUN curl -O https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/${TARGETARCH:-$(dpkg --print-architecture)}/latest/amazon-cloudwatch-agent.deb && \\\n    dpkg -i -E amazon-cloudwatch-agent.deb && \\\n    rm -rf /tmp/* && \\\n    rm -rf /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-config-wizard && \\\n    rm -rf /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl && \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/Dockerfile"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 3,
                  "endLine": 11,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    apt-get install -y ca-certificates curl && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN curl -O https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/${TARGETARCH:-$(dpkg --print-architecture)}/latest/amazon-cloudwatch-agent.deb && \\\n    dpkg -i -E amazon-cloudwatch-agent.deb && \\\n    rm -rf /tmp/* && \\\n    rm -rf /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-config-wizard && \\\n",
                    "rendered": {
                      "text": "    apt-get install -y ca-certificates curl && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN curl -O https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/${TARGETARCH:-$(dpkg --print-architecture)}/latest/amazon-cloudwatch-agent.deb && \\\n    dpkg -i -E amazon-cloudwatch-agent.deb && \\\n    rm -rf /tmp/* && \\\n    rm -rf /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-config-wizard && \\\n",
                      "markdown": "`    apt-get install -y ca-certificates curl && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN curl -O https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/${TARGETARCH:-$(dpkg --print-architecture)}/latest/amazon-cloudwatch-agent.deb && \\\n    dpkg -i -E amazon-cloudwatch-agent.deb && \\\n    rm -rf /tmp/* && \\\n    rm -rf /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-config-wizard && \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/Dockerfile"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 38,
                  "endLine": 8,
                  "endColumn": 44,
                  "snippet": {
                    "text": "ARG TARGETARCH\n\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates curl && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN curl -O https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/${TARGETARCH:-$(dpkg --print-architecture)}/latest/amazon-cloudwatch-agent.deb && \\\n",
                    "rendered": {
                      "text": "ARG TARGETARCH\n\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates curl && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN curl -O https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/${TARGETARCH:-$(dpkg --print-architecture)}/latest/amazon-cloudwatch-agent.deb && \\\n",
                      "markdown": "`ARG TARGETARCH\n\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates curl && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN curl -O https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/${TARGETARCH:-$(dpkg --print-architecture)}/latest/amazon-cloudwatch-agent.deb && \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/Dockerfile"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 3,
                  "endLine": 8,
                  "endColumn": 12,
                  "snippet": {
                    "text": "ARG TARGETARCH\n\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates curl && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN curl -O https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/${TARGETARCH:-$(dpkg --print-architecture)}/latest/amazon-cloudwatch-agent.deb && \\\n",
                    "rendered": {
                      "text": "ARG TARGETARCH\n\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates curl && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN curl -O https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/${TARGETARCH:-$(dpkg --print-architecture)}/latest/amazon-cloudwatch-agent.deb && \\\n",
                      "markdown": "`ARG TARGETARCH\n\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates curl && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN curl -O https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/${TARGETARCH:-$(dpkg --print-architecture)}/latest/amazon-cloudwatch-agent.deb && \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/Dockerfile"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 3,
                  "endLine": 7,
                  "endColumn": 12,
                  "snippet": {
                    "text": "# https://docs.docker.com/engine/reference/builder/#automatic-platform-args-in-the-global-scope\nARG TARGETARCH\n\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates curl && \\\n    rm -rf /var/lib/apt/lists/*\n\n",
                    "rendered": {
                      "text": "# https://docs.docker.com/engine/reference/builder/#automatic-platform-args-in-the-global-scope\nARG TARGETARCH\n\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates curl && \\\n    rm -rf /var/lib/apt/lists/*\n\n",
                      "markdown": "`# https://docs.docker.com/engine/reference/builder/#automatic-platform-args-in-the-global-scope\nARG TARGETARCH\n\nRUN apt-get update &&  \\\n    apt-get install -y ca-certificates curl && \\\n    rm -rf /var/lib/apt/lists/*\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/Dockerfile"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 37,
                  "endLine": 3,
                  "endColumn": 45,
                  "snippet": {
                    "text": "FROM ubuntu:latest as build\n\n# NOTE: This arg will be populated by docker buildx\n# https://docs.docker.com/engine/reference/builder/#automatic-platform-args-in-the-global-scope\nARG TARGETARCH\n\n",
                    "rendered": {
                      "text": "FROM ubuntu:latest as build\n\n# NOTE: This arg will be populated by docker buildx\n# https://docs.docker.com/engine/reference/builder/#automatic-platform-args-in-the-global-scope\nARG TARGETARCH\n\n",
                      "markdown": "`FROM ubuntu:latest as build\n\n# NOTE: This arg will be populated by docker buildx\n# https://docs.docker.com/engine/reference/builder/#automatic-platform-args-in-the-global-scope\nARG TARGETARCH\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/README.md"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 63,
                  "endLine": 19,
                  "endColumn": 67,
                  "snippet": {
                    "text": "docker buildx use multi-builder\n# Add proper tag and --push if you want to publish it\ndocker buildx build --platform linux/amd64,linux/arm64 .\n# To build multi arch image from source code, run the following at project root\ndocker buildx build --platform linux/amd64,linux/arm64 -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/Dockerfile .\n```\n\n",
                    "rendered": {
                      "text": "docker buildx use multi-builder\n# Add proper tag and --push if you want to publish it\ndocker buildx build --platform linux/amd64,linux/arm64 .\n# To build multi arch image from source code, run the following at project root\ndocker buildx build --platform linux/amd64,linux/arm64 -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/Dockerfile .\n```\n\n",
                      "markdown": "`docker buildx use multi-builder\n# Add proper tag and --push if you want to publish it\ndocker buildx build --platform linux/amd64,linux/arm64 .\n# To build multi arch image from source code, run the following at project root\ndocker buildx build --platform linux/amd64,linux/arm64 -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/Dockerfile .\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/README.md"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 94,
                  "endLine": 5,
                  "endColumn": 98,
                  "snippet": {
                    "text": "\n- [Dockerfile](Dockerfile) builds from the [latest release published on s3](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/install-CloudWatch-Agent-commandline-fleet.html)\n- [localdeb](localdeb/Dockerfile) builds from a local deb file\n- [source](source/Dockerfile) builds from source code, you can execute `make dockerized-build` at project root.\n\n## Multi arch image\n\n",
                    "rendered": {
                      "text": "\n- [Dockerfile](Dockerfile) builds from the [latest release published on s3](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/install-CloudWatch-Agent-commandline-fleet.html)\n- [localdeb](localdeb/Dockerfile) builds from a local deb file\n- [source](source/Dockerfile) builds from source code, you can execute `make dockerized-build` at project root.\n\n## Multi arch image\n\n",
                      "markdown": "`\n- [Dockerfile](Dockerfile) builds from the [latest release published on s3](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/install-CloudWatch-Agent-commandline-fleet.html)\n- [localdeb](localdeb/Dockerfile) builds from a local deb file\n- [source](source/Dockerfile) builds from source code, you can execute `make dockerized-build` at project root.\n\n## Multi arch image\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/README.md"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 113,
                  "endLine": 41,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# {\n#   \"experimental\": \"enabled\"\n# }\ndocker manifest create cloudwatch-agent:foo --amend cloudwatch-agent:foo-arm64 --amend cloudwatch-agent:foo-amd64\ndocker manifest push cloudwatch-agent:foo\n```\n\nExample using `manifest-tool` and ECR, make sure to replace `{{account_id}}` and `{{aws_region}}` with your AWS account id and region.\n",
                    "rendered": {
                      "text": "# {\n#   \"experimental\": \"enabled\"\n# }\ndocker manifest create cloudwatch-agent:foo --amend cloudwatch-agent:foo-arm64 --amend cloudwatch-agent:foo-amd64\ndocker manifest push cloudwatch-agent:foo\n```\n\nExample using `manifest-tool` and ECR, make sure to replace `{{account_id}}` and `{{aws_region}}` with your AWS account id and region.\n",
                      "markdown": "`# {\n#   \"experimental\": \"enabled\"\n# }\ndocker manifest create cloudwatch-agent:foo --amend cloudwatch-agent:foo-arm64 --amend cloudwatch-agent:foo-amd64\ndocker manifest push cloudwatch-agent:foo\n```\n\nExample using `manifest-tool` and ECR, make sure to replace `{{account_id}}` and `{{aws_region}}` with your AWS account id and region.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/README.md"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 3,
                  "endLine": 40,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# enable experimental in your ~/.docker/config.json with:\n# {\n#   \"experimental\": \"enabled\"\n# }\ndocker manifest create cloudwatch-agent:foo --amend cloudwatch-agent:foo-arm64 --amend cloudwatch-agent:foo-amd64\ndocker manifest push cloudwatch-agent:foo\n```\n\n",
                    "rendered": {
                      "text": "# enable experimental in your ~/.docker/config.json with:\n# {\n#   \"experimental\": \"enabled\"\n# }\ndocker manifest create cloudwatch-agent:foo --amend cloudwatch-agent:foo-arm64 --amend cloudwatch-agent:foo-amd64\ndocker manifest push cloudwatch-agent:foo\n```\n\n",
                      "markdown": "`# enable experimental in your ~/.docker/config.json with:\n# {\n#   \"experimental\": \"enabled\"\n# }\ndocker manifest create cloudwatch-agent:foo --amend cloudwatch-agent:foo-arm64 --amend cloudwatch-agent:foo-amd64\ndocker manifest push cloudwatch-agent:foo\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/README.md"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 43,
                  "endLine": 35,
                  "endColumn": 51,
                  "snippet": {
                    "text": "Example using `docker manifest`\n\n```bash\n# NOTE: manifest is a experimental command, docker versions released after mid 2018 should have it \n# enable experimental in your ~/.docker/config.json with:\n# {\n#   \"experimental\": \"enabled\"\n",
                    "rendered": {
                      "text": "Example using `docker manifest`\n\n```bash\n# NOTE: manifest is a experimental command, docker versions released after mid 2018 should have it \n# enable experimental in your ~/.docker/config.json with:\n# {\n#   \"experimental\": \"enabled\"\n",
                      "markdown": "`Example using `docker manifest`\n\n```bash\n# NOTE: manifest is a experimental command, docker versions released after mid 2018 should have it \n# enable experimental in your ~/.docker/config.json with:\n# {\n#   \"experimental\": \"enabled\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/README.md"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 206,
                  "endLine": 30,
                  "endColumn": 214,
                  "snippet": {
                    "text": "\n- Single arch images should already exists on registry first because the multi arch image is reference to existing images on the registry.\n  - `docker buildx` is an exception because it pushes blob to registry without creating a new tag for the single arch images.\n- Both [docker manifest](https://docs.docker.com/engine/reference/commandline/manifest/) command and [manifest-tool](https://github.com/estesp/manifest-tool) should work, `manifest-tool` does not requires a docker daemon.\n\nExample using `docker manifest`\n\n",
                    "rendered": {
                      "text": "\n- Single arch images should already exists on registry first because the multi arch image is reference to existing images on the registry.\n  - `docker buildx` is an exception because it pushes blob to registry without creating a new tag for the single arch images.\n- Both [docker manifest](https://docs.docker.com/engine/reference/commandline/manifest/) command and [manifest-tool](https://github.com/estesp/manifest-tool) should work, `manifest-tool` does not requires a docker daemon.\n\nExample using `docker manifest`\n\n",
                      "markdown": "`\n- Single arch images should already exists on registry first because the multi arch image is reference to existing images on the registry.\n  - `docker buildx` is an exception because it pushes blob to registry without creating a new tag for the single arch images.\n- Both [docker manifest](https://docs.docker.com/engine/reference/commandline/manifest/) command and [manifest-tool](https://github.com/estesp/manifest-tool) should work, `manifest-tool` does not requires a docker daemon.\n\nExample using `docker manifest`\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/README.md"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 79,
                  "endLine": 20,
                  "endColumn": 7,
                  "snippet": {
                    "text": "docker buildx use multi-builder\n# Add proper tag and --push if you want to publish it\ndocker buildx build --platform linux/amd64,linux/arm64 .\n# To build multi arch image from source code, run the following at project root\ndocker buildx build --platform linux/amd64,linux/arm64 -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/Dockerfile .\n```\n\n### Build multi arch image manifest from single arch images\n",
                    "rendered": {
                      "text": "docker buildx use multi-builder\n# Add proper tag and --push if you want to publish it\ndocker buildx build --platform linux/amd64,linux/arm64 .\n# To build multi arch image from source code, run the following at project root\ndocker buildx build --platform linux/amd64,linux/arm64 -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/Dockerfile .\n```\n\n### Build multi arch image manifest from single arch images\n",
                      "markdown": "`docker buildx use multi-builder\n# Add proper tag and --push if you want to publish it\ndocker buildx build --platform linux/amd64,linux/arm64 .\n# To build multi arch image from source code, run the following at project root\ndocker buildx build --platform linux/amd64,linux/arm64 -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/Dockerfile .\n```\n\n### Build multi arch image manifest from single arch images\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/README.md"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 53,
                  "endLine": 18,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# NOTE: you need to create a builder, the name does not matter, you have a default one out of box, but that does not work multi-arch\ndocker buildx create --name multi-builder\ndocker buildx use multi-builder\n# Add proper tag and --push if you want to publish it\ndocker buildx build --platform linux/amd64,linux/arm64 .\n# To build multi arch image from source code, run the following at project root\ndocker buildx build --platform linux/amd64,linux/arm64 -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/Dockerfile .\n```\n",
                    "rendered": {
                      "text": "# NOTE: you need to create a builder, the name does not matter, you have a default one out of box, but that does not work multi-arch\ndocker buildx create --name multi-builder\ndocker buildx use multi-builder\n# Add proper tag and --push if you want to publish it\ndocker buildx build --platform linux/amd64,linux/arm64 .\n# To build multi arch image from source code, run the following at project root\ndocker buildx build --platform linux/amd64,linux/arm64 -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/Dockerfile .\n```\n",
                      "markdown": "`# NOTE: you need to create a builder, the name does not matter, you have a default one out of box, but that does not work multi-arch\ndocker buildx create --name multi-builder\ndocker buildx use multi-builder\n# Add proper tag and --push if you want to publish it\ndocker buildx build --platform linux/amd64,linux/arm64 .\n# To build multi arch image from source code, run the following at project root\ndocker buildx build --platform linux/amd64,linux/arm64 -f amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/Dockerfile .\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/README.md"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 41,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\n```bash\n# NOTE: you need to create a builder, the name does not matter, you have a default one out of box, but that does not work multi-arch\ndocker buildx create --name multi-builder\ndocker buildx use multi-builder\n# Add proper tag and --push if you want to publish it\ndocker buildx build --platform linux/amd64,linux/arm64 .\n# To build multi arch image from source code, run the following at project root\n",
                    "rendered": {
                      "text": "\n```bash\n# NOTE: you need to create a builder, the name does not matter, you have a default one out of box, but that does not work multi-arch\ndocker buildx create --name multi-builder\ndocker buildx use multi-builder\n# Add proper tag and --push if you want to publish it\ndocker buildx build --platform linux/amd64,linux/arm64 .\n# To build multi arch image from source code, run the following at project root\n",
                      "markdown": "`\n```bash\n# NOTE: you need to create a builder, the name does not matter, you have a default one out of box, but that does not work multi-arch\ndocker buildx create --name multi-builder\ndocker buildx use multi-builder\n# Add proper tag and --push if you want to publish it\ndocker buildx build --platform linux/amd64,linux/arm64 .\n# To build multi arch image from source code, run the following at project root\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/README.md"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 132,
                  "endLine": 15,
                  "endColumn": 7,
                  "snippet": {
                    "text": "- Make sure you are using the edge version instead of stable (btw: they [just got merged into one installer](https://docs.docker.com/docker-for-mac/faqs/#where-can-i-find-information-about-stable-and-edge-releases))\n\n```bash\n# NOTE: you need to create a builder, the name does not matter, you have a default one out of box, but that does not work multi-arch\ndocker buildx create --name multi-builder\ndocker buildx use multi-builder\n# Add proper tag and --push if you want to publish it\ndocker buildx build --platform linux/amd64,linux/arm64 .\n",
                    "rendered": {
                      "text": "- Make sure you are using the edge version instead of stable (btw: they [just got merged into one installer](https://docs.docker.com/docker-for-mac/faqs/#where-can-i-find-information-about-stable-and-edge-releases))\n\n```bash\n# NOTE: you need to create a builder, the name does not matter, you have a default one out of box, but that does not work multi-arch\ndocker buildx create --name multi-builder\ndocker buildx use multi-builder\n# Add proper tag and --push if you want to publish it\ndocker buildx build --platform linux/amd64,linux/arm64 .\n",
                      "markdown": "`- Make sure you are using the edge version instead of stable (btw: they [just got merged into one installer](https://docs.docker.com/docker-for-mac/faqs/#where-can-i-find-information-about-stable-and-edge-releases))\n\n```bash\n# NOTE: you need to create a builder, the name does not matter, you have a default one out of box, but that does not work multi-arch\ndocker buildx create --name multi-builder\ndocker buildx use multi-builder\n# Add proper tag and --push if you want to publish it\ndocker buildx build --platform linux/amd64,linux/arm64 .\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/k8sCommon/k8sclient/endpoint.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 39,
                  "endLine": 33,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\tNamespace   string\n}\n\nfunc NewService(name, namespace string) Service {\n\treturn Service{ServiceName: name, Namespace: namespace}\n}\n\n",
                    "rendered": {
                      "text": "\tNamespace   string\n}\n\nfunc NewService(name, namespace string) Service {\n\treturn Service{ServiceName: name, Namespace: namespace}\n}\n\n",
                      "markdown": "`\tNamespace   string\n}\n\nfunc NewService(name, namespace string) Service {\n\treturn Service{ServiceName: name, Namespace: namespace}\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/k8sCommon/k8sclient/endpoint.go"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 4,
                  "endLine": 28,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\t\"github.com/aws/amazon-cloudwatch-agent/internal/k8sCommon/k8sutil\"\n)\n\ntype Service struct {\n\tServiceName string\n\tNamespace   string\n}\n",
                    "rendered": {
                      "text": "\t\"github.com/aws/amazon-cloudwatch-agent/internal/k8sCommon/k8sutil\"\n)\n\ntype Service struct {\n\tServiceName string\n\tNamespace   string\n}\n",
                      "markdown": "`\t\"github.com/aws/amazon-cloudwatch-agent/internal/k8sCommon/k8sutil\"\n)\n\ntype Service struct {\n\tServiceName string\n\tNamespace   string\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/k8sCommon/k8sclient/node_test.go"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 19,
                  "endLine": 215,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\t\t\t\t\"beta.kubernetes.io/os\":                    \"linux\",\n\t\t\t\t\"failure-domain.beta.kubernetes.io/region\": \"eu-west-1\",\n\t\t\t\t\"failure-domain.beta.kubernetes.io/zone\":   \"eu-west-1b\",\n\t\t\t\t\"kubernetes.io/hostname\":                   \"ip-192-168-153-1.eu-west-1.compute.internal\",\n\t\t\t},\n\t\t\tAnnotations: map[string]string{\n\t\t\t\t\"node.alpha.kubernetes.io/ttl\":                           \"0\",\n",
                    "rendered": {
                      "text": "\t\t\t\t\"beta.kubernetes.io/os\":                    \"linux\",\n\t\t\t\t\"failure-domain.beta.kubernetes.io/region\": \"eu-west-1\",\n\t\t\t\t\"failure-domain.beta.kubernetes.io/zone\":   \"eu-west-1b\",\n\t\t\t\t\"kubernetes.io/hostname\":                   \"ip-192-168-153-1.eu-west-1.compute.internal\",\n\t\t\t},\n\t\t\tAnnotations: map[string]string{\n\t\t\t\t\"node.alpha.kubernetes.io/ttl\":                           \"0\",\n",
                      "markdown": "`\t\t\t\t\"beta.kubernetes.io/os\":                    \"linux\",\n\t\t\t\t\"failure-domain.beta.kubernetes.io/region\": \"eu-west-1\",\n\t\t\t\t\"failure-domain.beta.kubernetes.io/zone\":   \"eu-west-1b\",\n\t\t\t\t\"kubernetes.io/hostname\":                   \"ip-192-168-153-1.eu-west-1.compute.internal\",\n\t\t\t},\n\t\t\tAnnotations: map[string]string{\n\t\t\t\t\"node.alpha.kubernetes.io/ttl\":                           \"0\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/k8sCommon/k8sclient/node_test.go"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 19,
                  "endLine": 123,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\t\t\t\t\"beta.kubernetes.io/os\":                    \"linux\",\n\t\t\t\t\"failure-domain.beta.kubernetes.io/region\": \"eu-west-1\",\n\t\t\t\t\"failure-domain.beta.kubernetes.io/zone\":   \"eu-west-1a\",\n\t\t\t\t\"kubernetes.io/hostname\":                   \"ip-192-168-76-61.eu-west-1.compute.internal\",\n\t\t\t\t\"beta.kubernetes.io/arch\":                  \"amd64\",\n\t\t\t\t\"beta.kubernetes.io/instance-type\":         \"t3.medium\",\n\t\t\t},\n",
                    "rendered": {
                      "text": "\t\t\t\t\"beta.kubernetes.io/os\":                    \"linux\",\n\t\t\t\t\"failure-domain.beta.kubernetes.io/region\": \"eu-west-1\",\n\t\t\t\t\"failure-domain.beta.kubernetes.io/zone\":   \"eu-west-1a\",\n\t\t\t\t\"kubernetes.io/hostname\":                   \"ip-192-168-76-61.eu-west-1.compute.internal\",\n\t\t\t\t\"beta.kubernetes.io/arch\":                  \"amd64\",\n\t\t\t\t\"beta.kubernetes.io/instance-type\":         \"t3.medium\",\n\t\t\t},\n",
                      "markdown": "`\t\t\t\t\"beta.kubernetes.io/os\":                    \"linux\",\n\t\t\t\t\"failure-domain.beta.kubernetes.io/region\": \"eu-west-1\",\n\t\t\t\t\"failure-domain.beta.kubernetes.io/zone\":   \"eu-west-1a\",\n\t\t\t\t\"kubernetes.io/hostname\":                   \"ip-192-168-76-61.eu-west-1.compute.internal\",\n\t\t\t\t\"beta.kubernetes.io/arch\":                  \"amd64\",\n\t\t\t\t\"beta.kubernetes.io/instance-type\":         \"t3.medium\",\n\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/k8sCommon/k8sclient/node_test.go"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 19,
                  "endLine": 35,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\t\t\t\t\"beta.kubernetes.io/os\":                    \"linux\",\n\t\t\t\t\"failure-domain.beta.kubernetes.io/region\": \"eu-west-1\",\n\t\t\t\t\"failure-domain.beta.kubernetes.io/zone\":   \"eu-west-1c\",\n\t\t\t\t\"kubernetes.io/hostname\":                   \"ip-192-168-200-63.eu-west-1.compute.internal\",\n\t\t\t},\n\t\t\tAnnotations: map[string]string{\n\t\t\t\t\"node.alpha.kubernetes.io/ttl\":                           \"0\",\n",
                    "rendered": {
                      "text": "\t\t\t\t\"beta.kubernetes.io/os\":                    \"linux\",\n\t\t\t\t\"failure-domain.beta.kubernetes.io/region\": \"eu-west-1\",\n\t\t\t\t\"failure-domain.beta.kubernetes.io/zone\":   \"eu-west-1c\",\n\t\t\t\t\"kubernetes.io/hostname\":                   \"ip-192-168-200-63.eu-west-1.compute.internal\",\n\t\t\t},\n\t\t\tAnnotations: map[string]string{\n\t\t\t\t\"node.alpha.kubernetes.io/ttl\":                           \"0\",\n",
                      "markdown": "`\t\t\t\t\"beta.kubernetes.io/os\":                    \"linux\",\n\t\t\t\t\"failure-domain.beta.kubernetes.io/region\": \"eu-west-1\",\n\t\t\t\t\"failure-domain.beta.kubernetes.io/zone\":   \"eu-west-1c\",\n\t\t\t\t\"kubernetes.io/hostname\":                   \"ip-192-168-200-63.eu-west-1.compute.internal\",\n\t\t\t},\n\t\t\tAnnotations: map[string]string{\n\t\t\t\t\"node.alpha.kubernetes.io/ttl\":                           \"0\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/servicediscovery.go"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 28,
                  "endLine": 103,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n\t_, err := time.ParseDuration(sd.Config.Frequency)\n\tif err != nil {\n\t\tlog.Printf(\"E! Invalid ECS service discovery frequency: %v.\\n\", sd.Config.Frequency)\n\t\treturn false\n\t}\n\n",
                    "rendered": {
                      "text": "\n\t_, err := time.ParseDuration(sd.Config.Frequency)\n\tif err != nil {\n\t\tlog.Printf(\"E! Invalid ECS service discovery frequency: %v.\\n\", sd.Config.Frequency)\n\t\treturn false\n\t}\n\n",
                      "markdown": "`\n\t_, err := time.ParseDuration(sd.Config.Frequency)\n\tif err != nil {\n\t\tlog.Printf(\"E! Invalid ECS service discovery frequency: %v.\\n\", sd.Config.Frequency)\n\t\treturn false\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/servicediscovery.go"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 95,
                  "endLine": 92,
                  "endColumn": 104,
                  "snippet": {
                    "text": "\t}\n\n\tif sd.Config.DockerLabel == nil && len(sd.Config.TaskDefinitions) == 0 && len(sd.Config.ServiceNamesForTasks) == 0 {\n\t\tlog.Printf(\"E! Neither docker label based discovery, nor task definition based discovery, nor service name based discovery is enabled.\\n\")\n\t\treturn false\n\t}\n\n",
                    "rendered": {
                      "text": "\t}\n\n\tif sd.Config.DockerLabel == nil && len(sd.Config.TaskDefinitions) == 0 && len(sd.Config.ServiceNamesForTasks) == 0 {\n\t\tlog.Printf(\"E! Neither docker label based discovery, nor task definition based discovery, nor service name based discovery is enabled.\\n\")\n\t\treturn false\n\t}\n\n",
                      "markdown": "`\t}\n\n\tif sd.Config.DockerLabel == nil && len(sd.Config.TaskDefinitions) == 0 && len(sd.Config.ServiceNamesForTasks) == 0 {\n\t\tlog.Printf(\"E! Neither docker label based discovery, nor task definition based discovery, nor service name based discovery is enabled.\\n\")\n\t\treturn false\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/ecsservicediscovery/servicediscovery.go"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 24,
                  "endLine": 92,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\t}\n\n\tif sd.Config.DockerLabel == nil && len(sd.Config.TaskDefinitions) == 0 && len(sd.Config.ServiceNamesForTasks) == 0 {\n\t\tlog.Printf(\"E! Neither docker label based discovery, nor task definition based discovery, nor service name based discovery is enabled.\\n\")\n\t\treturn false\n\t}\n\n",
                    "rendered": {
                      "text": "\t}\n\n\tif sd.Config.DockerLabel == nil && len(sd.Config.TaskDefinitions) == 0 && len(sd.Config.ServiceNamesForTasks) == 0 {\n\t\tlog.Printf(\"E! Neither docker label based discovery, nor task definition based discovery, nor service name based discovery is enabled.\\n\")\n\t\treturn false\n\t}\n\n",
                      "markdown": "`\t}\n\n\tif sd.Config.DockerLabel == nil && len(sd.Config.TaskDefinitions) == 0 && len(sd.Config.ServiceNamesForTasks) == 0 {\n\t\tlog.Printf(\"E! Neither docker label based discovery, nor task definition based discovery, nor service name based discovery is enabled.\\n\")\n\t\treturn false\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/util/security/unix_permission.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 64,
                  "endLine": 33,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\t\treturn nil\n\t}\n\n\treturn fmt.Errorf(\"File's owner does not have enough permission at path %s\", filePath)\n}\n\n// CheckFileOwnerRights check that the given owner is the same owner of the given filepath\n",
                    "rendered": {
                      "text": "\t\treturn nil\n\t}\n\n\treturn fmt.Errorf(\"File's owner does not have enough permission at path %s\", filePath)\n}\n\n// CheckFileOwnerRights check that the given owner is the same owner of the given filepath\n",
                      "markdown": "`\t\treturn nil\n\t}\n\n\treturn fmt.Errorf(\"File's owner does not have enough permission at path %s\", filePath)\n}\n\n// CheckFileOwnerRights check that the given owner is the same owner of the given filepath\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/util/user/userutil_test.go"
                },
                "region": {
                  "startLine": 76,
                  "endLine": 76,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\n\t// Call changeFileOwner\n\tvar mc MockChowner\n\tchown = mc.Chown\n\tconst someUid, someGid = 1111, 9999\n\tchangeFileOwner(someUid, someGid)\n\n",
                    "rendered": {
                      "text": "\n\t// Call changeFileOwner\n\tvar mc MockChowner\n\tchown = mc.Chown\n\tconst someUid, someGid = 1111, 9999\n\tchangeFileOwner(someUid, someGid)\n\n",
                      "markdown": "`\n\t// Call changeFileOwner\n\tvar mc MockChowner\n\tchown = mc.Chown\n\tconst someUid, someGid = 1111, 9999\n\tchangeFileOwner(someUid, someGid)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/publisher/publisher.go"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 40,
                  "endLine": 111,
                  "endColumn": 49,
                  "snippet": {
                    "text": "}\n\n// return true if timeout happen before wg is done\nfunc waitWithTimeout(wg *sync.WaitGroup, timeout time.Duration) bool {\n\tc := make(chan struct{})\n\tgo func() {\n\t\tdefer close(c)\n",
                    "rendered": {
                      "text": "}\n\n// return true if timeout happen before wg is done\nfunc waitWithTimeout(wg *sync.WaitGroup, timeout time.Duration) bool {\n\tc := make(chan struct{})\n\tgo func() {\n\t\tdefer close(c)\n",
                      "markdown": "`}\n\n// return true if timeout happen before wg is done\nfunc waitWithTimeout(wg *sync.WaitGroup, timeout time.Duration) bool {\n\tc := make(chan struct{})\n\tgo func() {\n\t\tdefer close(c)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/httpclient/httpclient.go"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 22,
                  "endLine": 57,
                  "endColumn": 27,
                  "snippet": {
                    "text": "}\n\nfunc (h *HttpClient) request(endpoint string) ([]byte, error) {\n\tresp, err := h.client.Get(endpoint)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"unable to get response from %s, error: %v\", endpoint, err)\n\t}\n",
                    "rendered": {
                      "text": "}\n\nfunc (h *HttpClient) request(endpoint string) ([]byte, error) {\n\tresp, err := h.client.Get(endpoint)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"unable to get response from %s, error: %v\", endpoint, err)\n\t}\n",
                      "markdown": "`}\n\nfunc (h *HttpClient) request(endpoint string) ([]byte, error) {\n\tresp, err := h.client.Get(endpoint)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"unable to get response from %s, error: %v\", endpoint, err)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/httpclient/httpclient.go"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 15,
                  "endLine": 47,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\nfunc (h *HttpClient) Request(endpoint string) (body []byte, err error) {\n\tfor i := 0; i < h.maxRetries; i++ {\n\t\tbody, err = h.request(endpoint)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"W! retry [%d/%d], unable to get http response from %s, error: %v\", i, h.maxRetries, endpoint, err)\n\t\t\th.backoffSleep(i)\n",
                    "rendered": {
                      "text": "\nfunc (h *HttpClient) Request(endpoint string) (body []byte, err error) {\n\tfor i := 0; i < h.maxRetries; i++ {\n\t\tbody, err = h.request(endpoint)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"W! retry [%d/%d], unable to get http response from %s, error: %v\", i, h.maxRetries, endpoint, err)\n\t\t\th.backoffSleep(i)\n",
                      "markdown": "`\nfunc (h *HttpClient) Request(endpoint string) (body []byte, err error) {\n\tfor i := 0; i < h.maxRetries; i++ {\n\t\tbody, err = h.request(endpoint)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"W! retry [%d/%d], unable to get http response from %s, error: %v\", i, h.maxRetries, endpoint, err)\n\t\t\th.backoffSleep(i)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/containerinsightscommon/nodeCapacity.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 7,
                  "endLine": 30,
                  "snippet": {
                    "text": "\tnc := &NodeCapacity{}\n\tnc.parseCpu()\n\tnc.parseMemory()\n\treturn nc\n}\n\nfunc (n *NodeCapacity) parseMemory() {\n\tif memStats, err := mem.VirtualMemory(); err == nil {\n",
                    "rendered": {
                      "text": "\tnc := &NodeCapacity{}\n\tnc.parseCpu()\n\tnc.parseMemory()\n\treturn nc\n}\n\nfunc (n *NodeCapacity) parseMemory() {\n\tif memStats, err := mem.VirtualMemory(); err == nil {\n",
                      "markdown": "`\tnc := &NodeCapacity{}\n\tnc.parseCpu()\n\tnc.parseMemory()\n\treturn nc\n}\n\nfunc (n *NodeCapacity) parseMemory() {\n\tif memStats, err := mem.VirtualMemory(); err == nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/containerinsightscommon/nodeCapacity.go"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 26,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\tif err := os.Setenv(GoPSUtilProcDirEnv, \"/rootfs/proc\"); err != nil {\n\t\tlog.Printf(\"E! NodeCapacity cannot set goPSUtilProcDirEnv to /rootfs/proc %v\", err)\n\t}\n\tnc := &NodeCapacity{}\n\tnc.parseCpu()\n\tnc.parseMemory()\n\treturn nc\n",
                    "rendered": {
                      "text": "\tif err := os.Setenv(GoPSUtilProcDirEnv, \"/rootfs/proc\"); err != nil {\n\t\tlog.Printf(\"E! NodeCapacity cannot set goPSUtilProcDirEnv to /rootfs/proc %v\", err)\n\t}\n\tnc := &NodeCapacity{}\n\tnc.parseCpu()\n\tnc.parseMemory()\n\treturn nc\n",
                      "markdown": "`\tif err := os.Setenv(GoPSUtilProcDirEnv, \"/rootfs/proc\"); err != nil {\n\t\tlog.Printf(\"E! NodeCapacity cannot set goPSUtilProcDirEnv to /rootfs/proc %v\", err)\n\t}\n\tnc := &NodeCapacity{}\n\tnc.parseCpu()\n\tnc.parseMemory()\n\treturn nc\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/containerinsightscommon/util.go"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 10,
                  "endLine": 53,
                  "snippet": {
                    "text": "\tcase TypeContainer, TypeContainerDiskIO, TypeContainerFS, TypeGpuContainer:\n\t\tprefix = containerPrefix\n\tcase TypeService:\n\t\tprefix = service\n\tcase TypeCluster, TypeGpuCluster:\n\t\tprefix = cluster\n\tcase K8sNamespace:\n\t\tprefix = namespace\n",
                    "rendered": {
                      "text": "\tcase TypeContainer, TypeContainerDiskIO, TypeContainerFS, TypeGpuContainer:\n\t\tprefix = containerPrefix\n\tcase TypeService:\n\t\tprefix = service\n\tcase TypeCluster, TypeGpuCluster:\n\t\tprefix = cluster\n\tcase K8sNamespace:\n\t\tprefix = namespace\n",
                      "markdown": "`\tcase TypeContainer, TypeContainerDiskIO, TypeContainerFS, TypeGpuContainer:\n\t\tprefix = containerPrefix\n\tcase TypeService:\n\t\tprefix = service\n\tcase TypeCluster, TypeGpuCluster:\n\t\tprefix = cluster\n\tcase K8sNamespace:\n\t\tprefix = namespace\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/containerinsightscommon/util.go"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 32,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tpodPrefix := \"pod_\"\n\tpodNetPrefix := \"pod_interface_\"\n\tcontainerPrefix := \"container_\"\n\tservice := \"service_\"\n\tcluster := \"cluster_\"\n\tnamespace := \"namespace_\"\n\n",
                    "rendered": {
                      "text": "\tpodPrefix := \"pod_\"\n\tpodNetPrefix := \"pod_interface_\"\n\tcontainerPrefix := \"container_\"\n\tservice := \"service_\"\n\tcluster := \"cluster_\"\n\tnamespace := \"namespace_\"\n\n",
                      "markdown": "`\tpodPrefix := \"pod_\"\n\tpodNetPrefix := \"pod_interface_\"\n\tcontainerPrefix := \"container_\"\n\tservice := \"service_\"\n\tcluster := \"cluster_\"\n\tnamespace := \"namespace_\"\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/exec.go"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 28,
                  "endLine": 48,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n// RunTimeout runs the given command with the given timeout.\n// If the command times out, it attempts to kill the process.\nfunc RunTimeout(c *exec.Cmd, timeout time.Duration) error {\n\tif err := c.Start(); err != nil {\n\t\treturn err\n\t}\n",
                    "rendered": {
                      "text": "\n// RunTimeout runs the given command with the given timeout.\n// If the command times out, it attempts to kill the process.\nfunc RunTimeout(c *exec.Cmd, timeout time.Duration) error {\n\tif err := c.Start(); err != nil {\n\t\treturn err\n\t}\n",
                      "markdown": "`\n// RunTimeout runs the given command with the given timeout.\n// If the command times out, it attempts to kill the process.\nfunc RunTimeout(c *exec.Cmd, timeout time.Duration) error {\n\tif err := c.Start(); err != nil {\n\t\treturn err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/exec.go"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 34,
                  "endLine": 35,
                  "endColumn": 43,
                  "snippet": {
                    "text": "// StdOutputTimeout runs the given command with the given timeout and\n// returns the output of stdout.\n// If the command times out, it attempts to kill the process.\nfunc StdOutputTimeout(c *exec.Cmd, timeout time.Duration) ([]byte, error) {\n\tvar b bytes.Buffer\n\tc.Stdout = &b\n\tc.Stderr = nil\n",
                    "rendered": {
                      "text": "// StdOutputTimeout runs the given command with the given timeout and\n// returns the output of stdout.\n// If the command times out, it attempts to kill the process.\nfunc StdOutputTimeout(c *exec.Cmd, timeout time.Duration) ([]byte, error) {\n\tvar b bytes.Buffer\n\tc.Stdout = &b\n\tc.Stderr = nil\n",
                      "markdown": "`// StdOutputTimeout runs the given command with the given timeout and\n// returns the output of stdout.\n// If the command times out, it attempts to kill the process.\nfunc StdOutputTimeout(c *exec.Cmd, timeout time.Duration) ([]byte, error) {\n\tvar b bytes.Buffer\n\tc.Stdout = &b\n\tc.Stderr = nil\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/internal/exec.go"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 39,
                  "endLine": 21,
                  "endColumn": 48,
                  "snippet": {
                    "text": "// CombinedOutputTimeout runs the given command with the given timeout and\n// returns the combined output of stdout and stderr.\n// If the command times out, it attempts to kill the process.\nfunc CombinedOutputTimeout(c *exec.Cmd, timeout time.Duration) ([]byte, error) {\n\tvar b bytes.Buffer\n\tc.Stdout = &b\n\tc.Stderr = &b\n",
                    "rendered": {
                      "text": "// CombinedOutputTimeout runs the given command with the given timeout and\n// returns the combined output of stdout and stderr.\n// If the command times out, it attempts to kill the process.\nfunc CombinedOutputTimeout(c *exec.Cmd, timeout time.Duration) ([]byte, error) {\n\tvar b bytes.Buffer\n\tc.Stdout = &b\n\tc.Stderr = &b\n",
                      "markdown": "`// CombinedOutputTimeout runs the given command with the given timeout and\n// returns the combined output of stdout and stderr.\n// If the command times out, it attempts to kill the process.\nfunc CombinedOutputTimeout(c *exec.Cmd, timeout time.Duration) ([]byte, error) {\n\tvar b bytes.Buffer\n\tc.Stdout = &b\n\tc.Stderr = &b\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/RELEASE_NOTES"
                },
                "region": {
                  "startLine": 791,
                  "startColumn": 29,
                  "endLine": 791,
                  "endColumn": 33,
                  "snippet": {
                    "text": "* Supports collection of high-resolution metrics (sub-minute\n  granularity)\n\n* Optionally produces metrics at a sub-resource level (per cpu-thread,\n  per mounted-filesystem, per network-interface)\n\n* Collects logs from text files and Windows Event Logs\n",
                    "rendered": {
                      "text": "* Supports collection of high-resolution metrics (sub-minute\n  granularity)\n\n* Optionally produces metrics at a sub-resource level (per cpu-thread,\n  per mounted-filesystem, per network-interface)\n\n* Collects logs from text files and Windows Event Logs\n",
                      "markdown": "`* Supports collection of high-resolution metrics (sub-minute\n  granularity)\n\n* Optionally produces metrics at a sub-resource level (per cpu-thread,\n  per mounted-filesystem, per network-interface)\n\n* Collects logs from text files and Windows Event Logs\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/RELEASE_NOTES"
                },
                "region": {
                  "startLine": 536,
                  "startColumn": 1,
                  "endLine": 536,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nNew Features and Enhancements:\n\n* Expand the translator by exposing an API to override schema\n* Allow translator plugins to specify and override metricPath\n* Ignore +/-Inf values in prometheus metrics\n\n",
                    "rendered": {
                      "text": "\nNew Features and Enhancements:\n\n* Expand the translator by exposing an API to override schema\n* Allow translator plugins to specify and override metricPath\n* Ignore +/-Inf values in prometheus metrics\n\n",
                      "markdown": "`\nNew Features and Enhancements:\n\n* Expand the translator by exposing an API to override schema\n* Allow translator plugins to specify and override metricPath\n* Ignore +/-Inf values in prometheus metrics\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/RELEASE_NOTES"
                },
                "region": {
                  "startLine": 519,
                  "startColumn": 1,
                  "endLine": 519,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n* Allow ignoring pods metrics with a specific annotation to remove the metrics not needed.(#163)\n* Fix the unnecessary logging entries (#210)\n* Update aws-otel-collector version to v0.10.0 (#216)\n\n========================================================================\nAmazon CloudWatch Agent 1.247347.6 (2021-03-24)\n",
                    "rendered": {
                      "text": "\n* Allow ignoring pods metrics with a specific annotation to remove the metrics not needed.(#163)\n* Fix the unnecessary logging entries (#210)\n* Update aws-otel-collector version to v0.10.0 (#216)\n\n========================================================================\nAmazon CloudWatch Agent 1.247347.6 (2021-03-24)\n",
                      "markdown": "`\n* Allow ignoring pods metrics with a specific annotation to remove the metrics not needed.(#163)\n* Fix the unnecessary logging entries (#210)\n* Update aws-otel-collector version to v0.10.0 (#216)\n\n========================================================================\nAmazon CloudWatch Agent 1.247347.6 (2021-03-24)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/RELEASE_NOTES"
                },
                "region": {
                  "startLine": 509,
                  "startColumn": 1,
                  "endLine": 509,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n* Log throttling events handled by SDK\n* CA bundle fix\n* Update aws-otel-collector version to v0.11.0 (#571)\n\n========================================================================\nAmazon CloudWatch Agent 1.247348.0 (2021-05-28)\n",
                    "rendered": {
                      "text": "\n* Log throttling events handled by SDK\n* CA bundle fix\n* Update aws-otel-collector version to v0.11.0 (#571)\n\n========================================================================\nAmazon CloudWatch Agent 1.247348.0 (2021-05-28)\n",
                      "markdown": "`\n* Log throttling events handled by SDK\n* CA bundle fix\n* Update aws-otel-collector version to v0.11.0 (#571)\n\n========================================================================\nAmazon CloudWatch Agent 1.247348.0 (2021-05-28)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/RELEASE_NOTES"
                },
                "region": {
                  "startLine": 497,
                  "startColumn": 1,
                  "endLine": 497,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* Support log retention policy when writing or creating a log group (#250)\n* Add user-agent value for Container Insights for requests (#342)\n* Allow dropping metrics by name for aggregation (#336)\n* Update systemd network target (#344)\n* Fix for K8s naming rule for v1.21+ (#345)\n* Export task ARN resource via Prometheus (#334)\n\n",
                    "rendered": {
                      "text": "* Support log retention policy when writing or creating a log group (#250)\n* Add user-agent value for Container Insights for requests (#342)\n* Allow dropping metrics by name for aggregation (#336)\n* Update systemd network target (#344)\n* Fix for K8s naming rule for v1.21+ (#345)\n* Export task ARN resource via Prometheus (#334)\n\n",
                      "markdown": "`* Support log retention policy when writing or creating a log group (#250)\n* Add user-agent value for Container Insights for requests (#342)\n* Allow dropping metrics by name for aggregation (#336)\n* Update systemd network target (#344)\n* Fix for K8s naming rule for v1.21+ (#345)\n* Export task ARN resource via Prometheus (#334)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/RELEASE_NOTES"
                },
                "region": {
                  "startLine": 482,
                  "startColumn": 1,
                  "endLine": 482,
                  "endColumn": 9,
                  "snippet": {
                    "text": "Enhancements and bug fixes:\n* Add support for collect Nvidia GPU metrics on Linux OS with Nvidia_smi installed\n* Improve message in amazon-cloudwatch-agent.log for Invalid Sequence Token case.\n* Update To Otel Version 0.11.0.\n* Improve windows config migration wizard not to include empty files/windows_events field.\n* Improve runtime debugging with added environment variable CWAGENT_LOG_LEVEL.\n* Improve config wizard message regarding collectd.\n",
                    "rendered": {
                      "text": "Enhancements and bug fixes:\n* Add support for collect Nvidia GPU metrics on Linux OS with Nvidia_smi installed\n* Improve message in amazon-cloudwatch-agent.log for Invalid Sequence Token case.\n* Update To Otel Version 0.11.0.\n* Improve windows config migration wizard not to include empty files/windows_events field.\n* Improve runtime debugging with added environment variable CWAGENT_LOG_LEVEL.\n* Improve config wizard message regarding collectd.\n",
                      "markdown": "`Enhancements and bug fixes:\n* Add support for collect Nvidia GPU metrics on Linux OS with Nvidia_smi installed\n* Improve message in amazon-cloudwatch-agent.log for Invalid Sequence Token case.\n* Update To Otel Version 0.11.0.\n* Improve windows config migration wizard not to include empty files/windows_events field.\n* Improve runtime debugging with added environment variable CWAGENT_LOG_LEVEL.\n* Improve config wizard message regarding collectd.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/RELEASE_NOTES"
                },
                "region": {
                  "startLine": 455,
                  "startColumn": 57,
                  "endLine": 455,
                  "endColumn": 65,
                  "snippet": {
                    "text": "* Support log group retention in CloudWatch Logs for 6,7,8,9 years (#469)\n* Add scraping ECS_CONTAINER_METADATA_URI_V4 for ECS (#453)\n* Allow account ID as placeholder value for log configuration (#400)\n* Restart agent on RPM upgrade to fix SSM feature to auto update CWAgent (#387)\n* Increase dimension's maximum to 30 for each metrics (#361)\n* Creates a system user, \"aoc\", for the AWS Distro for OpenTelemetry collector\n  without a shell, or updates an existing \"aoc\" user on the host so that the existing\n",
                    "rendered": {
                      "text": "* Support log group retention in CloudWatch Logs for 6,7,8,9 years (#469)\n* Add scraping ECS_CONTAINER_METADATA_URI_V4 for ECS (#453)\n* Allow account ID as placeholder value for log configuration (#400)\n* Restart agent on RPM upgrade to fix SSM feature to auto update CWAgent (#387)\n* Increase dimension's maximum to 30 for each metrics (#361)\n* Creates a system user, \"aoc\", for the AWS Distro for OpenTelemetry collector\n  without a shell, or updates an existing \"aoc\" user on the host so that the existing\n",
                      "markdown": "`* Support log group retention in CloudWatch Logs for 6,7,8,9 years (#469)\n* Add scraping ECS_CONTAINER_METADATA_URI_V4 for ECS (#453)\n* Allow account ID as placeholder value for log configuration (#400)\n* Restart agent on RPM upgrade to fix SSM feature to auto update CWAgent (#387)\n* Increase dimension's maximum to 30 for each metrics (#361)\n* Creates a system user, \"aoc\", for the AWS Distro for OpenTelemetry collector\n  without a shell, or updates an existing \"aoc\" user on the host so that the existing\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/RELEASE_NOTES"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 1,
                  "endLine": 415,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* Enhance Windows event log monitoring in preparation for Windows 11 support (#627)\n* Remove Amazon Open Telemetry Collector that was bundled with CloudWatch Agent (#522)\n* Integration tests moved to new repository (#622) (#625) (#630)\n* Update default metric list scraped via Prometheus (#581)\n\nBug fixes:\n* Fix corner case where \"retention_in_days\" was not actually getting set (#554)\n",
                    "rendered": {
                      "text": "* Enhance Windows event log monitoring in preparation for Windows 11 support (#627)\n* Remove Amazon Open Telemetry Collector that was bundled with CloudWatch Agent (#522)\n* Integration tests moved to new repository (#622) (#625) (#630)\n* Update default metric list scraped via Prometheus (#581)\n\nBug fixes:\n* Fix corner case where \"retention_in_days\" was not actually getting set (#554)\n",
                      "markdown": "`* Enhance Windows event log monitoring in preparation for Windows 11 support (#627)\n* Remove Amazon Open Telemetry Collector that was bundled with CloudWatch Agent (#522)\n* Integration tests moved to new repository (#622) (#625) (#630)\n* Update default metric list scraped via Prometheus (#581)\n\nBug fixes:\n* Fix corner case where \"retention_in_days\" was not actually getting set (#554)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/RELEASE_NOTES"
                },
                "region": {
                  "startLine": 403,
                  "startColumn": 5,
                  "endLine": 403,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\nBug fixes:\n* Update AWS SDK Go to fix mac build (#640)\n* Fix control script starting CWA on Oracle Linux 9 by using systemctl (#645)\n* Fix handling negative statefile offset (#646)\n* Fix starting the agent with \"auto\" mode on an on premise host (#652)\n\n",
                    "rendered": {
                      "text": "\nBug fixes:\n* Update AWS SDK Go to fix mac build (#640)\n* Fix control script starting CWA on Oracle Linux 9 by using systemctl (#645)\n* Fix handling negative statefile offset (#646)\n* Fix starting the agent with \"auto\" mode on an on premise host (#652)\n\n",
                      "markdown": "`\nBug fixes:\n* Update AWS SDK Go to fix mac build (#640)\n* Fix control script starting CWA on Oracle Linux 9 by using systemctl (#645)\n* Fix handling negative statefile offset (#646)\n* Fix starting the agent with \"auto\" mode on an on premise host (#652)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/RELEASE_NOTES"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 1,
                  "endLine": 402,
                  "endColumn": 9,
                  "snippet": {
                    "text": "========================================================================\n\nBug fixes:\n* Update AWS SDK Go to fix mac build (#640)\n* Fix control script starting CWA on Oracle Linux 9 by using systemctl (#645)\n* Fix handling negative statefile offset (#646)\n* Fix starting the agent with \"auto\" mode on an on premise host (#652)\n",
                    "rendered": {
                      "text": "========================================================================\n\nBug fixes:\n* Update AWS SDK Go to fix mac build (#640)\n* Fix control script starting CWA on Oracle Linux 9 by using systemctl (#645)\n* Fix handling negative statefile offset (#646)\n* Fix starting the agent with \"auto\" mode on an on premise host (#652)\n",
                      "markdown": "`========================================================================\n\nBug fixes:\n* Update AWS SDK Go to fix mac build (#640)\n* Fix control script starting CWA on Oracle Linux 9 by using systemctl (#645)\n* Fix handling negative statefile offset (#646)\n* Fix starting the agent with \"auto\" mode on an on premise host (#652)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/RELEASE_NOTES"
                },
                "region": {
                  "startLine": 368,
                  "startColumn": 1,
                  "endLine": 368,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* Increase terraform aws assume role duration to avoid expired token errors (#779)\n* Add excluded_tests flag to Linux test workflow (#777)\n* Echo Stress Test Info (#781)\n* update schema and validation to support 3 year retention (#788)\n* Workflow refactor and add onprem test jobs (#782)\n* Add family flag to performance test (#789)\n* Windows stress test setup (#797)\n",
                    "rendered": {
                      "text": "* Increase terraform aws assume role duration to avoid expired token errors (#779)\n* Add excluded_tests flag to Linux test workflow (#777)\n* Echo Stress Test Info (#781)\n* update schema and validation to support 3 year retention (#788)\n* Workflow refactor and add onprem test jobs (#782)\n* Add family flag to performance test (#789)\n* Windows stress test setup (#797)\n",
                      "markdown": "`* Increase terraform aws assume role duration to avoid expired token errors (#779)\n* Add excluded_tests flag to Linux test workflow (#777)\n* Echo Stress Test Info (#781)\n* update schema and validation to support 3 year retention (#788)\n* Workflow refactor and add onprem test jobs (#782)\n* Add family flag to performance test (#789)\n* Windows stress test setup (#797)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/RELEASE_NOTES"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 1,
                  "endLine": 321,
                  "endColumn": 9,
                  "snippet": {
                    "text": "Bug fixes:\n* Retain logic to determine log stream for EMF pipeline (@4f7705a)\n* Fix rename in metrics decorator translator (@ad5861a)\n* Update config translation to respect common config profile and creds file (@e2ef915)\n* Remove plugin key allowlist for metric decorator (@47a5e47)\n\n========================================================================\n",
                    "rendered": {
                      "text": "Bug fixes:\n* Retain logic to determine log stream for EMF pipeline (@4f7705a)\n* Fix rename in metrics decorator translator (@ad5861a)\n* Update config translation to respect common config profile and creds file (@e2ef915)\n* Remove plugin key allowlist for metric decorator (@47a5e47)\n\n========================================================================\n",
                      "markdown": "`Bug fixes:\n* Retain logic to determine log stream for EMF pipeline (@4f7705a)\n* Fix rename in metrics decorator translator (@ad5861a)\n* Update config translation to respect common config profile and creds file (@e2ef915)\n* Remove plugin key allowlist for metric decorator (@47a5e47)\n\n========================================================================\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/RELEASE_NOTES"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 38,
                  "endLine": 194,
                  "snippet": {
                    "text": "Enchancements:\n* [AppSignals] Log correlation\n* [AppSignals] New Metric Rollup\n* [AppSignals] Add metrics cardinality control\n* [AppSignals] Add application log group info\n\n========================================================================\nAmazon CloudWatch Agent 1.300032.3 (2023-12-21)\n",
                    "rendered": {
                      "text": "Enchancements:\n* [AppSignals] Log correlation\n* [AppSignals] New Metric Rollup\n* [AppSignals] Add metrics cardinality control\n* [AppSignals] Add application log group info\n\n========================================================================\nAmazon CloudWatch Agent 1.300032.3 (2023-12-21)\n",
                      "markdown": "`Enchancements:\n* [AppSignals] Log correlation\n* [AppSignals] New Metric Rollup\n* [AppSignals] Add metrics cardinality control\n* [AppSignals] Add application log group info\n\n========================================================================\nAmazon CloudWatch Agent 1.300032.3 (2023-12-21)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/RELEASE_NOTES"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 18,
                  "endLine": 90,
                  "endColumn": 26,
                  "snippet": {
                    "text": "Bug Fixes:\n* [Metrics/Plugin] Reduce logging for known non-convertible metric units\n* [Metrics/Plugin] Fix tomcat.sessions metric to aggregate for all Tomcat applications\n* [Metrics/Plugin] Update default collection interval to 60 seconds\n* [ApplicationSignals] Add log group names as attribute (#1220)\n\n========================================================================\n",
                    "rendered": {
                      "text": "Bug Fixes:\n* [Metrics/Plugin] Reduce logging for known non-convertible metric units\n* [Metrics/Plugin] Fix tomcat.sessions metric to aggregate for all Tomcat applications\n* [Metrics/Plugin] Update default collection interval to 60 seconds\n* [ApplicationSignals] Add log group names as attribute (#1220)\n\n========================================================================\n",
                      "markdown": "`Bug Fixes:\n* [Metrics/Plugin] Reduce logging for known non-convertible metric units\n* [Metrics/Plugin] Fix tomcat.sessions metric to aggregate for all Tomcat applications\n* [Metrics/Plugin] Update default collection interval to 60 seconds\n* [ApplicationSignals] Add log group names as attribute (#1220)\n\n========================================================================\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/RELEASE_NOTES"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 21,
                  "endLine": 53,
                  "endColumn": 29,
                  "snippet": {
                    "text": "Amazon CloudWatch Agent 1.300044.0 (2024-08-14)\n========================================================================\nBug Fixes:\n* [ContainerInsights] Update GPU usage metrics emitted \n* [ContainerInsights] Deprecate runtime tag from neuron metrics to fix false average calculation\n\nEnhancements:\n",
                    "rendered": {
                      "text": "Amazon CloudWatch Agent 1.300044.0 (2024-08-14)\n========================================================================\nBug Fixes:\n* [ContainerInsights] Update GPU usage metrics emitted \n* [ContainerInsights] Deprecate runtime tag from neuron metrics to fix false average calculation\n\nEnhancements:\n",
                      "markdown": "`Amazon CloudWatch Agent 1.300044.0 (2024-08-14)\n========================================================================\nBug Fixes:\n* [ContainerInsights] Update GPU usage metrics emitted \n* [ContainerInsights] Deprecate runtime tag from neuron metrics to fix false average calculation\n\nEnhancements:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/RELEASE_NOTES"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 21,
                  "endLine": 47,
                  "endColumn": 29,
                  "snippet": {
                    "text": "* [ContainerInsights] Add HyperPod status metrics for SageMaker (#1309)\n* [ContainerInsights] Add pod_cpu_usage_total & pod_memory_working_set (#1294)\n* Reduce the size of the start-amazon-cloudwatch-agent binary (#1302)\n* [ContainerInsights] Update the prefix for SageMaker HyperPod status metrics (#1313)\n\n========================================================================\nAmazon CloudWatch Agent 1.300044.0 (2024-08-14)\n",
                    "rendered": {
                      "text": "* [ContainerInsights] Add HyperPod status metrics for SageMaker (#1309)\n* [ContainerInsights] Add pod_cpu_usage_total & pod_memory_working_set (#1294)\n* Reduce the size of the start-amazon-cloudwatch-agent binary (#1302)\n* [ContainerInsights] Update the prefix for SageMaker HyperPod status metrics (#1313)\n\n========================================================================\nAmazon CloudWatch Agent 1.300044.0 (2024-08-14)\n",
                      "markdown": "`* [ContainerInsights] Add HyperPod status metrics for SageMaker (#1309)\n* [ContainerInsights] Add pod_cpu_usage_total & pod_memory_working_set (#1294)\n* Reduce the size of the start-amazon-cloudwatch-agent binary (#1302)\n* [ContainerInsights] Update the prefix for SageMaker HyperPod status metrics (#1313)\n\n========================================================================\nAmazon CloudWatch Agent 1.300044.0 (2024-08-14)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/RELEASE_NOTES"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 22,
                  "endLine": 13,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\nEnhancements:\n* [Traces] Support OTLP format in transit\n* [ApplicationSignals] Update metric processing\n* [ContainerInsights] Use protobuf content type for k8s client\n\nBug Fixes:\n",
                    "rendered": {
                      "text": "\nEnhancements:\n* [Traces] Support OTLP format in transit\n* [ApplicationSignals] Update metric processing\n* [ContainerInsights] Use protobuf content type for k8s client\n\nBug Fixes:\n",
                      "markdown": "`\nEnhancements:\n* [Traces] Support OTLP format in transit\n* [ApplicationSignals] Update metric processing\n* [ContainerInsights] Use protobuf content type for k8s client\n\nBug Fixes:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/RELEASE_NOTES"
                },
                "region": {
                  "startLine": 702,
                  "startColumn": 28,
                  "endLine": 702,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\nNew Features and Enhancements:\n\n* Make AmazonCloudWatchAgent service depend on LanmanServer on Windows\n\n* Fix the issue of huge value of disk iops_in_progress metrics\n\n",
                    "rendered": {
                      "text": "\nNew Features and Enhancements:\n\n* Make AmazonCloudWatchAgent service depend on LanmanServer on Windows\n\n* Fix the issue of huge value of disk iops_in_progress metrics\n\n",
                      "markdown": "`\nNew Features and Enhancements:\n\n* Make AmazonCloudWatchAgent service depend on LanmanServer on Windows\n\n* Fix the issue of huge value of disk iops_in_progress metrics\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/RELEASE_NOTES"
                },
                "region": {
                  "startLine": 634,
                  "startColumn": 22,
                  "endLine": 634,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\nNew Features and Enhancements:\n\n* Add license files to top level\n* Create log stream, group in order\n* Remove Amazon Software License\n\n",
                    "rendered": {
                      "text": "\nNew Features and Enhancements:\n\n* Add license files to top level\n* Create log stream, group in order\n* Remove Amazon Software License\n\n",
                      "markdown": "`\nNew Features and Enhancements:\n\n* Add license files to top level\n* Create log stream, group in order\n* Remove Amazon Software License\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/RELEASE_NOTES"
                },
                "region": {
                  "startLine": 563,
                  "startColumn": 5,
                  "endLine": 563,
                  "endColumn": 14,
                  "snippet": {
                    "text": "New Features and Enhancements:\n\n* macOS (x86) support\n* ECS service endpoint based discovery for Prometheus\n\n========================================================================\nAmazon CloudWatch Agent 1.247347.0 (2020-12-21)\n",
                    "rendered": {
                      "text": "New Features and Enhancements:\n\n* macOS (x86) support\n* ECS service endpoint based discovery for Prometheus\n\n========================================================================\nAmazon CloudWatch Agent 1.247347.0 (2020-12-21)\n",
                      "markdown": "`New Features and Enhancements:\n\n* macOS (x86) support\n* ECS service endpoint based discovery for Prometheus\n\n========================================================================\nAmazon CloudWatch Agent 1.247347.0 (2020-12-21)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/RELEASE_NOTES"
                },
                "region": {
                  "startLine": 546,
                  "startColumn": 36,
                  "endLine": 546,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\nBug fixes:\n\n* Fix pod metrics missing when using docker systemd cgroup driver on EKS\n\n========================================================================\nAmazon CloudWatch Agent 1.247347.3 (2021-01-13)\n",
                    "rendered": {
                      "text": "\nBug fixes:\n\n* Fix pod metrics missing when using docker systemd cgroup driver on EKS\n\n========================================================================\nAmazon CloudWatch Agent 1.247347.3 (2021-01-13)\n",
                      "markdown": "`\nBug fixes:\n\n* Fix pod metrics missing when using docker systemd cgroup driver on EKS\n\n========================================================================\nAmazon CloudWatch Agent 1.247347.3 (2021-01-13)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/RELEASE_NOTES"
                },
                "region": {
                  "startLine": 536,
                  "startColumn": 1,
                  "endLine": 536,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nNew Features and Enhancements:\n\n* Expand the translator by exposing an API to override schema\n* Allow translator plugins to specify and override metricPath\n* Ignore +/-Inf values in prometheus metrics\n\n",
                    "rendered": {
                      "text": "\nNew Features and Enhancements:\n\n* Expand the translator by exposing an API to override schema\n* Allow translator plugins to specify and override metricPath\n* Ignore +/-Inf values in prometheus metrics\n\n",
                      "markdown": "`\nNew Features and Enhancements:\n\n* Expand the translator by exposing an API to override schema\n* Allow translator plugins to specify and override metricPath\n* Ignore +/-Inf values in prometheus metrics\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/RELEASE_NOTES"
                },
                "region": {
                  "startLine": 471,
                  "startColumn": 5,
                  "endLine": 471,
                  "endColumn": 14,
                  "snippet": {
                    "text": "* Move conflicting log retention check to translator (#418)\n* Fix race condition when creating log groups and log streams (ResourceAlreadyExists) (#416)\n* Retry on network failure for detecting EC2 (#397)\n* ECS Service Discovery: Fix implicit network mode (#385)\n* Fix Windows event log messages truncated on Windows Server 2022 (#379)\n* Make CloudWatch Logs's pusher to wait for the final flush to complete before returning (#350)\n\n",
                    "rendered": {
                      "text": "* Move conflicting log retention check to translator (#418)\n* Fix race condition when creating log groups and log streams (ResourceAlreadyExists) (#416)\n* Retry on network failure for detecting EC2 (#397)\n* ECS Service Discovery: Fix implicit network mode (#385)\n* Fix Windows event log messages truncated on Windows Server 2022 (#379)\n* Make CloudWatch Logs's pusher to wait for the final flush to complete before returning (#350)\n\n",
                      "markdown": "`* Move conflicting log retention check to translator (#418)\n* Fix race condition when creating log groups and log streams (ResourceAlreadyExists) (#416)\n* Retry on network failure for detecting EC2 (#397)\n* ECS Service Discovery: Fix implicit network mode (#385)\n* Fix Windows event log messages truncated on Windows Server 2022 (#379)\n* Make CloudWatch Logs's pusher to wait for the final flush to complete before returning (#350)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/RELEASE_NOTES"
                },
                "region": {
                  "startLine": 455,
                  "startColumn": 18,
                  "endLine": 455,
                  "endColumn": 23,
                  "snippet": {
                    "text": "* Support log group retention in CloudWatch Logs for 6,7,8,9 years (#469)\n* Add scraping ECS_CONTAINER_METADATA_URI_V4 for ECS (#453)\n* Allow account ID as placeholder value for log configuration (#400)\n* Restart agent on RPM upgrade to fix SSM feature to auto update CWAgent (#387)\n* Increase dimension's maximum to 30 for each metrics (#361)\n* Creates a system user, \"aoc\", for the AWS Distro for OpenTelemetry collector\n  without a shell, or updates an existing \"aoc\" user on the host so that the existing\n",
                    "rendered": {
                      "text": "* Support log group retention in CloudWatch Logs for 6,7,8,9 years (#469)\n* Add scraping ECS_CONTAINER_METADATA_URI_V4 for ECS (#453)\n* Allow account ID as placeholder value for log configuration (#400)\n* Restart agent on RPM upgrade to fix SSM feature to auto update CWAgent (#387)\n* Increase dimension's maximum to 30 for each metrics (#361)\n* Creates a system user, \"aoc\", for the AWS Distro for OpenTelemetry collector\n  without a shell, or updates an existing \"aoc\" user on the host so that the existing\n",
                      "markdown": "`* Support log group retention in CloudWatch Logs for 6,7,8,9 years (#469)\n* Add scraping ECS_CONTAINER_METADATA_URI_V4 for ECS (#453)\n* Allow account ID as placeholder value for log configuration (#400)\n* Restart agent on RPM upgrade to fix SSM feature to auto update CWAgent (#387)\n* Increase dimension's maximum to 30 for each metrics (#361)\n* Creates a system user, \"aoc\", for the AWS Distro for OpenTelemetry collector\n  without a shell, or updates an existing \"aoc\" user on the host so that the existing\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/RELEASE_NOTES"
                },
                "region": {
                  "startLine": 403,
                  "startColumn": 60,
                  "endLine": 403,
                  "endColumn": 71,
                  "snippet": {
                    "text": "\nBug fixes:\n* Update AWS SDK Go to fix mac build (#640)\n* Fix control script starting CWA on Oracle Linux 9 by using systemctl (#645)\n* Fix handling negative statefile offset (#646)\n* Fix starting the agent with \"auto\" mode on an on premise host (#652)\n\n",
                    "rendered": {
                      "text": "\nBug fixes:\n* Update AWS SDK Go to fix mac build (#640)\n* Fix control script starting CWA on Oracle Linux 9 by using systemctl (#645)\n* Fix handling negative statefile offset (#646)\n* Fix starting the agent with \"auto\" mode on an on premise host (#652)\n\n",
                      "markdown": "`\nBug fixes:\n* Update AWS SDK Go to fix mac build (#640)\n* Fix control script starting CWA on Oracle Linux 9 by using systemctl (#645)\n* Fix handling negative statefile offset (#646)\n* Fix starting the agent with \"auto\" mode on an on premise host (#652)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/RELEASE_NOTES"
                },
                "region": {
                  "startLine": 403,
                  "startColumn": 13,
                  "endLine": 403,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\nBug fixes:\n* Update AWS SDK Go to fix mac build (#640)\n* Fix control script starting CWA on Oracle Linux 9 by using systemctl (#645)\n* Fix handling negative statefile offset (#646)\n* Fix starting the agent with \"auto\" mode on an on premise host (#652)\n\n",
                    "rendered": {
                      "text": "\nBug fixes:\n* Update AWS SDK Go to fix mac build (#640)\n* Fix control script starting CWA on Oracle Linux 9 by using systemctl (#645)\n* Fix handling negative statefile offset (#646)\n* Fix starting the agent with \"auto\" mode on an on premise host (#652)\n\n",
                      "markdown": "`\nBug fixes:\n* Update AWS SDK Go to fix mac build (#640)\n* Fix control script starting CWA on Oracle Linux 9 by using systemctl (#645)\n* Fix handling negative statefile offset (#646)\n* Fix starting the agent with \"auto\" mode on an on premise host (#652)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/RELEASE_NOTES"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 7,
                  "endLine": 342,
                  "endColumn": 15,
                  "snippet": {
                    "text": "========================================================================\n\nBug fixes:\n* Macos script fix (@6792c77)\n\n========================================================================\nAmazon CloudWatch Agent 1.300026.0 (2023-07-28)\n",
                    "rendered": {
                      "text": "========================================================================\n\nBug fixes:\n* Macos script fix (@6792c77)\n\n========================================================================\nAmazon CloudWatch Agent 1.300026.0 (2023-07-28)\n",
                      "markdown": "`========================================================================\n\nBug fixes:\n* Macos script fix (@6792c77)\n\n========================================================================\nAmazon CloudWatch Agent 1.300026.0 (2023-07-28)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/RELEASE_NOTES"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 12,
                  "endLine": 282,
                  "endColumn": 17,
                  "snippet": {
                    "text": "========================================================================\n\nBug fixes:\n* Use GZIP 6 RPM Compression To Fix Install On AL2 Without Kernel Patch\n\n========================================================================\nAmazon CloudWatch Agent 1.300028.3 (2023-10-3)\n",
                    "rendered": {
                      "text": "========================================================================\n\nBug fixes:\n* Use GZIP 6 RPM Compression To Fix Install On AL2 Without Kernel Patch\n\n========================================================================\nAmazon CloudWatch Agent 1.300028.3 (2023-10-3)\n",
                      "markdown": "`========================================================================\n\nBug fixes:\n* Use GZIP 6 RPM Compression To Fix Install On AL2 Without Kernel Patch\n\n========================================================================\nAmazon CloudWatch Agent 1.300028.3 (2023-10-3)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/RELEASE_NOTES"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 64,
                  "endLine": 269,
                  "endColumn": 70,
                  "snippet": {
                    "text": "Bug fixes:\n* Fix EMF log corruption caused by highly concurrent messages sent to the agent\n* CA Bundle fix for AWS Secret regions\n* Filter out terminated pods when calculating container insights node request metrics to match kubectl implementation\n* Fix auto_removal to not block on the file being removed\n\nEnhancements:\n",
                    "rendered": {
                      "text": "Bug fixes:\n* Fix EMF log corruption caused by highly concurrent messages sent to the agent\n* CA Bundle fix for AWS Secret regions\n* Filter out terminated pods when calculating container insights node request metrics to match kubectl implementation\n* Fix auto_removal to not block on the file being removed\n\nEnhancements:\n",
                      "markdown": "`Bug fixes:\n* Fix EMF log corruption caused by highly concurrent messages sent to the agent\n* CA Bundle fix for AWS Secret regions\n* Filter out terminated pods when calculating container insights node request metrics to match kubectl implementation\n* Fix auto_removal to not block on the file being removed\n\nEnhancements:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/RELEASE_NOTES"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 44,
                  "endLine": 64,
                  "endColumn": 53,
                  "snippet": {
                    "text": "========================================================================\nBug Fixes:\n* [Metrics/Plugin] Drop original metrics support added for statsd, collectd and ethtool metrics\n* [Logs/Windows Event] Add windows event log service restart detection and resubscribe\n* [Metrics/JMX, Metrics/Net, Metrics/DiskIO] Change cumulative to delta conversion to drop initial value\n* [Metrics/JMX] Suppress sessions unit warning\n\n",
                    "rendered": {
                      "text": "========================================================================\nBug Fixes:\n* [Metrics/Plugin] Drop original metrics support added for statsd, collectd and ethtool metrics\n* [Logs/Windows Event] Add windows event log service restart detection and resubscribe\n* [Metrics/JMX, Metrics/Net, Metrics/DiskIO] Change cumulative to delta conversion to drop initial value\n* [Metrics/JMX] Suppress sessions unit warning\n\n",
                      "markdown": "`========================================================================\nBug Fixes:\n* [Metrics/Plugin] Drop original metrics support added for statsd, collectd and ethtool metrics\n* [Logs/Windows Event] Add windows event log service restart detection and resubscribe\n* [Metrics/JMX, Metrics/Net, Metrics/DiskIO] Change cumulative to delta conversion to drop initial value\n* [Metrics/JMX] Suppress sessions unit warning\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 220,
                  "endLine": 44,
                  "endColumn": 224,
                  "snippet": {
                    "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.\n\n\n## Code of Conduct\n",
                    "rendered": {
                      "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.\n\n\n## Code of Conduct\n",
                      "markdown": "`\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.\n\n\n## Code of Conduct\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 7,
                  "endLine": 44,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.\n\n\n## Code of Conduct\n",
                    "rendered": {
                      "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.\n\n\n## Code of Conduct\n",
                      "markdown": "`\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.\n\n\n## Code of Conduct\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 38,
                  "endLine": 12,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check existing open, or recently closed, issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n",
                    "rendered": {
                      "text": "\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check existing open, or recently closed, issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n",
                      "markdown": "`\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check existing open, or recently closed, issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 48,
                  "endLine": 44,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.\n\n\n## Code of Conduct\n",
                    "rendered": {
                      "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.\n\n\n## Code of Conduct\n",
                      "markdown": "`\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.\n\n\n## Code of Conduct\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/amazon-cloudwatch-agent.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 77,
                  "endLine": 28,
                  "endColumn": 83,
                  "snippet": {
                    "text": "\n1. You are working against the latest source on the *main* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n",
                    "rendered": {
                      "text": "\n1. You are working against the latest source on the *main* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n",
                      "markdown": "`\n1. You are working against the latest source on the *main* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}