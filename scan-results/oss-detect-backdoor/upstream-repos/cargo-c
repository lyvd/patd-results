{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/example-workspace/api-b/Cargo.toml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 37,
                  "endLine": 7,
                  "endColumn": 41,
                  "snippet": {
                    "text": "authors = [\"Luca Barbato <lu_zero@gentoo.org>\"]\nedition = \"2021\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n[features]\ncapi = [\"libc\"]\n\n",
                    "rendered": {
                      "text": "authors = [\"Luca Barbato <lu_zero@gentoo.org>\"]\nedition = \"2021\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n[features]\ncapi = [\"libc\"]\n\n",
                      "markdown": "`authors = [\"Luca Barbato <lu_zero@gentoo.org>\"]\nedition = \"2021\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n[features]\ncapi = [\"libc\"]\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/example-workspace/api-a/Cargo.toml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 37,
                  "endLine": 7,
                  "endColumn": 41,
                  "snippet": {
                    "text": "authors = [\"Luca Barbato <lu_zero@gentoo.org>\"]\nedition = \"2021\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[features]\ncapi = [\"libc\"]\n",
                    "rendered": {
                      "text": "authors = [\"Luca Barbato <lu_zero@gentoo.org>\"]\nedition = \"2021\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[features]\ncapi = [\"libc\"]\n",
                      "markdown": "`authors = [\"Luca Barbato <lu_zero@gentoo.org>\"]\nedition = \"2021\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[features]\ncapi = [\"libc\"]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/example-project/README.md"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 44,
                  "endLine": 4,
                  "endColumn": 48,
                  "snippet": {
                    "text": "Example project using `cargo-c`\n===============================\n\nFor detailed usage instructions, have a look at the\n[Github workflow configuration](../.github/workflows/example-project.yml).\n\nNote that `cargo install --path .` is used to install `cargo-c`\n",
                    "rendered": {
                      "text": "Example project using `cargo-c`\n===============================\n\nFor detailed usage instructions, have a look at the\n[Github workflow configuration](../.github/workflows/example-project.yml).\n\nNote that `cargo install --path .` is used to install `cargo-c`\n",
                      "markdown": "`Example project using `cargo-c`\n===============================\n\nFor detailed usage instructions, have a look at the\n[Github workflow configuration](../.github/workflows/example-project.yml).\n\nNote that `cargo install --path .` is used to install `cargo-c`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/example-project/README.md"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 23,
                  "endLine": 8,
                  "endColumn": 28,
                  "snippet": {
                    "text": "[Github workflow configuration](../.github/workflows/example-project.yml).\n\nNote that `cargo install --path .` is used to install `cargo-c`\nfrom the locally cloned Git repository.\nIf you want to install the latest release from\n[crates.io](https://crates.io/crates/cargo-c),\nyou should use this instead:\n",
                    "rendered": {
                      "text": "[Github workflow configuration](../.github/workflows/example-project.yml).\n\nNote that `cargo install --path .` is used to install `cargo-c`\nfrom the locally cloned Git repository.\nIf you want to install the latest release from\n[crates.io](https://crates.io/crates/cargo-c),\nyou should use this instead:\n",
                      "markdown": "`[Github workflow configuration](../.github/workflows/example-project.yml).\n\nNote that `cargo install --path .` is used to install `cargo-c`\nfrom the locally cloned Git repository.\nIf you want to install the latest release from\n[crates.io](https://crates.io/crates/cargo-c),\nyou should use this instead:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/README.md"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 80,
                  "endLine": 140,
                  "endColumn": 88,
                  "snippet": {
                    "text": "versioning = false\n# Instead of using semver, select a fixed number of version components for your SONAME version suffix:\n# Setting this to 1 with a version of 0.0.0 allows a suffix of `.so.0`\n# Setting this to 3 always includes the full version in the SONAME (indicate any update is ABI breaking)\n#version_suffix_components = 2\n# Add `-Cpanic=abort` to the RUSTFLAGS automatically, it may be useful in case\n# something might panic in the crates used by the library.\n",
                    "rendered": {
                      "text": "versioning = false\n# Instead of using semver, select a fixed number of version components for your SONAME version suffix:\n# Setting this to 1 with a version of 0.0.0 allows a suffix of `.so.0`\n# Setting this to 3 always includes the full version in the SONAME (indicate any update is ABI breaking)\n#version_suffix_components = 2\n# Add `-Cpanic=abort` to the RUSTFLAGS automatically, it may be useful in case\n# something might panic in the crates used by the library.\n",
                      "markdown": "`versioning = false\n# Instead of using semver, select a fixed number of version components for your SONAME version suffix:\n# Setting this to 1 with a version of 0.0.0 allows a suffix of `.so.0`\n# Setting this to 3 always includes the full version in the SONAME (indicate any update is ABI breaking)\n#version_suffix_components = 2\n# Add `-Cpanic=abort` to the RUSTFLAGS automatically, it may be useful in case\n# something might panic in the crates used by the library.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/README.md"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 36,
                  "endLine": 64,
                  "endColumn": 44,
                  "snippet": {
                    "text": "- Remember to [add][diff-4] a [`cbindgen.toml`][cbindgen-toml] and fill it with\n  at least the include guard and probably you want to set the language to C (it\n  defaults to C++)\n- Once you are happy with the result update your documentation to tell the user\n  to install `cargo-c` and do `cargo cinstall --prefix=/usr\n  --destdir=/tmp/some-place` or something along those lines.\n\n",
                    "rendered": {
                      "text": "- Remember to [add][diff-4] a [`cbindgen.toml`][cbindgen-toml] and fill it with\n  at least the include guard and probably you want to set the language to C (it\n  defaults to C++)\n- Once you are happy with the result update your documentation to tell the user\n  to install `cargo-c` and do `cargo cinstall --prefix=/usr\n  --destdir=/tmp/some-place` or something along those lines.\n\n",
                      "markdown": "`- Remember to [add][diff-4] a [`cbindgen.toml`][cbindgen-toml] and fill it with\n  at least the include guard and probably you want to set the language to C (it\n  defaults to C++)\n- Once you are happy with the result update your documentation to tell the user\n  to install `cargo-c` and do `cargo cinstall --prefix=/usr\n  --destdir=/tmp/some-place` or something along those lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/README.md"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 1,
                  "endLine": 62,
                  "endColumn": 5,
                  "snippet": {
                    "text": "- You may use the feature `capi` to add C-API-specific optional dependencies.\n  > **NOTE**: It must be always present in `Cargo.toml`\n- Remember to [add][diff-4] a [`cbindgen.toml`][cbindgen-toml] and fill it with\n  at least the include guard and probably you want to set the language to C (it\n  defaults to C++)\n- Once you are happy with the result update your documentation to tell the user\n  to install `cargo-c` and do `cargo cinstall --prefix=/usr\n",
                    "rendered": {
                      "text": "- You may use the feature `capi` to add C-API-specific optional dependencies.\n  > **NOTE**: It must be always present in `Cargo.toml`\n- Remember to [add][diff-4] a [`cbindgen.toml`][cbindgen-toml] and fill it with\n  at least the include guard and probably you want to set the language to C (it\n  defaults to C++)\n- Once you are happy with the result update your documentation to tell the user\n  to install `cargo-c` and do `cargo cinstall --prefix=/usr\n",
                      "markdown": "`- You may use the feature `capi` to add C-API-specific optional dependencies.\n  > **NOTE**: It must be always present in `Cargo.toml`\n- Remember to [add][diff-4] a [`cbindgen.toml`][cbindgen-toml] and fill it with\n  at least the include guard and probably you want to set the language to C (it\n  defaults to C++)\n- Once you are happy with the result update your documentation to tell the user\n  to install `cargo-c` and do `cargo cinstall --prefix=/usr\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/README.md"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 27,
                  "endLine": 57,
                  "endColumn": 31,
                  "snippet": {
                    "text": "nt to expose and use\n  ~~`#[cfg(cargo_c)]`~~`#[cfg(feature=\"capi\")]` to hide it when you build a normal rust library.\n- [Make sure][diff-2] you have a lib target and if you are using a workspace\n  the first member is the crate you want to export, that means that you might\n  have [to add a \".\" member at the start of the list][diff-3].\n- ~~Since Rust 1.38, also add \"staticlib\" to the \"lib\" `crate-type`.~~ Do not specify the `crate-type`, cargo-c will add the correct library target by itself.\n- You may use the feature `capi` to add C-API-specific optional dependencies.\n  > **NOTE**: It must be always",
                    "rendered": {
                      "text": "nt to expose and use\n  ~~`#[cfg(cargo_c)]`~~`#[cfg(feature=\"capi\")]` to hide it when you build a normal rust library.\n- [Make sure][diff-2] you have a lib target and if you are using a workspace\n  the first member is the crate you want to export, that means that you might\n  have [to add a \".\" member at the start of the list][diff-3].\n- ~~Since Rust 1.38, also add \"staticlib\" to the \"lib\" `crate-type`.~~ Do not specify the `crate-type`, cargo-c will add the correct library target by itself.\n- You may use the feature `capi` to add C-API-specific optional dependencies.\n  > **NOTE**: It must be always",
                      "markdown": "`nt to expose and use\n  ~~`#[cfg(cargo_c)]`~~`#[cfg(feature=\"capi\")]` to hide it when you build a normal rust library.\n- [Make sure][diff-2] you have a lib target and if you are using a workspace\n  the first member is the crate you want to export, that means that you might\n  have [to add a \".\" member at the start of the list][diff-3].\n- ~~Since Rust 1.38, also add \"staticlib\" to the \"lib\" `crate-type`.~~ Do not specify the `crate-type`, cargo-c will add the correct library target by itself.\n- You may use the feature `capi` to add C-API-specific optional dependencies.\n  > **NOTE**: It must be always`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/README.md"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 10,
                  "snippet": {
                    "text": "* `git`\n* `pkg-config` (on Unix, used to figure out the host-provided headers/libraries)\n* `curl` (on Unix)\n* OpenSSL headers (only for Unix, this is the `libssl-dev` package on deb-based distributions)\n\nYou may pass `--features=vendored-openssl` if you have problems building openssl-sys using the host-provided OpenSSL.\n\n",
                    "rendered": {
                      "text": "* `git`\n* `pkg-config` (on Unix, used to figure out the host-provided headers/libraries)\n* `curl` (on Unix)\n* OpenSSL headers (only for Unix, this is the `libssl-dev` package on deb-based distributions)\n\nYou may pass `--features=vendored-openssl` if you have problems building openssl-sys using the host-provided OpenSSL.\n\n",
                      "markdown": "`* `git`\n* `pkg-config` (on Unix, used to figure out the host-provided headers/libraries)\n* `curl` (on Unix)\n* OpenSSL headers (only for Unix, this is the `libssl-dev` package on deb-based distributions)\n\nYou may pass `--features=vendored-openssl` if you have problems building openssl-sys using the host-provided OpenSSL.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/bin/capi.rs"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 13,
                  "endLine": 67,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n    if cmd == \"install\" {\n        cinstall(&ws, &packages)?;\n    } else if cmd == \"test\" {\n        ctest(&ws, subcommand_args, &packages, compile_opts)?;\n    }\n\n",
                    "rendered": {
                      "text": "\n    if cmd == \"install\" {\n        cinstall(&ws, &packages)?;\n    } else if cmd == \"test\" {\n        ctest(&ws, subcommand_args, &packages, compile_opts)?;\n    }\n\n",
                      "markdown": "`\n    if cmd == \"install\" {\n        cinstall(&ws, &packages)?;\n    } else if cmd == \"test\" {\n        ctest(&ws, subcommand_args, &packages, compile_opts)?;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/bin/capi.rs"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 6,
                  "endLine": 65,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n    let (packages, compile_opts) = cbuild(&mut ws, &config, subcommand_args, default_profile)?;\n\n    if cmd == \"install\" {\n        cinstall(&ws, &packages)?;\n    } else if cmd == \"test\" {\n        ctest(&ws, subcommand_args, &packages, compile_opts)?;\n",
                    "rendered": {
                      "text": "\n    let (packages, compile_opts) = cbuild(&mut ws, &config, subcommand_args, default_profile)?;\n\n    if cmd == \"install\" {\n        cinstall(&ws, &packages)?;\n    } else if cmd == \"test\" {\n        ctest(&ws, subcommand_args, &packages, compile_opts)?;\n",
                      "markdown": "`\n    let (packages, compile_opts) = cbuild(&mut ws, &config, subcommand_args, default_profile)?;\n\n    if cmd == \"install\" {\n        cinstall(&ws, &packages)?;\n    } else if cmd == \"test\" {\n        ctest(&ws, subcommand_args, &packages, compile_opts)?;\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/target.rs"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 41,
                  "endLine": 38,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        if out.status.success() {\n            fn match_re(re: regex::Regex, s: &str) -> String {\n                re.captures(s)\n                    .map_or(\"\", |cap| cap.get(1).unwrap().as_str())\n                    .to_owned()\n            }\n\n",
                    "rendered": {
                      "text": "        if out.status.success() {\n            fn match_re(re: regex::Regex, s: &str) -> String {\n                re.captures(s)\n                    .map_or(\"\", |cap| cap.get(1).unwrap().as_str())\n                    .to_owned()\n            }\n\n",
                      "markdown": "`        if out.status.success() {\n            fn match_re(re: regex::Regex, s: &str) -> String {\n                re.captures(s)\n                    .map_or(\"\", |cap| cap.get(1).unwrap().as_str())\n                    .to_owned()\n            }\n\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/target.rs"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 16,
                  "endLine": 45,
                  "endColumn": 52,
                  "snippet": {
                    "text": "            let arch_re = regex::Regex::new(r#\"target_arch=\"(.+)\"\"#).unwrap();\n            // let vendor_re = regex::Regex::new(r#\"target_vendor=\"(.+)\"\"#).unwrap();\n            let os_re = regex::Regex::new(r#\"target_os=\"(.+)\"\"#).unwrap();\n            let env_re = regex::Regex::new(r#\"target_env=\"(.+)\"\"#).unwrap();\n\n            let s = std::str::from_utf8(&out.stdout).unwrap();\n\n",
                    "rendered": {
                      "text": "            let arch_re = regex::Regex::new(r#\"target_arch=\"(.+)\"\"#).unwrap();\n            // let vendor_re = regex::Regex::new(r#\"target_vendor=\"(.+)\"\"#).unwrap();\n            let os_re = regex::Regex::new(r#\"target_os=\"(.+)\"\"#).unwrap();\n            let env_re = regex::Regex::new(r#\"target_env=\"(.+)\"\"#).unwrap();\n\n            let s = std::str::from_utf8(&out.stdout).unwrap();\n\n",
                      "markdown": "`            let arch_re = regex::Regex::new(r#\"target_arch=\"(.+)\"\"#).unwrap();\n            // let vendor_re = regex::Regex::new(r#\"target_vendor=\"(.+)\"\"#).unwrap();\n            let os_re = regex::Regex::new(r#\"target_os=\"(.+)\"\"#).unwrap();\n            let env_re = regex::Regex::new(r#\"target_env=\"(.+)\"\"#).unwrap();\n\n            let s = std::str::from_utf8(&out.stdout).unwrap();\n\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/target.rs"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 15,
                  "endLine": 27,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        is_target_overridden: bool,\n    ) -> Result<Self, anyhow::Error> {\n        let rustc = std::env::var(\"RUSTC\").unwrap_or_else(|_| \"rustc\".into());\n        let mut cmd = std::process::Command::new(rustc);\n\n        cmd.arg(\"--print\").arg(\"cfg\");\n        if let Some(target) = target {\n",
                    "rendered": {
                      "text": "        is_target_overridden: bool,\n    ) -> Result<Self, anyhow::Error> {\n        let rustc = std::env::var(\"RUSTC\").unwrap_or_else(|_| \"rustc\".into());\n        let mut cmd = std::process::Command::new(rustc);\n\n        cmd.arg(\"--print\").arg(\"cfg\");\n        if let Some(target) = target {\n",
                      "markdown": "`        is_target_overridden: bool,\n    ) -> Result<Self, anyhow::Error> {\n        let rustc = std::env::var(\"RUSTC\").unwrap_or_else(|_| \"rustc\".into());\n        let mut cmd = std::process::Command::new(rustc);\n\n        cmd.arg(\"--print\").arg(\"cfg\");\n        if let Some(target) = target {\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/target.rs"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 36,
                  "endLine": 110,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            lines.push(line);\n            // Enable larger LC_RPATH and install_name entries\n            lines.push(\"-Wl,-headerpad_max_install_names\".to_string());\n        } else if os == \"windows\" && env == \"gnu\" {\n            // This is only set up to work on GNU toolchain versions of Rust\n            lines.push(format!(\n                \"-Wl,--output-def,{}\",\n",
                    "rendered": {
                      "text": "            lines.push(line);\n            // Enable larger LC_RPATH and install_name entries\n            lines.push(\"-Wl,-headerpad_max_install_names\".to_string());\n        } else if os == \"windows\" && env == \"gnu\" {\n            // This is only set up to work on GNU toolchain versions of Rust\n            lines.push(format!(\n                \"-Wl,--output-def,{}\",\n",
                      "markdown": "`            lines.push(line);\n            // Enable larger LC_RPATH and install_name entries\n            lines.push(\"-Wl,-headerpad_max_install_names\".to_string());\n        } else if os == \"windows\" && env == \"gnu\" {\n            // This is only set up to work on GNU toolchain versions of Rust\n            lines.push(format!(\n                \"-Wl,--output-def,{}\",\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/target.rs"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 11,
                  "endLine": 78,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        let patch = version.patch;\n\n        let os = &self.os;\n        let env = &self.env;\n\n        let sover = capi_config.library.sover();\n\n",
                    "rendered": {
                      "text": "        let patch = version.patch;\n\n        let os = &self.os;\n        let env = &self.env;\n\n        let sover = capi_config.library.sover();\n\n",
                      "markdown": "`        let patch = version.patch;\n\n        let os = &self.os;\n        let env = &self.env;\n\n        let sover = capi_config.library.sover();\n\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.github/workflows/rust.yml"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 12,
                  "endLine": 56,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n      - name: Run grcov\n        id: coverage\n        run: bash coverage.sh\n\n      - name: Codecov upload\n        uses: codecov/codecov-action@v4\n",
                    "rendered": {
                      "text": "\n      - name: Run grcov\n        id: coverage\n        run: bash coverage.sh\n\n      - name: Codecov upload\n        uses: codecov/codecov-action@v4\n",
                      "markdown": "`\n      - name: Run grcov\n        id: coverage\n        run: bash coverage.sh\n\n      - name: Codecov upload\n        uses: codecov/codecov-action@v4\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.github/workflows/rust.yml"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 12,
                  "endLine": 56,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n      - name: Run grcov\n        id: coverage\n        run: bash coverage.sh\n\n      - name: Codecov upload\n        uses: codecov/codecov-action@v4\n",
                    "rendered": {
                      "text": "\n      - name: Run grcov\n        id: coverage\n        run: bash coverage.sh\n\n      - name: Codecov upload\n        uses: codecov/codecov-action@v4\n",
                      "markdown": "`\n      - name: Run grcov\n        id: coverage\n        run: bash coverage.sh\n\n      - name: Codecov upload\n        uses: codecov/codecov-action@v4\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.github/workflows/rust.yml"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 9,
                  "endLine": 46,
                  "endColumn": 14,
                  "snippet": {
                    "text": "          GRCOV_VERSION: 0.8.7\n        run: |\n          curl -L \"$LINK/v$GRCOV_VERSION/grcov-x86_64-unknown-linux-gnu.tar.bz2\" |\n          tar xj -C $HOME/.cargo/bin\n\n      - name: Set up MinGW\n        uses: egor-tensin/setup-mingw@v2\n",
                    "rendered": {
                      "text": "          GRCOV_VERSION: 0.8.7\n        run: |\n          curl -L \"$LINK/v$GRCOV_VERSION/grcov-x86_64-unknown-linux-gnu.tar.bz2\" |\n          tar xj -C $HOME/.cargo/bin\n\n      - name: Set up MinGW\n        uses: egor-tensin/setup-mingw@v2\n",
                      "markdown": "`          GRCOV_VERSION: 0.8.7\n        run: |\n          curl -L \"$LINK/v$GRCOV_VERSION/grcov-x86_64-unknown-linux-gnu.tar.bz2\" |\n          tar xj -C $HOME/.cargo/bin\n\n      - name: Set up MinGW\n        uses: egor-tensin/setup-mingw@v2\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.github/workflows/rust.yml"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 9,
                  "endLine": 45,
                  "endColumn": 15,
                  "snippet": {
                    "text": "          LINK: https://github.com/mozilla/grcov/releases/download\n          GRCOV_VERSION: 0.8.7\n        run: |\n          curl -L \"$LINK/v$GRCOV_VERSION/grcov-x86_64-unknown-linux-gnu.tar.bz2\" |\n          tar xj -C $HOME/.cargo/bin\n\n      - name: Set up MinGW\n",
                    "rendered": {
                      "text": "          LINK: https://github.com/mozilla/grcov/releases/download\n          GRCOV_VERSION: 0.8.7\n        run: |\n          curl -L \"$LINK/v$GRCOV_VERSION/grcov-x86_64-unknown-linux-gnu.tar.bz2\" |\n          tar xj -C $HOME/.cargo/bin\n\n      - name: Set up MinGW\n",
                      "markdown": "`          LINK: https://github.com/mozilla/grcov/releases/download\n          GRCOV_VERSION: 0.8.7\n        run: |\n          curl -L \"$LINK/v$GRCOV_VERSION/grcov-x86_64-unknown-linux-gnu.tar.bz2\" |\n          tar xj -C $HOME/.cargo/bin\n\n      - name: Set up MinGW\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.github/workflows/rust.yml"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 15,
                  "endLine": 21,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n      - name: Run rustfmt\n        run: |\n          cargo fmt --all -- --check\n\n      - name: Run clippy\n        uses: actions-rs-plus/clippy-check@v2.2.0\n",
                    "rendered": {
                      "text": "\n      - name: Run rustfmt\n        run: |\n          cargo fmt --all -- --check\n\n      - name: Run clippy\n        uses: actions-rs-plus/clippy-check@v2.2.0\n",
                      "markdown": "`\n      - name: Run rustfmt\n        run: |\n          cargo fmt --all -- --check\n\n      - name: Run clippy\n        uses: actions-rs-plus/clippy-check@v2.2.0\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.github/workflows/example-project.yml"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 13,
                  "endLine": 134,
                  "endColumn": 21,
                  "snippet": {
                    "text": "          test \"${CFLAGS%% }\" = \"-I${CARGO_HOME//\\\\//}/bin/../include/example-project-0.1\"\n          test \"${LIBS%% }\" = \"-L${CARGO_HOME//\\\\//}/bin/../lib -lexample-project\"\n\n      - name: Update dynamic linker cache\n        if: startsWith(matrix.os, 'ubuntu')\n        run: |\n          sudo ldconfig\n",
                    "rendered": {
                      "text": "          test \"${CFLAGS%% }\" = \"-I${CARGO_HOME//\\\\//}/bin/../include/example-project-0.1\"\n          test \"${LIBS%% }\" = \"-L${CARGO_HOME//\\\\//}/bin/../lib -lexample-project\"\n\n      - name: Update dynamic linker cache\n        if: startsWith(matrix.os, 'ubuntu')\n        run: |\n          sudo ldconfig\n",
                      "markdown": "`          test \"${CFLAGS%% }\" = \"-I${CARGO_HOME//\\\\//}/bin/../include/example-project-0.1\"\n          test \"${LIBS%% }\" = \"-L${CARGO_HOME//\\\\//}/bin/../lib -lexample-project\"\n\n      - name: Update dynamic linker cache\n        if: startsWith(matrix.os, 'ubuntu')\n        run: |\n          sudo ldconfig\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.github/workflows/example-project.yml"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 14,
                  "endLine": 125,
                  "snippet": {
                    "text": "\n      - name: Test pkgconf\n        if: startsWith(matrix.os, 'windows')\n        shell: bash\n        run: |\n          set -x\n          pkgconf --version\n          CFLAGS=$(pkgconf --cflags example_project)\n",
                    "rendered": {
                      "text": "\n      - name: Test pkgconf\n        if: startsWith(matrix.os, 'windows')\n        shell: bash\n        run: |\n          set -x\n          pkgconf --version\n          CFLAGS=$(pkgconf --cflags example_project)\n",
                      "markdown": "`\n      - name: Test pkgconf\n        if: startsWith(matrix.os, 'windows')\n        shell: bash\n        run: |\n          set -x\n          pkgconf --version\n          CFLAGS=$(pkgconf --cflags example_project)\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.github/workflows/example-project.yml"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 14,
                  "endLine": 69,
                  "snippet": {
                    "text": "      \n      - name: Install into Cargo root\n        if: startsWith(matrix.os, 'windows')\n        shell: bash\n        working-directory: example-project\n        run: |\n          cargo cinstall --verbose --release --prefix=$CARGO_HOME\n\n",
                    "rendered": {
                      "text": "      \n      - name: Install into Cargo root\n        if: startsWith(matrix.os, 'windows')\n        shell: bash\n        working-directory: example-project\n        run: |\n          cargo cinstall --verbose --release --prefix=$CARGO_HOME\n\n",
                      "markdown": "`      \n      - name: Install into Cargo root\n        if: startsWith(matrix.os, 'windows')\n        shell: bash\n        working-directory: example-project\n        run: |\n          cargo cinstall --verbose --release --prefix=$CARGO_HOME\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.github/workflows/example-project.yml"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 14,
                  "endLine": 138,
                  "snippet": {
                    "text": "      - name: Update dynamic linker cache\n        if: startsWith(matrix.os, 'ubuntu')\n        run: |\n          sudo ldconfig\n\n      - name: Test usage from C (using Makefile)\n        if: startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu')\n        working-directory: example-project/usage-from-c\n",
                    "rendered": {
                      "text": "      - name: Update dynamic linker cache\n        if: startsWith(matrix.os, 'ubuntu')\n        run: |\n          sudo ldconfig\n\n      - name: Test usage from C (using Makefile)\n        if: startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu')\n        working-directory: example-project/usage-from-c\n",
                      "markdown": "`      - name: Update dynamic linker cache\n        if: startsWith(matrix.os, 'ubuntu')\n        run: |\n          sudo ldconfig\n\n      - name: Test usage from C (using Makefile)\n        if: startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu')\n        working-directory: example-project/usage-from-c\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.github/workflows/example-project.yml"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 14,
                  "endLine": 125,
                  "snippet": {
                    "text": "\n      - name: Test pkgconf\n        if: startsWith(matrix.os, 'windows')\n        shell: bash\n        run: |\n          set -x\n          pkgconf --version\n          CFLAGS=$(pkgconf --cflags example_project)\n",
                    "rendered": {
                      "text": "\n      - name: Test pkgconf\n        if: startsWith(matrix.os, 'windows')\n        shell: bash\n        run: |\n          set -x\n          pkgconf --version\n          CFLAGS=$(pkgconf --cflags example_project)\n",
                      "markdown": "`\n      - name: Test pkgconf\n        if: startsWith(matrix.os, 'windows')\n        shell: bash\n        run: |\n          set -x\n          pkgconf --version\n          CFLAGS=$(pkgconf --cflags example_project)\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.github/workflows/example-project.yml"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 9,
                  "endLine": 102,
                  "endColumn": 14,
                  "snippet": {
                    "text": "      - name: Install pkgconf\n        if: startsWith(matrix.os, 'windows')\n        run: |\n          git clone https://github.com/amyspark/pkgconf --branch msvc\n          cd pkgconf\n          meson setup build --prefix=$env:CARGO_HOME\n          meson compile -C build\n",
                    "rendered": {
                      "text": "      - name: Install pkgconf\n        if: startsWith(matrix.os, 'windows')\n        run: |\n          git clone https://github.com/amyspark/pkgconf --branch msvc\n          cd pkgconf\n          meson setup build --prefix=$env:CARGO_HOME\n          meson compile -C build\n",
                      "markdown": "`      - name: Install pkgconf\n        if: startsWith(matrix.os, 'windows')\n        run: |\n          git clone https://github.com/amyspark/pkgconf --branch msvc\n          cd pkgconf\n          meson setup build --prefix=$env:CARGO_HOME\n          meson compile -C build\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.github/workflows/example-project.yml"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 20,
                  "endLine": 90,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        if: startsWith(matrix.os, 'windows')\n        run: |\n          python3 -m pip install --upgrade pip setuptools wheel\n          python3 -m pip install meson ninja\n  \n      - name: Setup MSVC for test\n        if: startsWith(matrix.os, 'windows')\n",
                    "rendered": {
                      "text": "        if: startsWith(matrix.os, 'windows')\n        run: |\n          python3 -m pip install --upgrade pip setuptools wheel\n          python3 -m pip install meson ninja\n  \n      - name: Setup MSVC for test\n        if: startsWith(matrix.os, 'windows')\n",
                      "markdown": "`        if: startsWith(matrix.os, 'windows')\n        run: |\n          python3 -m pip install --upgrade pip setuptools wheel\n          python3 -m pip install meson ninja\n  \n      - name: Setup MSVC for test\n        if: startsWith(matrix.os, 'windows')\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.github/workflows/example-project.yml"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 42,
                  "endLine": 89,
                  "endColumn": 47,
                  "snippet": {
                    "text": "      - name: Setup Meson + Ninja\n        if: startsWith(matrix.os, 'windows')\n        run: |\n          python3 -m pip install --upgrade pip setuptools wheel\n          python3 -m pip install meson ninja\n  \n      - name: Setup MSVC for test\n",
                    "rendered": {
                      "text": "      - name: Setup Meson + Ninja\n        if: startsWith(matrix.os, 'windows')\n        run: |\n          python3 -m pip install --upgrade pip setuptools wheel\n          python3 -m pip install meson ninja\n  \n      - name: Setup MSVC for test\n",
                      "markdown": "`      - name: Setup Meson + Ninja\n        if: startsWith(matrix.os, 'windows')\n        run: |\n          python3 -m pip install --upgrade pip setuptools wheel\n          python3 -m pip install meson ninja\n  \n      - name: Setup MSVC for test\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.github/workflows/example-project.yml"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 20,
                  "endLine": 89,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      - name: Setup Meson + Ninja\n        if: startsWith(matrix.os, 'windows')\n        run: |\n          python3 -m pip install --upgrade pip setuptools wheel\n          python3 -m pip install meson ninja\n  \n      - name: Setup MSVC for test\n",
                    "rendered": {
                      "text": "      - name: Setup Meson + Ninja\n        if: startsWith(matrix.os, 'windows')\n        run: |\n          python3 -m pip install --upgrade pip setuptools wheel\n          python3 -m pip install meson ninja\n  \n      - name: Setup MSVC for test\n",
                      "markdown": "`      - name: Setup Meson + Ninja\n        if: startsWith(matrix.os, 'windows')\n        run: |\n          python3 -m pip install --upgrade pip setuptools wheel\n          python3 -m pip install meson ninja\n  \n      - name: Setup MSVC for test\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.github/workflows/example-project.yml"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 14,
                  "endLine": 69,
                  "snippet": {
                    "text": "      \n      - name: Install into Cargo root\n        if: startsWith(matrix.os, 'windows')\n        shell: bash\n        working-directory: example-project\n        run: |\n          cargo cinstall --verbose --release --prefix=$CARGO_HOME\n\n",
                    "rendered": {
                      "text": "      \n      - name: Install into Cargo root\n        if: startsWith(matrix.os, 'windows')\n        shell: bash\n        working-directory: example-project\n        run: |\n          cargo cinstall --verbose --release --prefix=$CARGO_HOME\n\n",
                      "markdown": "`      \n      - name: Install into Cargo root\n        if: startsWith(matrix.os, 'windows')\n        shell: bash\n        working-directory: example-project\n        run: |\n          cargo cinstall --verbose --release --prefix=$CARGO_HOME\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.github/workflows/example-project.yml"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 14,
                  "endLine": 64,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        if: startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu')\n        working-directory: example-project\n        run: |\n          sudo cp -r temp/usr/local/* /usr/local/\n      \n      - name: Install into Cargo root\n        if: startsWith(matrix.os, 'windows')\n",
                    "rendered": {
                      "text": "        if: startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu')\n        working-directory: example-project\n        run: |\n          sudo cp -r temp/usr/local/* /usr/local/\n      \n      - name: Install into Cargo root\n        if: startsWith(matrix.os, 'windows')\n",
                      "markdown": "`        if: startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu')\n        working-directory: example-project\n        run: |\n          sudo cp -r temp/usr/local/* /usr/local/\n      \n      - name: Install into Cargo root\n        if: startsWith(matrix.os, 'windows')\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.github/workflows/example-project.yml"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 19,
                  "endLine": 28,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Clone Git repository\n        uses: actions/checkout@v4\n\n      - name: Install Rust\n",
                    "rendered": {
                      "text": "    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Clone Git repository\n        uses: actions/checkout@v4\n\n      - name: Install Rust\n",
                      "markdown": "`    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Clone Git repository\n        uses: actions/checkout@v4\n\n      - name: Install Rust\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/install.rs"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 12,
                  "endLine": 95,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    pub(crate) fn from_build_targets(build_targets: &BuildTargets) -> Self {\n        let target = &build_targets.target;\n        let os = &target.os;\n        let env = &target.env;\n\n        match (os.as_str(), env.as_str()) {\n            (\"linux\", _)\n",
                    "rendered": {
                      "text": "    pub(crate) fn from_build_targets(build_targets: &BuildTargets) -> Self {\n        let target = &build_targets.target;\n        let os = &target.os;\n        let env = &target.env;\n\n        match (os.as_str(), env.as_str()) {\n            (\"linux\", _)\n",
                      "markdown": "`    pub(crate) fn from_build_targets(build_targets: &BuildTargets) -> Self {\n        let target = &build_targets.target;\n        let os = &target.os;\n        let env = &target.env;\n\n        match (os.as_str(), env.as_str()) {\n            (\"linux\", _)\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/install.rs"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 11,
                  "endLine": 95,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    pub(crate) fn from_build_targets(build_targets: &BuildTargets) -> Self {\n        let target = &build_targets.target;\n        let os = &target.os;\n        let env = &target.env;\n\n        match (os.as_str(), env.as_str()) {\n            (\"linux\", _)\n",
                    "rendered": {
                      "text": "    pub(crate) fn from_build_targets(build_targets: &BuildTargets) -> Self {\n        let target = &build_targets.target;\n        let os = &target.os;\n        let env = &target.env;\n\n        match (os.as_str(), env.as_str()) {\n            (\"linux\", _)\n",
                      "markdown": "`    pub(crate) fn from_build_targets(build_targets: &BuildTargets) -> Self {\n        let target = &build_targets.target;\n        let os = &target.os;\n        let env = &target.env;\n\n        match (os.as_str(), env.as_str()) {\n            (\"linux\", _)\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 1151,
                  "startColumn": 30,
                  "endLine": 1151,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    )?;\n\n    for cpkg in members.iter_mut() {\n        let out_dir = out_dirs.get(&cpkg.finger_print.id).map(|p| p.as_path());\n\n        cpkg.build_targets\n            .extra\n",
                    "rendered": {
                      "text": "    )?;\n\n    for cpkg in members.iter_mut() {\n        let out_dir = out_dirs.get(&cpkg.finger_print.id).map(|p| p.as_path());\n\n        cpkg.build_targets\n            .extra\n",
                      "markdown": "`    )?;\n\n    for cpkg in members.iter_mut() {\n        let out_dir = out_dirs.get(&cpkg.finger_print.id).map(|p| p.as_path());\n\n        cpkg.build_targets\n            .extra\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 921,
                  "startColumn": 46,
                  "endLine": 921,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        .filter_map(|l| {\n            let id = l.unit.pkg.package_id();\n            if let Some(ref m) = l.script_meta {\n                if let Some(env) = r.extra_env.get(m) {\n                    env.iter().find_map(|e| {\n                        if e.0 == \"OUT_DIR\" {\n                            Some((id, PathBuf::from(&e.1)))\n",
                    "rendered": {
                      "text": "        .filter_map(|l| {\n            let id = l.unit.pkg.package_id();\n            if let Some(ref m) = l.script_meta {\n                if let Some(env) = r.extra_env.get(m) {\n                    env.iter().find_map(|e| {\n                        if e.0 == \"OUT_DIR\" {\n                            Some((id, PathBuf::from(&e.1)))\n",
                      "markdown": "`        .filter_map(|l| {\n            let id = l.unit.pkg.package_id();\n            if let Some(ref m) = l.script_meta {\n                if let Some(env) = r.extra_env.get(m) {\n                    env.iter().find_map(|e| {\n                        if e.0 == \"OUT_DIR\" {\n                            Some((id, PathBuf::from(&e.1)))\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 715,
                  "startColumn": 38,
                  "endLine": 715,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            custom_install_target_paths(includes, &header.subdirectory, &mut include_targets)?;\n        }\n        if let Some(data) = install.get(\"data\") {\n            if let Some(subdir) = data.get(\"subdirectory\").and_then(|v| v.as_str()) {\n                data_subdirectory = String::from(subdir);\n            }\n            custom_install_target_paths(data, &data_subdirectory, &mut data_targets)?;\n",
                    "rendered": {
                      "text": "            custom_install_target_paths(includes, &header.subdirectory, &mut include_targets)?;\n        }\n        if let Some(data) = install.get(\"data\") {\n            if let Some(subdir) = data.get(\"subdirectory\").and_then(|v| v.as_str()) {\n                data_subdirectory = String::from(subdir);\n            }\n            custom_install_target_paths(data, &data_subdirectory, &mut data_targets)?;\n",
                      "markdown": "`            custom_install_target_paths(includes, &header.subdirectory, &mut include_targets)?;\n        }\n        if let Some(data) = install.get(\"data\") {\n            if let Some(subdir) = data.get(\"subdirectory\").and_then(|v| v.as_str()) {\n                data_subdirectory = String::from(subdir);\n            }\n            custom_install_target_paths(data, &data_subdirectory, &mut data_targets)?;\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 714,
                  "startColumn": 35,
                  "endLine": 714,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        if let Some(includes) = install.get(\"include\") {\n            custom_install_target_paths(includes, &header.subdirectory, &mut include_targets)?;\n        }\n        if let Some(data) = install.get(\"data\") {\n            if let Some(subdir) = data.get(\"subdirectory\").and_then(|v| v.as_str()) {\n                data_subdirectory = String::from(subdir);\n            }\n",
                    "rendered": {
                      "text": "        if let Some(includes) = install.get(\"include\") {\n            custom_install_target_paths(includes, &header.subdirectory, &mut include_targets)?;\n        }\n        if let Some(data) = install.get(\"data\") {\n            if let Some(subdir) = data.get(\"subdirectory\").and_then(|v| v.as_str()) {\n                data_subdirectory = String::from(subdir);\n            }\n",
                      "markdown": "`        if let Some(includes) = install.get(\"include\") {\n            custom_install_target_paths(includes, &header.subdirectory, &mut include_targets)?;\n        }\n        if let Some(data) = install.get(\"data\") {\n            if let Some(subdir) = data.get(\"subdirectory\").and_then(|v| v.as_str()) {\n                data_subdirectory = String::from(subdir);\n            }\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 711,
                  "startColumn": 39,
                  "endLine": 711,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n    let install = capi.and_then(|v| v.get(\"install\"));\n    if let Some(install) = install {\n        if let Some(includes) = install.get(\"include\") {\n            custom_install_target_paths(includes, &header.subdirectory, &mut include_targets)?;\n        }\n        if let Some(data) = install.get(\"data\") {\n",
                    "rendered": {
                      "text": "\n    let install = capi.and_then(|v| v.get(\"install\"));\n    if let Some(install) = install {\n        if let Some(includes) = install.get(\"include\") {\n            custom_install_target_paths(includes, &header.subdirectory, &mut include_targets)?;\n        }\n        if let Some(data) = install.get(\"data\") {\n",
                      "markdown": "`\n    let install = capi.and_then(|v| v.get(\"install\"));\n    if let Some(install) = install {\n        if let Some(includes) = install.get(\"include\") {\n            custom_install_target_paths(includes, &header.subdirectory, &mut include_targets)?;\n        }\n        if let Some(data) = install.get(\"data\") {\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 709,
                  "startColumn": 37,
                  "endLine": 709,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        Ok(())\n    }\n\n    let install = capi.and_then(|v| v.get(\"install\"));\n    if let Some(install) = install {\n        if let Some(includes) = install.get(\"include\") {\n            custom_install_target_paths(includes, &header.subdirectory, &mut include_targets)?;\n",
                    "rendered": {
                      "text": "        Ok(())\n    }\n\n    let install = capi.and_then(|v| v.get(\"install\"));\n    if let Some(install) = install {\n        if let Some(includes) = install.get(\"include\") {\n            custom_install_target_paths(includes, &header.subdirectory, &mut include_targets)?;\n",
                      "markdown": "`        Ok(())\n    }\n\n    let install = capi.and_then(|v| v.get(\"install\"));\n    if let Some(install) = install {\n        if let Some(includes) = install.get(\"include\") {\n            custom_install_target_paths(includes, &header.subdirectory, &mut include_targets)?;\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 699,
                  "startColumn": 37,
                  "endLine": 699,
                  "endColumn": 42,
                  "snippet": {
                    "text": "            }\n        }\n\n        if let Some(generated) = root.get(\"generated\").and_then(|v| v.as_array()) {\n            for gen in generated {\n                let target_paths = InstallTargetPaths::from_value(gen, subdirectory)?;\n                targets.push(InstallTarget::Generated(target_paths));\n",
                    "rendered": {
                      "text": "            }\n        }\n\n        if let Some(generated) = root.get(\"generated\").and_then(|v| v.as_array()) {\n            for gen in generated {\n                let target_paths = InstallTargetPaths::from_value(gen, subdirectory)?;\n                targets.push(InstallTarget::Generated(target_paths));\n",
                      "markdown": "`            }\n        }\n\n        if let Some(generated) = root.get(\"generated\").and_then(|v| v.as_array()) {\n            for gen in generated {\n                let target_paths = InstallTargetPaths::from_value(gen, subdirectory)?;\n                targets.push(InstallTarget::Generated(target_paths));\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 692,
                  "startColumn": 34,
                  "endLine": 692,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        subdirectory: &str,\n        targets: &mut Vec<InstallTarget>,\n    ) -> anyhow::Result<()> {\n        if let Some(assets) = root.get(\"asset\").and_then(|v| v.as_array()) {\n            for asset in assets {\n                let target_paths = InstallTargetPaths::from_value(asset, subdirectory)?;\n                targets.push(InstallTarget::Asset(target_paths));\n",
                    "rendered": {
                      "text": "        subdirectory: &str,\n        targets: &mut Vec<InstallTarget>,\n    ) -> anyhow::Result<()> {\n        if let Some(assets) = root.get(\"asset\").and_then(|v| v.as_array()) {\n            for asset in assets {\n                let target_paths = InstallTargetPaths::from_value(asset, subdirectory)?;\n                targets.push(InstallTarget::Asset(target_paths));\n",
                      "markdown": "`        subdirectory: &str,\n        targets: &mut Vec<InstallTarget>,\n    ) -> anyhow::Result<()> {\n        if let Some(assets) = root.get(\"asset\").and_then(|v| v.as_array()) {\n            for asset in assets {\n                let target_paths = InstallTargetPaths::from_value(asset, subdirectory)?;\n                targets.push(InstallTarget::Asset(target_paths));\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 633,
                  "startColumn": 35,
                  "endLine": 633,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            .get(\"import_library\")\n            .and_then(|v| v.as_bool())\n            .unwrap_or(true);\n        if let Some(args) = library.get(\"rustflags\").and_then(|v| v.as_str()) {\n            let args = args\n                .split(' ')\n                .map(str::trim)\n",
                    "rendered": {
                      "text": "            .get(\"import_library\")\n            .and_then(|v| v.as_bool())\n            .unwrap_or(true);\n        if let Some(args) = library.get(\"rustflags\").and_then(|v| v.as_str()) {\n            let args = args\n                .split(' ')\n                .map(str::trim)\n",
                      "markdown": "`            .get(\"import_library\")\n            .and_then(|v| v.as_bool())\n            .unwrap_or(true);\n        if let Some(args) = library.get(\"rustflags\").and_then(|v| v.as_str()) {\n            let args = args\n                .split(' ')\n                .map(str::trim)\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 630,
                  "startColumn": 12,
                  "endLine": 630,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        }\n\n        import_library = library\n            .get(\"import_library\")\n            .and_then(|v| v.as_bool())\n            .unwrap_or(true);\n        if let Some(args) = library.get(\"rustflags\").and_then(|v| v.as_str()) {\n",
                    "rendered": {
                      "text": "        }\n\n        import_library = library\n            .get(\"import_library\")\n            .and_then(|v| v.as_bool())\n            .unwrap_or(true);\n        if let Some(args) = library.get(\"rustflags\").and_then(|v| v.as_str()) {\n",
                      "markdown": "`        }\n\n        import_library = library\n            .get(\"import_library\")\n            .and_then(|v| v.as_bool())\n            .unwrap_or(true);\n        if let Some(args) = library.get(\"rustflags\").and_then(|v| v.as_str()) {\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 617,
                  "startColumn": 36,
                  "endLine": 617,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            .and_then(|v| v.as_bool())\n            .unwrap_or(true);\n\n        if let Some(value) = library.get(\"version_suffix_components\") {\n            let value = value.as_integer().with_context(|| {\n                format!(\"Value for `version_suffix_components` is not an integer: {value:?}\")\n            })?;\n",
                    "rendered": {
                      "text": "            .and_then(|v| v.as_bool())\n            .unwrap_or(true);\n\n        if let Some(value) = library.get(\"version_suffix_components\") {\n            let value = value.as_integer().with_context(|| {\n                format!(\"Value for `version_suffix_components` is not an integer: {value:?}\")\n            })?;\n",
                      "markdown": "`            .and_then(|v| v.as_bool())\n            .unwrap_or(true);\n\n        if let Some(value) = library.get(\"version_suffix_components\") {\n            let value = value.as_integer().with_context(|| {\n                format!(\"Value for `version_suffix_components` is not an integer: {value:?}\")\n            })?;\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 613,
                  "startColumn": 12,
                  "endLine": 613,
                  "endColumn": 17,
                  "snippet": {
                    "text": "            install_subdir = Some(String::from(subdir));\n        }\n        versioning = library\n            .get(\"versioning\")\n            .and_then(|v| v.as_bool())\n            .unwrap_or(true);\n\n",
                    "rendered": {
                      "text": "            install_subdir = Some(String::from(subdir));\n        }\n        versioning = library\n            .get(\"versioning\")\n            .and_then(|v| v.as_bool())\n            .unwrap_or(true);\n\n",
                      "markdown": "`            install_subdir = Some(String::from(subdir));\n        }\n        versioning = library\n            .get(\"versioning\")\n            .and_then(|v| v.as_bool())\n            .unwrap_or(true);\n\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 609,
                  "startColumn": 37,
                  "endLine": 609,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        if let Some(override_version) = library.get(\"version\").and_then(|v| v.as_str()) {\n            version = Version::parse(override_version)?;\n        }\n        if let Some(subdir) = library.get(\"install_subdir\").and_then(|v| v.as_str()) {\n            install_subdir = Some(String::from(subdir));\n        }\n        versioning = library\n",
                    "rendered": {
                      "text": "        if let Some(override_version) = library.get(\"version\").and_then(|v| v.as_str()) {\n            version = Version::parse(override_version)?;\n        }\n        if let Some(subdir) = library.get(\"install_subdir\").and_then(|v| v.as_str()) {\n            install_subdir = Some(String::from(subdir));\n        }\n        versioning = library\n",
                      "markdown": "`        if let Some(override_version) = library.get(\"version\").and_then(|v| v.as_str()) {\n            version = Version::parse(override_version)?;\n        }\n        if let Some(subdir) = library.get(\"install_subdir\").and_then(|v| v.as_str()) {\n            install_subdir = Some(String::from(subdir));\n        }\n        versioning = library\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 606,
                  "startColumn": 47,
                  "endLine": 606,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        if let Some(override_name) = library.get(\"name\").and_then(|v| v.as_str()) {\n            lib_name = String::from(override_name);\n        }\n        if let Some(override_version) = library.get(\"version\").and_then(|v| v.as_str()) {\n            version = Version::parse(override_version)?;\n        }\n        if let Some(subdir) = library.get(\"install_subdir\").and_then(|v| v.as_str()) {\n",
                    "rendered": {
                      "text": "        if let Some(override_name) = library.get(\"name\").and_then(|v| v.as_str()) {\n            lib_name = String::from(override_name);\n        }\n        if let Some(override_version) = library.get(\"version\").and_then(|v| v.as_str()) {\n            version = Version::parse(override_version)?;\n        }\n        if let Some(subdir) = library.get(\"install_subdir\").and_then(|v| v.as_str()) {\n",
                      "markdown": "`        if let Some(override_name) = library.get(\"name\").and_then(|v| v.as_str()) {\n            lib_name = String::from(override_name);\n        }\n        if let Some(override_version) = library.get(\"version\").and_then(|v| v.as_str()) {\n            version = Version::parse(override_version)?;\n        }\n        if let Some(subdir) = library.get(\"install_subdir\").and_then(|v| v.as_str()) {\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 603,
                  "startColumn": 44,
                  "endLine": 603,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    let mut rustflags = Vec::new();\n\n    if let Some(library) = library {\n        if let Some(override_name) = library.get(\"name\").and_then(|v| v.as_str()) {\n            lib_name = String::from(override_name);\n        }\n        if let Some(override_version) = library.get(\"version\").and_then(|v| v.as_str()) {\n",
                    "rendered": {
                      "text": "    let mut rustflags = Vec::new();\n\n    if let Some(library) = library {\n        if let Some(override_name) = library.get(\"name\").and_then(|v| v.as_str()) {\n            lib_name = String::from(override_name);\n        }\n        if let Some(override_version) = library.get(\"version\").and_then(|v| v.as_str()) {\n",
                      "markdown": "`    let mut rustflags = Vec::new();\n\n    if let Some(library) = library {\n        if let Some(override_name) = library.get(\"name\").and_then(|v| v.as_str()) {\n            lib_name = String::from(override_name);\n        }\n        if let Some(override_version) = library.get(\"version\").and_then(|v| v.as_str()) {\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 593,
                  "startColumn": 37,
                  "endLine": 593,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        strip_include_path_components,\n    };\n\n    let library = capi.and_then(|v| v.get(\"library\"));\n    let mut lib_name = String::from(name);\n    let mut version = pkg.version().clone();\n    let mut install_subdir = None;\n",
                    "rendered": {
                      "text": "        strip_include_path_components,\n    };\n\n    let library = capi.and_then(|v| v.get(\"library\"));\n    let mut lib_name = String::from(name);\n    let mut version = pkg.version().clone();\n    let mut install_subdir = None;\n",
                      "markdown": "`        strip_include_path_components,\n    };\n\n    let library = capi.and_then(|v| v.get(\"library\"));\n    let mut lib_name = String::from(name);\n    let mut version = pkg.version().clone();\n    let mut install_subdir = None;\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 578,
                  "startColumn": 12,
                  "endLine": 578,
                  "endColumn": 17,
                  "snippet": {
                    "text": "            requires_private = Some(String::from(req));\n        }\n        strip_include_path_components = pc\n            .get(\"strip_include_path_components\")\n            .map(|v| v.clone().try_into())\n            .unwrap_or_else(|| Ok(0))?\n    }\n",
                    "rendered": {
                      "text": "            requires_private = Some(String::from(req));\n        }\n        strip_include_path_components = pc\n            .get(\"strip_include_path_components\")\n            .map(|v| v.clone().try_into())\n            .unwrap_or_else(|| Ok(0))?\n    }\n",
                      "markdown": "`            requires_private = Some(String::from(req));\n        }\n        strip_include_path_components = pc\n            .get(\"strip_include_path_components\")\n            .map(|v| v.clone().try_into())\n            .unwrap_or_else(|| Ok(0))?\n    }\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 574,
                  "startColumn": 29,
                  "endLine": 574,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        if let Some(req) = pc.get(\"requires\").and_then(|v| v.as_str()) {\n            requires = Some(String::from(req));\n        }\n        if let Some(req) = pc.get(\"requires_private\").and_then(|v| v.as_str()) {\n            requires_private = Some(String::from(req));\n        }\n        strip_include_path_components = pc\n",
                    "rendered": {
                      "text": "        if let Some(req) = pc.get(\"requires\").and_then(|v| v.as_str()) {\n            requires = Some(String::from(req));\n        }\n        if let Some(req) = pc.get(\"requires_private\").and_then(|v| v.as_str()) {\n            requires_private = Some(String::from(req));\n        }\n        strip_include_path_components = pc\n",
                      "markdown": "`        if let Some(req) = pc.get(\"requires\").and_then(|v| v.as_str()) {\n            requires = Some(String::from(req));\n        }\n        if let Some(req) = pc.get(\"requires_private\").and_then(|v| v.as_str()) {\n            requires_private = Some(String::from(req));\n        }\n        strip_include_path_components = pc\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 571,
                  "startColumn": 29,
                  "endLine": 571,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        if let Some(override_version) = pc.get(\"version\").and_then(|v| v.as_str()) {\n            version = String::from(override_version);\n        }\n        if let Some(req) = pc.get(\"requires\").and_then(|v| v.as_str()) {\n            requires = Some(String::from(req));\n        }\n        if let Some(req) = pc.get(\"requires_private\").and_then(|v| v.as_str()) {\n",
                    "rendered": {
                      "text": "        if let Some(override_version) = pc.get(\"version\").and_then(|v| v.as_str()) {\n            version = String::from(override_version);\n        }\n        if let Some(req) = pc.get(\"requires\").and_then(|v| v.as_str()) {\n            requires = Some(String::from(req));\n        }\n        if let Some(req) = pc.get(\"requires_private\").and_then(|v| v.as_str()) {\n",
                      "markdown": "`        if let Some(override_version) = pc.get(\"version\").and_then(|v| v.as_str()) {\n            version = String::from(override_version);\n        }\n        if let Some(req) = pc.get(\"requires\").and_then(|v| v.as_str()) {\n            requires = Some(String::from(req));\n        }\n        if let Some(req) = pc.get(\"requires_private\").and_then(|v| v.as_str()) {\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 568,
                  "startColumn": 42,
                  "endLine": 568,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        if let Some(override_description) = pc.get(\"description\").and_then(|v| v.as_str()) {\n            description = String::from(override_description);\n        }\n        if let Some(override_version) = pc.get(\"version\").and_then(|v| v.as_str()) {\n            version = String::from(override_version);\n        }\n        if let Some(req) = pc.get(\"requires\").and_then(|v| v.as_str()) {\n",
                    "rendered": {
                      "text": "        if let Some(override_description) = pc.get(\"description\").and_then(|v| v.as_str()) {\n            description = String::from(override_description);\n        }\n        if let Some(override_version) = pc.get(\"version\").and_then(|v| v.as_str()) {\n            version = String::from(override_version);\n        }\n        if let Some(req) = pc.get(\"requires\").and_then(|v| v.as_str()) {\n",
                      "markdown": "`        if let Some(override_description) = pc.get(\"description\").and_then(|v| v.as_str()) {\n            description = String::from(override_description);\n        }\n        if let Some(override_version) = pc.get(\"version\").and_then(|v| v.as_str()) {\n            version = String::from(override_version);\n        }\n        if let Some(req) = pc.get(\"requires\").and_then(|v| v.as_str()) {\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 565,
                  "startColumn": 46,
                  "endLine": 565,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        if let Some(override_filename) = pc.get(\"filename\").and_then(|v| v.as_str()) {\n            pc_filename = String::from(override_filename);\n        }\n        if let Some(override_description) = pc.get(\"description\").and_then(|v| v.as_str()) {\n            description = String::from(override_description);\n        }\n        if let Some(override_version) = pc.get(\"version\").and_then(|v| v.as_str()) {\n",
                    "rendered": {
                      "text": "        if let Some(override_filename) = pc.get(\"filename\").and_then(|v| v.as_str()) {\n            pc_filename = String::from(override_filename);\n        }\n        if let Some(override_description) = pc.get(\"description\").and_then(|v| v.as_str()) {\n            description = String::from(override_description);\n        }\n        if let Some(override_version) = pc.get(\"version\").and_then(|v| v.as_str()) {\n",
                      "markdown": "`        if let Some(override_filename) = pc.get(\"filename\").and_then(|v| v.as_str()) {\n            pc_filename = String::from(override_filename);\n        }\n        if let Some(override_description) = pc.get(\"description\").and_then(|v| v.as_str()) {\n            description = String::from(override_description);\n        }\n        if let Some(override_version) = pc.get(\"version\").and_then(|v| v.as_str()) {\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 562,
                  "startColumn": 43,
                  "endLine": 562,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        if let Some(override_name) = pc.get(\"name\").and_then(|v| v.as_str()) {\n            pc_name = String::from(override_name);\n        }\n        if let Some(override_filename) = pc.get(\"filename\").and_then(|v| v.as_str()) {\n            pc_filename = String::from(override_filename);\n        }\n        if let Some(override_description) = pc.get(\"description\").and_then(|v| v.as_str()) {\n",
                    "rendered": {
                      "text": "        if let Some(override_name) = pc.get(\"name\").and_then(|v| v.as_str()) {\n            pc_name = String::from(override_name);\n        }\n        if let Some(override_filename) = pc.get(\"filename\").and_then(|v| v.as_str()) {\n            pc_filename = String::from(override_filename);\n        }\n        if let Some(override_description) = pc.get(\"description\").and_then(|v| v.as_str()) {\n",
                      "markdown": "`        if let Some(override_name) = pc.get(\"name\").and_then(|v| v.as_str()) {\n            pc_name = String::from(override_name);\n        }\n        if let Some(override_filename) = pc.get(\"filename\").and_then(|v| v.as_str()) {\n            pc_filename = String::from(override_filename);\n        }\n        if let Some(override_description) = pc.get(\"description\").and_then(|v| v.as_str()) {\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 559,
                  "startColumn": 39,
                  "endLine": 559,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    let mut strip_include_path_components = 0;\n\n    if let Some(pc) = pc {\n        if let Some(override_name) = pc.get(\"name\").and_then(|v| v.as_str()) {\n            pc_name = String::from(override_name);\n        }\n        if let Some(override_filename) = pc.get(\"filename\").and_then(|v| v.as_str()) {\n",
                    "rendered": {
                      "text": "    let mut strip_include_path_components = 0;\n\n    if let Some(pc) = pc {\n        if let Some(override_name) = pc.get(\"name\").and_then(|v| v.as_str()) {\n            pc_name = String::from(override_name);\n        }\n        if let Some(override_filename) = pc.get(\"filename\").and_then(|v| v.as_str()) {\n",
                      "markdown": "`    let mut strip_include_path_components = 0;\n\n    if let Some(pc) = pc {\n        if let Some(override_name) = pc.get(\"name\").and_then(|v| v.as_str()) {\n            pc_name = String::from(override_name);\n        }\n        if let Some(override_filename) = pc.get(\"filename\").and_then(|v| v.as_str()) {\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 543,
                  "startColumn": 32,
                  "endLine": 543,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        }\n    };\n\n    let pc = capi.and_then(|v| v.get(\"pkg_config\"));\n    let mut pc_name = String::from(name);\n    let mut pc_filename = String::from(name);\n    let mut description = String::from(\n",
                    "rendered": {
                      "text": "        }\n    };\n\n    let pc = capi.and_then(|v| v.get(\"pkg_config\"));\n    let mut pc_name = String::from(name);\n    let mut pc_filename = String::from(name);\n    let mut description = String::from(\n",
                      "markdown": "`        }\n    };\n\n    let pc = capi.and_then(|v| v.get(\"pkg_config\"));\n    let mut pc_name = String::from(name);\n    let mut pc_filename = String::from(name);\n    let mut description = String::from(\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 530,
                  "startColumn": 31,
                  "endLine": 530,
                  "endColumn": 36,
                  "snippet": {
                    "text": "                .unwrap_or(Ok(true))?,\n            enabled: header\n                .as_ref()\n                .and_then(|h| h.get(\"enabled\"))\n                .map(|v| v.clone().try_into())\n                .unwrap_or(Ok(true))?,\n        }\n",
                    "rendered": {
                      "text": "                .unwrap_or(Ok(true))?,\n            enabled: header\n                .as_ref()\n                .and_then(|h| h.get(\"enabled\"))\n                .map(|v| v.clone().try_into())\n                .unwrap_or(Ok(true))?,\n        }\n",
                      "markdown": "`                .unwrap_or(Ok(true))?,\n            enabled: header\n                .as_ref()\n                .and_then(|h| h.get(\"enabled\"))\n                .map(|v| v.clone().try_into())\n                .unwrap_or(Ok(true))?,\n        }\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 525,
                  "startColumn": 31,
                  "endLine": 525,
                  "endColumn": 36,
                  "snippet": {
                    "text": "            subdirectory,\n            generation: header\n                .as_ref()\n                .and_then(|h| h.get(\"generation\"))\n                .map(|v| v.clone().try_into())\n                .unwrap_or(Ok(true))?,\n            enabled: header\n",
                    "rendered": {
                      "text": "            subdirectory,\n            generation: header\n                .as_ref()\n                .and_then(|h| h.get(\"generation\"))\n                .map(|v| v.clone().try_into())\n                .unwrap_or(Ok(true))?,\n            enabled: header\n",
                      "markdown": "`            subdirectory,\n            generation: header\n                .as_ref()\n                .and_then(|h| h.get(\"generation\"))\n                .map(|v| v.clone().try_into())\n                .unwrap_or(Ok(true))?,\n            enabled: header\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 519,
                  "startColumn": 32,
                  "endLine": 519,
                  "endColumn": 37,
                  "snippet": {
                    "text": "            name: header\n                .as_ref()\n                .and_then(|h| h.get(\"name\"))\n                .or_else(|| capi.get(\"header_name\"))\n                .map(|v| v.clone().try_into())\n                .unwrap_or_else(|| Ok(String::from(name)))?,\n            subdirectory,\n",
                    "rendered": {
                      "text": "            name: header\n                .as_ref()\n                .and_then(|h| h.get(\"name\"))\n                .or_else(|| capi.get(\"header_name\"))\n                .map(|v| v.clone().try_into())\n                .unwrap_or_else(|| Ok(String::from(name)))?,\n            subdirectory,\n",
                      "markdown": "`            name: header\n                .as_ref()\n                .and_then(|h| h.get(\"name\"))\n                .or_else(|| capi.get(\"header_name\"))\n                .map(|v| v.clone().try_into())\n                .unwrap_or_else(|| Ok(String::from(name)))?,\n            subdirectory,\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 518,
                  "startColumn": 31,
                  "endLine": 518,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        HeaderCApiConfig {\n            name: header\n                .as_ref()\n                .and_then(|h| h.get(\"name\"))\n                .or_else(|| capi.get(\"header_name\"))\n                .map(|v| v.clone().try_into())\n                .unwrap_or_else(|| Ok(String::from(name)))?,\n",
                    "rendered": {
                      "text": "        HeaderCApiConfig {\n            name: header\n                .as_ref()\n                .and_then(|h| h.get(\"name\"))\n                .or_else(|| capi.get(\"header_name\"))\n                .map(|v| v.clone().try_into())\n                .unwrap_or_else(|| Ok(String::from(name)))?,\n",
                      "markdown": "`        HeaderCApiConfig {\n            name: header\n                .as_ref()\n                .and_then(|h| h.get(\"name\"))\n                .or_else(|| capi.get(\"header_name\"))\n                .map(|v| v.clone().try_into())\n                .unwrap_or_else(|| Ok(String::from(name)))?,\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 500,
                  "startColumn": 23,
                  "endLine": 500,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n    let subdirectory = header\n        .as_ref()\n        .and_then(|h| h.get(\"subdirectory\"))\n        .map(|v| {\n            if let Ok(b) = v.clone().try_into::<bool>() {\n                Ok(if b {\n",
                    "rendered": {
                      "text": "\n    let subdirectory = header\n        .as_ref()\n        .and_then(|h| h.get(\"subdirectory\"))\n        .map(|v| {\n            if let Ok(b) = v.clone().try_into::<bool>() {\n                Ok(if b {\n",
                      "markdown": "`\n    let subdirectory = header\n        .as_ref()\n        .and_then(|h| h.get(\"subdirectory\"))\n        .map(|v| {\n            if let Ok(b) = v.clone().try_into::<bool>() {\n                Ok(if b {\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 496,
                  "startColumn": 36,
                  "endLine": 496,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        }\n    }\n\n    let header = capi.and_then(|v| v.get(\"header\"));\n\n    let subdirectory = header\n        .as_ref()\n",
                    "rendered": {
                      "text": "        }\n    }\n\n    let header = capi.and_then(|v| v.get(\"header\"));\n\n    let subdirectory = header\n        .as_ref()\n",
                      "markdown": "`        }\n    }\n\n    let header = capi.and_then(|v| v.get(\"header\"));\n\n    let subdirectory = header\n        .as_ref()\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 482,
                  "startColumn": 29,
                  "endLine": 482,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n    if let Some(min_version) = capi\n        .as_ref()\n        .and_then(|capi| capi.get(\"min_version\"))\n        .and_then(|v| v.as_str())\n    {\n        let min_version = Version::parse(min_version)?;\n",
                    "rendered": {
                      "text": "\n    if let Some(min_version) = capi\n        .as_ref()\n        .and_then(|capi| capi.get(\"min_version\"))\n        .and_then(|v| v.as_str())\n    {\n        let min_version = Version::parse(min_version)?;\n",
                      "markdown": "`\n    if let Some(min_version) = capi\n        .as_ref()\n        .and_then(|capi| capi.get(\"min_version\"))\n        .and_then(|v| v.as_str())\n    {\n        let min_version = Version::parse(min_version)?;\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 478,
                  "startColumn": 23,
                  "endLine": 478,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    let capi = toml\n        .get(\"package\")\n        .and_then(|v| v.get(\"metadata\"))\n        .and_then(|v| v.get(\"capi\"));\n\n    if let Some(min_version) = capi\n        .as_ref()\n",
                    "rendered": {
                      "text": "    let capi = toml\n        .get(\"package\")\n        .and_then(|v| v.get(\"metadata\"))\n        .and_then(|v| v.get(\"capi\"));\n\n    if let Some(min_version) = capi\n        .as_ref()\n",
                      "markdown": "`    let capi = toml\n        .get(\"package\")\n        .and_then(|v| v.get(\"metadata\"))\n        .and_then(|v| v.get(\"capi\"));\n\n    if let Some(min_version) = capi\n        .as_ref()\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 477,
                  "startColumn": 23,
                  "endLine": 477,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n    let capi = toml\n        .get(\"package\")\n        .and_then(|v| v.get(\"metadata\"))\n        .and_then(|v| v.get(\"capi\"));\n\n    if let Some(min_version) = capi\n",
                    "rendered": {
                      "text": "\n    let capi = toml\n        .get(\"package\")\n        .and_then(|v| v.get(\"metadata\"))\n        .and_then(|v| v.get(\"capi\"));\n\n    if let Some(min_version) = capi\n",
                      "markdown": "`\n    let capi = toml\n        .get(\"package\")\n        .and_then(|v| v.get(\"metadata\"))\n        .and_then(|v| v.get(\"capi\"));\n\n    if let Some(min_version) = capi\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 476,
                  "startColumn": 8,
                  "endLine": 476,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    let toml = manifest_str.parse::<toml::Value>()?;\n\n    let capi = toml\n        .get(\"package\")\n        .and_then(|v| v.get(\"metadata\"))\n        .and_then(|v| v.get(\"capi\"));\n\n",
                    "rendered": {
                      "text": "    let toml = manifest_str.parse::<toml::Value>()?;\n\n    let capi = toml\n        .get(\"package\")\n        .and_then(|v| v.get(\"metadata\"))\n        .and_then(|v| v.get(\"capi\"));\n\n",
                      "markdown": "`    let toml = manifest_str.parse::<toml::Value>()?;\n\n    let capi = toml\n        .get(\"package\")\n        .and_then(|v| v.get(\"metadata\"))\n        .and_then(|v| v.get(\"capi\"));\n\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 417,
                  "startColumn": 12,
                  "endLine": 417,
                  "endColumn": 17,
                  "snippet": {
                    "text": "            .and_then(|v| v.as_str())\n            .ok_or_else(|| anyhow::anyhow!(\"a from field is required\"))?;\n        let to = value\n            .get(\"to\")\n            .and_then(|v| v.as_str())\n            .unwrap_or(default_to);\n\n",
                    "rendered": {
                      "text": "            .and_then(|v| v.as_str())\n            .ok_or_else(|| anyhow::anyhow!(\"a from field is required\"))?;\n        let to = value\n            .get(\"to\")\n            .and_then(|v| v.as_str())\n            .unwrap_or(default_to);\n\n",
                      "markdown": "`            .and_then(|v| v.as_str())\n            .ok_or_else(|| anyhow::anyhow!(\"a from field is required\"))?;\n        let to = value\n            .get(\"to\")\n            .and_then(|v| v.as_str())\n            .unwrap_or(default_to);\n\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 413,
                  "startColumn": 12,
                  "endLine": 413,
                  "endColumn": 17,
                  "snippet": {
                    "text": "impl InstallTargetPaths {\n    pub fn from_value(value: &toml::value::Value, default_to: &str) -> anyhow::Result<Self> {\n        let from = value\n            .get(\"from\")\n            .and_then(|v| v.as_str())\n            .ok_or_else(|| anyhow::anyhow!(\"a from field is required\"))?;\n        let to = value\n",
                    "rendered": {
                      "text": "impl InstallTargetPaths {\n    pub fn from_value(value: &toml::value::Value, default_to: &str) -> anyhow::Result<Self> {\n        let from = value\n            .get(\"from\")\n            .and_then(|v| v.as_str())\n            .ok_or_else(|| anyhow::anyhow!(\"a from field is required\"))?;\n        let to = value\n",
                      "markdown": "`impl InstallTargetPaths {\n    pub fn from_value(value: &toml::value::Value, default_to: &str) -> anyhow::Result<Self> {\n        let from = value\n            .get(\"from\")\n            .and_then(|v| v.as_str())\n            .ok_or_else(|| anyhow::anyhow!(\"a from field is required\"))?;\n        let to = value\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/src/build.rs"
                },
                "region": {
                  "startLine": 921,
                  "startColumn": 28,
                  "endLine": 921,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        .filter_map(|l| {\n            let id = l.unit.pkg.package_id();\n            if let Some(ref m) = l.script_meta {\n                if let Some(env) = r.extra_env.get(m) {\n                    env.iter().find_map(|e| {\n                        if e.0 == \"OUT_DIR\" {\n                            Some((id, PathBuf::from(&e.1)))\n",
                    "rendered": {
                      "text": "        .filter_map(|l| {\n            let id = l.unit.pkg.package_id();\n            if let Some(ref m) = l.script_meta {\n                if let Some(env) = r.extra_env.get(m) {\n                    env.iter().find_map(|e| {\n                        if e.0 == \"OUT_DIR\" {\n                            Some((id, PathBuf::from(&e.1)))\n",
                      "markdown": "`        .filter_map(|l| {\n            let id = l.unit.pkg.package_id();\n            if let Some(ref m) = l.script_meta {\n                if let Some(env) = r.extra_env.get(m) {\n                    env.iter().find_map(|e| {\n                        if e.0 == \"OUT_DIR\" {\n                            Some((id, PathBuf::from(&e.1)))\n`"
                    }
                  },
                  "sourceLanguage": "rust"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.github/workflows/deploy.yml"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 13,
                  "endLine": 149,
                  "snippet": {
                    "text": "\n    - name: Create Cargo.lock\n      run: |\n        cargo update\n\n    - name: Create a release\n      uses: softprops/action-gh-release@v2\n      with:\n",
                    "rendered": {
                      "text": "\n    - name: Create Cargo.lock\n      run: |\n        cargo update\n\n    - name: Create a release\n      uses: softprops/action-gh-release@v2\n      with:\n",
                      "markdown": "`\n    - name: Create Cargo.lock\n      run: |\n        cargo update\n\n    - name: Create a release\n      uses: softprops/action-gh-release@v2\n      with:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.github/workflows/deploy.yml"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 7,
                  "endLine": 86,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    - name: Create tar\n      run: |\n        cd target/${{ matrix.target }}/release-strip\n        tar -czvf $GITHUB_WORKSPACE/cargo-c-${{ matrix.target }}.tar.gz \\\n                  cargo-capi \\\n                  cargo-cbuild \\\n                  cargo-cinstall \\\n",
                    "rendered": {
                      "text": "    - name: Create tar\n      run: |\n        cd target/${{ matrix.target }}/release-strip\n        tar -czvf $GITHUB_WORKSPACE/cargo-c-${{ matrix.target }}.tar.gz \\\n                  cargo-capi \\\n                  cargo-cbuild \\\n                  cargo-cinstall \\\n",
                      "markdown": "`    - name: Create tar\n      run: |\n        cd target/${{ matrix.target }}/release-strip\n        tar -czvf $GITHUB_WORKSPACE/cargo-c-${{ matrix.target }}.tar.gz \\\n                  cargo-capi \\\n                  cargo-cbuild \\\n                  cargo-cinstall \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cargo-c.zip/.github/workflows/deploy.yml"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 18,
                  "endLine": 84,
                  "snippet": {
                    "text": "          --features=vendored-openssl \\\n          --profile release-strip\n\n    - name: Create tar\n      run: |\n        cd target/${{ matrix.target }}/release-strip\n        tar -czvf $GITHUB_WORKSPACE/cargo-c-${{ matrix.target }}.tar.gz \\\n                  cargo-capi \\\n",
                    "rendered": {
                      "text": "          --features=vendored-openssl \\\n          --profile release-strip\n\n    - name: Create tar\n      run: |\n        cd target/${{ matrix.target }}/release-strip\n        tar -czvf $GITHUB_WORKSPACE/cargo-c-${{ matrix.target }}.tar.gz \\\n                  cargo-capi \\\n",
                      "markdown": "`          --features=vendored-openssl \\\n          --profile release-strip\n\n    - name: Create tar\n      run: |\n        cd target/${{ matrix.target }}/release-strip\n        tar -czvf $GITHUB_WORKSPACE/cargo-c-${{ matrix.target }}.tar.gz \\\n                  cargo-capi \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}