{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/testdata/config-yaml.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/errors.go"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 7,
                  "endLine": 16,
                  "snippet": {
                    "text": "// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage cmd\n\nimport (\n\t\"errors\"\n)\n",
                    "rendered": {
                      "text": "// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage cmd\n\nimport (\n\t\"errors\"\n)\n",
                      "markdown": "`// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage cmd\n\nimport (\n\t\"errors\"\n)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root_windows_test.go"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 7,
                  "endLine": 16,
                  "snippet": {
                    "text": "// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage cmd\n\nimport (\n\t\"testing\"\n\n",
                    "rendered": {
                      "text": "// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage cmd\n\nimport (\n\t\"testing\"\n\n",
                      "markdown": "`// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage cmd\n\nimport (\n\t\"testing\"\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/options.go"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 7,
                  "endLine": 16,
                  "snippet": {
                    "text": "// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage cmd\n\nimport \"github.com/GoogleCloudPlatform/cloud-sql-proxy/v2/cloudsql\"\n\n// Option is a function that configures a Command.\n",
                    "rendered": {
                      "text": "// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage cmd\n\nimport \"github.com/GoogleCloudPlatform/cloud-sql-proxy/v2/cloudsql\"\n\n// Option is a function that configures a Command.\n",
                      "markdown": "`// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage cmd\n\nimport \"github.com/GoogleCloudPlatform/cloud-sql-proxy/v2/cloudsql\"\n\n// Option is a function that configures a Command.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/wait_test.go"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 7,
                  "endLine": 16,
                  "snippet": {
                    "text": "// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage cmd\n\nimport (\n\t\"io\"\n\t\"net\"\n",
                    "rendered": {
                      "text": "// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage cmd\n\nimport (\n\t\"io\"\n\t\"net\"\n",
                      "markdown": "`// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage cmd\n\nimport (\n\t\"io\"\n\t\"net\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/disaster-recovery/README.md"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 2,
                  "endLine": 9,
                  "endColumn": 10,
                  "snippet": {
                    "text": "detecting and triggering failovers:\n1. Using an independent service to detect when the primary is down\n2. Trigger a promotion of an existing read replica to become a primary\n3. Update a Secret Manager secret with the name of the current primary\n\n## Restart Auth Proxy when secret changes\n\n",
                    "rendered": {
                      "text": "detecting and triggering failovers:\n1. Using an independent service to detect when the primary is down\n2. Trigger a promotion of an existing read replica to become a primary\n3. Update a Secret Manager secret with the name of the current primary\n\n## Restart Auth Proxy when secret changes\n\n",
                      "markdown": "`detecting and triggering failovers:\n1. Using an independent service to detect when the primary is down\n2. Trigger a promotion of an existing read replica to become a primary\n3. Update a Secret Manager secret with the name of the current primary\n\n## Restart Auth Proxy when secret changes\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/disaster-recovery/README.md"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 26,
                  "endLine": 13,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n## Restart Auth Proxy when secret changes\n\nThis option uses a wrapper script around the Cloud SQL Auth Proxy to detect\nwhen the secret has changed, and restart the Proxy with the new value. This\ncould be done in many languages, but here’s an example using bash:\n\n",
                    "rendered": {
                      "text": "\n## Restart Auth Proxy when secret changes\n\nThis option uses a wrapper script around the Cloud SQL Auth Proxy to detect\nwhen the secret has changed, and restart the Proxy with the new value. This\ncould be done in many languages, but here’s an example using bash:\n\n",
                      "markdown": "`\n## Restart Auth Proxy when secret changes\n\nThis option uses a wrapper script around the Cloud SQL Auth Proxy to detect\nwhen the secret has changed, and restart the Proxy with the new value. This\ncould be done in many languages, but here’s an example using bash:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/disaster-recovery/README.md"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 23,
                  "endLine": 7,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\nThis document assumes you are already using the following strategy for\ndetecting and triggering failovers:\n1. Using an independent service to detect when the primary is down\n2. Trigger a promotion of an existing read replica to become a primary\n3. Update a Secret Manager secret with the name of the current primary\n\n",
                    "rendered": {
                      "text": "\nThis document assumes you are already using the following strategy for\ndetecting and triggering failovers:\n1. Using an independent service to detect when the primary is down\n2. Trigger a promotion of an existing read replica to become a primary\n3. Update a Secret Manager secret with the name of the current primary\n\n",
                      "markdown": "`\nThis document assumes you are already using the following strategy for\ndetecting and triggering failovers:\n1. Using an independent service to detect when the primary is down\n2. Trigger a promotion of an existing read replica to become a primary\n3. Update a Secret Manager secret with the name of the current primary\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/service_account.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/job_with_shutdown_hook.yaml"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 22,
                  "endLine": 60,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        terminationMessagePolicy: File\n      - name: cloud-sql-proxy\n        # It is recommended to use the latest version of the Cloud SQL Auth Proxy\n        # Make sure to update on a regular schedule!\n        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.4\n        args:\n        # Enable the admin api server on port 9091\n",
                    "rendered": {
                      "text": "        terminationMessagePolicy: File\n      - name: cloud-sql-proxy\n        # It is recommended to use the latest version of the Cloud SQL Auth Proxy\n        # Make sure to update on a regular schedule!\n        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.4\n        args:\n        # Enable the admin api server on port 9091\n",
                      "markdown": "`        terminationMessagePolicy: File\n      - name: cloud-sql-proxy\n        # It is recommended to use the latest version of the Cloud SQL Auth Proxy\n        # Make sure to update on a regular schedule!\n        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.4\n        args:\n        # Enable the admin api server on port 9091\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/job_with_shutdown_hook.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/job_with_shutdown_hook.yaml"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 14,
                  "endLine": 54,
                  "snippet": {
                    "text": "        - >\n          my_batch_job --host=127.0.0.1 --port=<DB_PORT> --username=<DB_USER> --dbname=<DB_NAME>\n          curl http://localhost:9091/quitquitquit\n        image: busybox\n        imagePullPolicy: IfNotPresent\n        resources: {}\n        terminationMessagePath: /dev/termination-log\n        terminationMessagePolicy: File\n",
                    "rendered": {
                      "text": "        - >\n          my_batch_job --host=127.0.0.1 --port=<DB_PORT> --username=<DB_USER> --dbname=<DB_NAME>\n          curl http://localhost:9091/quitquitquit\n        image: busybox\n        imagePullPolicy: IfNotPresent\n        resources: {}\n        terminationMessagePath: /dev/termination-log\n        terminationMessagePolicy: File\n",
                      "markdown": "`        - >\n          my_batch_job --host=127.0.0.1 --port=<DB_PORT> --username=<DB_USER> --dbname=<DB_NAME>\n          curl http://localhost:9091/quitquitquit\n        image: busybox\n        imagePullPolicy: IfNotPresent\n        resources: {}\n        terminationMessagePath: /dev/termination-log\n        terminationMessagePolicy: File\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/job_with_shutdown_hook.yaml"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 9,
                  "endLine": 52,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        - -c\n        - >\n          my_batch_job --host=127.0.0.1 --port=<DB_PORT> --username=<DB_USER> --dbname=<DB_NAME>\n          curl http://localhost:9091/quitquitquit\n        image: busybox\n        imagePullPolicy: IfNotPresent\n        resources: {}\n",
                    "rendered": {
                      "text": "        - -c\n        - >\n          my_batch_job --host=127.0.0.1 --port=<DB_PORT> --username=<DB_USER> --dbname=<DB_NAME>\n          curl http://localhost:9091/quitquitquit\n        image: busybox\n        imagePullPolicy: IfNotPresent\n        resources: {}\n",
                      "markdown": "`        - -c\n        - >\n          my_batch_job --host=127.0.0.1 --port=<DB_PORT> --username=<DB_USER> --dbname=<DB_NAME>\n          curl http://localhost:9091/quitquitquit\n        image: busybox\n        imagePullPolicy: IfNotPresent\n        resources: {}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/job_with_shutdown_hook.yaml"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 12,
                  "endLine": 41,
                  "snippet": {
                    "text": "    metadata:\n      creationTimestamp: null\n      labels:\n        app: busybox\n    spec:\n      containers:\n      - name: my-application\n        # Run your batch job command.\n",
                    "rendered": {
                      "text": "    metadata:\n      creationTimestamp: null\n      labels:\n        app: busybox\n    spec:\n      containers:\n      - name: my-application\n        # Run your batch job command.\n",
                      "markdown": "`    metadata:\n      creationTimestamp: null\n      labels:\n        app: busybox\n    spec:\n      containers:\n      - name: my-application\n        # Run your batch job command.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/job_with_shutdown_hook.yaml"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 8,
                  "endLine": 35,
                  "snippet": {
                    "text": "metadata:\n  name: job\n  labels:\n    app: busybox\nspec:\n  template:\n    metadata:\n      creationTimestamp: null\n",
                    "rendered": {
                      "text": "metadata:\n  name: job\n  labels:\n    app: busybox\nspec:\n  template:\n    metadata:\n      creationTimestamp: null\n",
                      "markdown": "`metadata:\n  name: job\n  labels:\n    app: busybox\nspec:\n  template:\n    metadata:\n      creationTimestamp: null\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/no_proxy_private_ip.yaml"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 12,
                  "endLine": 50,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        # [START cloud_sql_proxy_secret_host]\n        - name: DB_HOST\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-PRIVATE-IP-SECRET>\n              key: db_host\n        # [END cloud_sql_proxy_secret_host]\n",
                    "rendered": {
                      "text": "        # [START cloud_sql_proxy_secret_host]\n        - name: DB_HOST\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-PRIVATE-IP-SECRET>\n              key: db_host\n        # [END cloud_sql_proxy_secret_host]\n",
                      "markdown": "`        # [START cloud_sql_proxy_secret_host]\n        - name: DB_HOST\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-PRIVATE-IP-SECRET>\n              key: db_host\n        # [END cloud_sql_proxy_secret_host]\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/no_proxy_private_ip.yaml"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 12,
                  "endLine": 44,
                  "endColumn": 21,
                  "snippet": {
                    "text": "              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: database\n        # [START cloud_sql_proxy_secret_host]\n",
                    "rendered": {
                      "text": "              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: database\n        # [START cloud_sql_proxy_secret_host]\n",
                      "markdown": "`              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: database\n        # [START cloud_sql_proxy_secret_host]\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/no_proxy_private_ip.yaml"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 19,
                  "endLine": 41,
                  "endColumn": 27,
                  "snippet": {
                    "text": "          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n",
                    "rendered": {
                      "text": "          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n",
                      "markdown": "`          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/no_proxy_private_ip.yaml"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 12,
                  "endLine": 39,
                  "endColumn": 21,
                  "snippet": {
                    "text": "              key: username\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n",
                    "rendered": {
                      "text": "              key: username\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n",
                      "markdown": "`              key: username\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/no_proxy_private_ip.yaml"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 12,
                  "endLine": 34,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        env:\n        - name: DB_USER\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: username\n        - name: DB_PASS\n",
                    "rendered": {
                      "text": "        env:\n        - name: DB_USER\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: username\n        - name: DB_PASS\n",
                      "markdown": "`        env:\n        - name: DB_USER\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: username\n        - name: DB_PASS\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/no_proxy_private_ip.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/proxy_with_sa_key.yaml"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 12,
                  "endLine": 44,
                  "endColumn": 21,
                  "snippet": {
                    "text": "              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: database\n      - name: cloud-sql-proxy\n",
                    "rendered": {
                      "text": "              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: database\n      - name: cloud-sql-proxy\n",
                      "markdown": "`              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: database\n      - name: cloud-sql-proxy\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/proxy_with_sa_key.yaml"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 19,
                  "endLine": 41,
                  "endColumn": 27,
                  "snippet": {
                    "text": "          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n",
                    "rendered": {
                      "text": "          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n",
                      "markdown": "`          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/proxy_with_sa_key.yaml"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 12,
                  "endLine": 39,
                  "endColumn": 21,
                  "snippet": {
                    "text": "              key: username\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n",
                    "rendered": {
                      "text": "              key: username\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n",
                      "markdown": "`              key: username\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/proxy_with_sa_key.yaml"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 12,
                  "endLine": 34,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        env:\n        - name: DB_USER\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: username\n        - name: DB_PASS\n",
                    "rendered": {
                      "text": "        env:\n        - name: DB_USER\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: username\n        - name: DB_PASS\n",
                      "markdown": "`        env:\n        - name: DB_USER\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: username\n        - name: DB_PASS\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/proxy_with_sa_key.yaml"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 22,
                  "endLine": 49,
                  "endColumn": 30,
                  "snippet": {
                    "text": "              key: database\n      - name: cloud-sql-proxy\n        # It is recommended to use the latest version of the Cloud SQL Auth Proxy\n        # Make sure to update on a regular schedule!\n        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.4\n        args:\n          # If connecting from a VPC-native GKE cluster, you can use the\n",
                    "rendered": {
                      "text": "              key: database\n      - name: cloud-sql-proxy\n        # It is recommended to use the latest version of the Cloud SQL Auth Proxy\n        # Make sure to update on a regular schedule!\n        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.4\n        args:\n          # If connecting from a VPC-native GKE cluster, you can use the\n",
                      "markdown": "`              key: database\n      - name: cloud-sql-proxy\n        # It is recommended to use the latest version of the Cloud SQL Auth Proxy\n        # Make sure to update on a regular schedule!\n        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.4\n        args:\n          # If connecting from a VPC-native GKE cluster, you can use the\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/proxy_with_sa_key.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/proxy_with_sa_key.yaml"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 41,
                  "endLine": 65,
                  "endColumn": 50,
                  "snippet": {
                    "text": "          - \"<INSTANCE_CONNECTION_NAME>\"\n\n        # [START cloud_sql_proxy_k8s_volume_mount]\n          # This flag specifies where the service account key can be found\n          - \"--credentials-file=/secrets/service_account.json\"\n        securityContext:\n          # The default Cloud SQL Auth Proxy image runs as the\n",
                    "rendered": {
                      "text": "          - \"<INSTANCE_CONNECTION_NAME>\"\n\n        # [START cloud_sql_proxy_k8s_volume_mount]\n          # This flag specifies where the service account key can be found\n          - \"--credentials-file=/secrets/service_account.json\"\n        securityContext:\n          # The default Cloud SQL Auth Proxy image runs as the\n",
                      "markdown": "`          - \"<INSTANCE_CONNECTION_NAME>\"\n\n        # [START cloud_sql_proxy_k8s_volume_mount]\n          # This flag specifies where the service account key can be found\n          - \"--credentials-file=/secrets/service_account.json\"\n        securityContext:\n          # The default Cloud SQL Auth Proxy image runs as the\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/proxy_with_sa_key.yaml"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 65,
                  "endLine": 54,
                  "snippet": {
                    "text": "        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.4\n        args:\n          # If connecting from a VPC-native GKE cluster, you can use the\n          # following flag to have the proxy connect over private IP\n          # - \"--private-ip\"\n\n          # Enable structured logging with LogEntry format:\n          - \"--structured-logs\"\n",
                    "rendered": {
                      "text": "        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.4\n        args:\n          # If connecting from a VPC-native GKE cluster, you can use the\n          # following flag to have the proxy connect over private IP\n          # - \"--private-ip\"\n\n          # Enable structured logging with LogEntry format:\n          - \"--structured-logs\"\n",
                      "markdown": "`        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.4\n        args:\n          # If connecting from a VPC-native GKE cluster, you can use the\n          # following flag to have the proxy connect over private IP\n          # - \"--private-ip\"\n\n          # Enable structured logging with LogEntry format:\n          - \"--structured-logs\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 7,
                  "endLine": 252,
                  "endColumn": 16,
                  "snippet": {
                    "text": "   ```yaml\n   - name: DB_HOST\n     valueFrom:\n       secretKeyRef:\n         name: <YOUR-PRIVATE-IP-SECRET>\n         key: db_host\n   ```\n",
                    "rendered": {
                      "text": "   ```yaml\n   - name: DB_HOST\n     valueFrom:\n       secretKeyRef:\n         name: <YOUR-PRIVATE-IP-SECRET>\n         key: db_host\n   ```\n",
                      "markdown": "`   ```yaml\n   - name: DB_HOST\n     valueFrom:\n       secretKeyRef:\n         name: <YOUR-PRIVATE-IP-SECRET>\n         key: db_host\n   ```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 12,
                  "endLine": 39,
                  "endColumn": 21,
                  "snippet": {
                    "text": "              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: database\n    ```\n",
                    "rendered": {
                      "text": "              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: database\n    ```\n",
                      "markdown": "`              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: database\n    ```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 19,
                  "endLine": 36,
                  "endColumn": 27,
                  "snippet": {
                    "text": "          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n",
                    "rendered": {
                      "text": "          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n",
                      "markdown": "`          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 12,
                  "endLine": 34,
                  "endColumn": 21,
                  "snippet": {
                    "text": "              key: username\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n",
                    "rendered": {
                      "text": "              key: username\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n",
                      "markdown": "`              key: username\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 12,
                  "endLine": 29,
                  "endColumn": 21,
                  "snippet": {
                    "text": "       env:\n        - name: DB_USER\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: username\n        - name: DB_PASS\n",
                    "rendered": {
                      "text": "       env:\n        - name: DB_USER\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: username\n        - name: DB_PASS\n",
                      "markdown": "`       env:\n        - name: DB_USER\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: username\n        - name: DB_PASS\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 47,
                  "endLine": 19,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    ```shell\n    kubectl create secret generic <YOUR-DB-SECRET> \\\n        --from-literal=username=<YOUR-DATABASE-USER> \\\n        --from-literal=password=<YOUR-DATABASE-PASSWORD> \\\n        --from-literal=database=<YOUR-DATABASE-NAME>\n    ```\n2. Next, configure your application's container to mount the secrets as env\n",
                    "rendered": {
                      "text": "    ```shell\n    kubectl create secret generic <YOUR-DB-SECRET> \\\n        --from-literal=username=<YOUR-DATABASE-USER> \\\n        --from-literal=password=<YOUR-DATABASE-PASSWORD> \\\n        --from-literal=database=<YOUR-DATABASE-NAME>\n    ```\n2. Next, configure your application's container to mount the secrets as env\n",
                      "markdown": "`    ```shell\n    kubectl create secret generic <YOUR-DB-SECRET> \\\n        --from-literal=username=<YOUR-DATABASE-USER> \\\n        --from-literal=password=<YOUR-DATABASE-PASSWORD> \\\n        --from-literal=database=<YOUR-DATABASE-NAME>\n    ```\n2. Next, configure your application's container to mount the secrets as env\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 23,
                  "endLine": 19,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    ```shell\n    kubectl create secret generic <YOUR-DB-SECRET> \\\n        --from-literal=username=<YOUR-DATABASE-USER> \\\n        --from-literal=password=<YOUR-DATABASE-PASSWORD> \\\n        --from-literal=database=<YOUR-DATABASE-NAME>\n    ```\n2. Next, configure your application's container to mount the secrets as env\n",
                    "rendered": {
                      "text": "    ```shell\n    kubectl create secret generic <YOUR-DB-SECRET> \\\n        --from-literal=username=<YOUR-DATABASE-USER> \\\n        --from-literal=password=<YOUR-DATABASE-PASSWORD> \\\n        --from-literal=database=<YOUR-DATABASE-NAME>\n    ```\n2. Next, configure your application's container to mount the secrets as env\n",
                      "markdown": "`    ```shell\n    kubectl create secret generic <YOUR-DB-SECRET> \\\n        --from-literal=username=<YOUR-DATABASE-USER> \\\n        --from-literal=password=<YOUR-DATABASE-PASSWORD> \\\n        --from-literal=database=<YOUR-DATABASE-NAME>\n    ```\n2. Next, configure your application's container to mount the secrets as env\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 10,
                  "endLine": 13,
                  "endColumn": 18,
                  "snippet": {
                    "text": "details to your application. Each Secret object can contain multiple key/value\npairs that can be pass to your application in multiple ways. When connecting to\na database, you can create a Secret with details such as your database name,\nuser, and password which can be injected into your application as env vars.\n\n1. Create a secret with information needed to access your database:\n    ```shell\n",
                    "rendered": {
                      "text": "details to your application. Each Secret object can contain multiple key/value\npairs that can be pass to your application in multiple ways. When connecting to\na database, you can create a Secret with details such as your database name,\nuser, and password which can be injected into your application as env vars.\n\n1. Create a secret with information needed to access your database:\n    ```shell\n",
                      "markdown": "`details to your application. Each Secret object can contain multiple key/value\npairs that can be pass to your application in multiple ways. When connecting to\na database, you can create a Secret with details such as your database name,\nuser, and password which can be injected into your application as env vars.\n\n1. Create a secret with information needed to access your database:\n    ```shell\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 20,
                  "endLine": 185,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    ```yaml\n    - name: cloud-sql-proxy\n      # It is recommended to use the latest version of the Cloud SQL Auth Proxy\n      # Make sure to update on a regular schedule!\n      image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.13.0  # make sure to use the latest version\n      args:\n        # If connecting from a VPC-native GKE cluster, you can use the\n",
                    "rendered": {
                      "text": "    ```yaml\n    - name: cloud-sql-proxy\n      # It is recommended to use the latest version of the Cloud SQL Auth Proxy\n      # Make sure to update on a regular schedule!\n      image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.13.0  # make sure to use the latest version\n      args:\n        # If connecting from a VPC-native GKE cluster, you can use the\n",
                      "markdown": "`    ```yaml\n    - name: cloud-sql-proxy\n      # It is recommended to use the latest version of the Cloud SQL Auth Proxy\n      # Make sure to update on a regular schedule!\n      image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.13.0  # make sure to use the latest version\n      args:\n        # If connecting from a VPC-native GKE cluster, you can use the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 12,
                  "endLine": 258,
                  "endColumn": 17,
                  "snippet": {
                    "text": "   ```\n\n3. Finally, configure your application to connect using the IP address from the\n   `DB_HOST` env var. You will need to use the correct port for your db-engine\n   (MySQL: `3306`, Postgres: `5432`, SQLServer: `1433`).\n",
                    "rendered": {
                      "text": "   ```\n\n3. Finally, configure your application to connect using the IP address from the\n   `DB_HOST` env var. You will need to use the correct port for your db-engine\n   (MySQL: `3306`, Postgres: `5432`, SQLServer: `1433`).\n",
                      "markdown": "`   ```\n\n3. Finally, configure your application to connect using the IP address from the\n   `DB_HOST` env var. You will need to use the correct port for your db-engine\n   (MySQL: `3306`, Postgres: `5432`, SQLServer: `1433`).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 59,
                  "endLine": 257,
                  "endColumn": 63,
                  "snippet": {
                    "text": "         key: db_host\n   ```\n\n3. Finally, configure your application to connect using the IP address from the\n   `DB_HOST` env var. You will need to use the correct port for your db-engine\n   (MySQL: `3306`, Postgres: `5432`, SQLServer: `1433`).\n",
                    "rendered": {
                      "text": "         key: db_host\n   ```\n\n3. Finally, configure your application to connect using the IP address from the\n   `DB_HOST` env var. You will need to use the correct port for your db-engine\n   (MySQL: `3306`, Postgres: `5432`, SQLServer: `1433`).\n",
                      "markdown": "`         key: db_host\n   ```\n\n3. Finally, configure your application to connect using the IP address from the\n   `DB_HOST` env var. You will need to use the correct port for your db-engine\n   (MySQL: `3306`, Postgres: `5432`, SQLServer: `1433`).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 47,
                  "endLine": 241,
                  "endColumn": 51,
                  "snippet": {
                    "text": "While not as secure, it is possible to connect from a VPC-native GKE cluster to\na Cloud SQL instance on the same VPC using private IP without the proxy.\n\n1. Create a secret with your instance's private IP address:\n    ```shell\n    kubectl create secret generic <YOUR-PRIVATE-IP-SECRET> \\\n        --from-literal=db_host=<YOUR-PRIVATE-IP-ADDRESS>\n",
                    "rendered": {
                      "text": "While not as secure, it is possible to connect from a VPC-native GKE cluster to\na Cloud SQL instance on the same VPC using private IP without the proxy.\n\n1. Create a secret with your instance's private IP address:\n    ```shell\n    kubectl create secret generic <YOUR-PRIVATE-IP-SECRET> \\\n        --from-literal=db_host=<YOUR-PRIVATE-IP-ADDRESS>\n",
                      "markdown": "`While not as secure, it is possible to connect from a VPC-native GKE cluster to\na Cloud SQL instance on the same VPC using private IP without the proxy.\n\n1. Create a secret with your instance's private IP address:\n    ```shell\n    kubectl create secret generic <YOUR-PRIVATE-IP-SECRET> \\\n        --from-literal=db_host=<YOUR-PRIVATE-IP-ADDRESS>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 50,
                  "endLine": 239,
                  "endColumn": 54,
                  "snippet": {
                    "text": "## Connecting without the Cloud SQL Auth Proxy\n\nWhile not as secure, it is possible to connect from a VPC-native GKE cluster to\na Cloud SQL instance on the same VPC using private IP without the proxy.\n\n1. Create a secret with your instance's private IP address:\n    ```shell\n",
                    "rendered": {
                      "text": "## Connecting without the Cloud SQL Auth Proxy\n\nWhile not as secure, it is possible to connect from a VPC-native GKE cluster to\na Cloud SQL instance on the same VPC using private IP without the proxy.\n\n1. Create a secret with your instance's private IP address:\n    ```shell\n",
                      "markdown": "`## Connecting without the Cloud SQL Auth Proxy\n\nWhile not as secure, it is possible to connect from a VPC-native GKE cluster to\na Cloud SQL instance on the same VPC using private IP without the proxy.\n\n1. Create a secret with your instance's private IP address:\n    ```shell\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 37,
                  "endLine": 220,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n   > [proxy_with_sa_key.yaml](proxy_with_sa_key.yaml#L49-L58)\n    ```yaml\n      # This flag specifies where the service account key can be found\n      - \"--credentials-file=/secrets/service_account.json\"\n    securityContext:\n      # The default Cloud SQL Auth Proxy image runs as the\n",
                    "rendered": {
                      "text": "\n   > [proxy_with_sa_key.yaml](proxy_with_sa_key.yaml#L49-L58)\n    ```yaml\n      # This flag specifies where the service account key can be found\n      - \"--credentials-file=/secrets/service_account.json\"\n    securityContext:\n      # The default Cloud SQL Auth Proxy image runs as the\n",
                      "markdown": "`\n   > [proxy_with_sa_key.yaml](proxy_with_sa_key.yaml#L49-L58)\n    ```yaml\n      # This flag specifies where the service account key can be found\n      - \"--credentials-file=/secrets/service_account.json\"\n    securityContext:\n      # The default Cloud SQL Auth Proxy image runs as the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 21,
                  "endLine": 215,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    ```\n<!-- {x-release-please-end} -->\n\n   If you are using a service account key, specify your secret volume and add\n   the `--credentials-file` flag to the command:\n\n   > [proxy_with_sa_key.yaml](proxy_with_sa_key.yaml#L49-L58)\n",
                    "rendered": {
                      "text": "    ```\n<!-- {x-release-please-end} -->\n\n   If you are using a service account key, specify your secret volume and add\n   the `--credentials-file` flag to the command:\n\n   > [proxy_with_sa_key.yaml](proxy_with_sa_key.yaml#L49-L58)\n",
                      "markdown": "`    ```\n<!-- {x-release-please-end} -->\n\n   If you are using a service account key, specify your secret volume and add\n   the `--credentials-file` flag to the command:\n\n   > [proxy_with_sa_key.yaml](proxy_with_sa_key.yaml#L49-L58)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 63,
                  "endLine": 190,
                  "snippet": {
                    "text": "      image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.13.0  # make sure to use the latest version\n      args:\n        # If connecting from a VPC-native GKE cluster, you can use the\n        # following flag to have the proxy connect over private IP\n        # - \"--private-ip\"\n\n        # Replace DB_PORT with the port the proxy should listen on\n        - \"--port=<DB_PORT>\"\n",
                    "rendered": {
                      "text": "      image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.13.0  # make sure to use the latest version\n      args:\n        # If connecting from a VPC-native GKE cluster, you can use the\n        # following flag to have the proxy connect over private IP\n        # - \"--private-ip\"\n\n        # Replace DB_PORT with the port the proxy should listen on\n        - \"--port=<DB_PORT>\"\n",
                      "markdown": "`      image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.13.0  # make sure to use the latest version\n      args:\n        # If connecting from a VPC-native GKE cluster, you can use the\n        # following flag to have the proxy connect over private IP\n        # - \"--private-ip\"\n\n        # Replace DB_PORT with the port the proxy should listen on\n        - \"--port=<DB_PORT>\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 13,
                  "endLine": 165,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\nWe recommend running the proxy in a \"sidecar\" pattern (as an additional\ncontainer sharing a pod with your application). We recommend this over running\nas a separate service for several reasons:\n\n* Prevents your SQL traffic from being exposed locally - the proxy provides\n  encryption on outgoing connections, but you should limit exposure for\n",
                    "rendered": {
                      "text": "\nWe recommend running the proxy in a \"sidecar\" pattern (as an additional\ncontainer sharing a pod with your application). We recommend this over running\nas a separate service for several reasons:\n\n* Prevents your SQL traffic from being exposed locally - the proxy provides\n  encryption on outgoing connections, but you should limit exposure for\n",
                      "markdown": "`\nWe recommend running the proxy in a \"sidecar\" pattern (as an additional\ncontainer sharing a pod with your application). We recommend this over running\nas a separate service for several reasons:\n\n* Prevents your SQL traffic from being exposed locally - the proxy provides\n  encryption on outgoing connections, but you should limit exposure for\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 2,
                  "endLine": 147,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    kubectl create secret generic <YOUR-SA-SECRET> \\\n    --from-file=service_account.json=~/key.json\n    ```\n3. Mount the secret as a volume under the`spec:` for your k8s object:\n    > [proxy_with_sa_key.yaml](proxy_with_sa_key.yaml#L74-L77)\n    ```yaml\n    volumes:\n",
                    "rendered": {
                      "text": "    kubectl create secret generic <YOUR-SA-SECRET> \\\n    --from-file=service_account.json=~/key.json\n    ```\n3. Mount the secret as a volume under the`spec:` for your k8s object:\n    > [proxy_with_sa_key.yaml](proxy_with_sa_key.yaml#L74-L77)\n    ```yaml\n    volumes:\n",
                      "markdown": "`    kubectl create secret generic <YOUR-SA-SECRET> \\\n    --from-file=service_account.json=~/key.json\n    ```\n3. Mount the secret as a volume under the`spec:` for your k8s object:\n    > [proxy_with_sa_key.yaml](proxy_with_sa_key.yaml#L74-L77)\n    ```yaml\n    volumes:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 12,
                  "endLine": 142,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    gcloud iam service-accounts keys create ~/key.json \\\n      --iam-account <YOUR-SA-NAME>@project-id.iam.gserviceaccount.com\n    ```\n1. Turn your service account key into a k8s [Secret][k8s-secret]:\n    ```shell\n    kubectl create secret generic <YOUR-SA-SECRET> \\\n    --from-file=service_account.json=~/key.json\n",
                    "rendered": {
                      "text": "    gcloud iam service-accounts keys create ~/key.json \\\n      --iam-account <YOUR-SA-NAME>@project-id.iam.gserviceaccount.com\n    ```\n1. Turn your service account key into a k8s [Secret][k8s-secret]:\n    ```shell\n    kubectl create secret generic <YOUR-SA-SECRET> \\\n    --from-file=service_account.json=~/key.json\n",
                      "markdown": "`    gcloud iam service-accounts keys create ~/key.json \\\n      --iam-account <YOUR-SA-NAME>@project-id.iam.gserviceaccount.com\n    ```\n1. Turn your service account key into a k8s [Secret][k8s-secret]:\n    ```shell\n    kubectl create secret generic <YOUR-SA-SECRET> \\\n    --from-file=service_account.json=~/key.json\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 36,
                  "endLine": 137,
                  "endColumn": 45,
                  "snippet": {
                    "text": "to mount a service account key file into the Cloud SQL Auth Proxy pod and use the\n`--credentials-file` flag.\n\n1. Create a credential file for your service account key:\n    ```sh\n    gcloud iam service-accounts keys create ~/key.json \\\n      --iam-account <YOUR-SA-NAME>@project-id.iam.gserviceaccount.com\n",
                    "rendered": {
                      "text": "to mount a service account key file into the Cloud SQL Auth Proxy pod and use the\n`--credentials-file` flag.\n\n1. Create a credential file for your service account key:\n    ```sh\n    gcloud iam service-accounts keys create ~/key.json \\\n      --iam-account <YOUR-SA-NAME>@project-id.iam.gserviceaccount.com\n",
                      "markdown": "`to mount a service account key file into the Cloud SQL Auth Proxy pod and use the\n`--credentials-file` flag.\n\n1. Create a credential file for your service account key:\n    ```sh\n    gcloud iam service-accounts keys create ~/key.json \\\n      --iam-account <YOUR-SA-NAME>@project-id.iam.gserviceaccount.com\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 10,
                  "endLine": 134,
                  "endColumn": 19,
                  "snippet": {
                    "text": "### Service account key file\n\nAlternatively, if your can't use Workload Identity, the recommended pattern is\nto mount a service account key file into the Cloud SQL Auth Proxy pod and use the\n`--credentials-file` flag.\n\n1. Create a credential file for your service account key:\n",
                    "rendered": {
                      "text": "### Service account key file\n\nAlternatively, if your can't use Workload Identity, the recommended pattern is\nto mount a service account key file into the Cloud SQL Auth Proxy pod and use the\n`--credentials-file` flag.\n\n1. Create a credential file for your service account key:\n",
                      "markdown": "`### Service account key file\n\nAlternatively, if your can't use Workload Identity, the recommended pattern is\nto mount a service account key file into the Cloud SQL Auth Proxy pod and use the\n`--credentials-file` flag.\n\n1. Create a credential file for your service account key:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 2,
                  "endLine": 134,
                  "endColumn": 9,
                  "snippet": {
                    "text": "### Service account key file\n\nAlternatively, if your can't use Workload Identity, the recommended pattern is\nto mount a service account key file into the Cloud SQL Auth Proxy pod and use the\n`--credentials-file` flag.\n\n1. Create a credential file for your service account key:\n",
                    "rendered": {
                      "text": "### Service account key file\n\nAlternatively, if your can't use Workload Identity, the recommended pattern is\nto mount a service account key file into the Cloud SQL Auth Proxy pod and use the\n`--credentials-file` flag.\n\n1. Create a credential file for your service account key:\n",
                      "markdown": "`### Service account key file\n\nAlternatively, if your can't use Workload Identity, the recommended pattern is\nto mount a service account key file into the Cloud SQL Auth Proxy pod and use the\n`--credentials-file` flag.\n\n1. Create a credential file for your service account key:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 3,
                  "endLine": 131,
                  "endColumn": 12,
                  "snippet": {
                    "text": "[enable-wi]: https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity#enable_on_existing_cluster\n[enable-wi-node-pool]: https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity#option_2_node_pool_modification\n\n### Service account key file\n\nAlternatively, if your can't use Workload Identity, the recommended pattern is\nto mount a service account key file into the Cloud SQL Auth Proxy pod and use the\n",
                    "rendered": {
                      "text": "[enable-wi]: https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity#enable_on_existing_cluster\n[enable-wi-node-pool]: https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity#option_2_node_pool_modification\n\n### Service account key file\n\nAlternatively, if your can't use Workload Identity, the recommended pattern is\nto mount a service account key file into the Cloud SQL Auth Proxy pod and use the\n",
                      "markdown": "`[enable-wi]: https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity#enable_on_existing_cluster\n[enable-wi-node-pool]: https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity#option_2_node_pool_modification\n\n### Service account key file\n\nAlternatively, if your can't use Workload Identity, the recommended pattern is\nto mount a service account key file into the Cloud SQL Auth Proxy pod and use the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 36,
                  "endLine": 106,
                  "endColumn": 45,
                  "snippet": {
                    "text": "       <YOUR-KSA-NAME> \\\n       iam.gke.io/gcp-service-account=<YOUR-GSA-NAME>@<YOUR-GCP-PROJECT>.iam.gserviceaccount.com\n    ```\n1. Finally, make sure to specify the service account for the k8s pod spec:\n    > [proxy_with_workload_identity.yaml](proxy_with_workload_identity.yaml#L2-L15)\n    ```yaml\n    apiVersion: apps/v1\n",
                    "rendered": {
                      "text": "       <YOUR-KSA-NAME> \\\n       iam.gke.io/gcp-service-account=<YOUR-GSA-NAME>@<YOUR-GCP-PROJECT>.iam.gserviceaccount.com\n    ```\n1. Finally, make sure to specify the service account for the k8s pod spec:\n    > [proxy_with_workload_identity.yaml](proxy_with_workload_identity.yaml#L2-L15)\n    ```yaml\n    apiVersion: apps/v1\n",
                      "markdown": "`       <YOUR-KSA-NAME> \\\n       iam.gke.io/gcp-service-account=<YOUR-GSA-NAME>@<YOUR-GCP-PROJECT>.iam.gserviceaccount.com\n    ```\n1. Finally, make sure to specify the service account for the k8s pod spec:\n    > [proxy_with_workload_identity.yaml](proxy_with_workload_identity.yaml#L2-L15)\n    ```yaml\n    apiVersion: apps/v1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 37,
                  "endLine": 83,
                  "endColumn": 43,
                  "snippet": {
                    "text": "(GSA). The GSA will then be accessible to applications using the matching KSA.\n\n1. [Enable Workload Identity for your cluster][enable-wi]\n1. [Enable Workload Identity for your node pool][enable-wi-node-pool]\n1. Create a KSA for your application `kubectl apply -f service-account.yaml`:\n\n    > [service-account.yaml](service_account.yaml#L2-L5)\n",
                    "rendered": {
                      "text": "(GSA). The GSA will then be accessible to applications using the matching KSA.\n\n1. [Enable Workload Identity for your cluster][enable-wi]\n1. [Enable Workload Identity for your node pool][enable-wi-node-pool]\n1. Create a KSA for your application `kubectl apply -f service-account.yaml`:\n\n    > [service-account.yaml](service_account.yaml#L2-L5)\n",
                      "markdown": "`(GSA). The GSA will then be accessible to applications using the matching KSA.\n\n1. [Enable Workload Identity for your cluster][enable-wi]\n1. [Enable Workload Identity for your node pool][enable-wi-node-pool]\n1. Create a KSA for your application `kubectl apply -f service-account.yaml`:\n\n    > [service-account.yaml](service_account.yaml#L2-L5)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 58,
                  "endLine": 79,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\nIf you are using [Google Kubernetes Engine][gke],  the preferred method is to\nuse GKE's [Workload Identity][workload-id] feature. This method allows you to\nbind a [Kubernetes Service Account (KSA)][ksa] to a Google Service Account\n(GSA). The GSA will then be accessible to applications using the matching KSA.\n\n1. [Enable Workload Identity for your cluster][enable-wi]\n",
                    "rendered": {
                      "text": "\nIf you are using [Google Kubernetes Engine][gke],  the preferred method is to\nuse GKE's [Workload Identity][workload-id] feature. This method allows you to\nbind a [Kubernetes Service Account (KSA)][ksa] to a Google Service Account\n(GSA). The GSA will then be accessible to applications using the matching KSA.\n\n1. [Enable Workload Identity for your cluster][enable-wi]\n",
                      "markdown": "`\nIf you are using [Google Kubernetes Engine][gke],  the preferred method is to\nuse GKE's [Workload Identity][workload-id] feature. This method allows you to\nbind a [Kubernetes Service Account (KSA)][ksa] to a Google Service Account\n(GSA). The GSA will then be accessible to applications using the matching KSA.\n\n1. [Enable Workload Identity for your cluster][enable-wi]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 18,
                  "endLine": 79,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\nIf you are using [Google Kubernetes Engine][gke],  the preferred method is to\nuse GKE's [Workload Identity][workload-id] feature. This method allows you to\nbind a [Kubernetes Service Account (KSA)][ksa] to a Google Service Account\n(GSA). The GSA will then be accessible to applications using the matching KSA.\n\n1. [Enable Workload Identity for your cluster][enable-wi]\n",
                    "rendered": {
                      "text": "\nIf you are using [Google Kubernetes Engine][gke],  the preferred method is to\nuse GKE's [Workload Identity][workload-id] feature. This method allows you to\nbind a [Kubernetes Service Account (KSA)][ksa] to a Google Service Account\n(GSA). The GSA will then be accessible to applications using the matching KSA.\n\n1. [Enable Workload Identity for your cluster][enable-wi]\n",
                      "markdown": "`\nIf you are using [Google Kubernetes Engine][gke],  the preferred method is to\nuse GKE's [Workload Identity][workload-id] feature. This method allows you to\nbind a [Kubernetes Service Account (KSA)][ksa] to a Google Service Account\n(GSA). The GSA will then be accessible to applications using the matching KSA.\n\n1. [Enable Workload Identity for your cluster][enable-wi]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 53,
                  "endLine": 72,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n## Providing the service account to the proxy\n\nNext, you need to configure Kubernetes to provide the service account to the\nCloud SQL Auth Proxy. There are two recommended ways to do this.\n\n### Workload Identity\n",
                    "rendered": {
                      "text": "\n## Providing the service account to the proxy\n\nNext, you need to configure Kubernetes to provide the service account to the\nCloud SQL Auth Proxy. There are two recommended ways to do this.\n\n### Workload Identity\n",
                      "markdown": "`\n## Providing the service account to the proxy\n\nNext, you need to configure Kubernetes to provide the service account to the\nCloud SQL Auth Proxy. There are two recommended ways to do this.\n\n### Workload Identity\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 16,
                  "endLine": 70,
                  "endColumn": 25,
                  "snippet": {
                    "text": "[csql-roles]: https://cloud.google.com/iam/docs/understanding-roles#cloud-sql-roles\n[vpc-gke]: https://cloud.google.com/kubernetes-engine/docs/how-to/alias-ips\n\n## Providing the service account to the proxy\n\nNext, you need to configure Kubernetes to provide the service account to the\nCloud SQL Auth Proxy. There are two recommended ways to do this.\n",
                    "rendered": {
                      "text": "[csql-roles]: https://cloud.google.com/iam/docs/understanding-roles#cloud-sql-roles\n[vpc-gke]: https://cloud.google.com/kubernetes-engine/docs/how-to/alias-ips\n\n## Providing the service account to the proxy\n\nNext, you need to configure Kubernetes to provide the service account to the\nCloud SQL Auth Proxy. There are two recommended ways to do this.\n",
                      "markdown": "`[csql-roles]: https://cloud.google.com/iam/docs/understanding-roles#cloud-sql-roles\n[vpc-gke]: https://cloud.google.com/kubernetes-engine/docs/how-to/alias-ips\n\n## Providing the service account to the proxy\n\nNext, you need to configure Kubernetes to provide the service account to the\nCloud SQL Auth Proxy. There are two recommended ways to do this.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 3,
                  "endLine": 56,
                  "endColumn": 12,
                  "snippet": {
                    "text": "account everywhere. This model is more secure since it allows your to limit\npermissions on a per-application basis.\n\nThe service account for your application needs to meet the following criteria:\n\n1. Belong to a project with the [Cloud SQL Admin API][admin-api] enabled\n1. [Has been granted][grant-sa] the\n",
                    "rendered": {
                      "text": "account everywhere. This model is more secure since it allows your to limit\npermissions on a per-application basis.\n\nThe service account for your application needs to meet the following criteria:\n\n1. Belong to a project with the [Cloud SQL Admin API][admin-api] enabled\n1. [Has been granted][grant-sa] the\n",
                      "markdown": "`account everywhere. This model is more secure since it allows your to limit\npermissions on a per-application basis.\n\nThe service account for your application needs to meet the following criteria:\n\n1. Belong to a project with the [Cloud SQL Admin API][admin-api] enabled\n1. [Has been granted][grant-sa] the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 71,
                  "endLine": 53,
                  "snippet": {
                    "text": "\nThe first step to running the Cloud SQL Auth Proxy in Kubernetes is creating a\nservice account to represent your application. It is recommended that you create\na service account unique to each application, instead of using the same service\naccount everywhere. This model is more secure since it allows your to limit\npermissions on a per-application basis.\n\nThe service account for your application needs to meet the following criteria:\n",
                    "rendered": {
                      "text": "\nThe first step to running the Cloud SQL Auth Proxy in Kubernetes is creating a\nservice account to represent your application. It is recommended that you create\na service account unique to each application, instead of using the same service\naccount everywhere. This model is more secure since it allows your to limit\npermissions on a per-application basis.\n\nThe service account for your application needs to meet the following criteria:\n",
                      "markdown": "`\nThe first step to running the Cloud SQL Auth Proxy in Kubernetes is creating a\nservice account to represent your application. It is recommended that you create\na service account unique to each application, instead of using the same service\naccount everywhere. This model is more secure since it allows your to limit\npermissions on a per-application basis.\n\nThe service account for your application needs to meet the following criteria:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 1,
                  "endLine": 52,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\nThe first step to running the Cloud SQL Auth Proxy in Kubernetes is creating a\nservice account to represent your application. It is recommended that you create\na service account unique to each application, instead of using the same service\naccount everywhere. This model is more secure since it allows your to limit\npermissions on a per-application basis.\n\n",
                    "rendered": {
                      "text": "\nThe first step to running the Cloud SQL Auth Proxy in Kubernetes is creating a\nservice account to represent your application. It is recommended that you create\na service account unique to each application, instead of using the same service\naccount everywhere. This model is more secure since it allows your to limit\npermissions on a per-application basis.\n\n",
                      "markdown": "`\nThe first step to running the Cloud SQL Auth Proxy in Kubernetes is creating a\nservice account to represent your application. It is recommended that you create\na service account unique to each application, instead of using the same service\naccount everywhere. This model is more secure since it allows your to limit\npermissions on a per-application basis.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 78,
                  "endLine": 51,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n## Setting up a service account\n\nThe first step to running the Cloud SQL Auth Proxy in Kubernetes is creating a\nservice account to represent your application. It is recommended that you create\na service account unique to each application, instead of using the same service\naccount everywhere. This model is more secure since it allows your to limit\npermissions on a per-application basis.\n",
                    "rendered": {
                      "text": "\n## Setting up a service account\n\nThe first step to running the Cloud SQL Auth Proxy in Kubernetes is creating a\nservice account to represent your application. It is recommended that you create\na service account unique to each application, instead of using the same service\naccount everywhere. This model is more secure since it allows your to limit\npermissions on a per-application basis.\n",
                      "markdown": "`\n## Setting up a service account\n\nThe first step to running the Cloud SQL Auth Proxy in Kubernetes is creating a\nservice account to represent your application. It is recommended that you create\na service account unique to each application, instead of using the same service\naccount everywhere. This model is more secure since it allows your to limit\npermissions on a per-application basis.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 15,
                  "endLine": 48,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n[ksa-secret]: https://kubernetes.io/docs/concepts/configuration/secret/\n\n## Setting up a service account\n\nThe first step to running the Cloud SQL Auth Proxy in Kubernetes is creating a\nservice account to represent your application. It is recommended that you create\n",
                    "rendered": {
                      "text": "\n[ksa-secret]: https://kubernetes.io/docs/concepts/configuration/secret/\n\n## Setting up a service account\n\nThe first step to running the Cloud SQL Auth Proxy in Kubernetes is creating a\nservice account to represent your application. It is recommended that you create\n",
                      "markdown": "`\n[ksa-secret]: https://kubernetes.io/docs/concepts/configuration/secret/\n\n## Setting up a service account\n\nThe first step to running the Cloud SQL Auth Proxy in Kubernetes is creating a\nservice account to represent your application. It is recommended that you create\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 32,
                  "endLine": 44,
                  "endColumn": 37,
                  "snippet": {
                    "text": "              key: database\n    ```\n3. Finally, configure your application to use these values. In the example\nabove, the values will be in the env vars `DB_USER`, `DB_PASS`, and `DB_NAME`.\n\n[ksa-secret]: https://kubernetes.io/docs/concepts/configuration/secret/\n\n",
                    "rendered": {
                      "text": "              key: database\n    ```\n3. Finally, configure your application to use these values. In the example\nabove, the values will be in the env vars `DB_USER`, `DB_PASS`, and `DB_NAME`.\n\n[ksa-secret]: https://kubernetes.io/docs/concepts/configuration/secret/\n\n",
                      "markdown": "`              key: database\n    ```\n3. Finally, configure your application to use these values. In the example\nabove, the values will be in the env vars `DB_USER`, `DB_PASS`, and `DB_NAME`.\n\n[ksa-secret]: https://kubernetes.io/docs/concepts/configuration/secret/\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 71,
                  "endLine": 23,
                  "snippet": {
                    "text": "        --from-literal=password=<YOUR-DATABASE-PASSWORD> \\\n        --from-literal=database=<YOUR-DATABASE-NAME>\n    ```\n2. Next, configure your application's container to mount the secrets as env\n   vars:\n    > [proxy_with_workload_identity.yaml](proxy_with_workload_identity.yaml#L21-L36)\n    ```yaml\n       env:\n",
                    "rendered": {
                      "text": "        --from-literal=password=<YOUR-DATABASE-PASSWORD> \\\n        --from-literal=database=<YOUR-DATABASE-NAME>\n    ```\n2. Next, configure your application's container to mount the secrets as env\n   vars:\n    > [proxy_with_workload_identity.yaml](proxy_with_workload_identity.yaml#L21-L36)\n    ```yaml\n       env:\n",
                      "markdown": "`        --from-literal=password=<YOUR-DATABASE-PASSWORD> \\\n        --from-literal=database=<YOUR-DATABASE-NAME>\n    ```\n2. Next, configure your application's container to mount the secrets as env\n   vars:\n    > [proxy_with_workload_identity.yaml](proxy_with_workload_identity.yaml#L21-L36)\n    ```yaml\n       env:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 50,
                  "endLine": 22,
                  "endColumn": 57,
                  "snippet": {
                    "text": "        --from-literal=password=<YOUR-DATABASE-PASSWORD> \\\n        --from-literal=database=<YOUR-DATABASE-NAME>\n    ```\n2. Next, configure your application's container to mount the secrets as env\n   vars:\n    > [proxy_with_workload_identity.yaml](proxy_with_workload_identity.yaml#L21-L36)\n    ```yaml\n",
                    "rendered": {
                      "text": "        --from-literal=password=<YOUR-DATABASE-PASSWORD> \\\n        --from-literal=database=<YOUR-DATABASE-NAME>\n    ```\n2. Next, configure your application's container to mount the secrets as env\n   vars:\n    > [proxy_with_workload_identity.yaml](proxy_with_workload_identity.yaml#L21-L36)\n    ```yaml\n",
                      "markdown": "`        --from-literal=password=<YOUR-DATABASE-PASSWORD> \\\n        --from-literal=database=<YOUR-DATABASE-NAME>\n    ```\n2. Next, configure your application's container to mount the secrets as env\n   vars:\n    > [proxy_with_workload_identity.yaml](proxy_with_workload_identity.yaml#L21-L36)\n    ```yaml\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/README.md"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 65,
                  "endLine": 13,
                  "endColumn": 70,
                  "snippet": {
                    "text": "details to your application. Each Secret object can contain multiple key/value\npairs that can be pass to your application in multiple ways. When connecting to\na database, you can create a Secret with details such as your database name,\nuser, and password which can be injected into your application as env vars.\n\n1. Create a secret with information needed to access your database:\n    ```shell\n",
                    "rendered": {
                      "text": "details to your application. Each Secret object can contain multiple key/value\npairs that can be pass to your application in multiple ways. When connecting to\na database, you can create a Secret with details such as your database name,\nuser, and password which can be injected into your application as env vars.\n\n1. Create a secret with information needed to access your database:\n    ```shell\n",
                      "markdown": "`details to your application. Each Secret object can contain multiple key/value\npairs that can be pass to your application in multiple ways. When connecting to\na database, you can create a Secret with details such as your database name,\nuser, and password which can be injected into your application as env vars.\n\n1. Create a secret with information needed to access your database:\n    ```shell\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/proxy_with_workload_identity.yaml"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 12,
                  "endLine": 48,
                  "endColumn": 21,
                  "snippet": {
                    "text": "              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: database\n      # [END cloud_sql_proxy_k8s_secrets]\n",
                    "rendered": {
                      "text": "              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: database\n      # [END cloud_sql_proxy_k8s_secrets]\n",
                      "markdown": "`              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: database\n      # [END cloud_sql_proxy_k8s_secrets]\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/proxy_with_workload_identity.yaml"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 19,
                  "endLine": 45,
                  "endColumn": 27,
                  "snippet": {
                    "text": "          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n",
                    "rendered": {
                      "text": "          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n",
                      "markdown": "`          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/proxy_with_workload_identity.yaml"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 12,
                  "endLine": 43,
                  "endColumn": 21,
                  "snippet": {
                    "text": "              key: username\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n",
                    "rendered": {
                      "text": "              key: username\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n",
                      "markdown": "`              key: username\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/proxy_with_workload_identity.yaml"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 12,
                  "endLine": 38,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        env:\n        - name: DB_USER\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: username\n        - name: DB_PASS\n",
                    "rendered": {
                      "text": "        env:\n        - name: DB_USER\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: username\n        - name: DB_PASS\n",
                      "markdown": "`        env:\n        - name: DB_USER\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: username\n        - name: DB_PASS\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/proxy_with_workload_identity.yaml"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 22,
                  "endLine": 55,
                  "endColumn": 30,
                  "snippet": {
                    "text": "      # [START cloud_sql_proxy_k8s_container]\n      - name: cloud-sql-proxy\n        # It is recommended to use the latest version of the Cloud SQL Auth Proxy\n        # Make sure to update on a regular schedule!\n        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.4\n        args:\n          # If connecting from a VPC-native GKE cluster, you can use the\n",
                    "rendered": {
                      "text": "      # [START cloud_sql_proxy_k8s_container]\n      - name: cloud-sql-proxy\n        # It is recommended to use the latest version of the Cloud SQL Auth Proxy\n        # Make sure to update on a regular schedule!\n        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.4\n        args:\n          # If connecting from a VPC-native GKE cluster, you can use the\n",
                      "markdown": "`      # [START cloud_sql_proxy_k8s_container]\n      - name: cloud-sql-proxy\n        # It is recommended to use the latest version of the Cloud SQL Auth Proxy\n        # Make sure to update on a regular schedule!\n        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.4\n        args:\n          # If connecting from a VPC-native GKE cluster, you can use the\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/proxy_with_workload_identity.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-sidecar/proxy_with_workload_identity.yaml"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 65,
                  "endLine": 60,
                  "snippet": {
                    "text": "        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.4\n        args:\n          # If connecting from a VPC-native GKE cluster, you can use the\n          # following flag to have the proxy connect over private IP\n          # - \"--private-ip\"\n\n          # Enable structured logging with LogEntry format:\n          - \"--structured-logs\"\n",
                    "rendered": {
                      "text": "        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.4\n        args:\n          # If connecting from a VPC-native GKE cluster, you can use the\n          # following flag to have the proxy connect over private IP\n          # - \"--private-ip\"\n\n          # Enable structured logging with LogEntry format:\n          - \"--structured-logs\"\n",
                      "markdown": "`        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.4\n        args:\n          # If connecting from a VPC-native GKE cluster, you can use the\n          # following flag to have the proxy connect over private IP\n          # - \"--private-ip\"\n\n          # Enable structured logging with LogEntry format:\n          - \"--structured-logs\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/pgbouncer_deployment.yaml"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 12,
                  "endLine": 71,
                  "endColumn": 21,
                  "snippet": {
                    "text": "              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: database\n        - name: DB_PORT\n",
                    "rendered": {
                      "text": "              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: database\n        - name: DB_PORT\n",
                      "markdown": "`              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: database\n        - name: DB_PORT\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/pgbouncer_deployment.yaml"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 19,
                  "endLine": 68,
                  "endColumn": 27,
                  "snippet": {
                    "text": "          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n",
                    "rendered": {
                      "text": "          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n",
                      "markdown": "`          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/pgbouncer_deployment.yaml"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 12,
                  "endLine": 66,
                  "endColumn": 21,
                  "snippet": {
                    "text": "              key: username\n        - name: DB_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n",
                    "rendered": {
                      "text": "              key: username\n        - name: DB_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n",
                      "markdown": "`              key: username\n        - name: DB_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/pgbouncer_deployment.yaml"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 19,
                  "endLine": 64,
                  "endColumn": 27,
                  "snippet": {
                    "text": "            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: username\n        - name: DB_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n",
                    "rendered": {
                      "text": "            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: username\n        - name: DB_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n",
                      "markdown": "`            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: username\n        - name: DB_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/pgbouncer_deployment.yaml"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 12,
                  "endLine": 61,
                  "endColumn": 21,
                  "snippet": {
                    "text": "          value: \"127.0.0.1\"\n        - name: DB_USER\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: username\n        - name: DB_PASSWORD\n",
                    "rendered": {
                      "text": "          value: \"127.0.0.1\"\n        - name: DB_USER\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: username\n        - name: DB_PASSWORD\n",
                      "markdown": "`          value: \"127.0.0.1\"\n        - name: DB_USER\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: username\n        - name: DB_PASSWORD\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/pgbouncer_deployment.yaml"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 22,
                  "endLine": 86,
                  "endColumn": 30,
                  "snippet": {
                    "text": "          value: \"/etc/server/cert.pem\"\n      - name: cloud-sql-proxy\n        # It is recommended to use the latest version of the Cloud SQL Auth Proxy\n        # Make sure to update on a regular schedule!\n        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.4\n        args:\n          - \"--port=5431\"\n",
                    "rendered": {
                      "text": "          value: \"/etc/server/cert.pem\"\n      - name: cloud-sql-proxy\n        # It is recommended to use the latest version of the Cloud SQL Auth Proxy\n        # Make sure to update on a regular schedule!\n        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.4\n        args:\n          - \"--port=5431\"\n",
                      "markdown": "`          value: \"/etc/server/cert.pem\"\n      - name: cloud-sql-proxy\n        # It is recommended to use the latest version of the Cloud SQL Auth Proxy\n        # Make sure to update on a regular schedule!\n        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.4\n        args:\n          - \"--port=5431\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/pgbouncer_deployment.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/pgbouncer_service.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/pgbouncer_service.yaml"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 5,
                  "endLine": 17,
                  "snippet": {
                    "text": "# limitations under the License.\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: <YOUR-SERVICE-NAME>\nspec:\n  selector:\n",
                    "rendered": {
                      "text": "# limitations under the License.\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: <YOUR-SERVICE-NAME>\nspec:\n  selector:\n",
                      "markdown": "`# limitations under the License.\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: <YOUR-SERVICE-NAME>\nspec:\n  selector:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/README.md"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 4,
                  "endLine": 255,
                  "endColumn": 13,
                  "snippet": {
                    "text": "      key: password\n- name: DB_NAME\n  valueFrom:\n    secretKeyRef:\n      name: <YOUR-DB-SECRET>\n      key: database\n- name: DB_PORT\n",
                    "rendered": {
                      "text": "      key: password\n- name: DB_NAME\n  valueFrom:\n    secretKeyRef:\n      name: <YOUR-DB-SECRET>\n      key: database\n- name: DB_PORT\n",
                      "markdown": "`      key: password\n- name: DB_NAME\n  valueFrom:\n    secretKeyRef:\n      name: <YOUR-DB-SECRET>\n      key: database\n- name: DB_PORT\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/README.md"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 11,
                  "endLine": 252,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  valueFrom:\n    secretKeyRef:\n      name: <YOUR-DB-SECRET>\n      key: password\n- name: DB_NAME\n  valueFrom:\n    secretKeyRef:\n",
                    "rendered": {
                      "text": "  valueFrom:\n    secretKeyRef:\n      name: <YOUR-DB-SECRET>\n      key: password\n- name: DB_NAME\n  valueFrom:\n    secretKeyRef:\n",
                      "markdown": "`  valueFrom:\n    secretKeyRef:\n      name: <YOUR-DB-SECRET>\n      key: password\n- name: DB_NAME\n  valueFrom:\n    secretKeyRef:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/README.md"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 4,
                  "endLine": 250,
                  "endColumn": 13,
                  "snippet": {
                    "text": "      key: username\n- name: DB_PASS\n  valueFrom:\n    secretKeyRef:\n      name: <YOUR-DB-SECRET>\n      key: password\n- name: DB_NAME\n",
                    "rendered": {
                      "text": "      key: username\n- name: DB_PASS\n  valueFrom:\n    secretKeyRef:\n      name: <YOUR-DB-SECRET>\n      key: password\n- name: DB_NAME\n",
                      "markdown": "`      key: username\n- name: DB_PASS\n  valueFrom:\n    secretKeyRef:\n      name: <YOUR-DB-SECRET>\n      key: password\n- name: DB_NAME\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/README.md"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 4,
                  "endLine": 245,
                  "endColumn": 13,
                  "snippet": {
                    "text": "  value: \"<YOUR-SERVICE-NAME>.default.svc.cluster.local\" # using the \"default\" namespace\n- name: DB_USER\n  valueFrom:\n    secretKeyRef:\n      name: <YOUR-DB-SECRET>\n      key: username\n- name: DB_PASS\n",
                    "rendered": {
                      "text": "  value: \"<YOUR-SERVICE-NAME>.default.svc.cluster.local\" # using the \"default\" namespace\n- name: DB_USER\n  valueFrom:\n    secretKeyRef:\n      name: <YOUR-DB-SECRET>\n      key: username\n- name: DB_PASS\n",
                      "markdown": "`  value: \"<YOUR-SERVICE-NAME>.default.svc.cluster.local\" # using the \"default\" namespace\n- name: DB_USER\n  valueFrom:\n    secretKeyRef:\n      name: <YOUR-DB-SECRET>\n      key: username\n- name: DB_PASS\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/README.md"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 4,
                  "endLine": 152,
                  "endColumn": 13,
                  "snippet": {
                    "text": "      key: password\n- name: DB_NAME\n  valueFrom:\n    secretKeyRef:\n      name: <YOUR-DB-SECRET>\n      key: database\n- name: DB_PORT\n",
                    "rendered": {
                      "text": "      key: password\n- name: DB_NAME\n  valueFrom:\n    secretKeyRef:\n      name: <YOUR-DB-SECRET>\n      key: database\n- name: DB_PORT\n",
                      "markdown": "`      key: password\n- name: DB_NAME\n  valueFrom:\n    secretKeyRef:\n      name: <YOUR-DB-SECRET>\n      key: database\n- name: DB_PORT\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/README.md"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 11,
                  "endLine": 149,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  valueFrom:\n    secretKeyRef:\n      name: <YOUR-DB-SECRET>\n      key: password\n- name: DB_NAME\n  valueFrom:\n    secretKeyRef:\n",
                    "rendered": {
                      "text": "  valueFrom:\n    secretKeyRef:\n      name: <YOUR-DB-SECRET>\n      key: password\n- name: DB_NAME\n  valueFrom:\n    secretKeyRef:\n",
                      "markdown": "`  valueFrom:\n    secretKeyRef:\n      name: <YOUR-DB-SECRET>\n      key: password\n- name: DB_NAME\n  valueFrom:\n    secretKeyRef:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/README.md"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 4,
                  "endLine": 147,
                  "endColumn": 13,
                  "snippet": {
                    "text": "      key: username\n- name: DB_PASSWORD\n  valueFrom:\n    secretKeyRef:\n      name: <YOUR-DB-SECRET>\n      key: password\n- name: DB_NAME\n",
                    "rendered": {
                      "text": "      key: username\n- name: DB_PASSWORD\n  valueFrom:\n    secretKeyRef:\n      name: <YOUR-DB-SECRET>\n      key: password\n- name: DB_NAME\n",
                      "markdown": "`      key: username\n- name: DB_PASSWORD\n  valueFrom:\n    secretKeyRef:\n      name: <YOUR-DB-SECRET>\n      key: password\n- name: DB_NAME\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/README.md"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 11,
                  "endLine": 145,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    secretKeyRef:\n      name: <YOUR-DB-SECRET>\n      key: username\n- name: DB_PASSWORD\n  valueFrom:\n    secretKeyRef:\n      name: <YOUR-DB-SECRET>\n",
                    "rendered": {
                      "text": "    secretKeyRef:\n      name: <YOUR-DB-SECRET>\n      key: username\n- name: DB_PASSWORD\n  valueFrom:\n    secretKeyRef:\n      name: <YOUR-DB-SECRET>\n",
                      "markdown": "`    secretKeyRef:\n      name: <YOUR-DB-SECRET>\n      key: username\n- name: DB_PASSWORD\n  valueFrom:\n    secretKeyRef:\n      name: <YOUR-DB-SECRET>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/README.md"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 4,
                  "endLine": 142,
                  "endColumn": 13,
                  "snippet": {
                    "text": "  value: \"127.0.0.1\"\n- name: DB_USER\n  valueFrom:\n    secretKeyRef:\n      name: <YOUR-DB-SECRET>\n      key: username\n- name: DB_PASSWORD\n",
                    "rendered": {
                      "text": "  value: \"127.0.0.1\"\n- name: DB_USER\n  valueFrom:\n    secretKeyRef:\n      name: <YOUR-DB-SECRET>\n      key: username\n- name: DB_PASSWORD\n",
                      "markdown": "`  value: \"127.0.0.1\"\n- name: DB_USER\n  valueFrom:\n    secretKeyRef:\n      name: <YOUR-DB-SECRET>\n      key: username\n- name: DB_PASSWORD\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/README.md"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 27,
                  "endLine": 270,
                  "endColumn": 31,
                  "snippet": {
                    "text": "Finally, when configuring a database connection string, the application must\nprovide the additional properties:\n\n1. `sslmode` must be set to at least `verify-ca`\n1. `sslrootcert` must set to the environment variable `CA_CERT`\n\n\n",
                    "rendered": {
                      "text": "Finally, when configuring a database connection string, the application must\nprovide the additional properties:\n\n1. `sslmode` must be set to at least `verify-ca`\n1. `sslrootcert` must set to the environment variable `CA_CERT`\n\n\n",
                      "markdown": "`Finally, when configuring a database connection string, the application must\nprovide the additional properties:\n\n1. `sslmode` must be set to at least `verify-ca`\n1. `sslrootcert` must set to the environment variable `CA_CERT`\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/README.md"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 66,
                  "endLine": 264,
                  "endColumn": 70,
                  "snippet": {
                    "text": "  value: \"/etc/ca/cert.pem\"\n```\n\nNote: now the `DB_HOST` value uses an internal DNS record pointing at the\nPgBouncer service.\n\nFinally, when configuring a database connection string, the application must\n",
                    "rendered": {
                      "text": "  value: \"/etc/ca/cert.pem\"\n```\n\nNote: now the `DB_HOST` value uses an internal DNS record pointing at the\nPgBouncer service.\n\nFinally, when configuring a database connection string, the application must\n",
                      "markdown": "`  value: \"/etc/ca/cert.pem\"\n```\n\nNote: now the `DB_HOST` value uses an internal DNS record pointing at the\nPgBouncer service.\n\nFinally, when configuring a database connection string, the application must\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/README.md"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 11,
                  "endLine": 204,
                  "endColumn": 15,
                  "snippet": {
                    "text": "```\n\nWith the PgBouncer service and deployment done, we are ready to point our\napplication at it.\n\n## Configure your application\n\n",
                    "rendered": {
                      "text": "```\n\nWith the PgBouncer service and deployment done, we are ready to point our\napplication at it.\n\n## Configure your application\n\n",
                      "markdown": "````\n\nWith the PgBouncer service and deployment done, we are ready to point our\napplication at it.\n\n## Configure your application\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/README.md"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 51,
                  "endLine": 21,
                  "endColumn": 55,
                  "snippet": {
                    "text": "application because it is simple, there is less overhead, it is secure out of\nthe box, and there is less latency involved.\n\nHowever, the service pattern is useful when you are at very large scale, when\nyou clearly need a database connection pooler, and when you are running into SQL\nAdmin API quota problems.\n\n",
                    "rendered": {
                      "text": "application because it is simple, there is less overhead, it is secure out of\nthe box, and there is less latency involved.\n\nHowever, the service pattern is useful when you are at very large scale, when\nyou clearly need a database connection pooler, and when you are running into SQL\nAdmin API quota problems.\n\n",
                      "markdown": "`application because it is simple, there is less overhead, it is secure out of\nthe box, and there is less latency involved.\n\nHowever, the service pattern is useful when you are at very large scale, when\nyou clearly need a database connection pooler, and when you are running into SQL\nAdmin API quota problems.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/README.md"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 77,
                  "endLine": 235,
                  "endColumn": 5,
                  "snippet": {
                    "text": "  readOnly: true\n```\n\nThen, we configure environment variables for connecting to the database, this\ntime including a `CA_CERT`:\n\n> [`deployment.yaml`](deployment.yaml#L32-L53)\n\n",
                    "rendered": {
                      "text": "  readOnly: true\n```\n\nThen, we configure environment variables for connecting to the database, this\ntime including a `CA_CERT`:\n\n> [`deployment.yaml`](deployment.yaml#L32-L53)\n\n",
                      "markdown": "`  readOnly: true\n```\n\nThen, we configure environment variables for connecting to the database, this\ntime including a `CA_CERT`:\n\n> [`deployment.yaml`](deployment.yaml#L32-L53)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/README.md"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 8,
                  "endLine": 223,
                  "endColumn": 15,
                  "snippet": {
                    "text": "      path: cert.pem\n```\n\nNext, we mount the volume within the application container:\n\n> [`deployment.yaml`](deployment.yaml#L28-L31)\n\n",
                    "rendered": {
                      "text": "      path: cert.pem\n```\n\nNext, we mount the volume within the application container:\n\n> [`deployment.yaml`](deployment.yaml#L28-L31)\n\n",
                      "markdown": "`      path: cert.pem\n```\n\nNext, we mount the volume within the application container:\n\n> [`deployment.yaml`](deployment.yaml#L28-L31)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/README.md"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 18,
                  "endLine": 203,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    targetPort: 5432\n```\n\nWith the PgBouncer service and deployment done, we are ready to point our\napplication at it.\n\n## Configure your application\n",
                    "rendered": {
                      "text": "    targetPort: 5432\n```\n\nWith the PgBouncer service and deployment done, we are ready to point our\napplication at it.\n\n## Configure your application\n",
                      "markdown": "`    targetPort: 5432\n```\n\nWith the PgBouncer service and deployment done, we are ready to point our\napplication at it.\n\n## Configure your application\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/README.md"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 5,
                  "endLine": 192,
                  "snippet": {
                    "text": "\n``` yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: <YOUR-SERVICE-NAME>\nspec:\n  selector:\n",
                    "rendered": {
                      "text": "\n``` yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: <YOUR-SERVICE-NAME>\nspec:\n  selector:\n",
                      "markdown": "`\n``` yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: <YOUR-SERVICE-NAME>\nspec:\n  selector:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/README.md"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 9,
                  "endLine": 88,
                  "endColumn": 16,
                  "snippet": {
                    "text": "With PgBouncer containerized, we will now create a deployment with PgBouncer and\nthe proxy as a sidecar.\n\nFirst, we mount our CA certificate and server certificate and private key,\nrenaming the certificate secrets to `cert.pem` and server private key to\n`key.pem`:\n\n",
                    "rendered": {
                      "text": "With PgBouncer containerized, we will now create a deployment with PgBouncer and\nthe proxy as a sidecar.\n\nFirst, we mount our CA certificate and server certificate and private key,\nrenaming the certificate secrets to `cert.pem` and server private key to\n`key.pem`:\n\n",
                      "markdown": "`With PgBouncer containerized, we will now create a deployment with PgBouncer and\nthe proxy as a sidecar.\n\nFirst, we mount our CA certificate and server certificate and private key,\nrenaming the certificate secrets to `cert.pem` and server private key to\n`key.pem`:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/README.md"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 24,
                  "endLine": 84,
                  "snippet": {
                    "text": "is that it will generate all the PgBouncer configuration based on environment\nvariables passed to the container.\n\n## Deploy PgBouncer as a Service\n\nWith PgBouncer containerized, we will now create a deployment with PgBouncer and\nthe proxy as a sidecar.\n\n",
                    "rendered": {
                      "text": "is that it will generate all the PgBouncer configuration based on environment\nvariables passed to the container.\n\n## Deploy PgBouncer as a Service\n\nWith PgBouncer containerized, we will now create a deployment with PgBouncer and\nthe proxy as a sidecar.\n\n",
                      "markdown": "`is that it will generate all the PgBouncer configuration based on environment\nvariables passed to the container.\n\n## Deploy PgBouncer as a Service\n\nWith PgBouncer containerized, we will now create a deployment with PgBouncer and\nthe proxy as a sidecar.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/README.md"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 44,
                  "endLine": 79,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\nThird, we will containerize PgBouncer. Some users may prefer to containerize\nPgBouncer themselves. For this example, we will make use of an open source\ncontainer, [edoburu/pgbouncer][edoburu]. One nice benefit of `edoburu/pgbouncer`\nis that it will generate all the PgBouncer configuration based on environment\nvariables passed to the container.\n\n",
                    "rendered": {
                      "text": "\nThird, we will containerize PgBouncer. Some users may prefer to containerize\nPgBouncer themselves. For this example, we will make use of an open source\ncontainer, [edoburu/pgbouncer][edoburu]. One nice benefit of `edoburu/pgbouncer`\nis that it will generate all the PgBouncer configuration based on environment\nvariables passed to the container.\n\n",
                      "markdown": "`\nThird, we will containerize PgBouncer. Some users may prefer to containerize\nPgBouncer themselves. For this example, we will make use of an open source\ncontainer, [edoburu/pgbouncer][edoburu]. One nice benefit of `edoburu/pgbouncer`\nis that it will generate all the PgBouncer configuration based on environment\nvariables passed to the container.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/README.md"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 12,
                  "endLine": 21,
                  "endColumn": 21,
                  "snippet": {
                    "text": "application because it is simple, there is less overhead, it is secure out of\nthe box, and there is less latency involved.\n\nHowever, the service pattern is useful when you are at very large scale, when\nyou clearly need a database connection pooler, and when you are running into SQL\nAdmin API quota problems.\n\n",
                    "rendered": {
                      "text": "application because it is simple, there is less overhead, it is secure out of\nthe box, and there is less latency involved.\n\nHowever, the service pattern is useful when you are at very large scale, when\nyou clearly need a database connection pooler, and when you are running into SQL\nAdmin API quota problems.\n\n",
                      "markdown": "`application because it is simple, there is less overhead, it is secure out of\nthe box, and there is less latency involved.\n\nHowever, the service pattern is useful when you are at very large scale, when\nyou clearly need a database connection pooler, and when you are running into SQL\nAdmin API quota problems.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/README.md"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 34,
                  "endLine": 2,
                  "snippet": {
                    "text": "# Running the Cloud SQL Proxy as a Service\n\nThis example demonstrates how to run the Cloud SQL Auth Proxy with PgBouncer on\nKubernetes as a service. It assumes you have already successfully completed all\nthe steps in [Using the Cloud SQL Auth Proxy on Kubernetes][sidecar].\n",
                    "rendered": {
                      "text": "# Running the Cloud SQL Proxy as a Service\n\nThis example demonstrates how to run the Cloud SQL Auth Proxy with PgBouncer on\nKubernetes as a service. It assumes you have already successfully completed all\nthe steps in [Using the Cloud SQL Auth Proxy on Kubernetes][sidecar].\n",
                      "markdown": "`# Running the Cloud SQL Proxy as a Service\n\nThis example demonstrates how to run the Cloud SQL Auth Proxy with PgBouncer on\nKubernetes as a service. It assumes you have already successfully completed all\nthe steps in [Using the Cloud SQL Auth Proxy on Kubernetes][sidecar].\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/deployment.yaml"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 12,
                  "endLine": 61,
                  "endColumn": 21,
                  "snippet": {
                    "text": "              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: database\n        - name: DB_PORT\n",
                    "rendered": {
                      "text": "              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: database\n        - name: DB_PORT\n",
                      "markdown": "`              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: database\n        - name: DB_PORT\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/deployment.yaml"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 19,
                  "endLine": 58,
                  "endColumn": 27,
                  "snippet": {
                    "text": "          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n",
                    "rendered": {
                      "text": "          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n",
                      "markdown": "`          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/deployment.yaml"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 12,
                  "endLine": 56,
                  "endColumn": 21,
                  "snippet": {
                    "text": "              key: username\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n",
                    "rendered": {
                      "text": "              key: username\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n",
                      "markdown": "`              key: username\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/deployment.yaml"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 12,
                  "endLine": 51,
                  "endColumn": 21,
                  "snippet": {
                    "text": "          value: \"<YOUR-SERVICE-NAME>.default.svc.cluster.local\" # using the \"default\" namespace\n        - name: DB_USER\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: username\n        - name: DB_PASS\n",
                    "rendered": {
                      "text": "          value: \"<YOUR-SERVICE-NAME>.default.svc.cluster.local\" # using the \"default\" namespace\n        - name: DB_USER\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: username\n        - name: DB_PASS\n",
                      "markdown": "`          value: \"<YOUR-SERVICE-NAME>.default.svc.cluster.local\" # using the \"default\" namespace\n        - name: DB_USER\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: username\n        - name: DB_PASS\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-service/deployment.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-health-check/proxy_with_http_health_check.yaml"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 12,
                  "endLine": 46,
                  "endColumn": 21,
                  "snippet": {
                    "text": "              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: database\n      - name: cloud-sql-proxy\n",
                    "rendered": {
                      "text": "              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: database\n      - name: cloud-sql-proxy\n",
                      "markdown": "`              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: database\n      - name: cloud-sql-proxy\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-health-check/proxy_with_http_health_check.yaml"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 19,
                  "endLine": 43,
                  "endColumn": 27,
                  "snippet": {
                    "text": "          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n",
                    "rendered": {
                      "text": "          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n",
                      "markdown": "`          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-health-check/proxy_with_http_health_check.yaml"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 12,
                  "endLine": 41,
                  "endColumn": 21,
                  "snippet": {
                    "text": "              key: username\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n",
                    "rendered": {
                      "text": "              key: username\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n",
                      "markdown": "`              key: username\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: password\n        - name: DB_NAME\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-health-check/proxy_with_http_health_check.yaml"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 12,
                  "endLine": 36,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        env:\n        - name: DB_USER\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: username\n        - name: DB_PASS\n",
                    "rendered": {
                      "text": "        env:\n        - name: DB_USER\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: username\n        - name: DB_PASS\n",
                      "markdown": "`        env:\n        - name: DB_USER\n          valueFrom:\n            secretKeyRef:\n              name: <YOUR-DB-SECRET>\n              key: username\n        - name: DB_PASS\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-health-check/proxy_with_http_health_check.yaml"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 22,
                  "endLine": 51,
                  "endColumn": 30,
                  "snippet": {
                    "text": "              key: database\n      - name: cloud-sql-proxy\n        # It is recommended to use the latest version of the Cloud SQL Auth Proxy\n        # Make sure to update on a regular schedule!\n        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.4\n        imagePullPolicy: IfNotPresent\n\n",
                    "rendered": {
                      "text": "              key: database\n      - name: cloud-sql-proxy\n        # It is recommended to use the latest version of the Cloud SQL Auth Proxy\n        # Make sure to update on a regular schedule!\n        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.4\n        imagePullPolicy: IfNotPresent\n\n",
                      "markdown": "`              key: database\n      - name: cloud-sql-proxy\n        # It is recommended to use the latest version of the Cloud SQL Auth Proxy\n        # Make sure to update on a regular schedule!\n        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.4\n        imagePullPolicy: IfNotPresent\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-health-check/proxy_with_http_health_check.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-health-check/proxy_with_http_health_check.yaml"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 42,
                  "endLine": 122,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        # once a second for 60 seconds.\n        #\n        # We strongly recommend adding a startup probe to the proxy sidecar\n        # container. This will ensure that service traffic will be routed to\n        # the pod only after the proxy has successfully started.\n        startupProbe:\n          failureThreshold: 60\n",
                    "rendered": {
                      "text": "        # once a second for 60 seconds.\n        #\n        # We strongly recommend adding a startup probe to the proxy sidecar\n        # container. This will ensure that service traffic will be routed to\n        # the pod only after the proxy has successfully started.\n        startupProbe:\n          failureThreshold: 60\n",
                      "markdown": "`        # once a second for 60 seconds.\n        #\n        # We strongly recommend adding a startup probe to the proxy sidecar\n        # container. This will ensure that service traffic will be routed to\n        # the pod only after the proxy has successfully started.\n        startupProbe:\n          failureThreshold: 60\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-health-check/proxy_with_http_health_check.yaml"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 48,
                  "endLine": 109,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n        # Configure kubernetes to call the /quitquitquit endpoint on the\n        # admin server before sending SIGTERM to the proxy before stopping\n        # the pod. This will give the proxy more time to gracefully exit.\n        lifecycle:\n          preStop:\n            httpGet:\n",
                    "rendered": {
                      "text": "\n        # Configure kubernetes to call the /quitquitquit endpoint on the\n        # admin server before sending SIGTERM to the proxy before stopping\n        # the pod. This will give the proxy more time to gracefully exit.\n        lifecycle:\n          preStop:\n            httpGet:\n",
                      "markdown": "`\n        # Configure kubernetes to call the /quitquitquit endpoint on the\n        # admin server before sending SIGTERM to the proxy before stopping\n        # the pod. This will give the proxy more time to gracefully exit.\n        lifecycle:\n          preStop:\n            httpGet:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-health-check/proxy_with_http_health_check.yaml"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 63,
                  "endLine": 76,
                  "snippet": {
                    "text": "          value: <DB_PORT>\n\n        # If connecting from a VPC-native GKE cluster, you can use the\n        # following flag to have the proxy connect over private IP\n        # - name: CSQL_PROXY_PRIVATE_IP\n        #   value: \"true\"\n\n        # Enable HTTP healthchecks on port 9801. This enables /liveness,\n",
                    "rendered": {
                      "text": "          value: <DB_PORT>\n\n        # If connecting from a VPC-native GKE cluster, you can use the\n        # following flag to have the proxy connect over private IP\n        # - name: CSQL_PROXY_PRIVATE_IP\n        #   value: \"true\"\n\n        # Enable HTTP healthchecks on port 9801. This enables /liveness,\n",
                      "markdown": "`          value: <DB_PORT>\n\n        # If connecting from a VPC-native GKE cluster, you can use the\n        # following flag to have the proxy connect over private IP\n        # - name: CSQL_PROXY_PRIVATE_IP\n        #   value: \"true\"\n\n        # Enable HTTP healthchecks on port 9801. This enables /liveness,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-health-check/README.md"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 35,
                  "endLine": 29,
                  "endColumn": 39,
                  "snippet": {
                    "text": "  flag, and when the proxy can connect to all registered instances. Otherwise,\n  returns a 503 status. Optionally supports a min-ready query param (e.g.,\n  `/readiness?min-ready=3`) where the proxy will return a 200 status if the\n  proxy can connect successfully to at least min-ready number of instances. If\n  min-ready exceeds the number of registered instances, returns a 400.\n\n\n",
                    "rendered": {
                      "text": "  flag, and when the proxy can connect to all registered instances. Otherwise,\n  returns a 503 status. Optionally supports a min-ready query param (e.g.,\n  `/readiness?min-ready=3`) where the proxy will return a 200 status if the\n  proxy can connect successfully to at least min-ready number of instances. If\n  min-ready exceeds the number of registered instances, returns a 400.\n\n\n",
                      "markdown": "`  flag, and when the proxy can connect to all registered instances. Otherwise,\n  returns a 503 status. Optionally supports a min-ready query param (e.g.,\n  `/readiness?min-ready=3`) where the proxy will return a 200 status if the\n  proxy can connect successfully to at least min-ready number of instances. If\n  min-ready exceeds the number of registered instances, returns a 400.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-health-check/README.md"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 22,
                  "endLine": 166,
                  "endColumn": 28,
                  "snippet": {
                    "text": "```\n\nA web application has a database connection pool leak and the \nengineering team can't find the root cause. To keep the system running, \nthe application should be automatically restarted if it consumes 50 connections \nfor more than 1 minute.\n\n",
                    "rendered": {
                      "text": "```\n\nA web application has a database connection pool leak and the \nengineering team can't find the root cause. To keep the system running, \nthe application should be automatically restarted if it consumes 50 connections \nfor more than 1 minute.\n\n",
                      "markdown": "````\n\nA web application has a database connection pool leak and the \nengineering team can't find the root cause. To keep the system running, \nthe application should be automatically restarted if it consumes 50 connections \nfor more than 1 minute.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/k8s-health-check/README.md"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 37,
                  "endLine": 45,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# For details, see https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/\nstartupProbe:\n   # We recommend adding a startup probe to the proxy sidecar\n   # container. This will ensure that service traffic will be routed to\n   # the pod only after the proxy has successfully started.\n   httpGet:\n      path: /startup\n",
                    "rendered": {
                      "text": "# For details, see https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/\nstartupProbe:\n   # We recommend adding a startup probe to the proxy sidecar\n   # container. This will ensure that service traffic will be routed to\n   # the pod only after the proxy has successfully started.\n   httpGet:\n      path: /startup\n",
                      "markdown": "`# For details, see https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/\nstartupProbe:\n   # We recommend adding a startup probe to the proxy sidecar\n   # container. This will ensure that service traffic will be routed to\n   # the pod only after the proxy has successfully started.\n   httpGet:\n      path: /startup\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/sqlserver_test.go"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 140,
                  "endLine": 30,
                  "endColumn": 148,
                  "snippet": {
                    "text": "ion name, in the form of 'project:region:instance'.\")\n\tsqlserverUser     = flag.String(\"sqlserver_user\", os.Getenv(\"SQLSERVER_USER\"), \"Name of database user.\")\n\tsqlserverPass     = flag.String(\"sqlserver_pass\", os.Getenv(\"SQLSERVER_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tsqlserverDB       = flag.String(\"sqlserver_db\", os.Getenv(\"SQLSERVER_DB\"), \"Name of the database to connect to.\")\n)\n\nfunc requireSQLServerVars(t *testing.T) {\n\tswitch \"\" {\n\tcase *sqlserverConnName:\n\t\tt.Fatal(\"'sqlserver_conn_name' not",
                    "rendered": {
                      "text": "ion name, in the form of 'project:region:instance'.\")\n\tsqlserverUser     = flag.String(\"sqlserver_user\", os.Getenv(\"SQLSERVER_USER\"), \"Name of database user.\")\n\tsqlserverPass     = flag.String(\"sqlserver_pass\", os.Getenv(\"SQLSERVER_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tsqlserverDB       = flag.String(\"sqlserver_db\", os.Getenv(\"SQLSERVER_DB\"), \"Name of the database to connect to.\")\n)\n\nfunc requireSQLServerVars(t *testing.T) {\n\tswitch \"\" {\n\tcase *sqlserverConnName:\n\t\tt.Fatal(\"'sqlserver_conn_name' not",
                      "markdown": "`ion name, in the form of 'project:region:instance'.\")\n\tsqlserverUser     = flag.String(\"sqlserver_user\", os.Getenv(\"SQLSERVER_USER\"), \"Name of database user.\")\n\tsqlserverPass     = flag.String(\"sqlserver_pass\", os.Getenv(\"SQLSERVER_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tsqlserverDB       = flag.String(\"sqlserver_db\", os.Getenv(\"SQLSERVER_DB\"), \"Name of the database to connect to.\")\n)\n\nfunc requireSQLServerVars(t *testing.T) {\n\tswitch \"\" {\n\tcase *sqlserverConnName:\n\t\tt.Fatal(\"'sqlserver_conn_name' not`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/sqlserver_test.go"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 81,
                  "endLine": 30,
                  "endColumn": 89,
                  "snippet": {
                    "text": "ER_CONNECTION_NAME\"), \"Cloud SQL SqlServer instance connection name, in the form of 'project:region:instance'.\")\n\tsqlserverUser     = flag.String(\"sqlserver_user\", os.Getenv(\"SQLSERVER_USER\"), \"Name of database user.\")\n\tsqlserverPass     = flag.String(\"sqlserver_pass\", os.Getenv(\"SQLSERVER_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tsqlserverDB       = flag.String(\"sqlserver_db\", os.Getenv(\"SQLSERVER_DB\"), \"Name of the database to connect to.\")\n)\n\nfunc requireSQLServerVars(t *testing.T) {\n\tswitch \"\" {\n\tca",
                    "rendered": {
                      "text": "ER_CONNECTION_NAME\"), \"Cloud SQL SqlServer instance connection name, in the form of 'project:region:instance'.\")\n\tsqlserverUser     = flag.String(\"sqlserver_user\", os.Getenv(\"SQLSERVER_USER\"), \"Name of database user.\")\n\tsqlserverPass     = flag.String(\"sqlserver_pass\", os.Getenv(\"SQLSERVER_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tsqlserverDB       = flag.String(\"sqlserver_db\", os.Getenv(\"SQLSERVER_DB\"), \"Name of the database to connect to.\")\n)\n\nfunc requireSQLServerVars(t *testing.T) {\n\tswitch \"\" {\n\tca",
                      "markdown": "`ER_CONNECTION_NAME\"), \"Cloud SQL SqlServer instance connection name, in the form of 'project:region:instance'.\")\n\tsqlserverUser     = flag.String(\"sqlserver_user\", os.Getenv(\"SQLSERVER_USER\"), \"Name of database user.\")\n\tsqlserverPass     = flag.String(\"sqlserver_pass\", os.Getenv(\"SQLSERVER_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tsqlserverDB       = flag.String(\"sqlserver_db\", os.Getenv(\"SQLSERVER_DB\"), \"Name of the database to connect to.\")\n)\n\nfunc requireSQLServerVars(t *testing.T) {\n\tswitch \"\" {\n\tca`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/sqlserver_test.go"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n\n//     https://www.apache.org/licenses/LICENSE-2.0\n\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n\n//     https://www.apache.org/licenses/LICENSE-2.0\n\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n\n//     https://www.apache.org/licenses/LICENSE-2.0\n\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/ISSUE_TEMPLATE/documentation_issue.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/ISSUE_TEMPLATE/feature_request.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/scorecard.yml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/scorecard.yml"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 9,
                  "endLine": 55,
                  "endColumn": 14,
                  "snippet": {
                    "text": "        run: |\n          SCORECARD_SKIPPED_RULE_IDS_JSON=$(echo $SCORECARD_SKIPPED_RULE_IDS | jq -cR 'split(\",\")')\n          # Trim the SARIF file to remove false positive detections\n          cat results.sarif | jq '.runs[].results |= map(select(.ruleId as $id | '$SCORECARD_SKIPPED_RULE_IDS_JSON' | all($id != .)))' > resultsFiltered.sarif\n      \n      # Upload the results as artifacts (optional). Commenting out will disable uploads of run results in SARIF\n      # format to the repository Actions tab.\n",
                    "rendered": {
                      "text": "        run: |\n          SCORECARD_SKIPPED_RULE_IDS_JSON=$(echo $SCORECARD_SKIPPED_RULE_IDS | jq -cR 'split(\",\")')\n          # Trim the SARIF file to remove false positive detections\n          cat results.sarif | jq '.runs[].results |= map(select(.ruleId as $id | '$SCORECARD_SKIPPED_RULE_IDS_JSON' | all($id != .)))' > resultsFiltered.sarif\n      \n      # Upload the results as artifacts (optional). Commenting out will disable uploads of run results in SARIF\n      # format to the repository Actions tab.\n",
                      "markdown": "`        run: |\n          SCORECARD_SKIPPED_RULE_IDS_JSON=$(echo $SCORECARD_SKIPPED_RULE_IDS | jq -cR 'split(\",\")')\n          # Trim the SARIF file to remove false positive detections\n          cat results.sarif | jq '.runs[].results |= map(select(.ruleId as $id | '$SCORECARD_SKIPPED_RULE_IDS_JSON' | all($id != .)))' > resultsFiltered.sarif\n      \n      # Upload the results as artifacts (optional). Commenting out will disable uploads of run results in SARIF\n      # format to the repository Actions tab.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/labels.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/tests.yaml"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 14,
                  "endLine": 176,
                  "snippet": {
                    "text": "        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1\n      - name: Run tests\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -v -race -short ./...\n",
                    "rendered": {
                      "text": "        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1\n      - name: Run tests\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -v -race -short ./...\n",
                      "markdown": "`        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1\n      - name: Run tests\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -v -race -short ./...\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/tests.yaml"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 20,
                  "endLine": 174,
                  "endColumn": 26,
                  "snippet": {
                    "text": "      - name: Checkout code\n        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1\n      - name: Run tests\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -v -race -short ./...\n",
                    "rendered": {
                      "text": "      - name: Checkout code\n        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1\n      - name: Run tests\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -v -race -short ./...\n",
                      "markdown": "`      - name: Checkout code\n        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1\n      - name: Run tests\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -v -race -short ./...\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/tests.yaml"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 14,
                  "endLine": 131,
                  "snippet": {
                    "text": "          TMPDIR: \"/tmp\"\n          TMP: \"${{ runner.temp }}\"\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -race -v ./... | tee test_results.txt\n\n      - name: Convert test output to XML\n",
                    "rendered": {
                      "text": "          TMPDIR: \"/tmp\"\n          TMP: \"${{ runner.temp }}\"\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -race -v ./... | tee test_results.txt\n\n      - name: Convert test output to XML\n",
                      "markdown": "`          TMPDIR: \"/tmp\"\n          TMP: \"${{ runner.temp }}\"\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -race -v ./... | tee test_results.txt\n\n      - name: Convert test output to XML\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/tests.yaml"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 20,
                  "endLine": 129,
                  "endColumn": 26,
                  "snippet": {
                    "text": "          IMPERSONATED_USER: \"${{ steps.secrets.outputs.IMPERSONATED_USER }}\"\n          TMPDIR: \"/tmp\"\n          TMP: \"${{ runner.temp }}\"\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -race -v ./... | tee test_results.txt\n",
                    "rendered": {
                      "text": "          IMPERSONATED_USER: \"${{ steps.secrets.outputs.IMPERSONATED_USER }}\"\n          TMPDIR: \"/tmp\"\n          TMP: \"${{ runner.temp }}\"\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -race -v ./... | tee test_results.txt\n",
                      "markdown": "`          IMPERSONATED_USER: \"${{ steps.secrets.outputs.IMPERSONATED_USER }}\"\n          TMPDIR: \"/tmp\"\n          TMP: \"${{ runner.temp }}\"\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -race -v ./... | tee test_results.txt\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/tests.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/tests.yaml"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 14,
                  "endLine": 176,
                  "snippet": {
                    "text": "        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1\n      - name: Run tests\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -v -race -short ./...\n",
                    "rendered": {
                      "text": "        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1\n      - name: Run tests\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -v -race -short ./...\n",
                      "markdown": "`        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1\n      - name: Run tests\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -v -race -short ./...\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/tests.yaml"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 20,
                  "endLine": 174,
                  "endColumn": 26,
                  "snippet": {
                    "text": "      - name: Checkout code\n        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1\n      - name: Run tests\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -v -race -short ./...\n",
                    "rendered": {
                      "text": "      - name: Checkout code\n        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1\n      - name: Run tests\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -v -race -short ./...\n",
                      "markdown": "`      - name: Checkout code\n        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1\n      - name: Run tests\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -v -race -short ./...\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/tests.yaml"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 9,
                  "endLine": 160,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        if: ${{ (github.event_name == 'schedule' || github.event_name == 'push') && runner.os == 'macOS' && always() }}\n        run: |\n          curl https://github.com/googleapis/repo-automation-bots/releases/download/flakybot-1.1.0/flakybot-darwin-amd64 -o flakybot -s -L\n          chmod +x ./flakybot\n          ./flakybot --repo ${{github.repository}} --commit_hash ${{github.sha}} --build_url https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n\n  unit:\n",
                    "rendered": {
                      "text": "        if: ${{ (github.event_name == 'schedule' || github.event_name == 'push') && runner.os == 'macOS' && always() }}\n        run: |\n          curl https://github.com/googleapis/repo-automation-bots/releases/download/flakybot-1.1.0/flakybot-darwin-amd64 -o flakybot -s -L\n          chmod +x ./flakybot\n          ./flakybot --repo ${{github.repository}} --commit_hash ${{github.sha}} --build_url https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n\n  unit:\n",
                      "markdown": "`        if: ${{ (github.event_name == 'schedule' || github.event_name == 'push') && runner.os == 'macOS' && always() }}\n        run: |\n          curl https://github.com/googleapis/repo-automation-bots/releases/download/flakybot-1.1.0/flakybot-darwin-amd64 -o flakybot -s -L\n          chmod +x ./flakybot\n          ./flakybot --repo ${{github.repository}} --commit_hash ${{github.sha}} --build_url https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n\n  unit:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/tests.yaml"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 9,
                  "endLine": 159,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        # only run flakybot on periodic (schedule) and continuous (push) events\n        if: ${{ (github.event_name == 'schedule' || github.event_name == 'push') && runner.os == 'macOS' && always() }}\n        run: |\n          curl https://github.com/googleapis/repo-automation-bots/releases/download/flakybot-1.1.0/flakybot-darwin-amd64 -o flakybot -s -L\n          chmod +x ./flakybot\n          ./flakybot --repo ${{github.repository}} --commit_hash ${{github.sha}} --build_url https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n\n",
                    "rendered": {
                      "text": "        # only run flakybot on periodic (schedule) and continuous (push) events\n        if: ${{ (github.event_name == 'schedule' || github.event_name == 'push') && runner.os == 'macOS' && always() }}\n        run: |\n          curl https://github.com/googleapis/repo-automation-bots/releases/download/flakybot-1.1.0/flakybot-darwin-amd64 -o flakybot -s -L\n          chmod +x ./flakybot\n          ./flakybot --repo ${{github.repository}} --commit_hash ${{github.sha}} --build_url https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n\n",
                      "markdown": "`        # only run flakybot on periodic (schedule) and continuous (push) events\n        if: ${{ (github.event_name == 'schedule' || github.event_name == 'push') && runner.os == 'macOS' && always() }}\n        run: |\n          curl https://github.com/googleapis/repo-automation-bots/releases/download/flakybot-1.1.0/flakybot-darwin-amd64 -o flakybot -s -L\n          chmod +x ./flakybot\n          ./flakybot --repo ${{github.repository}} --commit_hash ${{github.sha}} --build_url https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/tests.yaml"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 9,
                  "endLine": 152,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        # only run flakybot on periodic (schedule) and continuous (push) events\n        if: ${{ (github.event_name == 'schedule' || github.event_name == 'push') && runner.os == 'Windows' && always() }}\n        run: |\n          curl https://github.com/googleapis/repo-automation-bots/releases/download/flakybot-1.1.0/flakybot.exe -o flakybot.exe -s -L\n          ./flakybot.exe --repo ${{github.repository}} --commit_hash ${{github.sha}} --build_url https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n\n      - name: FlakyBot (macOS)\n",
                    "rendered": {
                      "text": "        # only run flakybot on periodic (schedule) and continuous (push) events\n        if: ${{ (github.event_name == 'schedule' || github.event_name == 'push') && runner.os == 'Windows' && always() }}\n        run: |\n          curl https://github.com/googleapis/repo-automation-bots/releases/download/flakybot-1.1.0/flakybot.exe -o flakybot.exe -s -L\n          ./flakybot.exe --repo ${{github.repository}} --commit_hash ${{github.sha}} --build_url https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n\n      - name: FlakyBot (macOS)\n",
                      "markdown": "`        # only run flakybot on periodic (schedule) and continuous (push) events\n        if: ${{ (github.event_name == 'schedule' || github.event_name == 'push') && runner.os == 'Windows' && always() }}\n        run: |\n          curl https://github.com/googleapis/repo-automation-bots/releases/download/flakybot-1.1.0/flakybot.exe -o flakybot.exe -s -L\n          ./flakybot.exe --repo ${{github.repository}} --commit_hash ${{github.sha}} --build_url https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n\n      - name: FlakyBot (macOS)\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/tests.yaml"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 9,
                  "endLine": 145,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        if: ${{ (github.event_name == 'schedule' || github.event_name == 'push') && runner.os == 'Linux' && always() }}\n        run: |\n          curl https://github.com/googleapis/repo-automation-bots/releases/download/flakybot-1.1.0/flakybot -o flakybot -s -L\n          chmod +x ./flakybot\n          ./flakybot --repo ${{github.repository}} --commit_hash ${{github.sha}} --build_url https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n\n      - name: FlakyBot (Windows)\n",
                    "rendered": {
                      "text": "        if: ${{ (github.event_name == 'schedule' || github.event_name == 'push') && runner.os == 'Linux' && always() }}\n        run: |\n          curl https://github.com/googleapis/repo-automation-bots/releases/download/flakybot-1.1.0/flakybot -o flakybot -s -L\n          chmod +x ./flakybot\n          ./flakybot --repo ${{github.repository}} --commit_hash ${{github.sha}} --build_url https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n\n      - name: FlakyBot (Windows)\n",
                      "markdown": "`        if: ${{ (github.event_name == 'schedule' || github.event_name == 'push') && runner.os == 'Linux' && always() }}\n        run: |\n          curl https://github.com/googleapis/repo-automation-bots/releases/download/flakybot-1.1.0/flakybot -o flakybot -s -L\n          chmod +x ./flakybot\n          ./flakybot --repo ${{github.repository}} --commit_hash ${{github.sha}} --build_url https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n\n      - name: FlakyBot (Windows)\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/tests.yaml"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 9,
                  "endLine": 144,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        # only run flakybot on periodic (schedule) and continuous (push) events\n        if: ${{ (github.event_name == 'schedule' || github.event_name == 'push') && runner.os == 'Linux' && always() }}\n        run: |\n          curl https://github.com/googleapis/repo-automation-bots/releases/download/flakybot-1.1.0/flakybot -o flakybot -s -L\n          chmod +x ./flakybot\n          ./flakybot --repo ${{github.repository}} --commit_hash ${{github.sha}} --build_url https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n\n",
                    "rendered": {
                      "text": "        # only run flakybot on periodic (schedule) and continuous (push) events\n        if: ${{ (github.event_name == 'schedule' || github.event_name == 'push') && runner.os == 'Linux' && always() }}\n        run: |\n          curl https://github.com/googleapis/repo-automation-bots/releases/download/flakybot-1.1.0/flakybot -o flakybot -s -L\n          chmod +x ./flakybot\n          ./flakybot --repo ${{github.repository}} --commit_hash ${{github.sha}} --build_url https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n\n",
                      "markdown": "`        # only run flakybot on periodic (schedule) and continuous (push) events\n        if: ${{ (github.event_name == 'schedule' || github.event_name == 'push') && runner.os == 'Linux' && always() }}\n        run: |\n          curl https://github.com/googleapis/repo-automation-bots/releases/download/flakybot-1.1.0/flakybot -o flakybot -s -L\n          chmod +x ./flakybot\n          ./flakybot --repo ${{github.repository}} --commit_hash ${{github.sha}} --build_url https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/tests.yaml"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 34,
                  "endLine": 132,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -race -v ./... | tee test_results.txt\n\n      - name: Convert test output to XML\n        if: ${{ (github.event_name == 'schedule' || github.event_name == 'push') && always() }}\n",
                    "rendered": {
                      "text": "        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -race -v ./... | tee test_results.txt\n\n      - name: Convert test output to XML\n        if: ${{ (github.event_name == 'schedule' || github.event_name == 'push') && always() }}\n",
                      "markdown": "`        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -race -v ./... | tee test_results.txt\n\n      - name: Convert test output to XML\n        if: ${{ (github.event_name == 'schedule' || github.event_name == 'push') && always() }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/tests.yaml"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 14,
                  "endLine": 131,
                  "snippet": {
                    "text": "          TMPDIR: \"/tmp\"\n          TMP: \"${{ runner.temp }}\"\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -race -v ./... | tee test_results.txt\n\n      - name: Convert test output to XML\n",
                    "rendered": {
                      "text": "          TMPDIR: \"/tmp\"\n          TMP: \"${{ runner.temp }}\"\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -race -v ./... | tee test_results.txt\n\n      - name: Convert test output to XML\n",
                      "markdown": "`          TMPDIR: \"/tmp\"\n          TMP: \"${{ runner.temp }}\"\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -race -v ./... | tee test_results.txt\n\n      - name: Convert test output to XML\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/tests.yaml"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 20,
                  "endLine": 129,
                  "endColumn": 26,
                  "snippet": {
                    "text": "          IMPERSONATED_USER: \"${{ steps.secrets.outputs.IMPERSONATED_USER }}\"\n          TMPDIR: \"/tmp\"\n          TMP: \"${{ runner.temp }}\"\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -race -v ./... | tee test_results.txt\n",
                    "rendered": {
                      "text": "          IMPERSONATED_USER: \"${{ steps.secrets.outputs.IMPERSONATED_USER }}\"\n          TMPDIR: \"/tmp\"\n          TMP: \"${{ runner.temp }}\"\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -race -v ./... | tee test_results.txt\n",
                      "markdown": "`          IMPERSONATED_USER: \"${{ steps.secrets.outputs.IMPERSONATED_USER }}\"\n          TMPDIR: \"/tmp\"\n          TMP: \"${{ runner.temp }}\"\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -race -v ./... | tee test_results.txt\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/tests.yaml"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 14,
                  "endLine": 106,
                  "endColumn": 19,
                  "snippet": {
                    "text": "      - name: Enable fuse config (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo sed -i 's/#user_allow_other/user_allow_other/g' /etc/fuse.conf\n\n      - name: Run tests\n        env:\n",
                    "rendered": {
                      "text": "      - name: Enable fuse config (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo sed -i 's/#user_allow_other/user_allow_other/g' /etc/fuse.conf\n\n      - name: Run tests\n        env:\n",
                      "markdown": "`      - name: Enable fuse config (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo sed -i 's/#user_allow_other/user_allow_other/g' /etc/fuse.conf\n\n      - name: Run tests\n        env:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/govulncheck.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/labels.yml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/auto-label.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/release-please.yml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/internal/proxy/fuse.go"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 7,
                  "snippet": {
                    "text": "a connection to the corresponding Cloud SQL instance, given you have the correct\nIAM permissions.\n\n\tmysql -u root -S \"/somedir/project:region:instance\"\n\n    # or\n\n",
                    "rendered": {
                      "text": "a connection to the corresponding Cloud SQL instance, given you have the correct\nIAM permissions.\n\n\tmysql -u root -S \"/somedir/project:region:instance\"\n\n    # or\n\n",
                      "markdown": "`a connection to the corresponding Cloud SQL instance, given you have the correct\nIAM permissions.\n\n\tmysql -u root -S \"/somedir/project:region:instance\"\n\n    # or\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/internal/proxy/proxy_windows_test.go"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 25,
                  "endColumn": 7,
                  "snippet": {
                    "text": "var (\n\tpg         = strings.ReplaceAll(\"proj:region:pg\", \":\", \".\")\n\tpg2        = strings.ReplaceAll(\"proj:region:pg2\", \":\", \".\")\n\tmysql      = strings.ReplaceAll(\"proj:region:mysql\", \":\", \".\")\n\tmysql2     = strings.ReplaceAll(\"proj:region:mysql2\", \":\", \".\")\n\tsqlserver  = strings.ReplaceAll(\"proj:region:sqlserver\", \":\", \".\")\n\tsqlserver2 = strings.ReplaceAll(\"proj:region:sqlserver2\", \":\", \".\")\n",
                    "rendered": {
                      "text": "var (\n\tpg         = strings.ReplaceAll(\"proj:region:pg\", \":\", \".\")\n\tpg2        = strings.ReplaceAll(\"proj:region:pg2\", \":\", \".\")\n\tmysql      = strings.ReplaceAll(\"proj:region:mysql\", \":\", \".\")\n\tmysql2     = strings.ReplaceAll(\"proj:region:mysql2\", \":\", \".\")\n\tsqlserver  = strings.ReplaceAll(\"proj:region:sqlserver\", \":\", \".\")\n\tsqlserver2 = strings.ReplaceAll(\"proj:region:sqlserver2\", \":\", \".\")\n",
                      "markdown": "`var (\n\tpg         = strings.ReplaceAll(\"proj:region:pg\", \":\", \".\")\n\tpg2        = strings.ReplaceAll(\"proj:region:pg2\", \":\", \".\")\n\tmysql      = strings.ReplaceAll(\"proj:region:mysql\", \":\", \".\")\n\tmysql2     = strings.ReplaceAll(\"proj:region:mysql2\", \":\", \".\")\n\tsqlserver  = strings.ReplaceAll(\"proj:region:sqlserver\", \":\", \".\")\n\tsqlserver2 = strings.ReplaceAll(\"proj:region:sqlserver2\", \":\", \".\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/internal/proxy/proxy_windows_test.go"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23,
                  "endColumn": 4,
                  "snippet": {
                    "text": ")\n\nvar (\n\tpg         = strings.ReplaceAll(\"proj:region:pg\", \":\", \".\")\n\tpg2        = strings.ReplaceAll(\"proj:region:pg2\", \":\", \".\")\n\tmysql      = strings.ReplaceAll(\"proj:region:mysql\", \":\", \".\")\n\tmysql2     = strings.ReplaceAll(\"proj:region:mysql2\", \":\", \".\")\n",
                    "rendered": {
                      "text": ")\n\nvar (\n\tpg         = strings.ReplaceAll(\"proj:region:pg\", \":\", \".\")\n\tpg2        = strings.ReplaceAll(\"proj:region:pg2\", \":\", \".\")\n\tmysql      = strings.ReplaceAll(\"proj:region:mysql\", \":\", \".\")\n\tmysql2     = strings.ReplaceAll(\"proj:region:mysql2\", \":\", \".\")\n",
                      "markdown": "`)\n\nvar (\n\tpg         = strings.ReplaceAll(\"proj:region:pg\", \":\", \".\")\n\tpg2        = strings.ReplaceAll(\"proj:region:pg2\", \":\", \".\")\n\tmysql      = strings.ReplaceAll(\"proj:region:mysql\", \":\", \".\")\n\tmysql2     = strings.ReplaceAll(\"proj:region:mysql2\", \":\", \".\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/internal/gcloud/gcloud.go"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 63,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\t\treturn nil, err\n\t}\n\tbuf, errbuf := new(bytes.Buffer), new(bytes.Buffer)\n\tcmd := exec.Command(gcloudCmd, \"--format\", \"json\", \"config\", \"config-helper\", \"--min-expiry\", \"1h\")\n\tcmd.Stdout = buf\n\tcmd.Stderr = errbuf\n\n",
                    "rendered": {
                      "text": "\t\treturn nil, err\n\t}\n\tbuf, errbuf := new(bytes.Buffer), new(bytes.Buffer)\n\tcmd := exec.Command(gcloudCmd, \"--format\", \"json\", \"config\", \"config-helper\", \"--min-expiry\", \"1h\")\n\tcmd.Stdout = buf\n\tcmd.Stderr = errbuf\n\n",
                      "markdown": "`\t\treturn nil, err\n\t}\n\tbuf, errbuf := new(bytes.Buffer), new(bytes.Buffer)\n\tcmd := exec.Command(gcloudCmd, \"--format\", \"json\", \"config\", \"config-helper\", \"--min-expiry\", \"1h\")\n\tcmd.Stdout = buf\n\tcmd.Stderr = errbuf\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/config_test.go"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 10,
                  "endLine": 116,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"env overrides config file precedence\",\n\t\t\targs: []string{\n\t\t\t\t\"proj:region:inst\",\n\t\t\t\t\"--config-file\", \"testdata/config.toml\",\n",
                    "rendered": {
                      "text": "\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"env overrides config file precedence\",\n\t\t\targs: []string{\n\t\t\t\t\"proj:region:inst\",\n\t\t\t\t\"--config-file\", \"testdata/config.toml\",\n",
                      "markdown": "`\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"env overrides config file precedence\",\n\t\t\targs: []string{\n\t\t\t\t\"proj:region:inst\",\n\t\t\t\t\"--config-file\", \"testdata/config.toml\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/config_test.go"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 25,
                  "endLine": 94,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"flag overrides env config precedence\",\n\t\t\targs: []string{\"proj:region:inst\", \"--debug\"},\n\t\t\tsetup: func() {\n\t\t\t\tt.Setenv(\"CSQL_PROXY_DEBUG\", \"false\")\n",
                    "rendered": {
                      "text": "\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"flag overrides env config precedence\",\n\t\t\targs: []string{\"proj:region:inst\", \"--debug\"},\n\t\t\tsetup: func() {\n\t\t\t\tt.Setenv(\"CSQL_PROXY_DEBUG\", \"false\")\n",
                      "markdown": "`\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"flag overrides env config precedence\",\n\t\t\targs: []string{\"proj:region:inst\", \"--debug\"},\n\t\t\tsetup: func() {\n\t\t\t\tt.Setenv(\"CSQL_PROXY_DEBUG\", \"false\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/config_test.go"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 9,
                  "endLine": 87,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\t\t\tdesc: \"instance env overrides config file precedence\",\n\t\t\targs: []string{\"--config-file\", \"testdata/config.json\"},\n\t\t\tsetup: func() {\n\t\t\t\tt.Setenv(\"CSQL_PROXY_INSTANCE_CONNECTION_NAME\", \"p:r:i\")\n\t\t\t},\n\t\t\tassert: func(t *testing.T, c *Command) {\n\t\t\t\tassert(t, \"p:r:i\", c.conf.Instances[0].Name)\n",
                    "rendered": {
                      "text": "\t\t\tdesc: \"instance env overrides config file precedence\",\n\t\t\targs: []string{\"--config-file\", \"testdata/config.json\"},\n\t\t\tsetup: func() {\n\t\t\t\tt.Setenv(\"CSQL_PROXY_INSTANCE_CONNECTION_NAME\", \"p:r:i\")\n\t\t\t},\n\t\t\tassert: func(t *testing.T, c *Command) {\n\t\t\t\tassert(t, \"p:r:i\", c.conf.Instances[0].Name)\n",
                      "markdown": "`\t\t\tdesc: \"instance env overrides config file precedence\",\n\t\t\targs: []string{\"--config-file\", \"testdata/config.json\"},\n\t\t\tsetup: func() {\n\t\t\t\tt.Setenv(\"CSQL_PROXY_INSTANCE_CONNECTION_NAME\", \"p:r:i\")\n\t\t\t},\n\t\t\tassert: func(t *testing.T, c *Command) {\n\t\t\t\tassert(t, \"p:r:i\", c.conf.Instances[0].Name)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/config_test.go"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 19,
                  "endLine": 84,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"instance env overrides config file precedence\",\n\t\t\targs: []string{\"--config-file\", \"testdata/config.json\"},\n\t\t\tsetup: func() {\n\t\t\t\tt.Setenv(\"CSQL_PROXY_INSTANCE_CONNECTION_NAME\", \"p:r:i\")\n",
                    "rendered": {
                      "text": "\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"instance env overrides config file precedence\",\n\t\t\targs: []string{\"--config-file\", \"testdata/config.json\"},\n\t\t\tsetup: func() {\n\t\t\t\tt.Setenv(\"CSQL_PROXY_INSTANCE_CONNECTION_NAME\", \"p:r:i\")\n",
                      "markdown": "`\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"instance env overrides config file precedence\",\n\t\t\targs: []string{\"--config-file\", \"testdata/config.json\"},\n\t\t\tsetup: func() {\n\t\t\t\tt.Setenv(\"CSQL_PROXY_INSTANCE_CONNECTION_NAME\", \"p:r:i\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/config_test.go"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 9,
                  "endLine": 77,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\t\t\tdesc: \"instance argument overrides env config precedence\",\n\t\t\targs: []string{\"proj:region:inst\"},\n\t\t\tsetup: func() {\n\t\t\t\tt.Setenv(\"CSQL_PROXY_INSTANCE_CONNECTION_NAME\", \"p:r:i\")\n\t\t\t},\n\t\t\tassert: func(t *testing.T, c *Command) {\n\t\t\t\tassert(t, \"proj:region:inst\", c.conf.Instances[0].Name)\n",
                    "rendered": {
                      "text": "\t\t\tdesc: \"instance argument overrides env config precedence\",\n\t\t\targs: []string{\"proj:region:inst\"},\n\t\t\tsetup: func() {\n\t\t\t\tt.Setenv(\"CSQL_PROXY_INSTANCE_CONNECTION_NAME\", \"p:r:i\")\n\t\t\t},\n\t\t\tassert: func(t *testing.T, c *Command) {\n\t\t\t\tassert(t, \"proj:region:inst\", c.conf.Instances[0].Name)\n",
                      "markdown": "`\t\t\tdesc: \"instance argument overrides env config precedence\",\n\t\t\targs: []string{\"proj:region:inst\"},\n\t\t\tsetup: func() {\n\t\t\t\tt.Setenv(\"CSQL_PROXY_INSTANCE_CONNECTION_NAME\", \"p:r:i\")\n\t\t\t},\n\t\t\tassert: func(t *testing.T, c *Command) {\n\t\t\t\tassert(t, \"proj:region:inst\", c.conf.Instances[0].Name)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/config_test.go"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 38,
                  "endLine": 74,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"instance argument overrides env config precedence\",\n\t\t\targs: []string{\"proj:region:inst\"},\n\t\t\tsetup: func() {\n\t\t\t\tt.Setenv(\"CSQL_PROXY_INSTANCE_CONNECTION_NAME\", \"p:r:i\")\n",
                    "rendered": {
                      "text": "\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"instance argument overrides env config precedence\",\n\t\t\targs: []string{\"proj:region:inst\"},\n\t\t\tsetup: func() {\n\t\t\t\tt.Setenv(\"CSQL_PROXY_INSTANCE_CONNECTION_NAME\", \"p:r:i\")\n",
                      "markdown": "`\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"instance argument overrides env config precedence\",\n\t\t\targs: []string{\"proj:region:inst\"},\n\t\t\tsetup: func() {\n\t\t\t\tt.Setenv(\"CSQL_PROXY_INSTANCE_CONNECTION_NAME\", \"p:r:i\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/config_test.go"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 7,
                  "endLine": 16,
                  "snippet": {
                    "text": "// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage cmd\n\nimport (\n\t\"testing\"\n)\n",
                    "rendered": {
                      "text": "// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage cmd\n\nimport (\n\t\"testing\"\n)\n",
                      "markdown": "`// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage cmd\n\nimport (\n\t\"testing\"\n)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/config_test.go"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/config_test.go"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 24,
                  "endLine": 94,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"flag overrides env config precedence\",\n\t\t\targs: []string{\"proj:region:inst\", \"--debug\"},\n\t\t\tsetup: func() {\n\t\t\t\tt.Setenv(\"CSQL_PROXY_DEBUG\", \"false\")\n",
                    "rendered": {
                      "text": "\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"flag overrides env config precedence\",\n\t\t\targs: []string{\"proj:region:inst\", \"--debug\"},\n\t\t\tsetup: func() {\n\t\t\t\tt.Setenv(\"CSQL_PROXY_DEBUG\", \"false\")\n",
                      "markdown": "`\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"flag overrides env config precedence\",\n\t\t\targs: []string{\"proj:region:inst\", \"--debug\"},\n\t\t\tsetup: func() {\n\t\t\t\tt.Setenv(\"CSQL_PROXY_DEBUG\", \"false\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/config_test.go"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 18,
                  "endLine": 84,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"instance env overrides config file precedence\",\n\t\t\targs: []string{\"--config-file\", \"testdata/config.json\"},\n\t\t\tsetup: func() {\n\t\t\t\tt.Setenv(\"CSQL_PROXY_INSTANCE_CONNECTION_NAME\", \"p:r:i\")\n",
                    "rendered": {
                      "text": "\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"instance env overrides config file precedence\",\n\t\t\targs: []string{\"--config-file\", \"testdata/config.json\"},\n\t\t\tsetup: func() {\n\t\t\t\tt.Setenv(\"CSQL_PROXY_INSTANCE_CONNECTION_NAME\", \"p:r:i\")\n",
                      "markdown": "`\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"instance env overrides config file precedence\",\n\t\t\targs: []string{\"--config-file\", \"testdata/config.json\"},\n\t\t\tsetup: func() {\n\t\t\t\tt.Setenv(\"CSQL_PROXY_INSTANCE_CONNECTION_NAME\", \"p:r:i\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/config_test.go"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 37,
                  "endLine": 74,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"instance argument overrides env config precedence\",\n\t\t\targs: []string{\"proj:region:inst\"},\n\t\t\tsetup: func() {\n\t\t\t\tt.Setenv(\"CSQL_PROXY_INSTANCE_CONNECTION_NAME\", \"p:r:i\")\n",
                    "rendered": {
                      "text": "\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"instance argument overrides env config precedence\",\n\t\t\targs: []string{\"proj:region:inst\"},\n\t\t\tsetup: func() {\n\t\t\t\tt.Setenv(\"CSQL_PROXY_INSTANCE_CONNECTION_NAME\", \"p:r:i\")\n",
                      "markdown": "`\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"instance argument overrides env config precedence\",\n\t\t\targs: []string{\"proj:region:inst\"},\n\t\t\tsetup: func() {\n\t\t\t\tt.Setenv(\"CSQL_PROXY_INSTANCE_CONNECTION_NAME\", \"p:r:i\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root_test.go"
                },
                "region": {
                  "startLine": 485,
                  "startColumn": 23,
                  "endLine": 485,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\t}\n}\n\nfunc TestNewCommandWithEnvironmentConfigInstanceConnectionName(t *testing.T) {\n\ttcs := []struct {\n\t\tdesc string\n\t\tenv  map[string]string\n",
                    "rendered": {
                      "text": "\t}\n}\n\nfunc TestNewCommandWithEnvironmentConfigInstanceConnectionName(t *testing.T) {\n\ttcs := []struct {\n\t\tdesc string\n\t\tenv  map[string]string\n",
                      "markdown": "`\t}\n}\n\nfunc TestNewCommandWithEnvironmentConfigInstanceConnectionName(t *testing.T) {\n\ttcs := []struct {\n\t\tdesc string\n\t\tenv  map[string]string\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root_test.go"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 7,
                  "endLine": 16,
                  "snippet": {
                    "text": "// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage cmd\n\nimport (\n\t\"context\"\n\t\"errors\"\n",
                    "rendered": {
                      "text": "// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage cmd\n\nimport (\n\t\"context\"\n\t\"errors\"\n",
                      "markdown": "`// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage cmd\n\nimport (\n\t\"context\"\n\t\"errors\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root_test.go"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root_test.go"
                },
                "region": {
                  "startLine": 1196,
                  "startColumn": 23,
                  "endLine": 1196,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"using private IP and psc query params\",\n\t\t\targs: []string{\"p:r:i?private-ip=true&psc=true\"},\n\t\t},\n\t\t{\n",
                    "rendered": {
                      "text": "\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"using private IP and psc query params\",\n\t\t\targs: []string{\"p:r:i?private-ip=true&psc=true\"},\n\t\t},\n\t\t{\n",
                      "markdown": "`\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"using private IP and psc query params\",\n\t\t\targs: []string{\"p:r:i?private-ip=true&psc=true\"},\n\t\t},\n\t\t{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root_test.go"
                },
                "region": {
                  "startLine": 1058,
                  "startColumn": 48,
                  "endLine": 1058,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\t\targs: []string{\"--address\", \"bogus\", \"proj:region:inst\"},\n\t\t},\n\t\t{\n\t\t\tdesc: \"when the address query param is not an IP address\",\n\t\t\targs: []string{\"proj:region:inst?address=世界\"},\n\t\t},\n\t\t{\n",
                    "rendered": {
                      "text": "\t\t\targs: []string{\"--address\", \"bogus\", \"proj:region:inst\"},\n\t\t},\n\t\t{\n\t\t\tdesc: \"when the address query param is not an IP address\",\n\t\t\targs: []string{\"proj:region:inst?address=世界\"},\n\t\t},\n\t\t{\n",
                      "markdown": "`\t\t\targs: []string{\"--address\", \"bogus\", \"proj:region:inst\"},\n\t\t},\n\t\t{\n\t\t\tdesc: \"when the address query param is not an IP address\",\n\t\t\targs: []string{\"proj:region:inst?address=世界\"},\n\t\t},\n\t\t{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root_test.go"
                },
                "region": {
                  "startLine": 1054,
                  "startColumn": 43,
                  "endLine": 1054,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\t\t\targs: []string{\"proj:region:inst?address=\"},\n\t\t},\n\t\t{\n\t\t\tdesc: \"using the address flag with a bad IP address\",\n\t\t\targs: []string{\"--address\", \"bogus\", \"proj:region:inst\"},\n\t\t},\n\t\t{\n",
                    "rendered": {
                      "text": "\t\t\targs: []string{\"proj:region:inst?address=\"},\n\t\t},\n\t\t{\n\t\t\tdesc: \"using the address flag with a bad IP address\",\n\t\t\targs: []string{\"--address\", \"bogus\", \"proj:region:inst\"},\n\t\t},\n\t\t{\n",
                      "markdown": "`\t\t\targs: []string{\"proj:region:inst?address=\"},\n\t\t},\n\t\t{\n\t\t\tdesc: \"using the address flag with a bad IP address\",\n\t\t\targs: []string{\"--address\", \"bogus\", \"proj:region:inst\"},\n\t\t},\n\t\t{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root_test.go"
                },
                "region": {
                  "startLine": 705,
                  "startColumn": 35,
                  "endLine": 705,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tdesc:     \"using the impersonate service account envvar\",\n\t\t\tenvName:  \"CSQL_PROXY_IMPERSONATE_SERVICE_ACCOUNT\",\n\t\t\tenvValue: \"sv1@developer.gserviceaccount.com\",\n\t\t\twant: withDefaults(&proxy.Config{\n",
                    "rendered": {
                      "text": "\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tdesc:     \"using the impersonate service account envvar\",\n\t\t\tenvName:  \"CSQL_PROXY_IMPERSONATE_SERVICE_ACCOUNT\",\n\t\t\tenvValue: \"sv1@developer.gserviceaccount.com\",\n\t\t\twant: withDefaults(&proxy.Config{\n",
                      "markdown": "`\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tdesc:     \"using the impersonate service account envvar\",\n\t\t\tenvName:  \"CSQL_PROXY_IMPERSONATE_SERVICE_ACCOUNT\",\n\t\t\tenvValue: \"sv1@developer.gserviceaccount.com\",\n\t\t\twant: withDefaults(&proxy.Config{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root_test.go"
                },
                "region": {
                  "startLine": 488,
                  "startColumn": 1,
                  "endLine": 488,
                  "endColumn": 6,
                  "snippet": {
                    "text": "func TestNewCommandWithEnvironmentConfigInstanceConnectionName(t *testing.T) {\n\ttcs := []struct {\n\t\tdesc string\n\t\tenv  map[string]string\n\t\targs []string\n\t\twant *proxy.Config\n\t}{\n",
                    "rendered": {
                      "text": "func TestNewCommandWithEnvironmentConfigInstanceConnectionName(t *testing.T) {\n\ttcs := []struct {\n\t\tdesc string\n\t\tenv  map[string]string\n\t\targs []string\n\t\twant *proxy.Config\n\t}{\n",
                      "markdown": "`func TestNewCommandWithEnvironmentConfigInstanceConnectionName(t *testing.T) {\n\ttcs := []struct {\n\t\tdesc string\n\t\tenv  map[string]string\n\t\targs []string\n\t\twant *proxy.Config\n\t}{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root_test.go"
                },
                "region": {
                  "startLine": 407,
                  "startColumn": 31,
                  "endLine": 407,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tdesc: \"using the impersonate service account flag\",\n\t\t\targs: []string{\"--impersonate-service-account\",\n\t\t\t\t\"sv1@developer.gserviceaccount.com\",\n\t\t\t\t\"proj:region:inst\"},\n",
                    "rendered": {
                      "text": "\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tdesc: \"using the impersonate service account flag\",\n\t\t\targs: []string{\"--impersonate-service-account\",\n\t\t\t\t\"sv1@developer.gserviceaccount.com\",\n\t\t\t\t\"proj:region:inst\"},\n",
                      "markdown": "`\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tdesc: \"using the impersonate service account flag\",\n\t\t\targs: []string{\"--impersonate-service-account\",\n\t\t\t\t\"sv1@developer.gserviceaccount.com\",\n\t\t\t\t\"proj:region:inst\"},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/options_test.go"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 7,
                  "endLine": 16,
                  "snippet": {
                    "text": "// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage cmd\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n",
                    "rendered": {
                      "text": "// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage cmd\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n",
                      "markdown": "`// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage cmd\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/options_test.go"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 28,
                  "endLine": 121,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\t\t\tdesc: \"with auto IP\",\n\t\t\tisValid: func(c *Command) error {\n\t\t\t\tif !c.conf.AutoIP {\n\t\t\t\t\treturn errors.New(\"auto IP was false, but should be true\")\n\t\t\t\t}\n\t\t\t\treturn nil\n\t\t\t},\n",
                    "rendered": {
                      "text": "\t\t\tdesc: \"with auto IP\",\n\t\t\tisValid: func(c *Command) error {\n\t\t\t\tif !c.conf.AutoIP {\n\t\t\t\t\treturn errors.New(\"auto IP was false, but should be true\")\n\t\t\t\t}\n\t\t\t\treturn nil\n\t\t\t},\n",
                      "markdown": "`\t\t\tdesc: \"with auto IP\",\n\t\t\tisValid: func(c *Command) error {\n\t\t\t\tif !c.conf.AutoIP {\n\t\t\t\t\treturn errors.New(\"auto IP was false, but should be true\")\n\t\t\t\t}\n\t\t\t\treturn nil\n\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root_linux_test.go"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 7,
                  "endLine": 16,
                  "snippet": {
                    "text": "// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage cmd\n\nimport (\n\t\"context\"\n\t\"net\"\n",
                    "rendered": {
                      "text": "// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage cmd\n\nimport (\n\t\"context\"\n\t\"net\"\n",
                      "markdown": "`// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage cmd\n\nimport (\n\t\"context\"\n\t\"net\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 558,
                  "startColumn": 11,
                  "endLine": 558,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\t// Override any unset flags with Viper values to use the pflags\n\t\t// object as a single source of truth.\n\t\tif !f.Changed && v.IsSet(f.Name) {\n\t\t\tval := v.Get(f.Name)\n\t\t\t_ = c.Flags().Set(f.Name, fmt.Sprintf(\"%v\", val))\n\t\t}\n\t})\n",
                    "rendered": {
                      "text": "\t\t// Override any unset flags with Viper values to use the pflags\n\t\t// object as a single source of truth.\n\t\tif !f.Changed && v.IsSet(f.Name) {\n\t\t\tval := v.Get(f.Name)\n\t\t\t_ = c.Flags().Set(f.Name, fmt.Sprintf(\"%v\", val))\n\t\t}\n\t})\n",
                      "markdown": "`\t\t// Override any unset flags with Viper values to use the pflags\n\t\t// object as a single source of truth.\n\t\tif !f.Changed && v.IsSet(f.Name) {\n\t\t\tval := v.Get(f.Name)\n\t\t\t_ = c.Flags().Set(f.Name, fmt.Sprintf(\"%v\", val))\n\t\t}\n\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 378,
                  "startColumn": 20,
                  "endLine": 378,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t\tcase <-t:\n\t\t\treturn errors.New(\"command failed to complete successfully\")\n\t\tdefault:\n\t\t\tresp, err := http.Get(addr)\n\t\t\tif err != nil || resp.StatusCode != http.StatusOK {\n\t\t\t\ttime.Sleep(time.Second)\n\t\t\t\tbreak\n",
                    "rendered": {
                      "text": "\t\tcase <-t:\n\t\t\treturn errors.New(\"command failed to complete successfully\")\n\t\tdefault:\n\t\t\tresp, err := http.Get(addr)\n\t\t\tif err != nil || resp.StatusCode != http.StatusOK {\n\t\t\t\ttime.Sleep(time.Second)\n\t\t\t\tbreak\n",
                      "markdown": "`\t\tcase <-t:\n\t\t\treturn errors.New(\"command failed to complete successfully\")\n\t\tdefault:\n\t\t\tresp, err := http.Get(addr)\n\t\t\tif err != nil || resp.StatusCode != http.StatusOK {\n\t\t\t\ttime.Sleep(time.Second)\n\t\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 449,
                  "startColumn": 34,
                  "endLine": 449,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\tlocalFlags.StringVarP(&c.conf.Token, \"token\", \"t\", \"\",\n\t\t\"Use bearer token as a source of IAM credentials.\")\n\tlocalFlags.StringVar(&c.conf.LoginToken, \"login-token\", \"\",\n\t\t\"Use bearer token as a database password (used with token and auto-iam-authn only)\")\n\tlocalFlags.StringVarP(&c.conf.CredentialsFile, \"credentials-file\", \"c\", \"\",\n\t\t\"Use service account key file as a source of IAM credentials.\")\n\tlocalFlags.StringVarP(&c.conf.CredentialsJSON, \"json-credentials\", \"j\", \"\",\n",
                    "rendered": {
                      "text": "\tlocalFlags.StringVarP(&c.conf.Token, \"token\", \"t\", \"\",\n\t\t\"Use bearer token as a source of IAM credentials.\")\n\tlocalFlags.StringVar(&c.conf.LoginToken, \"login-token\", \"\",\n\t\t\"Use bearer token as a database password (used with token and auto-iam-authn only)\")\n\tlocalFlags.StringVarP(&c.conf.CredentialsFile, \"credentials-file\", \"c\", \"\",\n\t\t\"Use service account key file as a source of IAM credentials.\")\n\tlocalFlags.StringVarP(&c.conf.CredentialsJSON, \"json-credentials\", \"j\", \"\",\n",
                      "markdown": "`\tlocalFlags.StringVarP(&c.conf.Token, \"token\", \"t\", \"\",\n\t\t\"Use bearer token as a source of IAM credentials.\")\n\tlocalFlags.StringVar(&c.conf.LoginToken, \"login-token\", \"\",\n\t\t\"Use bearer token as a database password (used with token and auto-iam-authn only)\")\n\tlocalFlags.StringVarP(&c.conf.CredentialsFile, \"credentials-file\", \"c\", \"\",\n\t\t\"Use service account key file as a source of IAM credentials.\")\n\tlocalFlags.StringVarP(&c.conf.CredentialsJSON, \"json-credentials\", \"j\", \"\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 667,
                  "startColumn": 17,
                  "endLine": 667,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n\ti := 1\n\tfor {\n\t\tinstN := os.Getenv(fmt.Sprintf(\"%s_INSTANCE_CONNECTION_NAME_%d\", envPrefix, i))\n\t\t// if the next instance connection name is not defined, stop checking\n\t\t// environment variables.\n\t\tif instN == \"\" {\n",
                    "rendered": {
                      "text": "\n\ti := 1\n\tfor {\n\t\tinstN := os.Getenv(fmt.Sprintf(\"%s_INSTANCE_CONNECTION_NAME_%d\", envPrefix, i))\n\t\t// if the next instance connection name is not defined, stop checking\n\t\t// environment variables.\n\t\tif instN == \"\" {\n",
                      "markdown": "`\n\ti := 1\n\tfor {\n\t\tinstN := os.Getenv(fmt.Sprintf(\"%s_INSTANCE_CONNECTION_NAME_%d\", envPrefix, i))\n\t\t// if the next instance connection name is not defined, stop checking\n\t\t// environment variables.\n\t\tif instN == \"\" {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 658,
                  "startColumn": 15,
                  "endLine": 658,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\t//     INSTANCE_CONNECTION_NAME_0\n\tinst := os.Getenv(fmt.Sprintf(\"%s_INSTANCE_CONNECTION_NAME\", envPrefix))\n\tif inst == \"\" {\n\t\tinst = os.Getenv(fmt.Sprintf(\"%s_INSTANCE_CONNECTION_NAME_0\", envPrefix))\n\t\tif inst == \"\" {\n\t\t\treturn nil\n\t\t}\n",
                    "rendered": {
                      "text": "\t//     INSTANCE_CONNECTION_NAME_0\n\tinst := os.Getenv(fmt.Sprintf(\"%s_INSTANCE_CONNECTION_NAME\", envPrefix))\n\tif inst == \"\" {\n\t\tinst = os.Getenv(fmt.Sprintf(\"%s_INSTANCE_CONNECTION_NAME_0\", envPrefix))\n\t\tif inst == \"\" {\n\t\t\treturn nil\n\t\t}\n",
                      "markdown": "`\t//     INSTANCE_CONNECTION_NAME_0\n\tinst := os.Getenv(fmt.Sprintf(\"%s_INSTANCE_CONNECTION_NAME\", envPrefix))\n\tif inst == \"\" {\n\t\tinst = os.Getenv(fmt.Sprintf(\"%s_INSTANCE_CONNECTION_NAME_0\", envPrefix))\n\t\tif inst == \"\" {\n\t\t\treturn nil\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 656,
                  "startColumn": 15,
                  "endLine": 656,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\t//     INSTANCE_CONNECTION_NAME\n\t// or if that's not defined, with:\n\t//     INSTANCE_CONNECTION_NAME_0\n\tinst := os.Getenv(fmt.Sprintf(\"%s_INSTANCE_CONNECTION_NAME\", envPrefix))\n\tif inst == \"\" {\n\t\tinst = os.Getenv(fmt.Sprintf(\"%s_INSTANCE_CONNECTION_NAME_0\", envPrefix))\n\t\tif inst == \"\" {\n",
                    "rendered": {
                      "text": "\t//     INSTANCE_CONNECTION_NAME\n\t// or if that's not defined, with:\n\t//     INSTANCE_CONNECTION_NAME_0\n\tinst := os.Getenv(fmt.Sprintf(\"%s_INSTANCE_CONNECTION_NAME\", envPrefix))\n\tif inst == \"\" {\n\t\tinst = os.Getenv(fmt.Sprintf(\"%s_INSTANCE_CONNECTION_NAME_0\", envPrefix))\n\t\tif inst == \"\" {\n",
                      "markdown": "`\t//     INSTANCE_CONNECTION_NAME\n\t// or if that's not defined, with:\n\t//     INSTANCE_CONNECTION_NAME_0\n\tinst := os.Getenv(fmt.Sprintf(\"%s_INSTANCE_CONNECTION_NAME\", envPrefix))\n\tif inst == \"\" {\n\t\tinst = os.Getenv(fmt.Sprintf(\"%s_INSTANCE_CONNECTION_NAME_0\", envPrefix))\n\t\tif inst == \"\" {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 23,
                  "endLine": 219,
                  "endColumn": 46,
                  "snippet": {
                    "text": "          --impersonate-service-account=SERVICE_ACCOUNT_1,SERVICE_ACCOUNT_2,SERVICE_ACCOUNT_3\n          my-project:us-central1:my-db-server\n\n  In this example, the environment's IAM principal impersonates\n  SERVICE_ACCOUNT_3 which impersonates SERVICE_ACCOUNT_2 which then\n  impersonates the target SERVICE_ACCOUNT_1.\n\n",
                    "rendered": {
                      "text": "          --impersonate-service-account=SERVICE_ACCOUNT_1,SERVICE_ACCOUNT_2,SERVICE_ACCOUNT_3\n          my-project:us-central1:my-db-server\n\n  In this example, the environment's IAM principal impersonates\n  SERVICE_ACCOUNT_3 which impersonates SERVICE_ACCOUNT_2 which then\n  impersonates the target SERVICE_ACCOUNT_1.\n\n",
                      "markdown": "`          --impersonate-service-account=SERVICE_ACCOUNT_1,SERVICE_ACCOUNT_2,SERVICE_ACCOUNT_3\n          my-project:us-central1:my-db-server\n\n  In this example, the environment's IAM principal impersonates\n  SERVICE_ACCOUNT_3 which impersonates SERVICE_ACCOUNT_2 which then\n  impersonates the target SERVICE_ACCOUNT_1.\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 1121,
                  "startColumn": 44,
                  "endLine": 1121,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t}\n\tif cmd.conf.Debug {\n\t\tneedsAdminServer = true\n\t\tcmd.logger.Infof(\"Enabling pprof endpoints at localhost:%v\", cmd.conf.AdminPort)\n\t\t// pprof standard endpoints\n\t\tm.HandleFunc(\"/debug/pprof/\", pprof.Index)\n\t\tm.HandleFunc(\"/debug/pprof/cmdline\", pprof.Cmdline)\n",
                    "rendered": {
                      "text": "\t}\n\tif cmd.conf.Debug {\n\t\tneedsAdminServer = true\n\t\tcmd.logger.Infof(\"Enabling pprof endpoints at localhost:%v\", cmd.conf.AdminPort)\n\t\t// pprof standard endpoints\n\t\tm.HandleFunc(\"/debug/pprof/\", pprof.Index)\n\t\tm.HandleFunc(\"/debug/pprof/cmdline\", pprof.Cmdline)\n",
                      "markdown": "`\t}\n\tif cmd.conf.Debug {\n\t\tneedsAdminServer = true\n\t\tcmd.logger.Infof(\"Enabling pprof endpoints at localhost:%v\", cmd.conf.AdminPort)\n\t\t// pprof standard endpoints\n\t\tm.HandleFunc(\"/debug/pprof/\", pprof.Index)\n\t\tm.HandleFunc(\"/debug/pprof/cmdline\", pprof.Cmdline)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 1114,
                  "startColumn": 50,
                  "endLine": 1114,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t)\n\tif cmd.conf.QuitQuitQuit {\n\t\tneedsAdminServer = true\n\t\tcmd.logger.Infof(\"Enabling quitquitquit endpoint at localhost:%v\", cmd.conf.AdminPort)\n\t\t// quitquitquit allows for shutdown on localhost only.\n\t\tvar quitOnce sync.Once\n\t\tm.HandleFunc(\"/quitquitquit\", quitquitquit(&quitOnce, shutdownCh))\n",
                    "rendered": {
                      "text": "\t)\n\tif cmd.conf.QuitQuitQuit {\n\t\tneedsAdminServer = true\n\t\tcmd.logger.Infof(\"Enabling quitquitquit endpoint at localhost:%v\", cmd.conf.AdminPort)\n\t\t// quitquitquit allows for shutdown on localhost only.\n\t\tvar quitOnce sync.Once\n\t\tm.HandleFunc(\"/quitquitquit\", quitquitquit(&quitOnce, shutdownCh))\n",
                      "markdown": "`\t)\n\tif cmd.conf.QuitQuitQuit {\n\t\tneedsAdminServer = true\n\t\tcmd.logger.Infof(\"Enabling quitquitquit endpoint at localhost:%v\", cmd.conf.AdminPort)\n\t\t// quitquitquit allows for shutdown on localhost only.\n\t\tvar quitOnce sync.Once\n\t\tm.HandleFunc(\"/quitquitquit\", quitquitquit(&quitOnce, shutdownCh))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 1087,
                  "startColumn": 48,
                  "endLine": 1087,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n\tif cmd.conf.HealthCheck {\n\t\tneedsHTTPServer = true\n\t\tcmd.logger.Infof(\"Starting health check server at %s\",\n\t\t\tnet.JoinHostPort(cmd.conf.HTTPAddress, cmd.conf.HTTPPort))\n\t\thc := healthcheck.NewCheck(p, cmd.logger)\n\t\tmux.HandleFunc(\"/startup\", hc.HandleStartup)\n",
                    "rendered": {
                      "text": "\n\tif cmd.conf.HealthCheck {\n\t\tneedsHTTPServer = true\n\t\tcmd.logger.Infof(\"Starting health check server at %s\",\n\t\t\tnet.JoinHostPort(cmd.conf.HTTPAddress, cmd.conf.HTTPPort))\n\t\thc := healthcheck.NewCheck(p, cmd.logger)\n\t\tmux.HandleFunc(\"/startup\", hc.HandleStartup)\n",
                      "markdown": "`\n\tif cmd.conf.HealthCheck {\n\t\tneedsHTTPServer = true\n\t\tcmd.logger.Infof(\"Starting health check server at %s\",\n\t\t\tnet.JoinHostPort(cmd.conf.HTTPAddress, cmd.conf.HTTPPort))\n\t\thc := healthcheck.NewCheck(p, cmd.logger)\n\t\tmux.HandleFunc(\"/startup\", hc.HandleStartup)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 829,
                  "startColumn": 1,
                  "endLine": 829,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tvar ics []proxy.InstanceConnConfig\n\tfor _, a := range args {\n\t\t// Assume no query params initially\n\t\tic := proxy.InstanceConnConfig{\n\t\t\tName: a,\n\t\t}\n\t\t// If there are query params, update instance config.\n",
                    "rendered": {
                      "text": "\tvar ics []proxy.InstanceConnConfig\n\tfor _, a := range args {\n\t\t// Assume no query params initially\n\t\tic := proxy.InstanceConnConfig{\n\t\t\tName: a,\n\t\t}\n\t\t// If there are query params, update instance config.\n",
                      "markdown": "`\tvar ics []proxy.InstanceConnConfig\n\tfor _, a := range args {\n\t\t// Assume no query params initially\n\t\tic := proxy.InstanceConnConfig{\n\t\t\tName: a,\n\t\t}\n\t\t// If there are query params, update instance config.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 809,
                  "startColumn": 89,
                  "endLine": 809,
                  "endColumn": 93,
                  "snippet": {
                    "text": "\t}\n\n\tif userHasSetLocal(cmd, \"sqladmin-api-endpoint\") && userHasSetLocal(cmd, \"universe-domain\") {\n\t\treturn newBadCommandError(\"cannot specify --sqladmin-api-endpoint and --universe-domain at the same time\")\n\t}\n\tif userHasSetLocal(cmd, \"sqladmin-api-endpoint\") && conf.APIEndpointURL != \"\" {\n\t\t_, err := url.Parse(conf.APIEndpointURL)\n",
                    "rendered": {
                      "text": "\t}\n\n\tif userHasSetLocal(cmd, \"sqladmin-api-endpoint\") && userHasSetLocal(cmd, \"universe-domain\") {\n\t\treturn newBadCommandError(\"cannot specify --sqladmin-api-endpoint and --universe-domain at the same time\")\n\t}\n\tif userHasSetLocal(cmd, \"sqladmin-api-endpoint\") && conf.APIEndpointURL != \"\" {\n\t\t_, err := url.Parse(conf.APIEndpointURL)\n",
                      "markdown": "`\t}\n\n\tif userHasSetLocal(cmd, \"sqladmin-api-endpoint\") && userHasSetLocal(cmd, \"universe-domain\") {\n\t\treturn newBadCommandError(\"cannot specify --sqladmin-api-endpoint and --universe-domain at the same time\")\n\t}\n\tif userHasSetLocal(cmd, \"sqladmin-api-endpoint\") && conf.APIEndpointURL != \"\" {\n\t\t_, err := url.Parse(conf.APIEndpointURL)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 772,
                  "startColumn": 86,
                  "endLine": 772,
                  "endColumn": 90,
                  "snippet": {
                    "text": "\t\treturn newBadCommandError(\"cannot specify --json-credentials and --credentials-file flags at the same time\")\n\t}\n\tif conf.CredentialsJSON != \"\" && conf.GcloudAuth {\n\t\treturn newBadCommandError(\"cannot specify --json-credentials and --gcloud-auth flags at the same time\")\n\t}\n\n\t// When using token with auto-iam-authn, login-token must also be set.\n",
                    "rendered": {
                      "text": "\t\treturn newBadCommandError(\"cannot specify --json-credentials and --credentials-file flags at the same time\")\n\t}\n\tif conf.CredentialsJSON != \"\" && conf.GcloudAuth {\n\t\treturn newBadCommandError(\"cannot specify --json-credentials and --gcloud-auth flags at the same time\")\n\t}\n\n\t// When using token with auto-iam-authn, login-token must also be set.\n",
                      "markdown": "`\t\treturn newBadCommandError(\"cannot specify --json-credentials and --credentials-file flags at the same time\")\n\t}\n\tif conf.CredentialsJSON != \"\" && conf.GcloudAuth {\n\t\treturn newBadCommandError(\"cannot specify --json-credentials and --gcloud-auth flags at the same time\")\n\t}\n\n\t// When using token with auto-iam-authn, login-token must also be set.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 769,
                  "startColumn": 91,
                  "endLine": 769,
                  "endColumn": 95,
                  "snippet": {
                    "text": "\t\treturn newBadCommandError(\"cannot specify --json-credentials and --token flags at the same time\")\n\t}\n\tif conf.CredentialsJSON != \"\" && conf.CredentialsFile != \"\" {\n\t\treturn newBadCommandError(\"cannot specify --json-credentials and --credentials-file flags at the same time\")\n\t}\n\tif conf.CredentialsJSON != \"\" && conf.GcloudAuth {\n\t\treturn newBadCommandError(\"cannot specify --json-credentials and --gcloud-auth flags at the same time\")\n",
                    "rendered": {
                      "text": "\t\treturn newBadCommandError(\"cannot specify --json-credentials and --token flags at the same time\")\n\t}\n\tif conf.CredentialsJSON != \"\" && conf.CredentialsFile != \"\" {\n\t\treturn newBadCommandError(\"cannot specify --json-credentials and --credentials-file flags at the same time\")\n\t}\n\tif conf.CredentialsJSON != \"\" && conf.GcloudAuth {\n\t\treturn newBadCommandError(\"cannot specify --json-credentials and --gcloud-auth flags at the same time\")\n",
                      "markdown": "`\t\treturn newBadCommandError(\"cannot specify --json-credentials and --token flags at the same time\")\n\t}\n\tif conf.CredentialsJSON != \"\" && conf.CredentialsFile != \"\" {\n\t\treturn newBadCommandError(\"cannot specify --json-credentials and --credentials-file flags at the same time\")\n\t}\n\tif conf.CredentialsJSON != \"\" && conf.GcloudAuth {\n\t\treturn newBadCommandError(\"cannot specify --json-credentials and --gcloud-auth flags at the same time\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 766,
                  "startColumn": 80,
                  "endLine": 766,
                  "endColumn": 84,
                  "snippet": {
                    "text": "\t\treturn newBadCommandError(\"cannot specify --credentials-file and --gcloud-auth flags at the same time\")\n\t}\n\tif conf.CredentialsJSON != \"\" && conf.Token != \"\" {\n\t\treturn newBadCommandError(\"cannot specify --json-credentials and --token flags at the same time\")\n\t}\n\tif conf.CredentialsJSON != \"\" && conf.CredentialsFile != \"\" {\n\t\treturn newBadCommandError(\"cannot specify --json-credentials and --credentials-file flags at the same time\")\n",
                    "rendered": {
                      "text": "\t\treturn newBadCommandError(\"cannot specify --credentials-file and --gcloud-auth flags at the same time\")\n\t}\n\tif conf.CredentialsJSON != \"\" && conf.Token != \"\" {\n\t\treturn newBadCommandError(\"cannot specify --json-credentials and --token flags at the same time\")\n\t}\n\tif conf.CredentialsJSON != \"\" && conf.CredentialsFile != \"\" {\n\t\treturn newBadCommandError(\"cannot specify --json-credentials and --credentials-file flags at the same time\")\n",
                      "markdown": "`\t\treturn newBadCommandError(\"cannot specify --credentials-file and --gcloud-auth flags at the same time\")\n\t}\n\tif conf.CredentialsJSON != \"\" && conf.Token != \"\" {\n\t\treturn newBadCommandError(\"cannot specify --json-credentials and --token flags at the same time\")\n\t}\n\tif conf.CredentialsJSON != \"\" && conf.CredentialsFile != \"\" {\n\t\treturn newBadCommandError(\"cannot specify --json-credentials and --credentials-file flags at the same time\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 763,
                  "startColumn": 86,
                  "endLine": 763,
                  "endColumn": 90,
                  "snippet": {
                    "text": "\t\treturn newBadCommandError(\"cannot specify --token and --gcloud-auth flags at the same time\")\n\t}\n\tif conf.CredentialsFile != \"\" && conf.GcloudAuth {\n\t\treturn newBadCommandError(\"cannot specify --credentials-file and --gcloud-auth flags at the same time\")\n\t}\n\tif conf.CredentialsJSON != \"\" && conf.Token != \"\" {\n\t\treturn newBadCommandError(\"cannot specify --json-credentials and --token flags at the same time\")\n",
                    "rendered": {
                      "text": "\t\treturn newBadCommandError(\"cannot specify --token and --gcloud-auth flags at the same time\")\n\t}\n\tif conf.CredentialsFile != \"\" && conf.GcloudAuth {\n\t\treturn newBadCommandError(\"cannot specify --credentials-file and --gcloud-auth flags at the same time\")\n\t}\n\tif conf.CredentialsJSON != \"\" && conf.Token != \"\" {\n\t\treturn newBadCommandError(\"cannot specify --json-credentials and --token flags at the same time\")\n",
                      "markdown": "`\t\treturn newBadCommandError(\"cannot specify --token and --gcloud-auth flags at the same time\")\n\t}\n\tif conf.CredentialsFile != \"\" && conf.GcloudAuth {\n\t\treturn newBadCommandError(\"cannot specify --credentials-file and --gcloud-auth flags at the same time\")\n\t}\n\tif conf.CredentialsJSON != \"\" && conf.Token != \"\" {\n\t\treturn newBadCommandError(\"cannot specify --json-credentials and --token flags at the same time\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 760,
                  "startColumn": 75,
                  "endLine": 760,
                  "endColumn": 79,
                  "snippet": {
                    "text": "\t\treturn newBadCommandError(\"cannot specify --token and --credentials-file flags at the same time\")\n\t}\n\tif conf.Token != \"\" && conf.GcloudAuth {\n\t\treturn newBadCommandError(\"cannot specify --token and --gcloud-auth flags at the same time\")\n\t}\n\tif conf.CredentialsFile != \"\" && conf.GcloudAuth {\n\t\treturn newBadCommandError(\"cannot specify --credentials-file and --gcloud-auth flags at the same time\")\n",
                    "rendered": {
                      "text": "\t\treturn newBadCommandError(\"cannot specify --token and --credentials-file flags at the same time\")\n\t}\n\tif conf.Token != \"\" && conf.GcloudAuth {\n\t\treturn newBadCommandError(\"cannot specify --token and --gcloud-auth flags at the same time\")\n\t}\n\tif conf.CredentialsFile != \"\" && conf.GcloudAuth {\n\t\treturn newBadCommandError(\"cannot specify --credentials-file and --gcloud-auth flags at the same time\")\n",
                      "markdown": "`\t\treturn newBadCommandError(\"cannot specify --token and --credentials-file flags at the same time\")\n\t}\n\tif conf.Token != \"\" && conf.GcloudAuth {\n\t\treturn newBadCommandError(\"cannot specify --token and --gcloud-auth flags at the same time\")\n\t}\n\tif conf.CredentialsFile != \"\" && conf.GcloudAuth {\n\t\treturn newBadCommandError(\"cannot specify --credentials-file and --gcloud-auth flags at the same time\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 757,
                  "startColumn": 80,
                  "endLine": 757,
                  "endColumn": 84,
                  "snippet": {
                    "text": "\n\t// If more than one auth method is set, error.\n\tif conf.Token != \"\" && conf.CredentialsFile != \"\" {\n\t\treturn newBadCommandError(\"cannot specify --token and --credentials-file flags at the same time\")\n\t}\n\tif conf.Token != \"\" && conf.GcloudAuth {\n\t\treturn newBadCommandError(\"cannot specify --token and --gcloud-auth flags at the same time\")\n",
                    "rendered": {
                      "text": "\n\t// If more than one auth method is set, error.\n\tif conf.Token != \"\" && conf.CredentialsFile != \"\" {\n\t\treturn newBadCommandError(\"cannot specify --token and --credentials-file flags at the same time\")\n\t}\n\tif conf.Token != \"\" && conf.GcloudAuth {\n\t\treturn newBadCommandError(\"cannot specify --token and --gcloud-auth flags at the same time\")\n",
                      "markdown": "`\n\t// If more than one auth method is set, error.\n\tif conf.Token != \"\" && conf.CredentialsFile != \"\" {\n\t\treturn newBadCommandError(\"cannot specify --token and --credentials-file flags at the same time\")\n\t}\n\tif conf.Token != \"\" && conf.GcloudAuth {\n\t\treturn newBadCommandError(\"cannot specify --token and --gcloud-auth flags at the same time\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 752,
                  "startColumn": 72,
                  "endLine": 752,
                  "endColumn": 76,
                  "snippet": {
                    "text": "\n\t// If more than one IP type is set, error.\n\tif conf.PrivateIP && conf.PSC {\n\t\treturn newBadCommandError(\"cannot specify --private-ip and --psc flags at the same time\")\n\t}\n\n\t// If more than one auth method is set, error.\n",
                    "rendered": {
                      "text": "\n\t// If more than one IP type is set, error.\n\tif conf.PrivateIP && conf.PSC {\n\t\treturn newBadCommandError(\"cannot specify --private-ip and --psc flags at the same time\")\n\t}\n\n\t// If more than one auth method is set, error.\n",
                      "markdown": "`\n\t// If more than one IP type is set, error.\n\tif conf.PrivateIP && conf.PSC {\n\t\treturn newBadCommandError(\"cannot specify --private-ip and --psc flags at the same time\")\n\t}\n\n\t// If more than one auth method is set, error.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 508,
                  "startColumn": 20,
                  "endLine": 508,
                  "endColumn": 24,
                  "snippet": {
                    "text": "for the given project. See https://cloud.google.com/service-usage/docs/overview and\nhttps://cloud.google.com/storage/docs/requester-pays`)\n\tlocalFlags.StringVar(&c.conf.FUSEDir, \"fuse\", \"\",\n\t\t\"Mount a directory at the path using FUSE to access Cloud SQL instances.\")\n\tlocalFlags.StringVar(&c.conf.FUSETempDir, \"fuse-tmp-dir\",\n\t\tfilepath.Join(os.TempDir(), \"csql-tmp\"),\n\t\t\"Temp dir for Unix sockets created with FUSE\")\n",
                    "rendered": {
                      "text": "for the given project. See https://cloud.google.com/service-usage/docs/overview and\nhttps://cloud.google.com/storage/docs/requester-pays`)\n\tlocalFlags.StringVar(&c.conf.FUSEDir, \"fuse\", \"\",\n\t\t\"Mount a directory at the path using FUSE to access Cloud SQL instances.\")\n\tlocalFlags.StringVar(&c.conf.FUSETempDir, \"fuse-tmp-dir\",\n\t\tfilepath.Join(os.TempDir(), \"csql-tmp\"),\n\t\t\"Temp dir for Unix sockets created with FUSE\")\n",
                      "markdown": "`for the given project. See https://cloud.google.com/service-usage/docs/overview and\nhttps://cloud.google.com/storage/docs/requester-pays`)\n\tlocalFlags.StringVar(&c.conf.FUSEDir, \"fuse\", \"\",\n\t\t\"Mount a directory at the path using FUSE to access Cloud SQL instances.\")\n\tlocalFlags.StringVar(&c.conf.FUSETempDir, \"fuse-tmp-dir\",\n\t\tfilepath.Join(os.TempDir(), \"csql-tmp\"),\n\t\t\"Temp dir for Unix sockets created with FUSE\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 396,
                  "startColumn": 62,
                  "endLine": 396,
                  "endColumn": 70,
                  "snippet": {
                    "text": "\t\tUse:     \"cloud-sql-proxy INSTANCE_CONNECTION_NAME...\",\n\t\tVersion: versionString,\n\t\tShort:   \"cloud-sql-proxy authorizes and encrypts connections to Cloud SQL.\",\n\t\t//remove the inline annotation required by release-please to update version.\n\t\tLong: strings.ReplaceAll(longHelp, \"{x-release-please-version}\", \"\"),\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tUse:     \"cloud-sql-proxy INSTANCE_CONNECTION_NAME...\",\n\t\tVersion: versionString,\n\t\tShort:   \"cloud-sql-proxy authorizes and encrypts connections to Cloud SQL.\",\n\t\t//remove the inline annotation required by release-please to update version.\n\t\tLong: strings.ReplaceAll(longHelp, \"{x-release-please-version}\", \"\"),\n\t}\n\n",
                      "markdown": "`\t\tUse:     \"cloud-sql-proxy INSTANCE_CONNECTION_NAME...\",\n\t\tVersion: versionString,\n\t\tShort:   \"cloud-sql-proxy authorizes and encrypts connections to Cloud SQL.\",\n\t\t//remove the inline annotation required by release-please to update version.\n\t\tLong: strings.ReplaceAll(longHelp, \"{x-release-please-version}\", \"\"),\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 9,
                  "endLine": 292,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n  When --quitquitquit is set, the admin server adds an endpoint at\n  /quitquitquit. The admin server exits gracefully when it receives a GET or POST\n  request at /quitquitquit.\n\nDebug logging\n\n",
                    "rendered": {
                      "text": "\n  When --quitquitquit is set, the admin server adds an endpoint at\n  /quitquitquit. The admin server exits gracefully when it receives a GET or POST\n  request at /quitquitquit.\n\nDebug logging\n\n",
                      "markdown": "`\n  When --quitquitquit is set, the admin server adds an endpoint at\n  /quitquitquit. The admin server exits gracefully when it receives a GET or POST\n  request at /quitquitquit.\n\nDebug logging\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 63,
                  "endLine": 291,
                  "snippet": {
                    "text": "  See the documentation on pprof for details on how to use the\n  profiler at https://pkg.go.dev/net/http/pprof.\n\n  When --quitquitquit is set, the admin server adds an endpoint at\n  /quitquitquit. The admin server exits gracefully when it receives a GET or POST\n  request at /quitquitquit.\n\nDebug logging\n",
                    "rendered": {
                      "text": "  See the documentation on pprof for details on how to use the\n  profiler at https://pkg.go.dev/net/http/pprof.\n\n  When --quitquitquit is set, the admin server adds an endpoint at\n  /quitquitquit. The admin server exits gracefully when it receives a GET or POST\n  request at /quitquitquit.\n\nDebug logging\n",
                      "markdown": "`  See the documentation on pprof for details on how to use the\n  profiler at https://pkg.go.dev/net/http/pprof.\n\n  When --quitquitquit is set, the admin server adds an endpoint at\n  /quitquitquit. The admin server exits gracefully when it receives a GET or POST\n  request at /quitquitquit.\n\nDebug logging\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 10,
                  "endLine": 288,
                  "endColumn": 14,
                  "snippet": {
                    "text": "  /debug/pprof/.\n\n  See the documentation on pprof for details on how to use the\n  profiler at https://pkg.go.dev/net/http/pprof.\n\n  When --quitquitquit is set, the admin server adds an endpoint at\n  /quitquitquit. The admin server exits gracefully when it receives a GET or POST\n",
                    "rendered": {
                      "text": "  /debug/pprof/.\n\n  See the documentation on pprof for details on how to use the\n  profiler at https://pkg.go.dev/net/http/pprof.\n\n  When --quitquitquit is set, the admin server adds an endpoint at\n  /quitquitquit. The admin server exits gracefully when it receives a GET or POST\n",
                      "markdown": "`  /debug/pprof/.\n\n  See the documentation on pprof for details on how to use the\n  profiler at https://pkg.go.dev/net/http/pprof.\n\n  When --quitquitquit is set, the admin server adds an endpoint at\n  /quitquitquit. The admin server exits gracefully when it receives a GET or POST\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 71,
                  "endLine": 285,
                  "snippet": {
                    "text": "  --quitquitquit flag. This will start the server on localhost at port 9091.\n  To change the port, use the --admin-port flag.\n\n  When --debug is set, the admin server enables Go's profiler available at\n  /debug/pprof/.\n\n  See the documentation on pprof for details on how to use the\n  profiler at https://pkg.go.dev/net/http/pprof.\n",
                    "rendered": {
                      "text": "  --quitquitquit flag. This will start the server on localhost at port 9091.\n  To change the port, use the --admin-port flag.\n\n  When --debug is set, the admin server enables Go's profiler available at\n  /debug/pprof/.\n\n  See the documentation on pprof for details on how to use the\n  profiler at https://pkg.go.dev/net/http/pprof.\n",
                      "markdown": "`  --quitquitquit flag. This will start the server on localhost at port 9091.\n  To change the port, use the --admin-port flag.\n\n  When --debug is set, the admin server enables Go's profiler available at\n  /debug/pprof/.\n\n  See the documentation on pprof for details on how to use the\n  profiler at https://pkg.go.dev/net/http/pprof.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 281,
                  "startColumn": 62,
                  "endLine": 281,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\n  The Proxy includes support for an admin server on localhost. By default,\n  the admin server is not enabled. To enable the server, pass the --debug or\n  --quitquitquit flag. This will start the server on localhost at port 9091.\n  To change the port, use the --admin-port flag.\n\n  When --debug is set, the admin server enables Go's profiler available at\n",
                    "rendered": {
                      "text": "\n  The Proxy includes support for an admin server on localhost. By default,\n  the admin server is not enabled. To enable the server, pass the --debug or\n  --quitquitquit flag. This will start the server on localhost at port 9091.\n  To change the port, use the --admin-port flag.\n\n  When --debug is set, the admin server enables Go's profiler available at\n",
                      "markdown": "`\n  The Proxy includes support for an admin server on localhost. By default,\n  the admin server is not enabled. To enable the server, pass the --debug or\n  --quitquitquit flag. This will start the server on localhost at port 9091.\n  To change the port, use the --admin-port flag.\n\n  When --debug is set, the admin server enables Go's profiler available at\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 35,
                  "endLine": 183,
                  "endColumn": 39,
                  "snippet": {
                    "text": "  flag, and when the Proxy can connect to all registered instances. Otherwise,\n  returns a 503 status. Optionally supports a min-ready query param (e.g.,\n  /readiness?min-ready=3) where the Proxy will return a 200 status if the\n  Proxy can connect successfully to at least min-ready number of instances. If\n  min-ready exceeds the number of registered instances, returns a 400.\n\n  - /liveness: Always returns 200 status. If this endpoint is not responding,\n",
                    "rendered": {
                      "text": "  flag, and when the Proxy can connect to all registered instances. Otherwise,\n  returns a 503 status. Optionally supports a min-ready query param (e.g.,\n  /readiness?min-ready=3) where the Proxy will return a 200 status if the\n  Proxy can connect successfully to at least min-ready number of instances. If\n  min-ready exceeds the number of registered instances, returns a 400.\n\n  - /liveness: Always returns 200 status. If this endpoint is not responding,\n",
                      "markdown": "`  flag, and when the Proxy can connect to all registered instances. Otherwise,\n  returns a 503 status. Optionally supports a min-ready query param (e.g.,\n  /readiness?min-ready=3) where the Proxy will return a 200 status if the\n  Proxy can connect successfully to at least min-ready number of instances. If\n  min-ready exceeds the number of registered instances, returns a 400.\n\n  - /liveness: Always returns 200 status. If this endpoint is not responding,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 1,
                  "endLine": 100,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n  The Cloud SQL Auth Proxy is a utility for ensuring secure connections to\n  your Cloud SQL instances. It provides IAM authorization, allowing you to\n  control who can connect to your instance through IAM permissions, and TLS\n  1.3 encryption, without having to manage certificates.\n\n  NOTE: The Proxy does not configure the network. You MUST ensure the Proxy\n",
                    "rendered": {
                      "text": "\n  The Cloud SQL Auth Proxy is a utility for ensuring secure connections to\n  your Cloud SQL instances. It provides IAM authorization, allowing you to\n  control who can connect to your instance through IAM permissions, and TLS\n  1.3 encryption, without having to manage certificates.\n\n  NOTE: The Proxy does not configure the network. You MUST ensure the Proxy\n",
                      "markdown": "`\n  The Cloud SQL Auth Proxy is a utility for ensuring secure connections to\n  your Cloud SQL instances. It provides IAM authorization, allowing you to\n  control who can connect to your instance through IAM permissions, and TLS\n  1.3 encryption, without having to manage certificates.\n\n  NOTE: The Proxy does not configure the network. You MUST ensure the Proxy\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 7,
                  "endLine": 16,
                  "snippet": {
                    "text": "// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage cmd\n\nimport (\n\t\"context\"\n\t_ \"embed\"\n",
                    "rendered": {
                      "text": "// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage cmd\n\nimport (\n\t\"context\"\n\t_ \"embed\"\n",
                      "markdown": "`// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage cmd\n\nimport (\n\t\"context\"\n\t_ \"embed\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 1052,
                  "startColumn": 4,
                  "endLine": 1052,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tcase p = <-startCh:\n\t\tcmd.logger.Infof(\"The proxy has started successfully and is ready for new connections!\")\n\t\t// If running under systemd with Type=notify, it will send a message to the\n\t\t// service manager that it is ready to handle connections now.\n\t\tgo func() {\n\t\t\tif _, err := daemon.SdNotify(false, daemon.SdNotifyReady); err != nil {\n\t\t\t\tcmd.logger.Errorf(\"Failed to notify systemd of readiness: %v\", err)\n",
                    "rendered": {
                      "text": "\tcase p = <-startCh:\n\t\tcmd.logger.Infof(\"The proxy has started successfully and is ready for new connections!\")\n\t\t// If running under systemd with Type=notify, it will send a message to the\n\t\t// service manager that it is ready to handle connections now.\n\t\tgo func() {\n\t\t\tif _, err := daemon.SdNotify(false, daemon.SdNotifyReady); err != nil {\n\t\t\t\tcmd.logger.Errorf(\"Failed to notify systemd of readiness: %v\", err)\n",
                      "markdown": "`\tcase p = <-startCh:\n\t\tcmd.logger.Infof(\"The proxy has started successfully and is ready for new connections!\")\n\t\t// If running under systemd with Type=notify, it will send a message to the\n\t\t// service manager that it is ready to handle connections now.\n\t\tgo func() {\n\t\t\tif _, err := daemon.SdNotify(false, daemon.SdNotifyReady); err != nil {\n\t\t\t\tcmd.logger.Errorf(\"Failed to notify systemd of readiness: %v\", err)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 1042,
                  "startColumn": 4,
                  "endLine": 1042,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tcase err := <-shutdownCh:\n\t\tcmd.logger.Errorf(\"The proxy has encountered a terminal error: %v\", err)\n\t\t// If running under systemd with Type=notify, it will send a message to the\n\t\t// service manager that a failure occurred, and it is terminating.\n\t\tgo func() {\n\t\t\tif _, err := daemon.SdNotify(false, daemon.SdNotifyStopping); err != nil {\n\t\t\t\tcmd.logger.Errorf(\"Failed to notify systemd of termination: %v\", err)\n",
                    "rendered": {
                      "text": "\tcase err := <-shutdownCh:\n\t\tcmd.logger.Errorf(\"The proxy has encountered a terminal error: %v\", err)\n\t\t// If running under systemd with Type=notify, it will send a message to the\n\t\t// service manager that a failure occurred, and it is terminating.\n\t\tgo func() {\n\t\t\tif _, err := daemon.SdNotify(false, daemon.SdNotifyStopping); err != nil {\n\t\t\t\tcmd.logger.Errorf(\"Failed to notify systemd of termination: %v\", err)\n",
                      "markdown": "`\tcase err := <-shutdownCh:\n\t\tcmd.logger.Errorf(\"The proxy has encountered a terminal error: %v\", err)\n\t\t// If running under systemd with Type=notify, it will send a message to the\n\t\t// service manager that a failure occurred, and it is terminating.\n\t\tgo func() {\n\t\t\tif _, err := daemon.SdNotify(false, daemon.SdNotifyStopping); err != nil {\n\t\t\t\tcmd.logger.Errorf(\"Failed to notify systemd of termination: %v\", err)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 999,
                  "startColumn": 3,
                  "endLine": 999,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t}\n\n\tshutdownCh := make(chan error)\n\t// watch for sigterm / sigint signals\n\tsignals := make(chan os.Signal, 1)\n\tsignal.Notify(signals, syscall.SIGTERM, syscall.SIGINT)\n\tgo func() {\n",
                    "rendered": {
                      "text": "\t}\n\n\tshutdownCh := make(chan error)\n\t// watch for sigterm / sigint signals\n\tsignals := make(chan os.Signal, 1)\n\tsignal.Notify(signals, syscall.SIGTERM, syscall.SIGINT)\n\tgo func() {\n",
                      "markdown": "`\t}\n\n\tshutdownCh := make(chan error)\n\t// watch for sigterm / sigint signals\n\tsignals := make(chan os.Signal, 1)\n\tsignal.Notify(signals, syscall.SIGTERM, syscall.SIGINT)\n\tgo func() {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 867,
                  "startColumn": 53,
                  "endLine": 867,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\t\t\t\t}\n\t\t\t\tif ip := net.ParseIP(a[0]); ip == nil {\n\t\t\t\t\treturn newBadCommandError(\n\t\t\t\t\t\tfmt.Sprintf(\"address query param is not a valid IP address: %q\",\n\t\t\t\t\t\t\ta[0],\n\t\t\t\t\t\t))\n\t\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\t\t}\n\t\t\t\tif ip := net.ParseIP(a[0]); ip == nil {\n\t\t\t\t\treturn newBadCommandError(\n\t\t\t\t\t\tfmt.Sprintf(\"address query param is not a valid IP address: %q\",\n\t\t\t\t\t\t\ta[0],\n\t\t\t\t\t\t))\n\t\t\t\t}\n",
                      "markdown": "`\t\t\t\t}\n\t\t\t\tif ip := net.ParseIP(a[0]); ip == nil {\n\t\t\t\t\treturn newBadCommandError(\n\t\t\t\t\t\tfmt.Sprintf(\"address query param is not a valid IP address: %q\",\n\t\t\t\t\t\t\ta[0],\n\t\t\t\t\t\t))\n\t\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 865,
                  "startColumn": 31,
                  "endLine": 865,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\t\t\t\tif len(a) != 1 {\n\t\t\t\t\treturn newBadCommandError(fmt.Sprintf(\"address query param should be only one value: %q\", a))\n\t\t\t\t}\n\t\t\t\tif ip := net.ParseIP(a[0]); ip == nil {\n\t\t\t\t\treturn newBadCommandError(\n\t\t\t\t\t\tfmt.Sprintf(\"address query param is not a valid IP address: %q\",\n\t\t\t\t\t\t\ta[0],\n",
                    "rendered": {
                      "text": "\t\t\t\tif len(a) != 1 {\n\t\t\t\t\treturn newBadCommandError(fmt.Sprintf(\"address query param should be only one value: %q\", a))\n\t\t\t\t}\n\t\t\t\tif ip := net.ParseIP(a[0]); ip == nil {\n\t\t\t\t\treturn newBadCommandError(\n\t\t\t\t\t\tfmt.Sprintf(\"address query param is not a valid IP address: %q\",\n\t\t\t\t\t\t\ta[0],\n",
                      "markdown": "`\t\t\t\tif len(a) != 1 {\n\t\t\t\t\treturn newBadCommandError(fmt.Sprintf(\"address query param should be only one value: %q\", a))\n\t\t\t\t}\n\t\t\t\tif ip := net.ParseIP(a[0]); ip == nil {\n\t\t\t\t\treturn newBadCommandError(\n\t\t\t\t\t\tfmt.Sprintf(\"address query param is not a valid IP address: %q\",\n\t\t\t\t\t\t\ta[0],\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 865,
                  "startColumn": 6,
                  "endLine": 865,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t\t\t\tif len(a) != 1 {\n\t\t\t\t\treturn newBadCommandError(fmt.Sprintf(\"address query param should be only one value: %q\", a))\n\t\t\t\t}\n\t\t\t\tif ip := net.ParseIP(a[0]); ip == nil {\n\t\t\t\t\treturn newBadCommandError(\n\t\t\t\t\t\tfmt.Sprintf(\"address query param is not a valid IP address: %q\",\n\t\t\t\t\t\t\ta[0],\n",
                    "rendered": {
                      "text": "\t\t\t\tif len(a) != 1 {\n\t\t\t\t\treturn newBadCommandError(fmt.Sprintf(\"address query param should be only one value: %q\", a))\n\t\t\t\t}\n\t\t\t\tif ip := net.ParseIP(a[0]); ip == nil {\n\t\t\t\t\treturn newBadCommandError(\n\t\t\t\t\t\tfmt.Sprintf(\"address query param is not a valid IP address: %q\",\n\t\t\t\t\t\t\ta[0],\n",
                      "markdown": "`\t\t\t\tif len(a) != 1 {\n\t\t\t\t\treturn newBadCommandError(fmt.Sprintf(\"address query param should be only one value: %q\", a))\n\t\t\t\t}\n\t\t\t\tif ip := net.ParseIP(a[0]); ip == nil {\n\t\t\t\t\treturn newBadCommandError(\n\t\t\t\t\t\tfmt.Sprintf(\"address query param is not a valid IP address: %q\",\n\t\t\t\t\t\t\ta[0],\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 750,
                  "startColumn": 20,
                  "endLine": 750,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t\treturn newBadCommandError(\"cannot specify --private-ip and --auto-ip together\")\n\t}\n\n\t// If more than one IP type is set, error.\n\tif conf.PrivateIP && conf.PSC {\n\t\treturn newBadCommandError(\"cannot specify --private-ip and --psc flags at the same time\")\n\t}\n",
                    "rendered": {
                      "text": "\t\treturn newBadCommandError(\"cannot specify --private-ip and --auto-ip together\")\n\t}\n\n\t// If more than one IP type is set, error.\n\tif conf.PrivateIP && conf.PSC {\n\t\treturn newBadCommandError(\"cannot specify --private-ip and --psc flags at the same time\")\n\t}\n",
                      "markdown": "`\t\treturn newBadCommandError(\"cannot specify --private-ip and --auto-ip together\")\n\t}\n\n\t// If more than one IP type is set, error.\n\tif conf.PrivateIP && conf.PSC {\n\t\treturn newBadCommandError(\"cannot specify --private-ip and --psc flags at the same time\")\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 744,
                  "startColumn": 52,
                  "endLine": 744,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\t\treturn newBadCommandError(\"cannot specify --unix-socket and --port together\")\n\t}\n\tif ip := net.ParseIP(conf.Addr); ip == nil {\n\t\treturn newBadCommandError(fmt.Sprintf(\"not a valid IP address: %q\", conf.Addr))\n\t}\n\tif userHasSetLocal(cmd, \"private-ip\") && userHasSetLocal(cmd, \"auto-ip\") {\n\t\treturn newBadCommandError(\"cannot specify --private-ip and --auto-ip together\")\n",
                    "rendered": {
                      "text": "\t\treturn newBadCommandError(\"cannot specify --unix-socket and --port together\")\n\t}\n\tif ip := net.ParseIP(conf.Addr); ip == nil {\n\t\treturn newBadCommandError(fmt.Sprintf(\"not a valid IP address: %q\", conf.Addr))\n\t}\n\tif userHasSetLocal(cmd, \"private-ip\") && userHasSetLocal(cmd, \"auto-ip\") {\n\t\treturn newBadCommandError(\"cannot specify --private-ip and --auto-ip together\")\n",
                      "markdown": "`\t\treturn newBadCommandError(\"cannot specify --unix-socket and --port together\")\n\t}\n\tif ip := net.ParseIP(conf.Addr); ip == nil {\n\t\treturn newBadCommandError(fmt.Sprintf(\"not a valid IP address: %q\", conf.Addr))\n\t}\n\tif userHasSetLocal(cmd, \"private-ip\") && userHasSetLocal(cmd, \"auto-ip\") {\n\t\treturn newBadCommandError(\"cannot specify --private-ip and --auto-ip together\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 743,
                  "startColumn": 33,
                  "endLine": 743,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif userHasSetLocal(cmd, \"port\") && userHasSetLocal(cmd, \"unix-socket\") {\n\t\treturn newBadCommandError(\"cannot specify --unix-socket and --port together\")\n\t}\n\tif ip := net.ParseIP(conf.Addr); ip == nil {\n\t\treturn newBadCommandError(fmt.Sprintf(\"not a valid IP address: %q\", conf.Addr))\n\t}\n\tif userHasSetLocal(cmd, \"private-ip\") && userHasSetLocal(cmd, \"auto-ip\") {\n",
                    "rendered": {
                      "text": "\tif userHasSetLocal(cmd, \"port\") && userHasSetLocal(cmd, \"unix-socket\") {\n\t\treturn newBadCommandError(\"cannot specify --unix-socket and --port together\")\n\t}\n\tif ip := net.ParseIP(conf.Addr); ip == nil {\n\t\treturn newBadCommandError(fmt.Sprintf(\"not a valid IP address: %q\", conf.Addr))\n\t}\n\tif userHasSetLocal(cmd, \"private-ip\") && userHasSetLocal(cmd, \"auto-ip\") {\n",
                      "markdown": "`\tif userHasSetLocal(cmd, \"port\") && userHasSetLocal(cmd, \"unix-socket\") {\n\t\treturn newBadCommandError(\"cannot specify --unix-socket and --port together\")\n\t}\n\tif ip := net.ParseIP(conf.Addr); ip == nil {\n\t\treturn newBadCommandError(fmt.Sprintf(\"not a valid IP address: %q\", conf.Addr))\n\t}\n\tif userHasSetLocal(cmd, \"private-ip\") && userHasSetLocal(cmd, \"auto-ip\") {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 743,
                  "startColumn": 3,
                  "endLine": 743,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\tif userHasSetLocal(cmd, \"port\") && userHasSetLocal(cmd, \"unix-socket\") {\n\t\treturn newBadCommandError(\"cannot specify --unix-socket and --port together\")\n\t}\n\tif ip := net.ParseIP(conf.Addr); ip == nil {\n\t\treturn newBadCommandError(fmt.Sprintf(\"not a valid IP address: %q\", conf.Addr))\n\t}\n\tif userHasSetLocal(cmd, \"private-ip\") && userHasSetLocal(cmd, \"auto-ip\") {\n",
                    "rendered": {
                      "text": "\tif userHasSetLocal(cmd, \"port\") && userHasSetLocal(cmd, \"unix-socket\") {\n\t\treturn newBadCommandError(\"cannot specify --unix-socket and --port together\")\n\t}\n\tif ip := net.ParseIP(conf.Addr); ip == nil {\n\t\treturn newBadCommandError(fmt.Sprintf(\"not a valid IP address: %q\", conf.Addr))\n\t}\n\tif userHasSetLocal(cmd, \"private-ip\") && userHasSetLocal(cmd, \"auto-ip\") {\n",
                      "markdown": "`\tif userHasSetLocal(cmd, \"port\") && userHasSetLocal(cmd, \"unix-socket\") {\n\t\treturn newBadCommandError(\"cannot specify --unix-socket and --port together\")\n\t}\n\tif ip := net.ParseIP(conf.Addr); ip == nil {\n\t\treturn newBadCommandError(fmt.Sprintf(\"not a valid IP address: %q\", conf.Addr))\n\t}\n\tif userHasSetLocal(cmd, \"private-ip\") && userHasSetLocal(cmd, \"auto-ip\") {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 541,
                  "startColumn": 29,
                  "endLine": 541,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\tlocalFlags.BoolVarP(&c.conf.IAMAuthN, \"auto-iam-authn\", \"i\", false,\n\t\t\"(*) Enables Automatic IAM Authentication for all instances\")\n\tlocalFlags.BoolVar(&c.conf.PrivateIP, \"private-ip\", false,\n\t\t\"(*) Connect to the private ip address for all instances\")\n\tlocalFlags.BoolVar(&c.conf.PSC, \"psc\", false,\n\t\t\"(*) Connect to the PSC endpoint for all instances\")\n\n",
                    "rendered": {
                      "text": "\tlocalFlags.BoolVarP(&c.conf.IAMAuthN, \"auto-iam-authn\", \"i\", false,\n\t\t\"(*) Enables Automatic IAM Authentication for all instances\")\n\tlocalFlags.BoolVar(&c.conf.PrivateIP, \"private-ip\", false,\n\t\t\"(*) Connect to the private ip address for all instances\")\n\tlocalFlags.BoolVar(&c.conf.PSC, \"psc\", false,\n\t\t\"(*) Connect to the PSC endpoint for all instances\")\n\n",
                      "markdown": "`\tlocalFlags.BoolVarP(&c.conf.IAMAuthN, \"auto-iam-authn\", \"i\", false,\n\t\t\"(*) Enables Automatic IAM Authentication for all instances\")\n\tlocalFlags.BoolVar(&c.conf.PrivateIP, \"private-ip\", false,\n\t\t\"(*) Connect to the private ip address for all instances\")\n\tlocalFlags.BoolVar(&c.conf.PSC, \"psc\", false,\n\t\t\"(*) Connect to the PSC endpoint for all instances\")\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 519,
                  "startColumn": 24,
                  "endLine": 519,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\tlocalFlags.BoolVar(&c.conf.AutoIP, \"auto-ip\", false,\n\t\t`Supports legacy behavior of v1 and will try to connect to first IP\naddress returned by the SQL Admin API. In most cases, this flag should not be used.\nPrefer default of public IP or use --private-ip instead.`)\n\tlocalFlags.BoolVar(&c.conf.LazyRefresh, \"lazy-refresh\", false,\n\t\t`Configure a lazy refresh where connection info is retrieved only if\nthe cached copy has expired. Use this setting in environments where the\n",
                    "rendered": {
                      "text": "\tlocalFlags.BoolVar(&c.conf.AutoIP, \"auto-ip\", false,\n\t\t`Supports legacy behavior of v1 and will try to connect to first IP\naddress returned by the SQL Admin API. In most cases, this flag should not be used.\nPrefer default of public IP or use --private-ip instead.`)\n\tlocalFlags.BoolVar(&c.conf.LazyRefresh, \"lazy-refresh\", false,\n\t\t`Configure a lazy refresh where connection info is retrieved only if\nthe cached copy has expired. Use this setting in environments where the\n",
                      "markdown": "`\tlocalFlags.BoolVar(&c.conf.AutoIP, \"auto-ip\", false,\n\t\t`Supports legacy behavior of v1 and will try to connect to first IP\naddress returned by the SQL Admin API. In most cases, this flag should not be used.\nPrefer default of public IP or use --private-ip instead.`)\n\tlocalFlags.BoolVar(&c.conf.LazyRefresh, \"lazy-refresh\", false,\n\t\t`Configure a lazy refresh where connection info is retrieved only if\nthe cached copy has expired. Use this setting in environments where the\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 517,
                  "startColumn": 66,
                  "endLine": 518,
                  "snippet": {
                    "text": "is the target account.`)\n\tlocalFlags.BoolVar(&c.conf.Quiet, \"quiet\", false, \"Log error messages only\")\n\tlocalFlags.BoolVar(&c.conf.AutoIP, \"auto-ip\", false,\n\t\t`Supports legacy behavior of v1 and will try to connect to first IP\naddress returned by the SQL Admin API. In most cases, this flag should not be used.\nPrefer default of public IP or use --private-ip instead.`)\n\tlocalFlags.BoolVar(&c.conf.LazyRefresh, \"lazy-refresh\", false,\n\t\t`Configure a lazy refresh where connection info is retrieved only if\n",
                    "rendered": {
                      "text": "is the target account.`)\n\tlocalFlags.BoolVar(&c.conf.Quiet, \"quiet\", false, \"Log error messages only\")\n\tlocalFlags.BoolVar(&c.conf.AutoIP, \"auto-ip\", false,\n\t\t`Supports legacy behavior of v1 and will try to connect to first IP\naddress returned by the SQL Admin API. In most cases, this flag should not be used.\nPrefer default of public IP or use --private-ip instead.`)\n\tlocalFlags.BoolVar(&c.conf.LazyRefresh, \"lazy-refresh\", false,\n\t\t`Configure a lazy refresh where connection info is retrieved only if\n",
                      "markdown": "`is the target account.`)\n\tlocalFlags.BoolVar(&c.conf.Quiet, \"quiet\", false, \"Log error messages only\")\n\tlocalFlags.BoolVar(&c.conf.AutoIP, \"auto-ip\", false,\n\t\t`Supports legacy behavior of v1 and will try to connect to first IP\naddress returned by the SQL Admin API. In most cases, this flag should not be used.\nPrefer default of public IP or use --private-ip instead.`)\n\tlocalFlags.BoolVar(&c.conf.LazyRefresh, \"lazy-refresh\", false,\n\t\t`Configure a lazy refresh where connection info is retrieved only if\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 513,
                  "startColumn": 26,
                  "endLine": 513,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\t\tfilepath.Join(os.TempDir(), \"csql-tmp\"),\n\t\t\"Temp dir for Unix sockets created with FUSE\")\n\tlocalFlags.StringVar(&c.conf.ImpersonationChain, \"impersonate-service-account\", \"\",\n\t\t`Comma separated list of service accounts to impersonate. Last value\nis the target account.`)\n\tlocalFlags.BoolVar(&c.conf.Quiet, \"quiet\", false, \"Log error messages only\")\n\tlocalFlags.BoolVar(&c.conf.AutoIP, \"auto-ip\", false,\n",
                    "rendered": {
                      "text": "\t\tfilepath.Join(os.TempDir(), \"csql-tmp\"),\n\t\t\"Temp dir for Unix sockets created with FUSE\")\n\tlocalFlags.StringVar(&c.conf.ImpersonationChain, \"impersonate-service-account\", \"\",\n\t\t`Comma separated list of service accounts to impersonate. Last value\nis the target account.`)\n\tlocalFlags.BoolVar(&c.conf.Quiet, \"quiet\", false, \"Log error messages only\")\n\tlocalFlags.BoolVar(&c.conf.AutoIP, \"auto-ip\", false,\n",
                      "markdown": "`\t\tfilepath.Join(os.TempDir(), \"csql-tmp\"),\n\t\t\"Temp dir for Unix sockets created with FUSE\")\n\tlocalFlags.StringVar(&c.conf.ImpersonationChain, \"impersonate-service-account\", \"\",\n\t\t`Comma separated list of service accounts to impersonate. Last value\nis the target account.`)\n\tlocalFlags.BoolVar(&c.conf.Quiet, \"quiet\", false, \"Log error messages only\")\n\tlocalFlags.BoolVar(&c.conf.AutoIP, \"auto-ip\", false,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 453,
                  "startColumn": 6,
                  "endLine": 453,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tlocalFlags.StringVarP(&c.conf.CredentialsFile, \"credentials-file\", \"c\", \"\",\n\t\t\"Use service account key file as a source of IAM credentials.\")\n\tlocalFlags.StringVarP(&c.conf.CredentialsJSON, \"json-credentials\", \"j\", \"\",\n\t\t\"Use service account key JSON as a source of IAM credentials.\")\n\tlocalFlags.BoolVarP(&c.conf.GcloudAuth, \"gcloud-auth\", \"g\", false,\n\t\t`Use gclouds user credentials as a source of IAM credentials.\nNOTE: this flag is a legacy feature and generally should not be used.\n",
                    "rendered": {
                      "text": "\tlocalFlags.StringVarP(&c.conf.CredentialsFile, \"credentials-file\", \"c\", \"\",\n\t\t\"Use service account key file as a source of IAM credentials.\")\n\tlocalFlags.StringVarP(&c.conf.CredentialsJSON, \"json-credentials\", \"j\", \"\",\n\t\t\"Use service account key JSON as a source of IAM credentials.\")\n\tlocalFlags.BoolVarP(&c.conf.GcloudAuth, \"gcloud-auth\", \"g\", false,\n\t\t`Use gclouds user credentials as a source of IAM credentials.\nNOTE: this flag is a legacy feature and generally should not be used.\n",
                      "markdown": "`\tlocalFlags.StringVarP(&c.conf.CredentialsFile, \"credentials-file\", \"c\", \"\",\n\t\t\"Use service account key file as a source of IAM credentials.\")\n\tlocalFlags.StringVarP(&c.conf.CredentialsJSON, \"json-credentials\", \"j\", \"\",\n\t\t\"Use service account key JSON as a source of IAM credentials.\")\n\tlocalFlags.BoolVarP(&c.conf.GcloudAuth, \"gcloud-auth\", \"g\", false,\n\t\t`Use gclouds user credentials as a source of IAM credentials.\nNOTE: this flag is a legacy feature and generally should not be used.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 451,
                  "startColumn": 6,
                  "endLine": 451,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tlocalFlags.StringVar(&c.conf.LoginToken, \"login-token\", \"\",\n\t\t\"Use bearer token as a database password (used with token and auto-iam-authn only)\")\n\tlocalFlags.StringVarP(&c.conf.CredentialsFile, \"credentials-file\", \"c\", \"\",\n\t\t\"Use service account key file as a source of IAM credentials.\")\n\tlocalFlags.StringVarP(&c.conf.CredentialsJSON, \"json-credentials\", \"j\", \"\",\n\t\t\"Use service account key JSON as a source of IAM credentials.\")\n\tlocalFlags.BoolVarP(&c.conf.GcloudAuth, \"gcloud-auth\", \"g\", false,\n",
                    "rendered": {
                      "text": "\tlocalFlags.StringVar(&c.conf.LoginToken, \"login-token\", \"\",\n\t\t\"Use bearer token as a database password (used with token and auto-iam-authn only)\")\n\tlocalFlags.StringVarP(&c.conf.CredentialsFile, \"credentials-file\", \"c\", \"\",\n\t\t\"Use service account key file as a source of IAM credentials.\")\n\tlocalFlags.StringVarP(&c.conf.CredentialsJSON, \"json-credentials\", \"j\", \"\",\n\t\t\"Use service account key JSON as a source of IAM credentials.\")\n\tlocalFlags.BoolVarP(&c.conf.GcloudAuth, \"gcloud-auth\", \"g\", false,\n",
                      "markdown": "`\tlocalFlags.StringVar(&c.conf.LoginToken, \"login-token\", \"\",\n\t\t\"Use bearer token as a database password (used with token and auto-iam-authn only)\")\n\tlocalFlags.StringVarP(&c.conf.CredentialsFile, \"credentials-file\", \"c\", \"\",\n\t\t\"Use service account key file as a source of IAM credentials.\")\n\tlocalFlags.StringVarP(&c.conf.CredentialsJSON, \"json-credentials\", \"j\", \"\",\n\t\t\"Use service account key JSON as a source of IAM credentials.\")\n\tlocalFlags.BoolVarP(&c.conf.GcloudAuth, \"gcloud-auth\", \"g\", false,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 419,
                  "startColumn": 20,
                  "endLine": 419,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\twaitFlags.DurationP(\n\t\twaitMaxFlag, \"m\",\n\t\t30*time.Second,\n\t\t\"maximum amount of time to wait for startup\",\n\t)\n\trootCmd.AddCommand(waitCmd)\n\n",
                    "rendered": {
                      "text": "\twaitFlags.DurationP(\n\t\twaitMaxFlag, \"m\",\n\t\t30*time.Second,\n\t\t\"maximum amount of time to wait for startup\",\n\t)\n\trootCmd.AddCommand(waitCmd)\n\n",
                      "markdown": "`\twaitFlags.DurationP(\n\t\twaitMaxFlag, \"m\",\n\t\t30*time.Second,\n\t\t\"maximum amount of time to wait for startup\",\n\t)\n\trootCmd.AddCommand(waitCmd)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 51,
                  "endLine": 332,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\nConfiguration\n\n  By default, the Proxy will wait up to the maximum time for the startup\n  endpoint to respond. The wait command requires that the Proxy be started in\n  another process with the HTTP health check enabled. If an alternate health\n  check port or address is used, as in:\n",
                    "rendered": {
                      "text": "\nConfiguration\n\n  By default, the Proxy will wait up to the maximum time for the startup\n  endpoint to respond. The wait command requires that the Proxy be started in\n  another process with the HTTP health check enabled. If an alternate health\n  check port or address is used, as in:\n",
                      "markdown": "`\nConfiguration\n\n  By default, the Proxy will wait up to the maximum time for the startup\n  endpoint to respond. The wait command requires that the Proxy be started in\n  another process with the HTTP health check enabled. If an alternate health\n  check port or address is used, as in:\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 59,
                  "endLine": 321,
                  "endColumn": 65,
                  "snippet": {
                    "text": "  Sometimes it is necessary to wait for the Proxy to start.\n\n  To help ensure the Proxy is up and ready, the Proxy includes a wait\n  subcommand with an optional --max flag to set the maximum time to wait.\n  The wait command uses a separate Proxy's startup endpoint to determine\n  if the other Proxy process is ready.\n\n",
                    "rendered": {
                      "text": "  Sometimes it is necessary to wait for the Proxy to start.\n\n  To help ensure the Proxy is up and ready, the Proxy includes a wait\n  subcommand with an optional --max flag to set the maximum time to wait.\n  The wait command uses a separate Proxy's startup endpoint to determine\n  if the other Proxy process is ready.\n\n",
                      "markdown": "`  Sometimes it is necessary to wait for the Proxy to start.\n\n  To help ensure the Proxy is up and ready, the Proxy includes a wait\n  subcommand with an optional --max flag to set the maximum time to wait.\n  The wait command uses a separate Proxy's startup endpoint to determine\n  if the other Proxy process is ready.\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 66,
                  "endLine": 211,
                  "snippet": {
                    "text": "  value is a comma-separated list of service accounts. The first service\n  account in the list is the impersonation target. Each subsequent service\n  account is a delegate to the previous service account. When delegation is\n  used, each delegate must have the permissions named above on the service\n  account it is delegating to.\n\n  For example:\n\n",
                    "rendered": {
                      "text": "  value is a comma-separated list of service accounts. The first service\n  account in the list is the impersonation target. Each subsequent service\n  account is a delegate to the previous service account. When delegation is\n  used, each delegate must have the permissions named above on the service\n  account it is delegating to.\n\n  For example:\n\n",
                      "markdown": "`  value is a comma-separated list of service accounts. The first service\n  account in the list is the impersonation target. Each subsequent service\n  account is a delegate to the previous service account. When delegation is\n  used, each delegate must have the permissions named above on the service\n  account it is delegating to.\n\n  For example:\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 39,
                  "endLine": 209,
                  "endColumn": 48,
                  "snippet": {
                    "text": "  In addition, the flag supports an impersonation delegation chain where the\n  value is a comma-separated list of service accounts. The first service\n  account in the list is the impersonation target. Each subsequent service\n  account is a delegate to the previous service account. When delegation is\n  used, each delegate must have the permissions named above on the service\n  account it is delegating to.\n\n",
                    "rendered": {
                      "text": "  In addition, the flag supports an impersonation delegation chain where the\n  value is a comma-separated list of service accounts. The first service\n  account in the list is the impersonation target. Each subsequent service\n  account is a delegate to the previous service account. When delegation is\n  used, each delegate must have the permissions named above on the service\n  account it is delegating to.\n\n",
                      "markdown": "`  In addition, the flag supports an impersonation delegation chain where the\n  value is a comma-separated list of service accounts. The first service\n  account in the list is the impersonation target. Each subsequent service\n  account is a delegate to the previous service account. When delegation is\n  used, each delegate must have the permissions named above on the service\n  account it is delegating to.\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 66,
                  "endLine": 209,
                  "snippet": {
                    "text": "\n  In addition, the flag supports an impersonation delegation chain where the\n  value is a comma-separated list of service accounts. The first service\n  account in the list is the impersonation target. Each subsequent service\n  account is a delegate to the previous service account. When delegation is\n  used, each delegate must have the permissions named above on the service\n  account it is delegating to.\n\n",
                    "rendered": {
                      "text": "\n  In addition, the flag supports an impersonation delegation chain where the\n  value is a comma-separated list of service accounts. The first service\n  account in the list is the impersonation target. Each subsequent service\n  account is a delegate to the previous service account. When delegation is\n  used, each delegate must have the permissions named above on the service\n  account it is delegating to.\n\n",
                      "markdown": "`\n  In addition, the flag supports an impersonation delegation chain where the\n  value is a comma-separated list of service accounts. The first service\n  account in the list is the impersonation target. Each subsequent service\n  account is a delegate to the previous service account. When delegation is\n  used, each delegate must have the permissions named above on the service\n  account it is delegating to.\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 64,
                  "endLine": 208,
                  "snippet": {
                    "text": "          my-project:us-central1:my-db-server\n\n  In addition, the flag supports an impersonation delegation chain where the\n  value is a comma-separated list of service accounts. The first service\n  account in the list is the impersonation target. Each subsequent service\n  account is a delegate to the previous service account. When delegation is\n  used, each delegate must have the permissions named above on the service\n  account it is delegating to.\n",
                    "rendered": {
                      "text": "          my-project:us-central1:my-db-server\n\n  In addition, the flag supports an impersonation delegation chain where the\n  value is a comma-separated list of service accounts. The first service\n  account in the list is the impersonation target. Each subsequent service\n  account is a delegate to the previous service account. When delegation is\n  used, each delegate must have the permissions named above on the service\n  account it is delegating to.\n",
                      "markdown": "`          my-project:us-central1:my-db-server\n\n  In addition, the flag supports an impersonation delegation chain where the\n  value is a comma-separated list of service accounts. The first service\n  account in the list is the impersonation target. Each subsequent service\n  account is a delegate to the previous service account. When delegation is\n  used, each delegate must have the permissions named above on the service\n  account it is delegating to.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 36,
                  "endLine": 207,
                  "endColumn": 45,
                  "snippet": {
                    "text": "          my-project:us-central1:my-db-server\n\n  In addition, the flag supports an impersonation delegation chain where the\n  value is a comma-separated list of service accounts. The first service\n  account in the list is the impersonation target. Each subsequent service\n  account is a delegate to the previous service account. When delegation is\n  used, each delegate must have the permissions named above on the service\n",
                    "rendered": {
                      "text": "          my-project:us-central1:my-db-server\n\n  In addition, the flag supports an impersonation delegation chain where the\n  value is a comma-separated list of service accounts. The first service\n  account in the list is the impersonation target. Each subsequent service\n  account is a delegate to the previous service account. When delegation is\n  used, each delegate must have the permissions named above on the service\n",
                      "markdown": "`          my-project:us-central1:my-db-server\n\n  In addition, the flag supports an impersonation delegation chain where the\n  value is a comma-separated list of service accounts. The first service\n  account in the list is the impersonation target. Each subsequent service\n  account is a delegate to the previous service account. When delegation is\n  used, each delegate must have the permissions named above on the service\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 54,
                  "endLine": 196,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n  The Proxy supports service account impersonation with the\n  --impersonate-service-account flag and matches gclouds flag. When enabled,\n  all API requests are made impersonating the supplied service account. The\n  IAM principal must have the iam.serviceAccounts.getAccessToken permission or\n  the role roles/iam.serviceAccounts.serviceAccountTokenCreator.\n\n",
                    "rendered": {
                      "text": "\n  The Proxy supports service account impersonation with the\n  --impersonate-service-account flag and matches gclouds flag. When enabled,\n  all API requests are made impersonating the supplied service account. The\n  IAM principal must have the iam.serviceAccounts.getAccessToken permission or\n  the role roles/iam.serviceAccounts.serviceAccountTokenCreator.\n\n",
                      "markdown": "`\n  The Proxy supports service account impersonation with the\n  --impersonate-service-account flag and matches gclouds flag. When enabled,\n  all API requests are made impersonating the supplied service account. The\n  IAM principal must have the iam.serviceAccounts.getAccessToken permission or\n  the role roles/iam.serviceAccounts.serviceAccountTokenCreator.\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 20,
                  "endLine": 194,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\nService Account Impersonation\n\n  The Proxy supports service account impersonation with the\n  --impersonate-service-account flag and matches gclouds flag. When enabled,\n  all API requests are made impersonating the supplied service account. The\n  IAM principal must have the iam.serviceAccounts.getAccessToken permission or\n",
                    "rendered": {
                      "text": "\nService Account Impersonation\n\n  The Proxy supports service account impersonation with the\n  --impersonate-service-account flag and matches gclouds flag. When enabled,\n  all API requests are made impersonating the supplied service account. The\n  IAM principal must have the iam.serviceAccounts.getAccessToken permission or\n",
                      "markdown": "`\nService Account Impersonation\n\n  The Proxy supports service account impersonation with the\n  --impersonate-service-account flag and matches gclouds flag. When enabled,\n  all API requests are made impersonating the supplied service account. The\n  IAM principal must have the iam.serviceAccounts.getAccessToken permission or\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 191,
                  "endLine": 192,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n  To configure the address, use --http-address. To configure the port, use\n  --http-port.\n\nService Account Impersonation\n\n  The Proxy supports service account impersonation with the\n  --impersonate-service-account flag and matches gclouds flag. When enabled,\n",
                    "rendered": {
                      "text": "\n  To configure the address, use --http-address. To configure the port, use\n  --http-port.\n\nService Account Impersonation\n\n  The Proxy supports service account impersonation with the\n  --impersonate-service-account flag and matches gclouds flag. When enabled,\n",
                      "markdown": "`\n  To configure the address, use --http-address. To configure the port, use\n  --http-port.\n\nService Account Impersonation\n\n  The Proxy supports service account impersonation with the\n  --impersonate-service-account flag and matches gclouds flag. When enabled,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 71,
                  "endLine": 132,
                  "snippet": {
                    "text": "      ./cloud-sql-proxy my-project:us-central1:my-db-server\n\n  By default, the Proxy will determine the database engine and start a\n  listener on localhost using the default database engine's port, i.e., MySQL\n  is 3306, Postgres is 5432, SQL Server is 1433. If multiple instances are\n  specified which all use the same database engine, the first will be started\n  on the default database port and subsequent instances will be incremented\n  from there (e.g., 3306, 3307, 3308, etc). To disable this behavior (and\n",
                    "rendered": {
                      "text": "      ./cloud-sql-proxy my-project:us-central1:my-db-server\n\n  By default, the Proxy will determine the database engine and start a\n  listener on localhost using the default database engine's port, i.e., MySQL\n  is 3306, Postgres is 5432, SQL Server is 1433. If multiple instances are\n  specified which all use the same database engine, the first will be started\n  on the default database port and subsequent instances will be incremented\n  from there (e.g., 3306, 3307, 3308, etc). To disable this behavior (and\n",
                      "markdown": "`      ./cloud-sql-proxy my-project:us-central1:my-db-server\n\n  By default, the Proxy will determine the database engine and start a\n  listener on localhost using the default database engine's port, i.e., MySQL\n  is 3306, Postgres is 5432, SQL Server is 1433. If multiple instances are\n  specified which all use the same database engine, the first will be started\n  on the default database port and subsequent instances will be incremented\n  from there (e.g., 3306, 3307, 3308, etc). To disable this behavior (and\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 24,
                  "endLine": 105,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n  NOTE: The Proxy does not configure the network. You MUST ensure the Proxy\n  can reach your Cloud SQL instance, either by deploying it in a VPC that has\n  access to your Private IP instance, or by configuring Public IP.\n\n  For every provided instance connection name, the Proxy creates:\n\n",
                    "rendered": {
                      "text": "\n  NOTE: The Proxy does not configure the network. You MUST ensure the Proxy\n  can reach your Cloud SQL instance, either by deploying it in a VPC that has\n  access to your Private IP instance, or by configuring Public IP.\n\n  For every provided instance connection name, the Proxy creates:\n\n",
                      "markdown": "`\n  NOTE: The Proxy does not configure the network. You MUST ensure the Proxy\n  can reach your Cloud SQL instance, either by deploying it in a VPC that has\n  access to your Private IP instance, or by configuring Public IP.\n\n  For every provided instance connection name, the Proxy creates:\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/internal/proxy/proxy_other.go"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 25,
                  "endLine": 176,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\t\tMountOptions: fuse.MountOptions{AllowOther: true},\n\t})\n\tif err != nil {\n\t\treturn fmt.Errorf(\"FUSE mount failed: %q: %v\", c.fuseDir, err)\n\t}\n\tc.fuseServerMu.Lock()\n\tc.fuseServer = srv\n",
                    "rendered": {
                      "text": "\t\tMountOptions: fuse.MountOptions{AllowOther: true},\n\t})\n\tif err != nil {\n\t\treturn fmt.Errorf(\"FUSE mount failed: %q: %v\", c.fuseDir, err)\n\t}\n\tc.fuseServerMu.Lock()\n\tc.fuseServer = srv\n",
                      "markdown": "`\t\tMountOptions: fuse.MountOptions{AllowOther: true},\n\t})\n\tif err != nil {\n\t\treturn fmt.Errorf(\"FUSE mount failed: %q: %v\", c.fuseDir, err)\n\t}\n\tc.fuseServerMu.Lock()\n\tc.fuseServer = srv\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/internal/proxy/proxy.go"
                },
                "region": {
                  "startLine": 387,
                  "startColumn": 48,
                  "endLine": 387,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\t\topt = cloudsqlconn.WithTokenSource(ts)\n\t\t}\n\tcase c.CredentialsFile != \"\":\n\t\tl.Infof(\"Authorizing with the credentials file at %q\", c.CredentialsFile)\n\t\topt = cloudsqlconn.WithCredentialsFile(c.CredentialsFile)\n\tcase c.CredentialsJSON != \"\":\n\t\tl.Infof(\"Authorizing with JSON credentials environment variable\")\n",
                    "rendered": {
                      "text": "\t\t\topt = cloudsqlconn.WithTokenSource(ts)\n\t\t}\n\tcase c.CredentialsFile != \"\":\n\t\tl.Infof(\"Authorizing with the credentials file at %q\", c.CredentialsFile)\n\t\topt = cloudsqlconn.WithCredentialsFile(c.CredentialsFile)\n\tcase c.CredentialsJSON != \"\":\n\t\tl.Infof(\"Authorizing with JSON credentials environment variable\")\n",
                      "markdown": "`\t\t\topt = cloudsqlconn.WithTokenSource(ts)\n\t\t}\n\tcase c.CredentialsFile != \"\":\n\t\tl.Infof(\"Authorizing with the credentials file at %q\", c.CredentialsFile)\n\t\topt = cloudsqlconn.WithCredentialsFile(c.CredentialsFile)\n\tcase c.CredentialsJSON != \"\":\n\t\tl.Infof(\"Authorizing with JSON credentials environment variable\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/internal/proxy/proxy.go"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 67,
                  "endLine": 328,
                  "endColumn": 71,
                  "snippet": {
                    "text": "\t\t\t\toauth2.StaticTokenSource(&oauth2.Token{AccessToken: c.Token}),\n\t\t\t))\n\t\tcase c.CredentialsFile != \"\":\n\t\t\tl.Infof(\"Impersonating service account with the credentials file at %q\", c.CredentialsFile)\n\t\t\tiopts = append(iopts, option.WithCredentialsFile(c.CredentialsFile))\n\t\tcase c.CredentialsJSON != \"\":\n\t\t\tl.Infof(\"Impersonating service account with JSON credentials environment variable\")\n",
                    "rendered": {
                      "text": "\t\t\t\toauth2.StaticTokenSource(&oauth2.Token{AccessToken: c.Token}),\n\t\t\t))\n\t\tcase c.CredentialsFile != \"\":\n\t\t\tl.Infof(\"Impersonating service account with the credentials file at %q\", c.CredentialsFile)\n\t\t\tiopts = append(iopts, option.WithCredentialsFile(c.CredentialsFile))\n\t\tcase c.CredentialsJSON != \"\":\n\t\t\tl.Infof(\"Impersonating service account with JSON credentials environment variable\")\n",
                      "markdown": "`\t\t\t\toauth2.StaticTokenSource(&oauth2.Token{AccessToken: c.Token}),\n\t\t\t))\n\t\tcase c.CredentialsFile != \"\":\n\t\t\tl.Infof(\"Impersonating service account with the credentials file at %q\", c.CredentialsFile)\n\t\t\tiopts = append(iopts, option.WithCredentialsFile(c.CredentialsFile))\n\t\tcase c.CredentialsJSON != \"\":\n\t\t\tl.Infof(\"Impersonating service account with JSON credentials environment variable\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/internal/proxy/proxy.go"
                },
                "region": {
                  "startLine": 844,
                  "startColumn": 34,
                  "endLine": 844,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n\t\taddress, err = newUnixSocketMount(inst, conf.UnixSocket, strings.HasPrefix(version, \"POSTGRES\"))\n\t\tif err != nil {\n\t\t\tc.logger.Errorf(\"[%v] could not mount unix socket %q: %v\", inst.Name, conf.UnixSocket, err)\n\t\t\treturn nil, err\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\n\t\taddress, err = newUnixSocketMount(inst, conf.UnixSocket, strings.HasPrefix(version, \"POSTGRES\"))\n\t\tif err != nil {\n\t\t\tc.logger.Errorf(\"[%v] could not mount unix socket %q: %v\", inst.Name, conf.UnixSocket, err)\n\t\t\treturn nil, err\n\t\t}\n\t}\n",
                      "markdown": "`\n\t\taddress, err = newUnixSocketMount(inst, conf.UnixSocket, strings.HasPrefix(version, \"POSTGRES\"))\n\t\tif err != nil {\n\t\t\tc.logger.Errorf(\"[%v] could not mount unix socket %q: %v\", inst.Name, conf.UnixSocket, err)\n\t\t\treturn nil, err\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/internal/proxy/proxy.go"
                },
                "region": {
                  "startLine": 693,
                  "endLine": 693,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n\t// Start a timer for clean shutdown (where all connections are closed).\n\t// While the timer runs, additional connections will be accepted.\n\ttimeout := time.After(c.conf.WaitOnClose)\n\tt := time.NewTicker(100 * time.Millisecond)\n\tdefer t.Stop()\n\tfor {\n",
                    "rendered": {
                      "text": "\n\t// Start a timer for clean shutdown (where all connections are closed).\n\t// While the timer runs, additional connections will be accepted.\n\ttimeout := time.After(c.conf.WaitOnClose)\n\tt := time.NewTicker(100 * time.Millisecond)\n\tdefer t.Stop()\n\tfor {\n",
                      "markdown": "`\n\t// Start a timer for clean shutdown (where all connections are closed).\n\t// While the timer runs, additional connections will be accepted.\n\ttimeout := time.After(c.conf.WaitOnClose)\n\tt := time.NewTicker(100 * time.Millisecond)\n\tdefer t.Stop()\n\tfor {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/internal/proxy/proxy.go"
                },
                "region": {
                  "startLine": 551,
                  "startColumn": 41,
                  "endLine": 551,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t\t\t\tl.Errorf(\"failed to close mount: %v\", mErr)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"[%v] Unable to mount socket: %v\", inst.Name, err)\n\t\t}\n\n\t\tl.Infof(\"[%s] Listening on %s\", inst.Name, m.Addr())\n",
                    "rendered": {
                      "text": "\t\t\t\t\tl.Errorf(\"failed to close mount: %v\", mErr)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"[%v] Unable to mount socket: %v\", inst.Name, err)\n\t\t}\n\n\t\tl.Infof(\"[%s] Listening on %s\", inst.Name, m.Addr())\n",
                      "markdown": "`\t\t\t\t\tl.Errorf(\"failed to close mount: %v\", mErr)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"[%v] Unable to mount socket: %v\", inst.Name, err)\n\t\t}\n\n\t\tl.Infof(\"[%s] Listening on %s\", inst.Name, m.Addr())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/internal/proxy/proxy.go"
                },
                "region": {
                  "startLine": 449,
                  "endLine": 449,
                  "endColumn": 7,
                  "snippet": {
                    "text": "type portConfig struct {\n\tglobal    int\n\tpostgres  int\n\tmysql     int\n\tsqlserver int\n}\n\n",
                    "rendered": {
                      "text": "type portConfig struct {\n\tglobal    int\n\tpostgres  int\n\tmysql     int\n\tsqlserver int\n}\n\n",
                      "markdown": "`type portConfig struct {\n\tglobal    int\n\tpostgres  int\n\tmysql     int\n\tsqlserver int\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/internal/proxy/proxy.go"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 25,
                  "endLine": 341,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\t\t\t}\n\t\t\tiopts = append(iopts, option.WithTokenSource(ts))\n\t\tdefault:\n\t\t\tl.Infof(\"Impersonating service account with Application Default Credentials\")\n\t\t}\n\t\ttarget, delegates := parseImpersonationChain(c.ImpersonationChain)\n\t\tts, err := impersonate.CredentialsTokenSource(\n",
                    "rendered": {
                      "text": "\t\t\t}\n\t\t\tiopts = append(iopts, option.WithTokenSource(ts))\n\t\tdefault:\n\t\t\tl.Infof(\"Impersonating service account with Application Default Credentials\")\n\t\t}\n\t\ttarget, delegates := parseImpersonationChain(c.ImpersonationChain)\n\t\tts, err := impersonate.CredentialsTokenSource(\n",
                      "markdown": "`\t\t\t}\n\t\t\tiopts = append(iopts, option.WithTokenSource(ts))\n\t\tdefault:\n\t\t\tl.Infof(\"Impersonating service account with Application Default Credentials\")\n\t\t}\n\t\ttarget, delegates := parseImpersonationChain(c.ImpersonationChain)\n\t\tts, err := impersonate.CredentialsTokenSource(\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/internal/proxy/proxy.go"
                },
                "region": {
                  "startLine": 334,
                  "startColumn": 25,
                  "endLine": 334,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\t\t\tl.Infof(\"Impersonating service account with JSON credentials environment variable\")\n\t\t\tiopts = append(iopts, option.WithCredentialsJSON([]byte(c.CredentialsJSON)))\n\t\tcase c.GcloudAuth:\n\t\t\tl.Infof(\"Impersonating service account with gcloud user credentials\")\n\t\t\tts, err := gcloud.TokenSource()\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n",
                    "rendered": {
                      "text": "\t\t\tl.Infof(\"Impersonating service account with JSON credentials environment variable\")\n\t\t\tiopts = append(iopts, option.WithCredentialsJSON([]byte(c.CredentialsJSON)))\n\t\tcase c.GcloudAuth:\n\t\t\tl.Infof(\"Impersonating service account with gcloud user credentials\")\n\t\t\tts, err := gcloud.TokenSource()\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n",
                      "markdown": "`\t\t\tl.Infof(\"Impersonating service account with JSON credentials environment variable\")\n\t\t\tiopts = append(iopts, option.WithCredentialsJSON([]byte(c.CredentialsJSON)))\n\t\tcase c.GcloudAuth:\n\t\t\tl.Infof(\"Impersonating service account with gcloud user credentials\")\n\t\t\tts, err := gcloud.TokenSource()\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/internal/proxy/proxy.go"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 25,
                  "endLine": 331,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\t\t\tl.Infof(\"Impersonating service account with the credentials file at %q\", c.CredentialsFile)\n\t\t\tiopts = append(iopts, option.WithCredentialsFile(c.CredentialsFile))\n\t\tcase c.CredentialsJSON != \"\":\n\t\t\tl.Infof(\"Impersonating service account with JSON credentials environment variable\")\n\t\t\tiopts = append(iopts, option.WithCredentialsJSON([]byte(c.CredentialsJSON)))\n\t\tcase c.GcloudAuth:\n\t\t\tl.Infof(\"Impersonating service account with gcloud user credentials\")\n",
                    "rendered": {
                      "text": "\t\t\tl.Infof(\"Impersonating service account with the credentials file at %q\", c.CredentialsFile)\n\t\t\tiopts = append(iopts, option.WithCredentialsFile(c.CredentialsFile))\n\t\tcase c.CredentialsJSON != \"\":\n\t\t\tl.Infof(\"Impersonating service account with JSON credentials environment variable\")\n\t\t\tiopts = append(iopts, option.WithCredentialsJSON([]byte(c.CredentialsJSON)))\n\t\tcase c.GcloudAuth:\n\t\t\tl.Infof(\"Impersonating service account with gcloud user credentials\")\n",
                      "markdown": "`\t\t\tl.Infof(\"Impersonating service account with the credentials file at %q\", c.CredentialsFile)\n\t\t\tiopts = append(iopts, option.WithCredentialsFile(c.CredentialsFile))\n\t\tcase c.CredentialsJSON != \"\":\n\t\t\tl.Infof(\"Impersonating service account with JSON credentials environment variable\")\n\t\t\tiopts = append(iopts, option.WithCredentialsJSON([]byte(c.CredentialsJSON)))\n\t\tcase c.GcloudAuth:\n\t\t\tl.Infof(\"Impersonating service account with gcloud user credentials\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/internal/proxy/proxy.go"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 25,
                  "endLine": 328,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\t\t\t\toauth2.StaticTokenSource(&oauth2.Token{AccessToken: c.Token}),\n\t\t\t))\n\t\tcase c.CredentialsFile != \"\":\n\t\t\tl.Infof(\"Impersonating service account with the credentials file at %q\", c.CredentialsFile)\n\t\t\tiopts = append(iopts, option.WithCredentialsFile(c.CredentialsFile))\n\t\tcase c.CredentialsJSON != \"\":\n\t\t\tl.Infof(\"Impersonating service account with JSON credentials environment variable\")\n",
                    "rendered": {
                      "text": "\t\t\t\toauth2.StaticTokenSource(&oauth2.Token{AccessToken: c.Token}),\n\t\t\t))\n\t\tcase c.CredentialsFile != \"\":\n\t\t\tl.Infof(\"Impersonating service account with the credentials file at %q\", c.CredentialsFile)\n\t\t\tiopts = append(iopts, option.WithCredentialsFile(c.CredentialsFile))\n\t\tcase c.CredentialsJSON != \"\":\n\t\t\tl.Infof(\"Impersonating service account with JSON credentials environment variable\")\n",
                      "markdown": "`\t\t\t\toauth2.StaticTokenSource(&oauth2.Token{AccessToken: c.Token}),\n\t\t\t))\n\t\tcase c.CredentialsFile != \"\":\n\t\t\tl.Infof(\"Impersonating service account with the credentials file at %q\", c.CredentialsFile)\n\t\t\tiopts = append(iopts, option.WithCredentialsFile(c.CredentialsFile))\n\t\tcase c.CredentialsJSON != \"\":\n\t\t\tl.Infof(\"Impersonating service account with JSON credentials environment variable\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/internal/proxy/proxy.go"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 25,
                  "endLine": 323,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\t\tvar iopts []option.ClientOption\n\t\tswitch {\n\t\tcase c.Token != \"\":\n\t\t\tl.Infof(\"Impersonating service account with OAuth2 token\")\n\t\t\tiopts = append(iopts, option.WithTokenSource(\n\t\t\t\toauth2.StaticTokenSource(&oauth2.Token{AccessToken: c.Token}),\n\t\t\t))\n",
                    "rendered": {
                      "text": "\t\tvar iopts []option.ClientOption\n\t\tswitch {\n\t\tcase c.Token != \"\":\n\t\t\tl.Infof(\"Impersonating service account with OAuth2 token\")\n\t\t\tiopts = append(iopts, option.WithTokenSource(\n\t\t\t\toauth2.StaticTokenSource(&oauth2.Token{AccessToken: c.Token}),\n\t\t\t))\n",
                      "markdown": "`\t\tvar iopts []option.ClientOption\n\t\tswitch {\n\t\tcase c.Token != \"\":\n\t\t\tl.Infof(\"Impersonating service account with OAuth2 token\")\n\t\t\tiopts = append(iopts, option.WithTokenSource(\n\t\t\t\toauth2.StaticTokenSource(&oauth2.Token{AccessToken: c.Token}),\n\t\t\t))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/internal/proxy/proxy.go"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 6,
                  "endLine": 317,
                  "endColumn": 15,
                  "snippet": {
                    "text": "const iamLoginScope = \"https://www.googleapis.com/auth/sqlservice.login\"\n\nfunc credentialsOpt(c Config, l cloudsql.Logger) (cloudsqlconn.Option, error) {\n\t// If service account impersonation is configured, set up an impersonated\n\t// credentials token source.\n\tif c.ImpersonationChain != \"\" {\n\t\tvar iopts []option.ClientOption\n",
                    "rendered": {
                      "text": "const iamLoginScope = \"https://www.googleapis.com/auth/sqlservice.login\"\n\nfunc credentialsOpt(c Config, l cloudsql.Logger) (cloudsqlconn.Option, error) {\n\t// If service account impersonation is configured, set up an impersonated\n\t// credentials token source.\n\tif c.ImpersonationChain != \"\" {\n\t\tvar iopts []option.ClientOption\n",
                      "markdown": "`const iamLoginScope = \"https://www.googleapis.com/auth/sqlservice.login\"\n\nfunc credentialsOpt(c Config, l cloudsql.Logger) (cloudsqlconn.Option, error) {\n\t// If service account impersonation is configured, set up an impersonated\n\t// credentials token source.\n\tif c.ImpersonationChain != \"\" {\n\t\tvar iopts []option.ClientOption\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/internal/proxy/proxy.go"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 18,
                  "endLine": 293,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tcase c.AutoIP:\n\t\topts = append(opts, cloudsqlconn.WithAutoIP())\n\tdefault:\n\t\t// assume public IP by default\n\t}\n\n\treturn opts\n",
                    "rendered": {
                      "text": "\tcase c.AutoIP:\n\t\topts = append(opts, cloudsqlconn.WithAutoIP())\n\tdefault:\n\t\t// assume public IP by default\n\t}\n\n\treturn opts\n",
                      "markdown": "`\tcase c.AutoIP:\n\t\topts = append(opts, cloudsqlconn.WithAutoIP())\n\tdefault:\n\t\t// assume public IP by default\n\t}\n\n\treturn opts\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/internal/proxy/fuse_test.go"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 16,
                  "endLine": 93,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\tt.Fatalf(\"os.Stat: %v\", err)\n\t}\n\tif !fi.IsDir() {\n\t\tt.Fatalf(\"fuse mount mode: want = dir, got = %v\", fi.Mode())\n\t}\n\n\tentries, err := os.ReadDir(dir)\n",
                    "rendered": {
                      "text": "\t\tt.Fatalf(\"os.Stat: %v\", err)\n\t}\n\tif !fi.IsDir() {\n\t\tt.Fatalf(\"fuse mount mode: want = dir, got = %v\", fi.Mode())\n\t}\n\n\tentries, err := os.ReadDir(dir)\n",
                      "markdown": "`\t\tt.Fatalf(\"os.Stat: %v\", err)\n\t}\n\tif !fi.IsDir() {\n\t\tt.Fatalf(\"fuse mount mode: want = dir, got = %v\", fi.Mode())\n\t}\n\n\tentries, err := os.ReadDir(dir)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/internal/proxy/proxy_other_test.go"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31,
                  "endColumn": 7,
                  "snippet": {
                    "text": "var (\n\tpg         = \"proj:region:pg\"\n\tpg2        = \"proj:region:pg2\"\n\tmysql      = \"proj:region:mysql\"\n\tmysql2     = \"proj:region:mysql2\"\n\tsqlserver  = \"proj:region:sqlserver\"\n\tsqlserver2 = \"proj:region:sqlserver2\"\n",
                    "rendered": {
                      "text": "var (\n\tpg         = \"proj:region:pg\"\n\tpg2        = \"proj:region:pg2\"\n\tmysql      = \"proj:region:mysql\"\n\tmysql2     = \"proj:region:mysql2\"\n\tsqlserver  = \"proj:region:sqlserver\"\n\tsqlserver2 = \"proj:region:sqlserver2\"\n",
                      "markdown": "`var (\n\tpg         = \"proj:region:pg\"\n\tpg2        = \"proj:region:pg2\"\n\tmysql      = \"proj:region:mysql\"\n\tmysql2     = \"proj:region:mysql2\"\n\tsqlserver  = \"proj:region:sqlserver\"\n\tsqlserver2 = \"proj:region:sqlserver2\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/internal/proxy/proxy_other_test.go"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 29,
                  "endColumn": 4,
                  "snippet": {
                    "text": ")\n\nvar (\n\tpg         = \"proj:region:pg\"\n\tpg2        = \"proj:region:pg2\"\n\tmysql      = \"proj:region:mysql\"\n\tmysql2     = \"proj:region:mysql2\"\n",
                    "rendered": {
                      "text": ")\n\nvar (\n\tpg         = \"proj:region:pg\"\n\tpg2        = \"proj:region:pg2\"\n\tmysql      = \"proj:region:mysql\"\n\tmysql2     = \"proj:region:mysql2\"\n",
                      "markdown": "`)\n\nvar (\n\tpg         = \"proj:region:pg\"\n\tpg2        = \"proj:region:pg2\"\n\tmysql      = \"proj:region:mysql\"\n\tmysql2     = \"proj:region:mysql2\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/internal/proxy/proxy_test.go"
                },
                "region": {
                  "startLine": 666,
                  "endLine": 666,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\t\t\t{Name: \"proj:region:pg2\"},\n\t\t},\n\t}\n\ted := &errorDialer{}\n\tc, err = proxy.NewClient(context.Background(), ed, testLogger, in)\n\tif err != nil {\n\t\tt.Fatalf(\"proxy.NewClient error: %v\", err)\n",
                    "rendered": {
                      "text": "\t\t\t{Name: \"proj:region:pg2\"},\n\t\t},\n\t}\n\ted := &errorDialer{}\n\tc, err = proxy.NewClient(context.Background(), ed, testLogger, in)\n\tif err != nil {\n\t\tt.Fatalf(\"proxy.NewClient error: %v\", err)\n",
                      "markdown": "`\t\t\t{Name: \"proj:region:pg2\"},\n\t\t},\n\t}\n\ted := &errorDialer{}\n\tc, err = proxy.NewClient(context.Background(), ed, testLogger, in)\n\tif err != nil {\n\t\tt.Fatalf(\"proxy.NewClient error: %v\", err)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/internal/proxy/proxy_test.go"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 62,
                  "endLine": 302,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"with a Unix socket path per pg instance and explicit pg path suffix\",\n\t\t\tin: &proxy.Config{\n\t\t\t\tInstances: []proxy.InstanceConnConfig{\n\t\t\t\t\t{Name: pg, UnixSocketPath: testUnixSocketPathPg},\n",
                    "rendered": {
                      "text": "\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"with a Unix socket path per pg instance and explicit pg path suffix\",\n\t\t\tin: &proxy.Config{\n\t\t\t\tInstances: []proxy.InstanceConnConfig{\n\t\t\t\t\t{Name: pg, UnixSocketPath: testUnixSocketPathPg},\n",
                      "markdown": "`\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"with a Unix socket path per pg instance and explicit pg path suffix\",\n\t\t\tin: &proxy.Config{\n\t\t\t\tInstances: []proxy.InstanceConnConfig{\n\t\t\t\t\t{Name: pg, UnixSocketPath: testUnixSocketPathPg},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/internal/proxy/proxy_test.go"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 37,
                  "endLine": 302,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"with a Unix socket path per pg instance and explicit pg path suffix\",\n\t\t\tin: &proxy.Config{\n\t\t\t\tInstances: []proxy.InstanceConnConfig{\n\t\t\t\t\t{Name: pg, UnixSocketPath: testUnixSocketPathPg},\n",
                    "rendered": {
                      "text": "\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"with a Unix socket path per pg instance and explicit pg path suffix\",\n\t\t\tin: &proxy.Config{\n\t\t\t\tInstances: []proxy.InstanceConnConfig{\n\t\t\t\t\t{Name: pg, UnixSocketPath: testUnixSocketPathPg},\n",
                      "markdown": "`\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"with a Unix socket path per pg instance and explicit pg path suffix\",\n\t\t\tin: &proxy.Config{\n\t\t\t\tInstances: []proxy.InstanceConnConfig{\n\t\t\t\t\t{Name: pg, UnixSocketPath: testUnixSocketPathPg},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/internal/proxy/proxy_test.go"
                },
                "region": {
                  "startLine": 291,
                  "startColumn": 37,
                  "endLine": 291,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"with a Unix socket path per pg instance\",\n\t\t\tin: &proxy.Config{\n\t\t\t\tInstances: []proxy.InstanceConnConfig{\n\t\t\t\t\t{Name: pg, UnixSocketPath: testUnixSocketPath},\n",
                    "rendered": {
                      "text": "\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"with a Unix socket path per pg instance\",\n\t\t\tin: &proxy.Config{\n\t\t\t\tInstances: []proxy.InstanceConnConfig{\n\t\t\t\t\t{Name: pg, UnixSocketPath: testUnixSocketPath},\n",
                      "markdown": "`\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"with a Unix socket path per pg instance\",\n\t\t\tin: &proxy.Config{\n\t\t\t\tInstances: []proxy.InstanceConnConfig{\n\t\t\t\t\t{Name: pg, UnixSocketPath: testUnixSocketPath},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/internal/proxy/fuse_darwin.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 31,
                  "endLine": 37,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif _, err := os.Stat(macfusePath); err != nil {\n\t\t// if that fails, check for osxfuse next\n\t\tif _, err := os.Stat(osxfusePath); err != nil {\n\t\t\treturn errors.New(\"failed to find osxfuse or macfuse: verify FUSE installation and try again (see https://osxfuse.github.io).\")\n\t\t}\n\t}\n\treturn nil\n",
                    "rendered": {
                      "text": "\tif _, err := os.Stat(macfusePath); err != nil {\n\t\t// if that fails, check for osxfuse next\n\t\tif _, err := os.Stat(osxfusePath); err != nil {\n\t\t\treturn errors.New(\"failed to find osxfuse or macfuse: verify FUSE installation and try again (see https://osxfuse.github.io).\")\n\t\t}\n\t}\n\treturn nil\n",
                      "markdown": "`\tif _, err := os.Stat(macfusePath); err != nil {\n\t\t// if that fails, check for osxfuse next\n\t\tif _, err := os.Stat(osxfusePath); err != nil {\n\t\t\treturn errors.New(\"failed to find osxfuse or macfuse: verify FUSE installation and try again (see https://osxfuse.github.io).\")\n\t\t}\n\t}\n\treturn nil\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.golangci.yml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 18,
                  "endLine": 415,
                  "endColumn": 22,
                  "snippet": {
                    "text": "t/ea62bddaaf3aa7df79250d045ba2f5f3fe7edaea))\n* add instance dialing to health check ([#871](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/issues/871)) ([eca3793](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/commit/eca37935e7cd54efcd612c170e46f45c1d8e3556))\n* require TLS v1.3 at minimum ([#906](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/issues/906)) ([cafa966](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/commit/cafa966e50170ad94f12f067549ba3aedf8ecdca))\n\n\n### Bug Fixes\n\n* ensure proxy shuts down gracefully on SIGTERM ([#877](https://www.github.co",
                    "rendered": {
                      "text": "t/ea62bddaaf3aa7df79250d045ba2f5f3fe7edaea))\n* add instance dialing to health check ([#871](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/issues/871)) ([eca3793](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/commit/eca37935e7cd54efcd612c170e46f45c1d8e3556))\n* require TLS v1.3 at minimum ([#906](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/issues/906)) ([cafa966](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/commit/cafa966e50170ad94f12f067549ba3aedf8ecdca))\n\n\n### Bug Fixes\n\n* ensure proxy shuts down gracefully on SIGTERM ([#877](https://www.github.co",
                      "markdown": "`t/ea62bddaaf3aa7df79250d045ba2f5f3fe7edaea))\n* add instance dialing to health check ([#871](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/issues/871)) ([eca3793](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/commit/eca37935e7cd54efcd612c170e46f45c1d8e3556))\n* require TLS v1.3 at minimum ([#906](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/issues/906)) ([cafa966](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/commit/cafa966e50170ad94f12f067549ba3aedf8ecdca))\n\n\n### Bug Fixes\n\n* ensure proxy shuts down gracefully on SIGTERM ([#877](https://www.github.co`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 384,
                  "startColumn": 1,
                  "endLine": 384,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n### Bug Fixes\n\n* update dependencies to latest versions ([#1034](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/issues/1034)) ([8954d24](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/commit/8954d241a71b59d9bf82cb47469e6652d3f379e7))\n\n## [1.27.0](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/compare/v1.26.0...v1.27.0) (2021-11-02)\n\n",
                    "rendered": {
                      "text": "\n### Bug Fixes\n\n* update dependencies to latest versions ([#1034](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/issues/1034)) ([8954d24](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/commit/8954d241a71b59d9bf82cb47469e6652d3f379e7))\n\n## [1.27.0](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/compare/v1.26.0...v1.27.0) (2021-11-02)\n\n",
                      "markdown": "`\n### Bug Fixes\n\n* update dependencies to latest versions ([#1034](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/issues/1034)) ([8954d24](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/commit/8954d241a71b59d9bf82cb47469e6652d3f379e7))\n\n## [1.27.0](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/compare/v1.26.0...v1.27.0) (2021-11-02)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 340,
                  "startColumn": 1,
                  "endLine": 340,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n### Bug Fixes\n\n* update dependencies to latest versions ([#1187](https://github.com/GoogleCloudPlatform/cloudsql-proxy/issues/1187)) ([f915180](https://github.com/GoogleCloudPlatform/cloudsql-proxy/commit/f9151809664e1847db94b0e4da905aece000d8fa))\n\n## [1.30.0](https://github.com/GoogleCloudPlatform/cloudsql-proxy/compare/v1.29.0...v1.30.0) (2022-04-04)\n\n",
                    "rendered": {
                      "text": "\n### Bug Fixes\n\n* update dependencies to latest versions ([#1187](https://github.com/GoogleCloudPlatform/cloudsql-proxy/issues/1187)) ([f915180](https://github.com/GoogleCloudPlatform/cloudsql-proxy/commit/f9151809664e1847db94b0e4da905aece000d8fa))\n\n## [1.30.0](https://github.com/GoogleCloudPlatform/cloudsql-proxy/compare/v1.29.0...v1.30.0) (2022-04-04)\n\n",
                      "markdown": "`\n### Bug Fixes\n\n* update dependencies to latest versions ([#1187](https://github.com/GoogleCloudPlatform/cloudsql-proxy/issues/1187)) ([f915180](https://github.com/GoogleCloudPlatform/cloudsql-proxy/commit/f9151809664e1847db94b0e4da905aece000d8fa))\n\n## [1.30.0](https://github.com/GoogleCloudPlatform/cloudsql-proxy/compare/v1.29.0...v1.30.0) (2022-04-04)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 1,
                  "endLine": 319,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n### Bug Fixes\n\n* update dependencies to latest versions ([#1286](https://github.com/GoogleCloudPlatform/cloudsql-proxy/issues/1286)) ([d3f9dcb](https://github.com/GoogleCloudPlatform/cloudsql-proxy/commit/d3f9dcbe81bb43a0602e35359a262b2920f1915e))\n\n## [1.31.1](https://github.com/GoogleCloudPlatform/cloudsql-proxy/compare/v1.31.0...v1.31.1) (2022-07-12)\n\n",
                    "rendered": {
                      "text": "\n### Bug Fixes\n\n* update dependencies to latest versions ([#1286](https://github.com/GoogleCloudPlatform/cloudsql-proxy/issues/1286)) ([d3f9dcb](https://github.com/GoogleCloudPlatform/cloudsql-proxy/commit/d3f9dcbe81bb43a0602e35359a262b2920f1915e))\n\n## [1.31.1](https://github.com/GoogleCloudPlatform/cloudsql-proxy/compare/v1.31.0...v1.31.1) (2022-07-12)\n\n",
                      "markdown": "`\n### Bug Fixes\n\n* update dependencies to latest versions ([#1286](https://github.com/GoogleCloudPlatform/cloudsql-proxy/issues/1286)) ([d3f9dcb](https://github.com/GoogleCloudPlatform/cloudsql-proxy/commit/d3f9dcbe81bb43a0602e35359a262b2920f1915e))\n\n## [1.31.1](https://github.com/GoogleCloudPlatform/cloudsql-proxy/compare/v1.31.0...v1.31.1) (2022-07-12)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 1,
                  "endLine": 200,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n### Bug Fixes\n\n* update dependencies to latest versions ([#1707](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/issues/1707)) ([54ea90e](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/commit/54ea90e140873da254a34ea8b4e612b81a46cf13))\n\n## [2.1.1](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/compare/v2.1.0...v2.1.1) (2023-02-23)\n\n",
                    "rendered": {
                      "text": "\n### Bug Fixes\n\n* update dependencies to latest versions ([#1707](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/issues/1707)) ([54ea90e](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/commit/54ea90e140873da254a34ea8b4e612b81a46cf13))\n\n## [2.1.1](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/compare/v2.1.0...v2.1.1) (2023-02-23)\n\n",
                      "markdown": "`\n### Bug Fixes\n\n* update dependencies to latest versions ([#1707](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/issues/1707)) ([54ea90e](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/commit/54ea90e140873da254a34ea8b4e612b81a46cf13))\n\n## [2.1.1](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/compare/v2.1.0...v2.1.1) (2023-02-23)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 1,
                  "endLine": 102,
                  "endColumn": 9,
                  "snippet": {
                    "text": "### Bug Fixes\n\n* label container images correctly ([#2061](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/issues/2061)) ([f071d38](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/commit/f071d38e152c70113d7102c19ed450c74e8d64f0))\n* Update Go Connector to v1.5.2 to ensure connections work after waking from sleep\n([#1788](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/issues/1788))\n\n## [2.8.0](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/compare/v2.7.2...v2.8.0) (2023-12-04)\n",
                    "rendered": {
                      "text": "### Bug Fixes\n\n* label container images correctly ([#2061](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/issues/2061)) ([f071d38](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/commit/f071d38e152c70113d7102c19ed450c74e8d64f0))\n* Update Go Connector to v1.5.2 to ensure connections work after waking from sleep\n([#1788](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/issues/1788))\n\n## [2.8.0](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/compare/v2.7.2...v2.8.0) (2023-12-04)\n",
                      "markdown": "`### Bug Fixes\n\n* label container images correctly ([#2061](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/issues/2061)) ([f071d38](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/commit/f071d38e152c70113d7102c19ed450c74e8d64f0))\n* Update Go Connector to v1.5.2 to ensure connections work after waking from sleep\n([#1788](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/issues/1788))\n\n## [2.8.0](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/compare/v2.7.2...v2.8.0) (2023-12-04)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 1,
                  "endLine": 94,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n### Bug Fixes\n\n* update dependencies to latest versions ([#2089](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/issues/2089)) ([6d9981a](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/commit/6d9981a757e3c1033954db7b6f834c42c5495e4f))\n\n## [2.8.1](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/compare/v2.8.0...v2.8.1) (2023-12-12)\n\n",
                    "rendered": {
                      "text": "\n### Bug Fixes\n\n* update dependencies to latest versions ([#2089](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/issues/2089)) ([6d9981a](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/commit/6d9981a757e3c1033954db7b6f834c42c5495e4f))\n\n## [2.8.1](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/compare/v2.8.0...v2.8.1) (2023-12-12)\n\n",
                      "markdown": "`\n### Bug Fixes\n\n* update dependencies to latest versions ([#2089](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/issues/2089)) ([6d9981a](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/commit/6d9981a757e3c1033954db7b6f834c42c5495e4f))\n\n## [2.8.1](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/compare/v2.8.0...v2.8.1) (2023-12-12)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 536,
                  "startColumn": 41,
                  "endLine": 536,
                  "endColumn": 48,
                  "snippet": {
                    "text": "o prevent global conflicts with sqladmin v1 ([#504](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/issues/504)) ([6c45513](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/commit/6c455136a24b841dbfc015a1f8ed7505f9e77dec))\n\n\n### Bug Fixes\n\n* **containers:** Allow non-root users to mount fuse filesystems for alpine and buster images ([#540](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/issues/540)) ([5b653f5](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/commit/5b653f5df6d9c4c226e3c4f6036d5e7d4c43c699))\n* only allow fuse mode to unmount if an error occurs fir",
                    "rendered": {
                      "text": "o prevent global conflicts with sqladmin v1 ([#504](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/issues/504)) ([6c45513](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/commit/6c455136a24b841dbfc015a1f8ed7505f9e77dec))\n\n\n### Bug Fixes\n\n* **containers:** Allow non-root users to mount fuse filesystems for alpine and buster images ([#540](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/issues/540)) ([5b653f5](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/commit/5b653f5df6d9c4c226e3c4f6036d5e7d4c43c699))\n* only allow fuse mode to unmount if an error occurs fir",
                      "markdown": "`o prevent global conflicts with sqladmin v1 ([#504](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/issues/504)) ([6c45513](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/commit/6c455136a24b841dbfc015a1f8ed7505f9e77dec))\n\n\n### Bug Fixes\n\n* **containers:** Allow non-root users to mount fuse filesystems for alpine and buster images ([#540](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/issues/540)) ([5b653f5](https://www.github.com/GoogleCloudPlatform/cloudsql-proxy/commit/5b653f5df6d9c4c226e3c4f6036d5e7d4c43c699))\n* only allow fuse mode to unmount if an error occurs fir`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 6,
                  "endLine": 333,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n### Features\n\n* make Docker images ARM-friendly ([#1193](https://github.com/GoogleCloudPlatform/cloudsql-proxy/issues/1193)) ([6a98a04](https://github.com/GoogleCloudPlatform/cloudsql-proxy/commit/6a98a0407785db7085532ea242b7079ceba756e3))\n\n### [1.30.1](https://github.com/GoogleCloudPlatform/cloudsql-proxy/compare/v1.30.0...v1.30.1) (2022-05-03)\n\n",
                    "rendered": {
                      "text": "\n### Features\n\n* make Docker images ARM-friendly ([#1193](https://github.com/GoogleCloudPlatform/cloudsql-proxy/issues/1193)) ([6a98a04](https://github.com/GoogleCloudPlatform/cloudsql-proxy/commit/6a98a0407785db7085532ea242b7079ceba756e3))\n\n### [1.30.1](https://github.com/GoogleCloudPlatform/cloudsql-proxy/compare/v1.30.0...v1.30.1) (2022-05-03)\n\n",
                      "markdown": "`\n### Features\n\n* make Docker images ARM-friendly ([#1193](https://github.com/GoogleCloudPlatform/cloudsql-proxy/issues/1193)) ([6a98a04](https://github.com/GoogleCloudPlatform/cloudsql-proxy/commit/6a98a0407785db7085532ea242b7079ceba756e3))\n\n### [1.30.1](https://github.com/GoogleCloudPlatform/cloudsql-proxy/compare/v1.30.0...v1.30.1) (2022-05-03)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 22,
                  "endLine": 186,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n### Features\n\n* add support for Auto IP ([#1735](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/issues/1735)) ([83c8a64](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/commit/83c8a6444e9e1305922550bd5b6ac373babb0ffc))\n\n\n### Bug Fixes\n",
                    "rendered": {
                      "text": "\n### Features\n\n* add support for Auto IP ([#1735](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/issues/1735)) ([83c8a64](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/commit/83c8a6444e9e1305922550bd5b6ac373babb0ffc))\n\n\n### Bug Fixes\n",
                      "markdown": "`\n### Features\n\n* add support for Auto IP ([#1735](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/issues/1735)) ([83c8a64](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/commit/83c8a6444e9e1305922550bd5b6ac373babb0ffc))\n\n\n### Bug Fixes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 13,
                  "endLine": 174,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n### Features\n\n* Add Windows Service support ([#1696](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/issues/1696)) ([ec56eba](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/commit/ec56ebab683804885edd95365e099de7a0de578f)), closes [#277](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/issues/277)\n\n\n### Bug Fixes\n",
                    "rendered": {
                      "text": "\n### Features\n\n* Add Windows Service support ([#1696](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/issues/1696)) ([ec56eba](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/commit/ec56ebab683804885edd95365e099de7a0de578f)), closes [#277](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/issues/277)\n\n\n### Bug Fixes\n",
                      "markdown": "`\n### Features\n\n* Add Windows Service support ([#1696](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/issues/1696)) ([ec56eba](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/commit/ec56ebab683804885edd95365e099de7a0de578f)), closes [#277](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/issues/277)\n\n\n### Bug Fixes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 9,
                  "endLine": 167,
                  "endColumn": 18,
                  "snippet": {
                    "text": "### Bug Fixes\n\n* log info message for quitquitquit ([#1806](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/issues/1806)) ([4d36204](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/commit/4d36204cb6c93751e9a7d40be5e3eff94a90847f))\n* Windows service stop ([#1833](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/issues/1833)) ([17e66a7](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/commit/17e66a7a73a88d5c29c77133cdb5ad5aebd0a4c1))\n\n## [2.3.0](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/compare/v2.2.0...v2.3.0) (2023-05-16)\n\n",
                    "rendered": {
                      "text": "### Bug Fixes\n\n* log info message for quitquitquit ([#1806](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/issues/1806)) ([4d36204](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/commit/4d36204cb6c93751e9a7d40be5e3eff94a90847f))\n* Windows service stop ([#1833](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/issues/1833)) ([17e66a7](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/commit/17e66a7a73a88d5c29c77133cdb5ad5aebd0a4c1))\n\n## [2.3.0](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/compare/v2.2.0...v2.3.0) (2023-05-16)\n\n",
                      "markdown": "`### Bug Fixes\n\n* log info message for quitquitquit ([#1806](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/issues/1806)) ([4d36204](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/commit/4d36204cb6c93751e9a7d40be5e3eff94a90847f))\n* Windows service stop ([#1833](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/issues/1833)) ([17e66a7](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/commit/17e66a7a73a88d5c29c77133cdb5ad5aebd0a4c1))\n\n## [2.3.0](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/compare/v2.2.0...v2.3.0) (2023-05-16)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.envrc.example"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 33,
                  "endLine": 16,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\nexport SQLSERVER_CONNECTION_NAME=\"project:region:instance\"\nexport SQLSERVER_USER=\"sqlserver-user\"\nexport SQLSERVER_PASS=\"sqlserver-password\"\nexport SQLSERVER_DB=\"sqlserver-db-name\"\n\nexport GOOGLE_APPLICATION_CREDENTIALS=/path/to/key.json\n",
                    "rendered": {
                      "text": "\nexport SQLSERVER_CONNECTION_NAME=\"project:region:instance\"\nexport SQLSERVER_USER=\"sqlserver-user\"\nexport SQLSERVER_PASS=\"sqlserver-password\"\nexport SQLSERVER_DB=\"sqlserver-db-name\"\n\nexport GOOGLE_APPLICATION_CREDENTIALS=/path/to/key.json\n",
                      "markdown": "`\nexport SQLSERVER_CONNECTION_NAME=\"project:region:instance\"\nexport SQLSERVER_USER=\"sqlserver-user\"\nexport SQLSERVER_PASS=\"sqlserver-password\"\nexport SQLSERVER_DB=\"sqlserver-db-name\"\n\nexport GOOGLE_APPLICATION_CREDENTIALS=/path/to/key.json\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.envrc.example"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 31,
                  "endLine": 10,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\nexport POSTGRES_CONNECTION_NAME=\"project:region:instance\"\nexport POSTGRES_USER=\"postgres-user\"\nexport POSTGRES_PASS=\"postgres-password\"\nexport POSTGRES_DB=\"postgres-db-name\"\nexport POSTGRES_USER_IAM=\"some-user-with-db-access@example.com\"\n\n",
                    "rendered": {
                      "text": "\nexport POSTGRES_CONNECTION_NAME=\"project:region:instance\"\nexport POSTGRES_USER=\"postgres-user\"\nexport POSTGRES_PASS=\"postgres-password\"\nexport POSTGRES_DB=\"postgres-db-name\"\nexport POSTGRES_USER_IAM=\"some-user-with-db-access@example.com\"\n\n",
                      "markdown": "`\nexport POSTGRES_CONNECTION_NAME=\"project:region:instance\"\nexport POSTGRES_USER=\"postgres-user\"\nexport POSTGRES_PASS=\"postgres-password\"\nexport POSTGRES_DB=\"postgres-db-name\"\nexport POSTGRES_USER_IAM=\"some-user-with-db-access@example.com\"\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.envrc.example"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 25,
                  "endLine": 5,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\nexport MYSQL_CONNECTION_NAME=\"project:region:instance\"\nexport MYSQL_USER=\"mysql-user\"\nexport MYSQL_PASS=\"mysql-password\"\nexport MYSQL_DB=\"mysql-db-name\"\n\nexport POSTGRES_CONNECTION_NAME=\"project:region:instance\"\n",
                    "rendered": {
                      "text": "\nexport MYSQL_CONNECTION_NAME=\"project:region:instance\"\nexport MYSQL_USER=\"mysql-user\"\nexport MYSQL_PASS=\"mysql-password\"\nexport MYSQL_DB=\"mysql-db-name\"\n\nexport POSTGRES_CONNECTION_NAME=\"project:region:instance\"\n",
                      "markdown": "`\nexport MYSQL_CONNECTION_NAME=\"project:region:instance\"\nexport MYSQL_USER=\"mysql-user\"\nexport MYSQL_PASS=\"mysql-password\"\nexport MYSQL_DB=\"mysql-db-name\"\n\nexport POSTGRES_CONNECTION_NAME=\"project:region:instance\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/Dockerfile.alpine"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/Dockerfile.alpine"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 30,
                  "endLine": 37,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    ca-certificates \\\n    libc6-compat\n# Install fuse and allow enable non-root users to mount\nRUN apk add --no-cache fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN addgroup -g 65532 -S nonroot && adduser -u 65532 -S nonroot -G nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n",
                    "rendered": {
                      "text": "    ca-certificates \\\n    libc6-compat\n# Install fuse and allow enable non-root users to mount\nRUN apk add --no-cache fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN addgroup -g 65532 -S nonroot && adduser -u 65532 -S nonroot -G nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n",
                      "markdown": "`    ca-certificates \\\n    libc6-compat\n# Install fuse and allow enable non-root users to mount\nRUN apk add --no-cache fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN addgroup -g 65532 -S nonroot && adduser -u 65532 -S nonroot -G nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/Dockerfile.alpine"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 49,
                  "endLine": 37,
                  "snippet": {
                    "text": "RUN apk add --no-cache \\\n    ca-certificates \\\n    libc6-compat\n# Install fuse and allow enable non-root users to mount\nRUN apk add --no-cache fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN addgroup -g 65532 -S nonroot && adduser -u 65532 -S nonroot -G nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n",
                    "rendered": {
                      "text": "RUN apk add --no-cache \\\n    ca-certificates \\\n    libc6-compat\n# Install fuse and allow enable non-root users to mount\nRUN apk add --no-cache fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN addgroup -g 65532 -S nonroot && adduser -u 65532 -S nonroot -G nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n",
                      "markdown": "`RUN apk add --no-cache \\\n    ca-certificates \\\n    libc6-compat\n# Install fuse and allow enable non-root users to mount\nRUN apk add --no-cache fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN addgroup -g 65532 -S nonroot && adduser -u 65532 -S nonroot -G nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/main_windows.go"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 29,
                  "endLine": 91,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t\t\t\tcancel()\n\n\t\t\tdefault:\n\t\t\t\tlogger.Errorf(\"unexpected control request #%d\", c)\n\t\t\t}\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\t\t\t\tcancel()\n\n\t\t\tdefault:\n\t\t\t\tlogger.Errorf(\"unexpected control request #%d\", c)\n\t\t\t}\n\t\t}\n\t}\n",
                      "markdown": "`\t\t\t\tcancel()\n\n\t\t\tdefault:\n\t\t\t\tlogger.Errorf(\"unexpected control request #%d\", c)\n\t\t\t}\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/main_windows.go"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 21,
                  "endLine": 40,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\texePath, err := os.Executable()\n\tif err != nil {\n\t\tchanges <- svc.Status{State: svc.StopPending}\n\t\treturn true, 101 // service specific exit code=101\n\t}\n\n\tlogFolder := filepath.Join(filepath.Dir(exePath), \"logs\")\n",
                    "rendered": {
                      "text": "\texePath, err := os.Executable()\n\tif err != nil {\n\t\tchanges <- svc.Status{State: svc.StopPending}\n\t\treturn true, 101 // service specific exit code=101\n\t}\n\n\tlogFolder := filepath.Join(filepath.Dir(exePath), \"logs\")\n",
                      "markdown": "`\texePath, err := os.Executable()\n\tif err != nil {\n\t\tchanges <- svc.Status{State: svc.StopPending}\n\t\treturn true, 101 // service specific exit code=101\n\t}\n\n\tlogFolder := filepath.Join(filepath.Dir(exePath), \"logs\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/main_windows.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 13,
                  "endLine": 34,
                  "snippet": {
                    "text": "type windowsService struct{}\n\nfunc (m *windowsService) Execute(_ []string, r <-chan svc.ChangeRequest, changes chan<- svc.Status) (bool, uint32) {\n\t// start the service\n\tchanges <- svc.Status{State: svc.StartPending}\n\n\t// set up the log file\n\texePath, err := os.Executable()\n",
                    "rendered": {
                      "text": "type windowsService struct{}\n\nfunc (m *windowsService) Execute(_ []string, r <-chan svc.ChangeRequest, changes chan<- svc.Status) (bool, uint32) {\n\t// start the service\n\tchanges <- svc.Status{State: svc.StartPending}\n\n\t// set up the log file\n\texePath, err := os.Executable()\n",
                      "markdown": "`type windowsService struct{}\n\nfunc (m *windowsService) Execute(_ []string, r <-chan svc.ChangeRequest, changes chan<- svc.Status) (bool, uint32) {\n\t// start the service\n\tchanges <- svc.Status{State: svc.StartPending}\n\n\t// set up the log file\n\texePath, err := os.Executable()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/CODE_OF_CONDUCT.md"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 9,
                  "endLine": 43,
                  "endColumn": 13,
                  "snippet": {
                    "text": "or contacting one or more of the project maintainers.\n\nThis Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.2.0,\navailable at [http://contributor-covenant.org/version/1/2/0/](http://contributor-covenant.org/version/1/2/0/)\n",
                    "rendered": {
                      "text": "or contacting one or more of the project maintainers.\n\nThis Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.2.0,\navailable at [http://contributor-covenant.org/version/1/2/0/](http://contributor-covenant.org/version/1/2/0/)\n",
                      "markdown": "`or contacting one or more of the project maintainers.\n\nThis Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.2.0,\navailable at [http://contributor-covenant.org/version/1/2/0/](http://contributor-covenant.org/version/1/2/0/)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/multi-container/ruby/config.ru"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/multi-container/ruby/Dockerfile"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 28,
                  "endColumn": 4,
                  "snippet": {
                    "text": "RUN bundle install\n\nEXPOSE 8080\n\nCMD [\"bundle\", \"exec\", \"rackup\", \"--host\", \"0.0.0.0\", \"-p\", \"8080\"]\n",
                    "rendered": {
                      "text": "RUN bundle install\n\nEXPOSE 8080\n\nCMD [\"bundle\", \"exec\", \"rackup\", \"--host\", \"0.0.0.0\", \"-p\", \"8080\"]\n",
                      "markdown": "`RUN bundle install\n\nEXPOSE 8080\n\nCMD [\"bundle\", \"exec\", \"rackup\", \"--host\", \"0.0.0.0\", \"-p\", \"8080\"]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/multi-container/ruby/Dockerfile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/multi-container/ruby/Dockerfile"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 41,
                  "endLine": 19,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nFROM ruby:3.2.2\n\n# Copy local code to the container image.\nENV APP_HOME /app\nWORKDIR $APP_HOME\nCOPY . ./\n\n",
                    "rendered": {
                      "text": "\nFROM ruby:3.2.2\n\n# Copy local code to the container image.\nENV APP_HOME /app\nWORKDIR $APP_HOME\nCOPY . ./\n\n",
                      "markdown": "`\nFROM ruby:3.2.2\n\n# Copy local code to the container image.\nENV APP_HOME /app\nWORKDIR $APP_HOME\nCOPY . ./\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/multi-container/ruby/app.rb"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 8,
                  "endLine": 31,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        port: ENV.fetch(\"DB_PORT\") { 5432 },\n        database: ENV[\"DB_NAME\"],\n        user: ENV[\"DB_USER\"],\n        password: ENV[\"DB_PASS\"],\n        pool_timeout: 5,\n        max_connections: 5,\n    )\n",
                    "rendered": {
                      "text": "        port: ENV.fetch(\"DB_PORT\") { 5432 },\n        database: ENV[\"DB_NAME\"],\n        user: ENV[\"DB_USER\"],\n        password: ENV[\"DB_PASS\"],\n        pool_timeout: 5,\n        max_connections: 5,\n    )\n",
                      "markdown": "`        port: ENV.fetch(\"DB_PORT\") { 5432 },\n        database: ENV[\"DB_NAME\"],\n        user: ENV[\"DB_USER\"],\n        password: ENV[\"DB_PASS\"],\n        pool_timeout: 5,\n        max_connections: 5,\n    )\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/multi-container/ruby/app.rb"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 14,
                  "endLine": 27,
                  "endColumn": 32,
                  "snippet": {
                    "text": "def connect_tcp\n    Sequel.connect(\n        adapter: :postgres,\n        host: ENV.fetch(\"INSTANCE_HOST\") { \"127.0.0.1\" },\n        port: ENV.fetch(\"DB_PORT\") { 5432 },\n        database: ENV[\"DB_NAME\"],\n        user: ENV[\"DB_USER\"],\n",
                    "rendered": {
                      "text": "def connect_tcp\n    Sequel.connect(\n        adapter: :postgres,\n        host: ENV.fetch(\"INSTANCE_HOST\") { \"127.0.0.1\" },\n        port: ENV.fetch(\"DB_PORT\") { 5432 },\n        database: ENV[\"DB_NAME\"],\n        user: ENV[\"DB_USER\"],\n",
                      "markdown": "`def connect_tcp\n    Sequel.connect(\n        adapter: :postgres,\n        host: ENV.fetch(\"INSTANCE_HOST\") { \"127.0.0.1\" },\n        port: ENV.fetch(\"DB_PORT\") { 5432 },\n        database: ENV[\"DB_NAME\"],\n        user: ENV[\"DB_USER\"],\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/multi-container/ruby/app.rb"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/multi-container/ruby/multicontainer.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/multi-container/ruby/multicontainer.yaml"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 92,
                  "endLine": 53,
                  "endColumn": 97,
                  "snippet": {
                    "text": "             # following flag to have the proxy connect over private IP\n             # - \"--private-ip\"\n\n            # Ensure the port number on the --port argument matches the value of the DB_PORT env var on the my-app container.\n             - \"--port=5432\"\n             # instance connection name takes format \"PROJECT:REGION:INSTANCE_NAME\"\n             - \"<INSTANCE_CONNECTION_NAME>\"\n",
                    "rendered": {
                      "text": "             # following flag to have the proxy connect over private IP\n             # - \"--private-ip\"\n\n            # Ensure the port number on the --port argument matches the value of the DB_PORT env var on the my-app container.\n             - \"--port=5432\"\n             # instance connection name takes format \"PROJECT:REGION:INSTANCE_NAME\"\n             - \"<INSTANCE_CONNECTION_NAME>\"\n",
                      "markdown": "`             # following flag to have the proxy connect over private IP\n             # - \"--private-ip\"\n\n            # Ensure the port number on the --port argument matches the value of the DB_PORT env var on the my-app container.\n             - \"--port=5432\"\n             # instance connection name takes format \"PROJECT:REGION:INSTANCE_NAME\"\n             - \"<INSTANCE_CONNECTION_NAME>\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/multi-container/ruby/multicontainer.yaml"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 68,
                  "endLine": 51,
                  "snippet": {
                    "text": "        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:latest\n        args:\n             # If connecting to a Cloud SQL instance within a VPC network, you can use the\n             # following flag to have the proxy connect over private IP\n             # - \"--private-ip\"\n\n            # Ensure the port number on the --port argument matches the value of the DB_PORT env var on the my-app container.\n             - \"--port=5432\"\n",
                    "rendered": {
                      "text": "        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:latest\n        args:\n             # If connecting to a Cloud SQL instance within a VPC network, you can use the\n             # following flag to have the proxy connect over private IP\n             # - \"--private-ip\"\n\n            # Ensure the port number on the --port argument matches the value of the DB_PORT env var on the my-app container.\n             - \"--port=5432\"\n",
                      "markdown": "`        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:latest\n        args:\n             # If connecting to a Cloud SQL instance within a VPC network, you can use the\n             # following flag to have the proxy connect over private IP\n             # - \"--private-ip\"\n\n            # Ensure the port number on the --port argument matches the value of the DB_PORT env var on the my-app container.\n             - \"--port=5432\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/multi-container/ruby/multicontainer.yaml"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 79,
                  "endLine": 27,
                  "snippet": {
                    "text": "    metadata:\n      annotations:\n        run.googleapis.com/execution-environment: gen1 #or gen2\n        # Uncomment the following line if connecting to Cloud SQL using Private IP\n        # via a VPC access connector\n        # run.googleapis.com/vpc-access-connector: <CONNECTOR_NAME>\n    spec:\n      containers:\n",
                    "rendered": {
                      "text": "    metadata:\n      annotations:\n        run.googleapis.com/execution-environment: gen1 #or gen2\n        # Uncomment the following line if connecting to Cloud SQL using Private IP\n        # via a VPC access connector\n        # run.googleapis.com/vpc-access-connector: <CONNECTOR_NAME>\n    spec:\n      containers:\n",
                      "markdown": "`    metadata:\n      annotations:\n        run.googleapis.com/execution-environment: gen1 #or gen2\n        # Uncomment the following line if connecting to Cloud SQL using Private IP\n        # via a VPC access connector\n        # run.googleapis.com/vpc-access-connector: <CONNECTOR_NAME>\n    spec:\n      containers:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/multi-container/ruby/multicontainer.yaml"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 5,
                  "endLine": 17,
                  "snippet": {
                    "text": "# limitations under the License.\n\napiVersion: serving.knative.dev/v1\nkind: Service\nmetadata:\n  annotations: \n     run.googleapis.com/launch-stage: ALPHA\n  name: multicontainer-service\n",
                    "rendered": {
                      "text": "# limitations under the License.\n\napiVersion: serving.knative.dev/v1\nkind: Service\nmetadata:\n  annotations: \n     run.googleapis.com/launch-stage: ALPHA\n  name: multicontainer-service\n",
                      "markdown": "`# limitations under the License.\n\napiVersion: serving.knative.dev/v1\nkind: Service\nmetadata:\n  annotations: \n     run.googleapis.com/launch-stage: ALPHA\n  name: multicontainer-service\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/multi-container/ruby/README.md"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 60,
                  "endLine": 111,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\n```\n\nYou can optionally use Secret Manager to store the database password. See\n[this documentation](https://cloud.google.com/run/docs/deploying#yaml) for more details.\n\nBefore deploying, you will need to make sure that the service account associated\n",
                    "rendered": {
                      "text": "\n```\n\nYou can optionally use Secret Manager to store the database password. See\n[this documentation](https://cloud.google.com/run/docs/deploying#yaml) for more details.\n\nBefore deploying, you will need to make sure that the service account associated\n",
                      "markdown": "`\n```\n\nYou can optionally use Secret Manager to store the database password. See\n[this documentation](https://cloud.google.com/run/docs/deploying#yaml) for more details.\n\nBefore deploying, you will need to make sure that the service account associated\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/multi-container/ruby/README.md"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 8,
                  "endLine": 52,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        port: ENV[\"DB_PORT\"],\n        database: ENV[\"DB_NAME\"],\n        user: ENV[\"DB_USER\"],\n        password: ENV[\"DB_PASS\"],\n        pool_timeout: 5,\n        max_connections: 5,\n    )\n",
                    "rendered": {
                      "text": "        port: ENV[\"DB_PORT\"],\n        database: ENV[\"DB_NAME\"],\n        user: ENV[\"DB_USER\"],\n        password: ENV[\"DB_PASS\"],\n        pool_timeout: 5,\n        max_connections: 5,\n    )\n",
                      "markdown": "`        port: ENV[\"DB_PORT\"],\n        database: ENV[\"DB_NAME\"],\n        user: ENV[\"DB_USER\"],\n        password: ENV[\"DB_PASS\"],\n        pool_timeout: 5,\n        max_connections: 5,\n    )\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/multi-container/ruby/README.md"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 39,
                  "endLine": 18,
                  "endColumn": 47,
                  "snippet": {
                    "text": "  \n1. Create a Cloud SQL Postgres Instance by following these\n[instructions](https://cloud.google.com/sql/docs/postgres/create-instance).\nNote the connection string and default password that you create.\n\n1. Create a database for your application by following these\n[instructions](https://cloud.google.com/sql/docs/postgres/create-manage-databases).\n",
                    "rendered": {
                      "text": "  \n1. Create a Cloud SQL Postgres Instance by following these\n[instructions](https://cloud.google.com/sql/docs/postgres/create-instance).\nNote the connection string and default password that you create.\n\n1. Create a database for your application by following these\n[instructions](https://cloud.google.com/sql/docs/postgres/create-manage-databases).\n",
                      "markdown": "`  \n1. Create a Cloud SQL Postgres Instance by following these\n[instructions](https://cloud.google.com/sql/docs/postgres/create-instance).\nNote the connection string and default password that you create.\n\n1. Create a database for your application by following these\n[instructions](https://cloud.google.com/sql/docs/postgres/create-manage-databases).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/multi-container/ruby/README.md"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 14,
                  "endLine": 48,
                  "endColumn": 26,
                  "snippet": {
                    "text": "def connect_tcp\n    Sequel.connect(\n        adapter: 'postgres',\n        host: ENV[\"INSTANCE_HOST\"],\n        port: ENV[\"DB_PORT\"],\n        database: ENV[\"DB_NAME\"],\n        user: ENV[\"DB_USER\"],\n",
                    "rendered": {
                      "text": "def connect_tcp\n    Sequel.connect(\n        adapter: 'postgres',\n        host: ENV[\"INSTANCE_HOST\"],\n        port: ENV[\"DB_PORT\"],\n        database: ENV[\"DB_NAME\"],\n        user: ENV[\"DB_USER\"],\n",
                      "markdown": "`def connect_tcp\n    Sequel.connect(\n        adapter: 'postgres',\n        host: ENV[\"INSTANCE_HOST\"],\n        port: ENV[\"DB_PORT\"],\n        database: ENV[\"DB_NAME\"],\n        user: ENV[\"DB_USER\"],\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/multi-container/ruby/README.md"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 8,
                  "endLine": 67,
                  "endColumn": 16,
                  "snippet": {
                    "text": "gcloud builds submit --tag gcr.io/<YOUR_PROJECT_ID>/run-cloudsql\n```\n\nFinally, update the `multicontainer.yaml` file with the correct values for your\ndeployment for `YOUR_PROJECT_ID`, `DB_USER`, `DB_PASS`, `DB_NAME`, and `INSTANCE_CONNECTION_NAME`\nlisting the Cloud SQL container image as a sidecar:\n\n",
                    "rendered": {
                      "text": "gcloud builds submit --tag gcr.io/<YOUR_PROJECT_ID>/run-cloudsql\n```\n\nFinally, update the `multicontainer.yaml` file with the correct values for your\ndeployment for `YOUR_PROJECT_ID`, `DB_USER`, `DB_PASS`, `DB_NAME`, and `INSTANCE_CONNECTION_NAME`\nlisting the Cloud SQL container image as a sidecar:\n\n",
                      "markdown": "`gcloud builds submit --tag gcr.io/<YOUR_PROJECT_ID>/run-cloudsql\n```\n\nFinally, update the `multicontainer.yaml` file with the correct values for your\ndeployment for `YOUR_PROJECT_ID`, `DB_USER`, `DB_PASS`, `DB_NAME`, and `INSTANCE_CONNECTION_NAME`\nlisting the Cloud SQL container image as a sidecar:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/multi-container/ruby/README.md"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 7,
                  "endLine": 129,
                  "endColumn": 5,
                  "snippet": {
                    "text": "Once the service is deployed, the console should print out a URL. You can test\nthe service by sending a curl request with your gcloud identity token in the headers:\n\n```bash\ncurl -H \\\n\"Authorization: Bearer $(gcloud auth print-identity-token)\" \\\n<SERVICE_URL>\n```\n",
                    "rendered": {
                      "text": "Once the service is deployed, the console should print out a URL. You can test\nthe service by sending a curl request with your gcloud identity token in the headers:\n\n```bash\ncurl -H \\\n\"Authorization: Bearer $(gcloud auth print-identity-token)\" \\\n<SERVICE_URL>\n```\n",
                      "markdown": "`Once the service is deployed, the console should print out a URL. You can test\nthe service by sending a curl request with your gcloud identity token in the headers:\n\n```bash\ncurl -H \\\n\"Authorization: Bearer $(gcloud auth print-identity-token)\" \\\n<SERVICE_URL>\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/multi-container/ruby/README.md"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 24,
                  "endLine": 126,
                  "endColumn": 30,
                  "snippet": {
                    "text": "```\n\nOnce the service is deployed, the console should print out a URL. You can test\nthe service by sending a curl request with your gcloud identity token in the headers:\n\n```bash\ncurl -H \\\n",
                    "rendered": {
                      "text": "```\n\nOnce the service is deployed, the console should print out a URL. You can test\nthe service by sending a curl request with your gcloud identity token in the headers:\n\n```bash\ncurl -H \\\n",
                      "markdown": "````\n\nOnce the service is deployed, the console should print out a URL. You can test\nthe service by sending a curl request with your gcloud identity token in the headers:\n\n```bash\ncurl -H \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/multi-container/ruby/README.md"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 3,
                  "endLine": 126,
                  "endColumn": 12,
                  "snippet": {
                    "text": "```\n\nOnce the service is deployed, the console should print out a URL. You can test\nthe service by sending a curl request with your gcloud identity token in the headers:\n\n```bash\ncurl -H \\\n",
                    "rendered": {
                      "text": "```\n\nOnce the service is deployed, the console should print out a URL. You can test\nthe service by sending a curl request with your gcloud identity token in the headers:\n\n```bash\ncurl -H \\\n",
                      "markdown": "````\n\nOnce the service is deployed, the console should print out a URL. You can test\nthe service by sending a curl request with your gcloud identity token in the headers:\n\n```bash\ncurl -H \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/multi-container/ruby/README.md"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 8,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "gcloud run services replace multicontainer.yaml\n```\n\nOnce the service is deployed, the console should print out a URL. You can test\nthe service by sending a curl request with your gcloud identity token in the headers:\n\n```bash\n",
                    "rendered": {
                      "text": "gcloud run services replace multicontainer.yaml\n```\n\nOnce the service is deployed, the console should print out a URL. You can test\nthe service by sending a curl request with your gcloud identity token in the headers:\n\n```bash\n",
                      "markdown": "`gcloud run services replace multicontainer.yaml\n```\n\nOnce the service is deployed, the console should print out a URL. You can test\nthe service by sending a curl request with your gcloud identity token in the headers:\n\n```bash\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/multi-container/ruby/README.md"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 27,
                  "endLine": 119,
                  "endColumn": 36,
                  "snippet": {
                    "text": "See [this documentation](https://cloud.google.com/sql/docs/postgres/roles-and-permissions)\nfor more details. The default service account will already have these permissions.\n\nFinally, you can deploy the service using:\n\n```bash\ngcloud run services replace multicontainer.yaml\n",
                    "rendered": {
                      "text": "See [this documentation](https://cloud.google.com/sql/docs/postgres/roles-and-permissions)\nfor more details. The default service account will already have these permissions.\n\nFinally, you can deploy the service using:\n\n```bash\ngcloud run services replace multicontainer.yaml\n",
                      "markdown": "`See [this documentation](https://cloud.google.com/sql/docs/postgres/roles-and-permissions)\nfor more details. The default service account will already have these permissions.\n\nFinally, you can deploy the service using:\n\n```bash\ngcloud run services replace multicontainer.yaml\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/multi-container/ruby/README.md"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 29,
                  "endLine": 117,
                  "endColumn": 38,
                  "snippet": {
                    "text": "Before deploying, you will need to make sure that the service account associated\nwith the Cloud Run deployment has the Cloud SQL Client role.\nSee [this documentation](https://cloud.google.com/sql/docs/postgres/roles-and-permissions)\nfor more details. The default service account will already have these permissions.\n\nFinally, you can deploy the service using:\n\n",
                    "rendered": {
                      "text": "Before deploying, you will need to make sure that the service account associated\nwith the Cloud Run deployment has the Cloud SQL Client role.\nSee [this documentation](https://cloud.google.com/sql/docs/postgres/roles-and-permissions)\nfor more details. The default service account will already have these permissions.\n\nFinally, you can deploy the service using:\n\n",
                      "markdown": "`Before deploying, you will need to make sure that the service account associated\nwith the Cloud Run deployment has the Cloud SQL Client role.\nSee [this documentation](https://cloud.google.com/sql/docs/postgres/roles-and-permissions)\nfor more details. The default service account will already have these permissions.\n\nFinally, you can deploy the service using:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/multi-container/ruby/README.md"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 53,
                  "endLine": 114,
                  "endColumn": 62,
                  "snippet": {
                    "text": "You can optionally use Secret Manager to store the database password. See\n[this documentation](https://cloud.google.com/run/docs/deploying#yaml) for more details.\n\nBefore deploying, you will need to make sure that the service account associated\nwith the Cloud Run deployment has the Cloud SQL Client role.\nSee [this documentation](https://cloud.google.com/sql/docs/postgres/roles-and-permissions)\nfor more details. The default service account will already have these permissions.\n",
                    "rendered": {
                      "text": "You can optionally use Secret Manager to store the database password. See\n[this documentation](https://cloud.google.com/run/docs/deploying#yaml) for more details.\n\nBefore deploying, you will need to make sure that the service account associated\nwith the Cloud Run deployment has the Cloud SQL Client role.\nSee [this documentation](https://cloud.google.com/sql/docs/postgres/roles-and-permissions)\nfor more details. The default service account will already have these permissions.\n",
                      "markdown": "`You can optionally use Secret Manager to store the database password. See\n[this documentation](https://cloud.google.com/run/docs/deploying#yaml) for more details.\n\nBefore deploying, you will need to make sure that the service account associated\nwith the Cloud Run deployment has the Cloud SQL Client role.\nSee [this documentation](https://cloud.google.com/sql/docs/postgres/roles-and-permissions)\nfor more details. The default service account will already have these permissions.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/multi-container/ruby/README.md"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 26,
                  "endLine": 105,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:latest\n        args:\n             # Ensure the port number on the --port argument matches the value of\n             # the DB_PORT env var on the my-app container.\n             - \"--port=5432\"\n             - \"<INSTANCE_CONNECTION_NAME>\"\n\n",
                    "rendered": {
                      "text": "        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:latest\n        args:\n             # Ensure the port number on the --port argument matches the value of\n             # the DB_PORT env var on the my-app container.\n             - \"--port=5432\"\n             - \"<INSTANCE_CONNECTION_NAME>\"\n\n",
                      "markdown": "`        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:latest\n        args:\n             # Ensure the port number on the --port argument matches the value of\n             # the DB_PORT env var on the my-app container.\n             - \"--port=5432\"\n             - \"<INSTANCE_CONNECTION_NAME>\"\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/multi-container/ruby/README.md"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 5,
                  "endLine": 74,
                  "snippet": {
                    "text": "\n```yaml\napiVersion: serving.knative.dev/v1\nkind: Service\nmetadata:\n  annotations:\n     run.googleapis.com/launch-stage: ALPHA\n  name: multicontainer-service\n",
                    "rendered": {
                      "text": "\n```yaml\napiVersion: serving.knative.dev/v1\nkind: Service\nmetadata:\n  annotations:\n     run.googleapis.com/launch-stage: ALPHA\n  name: multicontainer-service\n",
                      "markdown": "`\n```yaml\napiVersion: serving.knative.dev/v1\nkind: Service\nmetadata:\n  annotations:\n     run.googleapis.com/launch-stage: ALPHA\n  name: multicontainer-service\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/multi-container/ruby/Gemfile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/examples/disaster-recovery/failover.sh"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/connection_test.go"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 19,
                  "endLine": 127,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t\tresp *http.Response\n\t)\n\tfor i := 0; i < 10; i++ {\n\t\tresp, gErr = http.Get(\"http://localhost:9090/readiness\")\n\t\tif gErr != nil {\n\t\t\ttime.Sleep(100 * time.Millisecond)\n\t\t\tcontinue\n",
                    "rendered": {
                      "text": "\t\tresp *http.Response\n\t)\n\tfor i := 0; i < 10; i++ {\n\t\tresp, gErr = http.Get(\"http://localhost:9090/readiness\")\n\t\tif gErr != nil {\n\t\t\ttime.Sleep(100 * time.Millisecond)\n\t\t\tcontinue\n",
                      "markdown": "`\t\tresp *http.Response\n\t)\n\tfor i := 0; i < 10; i++ {\n\t\tresp, gErr = http.Get(\"http://localhost:9090/readiness\")\n\t\tif gErr != nil {\n\t\t\ttime.Sleep(100 * time.Millisecond)\n\t\t\tcontinue\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/connection_test.go"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 15,
                  "endLine": 35,
                  "endColumn": 64,
                  "snippet": {
                    "text": "// removeAuthEnvVar retrieves an OAuth2 token and a path to a service account key\n// and then unsets GOOGLE_APPLICATION_CREDENTIALS. It returns a cleanup function\n// that restores the original setup.\nfunc removeAuthEnvVar(t *testing.T) (*oauth2.Token, string, func()) {\n\tts, err := google.DefaultTokenSource(context.Background(),\n\t\t\"https://www.googleapis.com/auth/cloud-platform\",\n\t)\n",
                    "rendered": {
                      "text": "// removeAuthEnvVar retrieves an OAuth2 token and a path to a service account key\n// and then unsets GOOGLE_APPLICATION_CREDENTIALS. It returns a cleanup function\n// that restores the original setup.\nfunc removeAuthEnvVar(t *testing.T) (*oauth2.Token, string, func()) {\n\tts, err := google.DefaultTokenSource(context.Background(),\n\t\t\"https://www.googleapis.com/auth/cloud-platform\",\n\t)\n",
                      "markdown": "`// removeAuthEnvVar retrieves an OAuth2 token and a path to a service account key\n// and then unsets GOOGLE_APPLICATION_CREDENTIALS. It returns a cleanup function\n// that restores the original setup.\nfunc removeAuthEnvVar(t *testing.T) (*oauth2.Token, string, func()) {\n\tts, err := google.DefaultTokenSource(context.Background(),\n\t\t\"https://www.googleapis.com/auth/cloud-platform\",\n\t)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/connection_test.go"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/connection_test.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 61,
                  "endLine": 32,
                  "endColumn": 70,
                  "snippet": {
                    "text": "\nconst connTestTimeout = time.Minute\n\n// removeAuthEnvVar retrieves an OAuth2 token and a path to a service account key\n// and then unsets GOOGLE_APPLICATION_CREDENTIALS. It returns a cleanup function\n// that restores the original setup.\nfunc removeAuthEnvVar(t *testing.T) (*oauth2.Token, string, func()) {\n",
                    "rendered": {
                      "text": "\nconst connTestTimeout = time.Minute\n\n// removeAuthEnvVar retrieves an OAuth2 token and a path to a service account key\n// and then unsets GOOGLE_APPLICATION_CREDENTIALS. It returns a cleanup function\n// that restores the original setup.\nfunc removeAuthEnvVar(t *testing.T) (*oauth2.Token, string, func()) {\n",
                      "markdown": "`\nconst connTestTimeout = time.Minute\n\n// removeAuthEnvVar retrieves an OAuth2 token and a path to a service account key\n// and then unsets GOOGLE_APPLICATION_CREDENTIALS. It returns a cleanup function\n// that restores the original setup.\nfunc removeAuthEnvVar(t *testing.T) (*oauth2.Token, string, func()) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/mysql_test.go"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 13,
                  "endLine": 79,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t\tUser:                 *mysqlUser,\n\t\tPasswd:               *mysqlPass,\n\t\tDBName:               *mysqlDB,\n\t\tAllowNativePasswords: true,\n\t\t// re-use utility function to determine the Unix address in a\n\t\t// Windows-friendly way.\n\t\tAddr: proxy.UnixAddress(tmpDir, *mysqlConnName),\n",
                    "rendered": {
                      "text": "\t\tUser:                 *mysqlUser,\n\t\tPasswd:               *mysqlPass,\n\t\tDBName:               *mysqlDB,\n\t\tAllowNativePasswords: true,\n\t\t// re-use utility function to determine the Unix address in a\n\t\t// Windows-friendly way.\n\t\tAddr: proxy.UnixAddress(tmpDir, *mysqlConnName),\n",
                      "markdown": "`\t\tUser:                 *mysqlUser,\n\t\tPasswd:               *mysqlPass,\n\t\tDBName:               *mysqlDB,\n\t\tAllowNativePasswords: true,\n\t\t// re-use utility function to determine the Unix address in a\n\t\t// Windows-friendly way.\n\t\tAddr: proxy.UnixAddress(tmpDir, *mysqlConnName),\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/mysql_test.go"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 13,
                  "endLine": 52,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t\tUser:                 *mysqlUser,\n\t\tPasswd:               *mysqlPass,\n\t\tDBName:               *mysqlDB,\n\t\tAllowNativePasswords: true,\n\t\tAddr:                 \"127.0.0.1:3306\",\n\t\tNet:                  \"tcp\",\n\t}\n",
                    "rendered": {
                      "text": "\t\tUser:                 *mysqlUser,\n\t\tPasswd:               *mysqlPass,\n\t\tDBName:               *mysqlDB,\n\t\tAllowNativePasswords: true,\n\t\tAddr:                 \"127.0.0.1:3306\",\n\t\tNet:                  \"tcp\",\n\t}\n",
                      "markdown": "`\t\tUser:                 *mysqlUser,\n\t\tPasswd:               *mysqlPass,\n\t\tDBName:               *mysqlDB,\n\t\tAllowNativePasswords: true,\n\t\tAddr:                 \"127.0.0.1:3306\",\n\t\tNet:                  \"tcp\",\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/mysql_test.go"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 128,
                  "endLine": 30,
                  "endColumn": 136,
                  "snippet": {
                    "text": "var (\n\tmysqlConnName = flag.String(\"mysql_conn_name\", os.Getenv(\"MYSQL_CONNECTION_NAME\"), \"Cloud SQL MYSQL instance connection name, in the form of 'project:region:instance'.\")\n\tmysqlUser     = flag.String(\"mysql_user\", os.Getenv(\"MYSQL_USER\"), \"Name of database user.\")\n\tmysqlPass     = flag.String(\"mysql_pass\", os.Getenv(\"MYSQL_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tmysqlDB       = flag.String(\"mysql_db\", os.Getenv(\"MYSQL_DB\"), \"Name of the database to connect to.\")\n)\n\n",
                    "rendered": {
                      "text": "var (\n\tmysqlConnName = flag.String(\"mysql_conn_name\", os.Getenv(\"MYSQL_CONNECTION_NAME\"), \"Cloud SQL MYSQL instance connection name, in the form of 'project:region:instance'.\")\n\tmysqlUser     = flag.String(\"mysql_user\", os.Getenv(\"MYSQL_USER\"), \"Name of database user.\")\n\tmysqlPass     = flag.String(\"mysql_pass\", os.Getenv(\"MYSQL_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tmysqlDB       = flag.String(\"mysql_db\", os.Getenv(\"MYSQL_DB\"), \"Name of the database to connect to.\")\n)\n\n",
                      "markdown": "`var (\n\tmysqlConnName = flag.String(\"mysql_conn_name\", os.Getenv(\"MYSQL_CONNECTION_NAME\"), \"Cloud SQL MYSQL instance connection name, in the form of 'project:region:instance'.\")\n\tmysqlUser     = flag.String(\"mysql_user\", os.Getenv(\"MYSQL_USER\"), \"Name of database user.\")\n\tmysqlPass     = flag.String(\"mysql_pass\", os.Getenv(\"MYSQL_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tmysqlDB       = flag.String(\"mysql_db\", os.Getenv(\"MYSQL_DB\"), \"Name of the database to connect to.\")\n)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/mysql_test.go"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 69,
                  "endLine": 30,
                  "endColumn": 77,
                  "snippet": {
                    "text": "var (\n\tmysqlConnName = flag.String(\"mysql_conn_name\", os.Getenv(\"MYSQL_CONNECTION_NAME\"), \"Cloud SQL MYSQL instance connection name, in the form of 'project:region:instance'.\")\n\tmysqlUser     = flag.String(\"mysql_user\", os.Getenv(\"MYSQL_USER\"), \"Name of database user.\")\n\tmysqlPass     = flag.String(\"mysql_pass\", os.Getenv(\"MYSQL_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tmysqlDB       = flag.String(\"mysql_db\", os.Getenv(\"MYSQL_DB\"), \"Name of the database to connect to.\")\n)\n\n",
                    "rendered": {
                      "text": "var (\n\tmysqlConnName = flag.String(\"mysql_conn_name\", os.Getenv(\"MYSQL_CONNECTION_NAME\"), \"Cloud SQL MYSQL instance connection name, in the form of 'project:region:instance'.\")\n\tmysqlUser     = flag.String(\"mysql_user\", os.Getenv(\"MYSQL_USER\"), \"Name of database user.\")\n\tmysqlPass     = flag.String(\"mysql_pass\", os.Getenv(\"MYSQL_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tmysqlDB       = flag.String(\"mysql_db\", os.Getenv(\"MYSQL_DB\"), \"Name of the database to connect to.\")\n)\n\n",
                      "markdown": "`var (\n\tmysqlConnName = flag.String(\"mysql_conn_name\", os.Getenv(\"MYSQL_CONNECTION_NAME\"), \"Cloud SQL MYSQL instance connection name, in the form of 'project:region:instance'.\")\n\tmysqlUser     = flag.String(\"mysql_user\", os.Getenv(\"MYSQL_USER\"), \"Name of database user.\")\n\tmysqlPass     = flag.String(\"mysql_pass\", os.Getenv(\"MYSQL_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tmysqlDB       = flag.String(\"mysql_db\", os.Getenv(\"MYSQL_DB\"), \"Name of the database to connect to.\")\n)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/mysql_test.go"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 54,
                  "endLine": 28,
                  "endColumn": 108,
                  "snippet": {
                    "text": ")\n\nvar (\n\tmysqlConnName = flag.String(\"mysql_conn_name\", os.Getenv(\"MYSQL_CONNECTION_NAME\"), \"Cloud SQL MYSQL instance connection name, in the form of 'project:region:instance'.\")\n\tmysqlUser     = flag.String(\"mysql_user\", os.Getenv(\"MYSQL_USER\"), \"Name of database user.\")\n\tmysqlPass     = flag.String(\"mysql_pass\", os.Getenv(\"MYSQL_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tmysqlDB       = flag.String(\"mysql_db\", os.Getenv(\"MYSQL_DB\"), \"Name of the database to connect to.\")\n",
                    "rendered": {
                      "text": ")\n\nvar (\n\tmysqlConnName = flag.String(\"mysql_conn_name\", os.Getenv(\"MYSQL_CONNECTION_NAME\"), \"Cloud SQL MYSQL instance connection name, in the form of 'project:region:instance'.\")\n\tmysqlUser     = flag.String(\"mysql_user\", os.Getenv(\"MYSQL_USER\"), \"Name of database user.\")\n\tmysqlPass     = flag.String(\"mysql_pass\", os.Getenv(\"MYSQL_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tmysqlDB       = flag.String(\"mysql_db\", os.Getenv(\"MYSQL_DB\"), \"Name of the database to connect to.\")\n",
                      "markdown": "`)\n\nvar (\n\tmysqlConnName = flag.String(\"mysql_conn_name\", os.Getenv(\"MYSQL_CONNECTION_NAME\"), \"Cloud SQL MYSQL instance connection name, in the form of 'project:region:instance'.\")\n\tmysqlUser     = flag.String(\"mysql_user\", os.Getenv(\"MYSQL_USER\"), \"Name of database user.\")\n\tmysqlPass     = flag.String(\"mysql_pass\", os.Getenv(\"MYSQL_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tmysqlDB       = flag.String(\"mysql_db\", os.Getenv(\"MYSQL_DB\"), \"Name of the database to connect to.\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/mysql_test.go"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n\n//     https://www.apache.org/licenses/LICENSE-2.0\n\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n\n//     https://www.apache.org/licenses/LICENSE-2.0\n\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n\n//     https://www.apache.org/licenses/LICENSE-2.0\n\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/mysql_test.go"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 18,
                  "endLine": 187,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\nfunc TestMySQLHealthCheck(t *testing.T) {\n\tif testing.Short() {\n\t\tt.Skip(\"skipping MySQL integration tests\")\n\t}\n\ttestHealthCheck(t, *mysqlConnName)\n}\n",
                    "rendered": {
                      "text": "\nfunc TestMySQLHealthCheck(t *testing.T) {\n\tif testing.Short() {\n\t\tt.Skip(\"skipping MySQL integration tests\")\n\t}\n\ttestHealthCheck(t, *mysqlConnName)\n}\n",
                      "markdown": "`\nfunc TestMySQLHealthCheck(t *testing.T) {\n\tif testing.Short() {\n\t\tt.Skip(\"skipping MySQL integration tests\")\n\t}\n\ttestHealthCheck(t, *mysqlConnName)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/mysql_test.go"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 18,
                  "endLine": 158,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\nfunc TestMySQLGcloudAuth(t *testing.T) {\n\tif testing.Short() {\n\t\tt.Skip(\"skipping MySQL integration tests\")\n\t}\n\trequireMySQLVars(t)\n\n",
                    "rendered": {
                      "text": "\nfunc TestMySQLGcloudAuth(t *testing.T) {\n\tif testing.Short() {\n\t\tt.Skip(\"skipping MySQL integration tests\")\n\t}\n\trequireMySQLVars(t)\n\n",
                      "markdown": "`\nfunc TestMySQLGcloudAuth(t *testing.T) {\n\tif testing.Short() {\n\t\tt.Skip(\"skipping MySQL integration tests\")\n\t}\n\trequireMySQLVars(t)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/mysql_test.go"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 18,
                  "endLine": 103,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\nfunc TestMySQLAuthentication(t *testing.T) {\n\tif testing.Short() {\n\t\tt.Skip(\"skipping MySQL integration tests\")\n\t}\n\trequireMySQLVars(t)\n\n",
                    "rendered": {
                      "text": "\nfunc TestMySQLAuthentication(t *testing.T) {\n\tif testing.Short() {\n\t\tt.Skip(\"skipping MySQL integration tests\")\n\t}\n\trequireMySQLVars(t)\n\n",
                      "markdown": "`\nfunc TestMySQLAuthentication(t *testing.T) {\n\tif testing.Short() {\n\t\tt.Skip(\"skipping MySQL integration tests\")\n\t}\n\trequireMySQLVars(t)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/mysql_test.go"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 18,
                  "endLine": 91,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\nfunc TestMySQLImpersonation(t *testing.T) {\n\tif testing.Short() {\n\t\tt.Skip(\"skipping MySQL integration tests\")\n\t}\n\trequireMySQLVars(t)\n\n",
                    "rendered": {
                      "text": "\nfunc TestMySQLImpersonation(t *testing.T) {\n\tif testing.Short() {\n\t\tt.Skip(\"skipping MySQL integration tests\")\n\t}\n\trequireMySQLVars(t)\n\n",
                      "markdown": "`\nfunc TestMySQLImpersonation(t *testing.T) {\n\tif testing.Short() {\n\t\tt.Skip(\"skipping MySQL integration tests\")\n\t}\n\trequireMySQLVars(t)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/mysql_test.go"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 18,
                  "endLine": 69,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\nfunc TestMySQLUnix(t *testing.T) {\n\tif testing.Short() {\n\t\tt.Skip(\"skipping MySQL integration tests\")\n\t}\n\trequireMySQLVars(t)\n\ttmpDir, cleanup := createTempDir(t)\n",
                    "rendered": {
                      "text": "\nfunc TestMySQLUnix(t *testing.T) {\n\tif testing.Short() {\n\t\tt.Skip(\"skipping MySQL integration tests\")\n\t}\n\trequireMySQLVars(t)\n\ttmpDir, cleanup := createTempDir(t)\n",
                      "markdown": "`\nfunc TestMySQLUnix(t *testing.T) {\n\tif testing.Short() {\n\t\tt.Skip(\"skipping MySQL integration tests\")\n\t}\n\trequireMySQLVars(t)\n\ttmpDir, cleanup := createTempDir(t)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/mysql_test.go"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 18,
                  "endLine": 61,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\nfunc TestMySQLTCP(t *testing.T) {\n\tif testing.Short() {\n\t\tt.Skip(\"skipping MySQL integration tests\")\n\t}\n\trequireMySQLVars(t)\n\tproxyConnTest(t, []string{*mysqlConnName}, \"mysql\", mysqlDSN())\n",
                    "rendered": {
                      "text": "\nfunc TestMySQLTCP(t *testing.T) {\n\tif testing.Short() {\n\t\tt.Skip(\"skipping MySQL integration tests\")\n\t}\n\trequireMySQLVars(t)\n\tproxyConnTest(t, []string{*mysqlConnName}, \"mysql\", mysqlDSN())\n",
                      "markdown": "`\nfunc TestMySQLTCP(t *testing.T) {\n\tif testing.Short() {\n\t\tt.Skip(\"skipping MySQL integration tests\")\n\t}\n\trequireMySQLVars(t)\n\tproxyConnTest(t, []string{*mysqlConnName}, \"mysql\", mysqlDSN())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/mysql_test.go"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 94,
                  "endLine": 28,
                  "endColumn": 101,
                  "snippet": {
                    "text": ")\n\nvar (\n\tmysqlConnName = flag.String(\"mysql_conn_name\", os.Getenv(\"MYSQL_CONNECTION_NAME\"), \"Cloud SQL MYSQL instance connection name, in the form of 'project:region:instance'.\")\n\tmysqlUser     = flag.String(\"mysql_user\", os.Getenv(\"MYSQL_USER\"), \"Name of database user.\")\n\tmysqlPass     = flag.String(\"mysql_pass\", os.Getenv(\"MYSQL_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tmysqlDB       = flag.String(\"mysql_db\", os.Getenv(\"MYSQL_DB\"), \"Name of the database to connect to.\")\n",
                    "rendered": {
                      "text": ")\n\nvar (\n\tmysqlConnName = flag.String(\"mysql_conn_name\", os.Getenv(\"MYSQL_CONNECTION_NAME\"), \"Cloud SQL MYSQL instance connection name, in the form of 'project:region:instance'.\")\n\tmysqlUser     = flag.String(\"mysql_user\", os.Getenv(\"MYSQL_USER\"), \"Name of database user.\")\n\tmysqlPass     = flag.String(\"mysql_pass\", os.Getenv(\"MYSQL_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tmysqlDB       = flag.String(\"mysql_db\", os.Getenv(\"MYSQL_DB\"), \"Name of the database to connect to.\")\n",
                      "markdown": "`)\n\nvar (\n\tmysqlConnName = flag.String(\"mysql_conn_name\", os.Getenv(\"MYSQL_CONNECTION_NAME\"), \"Cloud SQL MYSQL instance connection name, in the form of 'project:region:instance'.\")\n\tmysqlUser     = flag.String(\"mysql_user\", os.Getenv(\"MYSQL_USER\"), \"Name of database user.\")\n\tmysqlPass     = flag.String(\"mysql_pass\", os.Getenv(\"MYSQL_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tmysqlDB       = flag.String(\"mysql_db\", os.Getenv(\"MYSQL_DB\"), \"Name of the database to connect to.\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/mysql_test.go"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\t\"testing\"\n\n\t\"github.com/GoogleCloudPlatform/cloud-sql-proxy/v2/internal/proxy\"\n\tmysql \"github.com/go-sql-driver/mysql\"\n)\n\nvar (\n",
                    "rendered": {
                      "text": "\t\"testing\"\n\n\t\"github.com/GoogleCloudPlatform/cloud-sql-proxy/v2/internal/proxy\"\n\tmysql \"github.com/go-sql-driver/mysql\"\n)\n\nvar (\n",
                      "markdown": "`\t\"testing\"\n\n\t\"github.com/GoogleCloudPlatform/cloud-sql-proxy/v2/internal/proxy\"\n\tmysql \"github.com/go-sql-driver/mysql\"\n)\n\nvar (\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/mysql_test.go"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 42,
                  "endLine": 15,
                  "endColumn": 49,
                  "snippet": {
                    "text": "// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// mysql_test runs various tests against a MySQL flavored Cloud SQL instance.\npackage tests\n\nimport (\n",
                    "rendered": {
                      "text": "// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// mysql_test runs various tests against a MySQL flavored Cloud SQL instance.\npackage tests\n\nimport (\n",
                      "markdown": "`// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// mysql_test runs various tests against a MySQL flavored Cloud SQL instance.\npackage tests\n\nimport (\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/fuse_test.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 19,
                  "endLine": 37,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n\thost := proxy.UnixAddress(tmpDir, *postgresConnName)\n\tdsn := fmt.Sprintf(\n\t\t\"host=%s user=%s password=%s database=%s sslmode=disable\",\n\t\thost, *postgresUser, *postgresPass, *postgresDB,\n\t)\n\ttestFUSE(t, tmpDir, host, dsn)\n",
                    "rendered": {
                      "text": "\n\thost := proxy.UnixAddress(tmpDir, *postgresConnName)\n\tdsn := fmt.Sprintf(\n\t\t\"host=%s user=%s password=%s database=%s sslmode=disable\",\n\t\thost, *postgresUser, *postgresPass, *postgresDB,\n\t)\n\ttestFUSE(t, tmpDir, host, dsn)\n",
                      "markdown": "`\n\thost := proxy.UnixAddress(tmpDir, *postgresConnName)\n\tdsn := fmt.Sprintf(\n\t\t\"host=%s user=%s password=%s database=%s sslmode=disable\",\n\t\thost, *postgresUser, *postgresPass, *postgresDB,\n\t)\n\ttestFUSE(t, tmpDir, host, dsn)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/fuse_test.go"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/fuse_test.go"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 30,
                  "endLine": 56,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\t\t\t}\n\t\t\ttime.Sleep(500 * time.Millisecond)\n\t\t}\n\t\treturn fmt.Errorf(\"failed to find FUSE mounted Unix socket: %v\", err)\n\t}\n\n\ttcs := []struct {\n",
                    "rendered": {
                      "text": "\t\t\t}\n\t\t\ttime.Sleep(500 * time.Millisecond)\n\t\t}\n\t\treturn fmt.Errorf(\"failed to find FUSE mounted Unix socket: %v\", err)\n\t}\n\n\ttcs := []struct {\n",
                      "markdown": "`\t\t\t}\n\t\t\ttime.Sleep(500 * time.Millisecond)\n\t\t}\n\t\treturn fmt.Errorf(\"failed to find FUSE mounted Unix socket: %v\", err)\n\t}\n\n\ttcs := []struct {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/common_test.go"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 49,
                  "endColumn": 5,
                  "snippet": {
                    "text": "type ProxyExec struct {\n\tOut io.ReadCloser\n\n\tcmd     *cmd.Command\n\tcancel  context.CancelFunc\n\tclosers []io.Closer\n\tdone    chan bool // closed once the cmd is completed\n",
                    "rendered": {
                      "text": "type ProxyExec struct {\n\tOut io.ReadCloser\n\n\tcmd     *cmd.Command\n\tcancel  context.CancelFunc\n\tclosers []io.Closer\n\tdone    chan bool // closed once the cmd is completed\n",
                      "markdown": "`type ProxyExec struct {\n\tOut io.ReadCloser\n\n\tcmd     *cmd.Command\n\tcancel  context.CancelFunc\n\tclosers []io.Closer\n\tdone    chan bool // closed once the cmd is completed\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/common_test.go"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 14,
                  "endLine": 41,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\timpersonatedUser = flag.String(\n\t\t\"impersonated_user\",\n\t\tos.Getenv(\"IMPERSONATED_USER\"),\n\t\t\"Name of the service account that supports impersonation (impersonator must have roles/iam.serviceAccountTokenCreator)\",\n\t)\n)\n\n",
                    "rendered": {
                      "text": "\timpersonatedUser = flag.String(\n\t\t\"impersonated_user\",\n\t\tos.Getenv(\"IMPERSONATED_USER\"),\n\t\t\"Name of the service account that supports impersonation (impersonator must have roles/iam.serviceAccountTokenCreator)\",\n\t)\n)\n\n",
                      "markdown": "`\timpersonatedUser = flag.String(\n\t\t\"impersonated_user\",\n\t\tos.Getenv(\"IMPERSONATED_USER\"),\n\t\t\"Name of the service account that supports impersonation (impersonator must have roles/iam.serviceAccountTokenCreator)\",\n\t)\n)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/postgres_test.go"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 37,
                  "endLine": 72,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\ttmpDir, cleanup := createTempDir(t)\n\tdefer cleanup()\n\n\tdsn := fmt.Sprintf(\"host=%s user=%s password=%s database=%s sslmode=disable\",\n\t\t// re-use utility function to determine the Unix address in a\n\t\t// Windows-friendly way.\n\t\tproxy.UnixAddress(tmpDir, *postgresConnName),\n",
                    "rendered": {
                      "text": "\ttmpDir, cleanup := createTempDir(t)\n\tdefer cleanup()\n\n\tdsn := fmt.Sprintf(\"host=%s user=%s password=%s database=%s sslmode=disable\",\n\t\t// re-use utility function to determine the Unix address in a\n\t\t// Windows-friendly way.\n\t\tproxy.UnixAddress(tmpDir, *postgresConnName),\n",
                      "markdown": "`\ttmpDir, cleanup := createTempDir(t)\n\tdefer cleanup()\n\n\tdsn := fmt.Sprintf(\"host=%s user=%s password=%s database=%s sslmode=disable\",\n\t\t// re-use utility function to determine the Unix address in a\n\t\t// Windows-friendly way.\n\t\tproxy.UnixAddress(tmpDir, *postgresConnName),\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/postgres_test.go"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 44,
                  "endLine": 51,
                  "endColumn": 52,
                  "snippet": {
                    "text": "}\n\nfunc postgresDSN() string {\n\treturn fmt.Sprintf(\"host=localhost user=%s password=%s database=%s sslmode=disable\",\n\t\t*postgresUser, *postgresPass, *postgresDB)\n}\n\n",
                    "rendered": {
                      "text": "}\n\nfunc postgresDSN() string {\n\treturn fmt.Sprintf(\"host=localhost user=%s password=%s database=%s sslmode=disable\",\n\t\t*postgresUser, *postgresPass, *postgresDB)\n}\n\n",
                      "markdown": "`}\n\nfunc postgresDSN() string {\n\treturn fmt.Sprintf(\"host=localhost user=%s password=%s database=%s sslmode=disable\",\n\t\t*postgresUser, *postgresPass, *postgresDB)\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/postgres_test.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 137,
                  "endLine": 32,
                  "endColumn": 145,
                  "snippet": {
                    "text": "onnection name, in the form of 'project:region:instance'.\")\n\tpostgresUser     = flag.String(\"postgres_user\", os.Getenv(\"POSTGRES_USER\"), \"Name of database user.\")\n\tpostgresPass     = flag.String(\"postgres_pass\", os.Getenv(\"POSTGRES_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tpostgresDB       = flag.String(\"postgres_db\", os.Getenv(\"POSTGRES_DB\"), \"Name of the database to connect to.\")\n\tpostgresIAMUser  = flag.String(\"postgres_user_iam\", os.Getenv(\"POSTGRES_USER_IAM\"), \"Name of database user configured with",
                    "rendered": {
                      "text": "onnection name, in the form of 'project:region:instance'.\")\n\tpostgresUser     = flag.String(\"postgres_user\", os.Getenv(\"POSTGRES_USER\"), \"Name of database user.\")\n\tpostgresPass     = flag.String(\"postgres_pass\", os.Getenv(\"POSTGRES_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tpostgresDB       = flag.String(\"postgres_db\", os.Getenv(\"POSTGRES_DB\"), \"Name of the database to connect to.\")\n\tpostgresIAMUser  = flag.String(\"postgres_user_iam\", os.Getenv(\"POSTGRES_USER_IAM\"), \"Name of database user configured with",
                      "markdown": "`onnection name, in the form of 'project:region:instance'.\")\n\tpostgresUser     = flag.String(\"postgres_user\", os.Getenv(\"POSTGRES_USER\"), \"Name of database user.\")\n\tpostgresPass     = flag.String(\"postgres_pass\", os.Getenv(\"POSTGRES_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tpostgresDB       = flag.String(\"postgres_db\", os.Getenv(\"POSTGRES_DB\"), \"Name of the database to connect to.\")\n\tpostgresIAMUser  = flag.String(\"postgres_user_iam\", os.Getenv(\"POSTGRES_USER_IAM\"), \"Name of database user configured with`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/postgres_test.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 78,
                  "endLine": 32,
                  "endColumn": 86,
                  "snippet": {
                    "text": "\"POSTGRES_CONNECTION_NAME\"), \"Cloud SQL Postgres instance connection name, in the form of 'project:region:instance'.\")\n\tpostgresUser     = flag.String(\"postgres_user\", os.Getenv(\"POSTGRES_USER\"), \"Name of database user.\")\n\tpostgresPass     = flag.String(\"postgres_pass\", os.Getenv(\"POSTGRES_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tpostgresDB       = flag.String(\"postgres_db\", os.Getenv(\"POSTGRES_DB\"), \"Name of the database to connect to.\")\n\tpostgresIAMUser  = flag.String(\"postgres_user_iam\", os.Getenv(\"",
                    "rendered": {
                      "text": "\"POSTGRES_CONNECTION_NAME\"), \"Cloud SQL Postgres instance connection name, in the form of 'project:region:instance'.\")\n\tpostgresUser     = flag.String(\"postgres_user\", os.Getenv(\"POSTGRES_USER\"), \"Name of database user.\")\n\tpostgresPass     = flag.String(\"postgres_pass\", os.Getenv(\"POSTGRES_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tpostgresDB       = flag.String(\"postgres_db\", os.Getenv(\"POSTGRES_DB\"), \"Name of the database to connect to.\")\n\tpostgresIAMUser  = flag.String(\"postgres_user_iam\", os.Getenv(\"",
                      "markdown": "`\"POSTGRES_CONNECTION_NAME\"), \"Cloud SQL Postgres instance connection name, in the form of 'project:region:instance'.\")\n\tpostgresUser     = flag.String(\"postgres_user\", os.Getenv(\"POSTGRES_USER\"), \"Name of database user.\")\n\tpostgresPass     = flag.String(\"postgres_pass\", os.Getenv(\"POSTGRES_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tpostgresDB       = flag.String(\"postgres_db\", os.Getenv(\"POSTGRES_DB\"), \"Name of the database to connect to.\")\n\tpostgresIAMUser  = flag.String(\"postgres_user_iam\", os.Getenv(\"`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/postgres_test.go"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 59,
                  "endLine": 34,
                  "endColumn": 68,
                  "snippet": {
                    "text": "sword for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tpostgresDB       = flag.String(\"postgres_db\", os.Getenv(\"POSTGRES_DB\"), \"Name of the database to connect to.\")\n\tpostgresIAMUser  = flag.String(\"postgres_user_iam\", os.Getenv(\"POSTGRES_USER_IAM\"), \"Name of database user configured with IAM DB Authentication.\")\n)\n\nfunc requirePostgresVars(t *testing.T) {\n\tswitch \"\" {\n\tcase *postgresConnName:\n\t\tt.Fatal(\"'postgres_conn_name' not set\")\n\tcase *postgresUser:\n\t\tt.Fatal(\"'postgres_user' not set\")\n\tcase *postgresPass:\n\t\tt.Fatal(\"'post",
                    "rendered": {
                      "text": "sword for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tpostgresDB       = flag.String(\"postgres_db\", os.Getenv(\"POSTGRES_DB\"), \"Name of the database to connect to.\")\n\tpostgresIAMUser  = flag.String(\"postgres_user_iam\", os.Getenv(\"POSTGRES_USER_IAM\"), \"Name of database user configured with IAM DB Authentication.\")\n)\n\nfunc requirePostgresVars(t *testing.T) {\n\tswitch \"\" {\n\tcase *postgresConnName:\n\t\tt.Fatal(\"'postgres_conn_name' not set\")\n\tcase *postgresUser:\n\t\tt.Fatal(\"'postgres_user' not set\")\n\tcase *postgresPass:\n\t\tt.Fatal(\"'post",
                      "markdown": "`sword for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tpostgresDB       = flag.String(\"postgres_db\", os.Getenv(\"POSTGRES_DB\"), \"Name of the database to connect to.\")\n\tpostgresIAMUser  = flag.String(\"postgres_user_iam\", os.Getenv(\"POSTGRES_USER_IAM\"), \"Name of database user configured with IAM DB Authentication.\")\n)\n\nfunc requirePostgresVars(t *testing.T) {\n\tswitch \"\" {\n\tcase *postgresConnName:\n\t\tt.Fatal(\"'postgres_conn_name' not set\")\n\tcase *postgresUser:\n\t\tt.Fatal(\"'postgres_user' not set\")\n\tcase *postgresPass:\n\t\tt.Fatal(\"'post`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/postgres_test.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 53,
                  "endLine": 33,
                  "endColumn": 62,
                  "snippet": {
                    "text": "ES_USER\"), \"Name of database user.\")\n\tpostgresPass     = flag.String(\"postgres_pass\", os.Getenv(\"POSTGRES_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tpostgresDB       = flag.String(\"postgres_db\", os.Getenv(\"POSTGRES_DB\"), \"Name of the database to connect to.\")\n\tpostgresIAMUser  = flag.String(\"postgres_user_iam\", os.Getenv(\"POSTGRES_USER_IAM\"), \"Name of database user configured with IAM DB Authentication.\")\n)\n\nfunc requirePostgresVars(t *testing.T) {\n\tswitch \"\" {\n\tcase *postgresConnName:\n\t\tt.Fatal(\"'postgre",
                    "rendered": {
                      "text": "ES_USER\"), \"Name of database user.\")\n\tpostgresPass     = flag.String(\"postgres_pass\", os.Getenv(\"POSTGRES_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tpostgresDB       = flag.String(\"postgres_db\", os.Getenv(\"POSTGRES_DB\"), \"Name of the database to connect to.\")\n\tpostgresIAMUser  = flag.String(\"postgres_user_iam\", os.Getenv(\"POSTGRES_USER_IAM\"), \"Name of database user configured with IAM DB Authentication.\")\n)\n\nfunc requirePostgresVars(t *testing.T) {\n\tswitch \"\" {\n\tcase *postgresConnName:\n\t\tt.Fatal(\"'postgre",
                      "markdown": "`ES_USER\"), \"Name of database user.\")\n\tpostgresPass     = flag.String(\"postgres_pass\", os.Getenv(\"POSTGRES_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tpostgresDB       = flag.String(\"postgres_db\", os.Getenv(\"POSTGRES_DB\"), \"Name of the database to connect to.\")\n\tpostgresIAMUser  = flag.String(\"postgres_user_iam\", os.Getenv(\"POSTGRES_USER_IAM\"), \"Name of database user configured with IAM DB Authentication.\")\n)\n\nfunc requirePostgresVars(t *testing.T) {\n\tswitch \"\" {\n\tcase *postgresConnName:\n\t\tt.Fatal(\"'postgre`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/postgres_test.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 55,
                  "endLine": 32,
                  "endColumn": 64,
                  "snippet": {
                    "text": "_conn_name\", os.Getenv(\"POSTGRES_CONNECTION_NAME\"), \"Cloud SQL Postgres instance connection name, in the form of 'project:region:instance'.\")\n\tpostgresUser     = flag.String(\"postgres_user\", os.Getenv(\"POSTGRES_USER\"), \"Name of database user.\")\n\tpostgresPass     = flag.String(\"postgres_pass\", os.Getenv(\"POSTGRES_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tpostgresDB       = flag.String(\"postgres_db\", os.Getenv(\"POSTGRES_DB\"), \"Name of the database to connect to.\")\n\tpostgresIAMUser  = flag.String(\"postgres_",
                    "rendered": {
                      "text": "_conn_name\", os.Getenv(\"POSTGRES_CONNECTION_NAME\"), \"Cloud SQL Postgres instance connection name, in the form of 'project:region:instance'.\")\n\tpostgresUser     = flag.String(\"postgres_user\", os.Getenv(\"POSTGRES_USER\"), \"Name of database user.\")\n\tpostgresPass     = flag.String(\"postgres_pass\", os.Getenv(\"POSTGRES_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tpostgresDB       = flag.String(\"postgres_db\", os.Getenv(\"POSTGRES_DB\"), \"Name of the database to connect to.\")\n\tpostgresIAMUser  = flag.String(\"postgres_",
                      "markdown": "`_conn_name\", os.Getenv(\"POSTGRES_CONNECTION_NAME\"), \"Cloud SQL Postgres instance connection name, in the form of 'project:region:instance'.\")\n\tpostgresUser     = flag.String(\"postgres_user\", os.Getenv(\"POSTGRES_USER\"), \"Name of database user.\")\n\tpostgresPass     = flag.String(\"postgres_pass\", os.Getenv(\"POSTGRES_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tpostgresDB       = flag.String(\"postgres_db\", os.Getenv(\"POSTGRES_DB\"), \"Name of the database to connect to.\")\n\tpostgresIAMUser  = flag.String(\"postgres_`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/postgres_test.go"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 55,
                  "endLine": 31,
                  "endColumn": 64,
                  "snippet": {
                    "text": "/internal/proxy\"\n\t_ \"github.com/jackc/pgx/v5/stdlib\"\n)\n\nvar (\n\tpostgresConnName = flag.String(\"postgres_conn_name\", os.Getenv(\"POSTGRES_CONNECTION_NAME\"), \"Cloud SQL Postgres instance connection name, in the form of 'project:region:instance'.\")\n\tpostgresUser     = flag.String(\"postgres_user\", os.Getenv(\"POSTGRES_USER\"), \"Name of database user.\")\n\tpostgresPass     = flag.String(\"postgres_pass\", os.Getenv(\"POSTGRES_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tpostgresDB       = flag.String(\"postgres_db\", os.G",
                    "rendered": {
                      "text": "/internal/proxy\"\n\t_ \"github.com/jackc/pgx/v5/stdlib\"\n)\n\nvar (\n\tpostgresConnName = flag.String(\"postgres_conn_name\", os.Getenv(\"POSTGRES_CONNECTION_NAME\"), \"Cloud SQL Postgres instance connection name, in the form of 'project:region:instance'.\")\n\tpostgresUser     = flag.String(\"postgres_user\", os.Getenv(\"POSTGRES_USER\"), \"Name of database user.\")\n\tpostgresPass     = flag.String(\"postgres_pass\", os.Getenv(\"POSTGRES_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tpostgresDB       = flag.String(\"postgres_db\", os.G",
                      "markdown": "`/internal/proxy\"\n\t_ \"github.com/jackc/pgx/v5/stdlib\"\n)\n\nvar (\n\tpostgresConnName = flag.String(\"postgres_conn_name\", os.Getenv(\"POSTGRES_CONNECTION_NAME\"), \"Cloud SQL Postgres instance connection name, in the form of 'project:region:instance'.\")\n\tpostgresUser     = flag.String(\"postgres_user\", os.Getenv(\"POSTGRES_USER\"), \"Name of database user.\")\n\tpostgresPass     = flag.String(\"postgres_pass\", os.Getenv(\"POSTGRES_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tpostgresDB       = flag.String(\"postgres_db\", os.G`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/postgres_test.go"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 60,
                  "endLine": 30,
                  "endColumn": 108,
                  "snippet": {
                    "text": ")\n\nvar (\n\tpostgresConnName = flag.String(\"postgres_conn_name\", os.Getenv(\"POSTGRES_CONNECTION_NAME\"), \"Cloud SQL Postgres instance connection name, in the form of 'project:region:instance'.\")\n\tpostgresUser     = flag.String(\"postgres_user\", os.Getenv(\"POSTGRES_USER\"), \"Name of database user.\")\n\tpostgresPass     = flag.String(\"postgres_pass\", os.Getenv(\"POSTGRES_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tpostgresDB       = flag.String(\"postgres_db\", os.Getenv(\"POSTGRES_DB\"), \"Name of the database to connect to.\")\n",
                    "rendered": {
                      "text": ")\n\nvar (\n\tpostgresConnName = flag.String(\"postgres_conn_name\", os.Getenv(\"POSTGRES_CONNECTION_NAME\"), \"Cloud SQL Postgres instance connection name, in the form of 'project:region:instance'.\")\n\tpostgresUser     = flag.String(\"postgres_user\", os.Getenv(\"POSTGRES_USER\"), \"Name of database user.\")\n\tpostgresPass     = flag.String(\"postgres_pass\", os.Getenv(\"POSTGRES_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tpostgresDB       = flag.String(\"postgres_db\", os.Getenv(\"POSTGRES_DB\"), \"Name of the database to connect to.\")\n",
                      "markdown": "`)\n\nvar (\n\tpostgresConnName = flag.String(\"postgres_conn_name\", os.Getenv(\"POSTGRES_CONNECTION_NAME\"), \"Cloud SQL Postgres instance connection name, in the form of 'project:region:instance'.\")\n\tpostgresUser     = flag.String(\"postgres_user\", os.Getenv(\"POSTGRES_USER\"), \"Name of database user.\")\n\tpostgresPass     = flag.String(\"postgres_pass\", os.Getenv(\"POSTGRES_PASS\"), \"Password for the database user; be careful when entering a password on the command line (it may go into your terminal's history).\")\n\tpostgresDB       = flag.String(\"postgres_db\", os.Getenv(\"POSTGRES_DB\"), \"Name of the database to connect to.\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/tests/postgres_test.go"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n\n//     https://www.apache.org/licenses/LICENSE-2.0\n\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n\n//     https://www.apache.org/licenses/LICENSE-2.0\n\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n\n//     https://www.apache.org/licenses/LICENSE-2.0\n\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/ISSUE_TEMPLATE/bug_report.yaml"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 13,
                  "endLine": 51,
                  "snippet": {
                    "text": "    attributes:\n      label: Stacktrace\n      description: \"Paste any relevant stacktrace or error you are running into here. Be sure to filter sensitive information!\"\n      render: bash\n  - type: textarea\n    id: repro\n    attributes:\n      label: Steps to reproduce?\n",
                    "rendered": {
                      "text": "    attributes:\n      label: Stacktrace\n      description: \"Paste any relevant stacktrace or error you are running into here. Be sure to filter sensitive information!\"\n      render: bash\n  - type: textarea\n    id: repro\n    attributes:\n      label: Steps to reproduce?\n",
                      "markdown": "`    attributes:\n      label: Stacktrace\n      description: \"Paste any relevant stacktrace or error you are running into here. Be sure to filter sensitive information!\"\n      render: bash\n  - type: textarea\n    id: repro\n    attributes:\n      label: Steps to reproduce?\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/ISSUE_TEMPLATE/bug_report.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/ISSUE_TEMPLATE/bug_report.yaml"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 13,
                  "endLine": 51,
                  "snippet": {
                    "text": "    attributes:\n      label: Stacktrace\n      description: \"Paste any relevant stacktrace or error you are running into here. Be sure to filter sensitive information!\"\n      render: bash\n  - type: textarea\n    id: repro\n    attributes:\n      label: Steps to reproduce?\n",
                    "rendered": {
                      "text": "    attributes:\n      label: Stacktrace\n      description: \"Paste any relevant stacktrace or error you are running into here. Be sure to filter sensitive information!\"\n      render: bash\n  - type: textarea\n    id: repro\n    attributes:\n      label: Steps to reproduce?\n",
                      "markdown": "`    attributes:\n      label: Stacktrace\n      description: \"Paste any relevant stacktrace or error you are running into here. Be sure to filter sensitive information!\"\n      render: bash\n  - type: textarea\n    id: repro\n    attributes:\n      label: Steps to reproduce?\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/ISSUE_TEMPLATE/question.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/ISSUE_TEMPLATE/question.yaml"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 79,
                  "endLine": 35,
                  "endColumn": 83,
                  "snippet": {
                    "text": "    attributes:\n      label: Question\n      description: \"What's your question? Please provide as much relevant information as possible to reduce turnaround time.\"\n      placeholder: \"Example: How do I connect using this connector with Private IP from Cloud Run?\"\n    validations:\n      required: true\n  - type: textarea\n",
                    "rendered": {
                      "text": "    attributes:\n      label: Question\n      description: \"What's your question? Please provide as much relevant information as possible to reduce turnaround time.\"\n      placeholder: \"Example: How do I connect using this connector with Private IP from Cloud Run?\"\n    validations:\n      required: true\n  - type: textarea\n",
                      "markdown": "`    attributes:\n      label: Question\n      description: \"What's your question? Please provide as much relevant information as possible to reduce turnaround time.\"\n      placeholder: \"Example: How do I connect using this connector with Private IP from Cloud Run?\"\n    validations:\n      required: true\n  - type: textarea\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/codeql.yml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/v1-periodic.yaml"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 14,
                  "endLine": 97,
                  "snippet": {
                    "text": "          TMPDIR: \"/tmp\"\n          TMP: \"${{ runner.temp }}\"\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -race -v ./... | tee test_results.txt\n\n      - name: Convert test output to XML\n",
                    "rendered": {
                      "text": "          TMPDIR: \"/tmp\"\n          TMP: \"${{ runner.temp }}\"\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -race -v ./... | tee test_results.txt\n\n      - name: Convert test output to XML\n",
                      "markdown": "`          TMPDIR: \"/tmp\"\n          TMP: \"${{ runner.temp }}\"\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -race -v ./... | tee test_results.txt\n\n      - name: Convert test output to XML\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/v1-periodic.yaml"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 20,
                  "endLine": 95,
                  "endColumn": 26,
                  "snippet": {
                    "text": "          SQLSERVER_DB: \"${{ steps.secrets.outputs.SQLSERVER_DB }}\"\n          TMPDIR: \"/tmp\"\n          TMP: \"${{ runner.temp }}\"\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -race -v ./... | tee test_results.txt\n",
                    "rendered": {
                      "text": "          SQLSERVER_DB: \"${{ steps.secrets.outputs.SQLSERVER_DB }}\"\n          TMPDIR: \"/tmp\"\n          TMP: \"${{ runner.temp }}\"\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -race -v ./... | tee test_results.txt\n",
                      "markdown": "`          SQLSERVER_DB: \"${{ steps.secrets.outputs.SQLSERVER_DB }}\"\n          TMPDIR: \"/tmp\"\n          TMP: \"${{ runner.temp }}\"\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -race -v ./... | tee test_results.txt\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/v1-periodic.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/v1-periodic.yaml"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 9,
                  "endLine": 126,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        if: ${{ github.event_name == 'schedule' && runner.os == 'macOS' && always() }}\n        run: |\n          curl https://github.com/googleapis/repo-automation-bots/releases/download/flakybot-1.1.0/flakybot-darwin-amd64 -o flakybot -s -L\n          chmod +x ./flakybot\n          ./flakybot --repo ${{github.repository}} --commit_hash ${{github.sha}} --build_url https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n",
                    "rendered": {
                      "text": "        if: ${{ github.event_name == 'schedule' && runner.os == 'macOS' && always() }}\n        run: |\n          curl https://github.com/googleapis/repo-automation-bots/releases/download/flakybot-1.1.0/flakybot-darwin-amd64 -o flakybot -s -L\n          chmod +x ./flakybot\n          ./flakybot --repo ${{github.repository}} --commit_hash ${{github.sha}} --build_url https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n",
                      "markdown": "`        if: ${{ github.event_name == 'schedule' && runner.os == 'macOS' && always() }}\n        run: |\n          curl https://github.com/googleapis/repo-automation-bots/releases/download/flakybot-1.1.0/flakybot-darwin-amd64 -o flakybot -s -L\n          chmod +x ./flakybot\n          ./flakybot --repo ${{github.repository}} --commit_hash ${{github.sha}} --build_url https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/v1-periodic.yaml"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 9,
                  "endLine": 125,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        # only run flakybot on periodic (schedule) event\n        if: ${{ github.event_name == 'schedule' && runner.os == 'macOS' && always() }}\n        run: |\n          curl https://github.com/googleapis/repo-automation-bots/releases/download/flakybot-1.1.0/flakybot-darwin-amd64 -o flakybot -s -L\n          chmod +x ./flakybot\n          ./flakybot --repo ${{github.repository}} --commit_hash ${{github.sha}} --build_url https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n",
                    "rendered": {
                      "text": "        # only run flakybot on periodic (schedule) event\n        if: ${{ github.event_name == 'schedule' && runner.os == 'macOS' && always() }}\n        run: |\n          curl https://github.com/googleapis/repo-automation-bots/releases/download/flakybot-1.1.0/flakybot-darwin-amd64 -o flakybot -s -L\n          chmod +x ./flakybot\n          ./flakybot --repo ${{github.repository}} --commit_hash ${{github.sha}} --build_url https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n",
                      "markdown": "`        # only run flakybot on periodic (schedule) event\n        if: ${{ github.event_name == 'schedule' && runner.os == 'macOS' && always() }}\n        run: |\n          curl https://github.com/googleapis/repo-automation-bots/releases/download/flakybot-1.1.0/flakybot-darwin-amd64 -o flakybot -s -L\n          chmod +x ./flakybot\n          ./flakybot --repo ${{github.repository}} --commit_hash ${{github.sha}} --build_url https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/v1-periodic.yaml"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 9,
                  "endLine": 118,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        # only run flakybot on periodic (schedule) event\n        if: ${{ github.event_name == 'schedule' && runner.os == 'Windows' && always() }}\n        run: |\n          curl https://github.com/googleapis/repo-automation-bots/releases/download/flakybot-1.1.0/flakybot.exe -o flakybot.exe -s -L\n          ./flakybot.exe --repo ${{github.repository}} --commit_hash ${{github.sha}} --build_url https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n\n      - name: FlakyBot (macOS)\n",
                    "rendered": {
                      "text": "        # only run flakybot on periodic (schedule) event\n        if: ${{ github.event_name == 'schedule' && runner.os == 'Windows' && always() }}\n        run: |\n          curl https://github.com/googleapis/repo-automation-bots/releases/download/flakybot-1.1.0/flakybot.exe -o flakybot.exe -s -L\n          ./flakybot.exe --repo ${{github.repository}} --commit_hash ${{github.sha}} --build_url https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n\n      - name: FlakyBot (macOS)\n",
                      "markdown": "`        # only run flakybot on periodic (schedule) event\n        if: ${{ github.event_name == 'schedule' && runner.os == 'Windows' && always() }}\n        run: |\n          curl https://github.com/googleapis/repo-automation-bots/releases/download/flakybot-1.1.0/flakybot.exe -o flakybot.exe -s -L\n          ./flakybot.exe --repo ${{github.repository}} --commit_hash ${{github.sha}} --build_url https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n\n      - name: FlakyBot (macOS)\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/v1-periodic.yaml"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 9,
                  "endLine": 111,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        if: ${{ github.event_name == 'schedule' && runner.os == 'Linux' && always() }}\n        run: |\n          curl https://github.com/googleapis/repo-automation-bots/releases/download/flakybot-1.1.0/flakybot -o flakybot -s -L\n          chmod +x ./flakybot\n          ./flakybot --repo ${{github.repository}} --commit_hash ${{github.sha}} --build_url https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n\n      - name: FlakyBot (Windows)\n",
                    "rendered": {
                      "text": "        if: ${{ github.event_name == 'schedule' && runner.os == 'Linux' && always() }}\n        run: |\n          curl https://github.com/googleapis/repo-automation-bots/releases/download/flakybot-1.1.0/flakybot -o flakybot -s -L\n          chmod +x ./flakybot\n          ./flakybot --repo ${{github.repository}} --commit_hash ${{github.sha}} --build_url https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n\n      - name: FlakyBot (Windows)\n",
                      "markdown": "`        if: ${{ github.event_name == 'schedule' && runner.os == 'Linux' && always() }}\n        run: |\n          curl https://github.com/googleapis/repo-automation-bots/releases/download/flakybot-1.1.0/flakybot -o flakybot -s -L\n          chmod +x ./flakybot\n          ./flakybot --repo ${{github.repository}} --commit_hash ${{github.sha}} --build_url https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n\n      - name: FlakyBot (Windows)\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/v1-periodic.yaml"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 9,
                  "endLine": 110,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        # only run flakybot on periodic (schedule) event\n        if: ${{ github.event_name == 'schedule' && runner.os == 'Linux' && always() }}\n        run: |\n          curl https://github.com/googleapis/repo-automation-bots/releases/download/flakybot-1.1.0/flakybot -o flakybot -s -L\n          chmod +x ./flakybot\n          ./flakybot --repo ${{github.repository}} --commit_hash ${{github.sha}} --build_url https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n\n",
                    "rendered": {
                      "text": "        # only run flakybot on periodic (schedule) event\n        if: ${{ github.event_name == 'schedule' && runner.os == 'Linux' && always() }}\n        run: |\n          curl https://github.com/googleapis/repo-automation-bots/releases/download/flakybot-1.1.0/flakybot -o flakybot -s -L\n          chmod +x ./flakybot\n          ./flakybot --repo ${{github.repository}} --commit_hash ${{github.sha}} --build_url https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n\n",
                      "markdown": "`        # only run flakybot on periodic (schedule) event\n        if: ${{ github.event_name == 'schedule' && runner.os == 'Linux' && always() }}\n        run: |\n          curl https://github.com/googleapis/repo-automation-bots/releases/download/flakybot-1.1.0/flakybot -o flakybot -s -L\n          chmod +x ./flakybot\n          ./flakybot --repo ${{github.repository}} --commit_hash ${{github.sha}} --build_url https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/v1-periodic.yaml"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 34,
                  "endLine": 98,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -race -v ./... | tee test_results.txt\n\n      - name: Convert test output to XML\n        if: ${{ github.event_name == 'schedule' && always() }}\n",
                    "rendered": {
                      "text": "        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -race -v ./... | tee test_results.txt\n\n      - name: Convert test output to XML\n        if: ${{ github.event_name == 'schedule' && always() }}\n",
                      "markdown": "`        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -race -v ./... | tee test_results.txt\n\n      - name: Convert test output to XML\n        if: ${{ github.event_name == 'schedule' && always() }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/v1-periodic.yaml"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 14,
                  "endLine": 97,
                  "snippet": {
                    "text": "          TMPDIR: \"/tmp\"\n          TMP: \"${{ runner.temp }}\"\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -race -v ./... | tee test_results.txt\n\n      - name: Convert test output to XML\n",
                    "rendered": {
                      "text": "          TMPDIR: \"/tmp\"\n          TMP: \"${{ runner.temp }}\"\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -race -v ./... | tee test_results.txt\n\n      - name: Convert test output to XML\n",
                      "markdown": "`          TMPDIR: \"/tmp\"\n          TMP: \"${{ runner.temp }}\"\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -race -v ./... | tee test_results.txt\n\n      - name: Convert test output to XML\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/v1-periodic.yaml"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 20,
                  "endLine": 95,
                  "endColumn": 26,
                  "snippet": {
                    "text": "          SQLSERVER_DB: \"${{ steps.secrets.outputs.SQLSERVER_DB }}\"\n          TMPDIR: \"/tmp\"\n          TMP: \"${{ runner.temp }}\"\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -race -v ./... | tee test_results.txt\n",
                    "rendered": {
                      "text": "          SQLSERVER_DB: \"${{ steps.secrets.outputs.SQLSERVER_DB }}\"\n          TMPDIR: \"/tmp\"\n          TMP: \"${{ runner.temp }}\"\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -race -v ./... | tee test_results.txt\n",
                      "markdown": "`          SQLSERVER_DB: \"${{ steps.secrets.outputs.SQLSERVER_DB }}\"\n          TMPDIR: \"/tmp\"\n          TMP: \"${{ runner.temp }}\"\n        # specifying bash shell ensures a failure in a piped process isn't lost by using `set -eo pipefail`\n        shell: bash\n        run: |\n          go test -race -v ./... | tee test_results.txt\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/v1-periodic.yaml"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 14,
                  "endLine": 75,
                  "endColumn": 19,
                  "snippet": {
                    "text": "      - name: Enable fuse config (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo sed -i 's/#user_allow_other/user_allow_other/g' /etc/fuse.conf\n\n      - name: Run tests\n        env:\n",
                    "rendered": {
                      "text": "      - name: Enable fuse config (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo sed -i 's/#user_allow_other/user_allow_other/g' /etc/fuse.conf\n\n      - name: Run tests\n        env:\n",
                      "markdown": "`      - name: Enable fuse config (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo sed -i 's/#user_allow_other/user_allow_other/g' /etc/fuse.conf\n\n      - name: Run tests\n        env:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/lint.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/lint.yaml"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 24,
                  "endLine": 37,
                  "endColumn": 29,
                  "snippet": {
                    "text": "          Verify go mod tidy. If you're reading this and the check has\n          failed, run `goimports -w . && go mod tidy && golangci-lint run`\n        run: |\n          go mod tidy && git diff --exit-code\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@971e284b6050e8a5849b72094c50ab08da042db8 # v6.1.1\n        with:\n",
                    "rendered": {
                      "text": "          Verify go mod tidy. If you're reading this and the check has\n          failed, run `goimports -w . && go mod tidy && golangci-lint run`\n        run: |\n          go mod tidy && git diff --exit-code\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@971e284b6050e8a5849b72094c50ab08da042db8 # v6.1.1\n        with:\n",
                      "markdown": "`          Verify go mod tidy. If you're reading this and the check has\n          failed, run `goimports -w . && go mod tidy && golangci-lint run`\n        run: |\n          go mod tidy && git diff --exit-code\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@971e284b6050e8a5849b72094c50ab08da042db8 # v6.1.1\n        with:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/coverage.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/coverage.yaml"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 75,
                  "endLine": 45,
                  "endColumn": 80,
                  "snippet": {
                    "text": "      - name: Calculate PR code coverage\n        run: |\n          go test -short -coverprofile pr_cover.out ./... || true\n          export PR_COVER=$(go tool cover -func pr_cover.out | grep total | awk '{print substr($3, 1, length($3)-1)}')\n          echo \"PR_COVER=$PR_COVER\" >> $GITHUB_ENV\n\n      - name: Verify code coverage. If your reading this and the step has failed, please add tests to cover your changes.\n",
                    "rendered": {
                      "text": "      - name: Calculate PR code coverage\n        run: |\n          go test -short -coverprofile pr_cover.out ./... || true\n          export PR_COVER=$(go tool cover -func pr_cover.out | grep total | awk '{print substr($3, 1, length($3)-1)}')\n          echo \"PR_COVER=$PR_COVER\" >> $GITHUB_ENV\n\n      - name: Verify code coverage. If your reading this and the step has failed, please add tests to cover your changes.\n",
                      "markdown": "`      - name: Calculate PR code coverage\n        run: |\n          go test -short -coverprofile pr_cover.out ./... || true\n          export PR_COVER=$(go tool cover -func pr_cover.out | grep total | awk '{print substr($3, 1, length($3)-1)}')\n          echo \"PR_COVER=$PR_COVER\" >> $GITHUB_ENV\n\n      - name: Verify code coverage. If your reading this and the step has failed, please add tests to cover your changes.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/coverage.yaml"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 62,
                  "endLine": 45,
                  "endColumn": 68,
                  "snippet": {
                    "text": "      - name: Calculate PR code coverage\n        run: |\n          go test -short -coverprofile pr_cover.out ./... || true\n          export PR_COVER=$(go tool cover -func pr_cover.out | grep total | awk '{print substr($3, 1, length($3)-1)}')\n          echo \"PR_COVER=$PR_COVER\" >> $GITHUB_ENV\n\n      - name: Verify code coverage. If your reading this and the step has failed, please add tests to cover your changes.\n",
                    "rendered": {
                      "text": "      - name: Calculate PR code coverage\n        run: |\n          go test -short -coverprofile pr_cover.out ./... || true\n          export PR_COVER=$(go tool cover -func pr_cover.out | grep total | awk '{print substr($3, 1, length($3)-1)}')\n          echo \"PR_COVER=$PR_COVER\" >> $GITHUB_ENV\n\n      - name: Verify code coverage. If your reading this and the step has failed, please add tests to cover your changes.\n",
                      "markdown": "`      - name: Calculate PR code coverage\n        run: |\n          go test -short -coverprofile pr_cover.out ./... || true\n          export PR_COVER=$(go tool cover -func pr_cover.out | grep total | awk '{print substr($3, 1, length($3)-1)}')\n          echo \"PR_COVER=$PR_COVER\" >> $GITHUB_ENV\n\n      - name: Verify code coverage. If your reading this and the step has failed, please add tests to cover your changes.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/coverage.yaml"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 81,
                  "endLine": 37,
                  "endColumn": 86,
                  "snippet": {
                    "text": "      - name: Calculate base code coverage\n        run: |\n          go test -short -coverprofile current_cover.out ./... || true\n          export CUR_COVER=$(go tool cover -func current_cover.out | grep total | awk '{print substr($3, 1, length($3)-1)}')\n          echo \"CUR_COVER=$CUR_COVER\" >> $GITHUB_ENV\n\n      - name: Checkout PR branch\n",
                    "rendered": {
                      "text": "      - name: Calculate base code coverage\n        run: |\n          go test -short -coverprofile current_cover.out ./... || true\n          export CUR_COVER=$(go tool cover -func current_cover.out | grep total | awk '{print substr($3, 1, length($3)-1)}')\n          echo \"CUR_COVER=$CUR_COVER\" >> $GITHUB_ENV\n\n      - name: Checkout PR branch\n",
                      "markdown": "`      - name: Calculate base code coverage\n        run: |\n          go test -short -coverprofile current_cover.out ./... || true\n          export CUR_COVER=$(go tool cover -func current_cover.out | grep total | awk '{print substr($3, 1, length($3)-1)}')\n          echo \"CUR_COVER=$CUR_COVER\" >> $GITHUB_ENV\n\n      - name: Checkout PR branch\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/workflows/coverage.yaml"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 68,
                  "endLine": 37,
                  "endColumn": 74,
                  "snippet": {
                    "text": "      - name: Calculate base code coverage\n        run: |\n          go test -short -coverprofile current_cover.out ./... || true\n          export CUR_COVER=$(go tool cover -func current_cover.out | grep total | awk '{print substr($3, 1, length($3)-1)}')\n          echo \"CUR_COVER=$CUR_COVER\" >> $GITHUB_ENV\n\n      - name: Checkout PR branch\n",
                    "rendered": {
                      "text": "      - name: Calculate base code coverage\n        run: |\n          go test -short -coverprofile current_cover.out ./... || true\n          export CUR_COVER=$(go tool cover -func current_cover.out | grep total | awk '{print substr($3, 1, length($3)-1)}')\n          echo \"CUR_COVER=$CUR_COVER\" >> $GITHUB_ENV\n\n      - name: Checkout PR branch\n",
                      "markdown": "`      - name: Calculate base code coverage\n        run: |\n          go test -short -coverprofile current_cover.out ./... || true\n          export CUR_COVER=$(go tool cover -func current_cover.out | grep total | awk '{print substr($3, 1, length($3)-1)}')\n          echo \"CUR_COVER=$CUR_COVER\" >> $GITHUB_ENV\n\n      - name: Checkout PR branch\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/blunderbuss.yml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/flakybot.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/.github/header-checker-lint.yml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/Dockerfile.bookworm"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 11,
                  "endLine": 35,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN groupadd -g 65532 -r nonroot && useradd -u 65532 -g 65532 -r nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n",
                    "rendered": {
                      "text": "\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN groupadd -g 65532 -r nonroot && useradd -u 65532 -g 65532 -r nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n",
                      "markdown": "`\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN groupadd -g 65532 -r nonroot && useradd -u 65532 -g 65532 -r nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/Dockerfile.bookworm"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 11,
                  "endLine": 33,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\nLABEL org.opencontainers.image.source=\"https://github.com/GoogleCloudPlatform/cloud-sql-proxy\"\n\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\n",
                    "rendered": {
                      "text": "\nLABEL org.opencontainers.image.source=\"https://github.com/GoogleCloudPlatform/cloud-sql-proxy\"\n\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\n",
                      "markdown": "`\nLABEL org.opencontainers.image.source=\"https://github.com/GoogleCloudPlatform/cloud-sql-proxy\"\n\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/Dockerfile.bookworm"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/Dockerfile.bookworm"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 48,
                  "endLine": 35,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN groupadd -g 65532 -r nonroot && useradd -u 65532 -g 65532 -r nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n",
                    "rendered": {
                      "text": "\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN groupadd -g 65532 -r nonroot && useradd -u 65532 -g 65532 -r nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n",
                      "markdown": "`\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN groupadd -g 65532 -r nonroot && useradd -u 65532 -g 65532 -r nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/Dockerfile.bookworm"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN groupadd -g 65532 -r nonroot && useradd -u 65532 -g 65532 -r nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n",
                    "rendered": {
                      "text": "\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN groupadd -g 65532 -r nonroot && useradd -u 65532 -g 65532 -r nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n",
                      "markdown": "`\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN groupadd -g 65532 -r nonroot && useradd -u 65532 -g 65532 -r nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/Dockerfile.bookworm"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 3,
                  "endLine": 35,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN groupadd -g 65532 -r nonroot && useradd -u 65532 -g 65532 -r nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n",
                    "rendered": {
                      "text": "\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN groupadd -g 65532 -r nonroot && useradd -u 65532 -g 65532 -r nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n",
                      "markdown": "`\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN groupadd -g 65532 -r nonroot && useradd -u 65532 -g 65532 -r nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/Dockerfile.bookworm"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 49,
                  "endLine": 35,
                  "snippet": {
                    "text": "LABEL org.opencontainers.image.source=\"https://github.com/GoogleCloudPlatform/cloud-sql-proxy\"\n\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN groupadd -g 65532 -r nonroot && useradd -u 65532 -g 65532 -r nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n",
                    "rendered": {
                      "text": "LABEL org.opencontainers.image.source=\"https://github.com/GoogleCloudPlatform/cloud-sql-proxy\"\n\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN groupadd -g 65532 -r nonroot && useradd -u 65532 -g 65532 -r nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n",
                      "markdown": "`LABEL org.opencontainers.image.source=\"https://github.com/GoogleCloudPlatform/cloud-sql-proxy\"\n\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN groupadd -g 65532 -r nonroot && useradd -u 65532 -g 65532 -r nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/Dockerfile.bookworm"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 21,
                  "endLine": 33,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\nLABEL org.opencontainers.image.source=\"https://github.com/GoogleCloudPlatform/cloud-sql-proxy\"\n\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\n",
                    "rendered": {
                      "text": "\nLABEL org.opencontainers.image.source=\"https://github.com/GoogleCloudPlatform/cloud-sql-proxy\"\n\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\n",
                      "markdown": "`\nLABEL org.opencontainers.image.source=\"https://github.com/GoogleCloudPlatform/cloud-sql-proxy\"\n\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/Dockerfile.bookworm"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 3,
                  "endLine": 33,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\nLABEL org.opencontainers.image.source=\"https://github.com/GoogleCloudPlatform/cloud-sql-proxy\"\n\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\n",
                    "rendered": {
                      "text": "\nLABEL org.opencontainers.image.source=\"https://github.com/GoogleCloudPlatform/cloud-sql-proxy\"\n\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\n",
                      "markdown": "`\nLABEL org.opencontainers.image.source=\"https://github.com/GoogleCloudPlatform/cloud-sql-proxy\"\n\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/Dockerfile.bullseye"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 11,
                  "endLine": 35,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN groupadd -g 65532 -r nonroot && useradd -u 65532 -g 65532 -r nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n",
                    "rendered": {
                      "text": "\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN groupadd -g 65532 -r nonroot && useradd -u 65532 -g 65532 -r nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n",
                      "markdown": "`\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN groupadd -g 65532 -r nonroot && useradd -u 65532 -g 65532 -r nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/Dockerfile.bullseye"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 11,
                  "endLine": 33,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\nLABEL org.opencontainers.image.source=\"https://github.com/GoogleCloudPlatform/cloud-sql-proxy\"\n\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\n",
                    "rendered": {
                      "text": "\nLABEL org.opencontainers.image.source=\"https://github.com/GoogleCloudPlatform/cloud-sql-proxy\"\n\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\n",
                      "markdown": "`\nLABEL org.opencontainers.image.source=\"https://github.com/GoogleCloudPlatform/cloud-sql-proxy\"\n\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/Dockerfile.bullseye"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/Dockerfile.bullseye"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 48,
                  "endLine": 35,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN groupadd -g 65532 -r nonroot && useradd -u 65532 -g 65532 -r nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n",
                    "rendered": {
                      "text": "\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN groupadd -g 65532 -r nonroot && useradd -u 65532 -g 65532 -r nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n",
                      "markdown": "`\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN groupadd -g 65532 -r nonroot && useradd -u 65532 -g 65532 -r nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/Dockerfile.bullseye"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN groupadd -g 65532 -r nonroot && useradd -u 65532 -g 65532 -r nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n",
                    "rendered": {
                      "text": "\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN groupadd -g 65532 -r nonroot && useradd -u 65532 -g 65532 -r nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n",
                      "markdown": "`\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN groupadd -g 65532 -r nonroot && useradd -u 65532 -g 65532 -r nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/Dockerfile.bullseye"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 3,
                  "endLine": 35,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN groupadd -g 65532 -r nonroot && useradd -u 65532 -g 65532 -r nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n",
                    "rendered": {
                      "text": "\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN groupadd -g 65532 -r nonroot && useradd -u 65532 -g 65532 -r nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n",
                      "markdown": "`\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN groupadd -g 65532 -r nonroot && useradd -u 65532 -g 65532 -r nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/Dockerfile.bullseye"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 49,
                  "endLine": 35,
                  "snippet": {
                    "text": "LABEL org.opencontainers.image.source=\"https://github.com/GoogleCloudPlatform/cloud-sql-proxy\"\n\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN groupadd -g 65532 -r nonroot && useradd -u 65532 -g 65532 -r nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n",
                    "rendered": {
                      "text": "LABEL org.opencontainers.image.source=\"https://github.com/GoogleCloudPlatform/cloud-sql-proxy\"\n\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN groupadd -g 65532 -r nonroot && useradd -u 65532 -g 65532 -r nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n",
                      "markdown": "`LABEL org.opencontainers.image.source=\"https://github.com/GoogleCloudPlatform/cloud-sql-proxy\"\n\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\nRUN groupadd -g 65532 -r nonroot && useradd -u 65532 -g 65532 -r nonroot\n# Set the uid as an integer for compatibility with runAsNonRoot in Kubernetes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/Dockerfile.bullseye"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 21,
                  "endLine": 33,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\nLABEL org.opencontainers.image.source=\"https://github.com/GoogleCloudPlatform/cloud-sql-proxy\"\n\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\n",
                    "rendered": {
                      "text": "\nLABEL org.opencontainers.image.source=\"https://github.com/GoogleCloudPlatform/cloud-sql-proxy\"\n\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\n",
                      "markdown": "`\nLABEL org.opencontainers.image.source=\"https://github.com/GoogleCloudPlatform/cloud-sql-proxy\"\n\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/Dockerfile.bullseye"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 3,
                  "endLine": 33,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\nLABEL org.opencontainers.image.source=\"https://github.com/GoogleCloudPlatform/cloud-sql-proxy\"\n\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\n",
                    "rendered": {
                      "text": "\nLABEL org.opencontainers.image.source=\"https://github.com/GoogleCloudPlatform/cloud-sql-proxy\"\n\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\n",
                      "markdown": "`\nLABEL org.opencontainers.image.source=\"https://github.com/GoogleCloudPlatform/cloud-sql-proxy\"\n\nRUN apt-get update && apt-get install -y ca-certificates\n# Install fuse and allow enable non-root users to mount\nRUN apt-get update && apt-get install -y fuse && sed -i 's/^#user_allow_other$/user_allow_other/g' /etc/fuse.conf\n# Add a non-root user matching the nonroot user from the main container\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/windows-service-guide.md"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 12,
                  "endLine": 79,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\nThe alternative *Automatic (Delayed Start)* startup type was introduced\nby Microsoft for services that are not required for operating system operations\nlike Windows Update and similar services.\n\nHowever, if the primary purpose of the local machine is to provide services\nwhich require access to the cloud database, then the start of the service\n",
                    "rendered": {
                      "text": "\nThe alternative *Automatic (Delayed Start)* startup type was introduced\nby Microsoft for services that are not required for operating system operations\nlike Windows Update and similar services.\n\nHowever, if the primary purpose of the local machine is to provide services\nwhich require access to the cloud database, then the start of the service\n",
                      "markdown": "`\nThe alternative *Automatic (Delayed Start)* startup type was introduced\nby Microsoft for services that are not required for operating system operations\nlike Windows Update and similar services.\n\nHowever, if the primary purpose of the local machine is to provide services\nwhich require access to the cloud database, then the start of the service\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/windows-service-guide.md"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 65,
                  "endLine": 83,
                  "snippet": {
                    "text": "like Windows Update and similar services.\n\nHowever, if the primary purpose of the local machine is to provide services\nwhich require access to the cloud database, then the start of the service\nshould not be delayed. \n\nDelayed services might be started even minutes after operating system startup.\n",
                    "rendered": {
                      "text": "like Windows Update and similar services.\n\nHowever, if the primary purpose of the local machine is to provide services\nwhich require access to the cloud database, then the start of the service\nshould not be delayed. \n\nDelayed services might be started even minutes after operating system startup.\n",
                      "markdown": "`like Windows Update and similar services.\n\nHowever, if the primary purpose of the local machine is to provide services\nwhich require access to the cloud database, then the start of the service\nshould not be delayed. \n\nDelayed services might be started even minutes after operating system startup.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/windows-service-guide.md"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 3,
                  "endLine": 75,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n### Why not using *Automatic (Delayed Start)* startup type?\n\nThe service is installed in the *Automatic* startup type, by default.\n\nThe alternative *Automatic (Delayed Start)* startup type was introduced\nby Microsoft for services that are not required for operating system operations\n",
                    "rendered": {
                      "text": "\n### Why not using *Automatic (Delayed Start)* startup type?\n\nThe service is installed in the *Automatic* startup type, by default.\n\nThe alternative *Automatic (Delayed Start)* startup type was introduced\nby Microsoft for services that are not required for operating system operations\n",
                      "markdown": "`\n### Why not using *Automatic (Delayed Start)* startup type?\n\nThe service is installed in the *Automatic* startup type, by default.\n\nThe alternative *Automatic (Delayed Start)* startup type was introduced\nby Microsoft for services that are not required for operating system operations\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/windows-service-guide.md"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 60,
                  "endLine": 61,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\nThe error message `The specified service has been marked for deletion.` occurs when \nreinstalling the service and the previous deletion request could not be completed\n(e.g. because the service was still running or opened in the service manager).\n\nIn this case, the local machine needs to be restarted.\n\n",
                    "rendered": {
                      "text": "\nThe error message `The specified service has been marked for deletion.` occurs when \nreinstalling the service and the previous deletion request could not be completed\n(e.g. because the service was still running or opened in the service manager).\n\nIn this case, the local machine needs to be restarted.\n\n",
                      "markdown": "`\nThe error message `The specified service has been marked for deletion.` occurs when \nreinstalling the service and the previous deletion request could not be completed\n(e.g. because the service was still running or opened in the service manager).\n\nIn this case, the local machine needs to be restarted.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/windows-service-guide.md"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 17,
                  "endLine": 61,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\nThe error message `The specified service has been marked for deletion.` occurs when \nreinstalling the service and the previous deletion request could not be completed\n(e.g. because the service was still running or opened in the service manager).\n\nIn this case, the local machine needs to be restarted.\n\n",
                    "rendered": {
                      "text": "\nThe error message `The specified service has been marked for deletion.` occurs when \nreinstalling the service and the previous deletion request could not be completed\n(e.g. because the service was still running or opened in the service manager).\n\nIn this case, the local machine needs to be restarted.\n\n",
                      "markdown": "`\nThe error message `The specified service has been marked for deletion.` occurs when \nreinstalling the service and the previous deletion request could not be completed\n(e.g. because the service was still running or opened in the service manager).\n\nIn this case, the local machine needs to be restarted.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/windows-service-guide.md"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 16,
                  "endLine": 60,
                  "endColumn": 25,
                  "snippet": {
                    "text": "### Error Message: *The specified service has been marked for deletion.*\n\nThe error message `The specified service has been marked for deletion.` occurs when \nreinstalling the service and the previous deletion request could not be completed\n(e.g. because the service was still running or opened in the service manager).\n\nIn this case, the local machine needs to be restarted.\n",
                    "rendered": {
                      "text": "### Error Message: *The specified service has been marked for deletion.*\n\nThe error message `The specified service has been marked for deletion.` occurs when \nreinstalling the service and the previous deletion request could not be completed\n(e.g. because the service was still running or opened in the service manager).\n\nIn this case, the local machine needs to be restarted.\n",
                      "markdown": "`### Error Message: *The specified service has been marked for deletion.*\n\nThe error message `The specified service has been marked for deletion.` occurs when \nreinstalling the service and the previous deletion request could not be completed\n(e.g. because the service was still running or opened in the service manager).\n\nIn this case, the local machine needs to be restarted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/windows-service-guide.md"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 32,
                  "endLine": 59,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n### Error Message: *The specified service has been marked for deletion.*\n\nThe error message `The specified service has been marked for deletion.` occurs when \nreinstalling the service and the previous deletion request could not be completed\n(e.g. because the service was still running or opened in the service manager).\n\n",
                    "rendered": {
                      "text": "\n### Error Message: *The specified service has been marked for deletion.*\n\nThe error message `The specified service has been marked for deletion.` occurs when \nreinstalling the service and the previous deletion request could not be completed\n(e.g. because the service was still running or opened in the service manager).\n\n",
                      "markdown": "`\n### Error Message: *The specified service has been marked for deletion.*\n\nThe error message `The specified service has been marked for deletion.` occurs when \nreinstalling the service and the previous deletion request could not be completed\n(e.g. because the service was still running or opened in the service manager).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/windows-service-guide.md"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 33,
                  "endLine": 57,
                  "endColumn": 42,
                  "snippet": {
                    "text": "- `cloud-sql-proxy.log`\n- `cloud-sql-proxy-2016-11-04T18-30-00.000.log`\n\n### Error Message: *The specified service has been marked for deletion.*\n\nThe error message `The specified service has been marked for deletion.` occurs when \nreinstalling the service and the previous deletion request could not be completed\n",
                    "rendered": {
                      "text": "- `cloud-sql-proxy.log`\n- `cloud-sql-proxy-2016-11-04T18-30-00.000.log`\n\n### Error Message: *The specified service has been marked for deletion.*\n\nThe error message `The specified service has been marked for deletion.` occurs when \nreinstalling the service and the previous deletion request could not be completed\n",
                      "markdown": "`- `cloud-sql-proxy.log`\n- `cloud-sql-proxy-2016-11-04T18-30-00.000.log`\n\n### Error Message: *The specified service has been marked for deletion.*\n\nThe error message `The specified service has been marked for deletion.` occurs when \nreinstalling the service and the previous deletion request could not be completed\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/windows-service-guide.md"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 45,
                  "endLine": 47,
                  "endColumn": 54,
                  "snippet": {
                    "text": "### Error Message: *Access is denied*\n\nThe error message `Access is denied.` (or `System error 5 has occurred.`) occurs when\ntrying to start the installed service but the service account does not have access\nto the service's file directory.\n\nUsually this is the *Network Service* built-in user.\n",
                    "rendered": {
                      "text": "### Error Message: *Access is denied*\n\nThe error message `Access is denied.` (or `System error 5 has occurred.`) occurs when\ntrying to start the installed service but the service account does not have access\nto the service's file directory.\n\nUsually this is the *Network Service* built-in user.\n",
                      "markdown": "`### Error Message: *Access is denied*\n\nThe error message `Access is denied.` (or `System error 5 has occurred.`) occurs when\ntrying to start the installed service but the service account does not have access\nto the service's file directory.\n\nUsually this is the *Network Service* built-in user.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/windows-service-guide.md"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 29,
                  "endLine": 47,
                  "endColumn": 38,
                  "snippet": {
                    "text": "### Error Message: *Access is denied*\n\nThe error message `Access is denied.` (or `System error 5 has occurred.`) occurs when\ntrying to start the installed service but the service account does not have access\nto the service's file directory.\n\nUsually this is the *Network Service* built-in user.\n",
                    "rendered": {
                      "text": "### Error Message: *Access is denied*\n\nThe error message `Access is denied.` (or `System error 5 has occurred.`) occurs when\ntrying to start the installed service but the service account does not have access\nto the service's file directory.\n\nUsually this is the *Network Service* built-in user.\n",
                      "markdown": "`### Error Message: *Access is denied*\n\nThe error message `Access is denied.` (or `System error 5 has occurred.`) occurs when\ntrying to start the installed service but the service account does not have access\nto the service's file directory.\n\nUsually this is the *Network Service* built-in user.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/windows-service-guide.md"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 24,
                  "endLine": 36,
                  "snippet": {
                    "text": "\nPlease see the FAQ below for common error messages.\n\n## Uninstall the Windows Service\n\nTo uninstall the Windows Service, perform the following steps:\n\n1. Modify the `windows_remove_service.bat` file to your needs\n",
                    "rendered": {
                      "text": "\nPlease see the FAQ below for common error messages.\n\n## Uninstall the Windows Service\n\nTo uninstall the Windows Service, perform the following steps:\n\n1. Modify the `windows_remove_service.bat` file to your needs\n",
                      "markdown": "`\nPlease see the FAQ below for common error messages.\n\n## Uninstall the Windows Service\n\nTo uninstall the Windows Service, perform the following steps:\n\n1. Modify the `windows_remove_service.bat` file to your needs\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/windows-service-guide.md"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 207,
                  "endLine": 21,
                  "endColumn": 216,
                  "snippet": {
                    "text": "TIONNAME` is the Google SQL connection name in the format of `project-id:region:db-instance`\n    - Please note that the `--credentials-file \\\"%CREDENTIALSFILE%\\\"` argument is optional and is not needed if the local machine runs within the Google Cloud Compute Engine and \"defaults\" to the VM instance service account.\n4. Grant *read & execute* access to the `Network Service` user\n5. Create a `logs` sub-folder, e.g. `C:\\Program Files\\cloud-sql-proxy\\logs`\n6. Grant *modify* access to the `Network Service` user\n7. Run the `windows_install_service.bat` batch file within an *elevated* command line prompt (rea",
                    "rendered": {
                      "text": "TIONNAME` is the Google SQL connection name in the format of `project-id:region:db-instance`\n    - Please note that the `--credentials-file \\\"%CREDENTIALSFILE%\\\"` argument is optional and is not needed if the local machine runs within the Google Cloud Compute Engine and \"defaults\" to the VM instance service account.\n4. Grant *read & execute* access to the `Network Service` user\n5. Create a `logs` sub-folder, e.g. `C:\\Program Files\\cloud-sql-proxy\\logs`\n6. Grant *modify* access to the `Network Service` user\n7. Run the `windows_install_service.bat` batch file within an *elevated* command line prompt (rea",
                      "markdown": "`TIONNAME` is the Google SQL connection name in the format of `project-id:region:db-instance`\n    - Please note that the `--credentials-file \\\"%CREDENTIALSFILE%\\\"` argument is optional and is not needed if the local machine runs within the Google Cloud Compute Engine and \"defaults\" to the VM instance service account.\n4. Grant *read & execute* access to the `Network Service` user\n5. Create a `logs` sub-folder, e.g. `C:\\Program Files\\cloud-sql-proxy\\logs`\n6. Grant *modify* access to the `Network Service` user\n7. Run the `windows_install_service.bat` batch file within an *elevated* command line prompt (rea`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/windows-service-guide.md"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 112,
                  "endLine": 19,
                  "endColumn": 120,
                  "snippet": {
                    "text": " needed:\n    - `SERVICE` is the Windows internal service name (as shown in the Task Manager)\n    - `DISPLAYNAME` is the service name (as shown in the Windows Administration Console (MMC))\n    - `CREDENTIALSFILE` is the *full* path to the credentials file, where `%~dp0` points to the full path of the script file folder.\n    - `CONNECTIONNAME` is the Google SQL connection name in the format of `project-id:region:db-instance`\n    - Please note that the `--credentials-file \\\"%CREDENTIALSFILE%\\\"` argument is optional and is not needed if the local machine runs within the Google Cloud Compute Engine and \"de",
                    "rendered": {
                      "text": " needed:\n    - `SERVICE` is the Windows internal service name (as shown in the Task Manager)\n    - `DISPLAYNAME` is the service name (as shown in the Windows Administration Console (MMC))\n    - `CREDENTIALSFILE` is the *full* path to the credentials file, where `%~dp0` points to the full path of the script file folder.\n    - `CONNECTIONNAME` is the Google SQL connection name in the format of `project-id:region:db-instance`\n    - Please note that the `--credentials-file \\\"%CREDENTIALSFILE%\\\"` argument is optional and is not needed if the local machine runs within the Google Cloud Compute Engine and \"de",
                      "markdown": "` needed:\n    - `SERVICE` is the Windows internal service name (as shown in the Task Manager)\n    - `DISPLAYNAME` is the service name (as shown in the Windows Administration Console (MMC))\n    - `CREDENTIALSFILE` is the *full* path to the credentials file, where `%~dp0` points to the full path of the script file folder.\n    - `CONNECTIONNAME` is the Google SQL connection name in the format of `project-id:region:db-instance`\n    - Please note that the `--credentials-file \\\"%CREDENTIALSFILE%\\\"` argument is optional and is not needed if the local machine runs within the Google Cloud Compute Engine and \"de`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/windows-service-guide.md"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 26,
                  "endLine": 18,
                  "endColumn": 35,
                  "snippet": {
                    "text": ".exe`. \n\nFirst, install the binary by:\n\n1. Create a new empty folder, e.g. `C:\\Program Files\\cloud-sql-proxy`\n2. Copy the binary and helper batch files \n3. Modify the batch files as needed:\n    - `SERVICE` is the Windows internal service name (as shown in the Task Manager)\n    - `DISPLAYNAME` is the service name (as shown in the Windows Administration Console (MMC))\n    - `CREDENTIALSFILE` is the *full* path to the credentials file, where `%~dp0` points to the full path of the script file folder.\n    - `CONNECTIONNAME` is the Google SQL connection name in the format of `project-id:region:db-instance`\n ",
                    "rendered": {
                      "text": ".exe`. \n\nFirst, install the binary by:\n\n1. Create a new empty folder, e.g. `C:\\Program Files\\cloud-sql-proxy`\n2. Copy the binary and helper batch files \n3. Modify the batch files as needed:\n    - `SERVICE` is the Windows internal service name (as shown in the Task Manager)\n    - `DISPLAYNAME` is the service name (as shown in the Windows Administration Console (MMC))\n    - `CREDENTIALSFILE` is the *full* path to the credentials file, where `%~dp0` points to the full path of the script file folder.\n    - `CONNECTIONNAME` is the Google SQL connection name in the format of `project-id:region:db-instance`\n ",
                      "markdown": "`.exe`. \n\nFirst, install the binary by:\n\n1. Create a new empty folder, e.g. `C:\\Program Files\\cloud-sql-proxy`\n2. Copy the binary and helper batch files \n3. Modify the batch files as needed:\n    - `SERVICE` is the Windows internal service name (as shown in the Task Manager)\n    - `DISPLAYNAME` is the service name (as shown in the Windows Administration Console (MMC))\n    - `CREDENTIALSFILE` is the *full* path to the credentials file, where `%~dp0` points to the full path of the script file folder.\n    - `CONNECTIONNAME` is the Google SQL connection name in the format of `project-id:region:db-instance`\n `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/windows-service-guide.md"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 39,
                  "endLine": 17,
                  "endColumn": 48,
                  "snippet": {
                    "text": "1. Create a new empty folder, e.g. `C:\\Program Files\\cloud-sql-proxy`\n2. Copy the binary and helper batch files \n3. Modify the batch files as needed:\n    - `SERVICE` is the Windows internal service name (as shown in the Task Manager)\n    - `DISPLAYNAME` is the service name (as shown in the Windows Administration Console (MMC))\n    - `CREDENTIALSFILE` is the *full* path to the credentials file, where `%~dp0` points to the full path of the script file folder.\n    - `CONNECTIONNAME` is the Google SQL connection name in the format of `project-id:region:db-instance`\n",
                    "rendered": {
                      "text": "1. Create a new empty folder, e.g. `C:\\Program Files\\cloud-sql-proxy`\n2. Copy the binary and helper batch files \n3. Modify the batch files as needed:\n    - `SERVICE` is the Windows internal service name (as shown in the Task Manager)\n    - `DISPLAYNAME` is the service name (as shown in the Windows Administration Console (MMC))\n    - `CREDENTIALSFILE` is the *full* path to the credentials file, where `%~dp0` points to the full path of the script file folder.\n    - `CONNECTIONNAME` is the Google SQL connection name in the format of `project-id:region:db-instance`\n",
                      "markdown": "`1. Create a new empty folder, e.g. `C:\\Program Files\\cloud-sql-proxy`\n2. Copy the binary and helper batch files \n3. Modify the batch files as needed:\n    - `SERVICE` is the Windows internal service name (as shown in the Task Manager)\n    - `DISPLAYNAME` is the service name (as shown in the Windows Administration Console (MMC))\n    - `CREDENTIALSFILE` is the *full* path to the credentials file, where `%~dp0` points to the full path of the script file folder.\n    - `CONNECTIONNAME` is the Google SQL connection name in the format of `project-id:region:db-instance`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/windows-service-guide.md"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 22,
                  "endLine": 9,
                  "snippet": {
                    "text": "\nIt was originally built and tested using Go 1.20.2 on Windows Server 2019.\n\n## Install the Windows Service\n\nPrerequisites: A built binary for Windows of the Cloud SQL Auth Proxy is required. Either build it from source or [download a release](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/releases) of a Windows pre-built version, e.g. `cloud-sql-proxy.x64.exe`. \n\nFirst, install the binary by:\n",
                    "rendered": {
                      "text": "\nIt was originally built and tested using Go 1.20.2 on Windows Server 2019.\n\n## Install the Windows Service\n\nPrerequisites: A built binary for Windows of the Cloud SQL Auth Proxy is required. Either build it from source or [download a release](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/releases) of a Windows pre-built version, e.g. `cloud-sql-proxy.x64.exe`. \n\nFirst, install the binary by:\n",
                      "markdown": "`\nIt was originally built and tested using Go 1.20.2 on Windows Server 2019.\n\n## Install the Windows Service\n\nPrerequisites: A built binary for Windows of the Cloud SQL Auth Proxy is required. Either build it from source or [download a release](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/releases) of a Windows pre-built version, e.g. `cloud-sql-proxy.x64.exe`. \n\nFirst, install the binary by:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/windows-service-guide.md"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 4,
                  "snippet": {
                    "text": "# Cloud SQL Auth Proxy Windows Service Guide\n\nThis document covers running the *Cloud SQL Auth Proxy* as service\non the Windows operating system.\n\nIt was originally built and tested using Go 1.20.2 on Windows Server 2019.\n\n",
                    "rendered": {
                      "text": "# Cloud SQL Auth Proxy Windows Service Guide\n\nThis document covers running the *Cloud SQL Auth Proxy* as service\non the Windows operating system.\n\nIt was originally built and tested using Go 1.20.2 on Windows Server 2019.\n\n",
                      "markdown": "`# Cloud SQL Auth Proxy Windows Service Guide\n\nThis document covers running the *Cloud SQL Auth Proxy* as service\non the Windows operating system.\n\nIt was originally built and tested using Go 1.20.2 on Windows Server 2019.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/windows-service-guide.md"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 30,
                  "endLine": 1,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Cloud SQL Auth Proxy Windows Service Guide\n\nThis document covers running the *Cloud SQL Auth Proxy* as service\non the Windows operating system.\n",
                    "rendered": {
                      "text": "# Cloud SQL Auth Proxy Windows Service Guide\n\nThis document covers running the *Cloud SQL Auth Proxy* as service\non the Windows operating system.\n",
                      "markdown": "`# Cloud SQL Auth Proxy Windows Service Guide\n\nThis document covers running the *Cloud SQL Auth Proxy* as service\non the Windows operating system.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/Dockerfile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 585,
                  "endLine": 585,
                  "endColumn": 23,
                  "snippet": {
                    "text": "principal. The Proxy then encrypts the connection to your Cloud SQL instance.\n\nBecause client connections are not encrypted and authorized using the\nenvironment's IAM principal, we recommend running the Proxy on the same VM or\nKubernetes pod as your application and using the Proxy's default behavior of\nallowing connections from only the local network interface. This is the most\nsecure configuration: unencrypted traffic does not leave the VM, and only\n",
                    "rendered": {
                      "text": "principal. The Proxy then encrypts the connection to your Cloud SQL instance.\n\nBecause client connections are not encrypted and authorized using the\nenvironment's IAM principal, we recommend running the Proxy on the same VM or\nKubernetes pod as your application and using the Proxy's default behavior of\nallowing connections from only the local network interface. This is the most\nsecure configuration: unencrypted traffic does not leave the VM, and only\n",
                      "markdown": "`principal. The Proxy then encrypts the connection to your Cloud SQL instance.\n\nBecause client connections are not encrypted and authorized using the\nenvironment's IAM principal, we recommend running the Proxy on the same VM or\nKubernetes pod as your application and using the Proxy's default behavior of\nallowing connections from only the local network interface. This is the most\nsecure configuration: unencrypted traffic does not leave the VM, and only\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 572,
                  "startColumn": 32,
                  "endLine": 572,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n### Why would I use the Proxy?\n\nThe Proxy is a convenient way to control access to your database using IAM\npermissions while ensuring a secure connection to your Cloud SQL instance. When\nusing the Proxy, you do not have to manage database client certificates,\nconfigured Authorized Networks, or ensure clients connect securely. The Proxy\n",
                    "rendered": {
                      "text": "\n### Why would I use the Proxy?\n\nThe Proxy is a convenient way to control access to your database using IAM\npermissions while ensuring a secure connection to your Cloud SQL instance. When\nusing the Proxy, you do not have to manage database client certificates,\nconfigured Authorized Networks, or ensure clients connect securely. The Proxy\n",
                      "markdown": "`\n### Why would I use the Proxy?\n\nThe Proxy is a convenient way to control access to your database using IAM\npermissions while ensuring a secure connection to your Cloud SQL instance. When\nusing the Proxy, you do not have to manage database client certificates,\nconfigured Authorized Networks, or ensure clients connect securely. The Proxy\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 564,
                  "startColumn": 7,
                  "endLine": 564,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\nWhen --quitquitquit is set, the admin server adds an endpoint at\n/quitquitquit. The admin server exits gracefully when it receives a GET or POST\nrequest at /quitquitquit.\n\n[pprof]: https://pkg.go.dev/net/http/pprof.\n\n",
                    "rendered": {
                      "text": "\nWhen --quitquitquit is set, the admin server adds an endpoint at\n/quitquitquit. The admin server exits gracefully when it receives a GET or POST\nrequest at /quitquitquit.\n\n[pprof]: https://pkg.go.dev/net/http/pprof.\n\n",
                      "markdown": "`\nWhen --quitquitquit is set, the admin server adds an endpoint at\n/quitquitquit. The admin server exits gracefully when it receives a GET or POST\nrequest at /quitquitquit.\n\n[pprof]: https://pkg.go.dev/net/http/pprof.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 562,
                  "startColumn": 61,
                  "endLine": 563,
                  "snippet": {
                    "text": "See the [documentation on pprof][pprof] for details on how to use the\nprofiler.\n\nWhen --quitquitquit is set, the admin server adds an endpoint at\n/quitquitquit. The admin server exits gracefully when it receives a GET or POST\nrequest at /quitquitquit.\n\n[pprof]: https://pkg.go.dev/net/http/pprof.\n",
                    "rendered": {
                      "text": "See the [documentation on pprof][pprof] for details on how to use the\nprofiler.\n\nWhen --quitquitquit is set, the admin server adds an endpoint at\n/quitquitquit. The admin server exits gracefully when it receives a GET or POST\nrequest at /quitquitquit.\n\n[pprof]: https://pkg.go.dev/net/http/pprof.\n",
                      "markdown": "`See the [documentation on pprof][pprof] for details on how to use the\nprofiler.\n\nWhen --quitquitquit is set, the admin server adds an endpoint at\n/quitquitquit. The admin server exits gracefully when it receives a GET or POST\nrequest at /quitquitquit.\n\n[pprof]: https://pkg.go.dev/net/http/pprof.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 556,
                  "startColumn": 69,
                  "endLine": 557,
                  "snippet": {
                    "text": "--quitquitquit flag. This will start the server on localhost at port 9091.\nTo change the port, use the --admin-port flag.\n\nWhen --debug is set, the admin server enables Go's profiler available at\n/debug/pprof/.\n\nSee the [documentation on pprof][pprof] for details on how to use the\nprofiler.\n",
                    "rendered": {
                      "text": "--quitquitquit flag. This will start the server on localhost at port 9091.\nTo change the port, use the --admin-port flag.\n\nWhen --debug is set, the admin server enables Go's profiler available at\n/debug/pprof/.\n\nSee the [documentation on pprof][pprof] for details on how to use the\nprofiler.\n",
                      "markdown": "`--quitquitquit flag. This will start the server on localhost at port 9091.\nTo change the port, use the --admin-port flag.\n\nWhen --debug is set, the admin server enables Go's profiler available at\n/debug/pprof/.\n\nSee the [documentation on pprof][pprof] for details on how to use the\nprofiler.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 553,
                  "startColumn": 60,
                  "endLine": 553,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\nThe Proxy includes support for an admin server on localhost. By default, the\nthe admin server is not enabled. To enable the server, pass the --debug or\n--quitquitquit flag. This will start the server on localhost at port 9091.\nTo change the port, use the --admin-port flag.\n\nWhen --debug is set, the admin server enables Go's profiler available at\n",
                    "rendered": {
                      "text": "\nThe Proxy includes support for an admin server on localhost. By default, the\nthe admin server is not enabled. To enable the server, pass the --debug or\n--quitquitquit flag. This will start the server on localhost at port 9091.\nTo change the port, use the --admin-port flag.\n\nWhen --debug is set, the admin server enables Go's profiler available at\n",
                      "markdown": "`\nThe Proxy includes support for an admin server on localhost. By default, the\nthe admin server is not enabled. To enable the server, pass the --debug or\n--quitquitquit flag. This will start the server on localhost at port 9091.\nTo change the port, use the --admin-port flag.\n\nWhen --debug is set, the admin server enables Go's profiler available at\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 458,
                  "startColumn": 15,
                  "endLine": 458,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n1. Change the group of your local file and add read permissions to the group\nwith `chgrp 65532 key.json && chmod g+r key.json`.\n1. If you can't control your file's group, you can directly change the public\npermissions of your file by doing `chmod o+r key.json`.\n\n> [!WARNING]\n",
                    "rendered": {
                      "text": "\n1. Change the group of your local file and add read permissions to the group\nwith `chgrp 65532 key.json && chmod g+r key.json`.\n1. If you can't control your file's group, you can directly change the public\npermissions of your file by doing `chmod o+r key.json`.\n\n> [!WARNING]\n",
                      "markdown": "`\n1. Change the group of your local file and add read permissions to the group\nwith `chgrp 65532 key.json && chmod g+r key.json`.\n1. If you can't control your file's group, you can directly change the public\npermissions of your file by doing `chmod o+r key.json`.\n\n> [!WARNING]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 428,
                  "startColumn": 2,
                  "endLine": 428,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n<!-- {x-release-please-end} -->\nWe recommend pinning to a specific version tag and using automation with a CI pipeline\nto update regularly.\n\nThe default container image uses [distroless][] with a non-root user. If you\nneed a shell or related tools, use the Alpine or Debian-based container images\n",
                    "rendered": {
                      "text": "\n<!-- {x-release-please-end} -->\nWe recommend pinning to a specific version tag and using automation with a CI pipeline\nto update regularly.\n\nThe default container image uses [distroless][] with a non-root user. If you\nneed a shell or related tools, use the Alpine or Debian-based container images\n",
                      "markdown": "`\n<!-- {x-release-please-end} -->\nWe recommend pinning to a specific version tag and using automation with a CI pipeline\nto update regularly.\n\nThe default container image uses [distroless][] with a non-root user. If you\nneed a shell or related tools, use the Alpine or Debian-based container images\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 31,
                  "endLine": 336,
                  "endColumn": 35,
                  "snippet": {
                    "text": "> replaces colons with periods:\n> \n> ```shell\n> # Starts a Unix domain socket at the path:\n> #    C:\\cloudsql\\myproject.my-region.mysql\n> ./cloud-sql-proxy --unix-socket C:\\cloudsql myproject:my-region:mysql\n> ```\n",
                    "rendered": {
                      "text": "> replaces colons with periods:\n> \n> ```shell\n> # Starts a Unix domain socket at the path:\n> #    C:\\cloudsql\\myproject.my-region.mysql\n> ./cloud-sql-proxy --unix-socket C:\\cloudsql myproject:my-region:mysql\n> ```\n",
                      "markdown": "`> replaces colons with periods:\n> \n> ```shell\n> # Starts a Unix domain socket at the path:\n> #    C:\\cloudsql\\myproject.my-region.mysql\n> ./cloud-sql-proxy --unix-socket C:\\cloudsql myproject:my-region:mysql\n> ```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 45,
                  "endLine": 282,
                  "endColumn": 49,
                  "snippet": {
                    "text": "To override address on a per-instance basis, use the `address` query param:\n\n```shell\n# Starts a listener on 0.0.0.0 for \"postgres\" at port 5432\n# and a listener on 10.0.0.1:3306 for \"mysql\"\n./cloud-sql-proxy \\\n    'myproject:my-region:postgres?address=0.0.0.0' \\\n",
                    "rendered": {
                      "text": "To override address on a per-instance basis, use the `address` query param:\n\n```shell\n# Starts a listener on 0.0.0.0 for \"postgres\" at port 5432\n# and a listener on 10.0.0.1:3306 for \"mysql\"\n./cloud-sql-proxy \\\n    'myproject:my-region:postgres?address=0.0.0.0' \\\n",
                      "markdown": "`To override address on a per-instance basis, use the `address` query param:\n\n```shell\n# Starts a listener on 0.0.0.0 for \"postgres\" at port 5432\n# and a listener on 10.0.0.1:3306 for \"mysql\"\n./cloud-sql-proxy \\\n    'myproject:my-region:postgres?address=0.0.0.0' \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 37,
                  "endLine": 275,
                  "endColumn": 41,
                  "snippet": {
                    "text": "To override the choice of `localhost`, use the `--address` flag:\n\n```shell\n# Starts a listener on all interfaces at port 5432\n./cloud-sql-proxy --address 0.0.0.0 <INSTANCE_CONNECTION_NAME>\n```\n\n",
                    "rendered": {
                      "text": "To override the choice of `localhost`, use the `--address` flag:\n\n```shell\n# Starts a listener on all interfaces at port 5432\n./cloud-sql-proxy --address 0.0.0.0 <INSTANCE_CONNECTION_NAME>\n```\n\n",
                      "markdown": "`To override the choice of `localhost`, use the `--address` flag:\n\n```shell\n# Starts a listener on all interfaces at port 5432\n./cloud-sql-proxy --address 0.0.0.0 <INSTANCE_CONNECTION_NAME>\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 79,
                  "endLine": 212,
                  "endColumn": 3,
                  "snippet": {
                    "text": "When the Proxy authenticates under the Compute Engine VM's default service\naccount, the VM must have at least the `sqlservice.admin` API scope (i.e.,\n\"https://www.googleapis.com/auth/sqlservice.admin\") and the associated project\nmust have the SQL Admin API enabled. The default service account must also have\nat least writer or editor privileges to any projects of target SQL instances.\n\nThe Proxy also supports three flags related to credentials:\n\n",
                    "rendered": {
                      "text": "When the Proxy authenticates under the Compute Engine VM's default service\naccount, the VM must have at least the `sqlservice.admin` API scope (i.e.,\n\"https://www.googleapis.com/auth/sqlservice.admin\") and the associated project\nmust have the SQL Admin API enabled. The default service account must also have\nat least writer or editor privileges to any projects of target SQL instances.\n\nThe Proxy also supports three flags related to credentials:\n\n",
                      "markdown": "`When the Proxy authenticates under the Compute Engine VM's default service\naccount, the VM must have at least the `sqlservice.admin` API scope (i.e.,\n\"https://www.googleapis.com/auth/sqlservice.admin\") and the associated project\nmust have the SQL Admin API enabled. The default service account must also have\nat least writer or editor privileges to any projects of target SQL instances.\n\nThe Proxy also supports three flags related to credentials:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 25,
                  "endLine": 209,
                  "endColumn": 29,
                  "snippet": {
                    "text": "> See [Roles and Permissions in Cloud SQL][roles-and-permissions] for details.\n\nWhen the Proxy authenticates under the Compute Engine VM's default service\naccount, the VM must have at least the `sqlservice.admin` API scope (i.e.,\n\"https://www.googleapis.com/auth/sqlservice.admin\") and the associated project\nmust have the SQL Admin API enabled. The default service account must also have\nat least writer or editor privileges to any projects of target SQL instances.\n",
                    "rendered": {
                      "text": "> See [Roles and Permissions in Cloud SQL][roles-and-permissions] for details.\n\nWhen the Proxy authenticates under the Compute Engine VM's default service\naccount, the VM must have at least the `sqlservice.admin` API scope (i.e.,\n\"https://www.googleapis.com/auth/sqlservice.admin\") and the associated project\nmust have the SQL Admin API enabled. The default service account must also have\nat least writer or editor privileges to any projects of target SQL instances.\n",
                      "markdown": "`> See [Roles and Permissions in Cloud SQL][roles-and-permissions] for details.\n\nWhen the Proxy authenticates under the Compute Engine VM's default service\naccount, the VM must have at least the `sqlservice.admin` API scope (i.e.,\n\"https://www.googleapis.com/auth/sqlservice.admin\") and the associated project\nmust have the SQL Admin API enabled. The default service account must also have\nat least writer or editor privileges to any projects of target SQL instances.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 67,
                  "endLine": 6,
                  "endColumn": 76,
                  "snippet": {
                    "text": "[![CI][ci-badge]][ci-build]\n\nThe Cloud SQL Auth Proxy is a utility for ensuring secure connections to your\nCloud SQL instances. It provides IAM authorization, allowing you to control who\ncan connect to your instance through IAM permissions, and TLS 1.3 encryption,\nwithout having to manage certificates.\n\n",
                    "rendered": {
                      "text": "[![CI][ci-badge]][ci-build]\n\nThe Cloud SQL Auth Proxy is a utility for ensuring secure connections to your\nCloud SQL instances. It provides IAM authorization, allowing you to control who\ncan connect to your instance through IAM permissions, and TLS 1.3 encryption,\nwithout having to manage certificates.\n\n",
                      "markdown": "`[![CI][ci-badge]][ci-build]\n\nThe Cloud SQL Auth Proxy is a utility for ensuring secure connections to your\nCloud SQL instances. It provides IAM authorization, allowing you to control who\ncan connect to your instance through IAM permissions, and TLS 1.3 encryption,\nwithout having to manage certificates.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 603,
                  "startColumn": 73,
                  "endLine": 604,
                  "snippet": {
                    "text": "\nThe Proxy does not configure the network between the VM it's running on and the\nCloud SQL instance. You MUST ensure the Proxy can reach your Cloud SQL\ninstance, either by deploying it in a VPC that has access to your Private IP\ninstance, or by configuring Public IP.\n\n### Should I use the Proxy for large deployments?\n\n",
                    "rendered": {
                      "text": "\nThe Proxy does not configure the network between the VM it's running on and the\nCloud SQL instance. You MUST ensure the Proxy can reach your Cloud SQL\ninstance, either by deploying it in a VPC that has access to your Private IP\ninstance, or by configuring Public IP.\n\n### Should I use the Proxy for large deployments?\n\n",
                      "markdown": "`\nThe Proxy does not configure the network between the VM it's running on and the\nCloud SQL instance. You MUST ensure the Proxy can reach your Cloud SQL\ninstance, either by deploying it in a VPC that has access to your Private IP\ninstance, or by configuring Public IP.\n\n### Should I use the Proxy for large deployments?\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 599,
                  "startColumn": 45,
                  "endLine": 599,
                  "endColumn": 49,
                  "snippet": {
                    "text": "[local-quickstart]: https://cloud.google.com/sql/docs/mysql/connect-instance-local-computer\n[gke-quickstart]: https://cloud.google.com/sql/docs/mysql/connect-instance-kubernetes\n\n### Why can't the Proxy connect to my private IP instance?\n\nThe Proxy does not configure the network between the VM it's running on and the\nCloud SQL instance. You MUST ensure the Proxy can reach your Cloud SQL\n",
                    "rendered": {
                      "text": "[local-quickstart]: https://cloud.google.com/sql/docs/mysql/connect-instance-local-computer\n[gke-quickstart]: https://cloud.google.com/sql/docs/mysql/connect-instance-kubernetes\n\n### Why can't the Proxy connect to my private IP instance?\n\nThe Proxy does not configure the network between the VM it's running on and the\nCloud SQL instance. You MUST ensure the Proxy can reach your Cloud SQL\n",
                      "markdown": "`[local-quickstart]: https://cloud.google.com/sql/docs/mysql/connect-instance-local-computer\n[gke-quickstart]: https://cloud.google.com/sql/docs/mysql/connect-instance-kubernetes\n\n### Why can't the Proxy connect to my private IP instance?\n\nThe Proxy does not configure the network between the VM it's running on and the\nCloud SQL instance. You MUST ensure the Proxy can reach your Cloud SQL\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 594,
                  "startColumn": 27,
                  "endLine": 594,
                  "endColumn": 34,
                  "snippet": {
                    "text": "Here are some common examples of how to run the Proxy in different environments:\n\n- [Connect to Cloud SQL for MySQL from your local computer][local-quickstart]\n- [Connect to Cloud SQL for MySQL from Google Kubernetes Engine][gke-quickstart]\n\n[local-quickstart]: https://cloud.google.com/sql/docs/mysql/connect-instance-local-computer\n[gke-quickstart]: https://cloud.google.com/sql/docs/mysql/connect-instance-kubernetes\n",
                    "rendered": {
                      "text": "Here are some common examples of how to run the Proxy in different environments:\n\n- [Connect to Cloud SQL for MySQL from your local computer][local-quickstart]\n- [Connect to Cloud SQL for MySQL from Google Kubernetes Engine][gke-quickstart]\n\n[local-quickstart]: https://cloud.google.com/sql/docs/mysql/connect-instance-local-computer\n[gke-quickstart]: https://cloud.google.com/sql/docs/mysql/connect-instance-kubernetes\n",
                      "markdown": "`Here are some common examples of how to run the Proxy in different environments:\n\n- [Connect to Cloud SQL for MySQL from your local computer][local-quickstart]\n- [Connect to Cloud SQL for MySQL from Google Kubernetes Engine][gke-quickstart]\n\n[local-quickstart]: https://cloud.google.com/sql/docs/mysql/connect-instance-local-computer\n[gke-quickstart]: https://cloud.google.com/sql/docs/mysql/connect-instance-kubernetes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 593,
                  "startColumn": 27,
                  "endLine": 593,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\nHere are some common examples of how to run the Proxy in different environments:\n\n- [Connect to Cloud SQL for MySQL from your local computer][local-quickstart]\n- [Connect to Cloud SQL for MySQL from Google Kubernetes Engine][gke-quickstart]\n\n[local-quickstart]: https://cloud.google.com/sql/docs/mysql/connect-instance-local-computer\n",
                    "rendered": {
                      "text": "\nHere are some common examples of how to run the Proxy in different environments:\n\n- [Connect to Cloud SQL for MySQL from your local computer][local-quickstart]\n- [Connect to Cloud SQL for MySQL from Google Kubernetes Engine][gke-quickstart]\n\n[local-quickstart]: https://cloud.google.com/sql/docs/mysql/connect-instance-local-computer\n",
                      "markdown": "`\nHere are some common examples of how to run the Proxy in different environments:\n\n- [Connect to Cloud SQL for MySQL from your local computer][local-quickstart]\n- [Connect to Cloud SQL for MySQL from Google Kubernetes Engine][gke-quickstart]\n\n[local-quickstart]: https://cloud.google.com/sql/docs/mysql/connect-instance-local-computer\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 526,
                  "startColumn": 48,
                  "endLine": 526,
                  "endColumn": 52,
                  "snippet": {
                    "text": "- `cloud.google.com/go/cloudsqlconn.Dial`: The dial operation including\n  refreshing an ephemeral certificate and connecting the instance\n- `cloud.google.com/go/cloudsqlconn/internal.InstanceInfo`: The call to retrieve\n  instance metadata (e.g., database engine type, IP address, etc)\n- `cloud.google.com/go/cloudsqlconn/internal.Connect`: The connection attempt\n  using the ephemeral certificate\n- SQL Admin API client operations\n",
                    "rendered": {
                      "text": "- `cloud.google.com/go/cloudsqlconn.Dial`: The dial operation including\n  refreshing an ephemeral certificate and connecting the instance\n- `cloud.google.com/go/cloudsqlconn/internal.InstanceInfo`: The call to retrieve\n  instance metadata (e.g., database engine type, IP address, etc)\n- `cloud.google.com/go/cloudsqlconn/internal.Connect`: The connection attempt\n  using the ephemeral certificate\n- SQL Admin API client operations\n",
                      "markdown": "`- `cloud.google.com/go/cloudsqlconn.Dial`: The dial operation including\n  refreshing an ephemeral certificate and connecting the instance\n- `cloud.google.com/go/cloudsqlconn/internal.InstanceInfo`: The call to retrieve\n  instance metadata (e.g., database engine type, IP address, etc)\n- `cloud.google.com/go/cloudsqlconn/internal.Connect`: The connection attempt\n  using the ephemeral certificate\n- SQL Admin API client operations\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 468,
                  "startColumn": 8,
                  "endLine": 469,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\nFor example, a full command using a JSON credentials file might look like\n\n```shell\ndocker run \\\n    --publish <host-port>:<proxy-port> \\\n    --mount type=bind,source=\"$(pwd)\"/sa.json,target=/config/sa.json \\\n    gcr.io/cloud-sql-connectors/cloud-sql-proxy:latest \\\n",
                    "rendered": {
                      "text": "\nFor example, a full command using a JSON credentials file might look like\n\n```shell\ndocker run \\\n    --publish <host-port>:<proxy-port> \\\n    --mount type=bind,source=\"$(pwd)\"/sa.json,target=/config/sa.json \\\n    gcr.io/cloud-sql-connectors/cloud-sql-proxy:latest \\\n",
                      "markdown": "`\nFor example, a full command using a JSON credentials file might look like\n\n```shell\ndocker run \\\n    --publish <host-port>:<proxy-port> \\\n    --mount type=bind,source=\"$(pwd)\"/sa.json,target=/config/sa.json \\\n    gcr.io/cloud-sql-connectors/cloud-sql-proxy:latest \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 457,
                  "startColumn": 29,
                  "endLine": 457,
                  "endColumn": 36,
                  "snippet": {
                    "text": "to the file. These alternatives might help:\n\n1. Change the group of your local file and add read permissions to the group\nwith `chgrp 65532 key.json && chmod g+r key.json`.\n1. If you can't control your file's group, you can directly change the public\npermissions of your file by doing `chmod o+r key.json`.\n\n",
                    "rendered": {
                      "text": "to the file. These alternatives might help:\n\n1. Change the group of your local file and add read permissions to the group\nwith `chgrp 65532 key.json && chmod g+r key.json`.\n1. If you can't control your file's group, you can directly change the public\npermissions of your file by doing `chmod o+r key.json`.\n\n",
                      "markdown": "`to the file. These alternatives might help:\n\n1. Change the group of your local file and add read permissions to the group\nwith `chgrp 65532 key.json && chmod g+r key.json`.\n1. If you can't control your file's group, you can directly change the public\npermissions of your file by doing `chmod o+r key.json`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 452,
                  "startColumn": 73,
                  "endLine": 453,
                  "snippet": {
                    "text": "connections originating from *within* the container.\n\nYou will need to authenticate using one of the methods outlined in the\n[credentials](#credentials) section. If using a credentials file you must mount\nthe file and ensure that the non-root user that runs the proxy has *read access*\nto the file. These alternatives might help:\n\n1. Change the group of your local file and add read permissions to the group\n",
                    "rendered": {
                      "text": "connections originating from *within* the container.\n\nYou will need to authenticate using one of the methods outlined in the\n[credentials](#credentials) section. If using a credentials file you must mount\nthe file and ensure that the non-root user that runs the proxy has *read access*\nto the file. These alternatives might help:\n\n1. Change the group of your local file and add read permissions to the group\n",
                      "markdown": "`connections originating from *within* the container.\n\nYou will need to authenticate using one of the methods outlined in the\n[credentials](#credentials) section. If using a credentials file you must mount\nthe file and ensure that the non-root user that runs the proxy has *read access*\nto the file. These alternatives might help:\n\n1. Change the group of your local file and add read permissions to the group\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 442,
                  "startColumn": 8,
                  "endLine": 443,
                  "endColumn": 7,
                  "snippet": {
                    "text": "container, all you need to do is specify options using the command, and expose\nthe proxy's internal port to the host. For example, you can use:\n\n```shell\ndocker run --publish <host-port>:<proxy-port> \\\n    gcr.io/cloud-sql-connectors/cloud-sql-proxy:latest \\\n    --address \"0.0.0.0\" --port <proxy-port> <instance-connection-name>\n```\n",
                    "rendered": {
                      "text": "container, all you need to do is specify options using the command, and expose\nthe proxy's internal port to the host. For example, you can use:\n\n```shell\ndocker run --publish <host-port>:<proxy-port> \\\n    gcr.io/cloud-sql-connectors/cloud-sql-proxy:latest \\\n    --address \"0.0.0.0\" --port <proxy-port> <instance-connection-name>\n```\n",
                      "markdown": "`container, all you need to do is specify options using the command, and expose\nthe proxy's internal port to the host. For example, you can use:\n\n```shell\ndocker run --publish <host-port>:<proxy-port> \\\n    gcr.io/cloud-sql-connectors/cloud-sql-proxy:latest \\\n    --address \"0.0.0.0\" --port <proxy-port> <instance-connection-name>\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 436,
                  "startColumn": 16,
                  "endLine": 436,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n[distroless]: https://github.com/GoogleContainerTools/distroless\n\n### Working with Docker and the Proxy\n\nThe containers have the proxy as an `ENTRYPOINT` so, to use the proxy from a\ncontainer, all you need to do is specify options using the command, and expose\n",
                    "rendered": {
                      "text": "\n[distroless]: https://github.com/GoogleContainerTools/distroless\n\n### Working with Docker and the Proxy\n\nThe containers have the proxy as an `ENTRYPOINT` so, to use the proxy from a\ncontainer, all you need to do is specify options using the command, and expose\n",
                      "markdown": "`\n[distroless]: https://github.com/GoogleContainerTools/distroless\n\n### Working with Docker and the Proxy\n\nThe containers have the proxy as an `ENTRYPOINT` so, to use the proxy from a\ncontainer, all you need to do is specify options using the command, and expose\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 422,
                  "startColumn": 20,
                  "endLine": 423,
                  "endColumn": 7,
                  "snippet": {
                    "text": "For example, to pull a particular version, use a command like:\n\n``` shell\n# $VERSION is 2.13.0\ndocker pull gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.13.0\n```\n\n<!-- {x-release-please-end} -->\n",
                    "rendered": {
                      "text": "For example, to pull a particular version, use a command like:\n\n``` shell\n# $VERSION is 2.13.0\ndocker pull gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.13.0\n```\n\n<!-- {x-release-please-end} -->\n",
                      "markdown": "`For example, to pull a particular version, use a command like:\n\n``` shell\n# $VERSION is 2.13.0\ndocker pull gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.13.0\n```\n\n<!-- {x-release-please-end} -->\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 304,
                  "startColumn": 17,
                  "endLine": 304,
                  "endColumn": 21,
                  "snippet": {
                    "text": "> \n> The Proxy does not configure the network. You MUST ensure the Proxy can\n> reach your Cloud SQL instance, either by deploying it in a VPC that has access\n> to your Private IP instance, or by configuring Public IP.\n\n### Configuring Unix domain sockets\n\n",
                    "rendered": {
                      "text": "> \n> The Proxy does not configure the network. You MUST ensure the Proxy can\n> reach your Cloud SQL instance, either by deploying it in a VPC that has access\n> to your Private IP instance, or by configuring Public IP.\n\n### Configuring Unix domain sockets\n\n",
                      "markdown": "`> \n> The Proxy does not configure the network. You MUST ensure the Proxy can\n> reach your Cloud SQL instance, either by deploying it in a VPC that has access\n> to your Private IP instance, or by configuring Public IP.\n\n### Configuring Unix domain sockets\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 44,
                  "endLine": 295,
                  "endColumn": 48,
                  "snippet": {
                    "text": "private IP, use:\n\n```shell\n# Starts a listener connected to the private IP of the Cloud SQL instance.\n# Note: there must be a network path present for this to work.\n./cloud-sql-proxy --private-ip <INSTANCE_CONNECTION_NAME>\n```\n",
                    "rendered": {
                      "text": "private IP, use:\n\n```shell\n# Starts a listener connected to the private IP of the Cloud SQL instance.\n# Note: there must be a network path present for this to work.\n./cloud-sql-proxy --private-ip <INSTANCE_CONNECTION_NAME>\n```\n",
                      "markdown": "`private IP, use:\n\n```shell\n# Starts a listener connected to the private IP of the Cloud SQL instance.\n# Note: there must be a network path present for this to work.\n./cloud-sql-proxy --private-ip <INSTANCE_CONNECTION_NAME>\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 23,
                  "endLine": 290,
                  "snippet": {
                    "text": "    'myproject:my-region:mysql?address=10.0.0.1\"\n```\n\n### Configuring Private IP\n\nBy default, the Proxy attempts to connect to an instance's public IP. To enable\nprivate IP, use:\n\n",
                    "rendered": {
                      "text": "    'myproject:my-region:mysql?address=10.0.0.1\"\n```\n\n### Configuring Private IP\n\nBy default, the Proxy attempts to connect to an instance's public IP. To enable\nprivate IP, use:\n\n",
                      "markdown": "`    'myproject:my-region:mysql?address=10.0.0.1\"\n```\n\n### Configuring Private IP\n\nBy default, the Proxy attempts to connect to an instance's public IP. To enable\nprivate IP, use:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 3,
                  "endLine": 227,
                  "endColumn": 10,
                  "snippet": {
                    "text": "```shell\n# starts the Proxy listening on localhost with the default database engine port\n# For example:\n#   MySQL      localhost:3306\n#   Postgres   localhost:5432\n#   SQL Server localhost:1433\n./cloud-sql-proxy <INSTANCE_CONNECTION_NAME>\n",
                    "rendered": {
                      "text": "```shell\n# starts the Proxy listening on localhost with the default database engine port\n# For example:\n#   MySQL      localhost:3306\n#   Postgres   localhost:5432\n#   SQL Server localhost:1433\n./cloud-sql-proxy <INSTANCE_CONNECTION_NAME>\n",
                      "markdown": "````shell\n# starts the Proxy listening on localhost with the default database engine port\n# For example:\n#   MySQL      localhost:3306\n#   Postgres   localhost:5432\n#   SQL Server localhost:1433\n./cloud-sql-proxy <INSTANCE_CONNECTION_NAME>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 31,
                  "endLine": 217,
                  "endColumn": 40,
                  "snippet": {
                    "text": "The Proxy also supports three flags related to credentials:\n\n- `--token` to use an OAuth2 token\n- `--credentials-file` to use a service account key file\n- `--gcloud-auth` to use the Gcloud user's credentials (local development only)\n\n### Basic Usage\n",
                    "rendered": {
                      "text": "The Proxy also supports three flags related to credentials:\n\n- `--token` to use an OAuth2 token\n- `--credentials-file` to use a service account key file\n- `--gcloud-auth` to use the Gcloud user's credentials (local development only)\n\n### Basic Usage\n",
                      "markdown": "`The Proxy also supports three flags related to credentials:\n\n- `--token` to use an OAuth2 token\n- `--credentials-file` to use a service account key file\n- `--gcloud-auth` to use the Gcloud user's credentials (local development only)\n\n### Basic Usage\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 48,
                  "endLine": 211,
                  "endColumn": 57,
                  "snippet": {
                    "text": "When the Proxy authenticates under the Compute Engine VM's default service\naccount, the VM must have at least the `sqlservice.admin` API scope (i.e.,\n\"https://www.googleapis.com/auth/sqlservice.admin\") and the associated project\nmust have the SQL Admin API enabled. The default service account must also have\nat least writer or editor privileges to any projects of target SQL instances.\n\nThe Proxy also supports three flags related to credentials:\n",
                    "rendered": {
                      "text": "When the Proxy authenticates under the Compute Engine VM's default service\naccount, the VM must have at least the `sqlservice.admin` API scope (i.e.,\n\"https://www.googleapis.com/auth/sqlservice.admin\") and the associated project\nmust have the SQL Admin API enabled. The default service account must also have\nat least writer or editor privileges to any projects of target SQL instances.\n\nThe Proxy also supports three flags related to credentials:\n",
                      "markdown": "`When the Proxy authenticates under the Compute Engine VM's default service\naccount, the VM must have at least the `sqlservice.admin` API scope (i.e.,\n\"https://www.googleapis.com/auth/sqlservice.admin\") and the associated project\nmust have the SQL Admin API enabled. The default service account must also have\nat least writer or editor privileges to any projects of target SQL instances.\n\nThe Proxy also supports three flags related to credentials:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 66,
                  "endLine": 209,
                  "snippet": {
                    "text": ">\n> See [Roles and Permissions in Cloud SQL][roles-and-permissions] for details.\n\nWhen the Proxy authenticates under the Compute Engine VM's default service\naccount, the VM must have at least the `sqlservice.admin` API scope (i.e.,\n\"https://www.googleapis.com/auth/sqlservice.admin\") and the associated project\nmust have the SQL Admin API enabled. The default service account must also have\nat least writer or editor privileges to any projects of target SQL instances.\n",
                    "rendered": {
                      "text": ">\n> See [Roles and Permissions in Cloud SQL][roles-and-permissions] for details.\n\nWhen the Proxy authenticates under the Compute Engine VM's default service\naccount, the VM must have at least the `sqlservice.admin` API scope (i.e.,\n\"https://www.googleapis.com/auth/sqlservice.admin\") and the associated project\nmust have the SQL Admin API enabled. The default service account must also have\nat least writer or editor privileges to any projects of target SQL instances.\n",
                      "markdown": "`>\n> See [Roles and Permissions in Cloud SQL][roles-and-permissions] for details.\n\nWhen the Proxy authenticates under the Compute Engine VM's default service\naccount, the VM must have at least the `sqlservice.admin` API scope (i.e.,\n\"https://www.googleapis.com/auth/sqlservice.admin\") and the associated project\nmust have the SQL Admin API enabled. The default service account must also have\nat least writer or editor privileges to any projects of target SQL instances.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 2,
                  "endLine": 179,
                  "endColumn": 8,
                  "snippet": {
                    "text": "The following examples all reference an `INSTANCE_CONNECTION_NAME`, which takes\nthe form: `myproject:myregion:myinstance`.\n\nTo find your Cloud SQL instance's `INSTANCE_CONNECTION_NAME`, visit the detail\npage of your Cloud SQL instance in the console, or use `gcloud` with:\n\n```shell\n",
                    "rendered": {
                      "text": "The following examples all reference an `INSTANCE_CONNECTION_NAME`, which takes\nthe form: `myproject:myregion:myinstance`.\n\nTo find your Cloud SQL instance's `INSTANCE_CONNECTION_NAME`, visit the detail\npage of your Cloud SQL instance in the console, or use `gcloud` with:\n\n```shell\n",
                      "markdown": "`The following examples all reference an `INSTANCE_CONNECTION_NAME`, which takes\nthe form: `myproject:myregion:myinstance`.\n\nTo find your Cloud SQL instance's `INSTANCE_CONNECTION_NAME`, visit the detail\npage of your Cloud SQL instance in the console, or use `gcloud` with:\n\n```shell\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 33,
                  "endLine": 156,
                  "endColumn": 5,
                  "snippet": {
                    "text": "<summary>Windows x86</summary>\n\n```sh\n# see Releases for other versions\ncurl https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0/cloud-sql-proxy.x86.exe -o cloud-sql-proxy.exe\n```\n\n</details>\n",
                    "rendered": {
                      "text": "<summary>Windows x86</summary>\n\n```sh\n# see Releases for other versions\ncurl https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0/cloud-sql-proxy.x86.exe -o cloud-sql-proxy.exe\n```\n\n</details>\n",
                      "markdown": "`<summary>Windows x86</summary>\n\n```sh\n# see Releases for other versions\ncurl https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0/cloud-sql-proxy.x86.exe -o cloud-sql-proxy.exe\n```\n\n</details>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 33,
                  "endLine": 146,
                  "endColumn": 5,
                  "snippet": {
                    "text": "<summary>Windows x64</summary>\n\n```sh\n# see Releases for other versions\ncurl https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0/cloud-sql-proxy.x64.exe -o cloud-sql-proxy.exe\n```\n\n</details>\n",
                    "rendered": {
                      "text": "<summary>Windows x64</summary>\n\n```sh\n# see Releases for other versions\ncurl https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0/cloud-sql-proxy.x64.exe -o cloud-sql-proxy.exe\n```\n\n</details>\n",
                      "markdown": "`<summary>Windows x64</summary>\n\n```sh\n# see Releases for other versions\ncurl https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0/cloud-sql-proxy.x64.exe -o cloud-sql-proxy.exe\n```\n\n</details>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 135,
                  "endLine": 136,
                  "endColumn": 6,
                  "snippet": {
                    "text": "URL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.darwin.arm64\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n\n</details>\n",
                    "rendered": {
                      "text": "URL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.darwin.arm64\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n\n</details>\n",
                      "markdown": "`URL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.darwin.arm64\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n\n</details>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 133,
                  "endLine": 134,
                  "endColumn": 5,
                  "snippet": {
                    "text": "```sh\n# see Releases for other versions\nURL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.darwin.arm64\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n",
                    "rendered": {
                      "text": "```sh\n# see Releases for other versions\nURL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.darwin.arm64\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n",
                      "markdown": "````sh\n# see Releases for other versions\nURL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.darwin.arm64\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 121,
                  "endLine": 122,
                  "endColumn": 6,
                  "snippet": {
                    "text": "URL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.darwin.amd64\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n\n</details>\n",
                    "rendered": {
                      "text": "URL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.darwin.amd64\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n\n</details>\n",
                      "markdown": "`URL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.darwin.amd64\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n\n</details>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 119,
                  "endLine": 120,
                  "endColumn": 5,
                  "snippet": {
                    "text": "```sh\n# see Releases for other versions\nURL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.darwin.amd64\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n",
                    "rendered": {
                      "text": "```sh\n# see Releases for other versions\nURL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.darwin.amd64\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n",
                      "markdown": "````sh\n# see Releases for other versions\nURL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.darwin.amd64\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 107,
                  "endLine": 108,
                  "endColumn": 6,
                  "snippet": {
                    "text": "URL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.linux.arm\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n\n</details>\n",
                    "rendered": {
                      "text": "URL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.linux.arm\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n\n</details>\n",
                      "markdown": "`URL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.linux.arm\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n\n</details>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 105,
                  "endLine": 106,
                  "endColumn": 5,
                  "snippet": {
                    "text": "```sh\n# see Releases for other versions\nURL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.linux.arm\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n",
                    "rendered": {
                      "text": "```sh\n# see Releases for other versions\nURL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.linux.arm\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n",
                      "markdown": "````sh\n# see Releases for other versions\nURL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.linux.arm\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 93,
                  "endLine": 94,
                  "endColumn": 6,
                  "snippet": {
                    "text": "URL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.linux.arm64\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n\n</details>\n",
                    "rendered": {
                      "text": "URL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.linux.arm64\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n\n</details>\n",
                      "markdown": "`URL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.linux.arm64\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n\n</details>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 92,
                  "endColumn": 5,
                  "snippet": {
                    "text": "```sh\n# see Releases for other versions\nURL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.linux.arm64\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n",
                    "rendered": {
                      "text": "```sh\n# see Releases for other versions\nURL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.linux.arm64\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n",
                      "markdown": "````sh\n# see Releases for other versions\nURL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.linux.arm64\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 79,
                  "endLine": 80,
                  "endColumn": 6,
                  "snippet": {
                    "text": "URL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.linux.386\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n\n</details>\n",
                    "rendered": {
                      "text": "URL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.linux.386\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n\n</details>\n",
                      "markdown": "`URL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.linux.386\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n\n</details>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 78,
                  "endColumn": 5,
                  "snippet": {
                    "text": "```sh\n# see Releases for other versions\nURL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.linux.386\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n",
                    "rendered": {
                      "text": "```sh\n# see Releases for other versions\nURL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.linux.386\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n",
                      "markdown": "````sh\n# see Releases for other versions\nURL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.linux.386\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 66,
                  "endColumn": 6,
                  "snippet": {
                    "text": "URL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.linux.amd64\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n\n</details>\n",
                    "rendered": {
                      "text": "URL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.linux.amd64\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n\n</details>\n",
                      "markdown": "`URL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.linux.amd64\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n\n</details>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 64,
                  "endColumn": 5,
                  "snippet": {
                    "text": "```sh\n# see Releases for other versions\nURL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.linux.amd64\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n",
                    "rendered": {
                      "text": "```sh\n# see Releases for other versions\nURL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.linux.amd64\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n",
                      "markdown": "````sh\n# see Releases for other versions\nURL=\"https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.13.0\"\n\ncurl \"$URL/cloud-sql-proxy.linux.amd64\" -o cloud-sql-proxy\n\nchmod +x cloud-sql-proxy\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 75,
                  "endLine": 40,
                  "snippet": {
                    "text": "> \n> The Proxy does not configure the network between the VM it's running on\n> and the Cloud SQL instance. You MUST ensure the Proxy can reach your Cloud SQL\n> instance, either by deploying it in a VPC that has access to your Private IP\n> instance, or by configuring Public IP.\n\n[cloud monitoring]: https://cloud.google.com/monitoring\n[cloud trace]: https://cloud.google.com/trace\n",
                    "rendered": {
                      "text": "> \n> The Proxy does not configure the network between the VM it's running on\n> and the Cloud SQL instance. You MUST ensure the Proxy can reach your Cloud SQL\n> instance, either by deploying it in a VPC that has access to your Private IP\n> instance, or by configuring Public IP.\n\n[cloud monitoring]: https://cloud.google.com/monitoring\n[cloud trace]: https://cloud.google.com/trace\n",
                      "markdown": "`> \n> The Proxy does not configure the network between the VM it's running on\n> and the Cloud SQL instance. You MUST ensure the Proxy can reach your Cloud SQL\n> instance, either by deploying it in a VPC that has access to your Private IP\n> instance, or by configuring Public IP.\n\n[cloud monitoring]: https://cloud.google.com/monitoring\n[cloud trace]: https://cloud.google.com/trace\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 10,
                  "snippet": {
                    "text": "- [Automatic IAM Authentication][iam-auth] (Postgres and MySQL only)\n- Metrics ([Cloud Monitoring][], [Cloud Trace][], and [Prometheus][])\n- [HTTP Healthchecks][health-check-example]\n- Service account impersonation\n- Separate Dialer functionality released as the [Cloud SQL Go Connector][go connector]\n- Configuration with environment variables\n- Fully POSIX-compliant flags\n",
                    "rendered": {
                      "text": "- [Automatic IAM Authentication][iam-auth] (Postgres and MySQL only)\n- Metrics ([Cloud Monitoring][], [Cloud Trace][], and [Prometheus][])\n- [HTTP Healthchecks][health-check-example]\n- Service account impersonation\n- Separate Dialer functionality released as the [Cloud SQL Go Connector][go connector]\n- Configuration with environment variables\n- Fully POSIX-compliant flags\n",
                      "markdown": "`- [Automatic IAM Authentication][iam-auth] (Postgres and MySQL only)\n- Metrics ([Cloud Monitoring][], [Cloud Trace][], and [Prometheus][])\n- [HTTP Healthchecks][health-check-example]\n- Service account impersonation\n- Separate Dialer functionality released as the [Cloud SQL Go Connector][go connector]\n- Configuration with environment variables\n- Fully POSIX-compliant flags\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/README.md"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 56,
                  "endLine": 16,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\nThe Cloud SQL Auth Proxy has support for:\n\n- [Automatic IAM Authentication][iam-auth] (Postgres and MySQL only)\n- Metrics ([Cloud Monitoring][], [Cloud Trace][], and [Prometheus][])\n- [HTTP Healthchecks][health-check-example]\n- Service account impersonation\n",
                    "rendered": {
                      "text": "\nThe Cloud SQL Auth Proxy has support for:\n\n- [Automatic IAM Authentication][iam-auth] (Postgres and MySQL only)\n- Metrics ([Cloud Monitoring][], [Cloud Trace][], and [Prometheus][])\n- [HTTP Healthchecks][health-check-example]\n- Service account impersonation\n",
                      "markdown": "`\nThe Cloud SQL Auth Proxy has support for:\n\n- [Automatic IAM Authentication][iam-auth] (Postgres and MySQL only)\n- Metrics ([Cloud Monitoring][], [Cloud Trace][], and [Prometheus][])\n- [HTTP Healthchecks][health-check-example]\n- Service account impersonation\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/migration-guide.md"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 29,
                  "endLine": 106,
                  "endColumn": 67,
                  "snippet": {
                    "text": "```\n\nIn v2, we've significantly expanded the support for environment variables.\nAll flags can be set with an environment variable including instance connection names.\n\nFor example, in v2 this is possible:\n\n",
                    "rendered": {
                      "text": "```\n\nIn v2, we've significantly expanded the support for environment variables.\nAll flags can be set with an environment variable including instance connection names.\n\nFor example, in v2 this is possible:\n\n",
                      "markdown": "````\n\nIn v2, we've significantly expanded the support for environment variables.\nAll flags can be set with an environment variable including instance connection names.\n\nFor example, in v2 this is possible:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/migration-guide.md"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 43,
                  "endLine": 28,
                  "endColumn": 51,
                  "snippet": {
                    "text": "gcr.io/cloud-sql-connectors/cloud-sql-proxy\n```\n\nTo update to the v2 container, make sure to update the image name.\n\n## Behavior Differences\n\n",
                    "rendered": {
                      "text": "gcr.io/cloud-sql-connectors/cloud-sql-proxy\n```\n\nTo update to the v2 container, make sure to update the image name.\n\n## Behavior Differences\n\n",
                      "markdown": "`gcr.io/cloud-sql-connectors/cloud-sql-proxy\n```\n\nTo update to the v2 container, make sure to update the image name.\n\n## Behavior Differences\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/migration-guide.md"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 2,
                  "endLine": 28,
                  "endColumn": 10,
                  "snippet": {
                    "text": "gcr.io/cloud-sql-connectors/cloud-sql-proxy\n```\n\nTo update to the v2 container, make sure to update the image name.\n\n## Behavior Differences\n\n",
                    "rendered": {
                      "text": "gcr.io/cloud-sql-connectors/cloud-sql-proxy\n```\n\nTo update to the v2 container, make sure to update the image name.\n\n## Behavior Differences\n\n",
                      "markdown": "`gcr.io/cloud-sql-connectors/cloud-sql-proxy\n```\n\nTo update to the v2 container, make sure to update the image name.\n\n## Behavior Differences\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/migration-guide.md"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 61,
                  "endLine": 38,
                  "endColumn": 65,
                  "snippet": {
                    "text": "either the `--private-ip` flag or the query parameter. See the README for details.\n\nIn some cases, the v1 behavior may be preferrable. Use the `--auto-ip` flag to\nmimic v1 behavior. We generally recommend using deterministic IP address selection,\nbut recognize in some legacy environments `--auto-ip` may be necessary.\n\n## Sample Invocations\n",
                    "rendered": {
                      "text": "either the `--private-ip` flag or the query parameter. See the README for details.\n\nIn some cases, the v1 behavior may be preferrable. Use the `--auto-ip` flag to\nmimic v1 behavior. We generally recommend using deterministic IP address selection,\nbut recognize in some legacy environments `--auto-ip` may be necessary.\n\n## Sample Invocations\n",
                      "markdown": "`either the `--private-ip` flag or the query parameter. See the README for details.\n\nIn some cases, the v1 behavior may be preferrable. Use the `--auto-ip` flag to\nmimic v1 behavior. We generally recommend using deterministic IP address selection,\nbut recognize in some legacy environments `--auto-ip` may be necessary.\n\n## Sample Invocations\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/migration-guide.md"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 77,
                  "endLine": 34,
                  "endColumn": 3,
                  "snippet": {
                    "text": "## Behavior Differences\n\nIn v1, when a client connected, the Proxy would first try to use a public IP\nand then attempt to use a private IP. In v2, the Proxy now defaults to public\nIP without trying private IP. If you want to use private IP, you must pass\neither the `--private-ip` flag or the query parameter. See the README for details.\n\nIn some cases, the v1 behavior may be preferrable. Use the `--auto-ip` flag to\n",
                    "rendered": {
                      "text": "## Behavior Differences\n\nIn v1, when a client connected, the Proxy would first try to use a public IP\nand then attempt to use a private IP. In v2, the Proxy now defaults to public\nIP without trying private IP. If you want to use private IP, you must pass\neither the `--private-ip` flag or the query parameter. See the README for details.\n\nIn some cases, the v1 behavior may be preferrable. Use the `--auto-ip` flag to\n",
                      "markdown": "`## Behavior Differences\n\nIn v1, when a client connected, the Proxy would first try to use a public IP\nand then attempt to use a private IP. In v2, the Proxy now defaults to public\nIP without trying private IP. If you want to use private IP, you must pass\neither the `--private-ip` flag or the query parameter. See the README for details.\n\nIn some cases, the v1 behavior may be preferrable. Use the `--auto-ip` flag to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cloud-sql-proxy.zip/migration-guide.md"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 73,
                  "endLine": 33,
                  "snippet": {
                    "text": "\n## Behavior Differences\n\nIn v1, when a client connected, the Proxy would first try to use a public IP\nand then attempt to use a private IP. In v2, the Proxy now defaults to public\nIP without trying private IP. If you want to use private IP, you must pass\neither the `--private-ip` flag or the query parameter. See the README for details.\n\n",
                    "rendered": {
                      "text": "\n## Behavior Differences\n\nIn v1, when a client connected, the Proxy would first try to use a public IP\nand then attempt to use a private IP. In v2, the Proxy now defaults to public\nIP without trying private IP. If you want to use private IP, you must pass\neither the `--private-ip` flag or the query parameter. See the README for details.\n\n",
                      "markdown": "`\n## Behavior Differences\n\nIn v1, when a client connected, the Proxy would first try to use a public IP\nand then attempt to use a private IP. In v2, the Proxy now defaults to public\nIP without trying private IP. If you want to use private IP, you must pass\neither the `--private-ip` flag or the query parameter. See the README for details.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}