{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/harness/cases/19.t"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 28,
                  "endLine": 129,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\t */\n\tnew_ring = find_unused_va(ring_size);\n\tif (new_ring == MAP_FAILED) {\n\t\tfprintf(stderr, \"Unable to find suitable va for ring\\n\");\n\t\treturn NULL;\n\t}\n\n",
                    "rendered": {
                      "text": "\t */\n\tnew_ring = find_unused_va(ring_size);\n\tif (new_ring == MAP_FAILED) {\n\t\tfprintf(stderr, \"Unable to find suitable va for ring\\n\");\n\t\treturn NULL;\n\t}\n\n",
                      "markdown": "`\t */\n\tnew_ring = find_unused_va(ring_size);\n\tif (new_ring == MAP_FAILED) {\n\t\tfprintf(stderr, \"Unable to find suitable va for ring\\n\");\n\t\treturn NULL;\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "perl"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/harness/cases/19.t"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 18,
                  "endLine": 2,
                  "endColumn": 23,
                  "snippet": {
                    "text": "/*\n * Copyright 2015, Red Hat, Inc.\n *\n * This test remaps the aio ring buffer and ensures that I/O completions\n * can still be reaped from userspace.\n",
                    "rendered": {
                      "text": "/*\n * Copyright 2015, Red Hat, Inc.\n *\n * This test remaps the aio ring buffer and ensures that I/O completions\n * can still be reaped from userspace.\n",
                      "markdown": "`/*\n * Copyright 2015, Red Hat, Inc.\n *\n * This test remaps the aio ring buffer and ensures that I/O completions\n * can still be reaped from userspace.\n`"
                    }
                  },
                  "sourceLanguage": "perl"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/src/compat-0_1.c"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 1,
                  "endLine": 58,
                  "endColumn": 10,
                  "snippet": {
                    "text": "{\n\tstruct timespec timeout;\n\tif (const_timeout)\n\t\ttimeout = *const_timeout;\n\treturn io_getevents(ctx, 1, nr, events,\n\t\t\tconst_timeout ? &timeout : NULL);\n}\n",
                    "rendered": {
                      "text": "{\n\tstruct timespec timeout;\n\tif (const_timeout)\n\t\ttimeout = *const_timeout;\n\treturn io_getevents(ctx, 1, nr, events,\n\t\t\tconst_timeout ? &timeout : NULL);\n}\n",
                      "markdown": "`{\n\tstruct timespec timeout;\n\tif (const_timeout)\n\t\ttimeout = *const_timeout;\n\treturn io_getevents(ctx, 1, nr, events,\n\t\t\tconst_timeout ? &timeout : NULL);\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/src/compat-0_1.c"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 10,
                  "snippet": {
                    "text": "{\n\tstruct timespec timeout;\n\tif (when)\n\t\ttimeout = *when;\n\treturn io_getevents(ctx, 0, 0, NULL, when ? &timeout : NULL);\n}\n\n",
                    "rendered": {
                      "text": "{\n\tstruct timespec timeout;\n\tif (when)\n\t\ttimeout = *when;\n\treturn io_getevents(ctx, 0, 0, NULL, when ? &timeout : NULL);\n}\n\n",
                      "markdown": "`{\n\tstruct timespec timeout;\n\tif (when)\n\t\ttimeout = *when;\n\treturn io_getevents(ctx, 0, 0, NULL, when ? &timeout : NULL);\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io_queue_init.3"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 54,
                  "endLine": 18,
                  "endColumn": 58,
                  "snippet": {
                    "text": ".fi\n.SH DESCRIPTION\n.BR io_queue_init ()\nattempts to create an aio context capable of receiving at least\n.I maxevents\nevents. \n.I ctx\n",
                    "rendered": {
                      "text": ".fi\n.SH DESCRIPTION\n.BR io_queue_init ()\nattempts to create an aio context capable of receiving at least\n.I maxevents\nevents. \n.I ctx\n",
                      "markdown": "`.fi\n.SH DESCRIPTION\n.BR io_queue_init ()\nattempts to create an aio context capable of receiving at least\n.I maxevents\nevents. \n.I ctx\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/harness/cases/17.t"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 22,
                  "endLine": 4,
                  "endColumn": 27,
                  "snippet": {
                    "text": "/*\n * Copyright (C) 2014, Dan Aloni, Kernelim Ltd.\n * Copyright (C) 2014, Benjamin LaHaise <bcrl@kvack.org>.\n * Copyright (C) 2014, Red Hat, Inc.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n",
                    "rendered": {
                      "text": "/*\n * Copyright (C) 2014, Dan Aloni, Kernelim Ltd.\n * Copyright (C) 2014, Benjamin LaHaise <bcrl@kvack.org>.\n * Copyright (C) 2014, Red Hat, Inc.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n",
                      "markdown": "`/*\n * Copyright (C) 2014, Dan Aloni, Kernelim Ltd.\n * Copyright (C) 2014, Benjamin LaHaise <bcrl@kvack.org>.\n * Copyright (C) 2014, Red Hat, Inc.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n`"
                    }
                  },
                  "sourceLanguage": "perl"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/harness/cases/21.t"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 43,
                  "endLine": 8,
                  "endColumn": 47,
                  "snippet": {
                    "text": " *\n * RWF_NOWAIT will cause -EAGAIN to be returned in the io_event for\n * any I/O that cannot be serviced without blocking the submission\n * thread.  Instances covered by the kernel at the time this test was\n * written include:\n * - O_DIRECT I/O to a file offset that has populated page cache pages\n * - the submission context cannot obtain the inode lock\n",
                    "rendered": {
                      "text": " *\n * RWF_NOWAIT will cause -EAGAIN to be returned in the io_event for\n * any I/O that cannot be serviced without blocking the submission\n * thread.  Instances covered by the kernel at the time this test was\n * written include:\n * - O_DIRECT I/O to a file offset that has populated page cache pages\n * - the submission context cannot obtain the inode lock\n",
                      "markdown": "` *\n * RWF_NOWAIT will cause -EAGAIN to be returned in the io_event for\n * any I/O that cannot be serviced without blocking the submission\n * thread.  Instances covered by the kernel at the time this test was\n * written include:\n * - O_DIRECT I/O to a file offset that has populated page cache pages\n * - the submission context cannot obtain the inode lock\n`"
                    }
                  },
                  "sourceLanguage": "perl"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/harness/cases/21.t"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 6,
                  "endLine": 134,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\t}\n\n\t/*\n\t * We expect -EAGAIN due to the existence of a page cache page\n\t * for the file system block we are writing.\n\t */\n\tif (event.res != -EAGAIN) {\n",
                    "rendered": {
                      "text": "\t}\n\n\t/*\n\t * We expect -EAGAIN due to the existence of a page cache page\n\t * for the file system block we are writing.\n\t */\n\tif (event.res != -EAGAIN) {\n",
                      "markdown": "`\t}\n\n\t/*\n\t * We expect -EAGAIN due to the existence of a page cache page\n\t * for the file system block we are writing.\n\t */\n\tif (event.res != -EAGAIN) {\n`"
                    }
                  },
                  "sourceLanguage": "perl"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/harness/cases/21.t"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 50,
                  "endLine": 8,
                  "endColumn": 56,
                  "snippet": {
                    "text": " *\n * RWF_NOWAIT will cause -EAGAIN to be returned in the io_event for\n * any I/O that cannot be serviced without blocking the submission\n * thread.  Instances covered by the kernel at the time this test was\n * written include:\n * - O_DIRECT I/O to a file offset that has populated page cache pages\n * - the submission context cannot obtain the inode lock\n",
                    "rendered": {
                      "text": " *\n * RWF_NOWAIT will cause -EAGAIN to be returned in the io_event for\n * any I/O that cannot be serviced without blocking the submission\n * thread.  Instances covered by the kernel at the time this test was\n * written include:\n * - O_DIRECT I/O to a file offset that has populated page cache pages\n * - the submission context cannot obtain the inode lock\n",
                      "markdown": "` *\n * RWF_NOWAIT will cause -EAGAIN to be returned in the io_event for\n * any I/O that cannot be serviced without blocking the submission\n * thread.  Instances covered by the kernel at the time this test was\n * written include:\n * - O_DIRECT I/O to a file offset that has populated page cache pages\n * - the submission context cannot obtain the inode lock\n`"
                    }
                  },
                  "sourceLanguage": "perl"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/harness/cases/21.t"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 18,
                  "endLine": 2,
                  "endColumn": 23,
                  "snippet": {
                    "text": "/*\n * Copyright 2017, Red Hat, Inc.\n *\n * Test RWF_NOWAIT.\n *\n",
                    "rendered": {
                      "text": "/*\n * Copyright 2017, Red Hat, Inc.\n *\n * Test RWF_NOWAIT.\n *\n",
                      "markdown": "`/*\n * Copyright 2017, Red Hat, Inc.\n *\n * Test RWF_NOWAIT.\n *\n`"
                    }
                  },
                  "sourceLanguage": "perl"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/harness/cases/7.t"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 37,
                  "endLine": 7,
                  "endColumn": 41,
                  "snippet": {
                    "text": "- Write at the file size rlimit boundary: should give EFBIG.  (I think\n  the spec requires that you do NOT deliver SIGXFSZ in this case, where\n  you would do so for sync IO.) (7.t)\n- Special case: a write of zero bytes at or beyond the file size rlimit\n  boundary must return success. (7.t)\n*/\n\n",
                    "rendered": {
                      "text": "- Write at the file size rlimit boundary: should give EFBIG.  (I think\n  the spec requires that you do NOT deliver SIGXFSZ in this case, where\n  you would do so for sync IO.) (7.t)\n- Special case: a write of zero bytes at or beyond the file size rlimit\n  boundary must return success. (7.t)\n*/\n\n",
                      "markdown": "`- Write at the file size rlimit boundary: should give EFBIG.  (I think\n  the spec requires that you do NOT deliver SIGXFSZ in this case, where\n  you would do so for sync IO.) (7.t)\n- Special case: a write of zero bytes at or beyond the file size rlimit\n  boundary must return success. (7.t)\n*/\n\n`"
                    }
                  },
                  "sourceLanguage": "perl"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/harness/cases/7.t"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 7,
                  "endLine": 4,
                  "endColumn": 11,
                  "snippet": {
                    "text": "/* 7.t\n- Write overlapping the file size rlimit boundary: should be a short\n  write. (7.t)\n- Write at the file size rlimit boundary: should give EFBIG.  (I think\n  the spec requires that you do NOT deliver SIGXFSZ in this case, where\n  you would do so for sync IO.) (7.t)\n- Special case: a write of zero bytes at or beyond the file size rlimit\n",
                    "rendered": {
                      "text": "/* 7.t\n- Write overlapping the file size rlimit boundary: should be a short\n  write. (7.t)\n- Write at the file size rlimit boundary: should give EFBIG.  (I think\n  the spec requires that you do NOT deliver SIGXFSZ in this case, where\n  you would do so for sync IO.) (7.t)\n- Special case: a write of zero bytes at or beyond the file size rlimit\n",
                      "markdown": "`/* 7.t\n- Write overlapping the file size rlimit boundary: should be a short\n  write. (7.t)\n- Write at the file size rlimit boundary: should give EFBIG.  (I think\n  the spec requires that you do NOT deliver SIGXFSZ in this case, where\n  you would do so for sync IO.) (7.t)\n- Special case: a write of zero bytes at or beyond the file size rlimit\n`"
                    }
                  },
                  "sourceLanguage": "perl"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io.3"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 38,
                  "endLine": 218,
                  "endColumn": 42,
                  "snippet": {
                    "text": " */\nstatic void rd_done(io_context_t ctx, struct iocb *iocb, long res, long res2)\n{\n    /* library needs accessors to look at iocb? */\n    int iosize = iocb->u.c.nbytes;\n    char *buf = iocb->u.c.buf;\n    off_t offset = iocb->u.c.offset;\n",
                    "rendered": {
                      "text": " */\nstatic void rd_done(io_context_t ctx, struct iocb *iocb, long res, long res2)\n{\n    /* library needs accessors to look at iocb? */\n    int iosize = iocb->u.c.nbytes;\n    char *buf = iocb->u.c.buf;\n    off_t offset = iocb->u.c.offset;\n",
                      "markdown": "` */\nstatic void rd_done(io_context_t ctx, struct iocb *iocb, long res, long res2)\n{\n    /* library needs accessors to look at iocb? */\n    int iosize = iocb->u.c.nbytes;\n    char *buf = iocb->u.c.buf;\n    off_t offset = iocb->u.c.offset;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io.3"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 19,
                  "endLine": 126,
                  "endColumn": 28,
                  "snippet": {
                    "text": ".IR u.c.offset .\n.TP\n.B \"IO_CMD_NOP\"\nDo nothing for this control block.  This value is useful sometimes when\nan array of \n.B struct iocb\nvalues contains holes, i.e., some of the\n",
                    "rendered": {
                      "text": ".IR u.c.offset .\n.TP\n.B \"IO_CMD_NOP\"\nDo nothing for this control block.  This value is useful sometimes when\nan array of \n.B struct iocb\nvalues contains holes, i.e., some of the\n",
                      "markdown": "`.IR u.c.offset .\n.TP\n.B \"IO_CMD_NOP\"\nDo nothing for this control block.  This value is useful sometimes when\nan array of \n.B struct iocb\nvalues contains holes, i.e., some of the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io.3"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 22,
                  "endLine": 122,
                  "endColumn": 26,
                  "snippet": {
                    "text": ".I u.c.nbytes\nbytes starting at\n.I buf\ninto the file starting at position \n.IR u.c.offset .\n.TP\n.B \"IO_CMD_NOP\"\n",
                    "rendered": {
                      "text": ".I u.c.nbytes\nbytes starting at\n.I buf\ninto the file starting at position \n.IR u.c.offset .\n.TP\n.B \"IO_CMD_NOP\"\n",
                      "markdown": "`.I u.c.nbytes\nbytes starting at\n.I buf\ninto the file starting at position \n.IR u.c.offset .\n.TP\n.B \"IO_CMD_NOP\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io.3"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 14,
                  "endLine": 121,
                  "snippet": {
                    "text": ".B \"IO_CMD_PWRITE\"\nStart a write operation.  Write \n.I u.c.nbytes\nbytes starting at\n.I buf\ninto the file starting at position \n.IR u.c.offset .\n.TP\n",
                    "rendered": {
                      "text": ".B \"IO_CMD_PWRITE\"\nStart a write operation.  Write \n.I u.c.nbytes\nbytes starting at\n.I buf\ninto the file starting at position \n.IR u.c.offset .\n.TP\n",
                      "markdown": "`.B \"IO_CMD_PWRITE\"\nStart a write operation.  Write \n.I u.c.nbytes\nbytes starting at\n.I buf\ninto the file starting at position \n.IR u.c.offset .\n.TP\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io.3"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 43,
                  "endLine": 109,
                  "endColumn": 47,
                  "snippet": {
                    "text": "Is not currently used.\n.TP\n.B \"IO_CMD_PREAD\"\nStart a read operation.  Read from the file at position\n.I u.c.offset\nand store the next \n.I u.c.nbytes\n",
                    "rendered": {
                      "text": "Is not currently used.\n.TP\n.B \"IO_CMD_PREAD\"\nStart a read operation.  Read from the file at position\n.I u.c.offset\nand store the next \n.I u.c.nbytes\n",
                      "markdown": "`Is not currently used.\n.TP\n.B \"IO_CMD_PREAD\"\nStart a read operation.  Read from the file at position\n.I u.c.offset\nand store the next \n.I u.c.nbytes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io.3"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 45,
                  "endLine": 91,
                  "endColumn": 49,
                  "snippet": {
                    "text": "call would lead to an error.\n.TP\n.BI long \" u.c.offset\"\nThis element specifies the offset in the file at which the operation (input\nor output) is performed.  Since the operations are carried out in arbitrary\norder and more than one operation for one file descriptor can be\nstarted, one cannot expect a current read/write position of the file\n",
                    "rendered": {
                      "text": "call would lead to an error.\n.TP\n.BI long \" u.c.offset\"\nThis element specifies the offset in the file at which the operation (input\nor output) is performed.  Since the operations are carried out in arbitrary\norder and more than one operation for one file descriptor can be\nstarted, one cannot expect a current read/write position of the file\n",
                      "markdown": "`call would lead to an error.\n.TP\n.BI long \" u.c.offset\"\nThis element specifies the offset in the file at which the operation (input\nor output) is performed.  Since the operations are carried out in arbitrary\norder and more than one operation for one file descriptor can be\nstarted, one cannot expect a current read/write position of the file\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io.3"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 59,
                  "endLine": 16,
                  "endColumn": 63,
                  "snippet": {
                    "text": "The\n.B libaio\nlibrary defines a new set of I/O operations which can\nsignificantly reduce the time an application spends waiting at I/O.  The\nnew functions allow a program to initiate one or more I/O operations and\nthen immediately resume normal work while the I/O operations are\nexecuted in parallel.  \n",
                    "rendered": {
                      "text": "The\n.B libaio\nlibrary defines a new set of I/O operations which can\nsignificantly reduce the time an application spends waiting at I/O.  The\nnew functions allow a program to initiate one or more I/O operations and\nthen immediately resume normal work while the I/O operations are\nexecuted in parallel.  \n",
                      "markdown": "`The\n.B libaio\nlibrary defines a new set of I/O operations which can\nsignificantly reduce the time an application spends waiting at I/O.  The\nnew functions allow a program to initiate one or more I/O operations and\nthen immediately resume normal work while the I/O operations are\nexecuted in parallel.  \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io.3"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 36,
                  "endLine": 226,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    if (res2 != 0)\n\tio_error(\"aio read\", res2);\n    if (res != iosize) {\n\tfprintf(stderr, \"read missing bytes expect %d got %d\\\\n\", iocb->u.c.nbytes, res);\n\texit(1);\n    }\n\n",
                    "rendered": {
                      "text": "    if (res2 != 0)\n\tio_error(\"aio read\", res2);\n    if (res != iosize) {\n\tfprintf(stderr, \"read missing bytes expect %d got %d\\\\n\", iocb->u.c.nbytes, res);\n\texit(1);\n    }\n\n",
                      "markdown": "`    if (res2 != 0)\n\tio_error(\"aio read\", res2);\n    if (res != iosize) {\n\tfprintf(stderr, \"read missing bytes expect %d got %d\\\\n\", iocb->u.c.nbytes, res);\n\texit(1);\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io.3"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 36,
                  "endLine": 200,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\tio_error(\"aio write\", res2);\n    }\n    if (res != iocb->u.c.nbytes) {\n\tfprintf(stderr, \"write missed bytes expect %d got %d\\\\n\", iocb->u.c.nbytes, res2);\n\texit(1);\n    }\n    --tocopy;\n",
                    "rendered": {
                      "text": "\tio_error(\"aio write\", res2);\n    }\n    if (res != iocb->u.c.nbytes) {\n\tfprintf(stderr, \"write missed bytes expect %d got %d\\\\n\", iocb->u.c.nbytes, res2);\n\texit(1);\n    }\n    --tocopy;\n",
                      "markdown": "`\tio_error(\"aio write\", res2);\n    }\n    if (res != iocb->u.c.nbytes) {\n\tfprintf(stderr, \"write missed bytes expect %d got %d\\\\n\", iocb->u.c.nbytes, res2);\n\texit(1);\n    }\n    --tocopy;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io.3"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 19,
                  "endLine": 94,
                  "endColumn": 27,
                  "snippet": {
                    "text": "This element specifies the offset in the file at which the operation (input\nor output) is performed.  Since the operations are carried out in arbitrary\norder and more than one operation for one file descriptor can be\nstarted, one cannot expect a current read/write position of the file\ndescriptor.\n.TP\n.BI \"void *\" buf\n",
                    "rendered": {
                      "text": "This element specifies the offset in the file at which the operation (input\nor output) is performed.  Since the operations are carried out in arbitrary\norder and more than one operation for one file descriptor can be\nstarted, one cannot expect a current read/write position of the file\ndescriptor.\n.TP\n.BI \"void *\" buf\n",
                      "markdown": "`This element specifies the offset in the file at which the operation (input\nor output) is performed.  Since the operations are carried out in arbitrary\norder and more than one operation for one file descriptor can be\nstarted, one cannot expect a current read/write position of the file\ndescriptor.\n.TP\n.BI \"void *\" buf\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io.3"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 24,
                  "endLine": 16,
                  "endColumn": 30,
                  "snippet": {
                    "text": "The\n.B libaio\nlibrary defines a new set of I/O operations which can\nsignificantly reduce the time an application spends waiting at I/O.  The\nnew functions allow a program to initiate one or more I/O operations and\nthen immediately resume normal work while the I/O operations are\nexecuted in parallel.  \n",
                    "rendered": {
                      "text": "The\n.B libaio\nlibrary defines a new set of I/O operations which can\nsignificantly reduce the time an application spends waiting at I/O.  The\nnew functions allow a program to initiate one or more I/O operations and\nthen immediately resume normal work while the I/O operations are\nexecuted in parallel.  \n",
                      "markdown": "`The\n.B libaio\nlibrary defines a new set of I/O operations which can\nsignificantly reduce the time an application spends waiting at I/O.  The\nnew functions allow a program to initiate one or more I/O operations and\nthen immediately resume normal work while the I/O operations are\nexecuted in parallel.  \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io_prep_fsync.3"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 49,
                  "endLine": 81,
                  "endColumn": 3,
                  "snippet": {
                    "text": "\nIf\n.BR io_prep_fsync ()\nsucceeds, then it is only the I/O that was queued\nat the time of the call to\n.BR io_submit (3)\nthat is guaranteed to be\nforced to the relevant completion state. The completion of\n",
                    "rendered": {
                      "text": "\nIf\n.BR io_prep_fsync ()\nsucceeds, then it is only the I/O that was queued\nat the time of the call to\n.BR io_submit (3)\nthat is guaranteed to be\nforced to the relevant completion state. The completion of\n",
                      "markdown": "`\nIf\n.BR io_prep_fsync ()\nsucceeds, then it is only the I/O that was queued\nat the time of the call to\n.BR io_submit (3)\nthat is guaranteed to be\nforced to the relevant completion state. The completion of\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io_prep_fsync.3"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 28,
                  "endLine": 59,
                  "endColumn": 32,
                  "snippet": {
                    "text": "member of the\n.I iocb\nstructure referenced by\nthe iocb argument and queued at the time of the call to\n.BR io_submit ()\nto the synchronized I/O completion state. The function\ncall shall return when the synchronization request has been\n",
                    "rendered": {
                      "text": "member of the\n.I iocb\nstructure referenced by\nthe iocb argument and queued at the time of the call to\n.BR io_submit ()\nto the synchronized I/O completion state. The function\ncall shall return when the synchronization request has been\n",
                      "markdown": "`member of the\n.I iocb\nstructure referenced by\nthe iocb argument and queued at the time of the call to\n.BR io_submit ()\nto the synchronized I/O completion state. The function\ncall shall return when the synchronization request has been\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io_prep_fsync.3"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 6,
                  "endLine": 81,
                  "endColumn": 12,
                  "snippet": {
                    "text": "If\n.BR io_prep_fsync ()\nsucceeds, then it is only the I/O that was queued\nat the time of the call to\n.BR io_submit (3)\nthat is guaranteed to be\nforced to the relevant completion state. The completion of\n",
                    "rendered": {
                      "text": "If\n.BR io_prep_fsync ()\nsucceeds, then it is only the I/O that was queued\nat the time of the call to\n.BR io_submit (3)\nthat is guaranteed to be\nforced to the relevant completion state. The completion of\n",
                      "markdown": "`If\n.BR io_prep_fsync ()\nsucceeds, then it is only the I/O that was queued\nat the time of the call to\n.BR io_submit (3)\nthat is guaranteed to be\nforced to the relevant completion state. The completion of\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io_prep_fsync.3"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 35,
                  "endLine": 59,
                  "endColumn": 41,
                  "snippet": {
                    "text": "member of the\n.I iocb\nstructure referenced by\nthe iocb argument and queued at the time of the call to\n.BR io_submit ()\nto the synchronized I/O completion state. The function\ncall shall return when the synchronization request has been\n",
                    "rendered": {
                      "text": "member of the\n.I iocb\nstructure referenced by\nthe iocb argument and queued at the time of the call to\n.BR io_submit ()\nto the synchronized I/O completion state. The function\ncall shall return when the synchronization request has been\n",
                      "markdown": "`member of the\n.I iocb\nstructure referenced by\nthe iocb argument and queued at the time of the call to\n.BR io_submit ()\nto the synchronized I/O completion state. The function\ncall shall return when the synchronization request has been\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/harness/cases/20.t"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 40,
                  "endLine": 95,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t\t\tnr_events * i, aio_max_nr);\n\t\t\tret = read_proc_val(AIO_NR, &aio_nr);\n\t\t\tif (ret == 0)\n\t\t\t\tfprintf(stderr, \"aio_nr is currently at %u\\n\",\n\t\t\t\t\taio_nr);\n\n\t\t\tfree(ioctx);\n",
                    "rendered": {
                      "text": "\t\t\t\tnr_events * i, aio_max_nr);\n\t\t\tret = read_proc_val(AIO_NR, &aio_nr);\n\t\t\tif (ret == 0)\n\t\t\t\tfprintf(stderr, \"aio_nr is currently at %u\\n\",\n\t\t\t\t\taio_nr);\n\n\t\t\tfree(ioctx);\n",
                      "markdown": "`\t\t\t\tnr_events * i, aio_max_nr);\n\t\t\tret = read_proc_val(AIO_NR, &aio_nr);\n\t\t\tif (ret == 0)\n\t\t\t\tfprintf(stderr, \"aio_nr is currently at %u\\n\",\n\t\t\t\t\taio_nr);\n\n\t\t\tfree(ioctx);\n`"
                    }
                  },
                  "sourceLanguage": "perl"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/harness/cases/20.t"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 18,
                  "endLine": 2,
                  "endColumn": 23,
                  "snippet": {
                    "text": "/*\n * Copyright 2017, Red Hat, Inc.\n * Author: Jeff Moyer <jmoyer@redhat.com>\n * Based on test code from Mauricio Faria de Oliveira\n * \t\t\t   <mauricfo@linux.vnet.ibm.com>\n",
                    "rendered": {
                      "text": "/*\n * Copyright 2017, Red Hat, Inc.\n * Author: Jeff Moyer <jmoyer@redhat.com>\n * Based on test code from Mauricio Faria de Oliveira\n * \t\t\t   <mauricfo@linux.vnet.ibm.com>\n",
                      "markdown": "`/*\n * Copyright 2017, Red Hat, Inc.\n * Author: Jeff Moyer <jmoyer@redhat.com>\n * Based on test code from Mauricio Faria de Oliveira\n * \t\t\t   <mauricfo@linux.vnet.ibm.com>\n`"
                    }
                  },
                  "sourceLanguage": "perl"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/harness/cases/23.t"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 41,
                  "endLine": 167,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\t\tpthread_barrier_wait(&barrier);\n\n\t\t/*\n\t\t * Wait for the poll to complete.  Wait at most 5 seconds, in\n\t\t * case we hit the bug so the poll wouldn't otherwise complete.\n\t\t */\n\t\tret = io_getevents(ctx, 1, 1, &event, &timeout);\n",
                    "rendered": {
                      "text": "\t\tpthread_barrier_wait(&barrier);\n\n\t\t/*\n\t\t * Wait for the poll to complete.  Wait at most 5 seconds, in\n\t\t * case we hit the bug so the poll wouldn't otherwise complete.\n\t\t */\n\t\tret = io_getevents(ctx, 1, 1, &event, &timeout);\n",
                      "markdown": "`\t\tpthread_barrier_wait(&barrier);\n\n\t\t/*\n\t\t * Wait for the poll to complete.  Wait at most 5 seconds, in\n\t\t * case we hit the bug so the poll wouldn't otherwise complete.\n\t\t */\n\t\tret = io_getevents(ctx, 1, 1, &event, &timeout);\n`"
                    }
                  },
                  "sourceLanguage": "perl"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/harness/cases/23.t"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 31,
                  "endLine": 17,
                  "endColumn": 35,
                  "snippet": {
                    "text": " *\tThread 2: Splice a byte to the pipe.\n *\tThread 3: Read from the pipe, then splice another byte to it.\n *\n * The pipe will never be empty at the end, so the poll should always complete.\n * With the bug, that didn't always happen, as the second splice sometimes\n * didn't cause a wakeup due to the waitqueue entry being temporarily removed,\n * as per the following buggy sequence of events:\n",
                    "rendered": {
                      "text": " *\tThread 2: Splice a byte to the pipe.\n *\tThread 3: Read from the pipe, then splice another byte to it.\n *\n * The pipe will never be empty at the end, so the poll should always complete.\n * With the bug, that didn't always happen, as the second splice sometimes\n * didn't cause a wakeup due to the waitqueue entry being temporarily removed,\n * as per the following buggy sequence of events:\n",
                      "markdown": "` *\tThread 2: Splice a byte to the pipe.\n *\tThread 3: Read from the pipe, then splice another byte to it.\n *\n * The pipe will never be empty at the end, so the poll should always complete.\n * With the bug, that didn't always happen, as the second splice sometimes\n * didn't cause a wakeup due to the waitqueue entry being temporarily removed,\n * as per the following buggy sequence of events:\n`"
                    }
                  },
                  "sourceLanguage": "perl"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/harness/cases/23.t"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 16,
                  "endLine": 123,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\tstruct iocb iocb;\n\tstruct iocb *iocbs[] = { &iocb };\n\tstruct io_event event;\n\tstruct timespec timeout = { .tv_sec = 5 };\n\tchar c;\n\n\tret = io_setup(1, &ctx);\n",
                    "rendered": {
                      "text": "\tstruct iocb iocb;\n\tstruct iocb *iocbs[] = { &iocb };\n\tstruct io_event event;\n\tstruct timespec timeout = { .tv_sec = 5 };\n\tchar c;\n\n\tret = io_setup(1, &ctx);\n",
                      "markdown": "`\tstruct iocb iocb;\n\tstruct iocb *iocbs[] = { &iocb };\n\tstruct io_event event;\n\tstruct timespec timeout = { .tv_sec = 5 };\n\tchar c;\n\n\tret = io_setup(1, &ctx);\n`"
                    }
                  },
                  "sourceLanguage": "perl"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/harness/Makefile"
                },
                "region": {
                  "startLine": 62,
                  "endLine": 62,
                  "endColumn": 7,
                  "snippet": {
                    "text": "extracheck: $(EXTRAPROGS) root testdir.ext2 testdir.enospc ext2.img\n\tmount -o loop -t ext2 ext2-enospc.img testdir.enospc\n\t./runtests.sh cases/10.p; ret=$$?; umount testdir.enospc; exit $$ret\n\tmount -o loop -t ext2 ext2.img testdir.ext2\n\t./runtests.sh cases/8.p; ret=$$?; umount testdir.ext2; exit $$ret\n\ncheck: partcheck extracheck \n",
                    "rendered": {
                      "text": "extracheck: $(EXTRAPROGS) root testdir.ext2 testdir.enospc ext2.img\n\tmount -o loop -t ext2 ext2-enospc.img testdir.enospc\n\t./runtests.sh cases/10.p; ret=$$?; umount testdir.enospc; exit $$ret\n\tmount -o loop -t ext2 ext2.img testdir.ext2\n\t./runtests.sh cases/8.p; ret=$$?; umount testdir.ext2; exit $$ret\n\ncheck: partcheck extracheck \n",
                      "markdown": "`extracheck: $(EXTRAPROGS) root testdir.ext2 testdir.enospc ext2.img\n\tmount -o loop -t ext2 ext2-enospc.img testdir.enospc\n\t./runtests.sh cases/10.p; ret=$$?; umount testdir.enospc; exit $$ret\n\tmount -o loop -t ext2 ext2.img testdir.ext2\n\t./runtests.sh cases/8.p; ret=$$?; umount testdir.ext2; exit $$ret\n\ncheck: partcheck extracheck \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/harness/Makefile"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\tmke2fs -F -b 4096 $@\n\nextracheck: $(EXTRAPROGS) root testdir.ext2 testdir.enospc ext2.img\n\tmount -o loop -t ext2 ext2-enospc.img testdir.enospc\n\t./runtests.sh cases/10.p; ret=$$?; umount testdir.enospc; exit $$ret\n\tmount -o loop -t ext2 ext2.img testdir.ext2\n\t./runtests.sh cases/8.p; ret=$$?; umount testdir.ext2; exit $$ret\n",
                    "rendered": {
                      "text": "\tmke2fs -F -b 4096 $@\n\nextracheck: $(EXTRAPROGS) root testdir.ext2 testdir.enospc ext2.img\n\tmount -o loop -t ext2 ext2-enospc.img testdir.enospc\n\t./runtests.sh cases/10.p; ret=$$?; umount testdir.enospc; exit $$ret\n\tmount -o loop -t ext2 ext2.img testdir.ext2\n\t./runtests.sh cases/8.p; ret=$$?; umount testdir.ext2; exit $$ret\n",
                      "markdown": "`\tmke2fs -F -b 4096 $@\n\nextracheck: $(EXTRAPROGS) root testdir.ext2 testdir.enospc ext2.img\n\tmount -o loop -t ext2 ext2-enospc.img testdir.enospc\n\t./runtests.sh cases/10.p; ret=$$?; umount testdir.enospc; exit $$ret\n\tmount -o loop -t ext2 ext2.img testdir.ext2\n\t./runtests.sh cases/8.p; ret=$$?; umount testdir.ext2; exit $$ret\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/harness/Makefile"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\t./runtests.sh $(PARTPROGS)\n\next2.img:\n\tdd if=/dev/zero bs=1M count=10 of=$@\n\tmke2fs -F -b 4096 $@\n\nextracheck: $(EXTRAPROGS) root testdir.ext2 testdir.enospc ext2.img\n",
                    "rendered": {
                      "text": "\t./runtests.sh $(PARTPROGS)\n\next2.img:\n\tdd if=/dev/zero bs=1M count=10 of=$@\n\tmke2fs -F -b 4096 $@\n\nextracheck: $(EXTRAPROGS) root testdir.ext2 testdir.enospc ext2.img\n",
                      "markdown": "`\t./runtests.sh $(PARTPROGS)\n\next2.img:\n\tdd if=/dev/zero bs=1M count=10 of=$@\n\tmke2fs -F -b 4096 $@\n\nextracheck: $(EXTRAPROGS) root testdir.ext2 testdir.enospc ext2.img\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/harness/Makefile"
                },
                "region": {
                  "startLine": 44,
                  "endLine": 44,
                  "endColumn": 7,
                  "snippet": {
                    "text": "testdir/rwfile: testdir .PHONY\n\trm -f $@\n\techo \"test\" >$@\n\tchmod 600 $@\n\ntestdir testdir.enospc testdir.ext2:\n\tmkdir $@\n",
                    "rendered": {
                      "text": "testdir/rwfile: testdir .PHONY\n\trm -f $@\n\techo \"test\" >$@\n\tchmod 600 $@\n\ntestdir testdir.enospc testdir.ext2:\n\tmkdir $@\n",
                      "markdown": "`testdir/rwfile: testdir .PHONY\n\trm -f $@\n\techo \"test\" >$@\n\tchmod 600 $@\n\ntestdir testdir.enospc testdir.ext2:\n\tmkdir $@\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/harness/Makefile"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39,
                  "endColumn": 7,
                  "snippet": {
                    "text": "testdir/wofile: testdir .PHONY\n\trm -f $@\n\techo \"test\" >$@\n\tchmod 200 $@\n\ntestdir/rwfile: testdir .PHONY\n\trm -f $@\n",
                    "rendered": {
                      "text": "testdir/wofile: testdir .PHONY\n\trm -f $@\n\techo \"test\" >$@\n\tchmod 200 $@\n\ntestdir/rwfile: testdir .PHONY\n\trm -f $@\n",
                      "markdown": "`testdir/wofile: testdir .PHONY\n\trm -f $@\n\techo \"test\" >$@\n\tchmod 200 $@\n\ntestdir/rwfile: testdir .PHONY\n\trm -f $@\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/harness/Makefile"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 7,
                  "snippet": {
                    "text": "testdir/rofile: testdir .PHONY\n\trm -f $@\n\techo \"test\" >$@\n\tchmod 400 $@\n\ntestdir/wofile: testdir .PHONY\n\trm -f $@\n",
                    "rendered": {
                      "text": "testdir/rofile: testdir .PHONY\n\trm -f $@\n\techo \"test\" >$@\n\tchmod 400 $@\n\ntestdir/wofile: testdir .PHONY\n\trm -f $@\n",
                      "markdown": "`testdir/rofile: testdir .PHONY\n\trm -f $@\n\techo \"test\" >$@\n\tchmod 400 $@\n\ntestdir/wofile: testdir .PHONY\n\trm -f $@\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/harness/Makefile"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 43,
                  "endLine": 2,
                  "endColumn": 49,
                  "snippet": {
                    "text": "# foo.\nTEST_SRCS:=$(shell find cases/ -name \\*.t | sort -n -t/ -k2)\nEXTRAPROGS:=cases/8.p cases/10.p\nPARTPROGS:=$(filter-out $(EXTRAPROGS), $(patsubst %.t,%.p,$(TEST_SRCS)))\nPROGS:=$(PARTPROGS) $(EXTRAPROGS)\n",
                    "rendered": {
                      "text": "# foo.\nTEST_SRCS:=$(shell find cases/ -name \\*.t | sort -n -t/ -k2)\nEXTRAPROGS:=cases/8.p cases/10.p\nPARTPROGS:=$(filter-out $(EXTRAPROGS), $(patsubst %.t,%.p,$(TEST_SRCS)))\nPROGS:=$(PARTPROGS) $(EXTRAPROGS)\n",
                      "markdown": "`# foo.\nTEST_SRCS:=$(shell find cases/ -name \\*.t | sort -n -t/ -k2)\nEXTRAPROGS:=cases/8.p cases/10.p\nPARTPROGS:=$(filter-out $(EXTRAPROGS), $(patsubst %.t,%.p,$(TEST_SRCS)))\nPROGS:=$(PARTPROGS) $(EXTRAPROGS)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/harness/Makefile"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 18,
                  "endLine": 2,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# foo.\nTEST_SRCS:=$(shell find cases/ -name \\*.t | sort -n -t/ -k2)\nEXTRAPROGS:=cases/8.p cases/10.p\nPARTPROGS:=$(filter-out $(EXTRAPROGS), $(patsubst %.t,%.p,$(TEST_SRCS)))\nPROGS:=$(PARTPROGS) $(EXTRAPROGS)\n",
                    "rendered": {
                      "text": "# foo.\nTEST_SRCS:=$(shell find cases/ -name \\*.t | sort -n -t/ -k2)\nEXTRAPROGS:=cases/8.p cases/10.p\nPARTPROGS:=$(filter-out $(EXTRAPROGS), $(patsubst %.t,%.p,$(TEST_SRCS)))\nPROGS:=$(PARTPROGS) $(EXTRAPROGS)\n",
                      "markdown": "`# foo.\nTEST_SRCS:=$(shell find cases/ -name \\*.t | sort -n -t/ -k2)\nEXTRAPROGS:=cases/8.p cases/10.p\nPARTPROGS:=$(filter-out $(EXTRAPROGS), $(patsubst %.t,%.p,$(TEST_SRCS)))\nPROGS:=$(PARTPROGS) $(EXTRAPROGS)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io_prep_pwrite.3"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 14,
                  "endLine": 44,
                  "endColumn": 18,
                  "snippet": {
                    "text": "is a descriptor are written from the buffer\nstarting at\n.IR \"iocb->u.c.buf = buf\" .\nWriting starts at the absolute position\n.IR \"ioc->u.c.offset = offset\"\nin the file.\n.PP\n",
                    "rendered": {
                      "text": "is a descriptor are written from the buffer\nstarting at\n.IR \"iocb->u.c.buf = buf\" .\nWriting starts at the absolute position\n.IR \"ioc->u.c.offset = offset\"\nin the file.\n.PP\n",
                      "markdown": "`is a descriptor are written from the buffer\nstarting at\n.IR \"iocb->u.c.buf = buf\" .\nWriting starts at the absolute position\n.IR \"ioc->u.c.offset = offset\"\nin the file.\n.PP\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io_prep_pwrite.3"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 8,
                  "endLine": 43,
                  "snippet": {
                    "text": "bytes of the file for which\n.IR \"iocb->aio_fildes = fd\"\nis a descriptor are written from the buffer\nstarting at\n.IR \"iocb->u.c.buf = buf\" .\nWriting starts at the absolute position\n.IR \"ioc->u.c.offset = offset\"\nin the file.\n",
                    "rendered": {
                      "text": "bytes of the file for which\n.IR \"iocb->aio_fildes = fd\"\nis a descriptor are written from the buffer\nstarting at\n.IR \"iocb->u.c.buf = buf\" .\nWriting starts at the absolute position\n.IR \"ioc->u.c.offset = offset\"\nin the file.\n",
                      "markdown": "`bytes of the file for which\n.IR \"iocb->aio_fildes = fd\"\nis a descriptor are written from the buffer\nstarting at\n.IR \"iocb->u.c.buf = buf\" .\nWriting starts at the absolute position\n.IR \"ioc->u.c.offset = offset\"\nin the file.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/ChangeLog"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 21,
                  "endLine": 7,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\t- Change test harness to compile against this dir, not global install\n\t- Fix 5.t for archs where PROT_WRITE mappings are readable.\n\t- Allow sending of SIGXFSZ on aio over limits\n\t- Explicitly specify bash for runtests.sh\n\t- Put deprecating comments on never-merged io_prep_poll\n\t- Add io_prep_preadv and io_prep_pwritev\n\t- Add eventfd support (io_set_eventfd).\n",
                    "rendered": {
                      "text": "\t- Change test harness to compile against this dir, not global install\n\t- Fix 5.t for archs where PROT_WRITE mappings are readable.\n\t- Allow sending of SIGXFSZ on aio over limits\n\t- Explicitly specify bash for runtests.sh\n\t- Put deprecating comments on never-merged io_prep_poll\n\t- Add io_prep_preadv and io_prep_pwritev\n\t- Add eventfd support (io_set_eventfd).\n",
                      "markdown": "`\t- Change test harness to compile against this dir, not global install\n\t- Fix 5.t for archs where PROT_WRITE mappings are readable.\n\t- Allow sending of SIGXFSZ on aio over limits\n\t- Explicitly specify bash for runtests.sh\n\t- Put deprecating comments on never-merged io_prep_poll\n\t- Add io_prep_preadv and io_prep_pwritev\n\t- Add eventfd support (io_set_eventfd).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/ChangeLog"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 11,
                  "endLine": 16,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t- remove libredhat-kernel\n\t- add rough outline for man pages\n\t- make the compiled io_getevents() add the extra parameter and \n\t  pass the timeout for updating as per 2.5\n\t- fixes for ia64, now works\n\t- fixes for x86-64\n\t- powerpc support from Gianni Tedesco <gianni@ecsc.co.uk>\n",
                    "rendered": {
                      "text": "\t- remove libredhat-kernel\n\t- add rough outline for man pages\n\t- make the compiled io_getevents() add the extra parameter and \n\t  pass the timeout for updating as per 2.5\n\t- fixes for ia64, now works\n\t- fixes for x86-64\n\t- powerpc support from Gianni Tedesco <gianni@ecsc.co.uk>\n",
                      "markdown": "`\t- remove libredhat-kernel\n\t- add rough outline for man pages\n\t- make the compiled io_getevents() add the extra parameter and \n\t  pass the timeout for updating as per 2.5\n\t- fixes for ia64, now works\n\t- fixes for x86-64\n\t- powerpc support from Gianni Tedesco <gianni@ecsc.co.uk>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/ChangeLog"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 21,
                  "endLine": 7,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\t- Change test harness to compile against this dir, not global install\n\t- Fix 5.t for archs where PROT_WRITE mappings are readable.\n\t- Allow sending of SIGXFSZ on aio over limits\n\t- Explicitly specify bash for runtests.sh\n\t- Put deprecating comments on never-merged io_prep_poll\n\t- Add io_prep_preadv and io_prep_pwritev\n\t- Add eventfd support (io_set_eventfd).\n",
                    "rendered": {
                      "text": "\t- Change test harness to compile against this dir, not global install\n\t- Fix 5.t for archs where PROT_WRITE mappings are readable.\n\t- Allow sending of SIGXFSZ on aio over limits\n\t- Explicitly specify bash for runtests.sh\n\t- Put deprecating comments on never-merged io_prep_poll\n\t- Add io_prep_preadv and io_prep_pwritev\n\t- Add eventfd support (io_set_eventfd).\n",
                      "markdown": "`\t- Change test harness to compile against this dir, not global install\n\t- Fix 5.t for archs where PROT_WRITE mappings are readable.\n\t- Allow sending of SIGXFSZ on aio over limits\n\t- Explicitly specify bash for runtests.sh\n\t- Put deprecating comments on never-merged io_prep_poll\n\t- Add io_prep_preadv and io_prep_pwritev\n\t- Add eventfd support (io_set_eventfd).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/harness/cases/15.t"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 47,
                  "endLine": 82,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\t\tunsigned int j;\n\t\tfor (j = 0; j < SIZE; j++) {\n\t\t\tif (buf[i*SIZE + j] != i) {\n\t\t\t\tprintf(\"Unexpected value after offset readv at %i\\n\",\n\t\t\t\t       i*SIZE + j);\n\t\t\t\tstatus |= 1;\n\t\t\t\tbreak;\n",
                    "rendered": {
                      "text": "\t\tunsigned int j;\n\t\tfor (j = 0; j < SIZE; j++) {\n\t\t\tif (buf[i*SIZE + j] != i) {\n\t\t\t\tprintf(\"Unexpected value after offset readv at %i\\n\",\n\t\t\t\t       i*SIZE + j);\n\t\t\t\tstatus |= 1;\n\t\t\t\tbreak;\n",
                      "markdown": "`\t\tunsigned int j;\n\t\tfor (j = 0; j < SIZE; j++) {\n\t\t\tif (buf[i*SIZE + j] != i) {\n\t\t\t\tprintf(\"Unexpected value after offset readv at %i\\n\",\n\t\t\t\t       i*SIZE + j);\n\t\t\t\tstatus |= 1;\n\t\t\t\tbreak;\n`"
                    }
                  },
                  "sourceLanguage": "perl"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/harness/cases/15.t"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 48,
                  "endLine": 65,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\tunsigned int j;\n\t\tfor (j = 0; j < SIZE; j++) {\n\t\t\tif (buf[i*SIZE + j] != i) {\n\t\t\t\tprintf(\"Unexpected value after offset writev at %i\\n\",\n\t\t\t\t       i*SIZE + j);\n\t\t\t\tstatus |= 1;\n\t\t\t\tbreak;\n",
                    "rendered": {
                      "text": "\t\tunsigned int j;\n\t\tfor (j = 0; j < SIZE; j++) {\n\t\t\tif (buf[i*SIZE + j] != i) {\n\t\t\t\tprintf(\"Unexpected value after offset writev at %i\\n\",\n\t\t\t\t       i*SIZE + j);\n\t\t\t\tstatus |= 1;\n\t\t\t\tbreak;\n",
                      "markdown": "`\t\tunsigned int j;\n\t\tfor (j = 0; j < SIZE; j++) {\n\t\t\tif (buf[i*SIZE + j] != i) {\n\t\t\t\tprintf(\"Unexpected value after offset writev at %i\\n\",\n\t\t\t\t       i*SIZE + j);\n\t\t\t\tstatus |= 1;\n\t\t\t\tbreak;\n`"
                    }
                  },
                  "sourceLanguage": "perl"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/harness/cases/15.t"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 40,
                  "endLine": 48,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\tunsigned int j;\n\t\tfor (j = 0; j < SIZE; j++) {\n\t\t\tif (buf[i*SIZE + j] != i) {\n\t\t\t\tprintf(\"Unexpected value after readv at %i\\n\",\n\t\t\t\t       i*SIZE + j);\n\t\t\t\tstatus |= 1;\n\t\t\t\tbreak;\n",
                    "rendered": {
                      "text": "\t\tunsigned int j;\n\t\tfor (j = 0; j < SIZE; j++) {\n\t\t\tif (buf[i*SIZE + j] != i) {\n\t\t\t\tprintf(\"Unexpected value after readv at %i\\n\",\n\t\t\t\t       i*SIZE + j);\n\t\t\t\tstatus |= 1;\n\t\t\t\tbreak;\n",
                      "markdown": "`\t\tunsigned int j;\n\t\tfor (j = 0; j < SIZE; j++) {\n\t\t\tif (buf[i*SIZE + j] != i) {\n\t\t\t\tprintf(\"Unexpected value after readv at %i\\n\",\n\t\t\t\t       i*SIZE + j);\n\t\t\t\tstatus |= 1;\n\t\t\t\tbreak;\n`"
                    }
                  },
                  "sourceLanguage": "perl"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/harness/cases/15.t"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 41,
                  "endLine": 32,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\t\tunsigned int j;\n\t\tfor (j = 0; j < SIZE; j++) {\n\t\t\tif (buf[i*SIZE + j] != i) {\n\t\t\t\tprintf(\"Unexpected value after writev at %i\\n\",\n\t\t\t\t       i*SIZE + j);\n\t\t\t\tstatus |= 1;\n\t\t\t\tbreak;\n",
                    "rendered": {
                      "text": "\t\tunsigned int j;\n\t\tfor (j = 0; j < SIZE; j++) {\n\t\t\tif (buf[i*SIZE + j] != i) {\n\t\t\t\tprintf(\"Unexpected value after writev at %i\\n\",\n\t\t\t\t       i*SIZE + j);\n\t\t\t\tstatus |= 1;\n\t\t\t\tbreak;\n",
                      "markdown": "`\t\tunsigned int j;\n\t\tfor (j = 0; j < SIZE; j++) {\n\t\t\tif (buf[i*SIZE + j] != i) {\n\t\t\t\tprintf(\"Unexpected value after writev at %i\\n\",\n\t\t\t\t       i*SIZE + j);\n\t\t\t\tstatus |= 1;\n\t\t\t\tbreak;\n`"
                    }
                  },
                  "sourceLanguage": "perl"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/harness/README"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 54,
                  "endLine": 12,
                  "endColumn": 58,
                  "snippet": {
                    "text": "to directories) are as follows:\n\n\ttestdir/\n\t\t- used for general read/write test cases.  Must have at \n\t\t  least as much free space as the machine has RAM (up \n\t\t  to 768MB).\n\ttestdir.enospc/\n",
                    "rendered": {
                      "text": "to directories) are as follows:\n\n\ttestdir/\n\t\t- used for general read/write test cases.  Must have at \n\t\t  least as much free space as the machine has RAM (up \n\t\t  to 768MB).\n\ttestdir.enospc/\n",
                      "markdown": "`to directories) are as follows:\n\n\ttestdir/\n\t\t- used for general read/write test cases.  Must have at \n\t\t  least as much free space as the machine has RAM (up \n\t\t  to 768MB).\n\ttestdir.enospc/\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io_prep_pread.3"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 14,
                  "endLine": 45,
                  "endColumn": 18,
                  "snippet": {
                    "text": "is a descriptor are written to the buffer\nstarting at\n.IR \"iocb->u.c.buf = buf\" .\nReading starts at the absolute position\n.I ioc->u.c.offset = offset\nin the file.\n.PP\n",
                    "rendered": {
                      "text": "is a descriptor are written to the buffer\nstarting at\n.IR \"iocb->u.c.buf = buf\" .\nReading starts at the absolute position\n.I ioc->u.c.offset = offset\nin the file.\n.PP\n",
                      "markdown": "`is a descriptor are written to the buffer\nstarting at\n.IR \"iocb->u.c.buf = buf\" .\nReading starts at the absolute position\n.I ioc->u.c.offset = offset\nin the file.\n.PP\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io_prep_pread.3"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 8,
                  "endLine": 44,
                  "snippet": {
                    "text": "bytes of the file for which\n.I iocb->aio_fildes = fd\nis a descriptor are written to the buffer\nstarting at\n.IR \"iocb->u.c.buf = buf\" .\nReading starts at the absolute position\n.I ioc->u.c.offset = offset\nin the file.\n",
                    "rendered": {
                      "text": "bytes of the file for which\n.I iocb->aio_fildes = fd\nis a descriptor are written to the buffer\nstarting at\n.IR \"iocb->u.c.buf = buf\" .\nReading starts at the absolute position\n.I ioc->u.c.offset = offset\nin the file.\n",
                      "markdown": "`bytes of the file for which\n.I iocb->aio_fildes = fd\nis a descriptor are written to the buffer\nstarting at\n.IR \"iocb->u.c.buf = buf\" .\nReading starts at the absolute position\n.I ioc->u.c.offset = offset\nin the file.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io_fsync.3"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 64,
                  "endLine": 39,
                  "endColumn": 68,
                  "snippet": {
                    "text": "after the operation terminated, but this sometimes would mean wasting\nresources (mainly computation time). \n.PP\nCalling this function forces all I/O operations operating queued at the\ntime of the function call operating on the file descriptor\n.IR \"iocb->io_fildes\"\ninto the synchronized I/O completion state.  The\n",
                    "rendered": {
                      "text": "after the operation terminated, but this sometimes would mean wasting\nresources (mainly computation time). \n.PP\nCalling this function forces all I/O operations operating queued at the\ntime of the function call operating on the file descriptor\n.IR \"iocb->io_fildes\"\ninto the synchronized I/O completion state.  The\n",
                      "markdown": "`after the operation terminated, but this sometimes would mean wasting\nresources (mainly computation time). \n.PP\nCalling this function forces all I/O operations operating queued at the\ntime of the function call operating on the file descriptor\n.IR \"iocb->io_fildes\"\ninto the synchronized I/O completion state.  The\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io_fsync.3"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 71,
                  "endLine": 40,
                  "endColumn": 5,
                  "snippet": {
                    "text": "after the operation terminated, but this sometimes would mean wasting\nresources (mainly computation time). \n.PP\nCalling this function forces all I/O operations operating queued at the\ntime of the function call operating on the file descriptor\n.IR \"iocb->io_fildes\"\ninto the synchronized I/O completion state.  The\n.BR io_fsync ()\n",
                    "rendered": {
                      "text": "after the operation terminated, but this sometimes would mean wasting\nresources (mainly computation time). \n.PP\nCalling this function forces all I/O operations operating queued at the\ntime of the function call operating on the file descriptor\n.IR \"iocb->io_fildes\"\ninto the synchronized I/O completion state.  The\n.BR io_fsync ()\n",
                      "markdown": "`after the operation terminated, but this sometimes would mean wasting\nresources (mainly computation time). \n.PP\nCalling this function forces all I/O operations operating queued at the\ntime of the function call operating on the file descriptor\n.IR \"iocb->io_fildes\"\ninto the synchronized I/O completion state.  The\n.BR io_fsync ()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/COPYING"
                },
                "region": {
                  "startLine": 476,
                  "startColumn": 4,
                  "endLine": 476,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  To apply these terms, attach the following notices to the library.\nIt is safest to attach them to the start of each source file to most\neffectively convey the exclusion of warranty; and each file should\nhave at least the \"copyright\" line and a pointer to where the full\nnotice is found.\n\n\n",
                    "rendered": {
                      "text": "  To apply these terms, attach the following notices to the library.\nIt is safest to attach them to the start of each source file to most\neffectively convey the exclusion of warranty; and each file should\nhave at least the \"copyright\" line and a pointer to where the full\nnotice is found.\n\n\n",
                      "markdown": "`  To apply these terms, attach the following notices to the library.\nIt is safest to attach them to the start of each source file to most\neffectively convey the exclusion of warranty; and each file should\nhave at least the \"copyright\" line and a pointer to where the full\nnotice is found.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/COPYING"
                },
                "region": {
                  "startLine": 385,
                  "startColumn": 30,
                  "endLine": 385,
                  "endColumn": 34,
                  "snippet": {
                    "text": "excuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Library at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Library by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\n",
                    "rendered": {
                      "text": "excuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Library at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Library by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\n",
                      "markdown": "`excuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Library at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Library by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/COPYING"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 57,
                  "endLine": 311,
                  "snippet": {
                    "text": "    the user installs one, as long as the modified version is\n    interface-compatible with the version that the work was made with.\n\n    c) Accompany the work with a written offer, valid for at\n    least three years, to give the same user the materials\n    specified in Subsection 6a, above, for a charge no more\n    than the cost of performing this distribution.\n\n",
                    "rendered": {
                      "text": "    the user installs one, as long as the modified version is\n    interface-compatible with the version that the work was made with.\n\n    c) Accompany the work with a written offer, valid for at\n    least three years, to give the same user the materials\n    specified in Subsection 6a, above, for a charge no more\n    than the cost of performing this distribution.\n\n",
                      "markdown": "`    the user installs one, as long as the modified version is\n    interface-compatible with the version that the work was made with.\n\n    c) Accompany the work with a written offer, valid for at\n    least three years, to give the same user the materials\n    specified in Subsection 6a, above, for a charge no more\n    than the cost of performing this distribution.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/COPYING"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 55,
                  "endLine": 303,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n",
                    "rendered": {
                      "text": "    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n",
                      "markdown": "`    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/COPYING"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 21,
                  "endLine": 207,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library\n",
                    "rendered": {
                      "text": "\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library\n",
                      "markdown": "`\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/COPYING"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 58,
                  "endLine": 176,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    b) You must cause the files modified to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    c) You must cause the whole of the work to be licensed at no\n    charge to all third parties under the terms of this License.\n\n    d) If a facility in the modified Library refers to a function or a\n",
                    "rendered": {
                      "text": "    b) You must cause the files modified to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    c) You must cause the whole of the work to be licensed at no\n    charge to all third parties under the terms of this License.\n\n    d) If a facility in the modified Library refers to a function or a\n",
                      "markdown": "`    b) You must cause the files modified to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    c) You must cause the whole of the work to be licensed at no\n    charge to all third parties under the terms of this License.\n\n    d) If a facility in the modified Library refers to a function or a\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/COPYING"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 11,
                  "endLine": 163,
                  "endColumn": 15,
                  "snippet": {
                    "text": "Library.\n\n  You may charge a fee for the physical act of transferring a copy,\nand you may at your option offer warranty protection in exchange for a\nfee.\n\f\n  2. You may modify your copy or copies of the Library or any portion\n",
                    "rendered": {
                      "text": "Library.\n\n  You may charge a fee for the physical act of transferring a copy,\nand you may at your option offer warranty protection in exchange for a\nfee.\n\f\n  2. You may modify your copy or copies of the Library or any portion\n",
                      "markdown": "`Library.\n\n  You may charge a fee for the physical act of transferring a copy,\nand you may at your option offer warranty protection in exchange for a\nfee.\n\f\n  2. You may modify your copy or copies of the Library or any portion\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/COPYING"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 52,
                  "endLine": 143,
                  "snippet": {
                    "text": "  \"Source code\" for a work means the preferred form of the work for\nmaking modifications to it.  For a library, complete source code means\nall the source code for all modules it contains, plus any associated\ninterface definition files, plus the scripts used to control\ncompilation\nand installation of the library.\n\n  Activities other than copying, distribution and modification are not\n",
                    "rendered": {
                      "text": "  \"Source code\" for a work means the preferred form of the work for\nmaking modifications to it.  For a library, complete source code means\nall the source code for all modules it contains, plus any associated\ninterface definition files, plus the scripts used to control\ncompilation\nand installation of the library.\n\n  Activities other than copying, distribution and modification are not\n",
                      "markdown": "`  \"Source code\" for a work means the preferred form of the work for\nmaking modifications to it.  For a library, complete source code means\nall the source code for all modules it contains, plus any associated\ninterface definition files, plus the scripts used to control\ncompilation\nand installation of the library.\n\n  Activities other than copying, distribution and modification are not\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/COPYING"
                },
                "region": {
                  "startLine": 431,
                  "startColumn": 12,
                  "endLine": 431,
                  "endColumn": 18,
                  "snippet": {
                    "text": "license version number, you may choose any version ever published by\nthe Free Software Foundation.\n^L\n  14. If you wish to incorporate parts of the Library into other free\nprograms whose distribution conditions are incompatible with these,\nwrite to the author to ask for permission.  For software which is\ncopyrighted by the Free Software Foundation, write to the Free\n",
                    "rendered": {
                      "text": "license version number, you may choose any version ever published by\nthe Free Software Foundation.\n^L\n  14. If you wish to incorporate parts of the Library into other free\nprograms whose distribution conditions are incompatible with these,\nwrite to the author to ask for permission.  For software which is\ncopyrighted by the Free Software Foundation, write to the Free\n",
                      "markdown": "`license version number, you may choose any version ever published by\nthe Free Software Foundation.\n^L\n  14. If you wish to incorporate parts of the Library into other free\nprograms whose distribution conditions are incompatible with these,\nwrite to the author to ask for permission.  For software which is\ncopyrighted by the Free Software Foundation, write to the Free\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/COPYING"
                },
                "region": {
                  "startLine": 419,
                  "startColumn": 50,
                  "endLine": 419,
                  "endColumn": 56,
                  "snippet": {
                    "text": "the limitation as if written in the body of this License.\n\n  13. The Free Software Foundation may publish revised and/or new\nversions of the Lesser General Public License from time to time.\nSuch new versions will be similar in spirit to the present version,\nbut may differ in detail to address new problems or concerns.\n\n",
                    "rendered": {
                      "text": "the limitation as if written in the body of this License.\n\n  13. The Free Software Foundation may publish revised and/or new\nversions of the Lesser General Public License from time to time.\nSuch new versions will be similar in spirit to the present version,\nbut may differ in detail to address new problems or concerns.\n\n",
                      "markdown": "`the limitation as if written in the body of this License.\n\n  13. The Free Software Foundation may publish revised and/or new\nversions of the Lesser General Public License from time to time.\nSuch new versions will be similar in spirit to the present version,\nbut may differ in detail to address new problems or concerns.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/COPYING"
                },
                "region": {
                  "startLine": 370,
                  "startColumn": 10,
                  "endLine": 370,
                  "endColumn": 16,
                  "snippet": {
                    "text": "all its terms and conditions for copying, distributing or modifying\nthe Library or works based on it.\n\n  10. Each time you redistribute the Library (or any work based on the\nLibrary), the recipient automatically receives a license from the\noriginal licensor to copy, distribute, link with or modify the Library\nsubject to these terms and conditions.  You may not impose any further\n",
                    "rendered": {
                      "text": "all its terms and conditions for copying, distributing or modifying\nthe Library or works based on it.\n\n  10. Each time you redistribute the Library (or any work based on the\nLibrary), the recipient automatically receives a license from the\noriginal licensor to copy, distribute, link with or modify the Library\nsubject to these terms and conditions.  You may not impose any further\n",
                      "markdown": "`all its terms and conditions for copying, distributing or modifying\nthe Library or works based on it.\n\n  10. Each time you redistribute the Library (or any work based on the\nLibrary), the recipient automatically receives a license from the\noriginal licensor to copy, distribute, link with or modify the Library\nsubject to these terms and conditions.  You may not impose any further\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/COPYING"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 12,
                  "endLine": 351,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n    b) Give prominent notice with the combined library of the fact\n    that part of it is a work based on the Library, and explaining\n    where to find the accompanying uncombined form of the same work.\n\n  8. You may not copy, modify, sublicense, link with, or distribute\nthe Library except as expressly provided under this License.  Any\n",
                    "rendered": {
                      "text": "\n    b) Give prominent notice with the combined library of the fact\n    that part of it is a work based on the Library, and explaining\n    where to find the accompanying uncombined form of the same work.\n\n  8. You may not copy, modify, sublicense, link with, or distribute\nthe Library except as expressly provided under this License.  Any\n",
                      "markdown": "`\n    b) Give prominent notice with the combined library of the fact\n    that part of it is a work based on the Library, and explaining\n    where to find the accompanying uncombined form of the same work.\n\n  8. You may not copy, modify, sublicense, link with, or distribute\nthe Library except as expressly provided under this License.  Any\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/COPYING"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 62,
                  "endLine": 303,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n",
                    "rendered": {
                      "text": "    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n",
                      "markdown": "`    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/COPYING"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 32,
                  "endLine": 228,
                  "endColumn": 38,
                  "snippet": {
                    "text": "that copy, so the ordinary GNU General Public License applies to all\nsubsequent copies and derivative works made from that copy.\n\n  This option is useful when you wish to copy part of the code of\nthe Library into a program that is not a library.\n\n  4. You may copy and distribute the Library (or a portion or\n",
                    "rendered": {
                      "text": "that copy, so the ordinary GNU General Public License applies to all\nsubsequent copies and derivative works made from that copy.\n\n  This option is useful when you wish to copy part of the code of\nthe Library into a program that is not a library.\n\n  4. You may copy and distribute the Library (or a portion or\n",
                      "markdown": "`that copy, so the ordinary GNU General Public License applies to all\nsubsequent copies and derivative works made from that copy.\n\n  This option is useful when you wish to copy part of the code of\nthe Library into a program that is not a library.\n\n  4. You may copy and distribute the Library (or a portion or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/COPYING"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 21,
                  "endLine": 62,
                  "endColumn": 27,
                  "snippet": {
                    "text": "introduced by others.\n^L\n  Finally, software patents pose a constant threat to the existence of\nany free program.  We wish to make sure that a company cannot\neffectively restrict the users of a free program by obtaining a\nrestrictive license from a patent holder.  Therefore, we insist that\nany patent license obtained for a version of the library must be\n",
                    "rendered": {
                      "text": "introduced by others.\n^L\n  Finally, software patents pose a constant threat to the existence of\nany free program.  We wish to make sure that a company cannot\neffectively restrict the users of a free program by obtaining a\nrestrictive license from a patent holder.  Therefore, we insist that\nany patent license obtained for a version of the library must be\n",
                      "markdown": "`introduced by others.\n^L\n  Finally, software patents pose a constant threat to the existence of\nany free program.  We wish to make sure that a company cannot\neffectively restrict the users of a free program by obtaining a\nrestrictive license from a patent holder.  Therefore, we insist that\nany patent license obtained for a version of the library must be\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/COPYING"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 8,
                  "endLine": 32,
                  "endColumn": 17,
                  "snippet": {
                    "text": "  When we speak of free software, we are referring to freedom of use,\nnot price.  Our General Public Licenses are designed to make sure that\nyou have the freedom to distribute copies of free software (and charge\nfor this service if you wish); that you receive source code or can get\nit if you want it; that you can change the software and use pieces of\nit in new free programs; and that you are informed that you can do\nthese things.\n",
                    "rendered": {
                      "text": "  When we speak of free software, we are referring to freedom of use,\nnot price.  Our General Public Licenses are designed to make sure that\nyou have the freedom to distribute copies of free software (and charge\nfor this service if you wish); that you receive source code or can get\nit if you want it; that you can change the software and use pieces of\nit in new free programs; and that you are informed that you can do\nthese things.\n",
                      "markdown": "`  When we speak of free software, we are referring to freedom of use,\nnot price.  Our General Public Licenses are designed to make sure that\nyou have the freedom to distribute copies of free software (and charge\nfor this service if you wish); that you receive source code or can get\nit if you want it; that you can change the software and use pieces of\nit in new free programs; and that you are informed that you can do\nthese things.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/harness/cases/8.t"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 33,
                  "endLine": 2,
                  "endColumn": 37,
                  "snippet": {
                    "text": "/* 8.t\n- Ditto for the above three tests at the offset maximum (largest\n  possible ext2/3 file size.) (8.t)\n */\n#include <sys/types.h>\n",
                    "rendered": {
                      "text": "/* 8.t\n- Ditto for the above three tests at the offset maximum (largest\n  possible ext2/3 file size.) (8.t)\n */\n#include <sys/types.h>\n",
                      "markdown": "`/* 8.t\n- Ditto for the above three tests at the offset maximum (largest\n  possible ext2/3 file size.) (8.t)\n */\n#include <sys/types.h>\n`"
                    }
                  },
                  "sourceLanguage": "perl"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io_submit.3"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 49,
                  "endLine": 77,
                  "snippet": {
                    "text": "is simply ignored.  This\n``operation'' is useful in situations where one has a fixed array of\n.B struct iocb\nelements from which only a few need to be handled at\na time.  Another situation is where the \n.BR io_submit (3)\ncall was\ncanceled before all requests are processed  and the remaining requests have to be reissued.\n",
                    "rendered": {
                      "text": "is simply ignored.  This\n``operation'' is useful in situations where one has a fixed array of\n.B struct iocb\nelements from which only a few need to be handled at\na time.  Another situation is where the \n.BR io_submit (3)\ncall was\ncanceled before all requests are processed  and the remaining requests have to be reissued.\n",
                      "markdown": "`is simply ignored.  This\n``operation'' is useful in situations where one has a fixed array of\n.B struct iocb\nelements from which only a few need to be handled at\na time.  Another situation is where the \n.BR io_submit (3)\ncall was\ncanceled before all requests are processed  and the remaining requests have to be reissued.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io_submit.3"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 33,
                  "endLine": 43,
                  "endColumn": 37,
                  "snippet": {
                    "text": "The \n.BR io_submit ()\nfunction can be used to enqueue an arbitrary\nnumber of read and write requests at one time.  The requests can all be\nmeant for the same file, all for different files or every solution in\nbetween.\n\n",
                    "rendered": {
                      "text": "The \n.BR io_submit ()\nfunction can be used to enqueue an arbitrary\nnumber of read and write requests at one time.  The requests can all be\nmeant for the same file, all for different files or every solution in\nbetween.\n\n",
                      "markdown": "`The \n.BR io_submit ()\nfunction can be used to enqueue an arbitrary\nnumber of read and write requests at one time.  The requests can all be\nmeant for the same file, all for different files or every solution in\nbetween.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io_submit.3"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 65,
                  "endLine": 5,
                  "snippet": {
                    "text": ".\\\"/* sys_io_submit:\n.\\\" *      Queue the nr iocbs pointed to by iocbpp for processing.  Returns\n.\\\" *      the number of iocbs queued.  May return -EINVAL if the aio_context\n.\\\" *      specified by ctx is invalid, if nr is < 0, if the iocb at\n.\\\" *      *iocbpp[0] is not properly initialized, if the operation specified\n.\\\" *      is invalid for the file descriptor in the iocb.  May fail with\n.\\\" *      -EFAULT if any of the data structures point to invalid data.  May\n.\\\" *      fail with -EBADF if the file descriptor specified in the first\n",
                    "rendered": {
                      "text": ".\\\"/* sys_io_submit:\n.\\\" *      Queue the nr iocbs pointed to by iocbpp for processing.  Returns\n.\\\" *      the number of iocbs queued.  May return -EINVAL if the aio_context\n.\\\" *      specified by ctx is invalid, if nr is < 0, if the iocb at\n.\\\" *      *iocbpp[0] is not properly initialized, if the operation specified\n.\\\" *      is invalid for the file descriptor in the iocb.  May fail with\n.\\\" *      -EFAULT if any of the data structures point to invalid data.  May\n.\\\" *      fail with -EBADF if the file descriptor specified in the first\n",
                      "markdown": "`.\\\"/* sys_io_submit:\n.\\\" *      Queue the nr iocbs pointed to by iocbpp for processing.  Returns\n.\\\" *      the number of iocbs queued.  May return -EINVAL if the aio_context\n.\\\" *      specified by ctx is invalid, if nr is < 0, if the iocb at\n.\\\" *      *iocbpp[0] is not properly initialized, if the operation specified\n.\\\" *      is invalid for the file descriptor in the iocb.  May fail with\n.\\\" *      -EFAULT if any of the data structures point to invalid data.  May\n.\\\" *      fail with -EBADF if the file descriptor specified in the first\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/INSTALL"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 46,
                  "endLine": 15,
                  "endColumn": 50,
                  "snippet": {
                    "text": "libredhat-kernel.so built.  The contents of the included\nlibredhat-kernel.so are only stubs; this library is NOT\nfunctional for anything except the internal purpose of\nlinking libaio.so against the provided stubs.  At runtime,\nlibaio.so requires a real libredhat-kernel.so library; this\nis provided by the Red Hat kernel RPM packages with async\nI/O functionality.\n",
                    "rendered": {
                      "text": "libredhat-kernel.so built.  The contents of the included\nlibredhat-kernel.so are only stubs; this library is NOT\nfunctional for anything except the internal purpose of\nlinking libaio.so against the provided stubs.  At runtime,\nlibaio.so requires a real libredhat-kernel.so library; this\nis provided by the Red Hat kernel RPM packages with async\nI/O functionality.\n",
                      "markdown": "`libredhat-kernel.so built.  The contents of the included\nlibredhat-kernel.so are only stubs; this library is NOT\nfunctional for anything except the internal purpose of\nlinking libaio.so against the provided stubs.  At runtime,\nlibaio.so requires a real libredhat-kernel.so library; this\nis provided by the Red Hat kernel RPM packages with async\nI/O functionality.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/INSTALL"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 33,
                  "endLine": 17,
                  "endColumn": 38,
                  "snippet": {
                    "text": "functional for anything except the internal purpose of\nlinking libaio.so against the provided stubs.  At runtime,\nlibaio.so requires a real libredhat-kernel.so library; this\nis provided by the Red Hat kernel RPM packages with async\nI/O functionality.\n",
                    "rendered": {
                      "text": "functional for anything except the internal purpose of\nlinking libaio.so against the provided stubs.  At runtime,\nlibaio.so requires a real libredhat-kernel.so library; this\nis provided by the Red Hat kernel RPM packages with async\nI/O functionality.\n",
                      "markdown": "`functional for anything except the internal purpose of\nlinking libaio.so against the provided stubs.  At runtime,\nlibaio.so requires a real libredhat-kernel.so library; this\nis provided by the Red Hat kernel RPM packages with async\nI/O functionality.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/INSTALL"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 18,
                  "endLine": 17,
                  "endColumn": 23,
                  "snippet": {
                    "text": "functional for anything except the internal purpose of\nlinking libaio.so against the provided stubs.  At runtime,\nlibaio.so requires a real libredhat-kernel.so library; this\nis provided by the Red Hat kernel RPM packages with async\nI/O functionality.\n",
                    "rendered": {
                      "text": "functional for anything except the internal purpose of\nlinking libaio.so against the provided stubs.  At runtime,\nlibaio.so requires a real libredhat-kernel.so library; this\nis provided by the Red Hat kernel RPM packages with async\nI/O functionality.\n",
                      "markdown": "`functional for anything except the internal purpose of\nlinking libaio.so against the provided stubs.  At runtime,\nlibaio.so requires a real libredhat-kernel.so library; this\nis provided by the Red Hat kernel RPM packages with async\nI/O functionality.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/src/io_queue_run.c"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 23,
                  "endLine": 26,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\nint io_queue_run(io_context_t ctx)\n{\n\tstatic struct timespec timeout = { 0, 0 };\n\tstruct io_event event;\n\tint ret;\n\n",
                    "rendered": {
                      "text": "\nint io_queue_run(io_context_t ctx)\n{\n\tstatic struct timespec timeout = { 0, 0 };\n\tstruct io_event event;\n\tint ret;\n\n",
                      "markdown": "`\nint io_queue_run(io_context_t ctx)\n{\n\tstatic struct timespec timeout = { 0, 0 };\n\tstruct io_event event;\n\tint ret;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/libaio.spec"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 6,
                  "endLine": 123,
                  "endColumn": 14,
                  "snippet": {
                    "text": "* Thu Oct 14 2004 Jeff Moyer <jmoyer@redhat.com> - 0.3.102-1\n- S390 asm had a bug; I forgot to update the clobber list.  Lucky for me,\n  newer compilers complain about such things.\n- Also update the s390 asm to look more like the new kernel variants.\n\n* Wed Oct 13 2004 Jeff Moyer <jmoyer@redhat.com> - 0.3.101-1\n- Revert syscall return values to be -ERRNO.  This was an inadvertant bug\n",
                    "rendered": {
                      "text": "* Thu Oct 14 2004 Jeff Moyer <jmoyer@redhat.com> - 0.3.102-1\n- S390 asm had a bug; I forgot to update the clobber list.  Lucky for me,\n  newer compilers complain about such things.\n- Also update the s390 asm to look more like the new kernel variants.\n\n* Wed Oct 13 2004 Jeff Moyer <jmoyer@redhat.com> - 0.3.101-1\n- Revert syscall return values to be -ERRNO.  This was an inadvertant bug\n",
                      "markdown": "`* Thu Oct 14 2004 Jeff Moyer <jmoyer@redhat.com> - 0.3.102-1\n- S390 asm had a bug; I forgot to update the clobber list.  Lucky for me,\n  newer compilers complain about such things.\n- Also update the s390 asm to look more like the new kernel variants.\n\n* Wed Oct 13 2004 Jeff Moyer <jmoyer@redhat.com> - 0.3.101-1\n- Revert syscall return values to be -ERRNO.  This was an inadvertant bug\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/libaio.spec"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 33,
                  "endLine": 121,
                  "endColumn": 41,
                  "snippet": {
                    "text": "  SONAME, which is a no no.\n\n* Thu Oct 14 2004 Jeff Moyer <jmoyer@redhat.com> - 0.3.102-1\n- S390 asm had a bug; I forgot to update the clobber list.  Lucky for me,\n  newer compilers complain about such things.\n- Also update the s390 asm to look more like the new kernel variants.\n\n",
                    "rendered": {
                      "text": "  SONAME, which is a no no.\n\n* Thu Oct 14 2004 Jeff Moyer <jmoyer@redhat.com> - 0.3.102-1\n- S390 asm had a bug; I forgot to update the clobber list.  Lucky for me,\n  newer compilers complain about such things.\n- Also update the s390 asm to look more like the new kernel variants.\n\n",
                      "markdown": "`  SONAME, which is a no no.\n\n* Thu Oct 14 2004 Jeff Moyer <jmoyer@redhat.com> - 0.3.102-1\n- S390 asm had a bug; I forgot to update the clobber list.  Lucky for me,\n  newer compilers complain about such things.\n- Also update the s390 asm to look more like the new kernel variants.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/libaio.spec"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 1,
                  "endLine": 91,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* Fri Jul  5 2013 Jeff Moyer <jmoyer@redhat.com> - 0.3.110-1\n- Add suport for sparc and arm64 (Mike Frysinger and Jeff Moyer)\n- Add generic syscall fallbacks (Mike Frysinger)\n- Update man pages (Jeff Moyer and Cyril Hrubis)\n- Build system fixes (Mike Frysinger)\n\n* Tue Jun  9 2009 Jeff Moyer <jmoyer@redhat.com> - 0.3.108-1\n",
                    "rendered": {
                      "text": "* Fri Jul  5 2013 Jeff Moyer <jmoyer@redhat.com> - 0.3.110-1\n- Add suport for sparc and arm64 (Mike Frysinger and Jeff Moyer)\n- Add generic syscall fallbacks (Mike Frysinger)\n- Update man pages (Jeff Moyer and Cyril Hrubis)\n- Build system fixes (Mike Frysinger)\n\n* Tue Jun  9 2009 Jeff Moyer <jmoyer@redhat.com> - 0.3.108-1\n",
                      "markdown": "`* Fri Jul  5 2013 Jeff Moyer <jmoyer@redhat.com> - 0.3.110-1\n- Add suport for sparc and arm64 (Mike Frysinger and Jeff Moyer)\n- Add generic syscall fallbacks (Mike Frysinger)\n- Update man pages (Jeff Moyer and Cyril Hrubis)\n- Build system fixes (Mike Frysinger)\n\n* Tue Jun  9 2009 Jeff Moyer <jmoyer@redhat.com> - 0.3.108-1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/libaio.spec"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 6,
                  "endLine": 216,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n* Fri Apr 12 2002 Benjamin LaHaise <bcrl@redhat.com>\n- make the dummy install as /lib/libredhat-kernel.so.1.0.0 so \n  that ldconfig will link against it if no other is installed.\n\n* Tue Jan 22 2002 Benjamin LaHaise <bcrl@redhat.com>\n- add io_getevents\n",
                    "rendered": {
                      "text": "\n* Fri Apr 12 2002 Benjamin LaHaise <bcrl@redhat.com>\n- make the dummy install as /lib/libredhat-kernel.so.1.0.0 so \n  that ldconfig will link against it if no other is installed.\n\n* Tue Jan 22 2002 Benjamin LaHaise <bcrl@redhat.com>\n- add io_getevents\n",
                      "markdown": "`\n* Fri Apr 12 2002 Benjamin LaHaise <bcrl@redhat.com>\n- make the dummy install as /lib/libredhat-kernel.so.1.0.0 so \n  that ldconfig will link against it if no other is installed.\n\n* Tue Jan 22 2002 Benjamin LaHaise <bcrl@redhat.com>\n- add io_getevents\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/libaio.spec"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 48,
                  "endLine": 201,
                  "endColumn": 54,
                  "snippet": {
                    "text": "- libaio 0.3.90 test release\n\n* Mon Apr 29 2002 Benjamin LaHaise <bcrl@redhat.com>\n- add requires initscripts >= 6.47-1 to get boot time libredhat-kernel \n  linkage correct.\n- typo fix\n\n",
                    "rendered": {
                      "text": "- libaio 0.3.90 test release\n\n* Mon Apr 29 2002 Benjamin LaHaise <bcrl@redhat.com>\n- add requires initscripts >= 6.47-1 to get boot time libredhat-kernel \n  linkage correct.\n- typo fix\n\n",
                      "markdown": "`- libaio 0.3.90 test release\n\n* Mon Apr 29 2002 Benjamin LaHaise <bcrl@redhat.com>\n- add requires initscripts >= 6.47-1 to get boot time libredhat-kernel \n  linkage correct.\n- typo fix\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/libaio.spec"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 28,
                  "endLine": 157,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n* Thu Feb 26 2004 Jeff Moyer <jmoyer@redhat.com> 0.3.97-2\n- make srpm was using rpm to do a build.  changed that to use rpmbuild if\n  it exists, and fallback to rpm if it doesn't.\n\n* Tue Feb 24 2004 Jeff Moyer <jmoyer@redhat.com> 0.3.97-1\n- Use libc syscall(2) instead of rolling our own calling mechanism.  This \n",
                    "rendered": {
                      "text": "\n* Thu Feb 26 2004 Jeff Moyer <jmoyer@redhat.com> 0.3.97-2\n- make srpm was using rpm to do a build.  changed that to use rpmbuild if\n  it exists, and fallback to rpm if it doesn't.\n\n* Tue Feb 24 2004 Jeff Moyer <jmoyer@redhat.com> 0.3.97-1\n- Use libc syscall(2) instead of rolling our own calling mechanism.  This \n",
                      "markdown": "`\n* Thu Feb 26 2004 Jeff Moyer <jmoyer@redhat.com> 0.3.97-2\n- make srpm was using rpm to do a build.  changed that to use rpmbuild if\n  it exists, and fallback to rpm if it doesn't.\n\n* Tue Feb 24 2004 Jeff Moyer <jmoyer@redhat.com> 0.3.97-1\n- Use libc syscall(2) instead of rolling our own calling mechanism.  This \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/libaio.spec"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 21,
                  "endLine": 156,
                  "endColumn": 26,
                  "snippet": {
                    "text": "- fix compiler warnings.\n\n* Thu Feb 26 2004 Jeff Moyer <jmoyer@redhat.com> 0.3.97-2\n- make srpm was using rpm to do a build.  changed that to use rpmbuild if\n  it exists, and fallback to rpm if it doesn't.\n\n* Tue Feb 24 2004 Jeff Moyer <jmoyer@redhat.com> 0.3.97-1\n",
                    "rendered": {
                      "text": "- fix compiler warnings.\n\n* Thu Feb 26 2004 Jeff Moyer <jmoyer@redhat.com> 0.3.97-2\n- make srpm was using rpm to do a build.  changed that to use rpmbuild if\n  it exists, and fallback to rpm if it doesn't.\n\n* Tue Feb 24 2004 Jeff Moyer <jmoyer@redhat.com> 0.3.97-1\n",
                      "markdown": "`- fix compiler warnings.\n\n* Thu Feb 26 2004 Jeff Moyer <jmoyer@redhat.com> 0.3.97-2\n- make srpm was using rpm to do a build.  changed that to use rpmbuild if\n  it exists, and fallback to rpm if it doesn't.\n\n* Tue Feb 24 2004 Jeff Moyer <jmoyer@redhat.com> 0.3.97-1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/libaio.spec"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 46,
                  "endLine": 86,
                  "endColumn": 51,
                  "snippet": {
                    "text": "- Change syscall-arm64.h to syscall-generic.h (Icenowy Zheng)\n- Use generic syscall number schema for RISC-V (Icenowy Zheng)\n- Add endian detection (LE) and bit width detection (32/64) for RISC-V (Icenowy Zheng)\n- Makefile: convert tag and archive targets to git (Jeff Moyer)\n\n* Fri Jul  5 2013 Jeff Moyer <jmoyer@redhat.com> - 0.3.110-1\n- Add suport for sparc and arm64 (Mike Frysinger and Jeff Moyer)\n",
                    "rendered": {
                      "text": "- Change syscall-arm64.h to syscall-generic.h (Icenowy Zheng)\n- Use generic syscall number schema for RISC-V (Icenowy Zheng)\n- Add endian detection (LE) and bit width detection (32/64) for RISC-V (Icenowy Zheng)\n- Makefile: convert tag and archive targets to git (Jeff Moyer)\n\n* Fri Jul  5 2013 Jeff Moyer <jmoyer@redhat.com> - 0.3.110-1\n- Add suport for sparc and arm64 (Mike Frysinger and Jeff Moyer)\n",
                      "markdown": "`- Change syscall-arm64.h to syscall-generic.h (Icenowy Zheng)\n- Use generic syscall number schema for RISC-V (Icenowy Zheng)\n- Add endian detection (LE) and bit width detection (32/64) for RISC-V (Icenowy Zheng)\n- Makefile: convert tag and archive targets to git (Jeff Moyer)\n\n* Fri Jul  5 2013 Jeff Moyer <jmoyer@redhat.com> - 0.3.110-1\n- Add suport for sparc and arm64 (Mike Frysinger and Jeff Moyer)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io_queue_wait.3"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 34,
                  "endLine": 22,
                  "endColumn": 43,
                  "snippet": {
                    "text": ".SH \"RETURN VALUES\"\nMay return\n.B 0\nif no events are available and the timeout specified\nby when has elapsed, where when == NULL specifies an infinite\n\\fItimeout\\fP.  Note that the \\fItimeout\\fP pointed to by when is relative and\nwill be updated if not NULL and the operation blocks.  Will fail\n",
                    "rendered": {
                      "text": ".SH \"RETURN VALUES\"\nMay return\n.B 0\nif no events are available and the timeout specified\nby when has elapsed, where when == NULL specifies an infinite\n\\fItimeout\\fP.  Note that the \\fItimeout\\fP pointed to by when is relative and\nwill be updated if not NULL and the operation blocks.  Will fail\n",
                      "markdown": "`.SH \"RETURN VALUES\"\nMay return\n.B 0\nif no events are available and the timeout specified\nby when has elapsed, where when == NULL specifies an infinite\n\\fItimeout\\fP.  Note that the \\fItimeout\\fP pointed to by when is relative and\nwill be updated if not NULL and the operation blocks.  Will fail\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io_queue_wait.3"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 69,
                  "endLine": 12,
                  "endColumn": 78,
                  "snippet": {
                    "text": ".B #include <libaio.h>\n.br\n.sp\n.BI \"int io_queue_wait(io_context_t \" ctx \", const struct timespec *\" timeout \");\"\n.fi\n.SH DESCRIPTION\n.BR io_queue_wait ()\n",
                    "rendered": {
                      "text": ".B #include <libaio.h>\n.br\n.sp\n.BI \"int io_queue_wait(io_context_t \" ctx \", const struct timespec *\" timeout \");\"\n.fi\n.SH DESCRIPTION\n.BR io_queue_wait ()\n",
                      "markdown": "`.B #include <libaio.h>\n.br\n.sp\n.BI \"int io_queue_wait(io_context_t \" ctx \", const struct timespec *\" timeout \");\"\n.fi\n.SH DESCRIPTION\n.BR io_queue_wait ()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/Makefile"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 15,
                  "endLine": 3,
                  "endColumn": 20,
                  "snippet": {
                    "text": "NAME=libaio\nSPECFILE=$(NAME).spec\nVERSION=$(shell awk '/Version:/ { print $$2 }' $(SPECFILE))\nTAG = $(NAME)-$(VERSION)\nRPMBUILD=$(shell `which rpmbuild >&/dev/null` && echo \"rpmbuild\" || echo \"rpm\")\n\n",
                    "rendered": {
                      "text": "NAME=libaio\nSPECFILE=$(NAME).spec\nVERSION=$(shell awk '/Version:/ { print $$2 }' $(SPECFILE))\nTAG = $(NAME)-$(VERSION)\nRPMBUILD=$(shell `which rpmbuild >&/dev/null` && echo \"rpmbuild\" || echo \"rpm\")\n\n",
                      "markdown": "`NAME=libaio\nSPECFILE=$(NAME).spec\nVERSION=$(shell awk '/Version:/ { print $$2 }' $(SPECFILE))\nTAG = $(NAME)-$(VERSION)\nRPMBUILD=$(shell `which rpmbuild >&/dev/null` && echo \"rpmbuild\" || echo \"rpm\")\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/harness/cases/18.t"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 16,
                  "endLine": 71,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n\t\tmemset(buffer, '0', page_size);\n\t\tassert(io_submit(ctx, 1, &cbs[0]) == 1);\n\t\t// wait random time (0-500ms) ?\n\n\t\tio_destroy(ctx);\n\t\tmemset(buffer, DESTROY_PATTERN, page_size);\n",
                    "rendered": {
                      "text": "\n\t\tmemset(buffer, '0', page_size);\n\t\tassert(io_submit(ctx, 1, &cbs[0]) == 1);\n\t\t// wait random time (0-500ms) ?\n\n\t\tio_destroy(ctx);\n\t\tmemset(buffer, DESTROY_PATTERN, page_size);\n",
                      "markdown": "`\n\t\tmemset(buffer, '0', page_size);\n\t\tassert(io_submit(ctx, 1, &cbs[0]) == 1);\n\t\t// wait random time (0-500ms) ?\n\n\t\tio_destroy(ctx);\n\t\tmemset(buffer, DESTROY_PATTERN, page_size);\n`"
                    }
                  },
                  "sourceLanguage": "perl"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io_getevents.3"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 27,
                  "endLine": 2,
                  "endColumn": 31,
                  "snippet": {
                    "text": ".\\\"/* io_getevents:\n.\\\" *      Attempts to read at least min_nr events and up to nr events from\n.\\\" *      the completion queue for the aio_context specified by ctx.  May\n.\\\" *      fail with -EINVAL if ctx is invalid, if min_nr is out of range,\n.\\\" *      if nr is out of range, if when is out of range.  May fail with\n",
                    "rendered": {
                      "text": ".\\\"/* io_getevents:\n.\\\" *      Attempts to read at least min_nr events and up to nr events from\n.\\\" *      the completion queue for the aio_context specified by ctx.  May\n.\\\" *      fail with -EINVAL if ctx is invalid, if min_nr is out of range,\n.\\\" *      if nr is out of range, if when is out of range.  May fail with\n",
                      "markdown": "`.\\\"/* io_getevents:\n.\\\" *      Attempts to read at least min_nr events and up to nr events from\n.\\\" *      the completion queue for the aio_context specified by ctx.  May\n.\\\" *      fail with -EINVAL if ctx is invalid, if min_nr is out of range,\n.\\\" *      if nr is out of range, if when is out of range.  May fail with\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io_getevents.3"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 23,
                  "endLine": 60,
                  "endColumn": 32,
                  "snippet": {
                    "text": "by when has elapsed, where\n.I when\n== NULL specifies an infinite\ntimeout.  Note that the timeout pointed to by when is relative and\nwill be updated if not NULL and the operation blocks.  Will fail with\n.B ENOSYS\nif not implemented.\n",
                    "rendered": {
                      "text": "by when has elapsed, where\n.I when\n== NULL specifies an infinite\ntimeout.  Note that the timeout pointed to by when is relative and\nwill be updated if not NULL and the operation blocks.  Will fail with\n.B ENOSYS\nif not implemented.\n",
                      "markdown": "`by when has elapsed, where\n.I when\n== NULL specifies an infinite\ntimeout.  Note that the timeout pointed to by when is relative and\nwill be updated if not NULL and the operation blocks.  Will fail with\n.B ENOSYS\nif not implemented.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io_getevents.3"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 34,
                  "endLine": 56,
                  "endColumn": 43,
                  "snippet": {
                    "text": ".SH \"RETURN VALUES\"\nMay return\n.B 0\nif no events are available and the timeout specified\nby when has elapsed, where\n.I when\n== NULL specifies an infinite\n",
                    "rendered": {
                      "text": ".SH \"RETURN VALUES\"\nMay return\n.B 0\nif no events are available and the timeout specified\nby when has elapsed, where\n.I when\n== NULL specifies an infinite\n",
                      "markdown": "`.SH \"RETURN VALUES\"\nMay return\n.B 0\nif no events are available and the timeout specified\nby when has elapsed, where\n.I when\n== NULL specifies an infinite\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io_getevents.3"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 107,
                  "endLine": 46,
                  "endColumn": 116,
                  "snippet": {
                    "text": "};\n.sp\n.BI \"int io_getevents(io_context_t \" ctx \", long \" nr \", struct io_event *\" events \"[], struct timespec *\" timeout \");\"\n.BI \"int io_pgetevents(io_context_t \" ctx \", long \" nr \", struct io_event *\" events \"[], struct timespec *\" timeout \", sigset_t *\" sigmask \");\"\n.fi\n.SH DESCRIPTION\nAttempts to read up to\n",
                    "rendered": {
                      "text": "};\n.sp\n.BI \"int io_getevents(io_context_t \" ctx \", long \" nr \", struct io_event *\" events \"[], struct timespec *\" timeout \");\"\n.BI \"int io_pgetevents(io_context_t \" ctx \", long \" nr \", struct io_event *\" events \"[], struct timespec *\" timeout \", sigset_t *\" sigmask \");\"\n.fi\n.SH DESCRIPTION\nAttempts to read up to\n",
                      "markdown": "`};\n.sp\n.BI \"int io_getevents(io_context_t \" ctx \", long \" nr \", struct io_event *\" events \"[], struct timespec *\" timeout \");\"\n.BI \"int io_pgetevents(io_context_t \" ctx \", long \" nr \", struct io_event *\" events \"[], struct timespec *\" timeout \", sigset_t *\" sigmask \");\"\n.fi\n.SH DESCRIPTION\nAttempts to read up to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io_getevents.3"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 106,
                  "endLine": 45,
                  "endColumn": 115,
                  "snippet": {
                    "text": "        unsigned        PADDED(res2, __pad4);\n};\n.sp\n.BI \"int io_getevents(io_context_t \" ctx \", long \" nr \", struct io_event *\" events \"[], struct timespec *\" timeout \");\"\n.BI \"int io_pgetevents(io_context_t \" ctx \", long \" nr \", struct io_event *\" events \"[], struct timespec *\" timeout \", sigset_t *\" sigmask \");\"\n.fi\n.SH DESCRIPTION\n",
                    "rendered": {
                      "text": "        unsigned        PADDED(res2, __pad4);\n};\n.sp\n.BI \"int io_getevents(io_context_t \" ctx \", long \" nr \", struct io_event *\" events \"[], struct timespec *\" timeout \");\"\n.BI \"int io_pgetevents(io_context_t \" ctx \", long \" nr \", struct io_event *\" events \"[], struct timespec *\" timeout \", sigset_t *\" sigmask \");\"\n.fi\n.SH DESCRIPTION\n",
                      "markdown": "`        unsigned        PADDED(res2, __pad4);\n};\n.sp\n.BI \"int io_getevents(io_context_t \" ctx \", long \" nr \", struct io_event *\" events \"[], struct timespec *\" timeout \");\"\n.BI \"int io_pgetevents(io_context_t \" ctx \", long \" nr \", struct io_event *\" events \"[], struct timespec *\" timeout \", sigset_t *\" sigmask \");\"\n.fi\n.SH DESCRIPTION\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io_getevents.3"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 34,
                  "endLine": 9,
                  "endColumn": 43,
                  "snippet": {
                    "text": ".\\\" *      -EFAULT if any of the memory specified to is invalid.  May return\n.\\\" *      0 or < min_nr if no events are available and the timeout specified\n.\\\" *      by when has elapsed, where when == NULL specifies an infinite\n.\\\" *      timeout.  Note that the timeout pointed to by when is relative and\n.\\\" *      will be updated if not NULL and the operation blocks.  Will fail\n.\\\" *      with -ENOSYS if not implemented.\n.\\\" */\n",
                    "rendered": {
                      "text": ".\\\" *      -EFAULT if any of the memory specified to is invalid.  May return\n.\\\" *      0 or < min_nr if no events are available and the timeout specified\n.\\\" *      by when has elapsed, where when == NULL specifies an infinite\n.\\\" *      timeout.  Note that the timeout pointed to by when is relative and\n.\\\" *      will be updated if not NULL and the operation blocks.  Will fail\n.\\\" *      with -ENOSYS if not implemented.\n.\\\" */\n",
                      "markdown": "`.\\\" *      -EFAULT if any of the memory specified to is invalid.  May return\n.\\\" *      0 or < min_nr if no events are available and the timeout specified\n.\\\" *      by when has elapsed, where when == NULL specifies an infinite\n.\\\" *      timeout.  Note that the timeout pointed to by when is relative and\n.\\\" *      will be updated if not NULL and the operation blocks.  Will fail\n.\\\" *      with -ENOSYS if not implemented.\n.\\\" */\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/libaio.zip/man/io_getevents.3"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 59,
                  "endLine": 7,
                  "endColumn": 68,
                  "snippet": {
                    "text": ".\\\" *      fail with -EINVAL if ctx is invalid, if min_nr is out of range,\n.\\\" *      if nr is out of range, if when is out of range.  May fail with\n.\\\" *      -EFAULT if any of the memory specified to is invalid.  May return\n.\\\" *      0 or < min_nr if no events are available and the timeout specified\n.\\\" *      by when has elapsed, where when == NULL specifies an infinite\n.\\\" *      timeout.  Note that the timeout pointed to by when is relative and\n.\\\" *      will be updated if not NULL and the operation blocks.  Will fail\n",
                    "rendered": {
                      "text": ".\\\" *      fail with -EINVAL if ctx is invalid, if min_nr is out of range,\n.\\\" *      if nr is out of range, if when is out of range.  May fail with\n.\\\" *      -EFAULT if any of the memory specified to is invalid.  May return\n.\\\" *      0 or < min_nr if no events are available and the timeout specified\n.\\\" *      by when has elapsed, where when == NULL specifies an infinite\n.\\\" *      timeout.  Note that the timeout pointed to by when is relative and\n.\\\" *      will be updated if not NULL and the operation blocks.  Will fail\n",
                      "markdown": "`.\\\" *      fail with -EINVAL if ctx is invalid, if min_nr is out of range,\n.\\\" *      if nr is out of range, if when is out of range.  May fail with\n.\\\" *      -EFAULT if any of the memory specified to is invalid.  May return\n.\\\" *      0 or < min_nr if no events are available and the timeout specified\n.\\\" *      by when has elapsed, where when == NULL specifies an infinite\n.\\\" *      timeout.  Note that the timeout pointed to by when is relative and\n.\\\" *      will be updated if not NULL and the operation blocks.  Will fail\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}