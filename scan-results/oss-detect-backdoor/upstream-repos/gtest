{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-port-test.cc"
                },
                "region": {
                  "startLine": 1273,
                  "startColumn": 41,
                  "endLine": 1273,
                  "endColumn": 46,
                  "snippet": {
                    "text": "TEST(ThreadLocalTest, ThreadLocalMutationsAffectOnlyCurrentThread) {\n  ThreadLocal<std::string> thread_local_string;\n  thread_local_string.set(\"Foo\");\n  EXPECT_STREQ(\"Foo\", thread_local_string.get().c_str());\n\n  std::string result;\n  RunFromThread(&RetrieveThreadLocalValue,\n",
                    "rendered": {
                      "text": "TEST(ThreadLocalTest, ThreadLocalMutationsAffectOnlyCurrentThread) {\n  ThreadLocal<std::string> thread_local_string;\n  thread_local_string.set(\"Foo\");\n  EXPECT_STREQ(\"Foo\", thread_local_string.get().c_str());\n\n  std::string result;\n  RunFromThread(&RetrieveThreadLocalValue,\n",
                      "markdown": "`TEST(ThreadLocalTest, ThreadLocalMutationsAffectOnlyCurrentThread) {\n  ThreadLocal<std::string> thread_local_string;\n  thread_local_string.set(\"Foo\");\n  EXPECT_STREQ(\"Foo\", thread_local_string.get().c_str());\n\n  std::string result;\n  RunFromThread(&RetrieveThreadLocalValue,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-port-test.cc"
                },
                "region": {
                  "startLine": 1232,
                  "startColumn": 24,
                  "endLine": 1232,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    ASSERT_EQ(0U, DestructorCall::List().size());\n\n    // This creates another DestructorTracker object for the main thread.\n    thread_local_tracker.get();\n    ASSERT_EQ(1U, DestructorCall::List().size());\n    ASSERT_FALSE(DestructorCall::List()[0]->CheckDestroyed());\n  }\n",
                    "rendered": {
                      "text": "    ASSERT_EQ(0U, DestructorCall::List().size());\n\n    // This creates another DestructorTracker object for the main thread.\n    thread_local_tracker.get();\n    ASSERT_EQ(1U, DestructorCall::List().size());\n    ASSERT_FALSE(DestructorCall::List()[0]->CheckDestroyed());\n  }\n",
                      "markdown": "`    ASSERT_EQ(0U, DestructorCall::List().size());\n\n    // This creates another DestructorTracker object for the main thread.\n    thread_local_tracker.get();\n    ASSERT_EQ(1U, DestructorCall::List().size());\n    ASSERT_FALSE(DestructorCall::List()[0]->CheckDestroyed());\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-port-test.cc"
                },
                "region": {
                  "startLine": 1168,
                  "startColumn": 26,
                  "endLine": 1168,
                  "endColumn": 31,
                  "snippet": {
                    "text": "  void ReportDestroyed() {\n    invoked_ = true;\n#ifdef GTEST_OS_WINDOWS\n    ::SetEvent(wait_event_.Get());\n#endif\n  }\n\n",
                    "rendered": {
                      "text": "  void ReportDestroyed() {\n    invoked_ = true;\n#ifdef GTEST_OS_WINDOWS\n    ::SetEvent(wait_event_.Get());\n#endif\n  }\n\n",
                      "markdown": "`  void ReportDestroyed() {\n    invoked_ = true;\n#ifdef GTEST_OS_WINDOWS\n    ::SetEvent(wait_event_.Get());\n#endif\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-port-test.cc"
                },
                "region": {
                  "startLine": 1159,
                  "startColumn": 41,
                  "endLine": 1159,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n  bool CheckDestroyed() const {\n#ifdef GTEST_OS_WINDOWS\n    if (::WaitForSingleObject(wait_event_.Get(), 1000) != WAIT_OBJECT_0)\n      return false;\n#endif\n    return invoked_;\n",
                    "rendered": {
                      "text": "\n  bool CheckDestroyed() const {\n#ifdef GTEST_OS_WINDOWS\n    if (::WaitForSingleObject(wait_event_.Get(), 1000) != WAIT_OBJECT_0)\n      return false;\n#endif\n    return invoked_;\n",
                      "markdown": "`\n  bool CheckDestroyed() const {\n#ifdef GTEST_OS_WINDOWS\n    if (::WaitForSingleObject(wait_event_.Get(), 1000) != WAIT_OBJECT_0)\n      return false;\n#endif\n    return invoked_;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-port-test.cc"
                },
                "region": {
                  "startLine": 1153,
                  "startColumn": 28,
                  "endLine": 1153,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    invoked_ = false;\n#ifdef GTEST_OS_WINDOWS\n    wait_event_.Reset(::CreateEvent(NULL, TRUE, FALSE, NULL));\n    GTEST_CHECK_(wait_event_.Get() != NULL);\n#endif\n  }\n\n",
                    "rendered": {
                      "text": "    invoked_ = false;\n#ifdef GTEST_OS_WINDOWS\n    wait_event_.Reset(::CreateEvent(NULL, TRUE, FALSE, NULL));\n    GTEST_CHECK_(wait_event_.Get() != NULL);\n#endif\n  }\n\n",
                      "markdown": "`    invoked_ = false;\n#ifdef GTEST_OS_WINDOWS\n    wait_event_.Reset(::CreateEvent(NULL, TRUE, FALSE, NULL));\n    GTEST_CHECK_(wait_event_.Get() != NULL);\n#endif\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-port-test.cc"
                },
                "region": {
                  "startLine": 1137,
                  "startColumn": 41,
                  "endLine": 1137,
                  "endColumn": 46,
                  "snippet": {
                    "text": "  EXPECT_STREQ(\"foo\", thread_local_string.get().c_str());\n\n  thread_local_string.set(\"bar\");\n  EXPECT_STREQ(\"bar\", thread_local_string.get().c_str());\n\n  std::string result;\n  RunFromThread(&RetrieveThreadLocalValue,\n",
                    "rendered": {
                      "text": "  EXPECT_STREQ(\"foo\", thread_local_string.get().c_str());\n\n  thread_local_string.set(\"bar\");\n  EXPECT_STREQ(\"bar\", thread_local_string.get().c_str());\n\n  std::string result;\n  RunFromThread(&RetrieveThreadLocalValue,\n",
                      "markdown": "`  EXPECT_STREQ(\"foo\", thread_local_string.get().c_str());\n\n  thread_local_string.set(\"bar\");\n  EXPECT_STREQ(\"bar\", thread_local_string.get().c_str());\n\n  std::string result;\n  RunFromThread(&RetrieveThreadLocalValue,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-port-test.cc"
                },
                "region": {
                  "startLine": 1134,
                  "startColumn": 41,
                  "endLine": 1134,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\nTEST(ThreadLocalTest, ParameterizedConstructorSetsDefault) {\n  ThreadLocal<std::string> thread_local_string(\"foo\");\n  EXPECT_STREQ(\"foo\", thread_local_string.get().c_str());\n\n  thread_local_string.set(\"bar\");\n  EXPECT_STREQ(\"bar\", thread_local_string.get().c_str());\n",
                    "rendered": {
                      "text": "\nTEST(ThreadLocalTest, ParameterizedConstructorSetsDefault) {\n  ThreadLocal<std::string> thread_local_string(\"foo\");\n  EXPECT_STREQ(\"foo\", thread_local_string.get().c_str());\n\n  thread_local_string.set(\"bar\");\n  EXPECT_STREQ(\"bar\", thread_local_string.get().c_str());\n",
                      "markdown": "`\nTEST(ThreadLocalTest, ParameterizedConstructorSetsDefault) {\n  ThreadLocal<std::string> thread_local_string(\"foo\");\n  EXPECT_STREQ(\"foo\", thread_local_string.get().c_str());\n\n  thread_local_string.set(\"bar\");\n  EXPECT_STREQ(\"bar\", thread_local_string.get().c_str());\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-port-test.cc"
                },
                "region": {
                  "startLine": 1000,
                  "startColumn": 64,
                  "endLine": 1000,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\n  // Verifies the condition still holds after calling set.\n  thread_local_string.set(\"foo\");\n  EXPECT_EQ(thread_local_string.pointer(), &(thread_local_string.get()));\n}\n\nTEST(ThreadLocalTest, PointerAndConstPointerReturnSameValue) {\n",
                    "rendered": {
                      "text": "\n  // Verifies the condition still holds after calling set.\n  thread_local_string.set(\"foo\");\n  EXPECT_EQ(thread_local_string.pointer(), &(thread_local_string.get()));\n}\n\nTEST(ThreadLocalTest, PointerAndConstPointerReturnSameValue) {\n",
                      "markdown": "`\n  // Verifies the condition still holds after calling set.\n  thread_local_string.set(\"foo\");\n  EXPECT_EQ(thread_local_string.pointer(), &(thread_local_string.get()));\n}\n\nTEST(ThreadLocalTest, PointerAndConstPointerReturnSameValue) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-port-test.cc"
                },
                "region": {
                  "startLine": 996,
                  "startColumn": 64,
                  "endLine": 996,
                  "endColumn": 69,
                  "snippet": {
                    "text": "TEST(ThreadLocalTest, GetAndPointerReturnSameValue) {\n  ThreadLocal<std::string> thread_local_string;\n\n  EXPECT_EQ(thread_local_string.pointer(), &(thread_local_string.get()));\n\n  // Verifies the condition still holds after calling set.\n  thread_local_string.set(\"foo\");\n",
                    "rendered": {
                      "text": "TEST(ThreadLocalTest, GetAndPointerReturnSameValue) {\n  ThreadLocal<std::string> thread_local_string;\n\n  EXPECT_EQ(thread_local_string.pointer(), &(thread_local_string.get()));\n\n  // Verifies the condition still holds after calling set.\n  thread_local_string.set(\"foo\");\n",
                      "markdown": "`TEST(ThreadLocalTest, GetAndPointerReturnSameValue) {\n  ThreadLocal<std::string> thread_local_string;\n\n  EXPECT_EQ(thread_local_string.pointer(), &(thread_local_string.get()));\n\n  // Verifies the condition still holds after calling set.\n  thread_local_string.set(\"foo\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-port-test.cc"
                },
                "region": {
                  "startLine": 979,
                  "startColumn": 18,
                  "endLine": 979,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n  int i = 0;\n  ThreadLocal<int*> t2(&i);\n  EXPECT_EQ(&i, t2.get());\n}\n\nclass NoDefaultConstructor {\n",
                    "rendered": {
                      "text": "\n  int i = 0;\n  ThreadLocal<int*> t2(&i);\n  EXPECT_EQ(&i, t2.get());\n}\n\nclass NoDefaultConstructor {\n",
                      "markdown": "`\n  int i = 0;\n  ThreadLocal<int*> t2(&i);\n  EXPECT_EQ(&i, t2.get());\n}\n\nclass NoDefaultConstructor {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-port-test.cc"
                },
                "region": {
                  "startLine": 975,
                  "startColumn": 19,
                  "endLine": 975,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\nTEST(ThreadLocalTest, SingleParamConstructorInitializesToParam) {\n  ThreadLocal<int> t1(123);\n  EXPECT_EQ(123, t1.get());\n\n  int i = 0;\n  ThreadLocal<int*> t2(&i);\n",
                    "rendered": {
                      "text": "\nTEST(ThreadLocalTest, SingleParamConstructorInitializesToParam) {\n  ThreadLocal<int> t1(123);\n  EXPECT_EQ(123, t1.get());\n\n  int i = 0;\n  ThreadLocal<int*> t2(&i);\n",
                      "markdown": "`\nTEST(ThreadLocalTest, SingleParamConstructorInitializesToParam) {\n  ThreadLocal<int> t1(123);\n  EXPECT_EQ(123, t1.get());\n\n  int i = 0;\n  ThreadLocal<int*> t2(&i);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-port-test.cc"
                },
                "region": {
                  "startLine": 970,
                  "startColumn": 16,
                  "endLine": 970,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  EXPECT_EQ(0, t1.get());\n\n  ThreadLocal<void*> t2;\n  EXPECT_TRUE(t2.get() == nullptr);\n}\n\nTEST(ThreadLocalTest, SingleParamConstructorInitializesToParam) {\n",
                    "rendered": {
                      "text": "  EXPECT_EQ(0, t1.get());\n\n  ThreadLocal<void*> t2;\n  EXPECT_TRUE(t2.get() == nullptr);\n}\n\nTEST(ThreadLocalTest, SingleParamConstructorInitializesToParam) {\n",
                      "markdown": "`  EXPECT_EQ(0, t1.get());\n\n  ThreadLocal<void*> t2;\n  EXPECT_TRUE(t2.get() == nullptr);\n}\n\nTEST(ThreadLocalTest, SingleParamConstructorInitializesToParam) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-port-test.cc"
                },
                "region": {
                  "startLine": 967,
                  "startColumn": 17,
                  "endLine": 967,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\nTEST(ThreadLocalTest, DefaultConstructorInitializesToDefaultValues) {\n  ThreadLocal<int> t1;\n  EXPECT_EQ(0, t1.get());\n\n  ThreadLocal<void*> t2;\n  EXPECT_TRUE(t2.get() == nullptr);\n",
                    "rendered": {
                      "text": "\nTEST(ThreadLocalTest, DefaultConstructorInitializesToDefaultValues) {\n  ThreadLocal<int> t1;\n  EXPECT_EQ(0, t1.get());\n\n  ThreadLocal<void*> t2;\n  EXPECT_TRUE(t2.get() == nullptr);\n",
                      "markdown": "`\nTEST(ThreadLocalTest, DefaultConstructorInitializesToDefaultValues) {\n  ThreadLocal<int> t1;\n  EXPECT_EQ(0, t1.get());\n\n  ThreadLocal<void*> t2;\n  EXPECT_TRUE(t2.get() == nullptr);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-port-test.cc"
                },
                "region": {
                  "startLine": 1114,
                  "startColumn": 68,
                  "endLine": 1114,
                  "endColumn": 72,
                  "snippet": {
                    "text": "  threads_can_start.Notify();\n  for (int i = 0; i < kThreadCount; ++i) counting_threads[i]->Join();\n\n  // If the mutex lets more than one thread to increment the counter at a\n  // time, they are likely to encounter a race condition and have some\n  // increments overwritten, resulting in the lower then expected counter\n  // value.\n",
                    "rendered": {
                      "text": "  threads_can_start.Notify();\n  for (int i = 0; i < kThreadCount; ++i) counting_threads[i]->Join();\n\n  // If the mutex lets more than one thread to increment the counter at a\n  // time, they are likely to encounter a race condition and have some\n  // increments overwritten, resulting in the lower then expected counter\n  // value.\n",
                      "markdown": "`  threads_can_start.Notify();\n  for (int i = 0; i < kThreadCount; ++i) counting_threads[i]->Join();\n\n  // If the mutex lets more than one thread to increment the counter at a\n  // time, they are likely to encounter a race condition and have some\n  // increments overwritten, resulting in the lower then expected counter\n  // value.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-port-test.cc"
                },
                "region": {
                  "startLine": 1094,
                  "startColumn": 44,
                  "endLine": 1094,
                  "endColumn": 48,
                  "snippet": {
                    "text": "  for (int i = 0; i < param.second; ++i) param.first->Increment();\n}\n\n// Tests that the mutex only lets one thread at a time to lock it.\nTEST(MutexTest, OnlyOneThreadCanLockAtATime) {\n  Mutex mutex;\n  AtomicCounterWithMutex locked_counter(&mutex);\n",
                    "rendered": {
                      "text": "  for (int i = 0; i < param.second; ++i) param.first->Increment();\n}\n\n// Tests that the mutex only lets one thread at a time to lock it.\nTEST(MutexTest, OnlyOneThreadCanLockAtATime) {\n  Mutex mutex;\n  AtomicCounterWithMutex locked_counter(&mutex);\n",
                      "markdown": "`  for (int i = 0; i < param.second; ++i) param.first->Increment();\n}\n\n// Tests that the mutex only lets one thread at a time to lock it.\nTEST(MutexTest, OnlyOneThreadCanLockAtATime) {\n  Mutex mutex;\n  AtomicCounterWithMutex locked_counter(&mutex);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-port-test.cc"
                },
                "region": {
                  "startLine": 956,
                  "startColumn": 63,
                  "endLine": 956,
                  "endColumn": 67,
                  "snippet": {
                    "text": "TEST(CaptureDeathTest, CannotReenterStdoutCapture) {\n  CaptureStdout();\n  EXPECT_DEATH_IF_SUPPORTED(CaptureStdout(),\n                            \"Only one stdout capturer can exist at a time\");\n  GetCapturedStdout();\n\n  // We cannot test stderr capturing using death tests as they use it\n",
                    "rendered": {
                      "text": "TEST(CaptureDeathTest, CannotReenterStdoutCapture) {\n  CaptureStdout();\n  EXPECT_DEATH_IF_SUPPORTED(CaptureStdout(),\n                            \"Only one stdout capturer can exist at a time\");\n  GetCapturedStdout();\n\n  // We cannot test stderr capturing using death tests as they use it\n",
                      "markdown": "`TEST(CaptureDeathTest, CannotReenterStdoutCapture) {\n  CaptureStdout();\n  EXPECT_DEATH_IF_SUPPORTED(CaptureStdout(),\n                            \"Only one stdout capturer can exist at a time\");\n  GetCapturedStdout();\n\n  // We cannot test stderr capturing using death tests as they use it\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-port-test.cc"
                },
                "region": {
                  "startLine": 732,
                  "startColumn": 46,
                  "endLine": 732,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"$$\")),\n                          \"'$' can only appear at the end\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"^$a\")),\n                          \"'$' can only appear at the end\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"a(b\")),\n                          \"'(' is unsupported\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"ab)\")),\n",
                    "rendered": {
                      "text": "  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"$$\")),\n                          \"'$' can only appear at the end\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"^$a\")),\n                          \"'$' can only appear at the end\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"a(b\")),\n                          \"'(' is unsupported\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"ab)\")),\n",
                      "markdown": "`  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"$$\")),\n                          \"'$' can only appear at the end\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"^$a\")),\n                          \"'$' can only appear at the end\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"a(b\")),\n                          \"'(' is unsupported\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"ab)\")),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-port-test.cc"
                },
                "region": {
                  "startLine": 730,
                  "startColumn": 46,
                  "endLine": 730,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\".*^b\")),\n                          \"'^' can only appear at the beginning\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"$$\")),\n                          \"'$' can only appear at the end\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"^$a\")),\n                          \"'$' can only appear at the end\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"a(b\")),\n",
                    "rendered": {
                      "text": "  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\".*^b\")),\n                          \"'^' can only appear at the beginning\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"$$\")),\n                          \"'$' can only appear at the end\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"^$a\")),\n                          \"'$' can only appear at the end\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"a(b\")),\n",
                      "markdown": "`  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\".*^b\")),\n                          \"'^' can only appear at the beginning\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"$$\")),\n                          \"'$' can only appear at the end\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"^$a\")),\n                          \"'$' can only appear at the end\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"a(b\")),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-port-test.cc"
                },
                "region": {
                  "startLine": 728,
                  "startColumn": 46,
                  "endLine": 728,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"^^\")),\n                          \"'^' can only appear at the beginning\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\".*^b\")),\n                          \"'^' can only appear at the beginning\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"$$\")),\n                          \"'$' can only appear at the end\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"^$a\")),\n",
                    "rendered": {
                      "text": "  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"^^\")),\n                          \"'^' can only appear at the beginning\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\".*^b\")),\n                          \"'^' can only appear at the beginning\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"$$\")),\n                          \"'$' can only appear at the end\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"^$a\")),\n",
                      "markdown": "`  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"^^\")),\n                          \"'^' can only appear at the beginning\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\".*^b\")),\n                          \"'^' can only appear at the beginning\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"$$\")),\n                          \"'$' can only appear at the end\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"^$a\")),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-port-test.cc"
                },
                "region": {
                  "startLine": 726,
                  "startColumn": 46,
                  "endLine": 726,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"\\\\s\\\\hb\")),\n                          \"invalid escape sequence \\\"\\\\h\\\"\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"^^\")),\n                          \"'^' can only appear at the beginning\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\".*^b\")),\n                          \"'^' can only appear at the beginning\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"$$\")),\n",
                    "rendered": {
                      "text": "  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"\\\\s\\\\hb\")),\n                          \"invalid escape sequence \\\"\\\\h\\\"\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"^^\")),\n                          \"'^' can only appear at the beginning\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\".*^b\")),\n                          \"'^' can only appear at the beginning\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"$$\")),\n",
                      "markdown": "`  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"\\\\s\\\\hb\")),\n                          \"invalid escape sequence \\\"\\\\h\\\"\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"^^\")),\n                          \"'^' can only appear at the beginning\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\".*^b\")),\n                          \"'^' can only appear at the beginning\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"$$\")),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-port-test.cc"
                },
                "region": {
                  "startLine": 722,
                  "startColumn": 45,
                  "endLine": 722,
                  "endColumn": 49,
                  "snippet": {
                    "text": "  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"a\\\\\")),\n                          \"'\\\\' cannot appear at the end\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"\\\\n\\\\\")),\n                          \"'\\\\' cannot appear at the end\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"\\\\s\\\\hb\")),\n                          \"invalid escape sequence \\\"\\\\h\\\"\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"^^\")),\n",
                    "rendered": {
                      "text": "  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"a\\\\\")),\n                          \"'\\\\' cannot appear at the end\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"\\\\n\\\\\")),\n                          \"'\\\\' cannot appear at the end\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"\\\\s\\\\hb\")),\n                          \"invalid escape sequence \\\"\\\\h\\\"\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"^^\")),\n",
                      "markdown": "`  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"a\\\\\")),\n                          \"'\\\\' cannot appear at the end\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"\\\\n\\\\\")),\n                          \"'\\\\' cannot appear at the end\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"\\\\s\\\\hb\")),\n                          \"invalid escape sequence \\\"\\\\h\\\"\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"^^\")),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-port-test.cc"
                },
                "region": {
                  "startLine": 720,
                  "startColumn": 45,
                  "endLine": 720,
                  "endColumn": 49,
                  "snippet": {
                    "text": "      ASSERT_FALSE(ValidateRegex(\"a\\\\\")),\n      \"Syntax error at index 1 in simple regular expression \\\"a\\\\\\\": \");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"a\\\\\")),\n                          \"'\\\\' cannot appear at the end\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"\\\\n\\\\\")),\n                          \"'\\\\' cannot appear at the end\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"\\\\s\\\\hb\")),\n",
                    "rendered": {
                      "text": "      ASSERT_FALSE(ValidateRegex(\"a\\\\\")),\n      \"Syntax error at index 1 in simple regular expression \\\"a\\\\\\\": \");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"a\\\\\")),\n                          \"'\\\\' cannot appear at the end\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"\\\\n\\\\\")),\n                          \"'\\\\' cannot appear at the end\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"\\\\s\\\\hb\")),\n",
                      "markdown": "`      ASSERT_FALSE(ValidateRegex(\"a\\\\\")),\n      \"Syntax error at index 1 in simple regular expression \\\"a\\\\\\\": \");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"a\\\\\")),\n                          \"'\\\\' cannot appear at the end\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"\\\\n\\\\\")),\n                          \"'\\\\' cannot appear at the end\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"\\\\s\\\\hb\")),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-port-test.cc"
                },
                "region": {
                  "startLine": 718,
                  "startColumn": 19,
                  "endLine": 718,
                  "endColumn": 23,
                  "snippet": {
                    "text": "                          \"NULL is not a valid simple regular expression\");\n  EXPECT_NONFATAL_FAILURE(\n      ASSERT_FALSE(ValidateRegex(\"a\\\\\")),\n      \"Syntax error at index 1 in simple regular expression \\\"a\\\\\\\": \");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"a\\\\\")),\n                          \"'\\\\' cannot appear at the end\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"\\\\n\\\\\")),\n",
                    "rendered": {
                      "text": "                          \"NULL is not a valid simple regular expression\");\n  EXPECT_NONFATAL_FAILURE(\n      ASSERT_FALSE(ValidateRegex(\"a\\\\\")),\n      \"Syntax error at index 1 in simple regular expression \\\"a\\\\\\\": \");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"a\\\\\")),\n                          \"'\\\\' cannot appear at the end\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"\\\\n\\\\\")),\n",
                      "markdown": "`                          \"NULL is not a valid simple regular expression\");\n  EXPECT_NONFATAL_FAILURE(\n      ASSERT_FALSE(ValidateRegex(\"a\\\\\")),\n      \"Syntax error at index 1 in simple regular expression \\\"a\\\\\\\": \");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"a\\\\\")),\n                          \"'\\\\' cannot appear at the end\");\n  EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(\"\\\\n\\\\\")),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-port-test.cc"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 73,
                  "endLine": 304,
                  "snippet": {
                    "text": "\n  // We can't guarantee that no other thread was created or destroyed between\n  // any two calls to GetThreadCount(). We make multiple attempts, hoping that\n  // background noise is not constant and we would see the \"right\" values at\n  // some point.\n  for (int attempt = 0; attempt < 20; ++attempt) {\n    starting_count = GetThreadCount();\n    pthread_t thread_id;\n",
                    "rendered": {
                      "text": "\n  // We can't guarantee that no other thread was created or destroyed between\n  // any two calls to GetThreadCount(). We make multiple attempts, hoping that\n  // background noise is not constant and we would see the \"right\" values at\n  // some point.\n  for (int attempt = 0; attempt < 20; ++attempt) {\n    starting_count = GetThreadCount();\n    pthread_t thread_id;\n",
                      "markdown": "`\n  // We can't guarantee that no other thread was created or destroyed between\n  // any two calls to GetThreadCount(). We make multiple attempts, hoping that\n  // background noise is not constant and we would see the \"right\" values at\n  // some point.\n  for (int attempt = 0; attempt < 20; ++attempt) {\n    starting_count = GetThreadCount();\n    pthread_t thread_id;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-port-test.cc"
                },
                "region": {
                  "startLine": 1094,
                  "startColumn": 49,
                  "endLine": 1094,
                  "endColumn": 55,
                  "snippet": {
                    "text": "  for (int i = 0; i < param.second; ++i) param.first->Increment();\n}\n\n// Tests that the mutex only lets one thread at a time to lock it.\nTEST(MutexTest, OnlyOneThreadCanLockAtATime) {\n  Mutex mutex;\n  AtomicCounterWithMutex locked_counter(&mutex);\n",
                    "rendered": {
                      "text": "  for (int i = 0; i < param.second; ++i) param.first->Increment();\n}\n\n// Tests that the mutex only lets one thread at a time to lock it.\nTEST(MutexTest, OnlyOneThreadCanLockAtATime) {\n  Mutex mutex;\n  AtomicCounterWithMutex locked_counter(&mutex);\n",
                      "markdown": "`  for (int i = 0; i < param.second; ++i) param.first->Increment();\n}\n\n// Tests that the mutex only lets one thread at a time to lock it.\nTEST(MutexTest, OnlyOneThreadCanLockAtATime) {\n  Mutex mutex;\n  AtomicCounterWithMutex locked_counter(&mutex);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_list_output_unittest.py"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 17,
                  "endLine": 260,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    ]\n    environ_copy = os.environ.copy()\n    p = gtest_test_utils.Subprocess(\n        command, env=environ_copy, working_dir=gtest_test_utils.GetTempDir()\n    )\n\n    self.assertTrue(p.exited)\n",
                    "rendered": {
                      "text": "    ]\n    environ_copy = os.environ.copy()\n    p = gtest_test_utils.Subprocess(\n        command, env=environ_copy, working_dir=gtest_test_utils.GetTempDir()\n    )\n\n    self.assertTrue(p.exited)\n",
                      "markdown": "`    ]\n    environ_copy = os.environ.copy()\n    p = gtest_test_utils.Subprocess(\n        command, env=environ_copy, working_dir=gtest_test_utils.GetTempDir()\n    )\n\n    self.assertTrue(p.exited)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_list_output_unittest.py"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 12,
                  "snippet": {
                    "text": "--gtest_list_tests flag. If output is requested, via --gtest_output=xml\nor --gtest_output=json, the tests are listed, with extra information in the\noutput file.\nThis script tests such functionality by invoking gtest_list_output_unittest_\n (a program written with Google Test) the command line flags.\n\"\"\"\n\n",
                    "rendered": {
                      "text": "--gtest_list_tests flag. If output is requested, via --gtest_output=xml\nor --gtest_output=json, the tests are listed, with extra information in the\noutput file.\nThis script tests such functionality by invoking gtest_list_output_unittest_\n (a program written with Google Test) the command line flags.\n\"\"\"\n\n",
                      "markdown": "`--gtest_list_tests flag. If output is requested, via --gtest_output=xml\nor --gtest_output=json, the tests are listed, with extra information in the\noutput file.\nThis script tests such functionality by invoking gtest_list_output_unittest_\n (a program written with Google Test) the command line flags.\n\"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-death-test-test.cc"
                },
                "region": {
                  "startLine": 1210,
                  "startColumn": 46,
                  "endLine": 1210,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\n  // Tests that AutoHandle contains INVALID_HANDLE_VALUE by default.\n  testing::internal::AutoHandle auto_handle2;\n  EXPECT_EQ(INVALID_HANDLE_VALUE, auto_handle2.Get());\n}\n#endif  // GTEST_OS_WINDOWS\n\n",
                    "rendered": {
                      "text": "\n  // Tests that AutoHandle contains INVALID_HANDLE_VALUE by default.\n  testing::internal::AutoHandle auto_handle2;\n  EXPECT_EQ(INVALID_HANDLE_VALUE, auto_handle2.Get());\n}\n#endif  // GTEST_OS_WINDOWS\n\n",
                      "markdown": "`\n  // Tests that AutoHandle contains INVALID_HANDLE_VALUE by default.\n  testing::internal::AutoHandle auto_handle2;\n  EXPECT_EQ(INVALID_HANDLE_VALUE, auto_handle2.Get());\n}\n#endif  // GTEST_OS_WINDOWS\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-death-test-test.cc"
                },
                "region": {
                  "startLine": 1206,
                  "startColumn": 31,
                  "endLine": 1206,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  handle = ::CreateEvent(NULL, FALSE, FALSE, NULL);\n  ASSERT_NE(INVALID_HANDLE_VALUE, handle);\n  auto_handle.Reset(handle);\n  EXPECT_EQ(handle, auto_handle.Get());\n\n  // Tests that AutoHandle contains INVALID_HANDLE_VALUE by default.\n  testing::internal::AutoHandle auto_handle2;\n",
                    "rendered": {
                      "text": "  handle = ::CreateEvent(NULL, FALSE, FALSE, NULL);\n  ASSERT_NE(INVALID_HANDLE_VALUE, handle);\n  auto_handle.Reset(handle);\n  EXPECT_EQ(handle, auto_handle.Get());\n\n  // Tests that AutoHandle contains INVALID_HANDLE_VALUE by default.\n  testing::internal::AutoHandle auto_handle2;\n",
                      "markdown": "`  handle = ::CreateEvent(NULL, FALSE, FALSE, NULL);\n  ASSERT_NE(INVALID_HANDLE_VALUE, handle);\n  auto_handle.Reset(handle);\n  EXPECT_EQ(handle, auto_handle.Get());\n\n  // Tests that AutoHandle contains INVALID_HANDLE_VALUE by default.\n  testing::internal::AutoHandle auto_handle2;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-death-test-test.cc"
                },
                "region": {
                  "startLine": 1199,
                  "startColumn": 45,
                  "endLine": 1199,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  // Tests that Reset assigns INVALID_HANDLE_VALUE.\n  // Note that this cannot verify whether the original handle is closed.\n  auto_handle.Reset();\n  EXPECT_EQ(INVALID_HANDLE_VALUE, auto_handle.Get());\n\n  // Tests that Reset assigns the new handle.\n  // Note that this cannot verify whether the original handle is closed.\n",
                    "rendered": {
                      "text": "  // Tests that Reset assigns INVALID_HANDLE_VALUE.\n  // Note that this cannot verify whether the original handle is closed.\n  auto_handle.Reset();\n  EXPECT_EQ(INVALID_HANDLE_VALUE, auto_handle.Get());\n\n  // Tests that Reset assigns the new handle.\n  // Note that this cannot verify whether the original handle is closed.\n",
                      "markdown": "`  // Tests that Reset assigns INVALID_HANDLE_VALUE.\n  // Note that this cannot verify whether the original handle is closed.\n  auto_handle.Reset();\n  EXPECT_EQ(INVALID_HANDLE_VALUE, auto_handle.Get());\n\n  // Tests that Reset assigns the new handle.\n  // Note that this cannot verify whether the original handle is closed.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-death-test-test.cc"
                },
                "region": {
                  "startLine": 1194,
                  "startColumn": 31,
                  "endLine": 1194,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n  // Tests that the AutoHandle is correctly initialized with a handle.\n  testing::internal::AutoHandle auto_handle(handle);\n  EXPECT_EQ(handle, auto_handle.Get());\n\n  // Tests that Reset assigns INVALID_HANDLE_VALUE.\n  // Note that this cannot verify whether the original handle is closed.\n",
                    "rendered": {
                      "text": "\n  // Tests that the AutoHandle is correctly initialized with a handle.\n  testing::internal::AutoHandle auto_handle(handle);\n  EXPECT_EQ(handle, auto_handle.Get());\n\n  // Tests that Reset assigns INVALID_HANDLE_VALUE.\n  // Note that this cannot verify whether the original handle is closed.\n",
                      "markdown": "`\n  // Tests that the AutoHandle is correctly initialized with a handle.\n  testing::internal::AutoHandle auto_handle(handle);\n  EXPECT_EQ(handle, auto_handle.Get());\n\n  // Tests that Reset assigns INVALID_HANDLE_VALUE.\n  // Note that this cannot verify whether the original handle is closed.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-death-test-test.cc"
                },
                "region": {
                  "startLine": 1490,
                  "startColumn": 43,
                  "endLine": 1490,
                  "endColumn": 51,
                  "snippet": {
                    "text": "#pragma GCC diagnostic pop\n#endif\n\n// Tests that conditional death test macros expand to code which interacts\n// well with switch statements.\nTEST(ConditionalDeathMacrosSyntaxDeathTest, SwitchStatement) {\n  // Microsoft compiler usually complains about switch statements without\n",
                    "rendered": {
                      "text": "#pragma GCC diagnostic pop\n#endif\n\n// Tests that conditional death test macros expand to code which interacts\n// well with switch statements.\nTEST(ConditionalDeathMacrosSyntaxDeathTest, SwitchStatement) {\n  // Microsoft compiler usually complains about switch statements without\n",
                      "markdown": "`#pragma GCC diagnostic pop\n#endif\n\n// Tests that conditional death test macros expand to code which interacts\n// well with switch statements.\nTEST(ConditionalDeathMacrosSyntaxDeathTest, SwitchStatement) {\n  // Microsoft compiler usually complains about switch statements without\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-death-test-test.cc"
                },
                "region": {
                  "startLine": 1476,
                  "startColumn": 14,
                  "endLine": 1476,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    EXPECT_DEATH_IF_SUPPORTED(_Exit(1), \"\");\n  else\n    // This empty \"else\" branch is meant to ensure that EXPECT_DEATH\n    // doesn't expand into an \"if\" statement without an \"else\"\n    ;  // NOLINT\n\n  if (AlwaysFalse()) ASSERT_DEATH_IF_SUPPORTED(return, \"\") << \"did not die\";\n",
                    "rendered": {
                      "text": "    EXPECT_DEATH_IF_SUPPORTED(_Exit(1), \"\");\n  else\n    // This empty \"else\" branch is meant to ensure that EXPECT_DEATH\n    // doesn't expand into an \"if\" statement without an \"else\"\n    ;  // NOLINT\n\n  if (AlwaysFalse()) ASSERT_DEATH_IF_SUPPORTED(return, \"\") << \"did not die\";\n",
                      "markdown": "`    EXPECT_DEATH_IF_SUPPORTED(_Exit(1), \"\");\n  else\n    // This empty \"else\" branch is meant to ensure that EXPECT_DEATH\n    // doesn't expand into an \"if\" statement without an \"else\"\n    ;  // NOLINT\n\n  if (AlwaysFalse()) ASSERT_DEATH_IF_SUPPORTED(return, \"\") << \"did not die\";\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-death-test-test.cc"
                },
                "region": {
                  "startLine": 1462,
                  "startColumn": 35,
                  "endLine": 1462,
                  "endColumn": 43,
                  "snippet": {
                    "text": "#pragma GCC diagnostic ignored \"-Wempty-body\"\n#pragma GCC diagnostic ignored \"-Wpragmas\"\n#endif\n// Tests that the death test macros expand to code which may or may not\n// be followed by operator<<, and that in either case the complete text\n// comprises only a single C++ statement.\n//\n",
                    "rendered": {
                      "text": "#pragma GCC diagnostic ignored \"-Wempty-body\"\n#pragma GCC diagnostic ignored \"-Wpragmas\"\n#endif\n// Tests that the death test macros expand to code which may or may not\n// be followed by operator<<, and that in either case the complete text\n// comprises only a single C++ statement.\n//\n",
                      "markdown": "`#pragma GCC diagnostic ignored \"-Wempty-body\"\n#pragma GCC diagnostic ignored \"-Wpragmas\"\n#endif\n// Tests that the death test macros expand to code which may or may not\n// be followed by operator<<, and that in either case the complete text\n// comprises only a single C++ statement.\n//\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-death-test-test.cc"
                },
                "region": {
                  "startLine": 964,
                  "startColumn": 2,
                  "endLine": 964,
                  "endColumn": 6,
                  "snippet": {
                    "text": "};\n\n// A DeathTest implementation useful in testing.  It returns values set\n// at its creation from its various inherited DeathTest methods, and\n// reports calls to those methods to its parent MockDeathTestFactory\n// object.\nclass MockDeathTest : public DeathTest {\n",
                    "rendered": {
                      "text": "};\n\n// A DeathTest implementation useful in testing.  It returns values set\n// at its creation from its various inherited DeathTest methods, and\n// reports calls to those methods to its parent MockDeathTestFactory\n// object.\nclass MockDeathTest : public DeathTest {\n",
                      "markdown": "`};\n\n// A DeathTest implementation useful in testing.  It returns values set\n// at its creation from its various inherited DeathTest methods, and\n// reports calls to those methods to its parent MockDeathTestFactory\n// object.\nclass MockDeathTest : public DeathTest {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-death-test-test.cc"
                },
                "region": {
                  "startLine": 396,
                  "startColumn": 74,
                  "endLine": 397,
                  "snippet": {
                    "text": "  signal_action.sa_sigaction = SigprofAction;\n  signal_action.sa_flags = SA_RESTART | SA_SIGINFO;\n  ASSERT_EQ(0, sigaction(SIGPROF, &signal_action, nullptr));\n  // timer comes second, to avoid SIGPROF premature delivery, as suggested at\n  // https://www.gnu.org/software/libc/manual/html_node/Setting-an-Alarm.html\n  struct itimerval timer;\n  timer.it_interval.tv_sec = 0;\n  timer.it_interval.tv_usec = 1;\n",
                    "rendered": {
                      "text": "  signal_action.sa_sigaction = SigprofAction;\n  signal_action.sa_flags = SA_RESTART | SA_SIGINFO;\n  ASSERT_EQ(0, sigaction(SIGPROF, &signal_action, nullptr));\n  // timer comes second, to avoid SIGPROF premature delivery, as suggested at\n  // https://www.gnu.org/software/libc/manual/html_node/Setting-an-Alarm.html\n  struct itimerval timer;\n  timer.it_interval.tv_sec = 0;\n  timer.it_interval.tv_usec = 1;\n",
                      "markdown": "`  signal_action.sa_sigaction = SigprofAction;\n  signal_action.sa_flags = SA_RESTART | SA_SIGINFO;\n  ASSERT_EQ(0, sigaction(SIGPROF, &signal_action, nullptr));\n  // timer comes second, to avoid SIGPROF premature delivery, as suggested at\n  // https://www.gnu.org/software/libc/manual/html_node/Setting-an-Alarm.html\n  struct itimerval timer;\n  timer.it_interval.tv_sec = 0;\n  timer.it_interval.tv_usec = 1;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-death-test-test.cc"
                },
                "region": {
                  "startLine": 337,
                  "startColumn": 31,
                  "endLine": 337,
                  "endColumn": 39,
                  "snippet": {
                    "text": "#pragma GCC diagnostic pop\n#endif\n\n// Tests that death test macros expand to code which interacts well with switch\n// statements.\nTEST_F(TestForDeathTest, SwitchStatement) {\n  // Microsoft compiler usually complains about switch statements without\n",
                    "rendered": {
                      "text": "#pragma GCC diagnostic pop\n#endif\n\n// Tests that death test macros expand to code which interacts well with switch\n// statements.\nTEST_F(TestForDeathTest, SwitchStatement) {\n  // Microsoft compiler usually complains about switch statements without\n",
                      "markdown": "`#pragma GCC diagnostic pop\n#endif\n\n// Tests that death test macros expand to code which interacts well with switch\n// statements.\nTEST_F(TestForDeathTest, SwitchStatement) {\n  // Microsoft compiler usually complains about switch statements without\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-death-test-test.cc"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 14,
                  "endLine": 323,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    EXPECT_DEATH(_Exit(1), \"\");\n  else\n    // This empty \"else\" branch is meant to ensure that EXPECT_DEATH\n    // doesn't expand into an \"if\" statement without an \"else\"\n    ;\n\n  if (AlwaysFalse()) ASSERT_DEATH(return, \"\") << \"did not die\";\n",
                    "rendered": {
                      "text": "    EXPECT_DEATH(_Exit(1), \"\");\n  else\n    // This empty \"else\" branch is meant to ensure that EXPECT_DEATH\n    // doesn't expand into an \"if\" statement without an \"else\"\n    ;\n\n  if (AlwaysFalse()) ASSERT_DEATH(return, \"\") << \"did not die\";\n",
                      "markdown": "`    EXPECT_DEATH(_Exit(1), \"\");\n  else\n    // This empty \"else\" branch is meant to ensure that EXPECT_DEATH\n    // doesn't expand into an \"if\" statement without an \"else\"\n    ;\n\n  if (AlwaysFalse()) ASSERT_DEATH(return, \"\") << \"did not die\";\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-death-test-test.cc"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 35,
                  "endLine": 311,
                  "endColumn": 43,
                  "snippet": {
                    "text": "#pragma GCC diagnostic ignored \"-Wempty-body\"\n#pragma GCC diagnostic ignored \"-Wpragmas\"\n#endif\n// Tests that the death test macros expand to code which may or may not\n// be followed by operator<<, and that in either case the complete text\n// comprises only a single C++ statement.\nTEST_F(TestForDeathTest, SingleStatement) {\n",
                    "rendered": {
                      "text": "#pragma GCC diagnostic ignored \"-Wempty-body\"\n#pragma GCC diagnostic ignored \"-Wpragmas\"\n#endif\n// Tests that the death test macros expand to code which may or may not\n// be followed by operator<<, and that in either case the complete text\n// comprises only a single C++ statement.\nTEST_F(TestForDeathTest, SingleStatement) {\n",
                      "markdown": "`#pragma GCC diagnostic ignored \"-Wempty-body\"\n#pragma GCC diagnostic ignored \"-Wpragmas\"\n#endif\n// Tests that the death test macros expand to code which may or may not\n// be followed by operator<<, and that in either case the complete text\n// comprises only a single C++ statement.\nTEST_F(TestForDeathTest, SingleStatement) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-death-test-test.cc"
                },
                "region": {
                  "startLine": 1490,
                  "startColumn": 43,
                  "endLine": 1490,
                  "endColumn": 51,
                  "snippet": {
                    "text": "#pragma GCC diagnostic pop\n#endif\n\n// Tests that conditional death test macros expand to code which interacts\n// well with switch statements.\nTEST(ConditionalDeathMacrosSyntaxDeathTest, SwitchStatement) {\n  // Microsoft compiler usually complains about switch statements without\n",
                    "rendered": {
                      "text": "#pragma GCC diagnostic pop\n#endif\n\n// Tests that conditional death test macros expand to code which interacts\n// well with switch statements.\nTEST(ConditionalDeathMacrosSyntaxDeathTest, SwitchStatement) {\n  // Microsoft compiler usually complains about switch statements without\n",
                      "markdown": "`#pragma GCC diagnostic pop\n#endif\n\n// Tests that conditional death test macros expand to code which interacts\n// well with switch statements.\nTEST(ConditionalDeathMacrosSyntaxDeathTest, SwitchStatement) {\n  // Microsoft compiler usually complains about switch statements without\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-death-test-test.cc"
                },
                "region": {
                  "startLine": 1476,
                  "startColumn": 14,
                  "endLine": 1476,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    EXPECT_DEATH_IF_SUPPORTED(_Exit(1), \"\");\n  else\n    // This empty \"else\" branch is meant to ensure that EXPECT_DEATH\n    // doesn't expand into an \"if\" statement without an \"else\"\n    ;  // NOLINT\n\n  if (AlwaysFalse()) ASSERT_DEATH_IF_SUPPORTED(return, \"\") << \"did not die\";\n",
                    "rendered": {
                      "text": "    EXPECT_DEATH_IF_SUPPORTED(_Exit(1), \"\");\n  else\n    // This empty \"else\" branch is meant to ensure that EXPECT_DEATH\n    // doesn't expand into an \"if\" statement without an \"else\"\n    ;  // NOLINT\n\n  if (AlwaysFalse()) ASSERT_DEATH_IF_SUPPORTED(return, \"\") << \"did not die\";\n",
                      "markdown": "`    EXPECT_DEATH_IF_SUPPORTED(_Exit(1), \"\");\n  else\n    // This empty \"else\" branch is meant to ensure that EXPECT_DEATH\n    // doesn't expand into an \"if\" statement without an \"else\"\n    ;  // NOLINT\n\n  if (AlwaysFalse()) ASSERT_DEATH_IF_SUPPORTED(return, \"\") << \"did not die\";\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-death-test-test.cc"
                },
                "region": {
                  "startLine": 1462,
                  "startColumn": 35,
                  "endLine": 1462,
                  "endColumn": 43,
                  "snippet": {
                    "text": "#pragma GCC diagnostic ignored \"-Wempty-body\"\n#pragma GCC diagnostic ignored \"-Wpragmas\"\n#endif\n// Tests that the death test macros expand to code which may or may not\n// be followed by operator<<, and that in either case the complete text\n// comprises only a single C++ statement.\n//\n",
                    "rendered": {
                      "text": "#pragma GCC diagnostic ignored \"-Wempty-body\"\n#pragma GCC diagnostic ignored \"-Wpragmas\"\n#endif\n// Tests that the death test macros expand to code which may or may not\n// be followed by operator<<, and that in either case the complete text\n// comprises only a single C++ statement.\n//\n",
                      "markdown": "`#pragma GCC diagnostic ignored \"-Wempty-body\"\n#pragma GCC diagnostic ignored \"-Wpragmas\"\n#endif\n// Tests that the death test macros expand to code which may or may not\n// be followed by operator<<, and that in either case the complete text\n// comprises only a single C++ statement.\n//\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-death-test-test.cc"
                },
                "region": {
                  "startLine": 1144,
                  "startColumn": 9,
                  "endLine": 1144,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  EXPECT_EQ(1, factory_->AssumeRoleCalls());\n  EXPECT_EQ(0, factory_->WaitCalls());\n  EXPECT_EQ(0U, factory_->PassedCalls());\n  // This time there are two calls to Abort: one since the test didn't\n  // die, and another from the ReturnSentinel when it's destroyed.  The\n  // sentinel normally isn't destroyed if a test doesn't die, since\n  // _Exit(2) is called in that case by ForkingDeathTest, but not by\n",
                    "rendered": {
                      "text": "  EXPECT_EQ(1, factory_->AssumeRoleCalls());\n  EXPECT_EQ(0, factory_->WaitCalls());\n  EXPECT_EQ(0U, factory_->PassedCalls());\n  // This time there are two calls to Abort: one since the test didn't\n  // die, and another from the ReturnSentinel when it's destroyed.  The\n  // sentinel normally isn't destroyed if a test doesn't die, since\n  // _Exit(2) is called in that case by ForkingDeathTest, but not by\n",
                      "markdown": "`  EXPECT_EQ(1, factory_->AssumeRoleCalls());\n  EXPECT_EQ(0, factory_->WaitCalls());\n  EXPECT_EQ(0U, factory_->PassedCalls());\n  // This time there are two calls to Abort: one since the test didn't\n  // die, and another from the ReturnSentinel when it's destroyed.  The\n  // sentinel normally isn't destroyed if a test doesn't die, since\n  // _Exit(2) is called in that case by ForkingDeathTest, but not by\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-death-test-test.cc"
                },
                "region": {
                  "startLine": 337,
                  "startColumn": 31,
                  "endLine": 337,
                  "endColumn": 39,
                  "snippet": {
                    "text": "#pragma GCC diagnostic pop\n#endif\n\n// Tests that death test macros expand to code which interacts well with switch\n// statements.\nTEST_F(TestForDeathTest, SwitchStatement) {\n  // Microsoft compiler usually complains about switch statements without\n",
                    "rendered": {
                      "text": "#pragma GCC diagnostic pop\n#endif\n\n// Tests that death test macros expand to code which interacts well with switch\n// statements.\nTEST_F(TestForDeathTest, SwitchStatement) {\n  // Microsoft compiler usually complains about switch statements without\n",
                      "markdown": "`#pragma GCC diagnostic pop\n#endif\n\n// Tests that death test macros expand to code which interacts well with switch\n// statements.\nTEST_F(TestForDeathTest, SwitchStatement) {\n  // Microsoft compiler usually complains about switch statements without\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-death-test-test.cc"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 14,
                  "endLine": 323,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    EXPECT_DEATH(_Exit(1), \"\");\n  else\n    // This empty \"else\" branch is meant to ensure that EXPECT_DEATH\n    // doesn't expand into an \"if\" statement without an \"else\"\n    ;\n\n  if (AlwaysFalse()) ASSERT_DEATH(return, \"\") << \"did not die\";\n",
                    "rendered": {
                      "text": "    EXPECT_DEATH(_Exit(1), \"\");\n  else\n    // This empty \"else\" branch is meant to ensure that EXPECT_DEATH\n    // doesn't expand into an \"if\" statement without an \"else\"\n    ;\n\n  if (AlwaysFalse()) ASSERT_DEATH(return, \"\") << \"did not die\";\n",
                      "markdown": "`    EXPECT_DEATH(_Exit(1), \"\");\n  else\n    // This empty \"else\" branch is meant to ensure that EXPECT_DEATH\n    // doesn't expand into an \"if\" statement without an \"else\"\n    ;\n\n  if (AlwaysFalse()) ASSERT_DEATH(return, \"\") << \"did not die\";\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-death-test-test.cc"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 35,
                  "endLine": 311,
                  "endColumn": 43,
                  "snippet": {
                    "text": "#pragma GCC diagnostic ignored \"-Wempty-body\"\n#pragma GCC diagnostic ignored \"-Wpragmas\"\n#endif\n// Tests that the death test macros expand to code which may or may not\n// be followed by operator<<, and that in either case the complete text\n// comprises only a single C++ statement.\nTEST_F(TestForDeathTest, SingleStatement) {\n",
                    "rendered": {
                      "text": "#pragma GCC diagnostic ignored \"-Wempty-body\"\n#pragma GCC diagnostic ignored \"-Wpragmas\"\n#endif\n// Tests that the death test macros expand to code which may or may not\n// be followed by operator<<, and that in either case the complete text\n// comprises only a single C++ statement.\nTEST_F(TestForDeathTest, SingleStatement) {\n",
                      "markdown": "`#pragma GCC diagnostic ignored \"-Wempty-body\"\n#pragma GCC diagnostic ignored \"-Wpragmas\"\n#endif\n// Tests that the death test macros expand to code which may or may not\n// be followed by operator<<, and that in either case the complete text\n// comprises only a single C++ statement.\nTEST_F(TestForDeathTest, SingleStatement) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-catch-exceptions-test.py"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 61,
                  "endLine": 61,
                  "endColumn": 69,
                  "snippet": {
                    "text": "environ = gtest_test_utils.environ\nSetEnvVar = gtest_test_utils.SetEnvVar\n\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n",
                    "rendered": {
                      "text": "environ = gtest_test_utils.environ\nSetEnvVar = gtest_test_utils.SetEnvVar\n\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n",
                      "markdown": "`environ = gtest_test_utils.environ\nSetEnvVar = gtest_test_utils.SetEnvVar\n\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-catch-exceptions-test.py"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 4,
                  "endLine": 33,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n\"\"\"Tests Google Test's exception catching behavior.\n\nThis script invokes googletest-catch-exceptions-test_ and\ngoogletest-catch-exceptions-ex-test_ (programs written with\nGoogle Test) and verifies their output.\n\"\"\"\n",
                    "rendered": {
                      "text": "\n\"\"\"Tests Google Test's exception catching behavior.\n\nThis script invokes googletest-catch-exceptions-test_ and\ngoogletest-catch-exceptions-ex-test_ (programs written with\nGoogle Test) and verifies their output.\n\"\"\"\n",
                      "markdown": "`\n\"\"\"Tests Google Test's exception catching behavior.\n\nThis script invokes googletest-catch-exceptions-test_ and\ngoogletest-catch-exceptions-ex-test_ (programs written with\nGoogle Test) and verifies their output.\n\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-shuffle-test.py"
                },
                "region": {
                  "startLine": 329,
                  "startColumn": 59,
                  "endLine": 329,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n    # Make sure running the tests with random seed 3 gets the same\n    # order as in iteration 3 above.  Success means that Google Test\n    # correctly restores the test order before re-shuffling at the\n    # beginning of iteration 3.\n    tests_with_seed3 = GetTestsForAllIterations(\n        {}, [ShuffleFlag(), RandomSeedFlag(3)]\n",
                    "rendered": {
                      "text": "\n    # Make sure running the tests with random seed 3 gets the same\n    # order as in iteration 3 above.  Success means that Google Test\n    # correctly restores the test order before re-shuffling at the\n    # beginning of iteration 3.\n    tests_with_seed3 = GetTestsForAllIterations(\n        {}, [ShuffleFlag(), RandomSeedFlag(3)]\n",
                      "markdown": "`\n    # Make sure running the tests with random seed 3 gets the same\n    # order as in iteration 3 above.  Success means that Google Test\n    # correctly restores the test order before re-shuffling at the\n    # beginning of iteration 3.\n    tests_with_seed3 = GetTestsForAllIterations(\n        {}, [ShuffleFlag(), RandomSeedFlag(3)]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-shuffle-test.py"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 59,
                  "endLine": 320,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n    # Make sure running the tests with random seed 2 gets the same\n    # order as in iteration 2 above.  Success means that Google Test\n    # correctly restores the test order before re-shuffling at the\n    # beginning of iteration 2.\n    tests_with_seed2 = GetTestsForAllIterations(\n        {}, [ShuffleFlag(), RandomSeedFlag(2)]\n",
                    "rendered": {
                      "text": "\n    # Make sure running the tests with random seed 2 gets the same\n    # order as in iteration 2 above.  Success means that Google Test\n    # correctly restores the test order before re-shuffling at the\n    # beginning of iteration 2.\n    tests_with_seed2 = GetTestsForAllIterations(\n        {}, [ShuffleFlag(), RandomSeedFlag(2)]\n",
                      "markdown": "`\n    # Make sure running the tests with random seed 2 gets the same\n    # order as in iteration 2 above.  Success means that Google Test\n    # correctly restores the test order before re-shuffling at the\n    # beginning of iteration 2.\n    tests_with_seed2 = GetTestsForAllIterations(\n        {}, [ShuffleFlag(), RandomSeedFlag(2)]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-internal-inl.h"
                },
                "region": {
                  "startLine": 786,
                  "startColumn": 30,
                  "endLine": 786,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n  // Returns a pointer to the current death test factory.\n  internal::DeathTestFactory* death_test_factory() {\n    return death_test_factory_.get();\n  }\n\n  void SuppressTestEventsIfInSubprocess();\n",
                    "rendered": {
                      "text": "\n  // Returns a pointer to the current death test factory.\n  internal::DeathTestFactory* death_test_factory() {\n    return death_test_factory_.get();\n  }\n\n  void SuppressTestEventsIfInSubprocess();\n",
                      "markdown": "`\n  // Returns a pointer to the current death test factory.\n  internal::DeathTestFactory* death_test_factory() {\n    return death_test_factory_.get();\n  }\n\n  void SuppressTestEventsIfInSubprocess();\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-internal-inl.h"
                },
                "region": {
                  "startLine": 781,
                  "startColumn": 40,
                  "endLine": 781,
                  "endColumn": 45,
                  "snippet": {
                    "text": "  // This information is useful only in a death test child process.\n  // Must not be called before a call to InitGoogleTest.\n  const InternalRunDeathTestFlag* internal_run_death_test_flag() const {\n    return internal_run_death_test_flag_.get();\n  }\n\n  // Returns a pointer to the current death test factory.\n",
                    "rendered": {
                      "text": "  // This information is useful only in a death test child process.\n  // Must not be called before a call to InitGoogleTest.\n  const InternalRunDeathTestFlag* internal_run_death_test_flag() const {\n    return internal_run_death_test_flag_.get();\n  }\n\n  // Returns a pointer to the current death test factory.\n",
                      "markdown": "`  // This information is useful only in a death test child process.\n  // Must not be called before a call to InitGoogleTest.\n  const InternalRunDeathTestFlag* internal_run_death_test_flag() const {\n    return internal_run_death_test_flag_.get();\n  }\n\n  // Returns a pointer to the current death test factory.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-internal-inl.h"
                },
                "region": {
                  "startLine": 769,
                  "startColumn": 29,
                  "endLine": 769,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    return *(gtest_trace_stack_.pointer());\n  }\n  const std::vector<TraceInfo>& gtest_trace_stack() const {\n    return gtest_trace_stack_.get();\n  }\n\n#ifdef GTEST_HAS_DEATH_TEST\n",
                    "rendered": {
                      "text": "    return *(gtest_trace_stack_.pointer());\n  }\n  const std::vector<TraceInfo>& gtest_trace_stack() const {\n    return gtest_trace_stack_.get();\n  }\n\n#ifdef GTEST_HAS_DEATH_TEST\n",
                      "markdown": "`    return *(gtest_trace_stack_.pointer());\n  }\n  const std::vector<TraceInfo>& gtest_trace_stack() const {\n    return gtest_trace_stack_.get();\n  }\n\n#ifdef GTEST_HAS_DEATH_TEST\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-internal-inl.h"
                },
                "region": {
                  "startLine": 544,
                  "startColumn": 52,
                  "endLine": 544,
                  "endColumn": 56,
                  "snippet": {
                    "text": "  // Gets the number of all test suites.\n  int total_test_suite_count() const;\n\n  // Gets the number of all test suites that contain at least one test\n  // that should run.\n  int test_suite_to_run_count() const;\n\n",
                    "rendered": {
                      "text": "  // Gets the number of all test suites.\n  int total_test_suite_count() const;\n\n  // Gets the number of all test suites that contain at least one test\n  // that should run.\n  int test_suite_to_run_count() const;\n\n",
                      "markdown": "`  // Gets the number of all test suites.\n  int total_test_suite_count() const;\n\n  // Gets the number of all test suites that contain at least one test\n  // that should run.\n  int test_suite_to_run_count() const;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-internal-inl.h"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 55,
                  "endLine": 244,
                  "endColumn": 59,
                  "snippet": {
                    "text": "GTEST_API_ std::string WideStringToUtf8(const wchar_t* str, int num_chars);\n\n// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file\n// if the variable is present. If a file already exists at this location, this\n// function will write over it. If the variable is present, but the file cannot\n// be created, prints an error and exits.\nvoid WriteToShardStatusFileIfNeeded();\n",
                    "rendered": {
                      "text": "GTEST_API_ std::string WideStringToUtf8(const wchar_t* str, int num_chars);\n\n// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file\n// if the variable is present. If a file already exists at this location, this\n// function will write over it. If the variable is present, but the file cannot\n// be created, prints an error and exits.\nvoid WriteToShardStatusFileIfNeeded();\n",
                      "markdown": "`GTEST_API_ std::string WideStringToUtf8(const wchar_t* str, int num_chars);\n\n// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file\n// if the variable is present. If a file already exists at this location, this\n// function will write over it. If the variable is present, but the file cannot\n// be created, prints an error and exits.\nvoid WriteToShardStatusFileIfNeeded();\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-internal-inl.h"
                },
                "region": {
                  "startLine": 634,
                  "startColumn": 28,
                  "endLine": 634,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  //\n  // The maximum number of stack frames to be included is specified by\n  // the gtest_stack_trace_depth flag.  The skip_count parameter\n  // specifies the number of top frames to be skipped, which doesn't\n  // count against the number of frames to be included.\n  //\n  // For example, if Foo() calls Bar(), which in turn calls\n",
                    "rendered": {
                      "text": "  //\n  // The maximum number of stack frames to be included is specified by\n  // the gtest_stack_trace_depth flag.  The skip_count parameter\n  // specifies the number of top frames to be skipped, which doesn't\n  // count against the number of frames to be included.\n  //\n  // For example, if Foo() calls Bar(), which in turn calls\n",
                      "markdown": "`  //\n  // The maximum number of stack frames to be included is specified by\n  // the gtest_stack_trace_depth flag.  The skip_count parameter\n  // specifies the number of top frames to be skipped, which doesn't\n  // count against the number of frames to be included.\n  //\n  // For example, if Foo() calls Bar(), which in turn calls\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-internal-inl.h"
                },
                "region": {
                  "startLine": 572,
                  "startColumn": 13,
                  "endLine": 572,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  // Gets the number of tests that should run.\n  int test_to_run_count() const;\n\n  // Gets the time of the test program start, in ms from the start of the\n  // UNIX epoch.\n  TimeInMillis start_timestamp() const { return start_timestamp_; }\n\n",
                    "rendered": {
                      "text": "  // Gets the number of tests that should run.\n  int test_to_run_count() const;\n\n  // Gets the time of the test program start, in ms from the start of the\n  // UNIX epoch.\n  TimeInMillis start_timestamp() const { return start_timestamp_; }\n\n",
                      "markdown": "`  // Gets the number of tests that should run.\n  int test_to_run_count() const;\n\n  // Gets the time of the test program start, in ms from the start of the\n  // UNIX epoch.\n  TimeInMillis start_timestamp() const { return start_timestamp_; }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-internal-inl.h"
                },
                "region": {
                  "startLine": 424,
                  "startColumn": 36,
                  "endLine": 424,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n  // UponLeavingGTest() should be called immediately before Google Test calls\n  // user code. It saves some information about the current stack that\n  // CurrentStackTrace() will use to find and hide Google Test stack frames.\n  virtual void UponLeavingGTest() = 0;\n\n  // This string is inserted in place of stack frames that are part of\n",
                    "rendered": {
                      "text": "\n  // UponLeavingGTest() should be called immediately before Google Test calls\n  // user code. It saves some information about the current stack that\n  // CurrentStackTrace() will use to find and hide Google Test stack frames.\n  virtual void UponLeavingGTest() = 0;\n\n  // This string is inserted in place of stack frames that are part of\n",
                      "markdown": "`\n  // UponLeavingGTest() should be called immediately before Google Test calls\n  // user code. It saves some information about the current stack that\n  // CurrentStackTrace() will use to find and hide Google Test stack frames.\n  virtual void UponLeavingGTest() = 0;\n\n  // This string is inserted in place of stack frames that are part of\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-internal-inl.h"
                },
                "region": {
                  "startLine": 418,
                  "startColumn": 33,
                  "endLine": 418,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  //\n  //   max_depth  - the maximum number of stack frames to be included\n  //                in the trace.\n  //   skip_count - the number of top frames to be skipped; doesn't count\n  //                against max_depth.\n  virtual std::string CurrentStackTrace(int max_depth, int skip_count) = 0;\n\n",
                    "rendered": {
                      "text": "  //\n  //   max_depth  - the maximum number of stack frames to be included\n  //                in the trace.\n  //   skip_count - the number of top frames to be skipped; doesn't count\n  //                against max_depth.\n  virtual std::string CurrentStackTrace(int max_depth, int skip_count) = 0;\n\n",
                      "markdown": "`  //\n  //   max_depth  - the maximum number of stack frames to be included\n  //                in the trace.\n  //   skip_count - the number of top frames to be skipped; doesn't count\n  //                against max_depth.\n  virtual std::string CurrentStackTrace(int max_depth, int skip_count) = 0;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-internal-inl.h"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 21,
                  "endLine": 100,
                  "endColumn": 27,
                  "snippet": {
                    "text": "// seconds, the output has a trailing decimal point (e.g., \"N.\" instead of \"N\").\nGTEST_API_ std::string FormatTimeInMillisAsSeconds(TimeInMillis ms);\n\n// Converts the given time in milliseconds to a date string in the ISO 8601\n// format, without the timezone information.  N.B.: due to the use the\n// non-reentrant localtime() function, this function is not thread safe.  Do\n// not use it in any code that can be called from multiple threads.\n",
                    "rendered": {
                      "text": "// seconds, the output has a trailing decimal point (e.g., \"N.\" instead of \"N\").\nGTEST_API_ std::string FormatTimeInMillisAsSeconds(TimeInMillis ms);\n\n// Converts the given time in milliseconds to a date string in the ISO 8601\n// format, without the timezone information.  N.B.: due to the use the\n// non-reentrant localtime() function, this function is not thread safe.  Do\n// not use it in any code that can be called from multiple threads.\n",
                      "markdown": "`// seconds, the output has a trailing decimal point (e.g., \"N.\" instead of \"N\").\nGTEST_API_ std::string FormatTimeInMillisAsSeconds(TimeInMillis ms);\n\n// Converts the given time in milliseconds to a date string in the ISO 8601\n// format, without the timezone information.  N.B.: due to the use the\n// non-reentrant localtime() function, this function is not thread safe.  Do\n// not use it in any code that can be called from multiple threads.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-internal-inl.h"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 20,
                  "endLine": 96,
                  "endColumn": 26,
                  "snippet": {
                    "text": "// Returns true if and only if Google Test should use colors in the output.\nGTEST_API_ bool ShouldUseColor(bool stdout_is_tty);\n\n// Formats the given time in milliseconds as seconds. If the input is an exact N\n// seconds, the output has a trailing decimal point (e.g., \"N.\" instead of \"N\").\nGTEST_API_ std::string FormatTimeInMillisAsSeconds(TimeInMillis ms);\n\n",
                    "rendered": {
                      "text": "// Returns true if and only if Google Test should use colors in the output.\nGTEST_API_ bool ShouldUseColor(bool stdout_is_tty);\n\n// Formats the given time in milliseconds as seconds. If the input is an exact N\n// seconds, the output has a trailing decimal point (e.g., \"N.\" instead of \"N\").\nGTEST_API_ std::string FormatTimeInMillisAsSeconds(TimeInMillis ms);\n\n",
                      "markdown": "`// Returns true if and only if Google Test should use colors in the output.\nGTEST_API_ bool ShouldUseColor(bool stdout_is_tty);\n\n// Formats the given time in milliseconds as seconds. If the input is an exact N\n// seconds, the output has a trailing decimal point (e.g., \"N.\" instead of \"N\").\nGTEST_API_ std::string FormatTimeInMillisAsSeconds(TimeInMillis ms);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-internal-inl.h"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 22,
                  "endLine": 90,
                  "endColumn": 28,
                  "snippet": {
                    "text": "// is specified on the command line.\nGTEST_API_ extern bool g_help_flag;\n\n// Returns the current time in milliseconds.\nGTEST_API_ TimeInMillis GetTimeInMillis();\n\n// Returns true if and only if Google Test should use colors in the output.\n",
                    "rendered": {
                      "text": "// is specified on the command line.\nGTEST_API_ extern bool g_help_flag;\n\n// Returns the current time in milliseconds.\nGTEST_API_ TimeInMillis GetTimeInMillis();\n\n// Returns true if and only if Google Test should use colors in the output.\n",
                      "markdown": "`// is specified on the command line.\nGTEST_API_ extern bool g_help_flag;\n\n// Returns the current time in milliseconds.\nGTEST_API_ TimeInMillis GetTimeInMillis();\n\n// Returns true if and only if Google Test should use colors in the output.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/internal/custom/README.md"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 21,
                  "endLine": 43,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n## Header `gtest-printers.h`\n\n*   See documentation at `gtest/gtest-printers.h` for details on how to define a\n    custom printer.\n",
                    "rendered": {
                      "text": "\n## Header `gtest-printers.h`\n\n*   See documentation at `gtest/gtest-printers.h` for details on how to define a\n    custom printer.\n",
                      "markdown": "`\n## Header `gtest-printers.h`\n\n*   See documentation at `gtest/gtest-printers.h` for details on how to define a\n    custom printer.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/samples/sample5_unittest.cc"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 12,
                  "endLine": 80,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    EXPECT_TRUE(end_time - start_time_ <= 5) << \"The test took too long.\";\n  }\n\n  // The UTC time (in seconds) when the test starts\n  time_t start_time_;\n};\n\n",
                    "rendered": {
                      "text": "    EXPECT_TRUE(end_time - start_time_ <= 5) << \"The test took too long.\";\n  }\n\n  // The UTC time (in seconds) when the test starts\n  time_t start_time_;\n};\n\n",
                      "markdown": "`    EXPECT_TRUE(end_time - start_time_ <= 5) << \"The test took too long.\";\n  }\n\n  // The UTC time (in seconds) when the test starts\n  time_t start_time_;\n};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/samples/sample5_unittest.cc"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 15,
                  "endLine": 71,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  // TearDown() is invoked immediately after a test finishes.  Here we\n  // check if the test was too slow.\n  void TearDown() override {\n    // Gets the time when the test finishes\n    const time_t end_time = time(nullptr);\n\n    // Asserts that the test took no more than ~5 seconds.  Did you\n",
                    "rendered": {
                      "text": "  // TearDown() is invoked immediately after a test finishes.  Here we\n  // check if the test was too slow.\n  void TearDown() override {\n    // Gets the time when the test finishes\n    const time_t end_time = time(nullptr);\n\n    // Asserts that the test took no more than ~5 seconds.  Did you\n",
                      "markdown": "`  // TearDown() is invoked immediately after a test finishes.  Here we\n  // check if the test was too slow.\n  void TearDown() override {\n    // Gets the time when the test finishes\n    const time_t end_time = time(nullptr);\n\n    // Asserts that the test took no more than ~5 seconds.  Did you\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/samples/sample3-inl.h"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 8,
                  "endLine": 154,
                  "endColumn": 14,
                  "snippet": {
                    "text": "  Queue* Map(F function) const {\n    Queue* new_queue = new Queue();\n    for (const QueueNode<E>* node = head_; node != nullptr;\n         node = node->next_) {\n      new_queue->Enqueue(function(node->element()));\n    }\n\n",
                    "rendered": {
                      "text": "  Queue* Map(F function) const {\n    Queue* new_queue = new Queue();\n    for (const QueueNode<E>* node = head_; node != nullptr;\n         node = node->next_) {\n      new_queue->Enqueue(function(node->element()));\n    }\n\n",
                      "markdown": "`  Queue* Map(F function) const {\n    Queue* new_queue = new Queue();\n    for (const QueueNode<E>* node = head_; node != nullptr;\n         node = node->next_) {\n      new_queue->Enqueue(function(node->element()));\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/samples/sample3-inl.h"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 42,
                  "endLine": 153,
                  "endColumn": 48,
                  "snippet": {
                    "text": "  template <typename F>\n  Queue* Map(F function) const {\n    Queue* new_queue = new Queue();\n    for (const QueueNode<E>* node = head_; node != nullptr;\n         node = node->next_) {\n      new_queue->Enqueue(function(node->element()));\n    }\n",
                    "rendered": {
                      "text": "  template <typename F>\n  Queue* Map(F function) const {\n    Queue* new_queue = new Queue();\n    for (const QueueNode<E>* node = head_; node != nullptr;\n         node = node->next_) {\n      new_queue->Enqueue(function(node->element()));\n    }\n",
                      "markdown": "`  template <typename F>\n  Queue* Map(F function) const {\n    Queue* new_queue = new Queue();\n    for (const QueueNode<E>* node = head_; node != nullptr;\n         node = node->next_) {\n      new_queue->Enqueue(function(node->element()));\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/samples/sample3-inl.h"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 28,
                  "endLine": 153,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  template <typename F>\n  Queue* Map(F function) const {\n    Queue* new_queue = new Queue();\n    for (const QueueNode<E>* node = head_; node != nullptr;\n         node = node->next_) {\n      new_queue->Enqueue(function(node->element()));\n    }\n",
                    "rendered": {
                      "text": "  template <typename F>\n  Queue* Map(F function) const {\n    Queue* new_queue = new Queue();\n    for (const QueueNode<E>* node = head_; node != nullptr;\n         node = node->next_) {\n      new_queue->Enqueue(function(node->element()));\n    }\n",
                      "markdown": "`  template <typename F>\n  Queue* Map(F function) const {\n    Queue* new_queue = new Queue();\n    for (const QueueNode<E>* node = head_; node != nullptr;\n         node = node->next_) {\n      new_queue->Enqueue(function(node->element()));\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/samples/sample3-inl.h"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 7,
                  "endLine": 88,
                  "endColumn": 13,
                  "snippet": {
                    "text": "      QueueNode<E>* next = node->next();\n      for (;;) {\n        delete node;\n        node = next;\n        if (node == nullptr) break;\n        next = node->next();\n      }\n",
                    "rendered": {
                      "text": "      QueueNode<E>* next = node->next();\n      for (;;) {\n        delete node;\n        node = next;\n        if (node == nullptr) break;\n        next = node->next();\n      }\n",
                      "markdown": "`      QueueNode<E>* next = node->next();\n      for (;;) {\n        delete node;\n        node = next;\n        if (node == nullptr) break;\n        next = node->next();\n      }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/samples/sample3-inl.h"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 19,
                  "endLine": 84,
                  "endColumn": 25,
                  "snippet": {
                    "text": "  void Clear() {\n    if (size_ > 0) {\n      // 1. Deletes every node.\n      QueueNode<E>* node = head_;\n      QueueNode<E>* next = node->next();\n      for (;;) {\n        delete node;\n",
                    "rendered": {
                      "text": "  void Clear() {\n    if (size_ > 0) {\n      // 1. Deletes every node.\n      QueueNode<E>* node = head_;\n      QueueNode<E>* next = node->next();\n      for (;;) {\n        delete node;\n",
                      "markdown": "`  void Clear() {\n    if (size_ > 0) {\n      // 1. Deletes every node.\n      QueueNode<E>* node = head_;\n      QueueNode<E>* next = node->next();\n      for (;;) {\n        delete node;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_testbridge_test.py"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 66,
                  "endLine": 49,
                  "endColumn": 71,
                  "snippet": {
                    "text": "class GTestTestFilterTest(gtest_test_utils.TestCase):\n\n  def testTestExecutionIsFiltered(self):\n    \"\"\"Tests that the test filter is picked up from the testbridge env var.\"\"\"\n    subprocess_env = os.environ.copy()\n\n    subprocess_env[TESTBRIDGE_NAME] = '*.TestThatSucceeds'\n",
                    "rendered": {
                      "text": "class GTestTestFilterTest(gtest_test_utils.TestCase):\n\n  def testTestExecutionIsFiltered(self):\n    \"\"\"Tests that the test filter is picked up from the testbridge env var.\"\"\"\n    subprocess_env = os.environ.copy()\n\n    subprocess_env[TESTBRIDGE_NAME] = '*.TestThatSucceeds'\n",
                      "markdown": "`class GTestTestFilterTest(gtest_test_utils.TestCase):\n\n  def testTestExecutionIsFiltered(self):\n    \"\"\"Tests that the test filter is picked up from the testbridge env var.\"\"\"\n    subprocess_env = os.environ.copy()\n\n    subprocess_env[TESTBRIDGE_NAME] = '*.TestThatSucceeds'\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_pred_impl_unittest.cc"
                },
                "region": {
                  "startLine": 1721,
                  "startColumn": 24,
                  "endLine": 1721,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    EXPECT_EQ(1, n5_) << \"The predicate assertion didn't evaluate argument 6 \"\n                         \"exactly once.\";\n\n    // Verifies that the control flow in the test function is expected.\n    if (expected_to_finish_ && !finished_) {\n      FAIL() << \"The predicate assertion unexpectedly aborted the test.\";\n    } else if (!expected_to_finish_ && finished_) {\n",
                    "rendered": {
                      "text": "    EXPECT_EQ(1, n5_) << \"The predicate assertion didn't evaluate argument 6 \"\n                         \"exactly once.\";\n\n    // Verifies that the control flow in the test function is expected.\n    if (expected_to_finish_ && !finished_) {\n      FAIL() << \"The predicate assertion unexpectedly aborted the test.\";\n    } else if (!expected_to_finish_ && finished_) {\n",
                      "markdown": "`    EXPECT_EQ(1, n5_) << \"The predicate assertion didn't evaluate argument 6 \"\n                         \"exactly once.\";\n\n    // Verifies that the control flow in the test function is expected.\n    if (expected_to_finish_ && !finished_) {\n      FAIL() << \"The predicate assertion unexpectedly aborted the test.\";\n    } else if (!expected_to_finish_ && finished_) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_pred_impl_unittest.cc"
                },
                "region": {
                  "startLine": 1300,
                  "startColumn": 24,
                  "endLine": 1300,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    EXPECT_EQ(1, n4_) << \"The predicate assertion didn't evaluate argument 5 \"\n                         \"exactly once.\";\n\n    // Verifies that the control flow in the test function is expected.\n    if (expected_to_finish_ && !finished_) {\n      FAIL() << \"The predicate assertion unexpectedly aborted the test.\";\n    } else if (!expected_to_finish_ && finished_) {\n",
                    "rendered": {
                      "text": "    EXPECT_EQ(1, n4_) << \"The predicate assertion didn't evaluate argument 5 \"\n                         \"exactly once.\";\n\n    // Verifies that the control flow in the test function is expected.\n    if (expected_to_finish_ && !finished_) {\n      FAIL() << \"The predicate assertion unexpectedly aborted the test.\";\n    } else if (!expected_to_finish_ && finished_) {\n",
                      "markdown": "`    EXPECT_EQ(1, n4_) << \"The predicate assertion didn't evaluate argument 5 \"\n                         \"exactly once.\";\n\n    // Verifies that the control flow in the test function is expected.\n    if (expected_to_finish_ && !finished_) {\n      FAIL() << \"The predicate assertion unexpectedly aborted the test.\";\n    } else if (!expected_to_finish_ && finished_) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_pred_impl_unittest.cc"
                },
                "region": {
                  "startLine": 894,
                  "startColumn": 24,
                  "endLine": 894,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    EXPECT_EQ(1, n3_) << \"The predicate assertion didn't evaluate argument 4 \"\n                         \"exactly once.\";\n\n    // Verifies that the control flow in the test function is expected.\n    if (expected_to_finish_ && !finished_) {\n      FAIL() << \"The predicate assertion unexpectedly aborted the test.\";\n    } else if (!expected_to_finish_ && finished_) {\n",
                    "rendered": {
                      "text": "    EXPECT_EQ(1, n3_) << \"The predicate assertion didn't evaluate argument 4 \"\n                         \"exactly once.\";\n\n    // Verifies that the control flow in the test function is expected.\n    if (expected_to_finish_ && !finished_) {\n      FAIL() << \"The predicate assertion unexpectedly aborted the test.\";\n    } else if (!expected_to_finish_ && finished_) {\n",
                      "markdown": "`    EXPECT_EQ(1, n3_) << \"The predicate assertion didn't evaluate argument 4 \"\n                         \"exactly once.\";\n\n    // Verifies that the control flow in the test function is expected.\n    if (expected_to_finish_ && !finished_) {\n      FAIL() << \"The predicate assertion unexpectedly aborted the test.\";\n    } else if (!expected_to_finish_ && finished_) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_pred_impl_unittest.cc"
                },
                "region": {
                  "startLine": 506,
                  "startColumn": 24,
                  "endLine": 506,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    EXPECT_EQ(1, n2_) << \"The predicate assertion didn't evaluate argument 3 \"\n                         \"exactly once.\";\n\n    // Verifies that the control flow in the test function is expected.\n    if (expected_to_finish_ && !finished_) {\n      FAIL() << \"The predicate assertion unexpectedly aborted the test.\";\n    } else if (!expected_to_finish_ && finished_) {\n",
                    "rendered": {
                      "text": "    EXPECT_EQ(1, n2_) << \"The predicate assertion didn't evaluate argument 3 \"\n                         \"exactly once.\";\n\n    // Verifies that the control flow in the test function is expected.\n    if (expected_to_finish_ && !finished_) {\n      FAIL() << \"The predicate assertion unexpectedly aborted the test.\";\n    } else if (!expected_to_finish_ && finished_) {\n",
                      "markdown": "`    EXPECT_EQ(1, n2_) << \"The predicate assertion didn't evaluate argument 3 \"\n                         \"exactly once.\";\n\n    // Verifies that the control flow in the test function is expected.\n    if (expected_to_finish_ && !finished_) {\n      FAIL() << \"The predicate assertion unexpectedly aborted the test.\";\n    } else if (!expected_to_finish_ && finished_) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_pred_impl_unittest.cc"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 24,
                  "endLine": 125,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    EXPECT_EQ(1, n1_) << \"The predicate assertion didn't evaluate argument 2 \"\n                         \"exactly once.\";\n\n    // Verifies that the control flow in the test function is expected.\n    if (expected_to_finish_ && !finished_) {\n      FAIL() << \"The predicate assertion unexpectedly aborted the test.\";\n    } else if (!expected_to_finish_ && finished_) {\n",
                    "rendered": {
                      "text": "    EXPECT_EQ(1, n1_) << \"The predicate assertion didn't evaluate argument 2 \"\n                         \"exactly once.\";\n\n    // Verifies that the control flow in the test function is expected.\n    if (expected_to_finish_ && !finished_) {\n      FAIL() << \"The predicate assertion unexpectedly aborted the test.\";\n    } else if (!expected_to_finish_ && finished_) {\n",
                      "markdown": "`    EXPECT_EQ(1, n1_) << \"The predicate assertion didn't evaluate argument 2 \"\n                         \"exactly once.\";\n\n    // Verifies that the control flow in the test function is expected.\n    if (expected_to_finish_ && !finished_) {\n      FAIL() << \"The predicate assertion unexpectedly aborted the test.\";\n    } else if (!expected_to_finish_ && finished_) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_pred_impl_unittest.cc"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 2,
                  "endLine": 44,
                  "endColumn": 8,
                  "snippet": {
                    "text": "//\n// Currently, gtest_unittest takes ~11 seconds to run in the testing\n// daemon.  In the future, if it grows too large and needs much more\n// time to finish, we should consider separating this file into a\n// stand-alone regression test.\n\n#include <iostream>\n",
                    "rendered": {
                      "text": "//\n// Currently, gtest_unittest takes ~11 seconds to run in the testing\n// daemon.  In the future, if it grows too large and needs much more\n// time to finish, we should consider separating this file into a\n// stand-alone regression test.\n\n#include <iostream>\n",
                      "markdown": "`//\n// Currently, gtest_unittest takes ~11 seconds to run in the testing\n// daemon.  In the future, if it grows too large and needs much more\n// time to finish, we should consider separating this file into a\n// stand-alone regression test.\n\n#include <iostream>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_pred_impl_unittest.cc"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 30,
                  "endLine": 32,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n// Regression test for gtest_pred_impl.h\n//\n// This file is generated by a script and quite long.  If you intend to\n// learn how Google Test works by reading its unit tests, read\n// gtest_unittest.cc instead.\n//\n",
                    "rendered": {
                      "text": "\n// Regression test for gtest_pred_impl.h\n//\n// This file is generated by a script and quite long.  If you intend to\n// learn how Google Test works by reading its unit tests, read\n// gtest_unittest.cc instead.\n//\n",
                      "markdown": "`\n// Regression test for gtest_pred_impl.h\n//\n// This file is generated by a script and quite long.  If you intend to\n// learn how Google Test works by reading its unit tests, read\n// gtest_unittest.cc instead.\n//\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 766,
                  "startColumn": 65,
                  "endLine": 766,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    std::string test_name =\n        StripTrailingSpaces(GetPrefixUntilComma(test_names));\n    if (!state->TestExists(test_name)) {\n      fprintf(stderr, \"Failed to get code location for test %s.%s at %s.\",\n              case_name, test_name.c_str(),\n              FormatFileLocation(code_location.file.c_str(), code_location.line)\n                  .c_str());\n",
                    "rendered": {
                      "text": "    std::string test_name =\n        StripTrailingSpaces(GetPrefixUntilComma(test_names));\n    if (!state->TestExists(test_name)) {\n      fprintf(stderr, \"Failed to get code location for test %s.%s at %s.\",\n              case_name, test_name.c_str(),\n              FormatFileLocation(code_location.file.c_str(), code_location.line)\n                  .c_str());\n",
                      "markdown": "`    std::string test_name =\n        StripTrailingSpaces(GetPrefixUntilComma(test_names));\n    if (!state->TestExists(test_name)) {\n      fprintf(stderr, \"Failed to get code location for test %s.%s at %s.\",\n              case_name, test_name.c_str(),\n              FormatFileLocation(code_location.file.c_str(), code_location.line)\n                  .c_str());\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 515,
                  "startColumn": 47,
                  "endLine": 515,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\n    GTEST_CHECK_(!test_case_fp || !test_suite_fp)\n        << \"Test can not provide both SetUpTestSuite and SetUpTestCase, please \"\n           \"make sure there is only one present at \"\n        << filename << \":\" << line_num;\n\n    return test_case_fp != nullptr ? test_case_fp : test_suite_fp;\n",
                    "rendered": {
                      "text": "\n    GTEST_CHECK_(!test_case_fp || !test_suite_fp)\n        << \"Test can not provide both SetUpTestSuite and SetUpTestCase, please \"\n           \"make sure there is only one present at \"\n        << filename << \":\" << line_num;\n\n    return test_case_fp != nullptr ? test_case_fp : test_suite_fp;\n",
                      "markdown": "`\n    GTEST_CHECK_(!test_case_fp || !test_suite_fp)\n        << \"Test can not provide both SetUpTestSuite and SetUpTestCase, please \"\n           \"make sure there is only one present at \"\n        << filename << \":\" << line_num;\n\n    return test_case_fp != nullptr ? test_case_fp : test_suite_fp;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/_sass/main.scss"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 12,
                  "endLine": 78,
                  "endColumn": 16,
                  "snippet": {
                    "text": "  width: 100%;\n}\n\n.sidebar nav ul {\n  list-style-type: none;\n  margin-bottom: 1em;\n  padding: 0;\n",
                    "rendered": {
                      "text": "  width: 100%;\n}\n\n.sidebar nav ul {\n  list-style-type: none;\n  margin-bottom: 1em;\n  padding: 0;\n",
                      "markdown": "`  width: 100%;\n}\n\n.sidebar nav ul {\n  list-style-type: none;\n  margin-bottom: 1em;\n  padding: 0;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/include/gmock/gmock-matchers.h"
                },
                "region": {
                  "startLine": 1147,
                  "startColumn": 37,
                  "endLine": 1147,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    std::string unescaped;\n    if (!internal::Base64Unescape(s2, &unescaped)) {\n      if (listener != nullptr) {\n        *listener << \"is not a valid base64 escaped string\";\n      }\n      return false;\n    }\n",
                    "rendered": {
                      "text": "    std::string unescaped;\n    if (!internal::Base64Unescape(s2, &unescaped)) {\n      if (listener != nullptr) {\n        *listener << \"is not a valid base64 escaped string\";\n      }\n      return false;\n    }\n",
                      "markdown": "`    std::string unescaped;\n    if (!internal::Base64Unescape(s2, &unescaped)) {\n      if (listener != nullptr) {\n        *listener << \"is not a valid base64 escaped string\";\n      }\n      return false;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/include/gmock/gmock-matchers.h"
                },
                "region": {
                  "startLine": 2834,
                  "startColumn": 20,
                  "endLine": 2834,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n  // Describes what this matcher does.\n  void DescribeTo(::std::ostream* os) const override {\n    *os << \"contains at least one element that \";\n    this->inner_matcher_.DescribeTo(os);\n  }\n\n",
                    "rendered": {
                      "text": "\n  // Describes what this matcher does.\n  void DescribeTo(::std::ostream* os) const override {\n    *os << \"contains at least one element that \";\n    this->inner_matcher_.DescribeTo(os);\n  }\n\n",
                      "markdown": "`\n  // Describes what this matcher does.\n  void DescribeTo(::std::ostream* os) const override {\n    *os << \"contains at least one element that \";\n    this->inner_matcher_.DescribeTo(os);\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/include/gmock/gmock-matchers.h"
                },
                "region": {
                  "startLine": 2709,
                  "startColumn": 27,
                  "endLine": 2709,
                  "endColumn": 31,
                  "snippet": {
                    "text": "            UniversalPrint(*left, listener->stream());\n            *listener << \", \";\n            UniversalPrint(*right, listener->stream());\n            *listener << \") at index #\" << i << \" don't match\";\n            PrintIfNotEmpty(inner_listener.str(), listener->stream());\n            return false;\n          }\n",
                    "rendered": {
                      "text": "            UniversalPrint(*left, listener->stream());\n            *listener << \", \";\n            UniversalPrint(*right, listener->stream());\n            *listener << \") at index #\" << i << \" don't match\";\n            PrintIfNotEmpty(inner_listener.str(), listener->stream());\n            return false;\n          }\n",
                      "markdown": "`            UniversalPrint(*left, listener->stream());\n            *listener << \", \";\n            UniversalPrint(*right, listener->stream());\n            *listener << \") at index #\" << i << \" don't match\";\n            PrintIfNotEmpty(inner_listener.str(), listener->stream());\n            return false;\n          }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/include/gmock/gmock-matchers.h"
                },
                "region": {
                  "startLine": 2677,
                  "startColumn": 44,
                  "endLine": 2677,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    }\n    void DescribeNegationTo(::std::ostream* os) const override {\n      *os << \"doesn't contain exactly \" << rhs_.size()\n          << \" values, or contains a value x at some index i\"\n          << \" where x and the i-th value of \";\n      UniversalPrint(rhs_, os);\n      *os << \" \";\n",
                    "rendered": {
                      "text": "    }\n    void DescribeNegationTo(::std::ostream* os) const override {\n      *os << \"doesn't contain exactly \" << rhs_.size()\n          << \" values, or contains a value x at some index i\"\n          << \" where x and the i-th value of \";\n      UniversalPrint(rhs_, os);\n      *os << \" \";\n",
                      "markdown": "`    }\n    void DescribeNegationTo(::std::ostream* os) const override {\n      *os << \"doesn't contain exactly \" << rhs_.size()\n          << \" values, or contains a value x at some index i\"\n          << \" where x and the i-th value of \";\n      UniversalPrint(rhs_, os);\n      *os << \" \";\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/include/gmock/gmock-matchers.h"
                },
                "region": {
                  "startLine": 1362,
                  "startColumn": 49,
                  "endLine": 1362,
                  "endColumn": 53,
                  "snippet": {
                    "text": " public:\n  VariadicMatcher(const Args&... matchers)  // NOLINT\n      : matchers_(matchers...) {\n    static_assert(sizeof...(Args) > 0, \"Must have at least one matcher.\");\n  }\n\n  VariadicMatcher(const VariadicMatcher&) = default;\n",
                    "rendered": {
                      "text": " public:\n  VariadicMatcher(const Args&... matchers)  // NOLINT\n      : matchers_(matchers...) {\n    static_assert(sizeof...(Args) > 0, \"Must have at least one matcher.\");\n  }\n\n  VariadicMatcher(const VariadicMatcher&) = default;\n",
                      "markdown": "` public:\n  VariadicMatcher(const Args&... matchers)  // NOLINT\n      : matchers_(matchers...) {\n    static_assert(sizeof...(Args) > 0, \"Must have at least one matcher.\");\n  }\n\n  VariadicMatcher(const VariadicMatcher&) = default;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/include/gmock/gmock-matchers.h"
                },
                "region": {
                  "startLine": 1746,
                  "startColumn": 37,
                  "endLine": 1746,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        }\n\n        if (listener->IsInterested()) {\n          *listener << \"which is \" << diff << \" from \" << expected_;\n        }\n        return false;\n      } else {\n",
                    "rendered": {
                      "text": "        }\n\n        if (listener->IsInterested()) {\n          *listener << \"which is \" << diff << \" from \" << expected_;\n        }\n        return false;\n      } else {\n",
                      "markdown": "`        }\n\n        if (listener->IsInterested()) {\n          *listener << \"which is \" << diff << \" from \" << expected_;\n        }\n        return false;\n      } else {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/include/gmock/gmock-matchers.h"
                },
                "region": {
                  "startLine": 1740,
                  "startColumn": 23,
                  "endLine": 1740,
                  "endColumn": 29,
                  "snippet": {
                    "text": "          return true;\n        }\n\n        const FloatType diff = value - expected_;\n        if (::std::fabs(diff) <= max_abs_error_) {\n          return true;\n        }\n",
                    "rendered": {
                      "text": "          return true;\n        }\n\n        const FloatType diff = value - expected_;\n        if (::std::fabs(diff) <= max_abs_error_) {\n          return true;\n        }\n",
                      "markdown": "`          return true;\n        }\n\n        const FloatType diff = value - expected_;\n        if (::std::fabs(diff) <= max_abs_error_) {\n          return true;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/include/gmock/gmock-matchers.h"
                },
                "region": {
                  "startLine": 1147,
                  "startColumn": 36,
                  "endLine": 1147,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    std::string unescaped;\n    if (!internal::Base64Unescape(s2, &unescaped)) {\n      if (listener != nullptr) {\n        *listener << \"is not a valid base64 escaped string\";\n      }\n      return false;\n    }\n",
                    "rendered": {
                      "text": "    std::string unescaped;\n    if (!internal::Base64Unescape(s2, &unescaped)) {\n      if (listener != nullptr) {\n        *listener << \"is not a valid base64 escaped string\";\n      }\n      return false;\n    }\n",
                      "markdown": "`    std::string unescaped;\n    if (!internal::Base64Unescape(s2, &unescaped)) {\n      if (listener != nullptr) {\n        *listener << \"is not a valid base64 escaped string\";\n      }\n      return false;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/samples/sample8_unittest.cc"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 57,
                  "endLine": 46,
                  "endColumn": 61,
                  "snippet": {
                    "text": "// OnTheFlyPrimeTable (see prime_tables.h). Inside it instantiates both\n// PrecalcPrimeTable and OnTheFlyPrimeTable and uses the one that is more\n// appropriate under the circumstances. But in low memory conditions, it can be\n// told to instantiate without PrecalcPrimeTable instance at all and use only\n// OnTheFlyPrimeTable.\nclass HybridPrimeTable : public PrimeTable {\n public:\n",
                    "rendered": {
                      "text": "// OnTheFlyPrimeTable (see prime_tables.h). Inside it instantiates both\n// PrecalcPrimeTable and OnTheFlyPrimeTable and uses the one that is more\n// appropriate under the circumstances. But in low memory conditions, it can be\n// told to instantiate without PrecalcPrimeTable instance at all and use only\n// OnTheFlyPrimeTable.\nclass HybridPrimeTable : public PrimeTable {\n public:\n",
                      "markdown": "`// OnTheFlyPrimeTable (see prime_tables.h). Inside it instantiates both\n// PrecalcPrimeTable and OnTheFlyPrimeTable and uses the one that is more\n// appropriate under the circumstances. But in low memory conditions, it can be\n// told to instantiate without PrecalcPrimeTable instance at all and use only\n// OnTheFlyPrimeTable.\nclass HybridPrimeTable : public PrimeTable {\n public:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-filepath.cc"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 11,
                  "endLine": 311,
                  "endColumn": 15,
                  "snippet": {
                    "text": "// that does not already exist.\n// Examples: 'dir/foo_test.xml' or 'dir/foo_test_1.xml'.\n// There could be a race condition if two or more processes are calling this\n// function at the same time -- they could both pick the same filename.\nFilePath FilePath::GenerateUniqueFileName(const FilePath& directory,\n                                          const FilePath& base_name,\n                                          const char* extension) {\n",
                    "rendered": {
                      "text": "// that does not already exist.\n// Examples: 'dir/foo_test.xml' or 'dir/foo_test_1.xml'.\n// There could be a race condition if two or more processes are calling this\n// function at the same time -- they could both pick the same filename.\nFilePath FilePath::GenerateUniqueFileName(const FilePath& directory,\n                                          const FilePath& base_name,\n                                          const char* extension) {\n",
                      "markdown": "`// that does not already exist.\n// Examples: 'dir/foo_test.xml' or 'dir/foo_test_1.xml'.\n// There could be a race condition if two or more processes are calling this\n// function at the same time -- they could both pick the same filename.\nFilePath FilePath::GenerateUniqueFileName(const FilePath& directory,\n                                          const FilePath& base_name,\n                                          const char* extension) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-filepath.cc"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 57,
                  "endLine": 78,
                  "endColumn": 61,
                  "snippet": {
                    "text": "const char kAlternatePathSeparatorString[] = \"/\";\n#ifdef GTEST_OS_WINDOWS_MOBILE\n// Windows CE doesn't have a current directory. You should not use\n// the current directory in tests on Windows CE, but this at least\n// provides a reasonable fallback.\nconst char kCurrentDirectoryString[] = \"\\\\\";\n// Windows CE doesn't define INVALID_FILE_ATTRIBUTES\n",
                    "rendered": {
                      "text": "const char kAlternatePathSeparatorString[] = \"/\";\n#ifdef GTEST_OS_WINDOWS_MOBILE\n// Windows CE doesn't have a current directory. You should not use\n// the current directory in tests on Windows CE, but this at least\n// provides a reasonable fallback.\nconst char kCurrentDirectoryString[] = \"\\\\\";\n// Windows CE doesn't define INVALID_FILE_ATTRIBUTES\n",
                      "markdown": "`const char kAlternatePathSeparatorString[] = \"/\";\n#ifdef GTEST_OS_WINDOWS_MOBILE\n// Windows CE doesn't have a current directory. You should not use\n// the current directory in tests on Windows CE, but this at least\n// provides a reasonable fallback.\nconst char kCurrentDirectoryString[] = \"\\\\\";\n// Windows CE doesn't define INVALID_FILE_ATTRIBUTES\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-filepath.cc"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 23,
                  "endLine": 311,
                  "endColumn": 29,
                  "snippet": {
                    "text": "// that does not already exist.\n// Examples: 'dir/foo_test.xml' or 'dir/foo_test_1.xml'.\n// There could be a race condition if two or more processes are calling this\n// function at the same time -- they could both pick the same filename.\nFilePath FilePath::GenerateUniqueFileName(const FilePath& directory,\n                                          const FilePath& base_name,\n                                          const char* extension) {\n",
                    "rendered": {
                      "text": "// that does not already exist.\n// Examples: 'dir/foo_test.xml' or 'dir/foo_test_1.xml'.\n// There could be a race condition if two or more processes are calling this\n// function at the same time -- they could both pick the same filename.\nFilePath FilePath::GenerateUniqueFileName(const FilePath& directory,\n                                          const FilePath& base_name,\n                                          const char* extension) {\n",
                      "markdown": "`// that does not already exist.\n// Examples: 'dir/foo_test.xml' or 'dir/foo_test_1.xml'.\n// There could be a race condition if two or more processes are calling this\n// function at the same time -- they could both pick the same filename.\nFilePath FilePath::GenerateUniqueFileName(const FilePath& directory,\n                                          const FilePath& base_name,\n                                          const char* extension) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-port.cc"
                },
                "region": {
                  "startLine": 526,
                  "startColumn": 28,
                  "endLine": 526,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                      thread_local_instance->NewValueForCurrentThread())))\n              .first;\n    }\n    return value_pos->second.get();\n  }\n\n  static void OnThreadLocalDestroyed(\n",
                    "rendered": {
                      "text": "                      thread_local_instance->NewValueForCurrentThread())))\n              .first;\n    }\n    return value_pos->second.get();\n  }\n\n  static void OnThreadLocalDestroyed(\n",
                      "markdown": "`                      thread_local_instance->NewValueForCurrentThread())))\n              .first;\n    }\n    return value_pos->second.get();\n  }\n\n  static void OnThreadLocalDestroyed(\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-port.cc"
                },
                "region": {
                  "startLine": 484,
                  "startColumn": 44,
                  "endLine": 484,
                  "endColumn": 49,
                  "snippet": {
                    "text": "ThreadWithParamBase::~ThreadWithParamBase() { Join(); }\n\nvoid ThreadWithParamBase::Join() {\n  GTEST_CHECK_(::WaitForSingleObject(thread_.Get(), INFINITE) == WAIT_OBJECT_0)\n      << \"Failed to join the thread with error \" << ::GetLastError() << \".\";\n}\n\n",
                    "rendered": {
                      "text": "ThreadWithParamBase::~ThreadWithParamBase() { Join(); }\n\nvoid ThreadWithParamBase::Join() {\n  GTEST_CHECK_(::WaitForSingleObject(thread_.Get(), INFINITE) == WAIT_OBJECT_0)\n      << \"Failed to join the thread with error \" << ::GetLastError() << \".\";\n}\n\n",
                      "markdown": "`ThreadWithParamBase::~ThreadWithParamBase() { Join(); }\n\nvoid ThreadWithParamBase::Join() {\n  GTEST_CHECK_(::WaitForSingleObject(thread_.Get(), INFINITE) == WAIT_OBJECT_0)\n      << \"Failed to join the thread with error \" << ::GetLastError() << \".\";\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-port.cc"
                },
                "region": {
                  "startLine": 1414,
                  "startColumn": 30,
                  "endLine": 1414,
                  "endColumn": 46,
                  "snippet": {
                    "text": "// and if it is set we prepend \"xml:\" to its value, if it not set we return \"\"\nstd::string OutputFlagAlsoCheckEnvVar() {\n  std::string default_value_for_output_flag = \"\";\n  const char* xml_output_file_env = posix::GetEnv(\"XML_OUTPUT_FILE\");\n  if (nullptr != xml_output_file_env) {\n    default_value_for_output_flag = std::string(\"xml:\") + xml_output_file_env;\n  }\n",
                    "rendered": {
                      "text": "// and if it is set we prepend \"xml:\" to its value, if it not set we return \"\"\nstd::string OutputFlagAlsoCheckEnvVar() {\n  std::string default_value_for_output_flag = \"\";\n  const char* xml_output_file_env = posix::GetEnv(\"XML_OUTPUT_FILE\");\n  if (nullptr != xml_output_file_env) {\n    default_value_for_output_flag = std::string(\"xml:\") + xml_output_file_env;\n  }\n",
                      "markdown": "`// and if it is set we prepend \"xml:\" to its value, if it not set we return \"\"\nstd::string OutputFlagAlsoCheckEnvVar() {\n  std::string default_value_for_output_flag = \"\";\n  const char* xml_output_file_env = posix::GetEnv(\"XML_OUTPUT_FILE\");\n  if (nullptr != xml_output_file_env) {\n    default_value_for_output_flag = std::string(\"xml:\") + xml_output_file_env;\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-port.cc"
                },
                "region": {
                  "startLine": 1318,
                  "startColumn": 9,
                  "endLine": 1318,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    env_var << ToUpper(full_flag.c_str()[i]);\n  }\n\n  return env_var.GetString();\n}\n\n// Parses 'str' for a 32-bit signed integer.  If successful, writes\n",
                    "rendered": {
                      "text": "    env_var << ToUpper(full_flag.c_str()[i]);\n  }\n\n  return env_var.GetString();\n}\n\n// Parses 'str' for a 32-bit signed integer.  If successful, writes\n",
                      "markdown": "`    env_var << ToUpper(full_flag.c_str()[i]);\n  }\n\n  return env_var.GetString();\n}\n\n// Parses 'str' for a 32-bit signed integer.  If successful, writes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-port.cc"
                },
                "region": {
                  "startLine": 1408,
                  "startColumn": 39,
                  "endLine": 1408,
                  "endColumn": 43,
                  "snippet": {
                    "text": "// set, we look for XML_OUTPUT_FILE, which is set by the Bazel build\n// system.  The value of XML_OUTPUT_FILE is a filename without the\n// \"xml:\" prefix of GTEST_OUTPUT.\n// Note that this is meant to be called at the call site so it does\n// not check that the flag is 'output'\n// In essence this checks an env variable called XML_OUTPUT_FILE\n// and if it is set we prepend \"xml:\" to its value, if it not set we return \"\"\n",
                    "rendered": {
                      "text": "// set, we look for XML_OUTPUT_FILE, which is set by the Bazel build\n// system.  The value of XML_OUTPUT_FILE is a filename without the\n// \"xml:\" prefix of GTEST_OUTPUT.\n// Note that this is meant to be called at the call site so it does\n// not check that the flag is 'output'\n// In essence this checks an env variable called XML_OUTPUT_FILE\n// and if it is set we prepend \"xml:\" to its value, if it not set we return \"\"\n",
                      "markdown": "`// set, we look for XML_OUTPUT_FILE, which is set by the Bazel build\n// system.  The value of XML_OUTPUT_FILE is a filename without the\n// \"xml:\" prefix of GTEST_OUTPUT.\n// Note that this is meant to be called at the call site so it does\n// not check that the flag is 'output'\n// In essence this checks an env variable called XML_OUTPUT_FILE\n// and if it is set we prepend \"xml:\" to its value, if it not set we return \"\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-port.cc"
                },
                "region": {
                  "startLine": 1196,
                  "startColumn": 45,
                  "endLine": 1196,
                  "endColumn": 49,
                  "snippet": {
                    "text": "                          CapturedStream** stream) {\n  if (*stream != nullptr) {\n    GTEST_LOG_(FATAL) << \"Only one \" << stream_name\n                      << \" capturer can exist at a time.\";\n  }\n  *stream = new CapturedStream(fd);\n}\n",
                    "rendered": {
                      "text": "                          CapturedStream** stream) {\n  if (*stream != nullptr) {\n    GTEST_LOG_(FATAL) << \"Only one \" << stream_name\n                      << \" capturer can exist at a time.\";\n  }\n  *stream = new CapturedStream(fd);\n}\n",
                      "markdown": "`                          CapturedStream** stream) {\n  if (*stream != nullptr) {\n    GTEST_LOG_(FATAL) << \"Only one \" << stream_name\n                      << \" capturer can exist at a time.\";\n  }\n  *stream = new CapturedStream(fd);\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-port.cc"
                },
                "region": {
                  "startLine": 1120,
                  "startColumn": 63,
                  "endLine": 1121,
                  "snippet": {
                    "text": "    // _CS_DARWIN_USER_TEMP_DIR (as well as _CS_DARWIN_USER_CACHE_DIR) is not\n    // documented in the confstr() man page at\n    // https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/confstr.3.html#//apple_ref/doc/man/3/confstr\n    // but are still available, according to the WebKit patches at\n    // https://trac.webkit.org/changeset/262004/webkit\n    // https://trac.webkit.org/changeset/263705/webkit\n    //\n    // The confstr() implementation falls back to getenv(\"TMPDIR\"). See\n",
                    "rendered": {
                      "text": "    // _CS_DARWIN_USER_TEMP_DIR (as well as _CS_DARWIN_USER_CACHE_DIR) is not\n    // documented in the confstr() man page at\n    // https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/confstr.3.html#//apple_ref/doc/man/3/confstr\n    // but are still available, according to the WebKit patches at\n    // https://trac.webkit.org/changeset/262004/webkit\n    // https://trac.webkit.org/changeset/263705/webkit\n    //\n    // The confstr() implementation falls back to getenv(\"TMPDIR\"). See\n",
                      "markdown": "`    // _CS_DARWIN_USER_TEMP_DIR (as well as _CS_DARWIN_USER_CACHE_DIR) is not\n    // documented in the confstr() man page at\n    // https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/confstr.3.html#//apple_ref/doc/man/3/confstr\n    // but are still available, according to the WebKit patches at\n    // https://trac.webkit.org/changeset/262004/webkit\n    // https://trac.webkit.org/changeset/263705/webkit\n    //\n    // The confstr() implementation falls back to getenv(\"TMPDIR\"). See\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-port.cc"
                },
                "region": {
                  "startLine": 1118,
                  "startColumn": 43,
                  "endLine": 1119,
                  "snippet": {
                    "text": " at\n    // https://developer.apple.com/library/archive/documentation/Security/Conceptual/SecureCodingGuide/Articles/RaceConditions.html#//apple_ref/doc/uid/TP40002585-SW10\n    //\n    // _CS_DARWIN_USER_TEMP_DIR (as well as _CS_DARWIN_USER_CACHE_DIR) is not\n    // documented in the confstr() man page at\n    // https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/confstr.3.html#//apple_ref/doc/man/3/confstr\n    // but are still available, according to the WebKit patches at\n    // https://trac.webkit.org/changeset/262004/webkit\n    // https://trac.webkit.",
                    "rendered": {
                      "text": " at\n    // https://developer.apple.com/library/archive/documentation/Security/Conceptual/SecureCodingGuide/Articles/RaceConditions.html#//apple_ref/doc/uid/TP40002585-SW10\n    //\n    // _CS_DARWIN_USER_TEMP_DIR (as well as _CS_DARWIN_USER_CACHE_DIR) is not\n    // documented in the confstr() man page at\n    // https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/confstr.3.html#//apple_ref/doc/man/3/confstr\n    // but are still available, according to the WebKit patches at\n    // https://trac.webkit.org/changeset/262004/webkit\n    // https://trac.webkit.",
                      "markdown": "` at\n    // https://developer.apple.com/library/archive/documentation/Security/Conceptual/SecureCodingGuide/Articles/RaceConditions.html#//apple_ref/doc/uid/TP40002585-SW10\n    //\n    // _CS_DARWIN_USER_TEMP_DIR (as well as _CS_DARWIN_USER_CACHE_DIR) is not\n    // documented in the confstr() man page at\n    // https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/confstr.3.html#//apple_ref/doc/man/3/confstr\n    // but are still available, according to the WebKit patches at\n    // https://trac.webkit.org/changeset/262004/webkit\n    // https://trac.webkit.`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-port.cc"
                },
                "region": {
                  "startLine": 1114,
                  "startColumn": 29,
                  "endLine": 1115,
                  "snippet": {
                    "text": "    char user_temp_dir[PATH_MAX + 1];\n\n    // Documented alternative to NSTemporaryDirectory() (for obtaining creating\n    // a temporary directory) at\n    // https://developer.apple.com/library/archive/documentation/Security/Conceptual/SecureCodingGuide/Articles/RaceConditions.html#//apple_ref/doc/uid/TP40002585-SW10\n    //\n    // _CS_DARWIN_USER_TEMP_DIR (as well as _CS_DARWIN_USER_CACHE_DIR) is not\n    // documented in the confstr() man page at\n",
                    "rendered": {
                      "text": "    char user_temp_dir[PATH_MAX + 1];\n\n    // Documented alternative to NSTemporaryDirectory() (for obtaining creating\n    // a temporary directory) at\n    // https://developer.apple.com/library/archive/documentation/Security/Conceptual/SecureCodingGuide/Articles/RaceConditions.html#//apple_ref/doc/uid/TP40002585-SW10\n    //\n    // _CS_DARWIN_USER_TEMP_DIR (as well as _CS_DARWIN_USER_CACHE_DIR) is not\n    // documented in the confstr() man page at\n",
                      "markdown": "`    char user_temp_dir[PATH_MAX + 1];\n\n    // Documented alternative to NSTemporaryDirectory() (for obtaining creating\n    // a temporary directory) at\n    // https://developer.apple.com/library/archive/documentation/Security/Conceptual/SecureCodingGuide/Articles/RaceConditions.html#//apple_ref/doc/uid/TP40002585-SW10\n    //\n    // _CS_DARWIN_USER_TEMP_DIR (as well as _CS_DARWIN_USER_CACHE_DIR) is not\n    // documented in the confstr() man page at\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-port.cc"
                },
                "region": {
                  "startLine": 892,
                  "startColumn": 31,
                  "endLine": 892,
                  "endColumn": 35,
                  "snippet": {
                    "text": "  for (size_t i = 0; i <= max_count; ++i) {\n    // We know that the atom matches each of the first i characters in str.\n    if (i >= min_count && MatchRegexAtHead(regex, str + i)) {\n      // We have enough matches at the head, and the tail matches too.\n      // Since we only care about *whether* the pattern matches str\n      // (as opposed to *how* it matches), there is no need to find a\n      // greedy match.\n",
                    "rendered": {
                      "text": "  for (size_t i = 0; i <= max_count; ++i) {\n    // We know that the atom matches each of the first i characters in str.\n    if (i >= min_count && MatchRegexAtHead(regex, str + i)) {\n      // We have enough matches at the head, and the tail matches too.\n      // Since we only care about *whether* the pattern matches str\n      // (as opposed to *how* it matches), there is no need to find a\n      // greedy match.\n",
                      "markdown": "`  for (size_t i = 0; i <= max_count; ++i) {\n    // We know that the atom matches each of the first i characters in str.\n    if (i >= min_count && MatchRegexAtHead(regex, str + i)) {\n      // We have enough matches at the head, and the tail matches too.\n      // Since we only care about *whether* the pattern matches str\n      // (as opposed to *how* it matches), there is no need to find a\n      // greedy match.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-port.cc"
                },
                "region": {
                  "startLine": 856,
                  "startColumn": 45,
                  "endLine": 856,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        is_valid = false;\n      } else if (ch == '$' && regex[i + 1] != '\\0') {\n        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)\n                      << \"'$' can only appear at the end.\";\n        is_valid = false;\n      } else if (IsInSet(ch, \"()[]{}|\")) {\n        ADD_FAILURE() << FormatRegexSyntaxError(regex, i) << \"'\" << ch\n",
                    "rendered": {
                      "text": "        is_valid = false;\n      } else if (ch == '$' && regex[i + 1] != '\\0') {\n        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)\n                      << \"'$' can only appear at the end.\";\n        is_valid = false;\n      } else if (IsInSet(ch, \"()[]{}|\")) {\n        ADD_FAILURE() << FormatRegexSyntaxError(regex, i) << \"'\" << ch\n",
                      "markdown": "`        is_valid = false;\n      } else if (ch == '$' && regex[i + 1] != '\\0') {\n        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)\n                      << \"'$' can only appear at the end.\";\n        is_valid = false;\n      } else if (IsInSet(ch, \"()[]{}|\")) {\n        ADD_FAILURE() << FormatRegexSyntaxError(regex, i) << \"'\" << ch\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-port.cc"
                },
                "region": {
                  "startLine": 852,
                  "startColumn": 45,
                  "endLine": 852,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n      if (ch == '^' && i > 0) {\n        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)\n                      << \"'^' can only appear at the beginning.\";\n        is_valid = false;\n      } else if (ch == '$' && regex[i + 1] != '\\0') {\n        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)\n",
                    "rendered": {
                      "text": "\n      if (ch == '^' && i > 0) {\n        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)\n                      << \"'^' can only appear at the beginning.\";\n        is_valid = false;\n      } else if (ch == '$' && regex[i + 1] != '\\0') {\n        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)\n",
                      "markdown": "`\n      if (ch == '^' && i > 0) {\n        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)\n                      << \"'^' can only appear at the beginning.\";\n        is_valid = false;\n      } else if (ch == '$' && regex[i + 1] != '\\0') {\n        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-port.cc"
                },
                "region": {
                  "startLine": 837,
                  "startColumn": 44,
                  "endLine": 837,
                  "endColumn": 48,
                  "snippet": {
                    "text": "      i++;\n      if (regex[i] == '\\0') {\n        ADD_FAILURE() << FormatRegexSyntaxError(regex, i - 1)\n                      << \"'\\\\' cannot appear at the end.\";\n        return false;\n      }\n\n",
                    "rendered": {
                      "text": "      i++;\n      if (regex[i] == '\\0') {\n        ADD_FAILURE() << FormatRegexSyntaxError(regex, i - 1)\n                      << \"'\\\\' cannot appear at the end.\";\n        return false;\n      }\n\n",
                      "markdown": "`      i++;\n      if (regex[i] == '\\0') {\n        ADD_FAILURE() << FormatRegexSyntaxError(regex, i - 1)\n                      << \"'\\\\' cannot appear at the end.\";\n        return false;\n      }\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-port.cc"
                },
                "region": {
                  "startLine": 815,
                  "startColumn": 36,
                  "endLine": 815,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n// Helper function used by ValidateRegex() to format error messages.\nstatic std::string FormatRegexSyntaxError(const char* regex, int index) {\n  return (Message() << \"Syntax error at index \" << index\n                    << \" in simple regular expression \\\"\" << regex << \"\\\": \")\n      .GetString();\n}\n",
                    "rendered": {
                      "text": "\n// Helper function used by ValidateRegex() to format error messages.\nstatic std::string FormatRegexSyntaxError(const char* regex, int index) {\n  return (Message() << \"Syntax error at index \" << index\n                    << \" in simple regular expression \\\"\" << regex << \"\\\": \")\n      .GetString();\n}\n",
                      "markdown": "`\n// Helper function used by ValidateRegex() to format error messages.\nstatic std::string FormatRegexSyntaxError(const char* regex, int index) {\n  return (Message() << \"Syntax error at index \" << index\n                    << \" in simple regular expression \\\"\" << regex << \"\\\": \")\n      .GetString();\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-port.cc"
                },
                "region": {
                  "startLine": 738,
                  "startColumn": 48,
                  "endLine": 738,
                  "endColumn": 52,
                  "snippet": {
                    "text": "  // not be properly initialized can may cause trouble when it's\n  // freed.\n  //\n  // Some implementation of POSIX regex (e.g. on at least some\n  // versions of Cygwin) doesn't accept the empty string as a valid\n  // regex.  We change it to an equivalent form \"()\" to be safe.\n  if (is_valid_) {\n",
                    "rendered": {
                      "text": "  // not be properly initialized can may cause trouble when it's\n  // freed.\n  //\n  // Some implementation of POSIX regex (e.g. on at least some\n  // versions of Cygwin) doesn't accept the empty string as a valid\n  // regex.  We change it to an equivalent form \"()\" to be safe.\n  if (is_valid_) {\n",
                      "markdown": "`  // not be properly initialized can may cause trouble when it's\n  // freed.\n  //\n  // Some implementation of POSIX regex (e.g. on at least some\n  // versions of Cygwin) doesn't accept the empty string as a valid\n  // regex.  We change it to an equivalent form \"()\" to be safe.\n  if (is_valid_) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-port.cc"
                },
                "region": {
                  "startLine": 547,
                  "startColumn": 45,
                  "endLine": 547,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        if (value_pos != thread_local_values.end()) {\n          value_holders.push_back(value_pos->second);\n          thread_local_values.erase(value_pos);\n          // This 'if' can only be successful at most once, so theoretically we\n          // could break out of the loop here, but we don't bother doing so.\n        }\n      }\n",
                    "rendered": {
                      "text": "        if (value_pos != thread_local_values.end()) {\n          value_holders.push_back(value_pos->second);\n          thread_local_values.erase(value_pos);\n          // This 'if' can only be successful at most once, so theoretically we\n          // could break out of the loop here, but we don't bother doing so.\n        }\n      }\n",
                      "markdown": "`        if (value_pos != thread_local_values.end()) {\n          value_holders.push_back(value_pos->second);\n          thread_local_values.erase(value_pos);\n          // This 'if' can only be successful at most once, so theoretically we\n          // could break out of the loop here, but we don't bother doing so.\n        }\n      }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-port.cc"
                },
                "region": {
                  "startLine": 1410,
                  "startColumn": 28,
                  "endLine": 1410,
                  "endColumn": 33,
                  "snippet": {
                    "text": "// \"xml:\" prefix of GTEST_OUTPUT.\n// Note that this is meant to be called at the call site so it does\n// not check that the flag is 'output'\n// In essence this checks an env variable called XML_OUTPUT_FILE\n// and if it is set we prepend \"xml:\" to its value, if it not set we return \"\"\nstd::string OutputFlagAlsoCheckEnvVar() {\n  std::string default_value_for_output_flag = \"\";\n",
                    "rendered": {
                      "text": "// \"xml:\" prefix of GTEST_OUTPUT.\n// Note that this is meant to be called at the call site so it does\n// not check that the flag is 'output'\n// In essence this checks an env variable called XML_OUTPUT_FILE\n// and if it is set we prepend \"xml:\" to its value, if it not set we return \"\"\nstd::string OutputFlagAlsoCheckEnvVar() {\n  std::string default_value_for_output_flag = \"\";\n",
                      "markdown": "`// \"xml:\" prefix of GTEST_OUTPUT.\n// Note that this is meant to be called at the call site so it does\n// not check that the flag is 'output'\n// In essence this checks an env variable called XML_OUTPUT_FILE\n// and if it is set we prepend \"xml:\" to its value, if it not set we return \"\"\nstd::string OutputFlagAlsoCheckEnvVar() {\n  std::string default_value_for_output_flag = \"\";\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-port.cc"
                },
                "region": {
                  "startLine": 937,
                  "startColumn": 43,
                  "endLine": 937,
                  "endColumn": 49,
                  "snippet": {
                    "text": "//\n// The algorithm is recursive, but the recursion depth doesn't exceed\n// the regex length, so we won't need to worry about running out of\n// stack space normally.  In rare cases the time complexity can be\n// exponential with respect to the regex length + the string length,\n// but usually it's must faster (often close to linear).\nbool MatchRegexAnywhere(const char* regex, const char* str) {\n",
                    "rendered": {
                      "text": "//\n// The algorithm is recursive, but the recursion depth doesn't exceed\n// the regex length, so we won't need to worry about running out of\n// stack space normally.  In rare cases the time complexity can be\n// exponential with respect to the regex length + the string length,\n// but usually it's must faster (often close to linear).\nbool MatchRegexAnywhere(const char* regex, const char* str) {\n",
                      "markdown": "`//\n// The algorithm is recursive, but the recursion depth doesn't exceed\n// the regex length, so we won't need to worry about running out of\n// stack space normally.  In rare cases the time complexity can be\n// exponential with respect to the regex length + the string length,\n// but usually it's must faster (often close to linear).\nbool MatchRegexAnywhere(const char* regex, const char* str) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-port.cc"
                },
                "region": {
                  "startLine": 894,
                  "startColumn": 62,
                  "endLine": 894,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    if (i >= min_count && MatchRegexAtHead(regex, str + i)) {\n      // We have enough matches at the head, and the tail matches too.\n      // Since we only care about *whether* the pattern matches str\n      // (as opposed to *how* it matches), there is no need to find a\n      // greedy match.\n      return true;\n    }\n",
                    "rendered": {
                      "text": "    if (i >= min_count && MatchRegexAtHead(regex, str + i)) {\n      // We have enough matches at the head, and the tail matches too.\n      // Since we only care about *whether* the pattern matches str\n      // (as opposed to *how* it matches), there is no need to find a\n      // greedy match.\n      return true;\n    }\n",
                      "markdown": "`    if (i >= min_count && MatchRegexAtHead(regex, str + i)) {\n      // We have enough matches at the head, and the tail matches too.\n      // Since we only care about *whether* the pattern matches str\n      // (as opposed to *how* it matches), there is no need to find a\n      // greedy match.\n      return true;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-port.cc"
                },
                "region": {
                  "startLine": 892,
                  "startColumn": 52,
                  "endLine": 892,
                  "endColumn": 58,
                  "snippet": {
                    "text": "  for (size_t i = 0; i <= max_count; ++i) {\n    // We know that the atom matches each of the first i characters in str.\n    if (i >= min_count && MatchRegexAtHead(regex, str + i)) {\n      // We have enough matches at the head, and the tail matches too.\n      // Since we only care about *whether* the pattern matches str\n      // (as opposed to *how* it matches), there is no need to find a\n      // greedy match.\n",
                    "rendered": {
                      "text": "  for (size_t i = 0; i <= max_count; ++i) {\n    // We know that the atom matches each of the first i characters in str.\n    if (i >= min_count && MatchRegexAtHead(regex, str + i)) {\n      // We have enough matches at the head, and the tail matches too.\n      // Since we only care about *whether* the pattern matches str\n      // (as opposed to *how* it matches), there is no need to find a\n      // greedy match.\n",
                      "markdown": "`  for (size_t i = 0; i <= max_count; ++i) {\n    // We know that the atom matches each of the first i characters in str.\n    if (i >= min_count && MatchRegexAtHead(regex, str + i)) {\n      // We have enough matches at the head, and the tail matches too.\n      // Since we only care about *whether* the pattern matches str\n      // (as opposed to *how* it matches), there is no need to find a\n      // greedy match.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-port.cc"
                },
                "region": {
                  "startLine": 880,
                  "startColumn": 11,
                  "endLine": 880,
                  "endColumn": 17,
                  "snippet": {
                    "text": "// or \\c otherwise.  repeat is the repetition meta character (?, *,\n// or +).  The behavior is undefined if str contains too many\n// characters to be indexable by size_t, in which case the test will\n// probably time out anyway.  We are fine with this limitation as\n// std::string has it too.\nbool MatchRepetitionAndRegexAtHead(bool escaped, char c, char repeat,\n                                   const char* regex, const char* str) {\n",
                    "rendered": {
                      "text": "// or \\c otherwise.  repeat is the repetition meta character (?, *,\n// or +).  The behavior is undefined if str contains too many\n// characters to be indexable by size_t, in which case the test will\n// probably time out anyway.  We are fine with this limitation as\n// std::string has it too.\nbool MatchRepetitionAndRegexAtHead(bool escaped, char c, char repeat,\n                                   const char* regex, const char* str) {\n",
                      "markdown": "`// or \\c otherwise.  repeat is the repetition meta character (?, *,\n// or +).  The behavior is undefined if str contains too many\n// characters to be indexable by size_t, in which case the test will\n// probably time out anyway.  We are fine with this limitation as\n// std::string has it too.\nbool MatchRepetitionAndRegexAtHead(bool escaped, char c, char repeat,\n                                   const char* regex, const char* str) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-port.cc"
                },
                "region": {
                  "startLine": 716,
                  "startColumn": 50,
                  "endLine": 716,
                  "endColumn": 56,
                  "snippet": {
                    "text": "  pattern_ = regex;\n\n  // NetBSD (and Android, which takes its regex implemntation from NetBSD) does\n  // not include the GNU regex extensions (such as Perl style character classes\n  // like \\w) in REG_EXTENDED. REG_EXTENDED is only specified to include the\n  // [[:alpha:]] style character classes. Enable REG_GNU wherever it is defined\n  // so users can use those extensions.\n",
                    "rendered": {
                      "text": "  pattern_ = regex;\n\n  // NetBSD (and Android, which takes its regex implemntation from NetBSD) does\n  // not include the GNU regex extensions (such as Perl style character classes\n  // like \\w) in REG_EXTENDED. REG_EXTENDED is only specified to include the\n  // [[:alpha:]] style character classes. Enable REG_GNU wherever it is defined\n  // so users can use those extensions.\n",
                      "markdown": "`  pattern_ = regex;\n\n  // NetBSD (and Android, which takes its regex implemntation from NetBSD) does\n  // not include the GNU regex extensions (such as Perl style character classes\n  // like \\w) in REG_EXTENDED. REG_EXTENDED is only specified to include the\n  // [[:alpha:]] style character classes. Enable REG_GNU wherever it is defined\n  // so users can use those extensions.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-port.cc"
                },
                "region": {
                  "startLine": 409,
                  "startColumn": 53,
                  "endLine": 409,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        // are done.\n        while (::InterlockedCompareExchange(&critical_section_init_phase_, 2L,\n                                            2L) != 2L) {\n          // Possibly yields the rest of the thread's time slice to other\n          // threads.\n          ::Sleep(0);\n        }\n",
                    "rendered": {
                      "text": "        // are done.\n        while (::InterlockedCompareExchange(&critical_section_init_phase_, 2L,\n                                            2L) != 2L) {\n          // Possibly yields the rest of the thread's time slice to other\n          // threads.\n          ::Sleep(0);\n        }\n",
                      "markdown": "`        // are done.\n        while (::InterlockedCompareExchange(&critical_section_init_phase_, 2L,\n                                            2L) != 2L) {\n          // Possibly yields the rest of the thread's time slice to other\n          // threads.\n          ::Sleep(0);\n        }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-printers.cc"
                },
                "region": {
                  "startLine": 418,
                  "startColumn": 61,
                  "endLine": 418,
                  "endColumn": 65,
                  "snippet": {
                    "text": "  UniversalPrintCharArray(begin, len, os);\n}\n\n// Prints a (const) wchar_t array of 'len' elements, starting at address\n// 'begin'.\nvoid UniversalPrintArray(const wchar_t* begin, size_t len, ostream* os) {\n  UniversalPrintCharArray(begin, len, os);\n",
                    "rendered": {
                      "text": "  UniversalPrintCharArray(begin, len, os);\n}\n\n// Prints a (const) wchar_t array of 'len' elements, starting at address\n// 'begin'.\nvoid UniversalPrintArray(const wchar_t* begin, size_t len, ostream* os) {\n  UniversalPrintCharArray(begin, len, os);\n",
                      "markdown": "`  UniversalPrintCharArray(begin, len, os);\n}\n\n// Prints a (const) wchar_t array of 'len' elements, starting at address\n// 'begin'.\nvoid UniversalPrintArray(const wchar_t* begin, size_t len, ostream* os) {\n  UniversalPrintCharArray(begin, len, os);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-printers.cc"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 62,
                  "endLine": 412,
                  "endColumn": 66,
                  "snippet": {
                    "text": "  UniversalPrintCharArray(begin, len, os);\n}\n\n// Prints a (const) char32_t array of 'len' elements, starting at address\n// 'begin'.\nvoid UniversalPrintArray(const char32_t* begin, size_t len, ostream* os) {\n  UniversalPrintCharArray(begin, len, os);\n",
                    "rendered": {
                      "text": "  UniversalPrintCharArray(begin, len, os);\n}\n\n// Prints a (const) char32_t array of 'len' elements, starting at address\n// 'begin'.\nvoid UniversalPrintArray(const char32_t* begin, size_t len, ostream* os) {\n  UniversalPrintCharArray(begin, len, os);\n",
                      "markdown": "`  UniversalPrintCharArray(begin, len, os);\n}\n\n// Prints a (const) char32_t array of 'len' elements, starting at address\n// 'begin'.\nvoid UniversalPrintArray(const char32_t* begin, size_t len, ostream* os) {\n  UniversalPrintCharArray(begin, len, os);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-printers.cc"
                },
                "region": {
                  "startLine": 406,
                  "startColumn": 62,
                  "endLine": 406,
                  "endColumn": 66,
                  "snippet": {
                    "text": "}\n#endif\n\n// Prints a (const) char16_t array of 'len' elements, starting at address\n// 'begin'.\nvoid UniversalPrintArray(const char16_t* begin, size_t len, ostream* os) {\n  UniversalPrintCharArray(begin, len, os);\n",
                    "rendered": {
                      "text": "}\n#endif\n\n// Prints a (const) char16_t array of 'len' elements, starting at address\n// 'begin'.\nvoid UniversalPrintArray(const char16_t* begin, size_t len, ostream* os) {\n  UniversalPrintCharArray(begin, len, os);\n",
                      "markdown": "`}\n#endif\n\n// Prints a (const) char16_t array of 'len' elements, starting at address\n// 'begin'.\nvoid UniversalPrintArray(const char16_t* begin, size_t len, ostream* os) {\n  UniversalPrintCharArray(begin, len, os);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-printers.cc"
                },
                "region": {
                  "startLine": 399,
                  "startColumn": 61,
                  "endLine": 399,
                  "endColumn": 65,
                  "snippet": {
                    "text": "}\n\n#ifdef __cpp_lib_char8_t\n// Prints a (const) char8_t array of 'len' elements, starting at address\n// 'begin'.\nvoid UniversalPrintArray(const char8_t* begin, size_t len, ostream* os) {\n  UniversalPrintCharArray(begin, len, os);\n",
                    "rendered": {
                      "text": "}\n\n#ifdef __cpp_lib_char8_t\n// Prints a (const) char8_t array of 'len' elements, starting at address\n// 'begin'.\nvoid UniversalPrintArray(const char8_t* begin, size_t len, ostream* os) {\n  UniversalPrintCharArray(begin, len, os);\n",
                      "markdown": "`}\n\n#ifdef __cpp_lib_char8_t\n// Prints a (const) char8_t array of 'len' elements, starting at address\n// 'begin'.\nvoid UniversalPrintArray(const char8_t* begin, size_t len, ostream* os) {\n  UniversalPrintCharArray(begin, len, os);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-printers.cc"
                },
                "region": {
                  "startLine": 393,
                  "startColumn": 58,
                  "endLine": 393,
                  "endColumn": 62,
                  "snippet": {
                    "text": "  *os << \" (no terminating NUL)\";\n}\n\n// Prints a (const) char array of 'len' elements, starting at address 'begin'.\nvoid UniversalPrintArray(const char* begin, size_t len, ostream* os) {\n  UniversalPrintCharArray(begin, len, os);\n}\n",
                    "rendered": {
                      "text": "  *os << \" (no terminating NUL)\";\n}\n\n// Prints a (const) char array of 'len' elements, starting at address 'begin'.\nvoid UniversalPrintArray(const char* begin, size_t len, ostream* os) {\n  UniversalPrintCharArray(begin, len, os);\n}\n",
                      "markdown": "`  *os << \" (no terminating NUL)\";\n}\n\n// Prints a (const) char array of 'len' elements, starting at address 'begin'.\nvoid UniversalPrintArray(const char* begin, size_t len, ostream* os) {\n  UniversalPrintCharArray(begin, len, os);\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-printers.cc"
                },
                "region": {
                  "startLine": 365,
                  "startColumn": 66,
                  "endLine": 365,
                  "endColumn": 70,
                  "snippet": {
                    "text": "  return print_format;\n}\n\n// Prints a (const) char/wchar_t array of 'len' elements, starting at address\n// 'begin'.  CharType must be either char or wchar_t.\ntemplate <typename CharType>\nGTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_ GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_\n",
                    "rendered": {
                      "text": "  return print_format;\n}\n\n// Prints a (const) char/wchar_t array of 'len' elements, starting at address\n// 'begin'.  CharType must be either char or wchar_t.\ntemplate <typename CharType>\nGTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_ GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_\n",
                      "markdown": "`  return print_format;\n}\n\n// Prints a (const) char/wchar_t array of 'len' elements, starting at address\n// 'begin'.  CharType must be either char or wchar_t.\ntemplate <typename CharType>\nGTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_ GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-printers.cc"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 19,
                  "endLine": 336,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n// Prints the given array of characters to the ostream.  CharType must be either\n// char, char8_t, char16_t, char32_t, or wchar_t.\n// The array starts at begin, the length is len, it may include '\\0' characters\n// and may not be NUL-terminated.\ntemplate <typename CharType>\nGTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_ GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_\n",
                    "rendered": {
                      "text": "\n// Prints the given array of characters to the ostream.  CharType must be either\n// char, char8_t, char16_t, char32_t, or wchar_t.\n// The array starts at begin, the length is len, it may include '\\0' characters\n// and may not be NUL-terminated.\ntemplate <typename CharType>\nGTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_ GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_\n",
                      "markdown": "`\n// Prints the given array of characters to the ostream.  CharType must be either\n// char, char8_t, char16_t, char32_t, or wchar_t.\n// The array starts at begin, the length is len, it may include '\\0' characters\n// and may not be NUL-terminated.\ntemplate <typename CharType>\nGTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_ GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-test-part.cc"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 29,
                  "endLine": 69,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  array_.push_back(result);\n}\n\n// Returns the TestPartResult at the given index (0-based).\nconst TestPartResult& TestPartResultArray::GetTestPartResult(int index) const {\n  if (index < 0 || index >= size()) {\n    printf(\"\\nInvalid index (%d) into TestPartResultArray.\\n\", index);\n",
                    "rendered": {
                      "text": "  array_.push_back(result);\n}\n\n// Returns the TestPartResult at the given index (0-based).\nconst TestPartResult& TestPartResultArray::GetTestPartResult(int index) const {\n  if (index < 0 || index >= size()) {\n    printf(\"\\nInvalid index (%d) into TestPartResultArray.\\n\", index);\n",
                      "markdown": "`  array_.push_back(result);\n}\n\n// Returns the TestPartResult at the given index (0-based).\nconst TestPartResult& TestPartResultArray::GetTestPartResult(int index) const {\n  if (index < 0 || index >= size()) {\n    printf(\"\\nInvalid index (%d) into TestPartResultArray.\\n\", index);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-death-test.cc"
                },
                "region": {
                  "startLine": 1505,
                  "startColumn": 46,
                  "endLine": 1505,
                  "endColumn": 51,
                  "snippet": {
                    "text": "  const HANDLE event_handle = reinterpret_cast<HANDLE>(event_handle_as_size_t);\n  HANDLE dup_event_handle;\n\n  if (!::DuplicateHandle(parent_process_handle.Get(), event_handle,\n                         ::GetCurrentProcess(), &dup_event_handle, 0x0, FALSE,\n                         DUPLICATE_SAME_ACCESS)) {\n    DeathTestAbort(\"Unable to duplicate the event handle \" +\n",
                    "rendered": {
                      "text": "  const HANDLE event_handle = reinterpret_cast<HANDLE>(event_handle_as_size_t);\n  HANDLE dup_event_handle;\n\n  if (!::DuplicateHandle(parent_process_handle.Get(), event_handle,\n                         ::GetCurrentProcess(), &dup_event_handle, 0x0, FALSE,\n                         DUPLICATE_SAME_ACCESS)) {\n    DeathTestAbort(\"Unable to duplicate the event handle \" +\n",
                      "markdown": "`  const HANDLE event_handle = reinterpret_cast<HANDLE>(event_handle_as_size_t);\n  HANDLE dup_event_handle;\n\n  if (!::DuplicateHandle(parent_process_handle.Get(), event_handle,\n                         ::GetCurrentProcess(), &dup_event_handle, 0x0, FALSE,\n                         DUPLICATE_SAME_ACCESS)) {\n    DeathTestAbort(\"Unable to duplicate the event handle \" +\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-death-test.cc"
                },
                "region": {
                  "startLine": 1490,
                  "startColumn": 46,
                  "endLine": 1490,
                  "endColumn": 51,
                  "snippet": {
                    "text": "  // The newly initialized handle is accessible only in the parent\n  // process. To obtain one accessible within the child, we need to use\n  // DuplicateHandle.\n  if (!::DuplicateHandle(parent_process_handle.Get(), write_handle,\n                         ::GetCurrentProcess(), &dup_write_handle,\n                         0x0,    // Requested privileges ignored since\n                                 // DUPLICATE_SAME_ACCESS is used.\n",
                    "rendered": {
                      "text": "  // The newly initialized handle is accessible only in the parent\n  // process. To obtain one accessible within the child, we need to use\n  // DuplicateHandle.\n  if (!::DuplicateHandle(parent_process_handle.Get(), write_handle,\n                         ::GetCurrentProcess(), &dup_write_handle,\n                         0x0,    // Requested privileges ignored since\n                                 // DUPLICATE_SAME_ACCESS is used.\n",
                      "markdown": "`  // The newly initialized handle is accessible only in the parent\n  // process. To obtain one accessible within the child, we need to use\n  // DuplicateHandle.\n  if (!::DuplicateHandle(parent_process_handle.Get(), write_handle,\n                         ::GetCurrentProcess(), &dup_write_handle,\n                         0x0,    // Requested privileges ignored since\n                                 // DUPLICATE_SAME_ACCESS is used.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-death-test.cc"
                },
                "region": {
                  "startLine": 1477,
                  "startColumn": 27,
                  "endLine": 1477,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  AutoHandle parent_process_handle(::OpenProcess(PROCESS_DUP_HANDLE,\n                                                 FALSE,  // Non-inheritable.\n                                                 parent_process_id));\n  if (parent_process_handle.Get() == INVALID_HANDLE_VALUE) {\n    DeathTestAbort(\"Unable to open parent process \" +\n                   StreamableToString(parent_process_id));\n  }\n",
                    "rendered": {
                      "text": "  AutoHandle parent_process_handle(::OpenProcess(PROCESS_DUP_HANDLE,\n                                                 FALSE,  // Non-inheritable.\n                                                 parent_process_id));\n  if (parent_process_handle.Get() == INVALID_HANDLE_VALUE) {\n    DeathTestAbort(\"Unable to open parent process \" +\n                   StreamableToString(parent_process_id));\n  }\n",
                      "markdown": "`  AutoHandle parent_process_handle(::OpenProcess(PROCESS_DUP_HANDLE,\n                                                 FALSE,  // Non-inheritable.\n                                                 parent_process_id));\n  if (parent_process_handle.Get() == INVALID_HANDLE_VALUE) {\n    DeathTestAbort(\"Unable to open parent process \" +\n                   StreamableToString(parent_process_id));\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-death-test.cc"
                },
                "region": {
                  "startLine": 790,
                  "startColumn": 63,
                  "endLine": 790,
                  "endColumn": 68,
                  "snippet": {
                    "text": "      // Windows platforms.\n      // See https://msdn.microsoft.com/en-us/library/tcxf1dw6.aspx.\n      \"|\" + StreamableToString(reinterpret_cast<size_t>(write_handle)) + \"|\" +\n      StreamableToString(reinterpret_cast<size_t>(event_handle_.Get()));\n\n  char executable_path[_MAX_PATH + 1];  // NOLINT\n  GTEST_DEATH_TEST_CHECK_(_MAX_PATH + 1 != ::GetModuleFileNameA(nullptr,\n",
                    "rendered": {
                      "text": "      // Windows platforms.\n      // See https://msdn.microsoft.com/en-us/library/tcxf1dw6.aspx.\n      \"|\" + StreamableToString(reinterpret_cast<size_t>(write_handle)) + \"|\" +\n      StreamableToString(reinterpret_cast<size_t>(event_handle_.Get()));\n\n  char executable_path[_MAX_PATH + 1];  // NOLINT\n  GTEST_DEATH_TEST_CHECK_(_MAX_PATH + 1 != ::GetModuleFileNameA(nullptr,\n",
                      "markdown": "`      // Windows platforms.\n      // See https://msdn.microsoft.com/en-us/library/tcxf1dw6.aspx.\n      \"|\" + StreamableToString(reinterpret_cast<size_t>(write_handle)) + \"|\" +\n      StreamableToString(reinterpret_cast<size_t>(event_handle_.Get()));\n\n  char executable_path[_MAX_PATH + 1];  // NOLINT\n  GTEST_DEATH_TEST_CHECK_(_MAX_PATH + 1 != ::GetModuleFileNameA(nullptr,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-death-test.cc"
                },
                "region": {
                  "startLine": 777,
                  "startColumn": 39,
                  "endLine": 777,
                  "endColumn": 44,
                  "snippet": {
                    "text": "      TRUE,       // The event will automatically reset to non-signaled state.\n      FALSE,      // The initial state is non-signalled.\n      nullptr));  // The even is unnamed.\n  GTEST_DEATH_TEST_CHECK_(event_handle_.Get() != nullptr);\n  const std::string filter_flag = std::string(\"--\") + GTEST_FLAG_PREFIX_ +\n                                  \"filter=\" + info->test_suite_name() + \".\" +\n                                  info->name();\n",
                    "rendered": {
                      "text": "      TRUE,       // The event will automatically reset to non-signaled state.\n      FALSE,      // The initial state is non-signalled.\n      nullptr));  // The even is unnamed.\n  GTEST_DEATH_TEST_CHECK_(event_handle_.Get() != nullptr);\n  const std::string filter_flag = std::string(\"--\") + GTEST_FLAG_PREFIX_ +\n                                  \"filter=\" + info->test_suite_name() + \".\" +\n                                  info->name();\n",
                      "markdown": "`      TRUE,       // The event will automatically reset to non-signaled state.\n      FALSE,      // The initial state is non-signalled.\n      nullptr));  // The even is unnamed.\n  GTEST_DEATH_TEST_CHECK_(event_handle_.Get() != nullptr);\n  const std::string filter_flag = std::string(\"--\") + GTEST_FLAG_PREFIX_ +\n                                  \"filter=\" + info->test_suite_name() + \".\" +\n                                  info->name();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-death-test.cc"
                },
                "region": {
                  "startLine": 735,
                  "startColumn": 40,
                  "endLine": 735,
                  "endColumn": 45,
                  "snippet": {
                    "text": "                          ::WaitForSingleObject(child_handle_.Get(), INFINITE));\n  DWORD status_code;\n  GTEST_DEATH_TEST_CHECK_(\n      ::GetExitCodeProcess(child_handle_.Get(), &status_code) != FALSE);\n  child_handle_.Reset();\n  set_status(static_cast<int>(status_code));\n  return status();\n",
                    "rendered": {
                      "text": "                          ::WaitForSingleObject(child_handle_.Get(), INFINITE));\n  DWORD status_code;\n  GTEST_DEATH_TEST_CHECK_(\n      ::GetExitCodeProcess(child_handle_.Get(), &status_code) != FALSE);\n  child_handle_.Reset();\n  set_status(static_cast<int>(status_code));\n  return status();\n",
                      "markdown": "`                          ::WaitForSingleObject(child_handle_.Get(), INFINITE));\n  DWORD status_code;\n  GTEST_DEATH_TEST_CHECK_(\n      ::GetExitCodeProcess(child_handle_.Get(), &status_code) != FALSE);\n  child_handle_.Reset();\n  set_status(static_cast<int>(status_code));\n  return status();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-death-test.cc"
                },
                "region": {
                  "startLine": 732,
                  "startColumn": 61,
                  "endLine": 732,
                  "endColumn": 66,
                  "snippet": {
                    "text": "  // whether previous calls to WaitForMultipleObjects synchronized on this\n  // handle or not.\n  GTEST_DEATH_TEST_CHECK_(WAIT_OBJECT_0 ==\n                          ::WaitForSingleObject(child_handle_.Get(), INFINITE));\n  DWORD status_code;\n  GTEST_DEATH_TEST_CHECK_(\n      ::GetExitCodeProcess(child_handle_.Get(), &status_code) != FALSE);\n",
                    "rendered": {
                      "text": "  // whether previous calls to WaitForMultipleObjects synchronized on this\n  // handle or not.\n  GTEST_DEATH_TEST_CHECK_(WAIT_OBJECT_0 ==\n                          ::WaitForSingleObject(child_handle_.Get(), INFINITE));\n  DWORD status_code;\n  GTEST_DEATH_TEST_CHECK_(\n      ::GetExitCodeProcess(child_handle_.Get(), &status_code) != FALSE);\n",
                      "markdown": "`  // whether previous calls to WaitForMultipleObjects synchronized on this\n  // handle or not.\n  GTEST_DEATH_TEST_CHECK_(WAIT_OBJECT_0 ==\n                          ::WaitForSingleObject(child_handle_.Get(), INFINITE));\n  DWORD status_code;\n  GTEST_DEATH_TEST_CHECK_(\n      ::GetExitCodeProcess(child_handle_.Get(), &status_code) != FALSE);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-death-test.cc"
                },
                "region": {
                  "startLine": 709,
                  "startColumn": 68,
                  "endLine": 709,
                  "endColumn": 73,
                  "snippet": {
                    "text": "\n  // Wait until the child either signals that it has acquired the write end\n  // of the pipe or it dies.\n  const HANDLE wait_handles[2] = {child_handle_.Get(), event_handle_.Get()};\n  switch (::WaitForMultipleObjects(2, wait_handles,\n                                   FALSE,  // Waits for any of the handles.\n                                   INFINITE)) {\n",
                    "rendered": {
                      "text": "\n  // Wait until the child either signals that it has acquired the write end\n  // of the pipe or it dies.\n  const HANDLE wait_handles[2] = {child_handle_.Get(), event_handle_.Get()};\n  switch (::WaitForMultipleObjects(2, wait_handles,\n                                   FALSE,  // Waits for any of the handles.\n                                   INFINITE)) {\n",
                      "markdown": "`\n  // Wait until the child either signals that it has acquired the write end\n  // of the pipe or it dies.\n  const HANDLE wait_handles[2] = {child_handle_.Get(), event_handle_.Get()};\n  switch (::WaitForMultipleObjects(2, wait_handles,\n                                   FALSE,  // Waits for any of the handles.\n                                   INFINITE)) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-death-test.cc"
                },
                "region": {
                  "startLine": 709,
                  "startColumn": 47,
                  "endLine": 709,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n  // Wait until the child either signals that it has acquired the write end\n  // of the pipe or it dies.\n  const HANDLE wait_handles[2] = {child_handle_.Get(), event_handle_.Get()};\n  switch (::WaitForMultipleObjects(2, wait_handles,\n                                   FALSE,  // Waits for any of the handles.\n                                   INFINITE)) {\n",
                    "rendered": {
                      "text": "\n  // Wait until the child either signals that it has acquired the write end\n  // of the pipe or it dies.\n  const HANDLE wait_handles[2] = {child_handle_.Get(), event_handle_.Get()};\n  switch (::WaitForMultipleObjects(2, wait_handles,\n                                   FALSE,  // Waits for any of the handles.\n                                   INFINITE)) {\n",
                      "markdown": "`\n  // Wait until the child either signals that it has acquired the write end\n  // of the pipe or it dies.\n  const HANDLE wait_handles[2] = {child_handle_.Get(), event_handle_.Get()};\n  switch (::WaitForMultipleObjects(2, wait_handles,\n                                   FALSE,  // Waits for any of the handles.\n                                   INFINITE)) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-death-test.cc"
                },
                "region": {
                  "startLine": 1253,
                  "startColumn": 38,
                  "endLine": 1253,
                  "endColumn": 64,
                  "snippet": {
                    "text": "// a thread-safe manner and instructs it to run the death test.  The\n// implementation uses fork(2) + exec.  On systems where clone(2) is\n// available, it is used instead, being slightly more thread-safe.  On QNX,\n// fork supports only single-threaded environments, so this function uses\n// spawn(2) there instead.  The function dies with an error message if\n// anything goes wrong.\nstatic pid_t ExecDeathTestSpawnChild(char* const* argv, int close_fd) {\n",
                    "rendered": {
                      "text": "// a thread-safe manner and instructs it to run the death test.  The\n// implementation uses fork(2) + exec.  On systems where clone(2) is\n// available, it is used instead, being slightly more thread-safe.  On QNX,\n// fork supports only single-threaded environments, so this function uses\n// spawn(2) there instead.  The function dies with an error message if\n// anything goes wrong.\nstatic pid_t ExecDeathTestSpawnChild(char* const* argv, int close_fd) {\n",
                      "markdown": "`// a thread-safe manner and instructs it to run the death test.  The\n// implementation uses fork(2) + exec.  On systems where clone(2) is\n// available, it is used instead, being slightly more thread-safe.  On QNX,\n// fork supports only single-threaded environments, so this function uses\n// spawn(2) there instead.  The function dies with an error message if\n// anything goes wrong.\nstatic pid_t ExecDeathTestSpawnChild(char* const* argv, int close_fd) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-death-test.cc"
                },
                "region": {
                  "startLine": 1204,
                  "startColumn": 59,
                  "endLine": 1204,
                  "endColumn": 63,
                  "snippet": {
                    "text": "  // We can safely call execv() as it's almost a direct system call. We\n  // cannot use execvp() as it's a libc function and thus potentially\n  // unsafe.  Since execv() doesn't search the PATH, the user must\n  // invoke the test program via a valid path that contains at least\n  // one path separator.\n  execv(args->argv[0], args->argv);\n  DeathTestAbort(std::string(\"execv(\") + args->argv[0] + \", ...) in \" +\n",
                    "rendered": {
                      "text": "  // We can safely call execv() as it's almost a direct system call. We\n  // cannot use execvp() as it's a libc function and thus potentially\n  // unsafe.  Since execv() doesn't search the PATH, the user must\n  // invoke the test program via a valid path that contains at least\n  // one path separator.\n  execv(args->argv[0], args->argv);\n  DeathTestAbort(std::string(\"execv(\") + args->argv[0] + \", ...) in \" +\n",
                      "markdown": "`  // We can safely call execv() as it's almost a direct system call. We\n  // cannot use execvp() as it's a libc function and thus potentially\n  // unsafe.  Since execv() doesn't search the PATH, the user must\n  // invoke the test program via a valid path that contains at least\n  // one path separator.\n  execv(args->argv[0], args->argv);\n  DeathTestAbort(std::string(\"execv(\") + args->argv[0] + \", ...) in \" +\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-death-test.cc"
                },
                "region": {
                  "startLine": 550,
                  "startColumn": 3,
                  "endLine": 550,
                  "endColumn": 7,
                  "snippet": {
                    "text": "      break;\n    }\n    ret += output.substr(at, line_end + 1 - at);\n    at = line_end + 1;\n  }\n  return ret;\n}\n",
                    "rendered": {
                      "text": "      break;\n    }\n    ret += output.substr(at, line_end + 1 - at);\n    at = line_end + 1;\n  }\n  return ret;\n}\n",
                      "markdown": "`      break;\n    }\n    ret += output.substr(at, line_end + 1 - at);\n    at = line_end + 1;\n  }\n  return ret;\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-death-test.cc"
                },
                "region": {
                  "startLine": 542,
                  "startColumn": 13,
                  "endLine": 542,
                  "endColumn": 17,
                  "snippet": {
                    "text": "// much easier.\nstatic ::std::string FormatDeathTestOutput(const ::std::string& output) {\n  ::std::string ret;\n  for (size_t at = 0;;) {\n    const size_t line_end = output.find('\\n', at);\n    ret += \"[  DEATH   ] \";\n    if (line_end == ::std::string::npos) {\n",
                    "rendered": {
                      "text": "// much easier.\nstatic ::std::string FormatDeathTestOutput(const ::std::string& output) {\n  ::std::string ret;\n  for (size_t at = 0;;) {\n    const size_t line_end = output.find('\\n', at);\n    ret += \"[  DEATH   ] \";\n    if (line_end == ::std::string::npos) {\n",
                      "markdown": "`// much easier.\nstatic ::std::string FormatDeathTestOutput(const ::std::string& output) {\n  ::std::string ret;\n  for (size_t at = 0;;) {\n    const size_t line_end = output.find('\\n', at);\n    ret += \"[  DEATH   ] \";\n    if (line_end == ::std::string::npos) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-death-test.cc"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 11,
                  "endLine": 284,
                  "endColumn": 20,
                  "snippet": {
                    "text": "// code; LIVED means that process lived beyond the end of the test code;\n// RETURNED means that the test statement attempted to execute a return\n// statement, which is not allowed; THREW means that the test statement\n// returned control by throwing an exception.  IN_PROGRESS means the test\n// has not yet concluded.\nenum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };\n\n",
                    "rendered": {
                      "text": "// code; LIVED means that process lived beyond the end of the test code;\n// RETURNED means that the test statement attempted to execute a return\n// statement, which is not allowed; THREW means that the test statement\n// returned control by throwing an exception.  IN_PROGRESS means the test\n// has not yet concluded.\nenum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };\n\n",
                      "markdown": "`// code; LIVED means that process lived beyond the end of the test code;\n// RETURNED means that the test statement attempted to execute a return\n// statement, which is not allowed; THREW means that the test statement\n// returned control by throwing an exception.  IN_PROGRESS means the test\n// has not yet concluded.\nenum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest-death-test.cc"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 18,
                  "endLine": 102,
                  "endColumn": 22,
                  "snippet": {
                    "text": "//\n// This is defined in internal/gtest-port.h as \"fast\", but can be overridden by\n// a definition in internal/custom/gtest-port.h. The recommended value, which is\n// used internally at Google, is \"threadsafe\".\nstatic const char kDefaultDeathTestStyle[] = GTEST_DEFAULT_DEATH_TEST_STYLE;\n\n}  // namespace testing\n",
                    "rendered": {
                      "text": "//\n// This is defined in internal/gtest-port.h as \"fast\", but can be overridden by\n// a definition in internal/custom/gtest-port.h. The recommended value, which is\n// used internally at Google, is \"threadsafe\".\nstatic const char kDefaultDeathTestStyle[] = GTEST_DEFAULT_DEATH_TEST_STYLE;\n\n}  // namespace testing\n",
                      "markdown": "`//\n// This is defined in internal/gtest-port.h as \"fast\", but can be overridden by\n// a definition in internal/custom/gtest-port.h. The recommended value, which is\n// used internally at Google, is \"threadsafe\".\nstatic const char kDefaultDeathTestStyle[] = GTEST_DEFAULT_DEATH_TEST_STYLE;\n\n}  // namespace testing\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/cmake/internal_utils.cmake"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 66,
                  "endLine": 24,
                  "snippet": {
                    "text": "  if (CMAKE_CXX_COMPILER_ID MATCHES \"MSVC|Clang\")\n    # For MSVC and Clang, CMake sets certain flags to defaults we want to\n    # override.\n    # This replacement code is taken from sample in the CMake Wiki at\n    # https://gitlab.kitware.com/cmake/community/wikis/FAQ#dynamic-replace.\n    foreach (flag_var\n             CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE\n             CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO\n",
                    "rendered": {
                      "text": "  if (CMAKE_CXX_COMPILER_ID MATCHES \"MSVC|Clang\")\n    # For MSVC and Clang, CMake sets certain flags to defaults we want to\n    # override.\n    # This replacement code is taken from sample in the CMake Wiki at\n    # https://gitlab.kitware.com/cmake/community/wikis/FAQ#dynamic-replace.\n    foreach (flag_var\n             CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE\n             CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO\n",
                      "markdown": "`  if (CMAKE_CXX_COMPILER_ID MATCHES \"MSVC|Clang\")\n    # For MSVC and Clang, CMake sets certain flags to defaults we want to\n    # override.\n    # This replacement code is taken from sample in the CMake Wiki at\n    # https://gitlab.kitware.com/cmake/community/wikis/FAQ#dynamic-replace.\n    foreach (flag_var\n             CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE\n             CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/cmake/internal_utils.cmake"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n#\n# This must be a macro(), as inside a function string() can only\n# update variables in the function scope.\nmacro(fix_default_compiler_settings_)\n  if (CMAKE_CXX_COMPILER_ID MATCHES \"MSVC|Clang\")\n    # For MSVC and Clang, CMake sets certain flags to defaults we want to\n",
                    "rendered": {
                      "text": "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n#\n# This must be a macro(), as inside a function string() can only\n# update variables in the function scope.\nmacro(fix_default_compiler_settings_)\n  if (CMAKE_CXX_COMPILER_ID MATCHES \"MSVC|Clang\")\n    # For MSVC and Clang, CMake sets certain flags to defaults we want to\n",
                      "markdown": "`# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n#\n# This must be a macro(), as inside a function string() can only\n# update variables in the function scope.\nmacro(fix_default_compiler_settings_)\n  if (CMAKE_CXX_COMPILER_ID MATCHES \"MSVC|Clang\")\n    # For MSVC and Clang, CMake sets certain flags to defaults we want to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/pkgconfig.md"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 11,
                  "endLine": 96,
                  "endColumn": 15,
                  "snippet": {
                    "text": "such as `/usr` (see https://bugs.freedesktop.org/show_bug.cgi?id=28264#c3 for\nreasons why this stripping needs to occur usually).\n\nIf you look at the generated pkg-config file, it will look something like\n\n```\nlibdir=/usr/lib64\n",
                    "rendered": {
                      "text": "such as `/usr` (see https://bugs.freedesktop.org/show_bug.cgi?id=28264#c3 for\nreasons why this stripping needs to occur usually).\n\nIf you look at the generated pkg-config file, it will look something like\n\n```\nlibdir=/usr/lib64\n",
                      "markdown": "`such as `/usr` (see https://bugs.freedesktop.org/show_bug.cgi?id=28264#c3 for\nreasons why this stripping needs to occur usually).\n\nIf you look at the generated pkg-config file, it will look something like\n\n```\nlibdir=/usr/lib64\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/pkgconfig.md"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 11,
                  "endLine": 52,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n```\n-- Checking for one of the modules 'gtest_main'\nCMake Error at /usr/share/cmake/Modules/FindPkgConfig.cmake:640 (message):\n  None of the required 'gtest_main' found\n```\n\n",
                    "rendered": {
                      "text": "\n```\n-- Checking for one of the modules 'gtest_main'\nCMake Error at /usr/share/cmake/Modules/FindPkgConfig.cmake:640 (message):\n  None of the required 'gtest_main' found\n```\n\n",
                      "markdown": "`\n```\n-- Checking for one of the modules 'gtest_main'\nCMake Error at /usr/share/cmake/Modules/FindPkgConfig.cmake:640 (message):\n  None of the required 'gtest_main' found\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/pkgconfig.md"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 56,
                  "endLine": 66,
                  "endColumn": 62,
                  "snippet": {
                    "text": "export PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig\n```\n\npkg-config will also try to look in `PKG_CONFIG_PATH` to find `gtest_main.pc`.\n\n### Using pkg-config in a cross-compilation setting\n\n",
                    "rendered": {
                      "text": "export PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig\n```\n\npkg-config will also try to look in `PKG_CONFIG_PATH` to find `gtest_main.pc`.\n\n### Using pkg-config in a cross-compilation setting\n\n",
                      "markdown": "`export PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig\n```\n\npkg-config will also try to look in `PKG_CONFIG_PATH` to find `gtest_main.pc`.\n\n### Using pkg-config in a cross-compilation setting\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/pkgconfig.md"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 23,
                  "endLine": 58,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\nThese failures are common if you installed GoogleTest yourself and have not\nsourced it from a distro or other package manager. If so, you need to tell\npkg-config where it can find the `.pc` files containing the information. Say you\ninstalled GoogleTest to `/usr/local`, then it might be that the `.pc` files are\ninstalled under `/usr/local/lib64/pkgconfig`. If you set\n\n",
                    "rendered": {
                      "text": "\nThese failures are common if you installed GoogleTest yourself and have not\nsourced it from a distro or other package manager. If so, you need to tell\npkg-config where it can find the `.pc` files containing the information. Say you\ninstalled GoogleTest to `/usr/local`, then it might be that the `.pc` files are\ninstalled under `/usr/local/lib64/pkgconfig`. If you set\n\n",
                      "markdown": "`\nThese failures are common if you installed GoogleTest yourself and have not\nsourced it from a distro or other package manager. If so, you need to tell\npkg-config where it can find the `.pc` files containing the information. Say you\ninstalled GoogleTest to `/usr/local`, then it might be that the `.pc` files are\ninstalled under `/usr/local/lib64/pkgconfig`. If you set\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/pkgconfig.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 26,
                  "endLine": 44,
                  "endColumn": 32,
                  "snippet": {
                    "text": "goes for using `_LDFLAGS` over the more commonplace `_LIBRARIES`, which happens\nto discard `-L` flags and `-pthread`.\n\n### Help! pkg-config can't find GoogleTest!\n\nLet's say you have a `CMakeLists.txt` along the lines of the one in this\ntutorial and you try to run `cmake`. It is very possible that you get a failure\n",
                    "rendered": {
                      "text": "goes for using `_LDFLAGS` over the more commonplace `_LIBRARIES`, which happens\nto discard `-L` flags and `-pthread`.\n\n### Help! pkg-config can't find GoogleTest!\n\nLet's say you have a `CMakeLists.txt` along the lines of the one in this\ntutorial and you try to run `cmake`. It is very possible that you get a failure\n",
                      "markdown": "`goes for using `_LDFLAGS` over the more commonplace `_LIBRARIES`, which happens\nto discard `-L` flags and `-pthread`.\n\n### Help! pkg-config can't find GoogleTest!\n\nLet's say you have a `CMakeLists.txt` along the lines of the one in this\ntutorial and you try to run `cmake`. It is very possible that you get a failure\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-matchers-arithmetic_test.cc"
                },
                "region": {
                  "startLine": 626,
                  "startColumn": 63,
                  "endLine": 627,
                  "snippet": {
                    "text": "\nINSTANTIATE_GTEST_MATCHER_TEST_P(AnyOfTest);\n\n// Tests that AnyOf(m1, ..., mn) matches any value that matches at\n// least one of the given matchers.\nTEST(AnyOfTest, MatchesWhenAnyMatches) {\n  Matcher<int> m;\n  m = AnyOf(Le(1), Ge(3));\n",
                    "rendered": {
                      "text": "\nINSTANTIATE_GTEST_MATCHER_TEST_P(AnyOfTest);\n\n// Tests that AnyOf(m1, ..., mn) matches any value that matches at\n// least one of the given matchers.\nTEST(AnyOfTest, MatchesWhenAnyMatches) {\n  Matcher<int> m;\n  m = AnyOf(Le(1), Ge(3));\n",
                      "markdown": "`\nINSTANTIATE_GTEST_MATCHER_TEST_P(AnyOfTest);\n\n// Tests that AnyOf(m1, ..., mn) matches any value that matches at\n// least one of the given matchers.\nTEST(AnyOfTest, MatchesWhenAnyMatches) {\n  Matcher<int> m;\n  m = AnyOf(Le(1), Ge(3));\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-matchers-arithmetic_test.cc"
                },
                "region": {
                  "startLine": 1472,
                  "startColumn": 19,
                  "endLine": 1472,
                  "endColumn": 25,
                  "snippet": {
                    "text": "// as a candidate and the compilation will break due to an ambiguous overload.\n\n// The matcher must be in the same namespace as AllOf/AnyOf to make argument\n// dependent lookup find those.\nMATCHER(M, \"\") {\n  (void)arg;\n  return true;\n",
                    "rendered": {
                      "text": "// as a candidate and the compilation will break due to an ambiguous overload.\n\n// The matcher must be in the same namespace as AllOf/AnyOf to make argument\n// dependent lookup find those.\nMATCHER(M, \"\") {\n  (void)arg;\n  return true;\n",
                      "markdown": "`// as a candidate and the compilation will break due to an ambiguous overload.\n\n// The matcher must be in the same namespace as AllOf/AnyOf to make argument\n// dependent lookup find those.\nMATCHER(M, \"\") {\n  (void)arg;\n  return true;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-matchers-comparisons_test.cc"
                },
                "region": {
                  "startLine": 1830,
                  "startColumn": 35,
                  "endLine": 1830,
                  "endColumn": 41,
                  "snippet": {
                    "text": "#if GTEST_INTERNAL_HAS_STRING_VIEW\n  const Matcher<const internal::StringView&> m3 =\n      WhenBase64Unescaped(EndsWith(\"!\"));\n  EXPECT_FALSE(m3.Matches(\"invalid base64\"));\n  EXPECT_FALSE(m3.Matches(\"aGVsbG8gd29ybGQ=\"));  // hello world\n  EXPECT_TRUE(m3.Matches(\"aGVsbG8gd29ybGQh\"));   // hello world!\n  EXPECT_TRUE(m3.Matches(\"+/-_IQ\"));             // \\xfb\\xff\\xbf!\n",
                    "rendered": {
                      "text": "#if GTEST_INTERNAL_HAS_STRING_VIEW\n  const Matcher<const internal::StringView&> m3 =\n      WhenBase64Unescaped(EndsWith(\"!\"));\n  EXPECT_FALSE(m3.Matches(\"invalid base64\"));\n  EXPECT_FALSE(m3.Matches(\"aGVsbG8gd29ybGQ=\"));  // hello world\n  EXPECT_TRUE(m3.Matches(\"aGVsbG8gd29ybGQh\"));   // hello world!\n  EXPECT_TRUE(m3.Matches(\"+/-_IQ\"));             // \\xfb\\xff\\xbf!\n",
                      "markdown": "`#if GTEST_INTERNAL_HAS_STRING_VIEW\n  const Matcher<const internal::StringView&> m3 =\n      WhenBase64Unescaped(EndsWith(\"!\"));\n  EXPECT_FALSE(m3.Matches(\"invalid base64\"));\n  EXPECT_FALSE(m3.Matches(\"aGVsbG8gd29ybGQ=\"));  // hello world\n  EXPECT_TRUE(m3.Matches(\"aGVsbG8gd29ybGQh\"));   // hello world!\n  EXPECT_TRUE(m3.Matches(\"+/-_IQ\"));             // \\xfb\\xff\\xbf!\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-matchers-comparisons_test.cc"
                },
                "region": {
                  "startLine": 1822,
                  "startColumn": 35,
                  "endLine": 1822,
                  "endColumn": 41,
                  "snippet": {
                    "text": "  EXPECT_TRUE(m1.Matches(\"+/-_IQ\"));             // \\xfb\\xff\\xbf!\n\n  const Matcher<const std::string&> m2 = WhenBase64Unescaped(EndsWith(\"!\"));\n  EXPECT_FALSE(m2.Matches(\"invalid base64\"));\n  EXPECT_FALSE(m2.Matches(\"aGVsbG8gd29ybGQ=\"));  // hello world\n  EXPECT_TRUE(m2.Matches(\"aGVsbG8gd29ybGQh\"));   // hello world!\n  EXPECT_TRUE(m2.Matches(\"+/-_IQ\"));             // \\xfb\\xff\\xbf!\n",
                    "rendered": {
                      "text": "  EXPECT_TRUE(m1.Matches(\"+/-_IQ\"));             // \\xfb\\xff\\xbf!\n\n  const Matcher<const std::string&> m2 = WhenBase64Unescaped(EndsWith(\"!\"));\n  EXPECT_FALSE(m2.Matches(\"invalid base64\"));\n  EXPECT_FALSE(m2.Matches(\"aGVsbG8gd29ybGQ=\"));  // hello world\n  EXPECT_TRUE(m2.Matches(\"aGVsbG8gd29ybGQh\"));   // hello world!\n  EXPECT_TRUE(m2.Matches(\"+/-_IQ\"));             // \\xfb\\xff\\xbf!\n",
                      "markdown": "`  EXPECT_TRUE(m1.Matches(\"+/-_IQ\"));             // \\xfb\\xff\\xbf!\n\n  const Matcher<const std::string&> m2 = WhenBase64Unescaped(EndsWith(\"!\"));\n  EXPECT_FALSE(m2.Matches(\"invalid base64\"));\n  EXPECT_FALSE(m2.Matches(\"aGVsbG8gd29ybGQ=\"));  // hello world\n  EXPECT_TRUE(m2.Matches(\"aGVsbG8gd29ybGQh\"));   // hello world!\n  EXPECT_TRUE(m2.Matches(\"+/-_IQ\"));             // \\xfb\\xff\\xbf!\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-matchers-comparisons_test.cc"
                },
                "region": {
                  "startLine": 1816,
                  "startColumn": 35,
                  "endLine": 1816,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\nTEST(WhenBase64UnescapedTest, MatchesUnescapedBase64Strings) {\n  const Matcher<const char*> m1 = WhenBase64Unescaped(EndsWith(\"!\"));\n  EXPECT_FALSE(m1.Matches(\"invalid base64\"));\n  EXPECT_FALSE(m1.Matches(\"aGVsbG8gd29ybGQ=\"));  // hello world\n  EXPECT_TRUE(m1.Matches(\"aGVsbG8gd29ybGQh\"));   // hello world!\n  EXPECT_TRUE(m1.Matches(\"+/-_IQ\"));             // \\xfb\\xff\\xbf!\n",
                    "rendered": {
                      "text": "\nTEST(WhenBase64UnescapedTest, MatchesUnescapedBase64Strings) {\n  const Matcher<const char*> m1 = WhenBase64Unescaped(EndsWith(\"!\"));\n  EXPECT_FALSE(m1.Matches(\"invalid base64\"));\n  EXPECT_FALSE(m1.Matches(\"aGVsbG8gd29ybGQ=\"));  // hello world\n  EXPECT_TRUE(m1.Matches(\"aGVsbG8gd29ybGQh\"));   // hello world!\n  EXPECT_TRUE(m1.Matches(\"+/-_IQ\"));             // \\xfb\\xff\\xbf!\n",
                      "markdown": "`\nTEST(WhenBase64UnescapedTest, MatchesUnescapedBase64Strings) {\n  const Matcher<const char*> m1 = WhenBase64Unescaped(EndsWith(\"!\"));\n  EXPECT_FALSE(m1.Matches(\"invalid base64\"));\n  EXPECT_FALSE(m1.Matches(\"aGVsbG8gd29ybGQ=\"));  // hello world\n  EXPECT_TRUE(m1.Matches(\"aGVsbG8gd29ybGQh\"));   // hello world!\n  EXPECT_TRUE(m1.Matches(\"+/-_IQ\"));             // \\xfb\\xff\\xbf!\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/primer.md"
                },
                "region": {
                  "startLine": 458,
                  "startColumn": 64,
                  "endLine": 458,
                  "endColumn": 73,
                  "snippet": {
                    "text": "```\n\nThe `testing::InitGoogleTest()` function parses the command line for GoogleTest\nflags, and removes all recognized flags. This allows the user to control a test\nprogram's behavior via various flags, which we'll cover in the\n[AdvancedGuide](advanced.md). You **must** call this function before calling\n`RUN_ALL_TESTS()`, or the flags won't be properly initialized.\n",
                    "rendered": {
                      "text": "```\n\nThe `testing::InitGoogleTest()` function parses the command line for GoogleTest\nflags, and removes all recognized flags. This allows the user to control a test\nprogram's behavior via various flags, which we'll cover in the\n[AdvancedGuide](advanced.md). You **must** call this function before calling\n`RUN_ALL_TESTS()`, or the flags won't be properly initialized.\n",
                      "markdown": "````\n\nThe `testing::InitGoogleTest()` function parses the command line for GoogleTest\nflags, and removes all recognized flags. This allows the user to control a test\nprogram's behavior via various flags, which we'll cover in the\n[AdvancedGuide](advanced.md). You **must** call this function before calling\n`RUN_ALL_TESTS()`, or the flags won't be properly initialized.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/primer.md"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 7,
                  "endLine": 248,
                  "endColumn": 11,
                  "snippet": {
                    "text": "declaration`\".\n\nFor each test defined with `TEST_F()`, GoogleTest will create a *fresh* test\nfixture at runtime, immediately initialize it via `SetUp()`, run the test, clean\nup by calling `TearDown()`, and then delete the test fixture. Note that\ndifferent tests in the same test suite have different test fixture objects, and\nGoogleTest always deletes a test fixture before it creates the next one.\n",
                    "rendered": {
                      "text": "declaration`\".\n\nFor each test defined with `TEST_F()`, GoogleTest will create a *fresh* test\nfixture at runtime, immediately initialize it via `SetUp()`, run the test, clean\nup by calling `TearDown()`, and then delete the test fixture. Note that\ndifferent tests in the same test suite have different test fixture objects, and\nGoogleTest always deletes a test fixture before it creates the next one.\n",
                      "markdown": "`declaration`\".\n\nFor each test defined with `TEST_F()`, GoogleTest will create a *fresh* test\nfixture at runtime, immediately initialize it via `SetUp()`, run the test, clean\nup by calling `TearDown()`, and then delete the test fixture. Note that\ndifferent tests in the same test suite have different test fixture objects, and\nGoogleTest always deletes a test fixture before it creates the next one.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/primer.md"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 50,
                  "endLine": 129,
                  "endColumn": 54,
                  "snippet": {
                    "text": "ASSERT_EQ(x.size(), y.size()) << \"Vectors x and y are of unequal length\";\n\nfor (int i = 0; i < x.size(); ++i) {\n  EXPECT_EQ(x[i], y[i]) << \"Vectors x and y differ at index \" << i;\n}\n```\n\n",
                    "rendered": {
                      "text": "ASSERT_EQ(x.size(), y.size()) << \"Vectors x and y are of unequal length\";\n\nfor (int i = 0; i < x.size(); ++i) {\n  EXPECT_EQ(x[i], y[i]) << \"Vectors x and y differ at index \" << i;\n}\n```\n\n",
                      "markdown": "`ASSERT_EQ(x.size(), y.size()) << \"Vectors x and y are of unequal length\";\n\nfor (int i = 0; i < x.size(); ++i) {\n  EXPECT_EQ(x[i], y[i]) << \"Vectors x and y differ at index \" << i;\n}\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/primer.md"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 55,
                  "endLine": 96,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\nA *test program* can contain multiple test suites.\n\nWe'll now explain how to write a test program, starting at the individual\nassertion level and building up to tests and test suites.\n\n## Assertions\n",
                    "rendered": {
                      "text": "\nA *test program* can contain multiple test suites.\n\nWe'll now explain how to write a test program, starting at the individual\nassertion level and building up to tests and test suites.\n\n## Assertions\n",
                      "markdown": "`\nA *test program* can contain multiple test suites.\n\nWe'll now explain how to write a test program, starting at the individual\nassertion level and building up to tests and test suites.\n\n## Assertions\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/primer.md"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 78,
                  "endLine": 42,
                  "endColumn": 3,
                  "snippet": {
                    "text": "    across tests and pay for the set-up/tear-down only once, without making\n    tests depend on each other.\n\nSince GoogleTest is based on the popular xUnit architecture, you'll feel right\nat home if you've used JUnit or PyUnit before. If not, it will take you about 10\nminutes to learn the basics and get started. So let's go!\n\n## Beware of the Nomenclature\n",
                    "rendered": {
                      "text": "    across tests and pay for the set-up/tear-down only once, without making\n    tests depend on each other.\n\nSince GoogleTest is based on the popular xUnit architecture, you'll feel right\nat home if you've used JUnit or PyUnit before. If not, it will take you about 10\nminutes to learn the basics and get started. So let's go!\n\n## Beware of the Nomenclature\n",
                      "markdown": "`    across tests and pay for the set-up/tear-down only once, without making\n    tests depend on each other.\n\nSince GoogleTest is based on the popular xUnit architecture, you'll feel right\nat home if you've used JUnit or PyUnit before. If not, it will take you about 10\nminutes to learn the basics and get started. So let's go!\n\n## Beware of the Nomenclature\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/primer.md"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 40,
                  "endLine": 28,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    works on different OSes, with different compilers, with or without\n    exceptions, so GoogleTest tests can work with a variety of configurations.\n4.  When tests fail, they should provide as much *information* about the problem\n    as possible. GoogleTest doesn't stop at the first test failure. Instead, it\n    only stops the current test and continues with the next. You can also set up\n    tests that report non-fatal failures after which the current test continues.\n    Thus, you can detect and fix multiple bugs in a single run-edit-compile\n",
                    "rendered": {
                      "text": "    works on different OSes, with different compilers, with or without\n    exceptions, so GoogleTest tests can work with a variety of configurations.\n4.  When tests fail, they should provide as much *information* about the problem\n    as possible. GoogleTest doesn't stop at the first test failure. Instead, it\n    only stops the current test and continues with the next. You can also set up\n    tests that report non-fatal failures after which the current test continues.\n    Thus, you can detect and fix multiple bugs in a single run-edit-compile\n",
                      "markdown": "`    works on different OSes, with different compilers, with or without\n    exceptions, so GoogleTest tests can work with a variety of configurations.\n4.  When tests fail, they should provide as much *information* about the problem\n    as possible. GoogleTest doesn't stop at the first test failure. Instead, it\n    only stops the current test and continues with the next. You can also set up\n    tests that report non-fatal failures after which the current test continues.\n    Thus, you can detect and fix multiple bugs in a single run-edit-compile\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/primer.md"
                },
                "region": {
                  "startLine": 371,
                  "startColumn": 19,
                  "endLine": 371,
                  "endColumn": 28,
                  "snippet": {
                    "text": "{: .callout .important}\n> IMPORTANT: You must **not** ignore the return value of `RUN_ALL_TESTS()`, or\n> you will get a compiler error. The rationale for this design is that the\n> automated testing service determines whether a test has passed based on its\n> exit code, not on its stdout/stderr output; thus your `main()` function must\n> return the value of `RUN_ALL_TESTS()`.\n>\n",
                    "rendered": {
                      "text": "{: .callout .important}\n> IMPORTANT: You must **not** ignore the return value of `RUN_ALL_TESTS()`, or\n> you will get a compiler error. The rationale for this design is that the\n> automated testing service determines whether a test has passed based on its\n> exit code, not on its stdout/stderr output; thus your `main()` function must\n> return the value of `RUN_ALL_TESTS()`.\n>\n",
                      "markdown": "`{: .callout .important}\n> IMPORTANT: You must **not** ignore the return value of `RUN_ALL_TESTS()`, or\n> you will get a compiler error. The rationale for this design is that the\n> automated testing service determines whether a test has passed based on its\n> exit code, not on its stdout/stderr output; thus your `main()` function must\n> return the value of `RUN_ALL_TESTS()`.\n>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/primer.md"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 68,
                  "endLine": 333,
                  "snippet": {
                    "text": "1.  GoogleTest constructs a `QueueTest` object (let's call it `t1`).\n2.  The first test (`IsEmptyInitially`) runs on `t1`.\n3.  `t1` is destructed.\n4.  The above steps are repeated on another `QueueTest` object, this time\n    running the `DequeueWorks` test.\n\n**Availability**: Linux, Windows, Mac.\n\n",
                    "rendered": {
                      "text": "1.  GoogleTest constructs a `QueueTest` object (let's call it `t1`).\n2.  The first test (`IsEmptyInitially`) runs on `t1`.\n3.  `t1` is destructed.\n4.  The above steps are repeated on another `QueueTest` object, this time\n    running the `DequeueWorks` test.\n\n**Availability**: Linux, Windows, Mac.\n\n",
                      "markdown": "`1.  GoogleTest constructs a `QueueTest` object (let's call it `t1`).\n2.  The first test (`IsEmptyInitially`) runs on `t1`.\n3.  `t1` is destructed.\n4.  The above steps are repeated on another `QueueTest` object, this time\n    running the `DequeueWorks` test.\n\n**Availability**: Linux, Windows, Mac.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/primer.md"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 6,
                  "endLine": 207,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n## Test Fixtures: Using the Same Data Configuration for Multiple Tests {#same-data-multiple-tests}\n\nIf you find yourself writing two or more tests that operate on similar data, you\ncan use a *test fixture*. This allows you to reuse the same configuration of\nobjects for several different tests.\n\n",
                    "rendered": {
                      "text": "\n## Test Fixtures: Using the Same Data Configuration for Multiple Tests {#same-data-multiple-tests}\n\nIf you find yourself writing two or more tests that operate on similar data, you\ncan use a *test fixture*. This allows you to reuse the same configuration of\nobjects for several different tests.\n\n",
                      "markdown": "`\n## Test Fixtures: Using the Same Data Configuration for Multiple Tests {#same-data-multiple-tests}\n\nIf you find yourself writing two or more tests that operate on similar data, you\ncan use a *test fixture*. This allows you to reuse the same configuration of\nobjects for several different tests.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_faq.md"
                },
                "region": {
                  "startLine": 370,
                  "startColumn": 64,
                  "endLine": 370,
                  "endColumn": 73,
                  "snippet": {
                    "text": "Usually, if your action is for a particular function type, defining it using\n`Invoke()` should be easier; if your action can be used in functions of\ndifferent types (e.g. if you are defining `Return(*value*)`),\n`MakePolymorphicAction()` is easiest. Sometimes you want precise control on what\ntypes of functions the action can be used in, and implementing `ActionInterface`\nis the way to go here. See the implementation of `Return()` in `gmock-actions.h`\nfor an example.\n",
                    "rendered": {
                      "text": "Usually, if your action is for a particular function type, defining it using\n`Invoke()` should be easier; if your action can be used in functions of\ndifferent types (e.g. if you are defining `Return(*value*)`),\n`MakePolymorphicAction()` is easiest. Sometimes you want precise control on what\ntypes of functions the action can be used in, and implementing `ActionInterface`\nis the way to go here. See the implementation of `Return()` in `gmock-actions.h`\nfor an example.\n",
                      "markdown": "`Usually, if your action is for a particular function type, defining it using\n`Invoke()` should be easier; if your action can be used in functions of\ndifferent types (e.g. if you are defining `Return(*value*)`),\n`MakePolymorphicAction()` is easiest. Sometimes you want precise control on what\ntypes of functions the action can be used in, and implementing `ActionInterface`\nis the way to go here. See the implementation of `Return()` in `gmock-actions.h`\nfor an example.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_faq.md"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 25,
                  "endLine": 332,
                  "endColumn": 29,
                  "snippet": {
                    "text": "sometimes called \"state-based testing\".\n\nMocks are great for what some call \"interaction-based\" testing: instead of\nchecking the system state at the very end, mock objects verify that they are\ninvoked the right way and report an error as soon as it arises, giving you a\nhandle on the precise context in which the error was triggered. This is often\nmore effective and economical to do than state-based testing.\n",
                    "rendered": {
                      "text": "sometimes called \"state-based testing\".\n\nMocks are great for what some call \"interaction-based\" testing: instead of\nchecking the system state at the very end, mock objects verify that they are\ninvoked the right way and report an error as soon as it arises, giving you a\nhandle on the precise context in which the error was triggered. This is often\nmore effective and economical to do than state-based testing.\n",
                      "markdown": "`sometimes called \"state-based testing\".\n\nMocks are great for what some call \"interaction-based\" testing: instead of\nchecking the system state at the very end, mock objects verify that they are\ninvoked the right way and report an error as soon as it arises, giving you a\nhandle on the precise context in which the error was triggered. This is often\nmore effective and economical to do than state-based testing.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_faq.md"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 13,
                  "endLine": 268,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\nThis tells gMock that you do expect the calls and no warning should be printed.\n\nAlso, you can control the verbosity by specifying `--gmock_verbose=error`. Other\nvalues are `info` and `warning`. If you find the output too noisy when\ndebugging, just choose a less verbose level.\n\n",
                    "rendered": {
                      "text": "\nThis tells gMock that you do expect the calls and no warning should be printed.\n\nAlso, you can control the verbosity by specifying `--gmock_verbose=error`. Other\nvalues are `info` and `warning`. If you find the output too noisy when\ndebugging, just choose a less verbose level.\n\n",
                      "markdown": "`\nThis tells gMock that you do expect the calls and no warning should be printed.\n\nAlso, you can control the verbosity by specifying `--gmock_verbose=error`. Other\nvalues are `info` and `warning`. If you find the output too noisy when\ndebugging, just choose a less verbose level.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_faq.md"
                },
                "region": {
                  "startLine": 355,
                  "startColumn": 31,
                  "endLine": 355,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\nWhat if you actually meant to disallow this function to be called, but forgot to\nwrite `EXPECT_CALL(foo, Bar()).Times(0)`? While one can argue that it's the\nuser's fault, gMock tries to be nice and prints you a note.\n\nSo, when you see the message and believe that there shouldn't be any\nuninteresting calls, you should investigate what's going on. To make your life\n",
                    "rendered": {
                      "text": "\nWhat if you actually meant to disallow this function to be called, but forgot to\nwrite `EXPECT_CALL(foo, Bar()).Times(0)`? While one can argue that it's the\nuser's fault, gMock tries to be nice and prints you a note.\n\nSo, when you see the message and believe that there shouldn't be any\nuninteresting calls, you should investigate what's going on. To make your life\n",
                      "markdown": "`\nWhat if you actually meant to disallow this function to be called, but forgot to\nwrite `EXPECT_CALL(foo, Bar()).Times(0)`? While one can argue that it's the\nuser's fault, gMock tries to be nice and prints you a note.\n\nSo, when you see the message and believe that there shouldn't be any\nuninteresting calls, you should investigate what's going on. To make your life\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_faq.md"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 69,
                  "endLine": 324,
                  "endColumn": 75,
                  "snippet": {
                    "text": "I know it's not a question, but you get an answer for free any way. :-)\n\nWith gMock, you can create mocks in C++ easily. And people might be tempted to\nuse them everywhere. Sometimes they work great, and sometimes you may find them,\nwell, a pain to use. So, what's wrong in the latter case?\n\nWhen you write a test without using mocks, you exercise the code and assert that\n",
                    "rendered": {
                      "text": "I know it's not a question, but you get an answer for free any way. :-)\n\nWith gMock, you can create mocks in C++ easily. And people might be tempted to\nuse them everywhere. Sometimes they work great, and sometimes you may find them,\nwell, a pain to use. So, what's wrong in the latter case?\n\nWhen you write a test without using mocks, you exercise the code and assert that\n",
                      "markdown": "`I know it's not a question, but you get an answer for free any way. :-)\n\nWith gMock, you can create mocks in C++ easily. And people might be tempted to\nuse them everywhere. Sometimes they work great, and sometimes you may find them,\nwell, a pain to use. So, what's wrong in the latter case?\n\nWhen you write a test without using mocks, you exercise the code and assert that\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_faq.md"
                },
                "region": {
                  "startLine": 309,
                  "startColumn": 18,
                  "endLine": 309,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\nYou can, but you need to make some changes.\n\nIn general, if you find yourself needing to mock a static function, it's a sign\nthat your modules are too tightly coupled (and less flexible, less reusable,\nless testable, etc). You are probably better off defining a small interface and\ncall the function through that interface, which then can be easily mocked. It's\n",
                    "rendered": {
                      "text": "\nYou can, but you need to make some changes.\n\nIn general, if you find yourself needing to mock a static function, it's a sign\nthat your modules are too tightly coupled (and less flexible, less reusable,\nless testable, etc). You are probably better off defining a small interface and\ncall the function through that interface, which then can be easily mocked. It's\n",
                      "markdown": "`\nYou can, but you need to make some changes.\n\nIn general, if you find yourself needing to mock a static function, it's a sign\nthat your modules are too tightly coupled (and less flexible, less reusable,\nless testable, etc). You are probably better off defining a small interface and\ncall the function through that interface, which then can be easily mocked. It's\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_faq.md"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 6,
                  "endLine": 289,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n### How can I perform an arbitrary action on a mock function's argument?\n\nIf you find yourself needing to perform some action that's not supported by\ngMock directly, remember that you can define your own actions using\n[`MakeAction()`](#NewMonoActions) or\n[`MakePolymorphicAction()`](#NewPolyActions), or you can write a stub function\n",
                    "rendered": {
                      "text": "\n### How can I perform an arbitrary action on a mock function's argument?\n\nIf you find yourself needing to perform some action that's not supported by\ngMock directly, remember that you can define your own actions using\n[`MakeAction()`](#NewMonoActions) or\n[`MakePolymorphicAction()`](#NewPolyActions), or you can write a stub function\n",
                      "markdown": "`\n### How can I perform an arbitrary action on a mock function's argument?\n\nIf you find yourself needing to perform some action that's not supported by\ngMock directly, remember that you can define your own actions using\n[`MakeAction()`](#NewMonoActions) or\n[`MakePolymorphicAction()`](#NewPolyActions), or you can write a stub function\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_faq.md"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 39,
                  "endLine": 269,
                  "endColumn": 45,
                  "snippet": {
                    "text": "This tells gMock that you do expect the calls and no warning should be printed.\n\nAlso, you can control the verbosity by specifying `--gmock_verbose=error`. Other\nvalues are `info` and `warning`. If you find the output too noisy when\ndebugging, just choose a less verbose level.\n\n### How can I delete the mock function's argument in an action?\n",
                    "rendered": {
                      "text": "This tells gMock that you do expect the calls and no warning should be printed.\n\nAlso, you can control the verbosity by specifying `--gmock_verbose=error`. Other\nvalues are `info` and `warning`. If you find the output too noisy when\ndebugging, just choose a less verbose level.\n\n### How can I delete the mock function's argument in an action?\n",
                      "markdown": "`This tells gMock that you do expect the calls and no warning should be printed.\n\nAlso, you can control the verbosity by specifying `--gmock_verbose=error`. Other\nvalues are `info` and `warning`. If you find the output too noisy when\ndebugging, just choose a less verbose level.\n\n### How can I delete the mock function's argument in an action?\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_faq.md"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 28,
                  "endLine": 266,
                  "endColumn": 36,
                  "snippet": {
                    "text": "      .WillByDefault(...);\n```\n\nThis tells gMock that you do expect the calls and no warning should be printed.\n\nAlso, you can control the verbosity by specifying `--gmock_verbose=error`. Other\nvalues are `info` and `warning`. If you find the output too noisy when\n",
                    "rendered": {
                      "text": "      .WillByDefault(...);\n```\n\nThis tells gMock that you do expect the calls and no warning should be printed.\n\nAlso, you can control the verbosity by specifying `--gmock_verbose=error`. Other\nvalues are `info` and `warning`. If you find the output too noisy when\n",
                      "markdown": "`      .WillByDefault(...);\n```\n\nThis tells gMock that you do expect the calls and no warning should be printed.\n\nAlso, you can control the verbosity by specifying `--gmock_verbose=error`. Other\nvalues are `info` and `warning`. If you find the output too noisy when\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock_output_test.py"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 2,
                  "endLine": 34,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\nr\"\"\"Tests the text output of Google C++ Mocking Framework.\n\nTo update the golden file:\ngmock_output_test.py --build_dir=BUILD/DIR --gengolden\nwhere BUILD/DIR contains the built gmock_output_test_ file.\ngmock_output_test.py --gengolden\n",
                    "rendered": {
                      "text": "\nr\"\"\"Tests the text output of Google C++ Mocking Framework.\n\nTo update the golden file:\ngmock_output_test.py --build_dir=BUILD/DIR --gengolden\nwhere BUILD/DIR contains the built gmock_output_test_ file.\ngmock_output_test.py --gengolden\n",
                      "markdown": "`\nr\"\"\"Tests the text output of Google C++ Mocking Framework.\n\nTo update the golden file:\ngmock_output_test.py --build_dir=BUILD/DIR --gengolden\nwhere BUILD/DIR contains the built gmock_output_test_ file.\ngmock_output_test.py --gengolden\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/samples/sample3_unittest.cc"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 23,
                  "endLine": 45,
                  "endColumn": 31,
                  "snippet": {
                    "text": "//\n// The tests share the test fixture in the sense of code sharing, not\n// data sharing.  Each test is given its own fresh copy of the\n// fixture.  You cannot expect the data modified by one test to be\n// passed on to another test, which is a bad idea.\n//\n// The reason for this design is that tests should be independent and\n",
                    "rendered": {
                      "text": "//\n// The tests share the test fixture in the sense of code sharing, not\n// data sharing.  Each test is given its own fresh copy of the\n// fixture.  You cannot expect the data modified by one test to be\n// passed on to another test, which is a bad idea.\n//\n// The reason for this design is that tests should be independent and\n",
                      "markdown": "`//\n// The tests share the test fixture in the sense of code sharing, not\n// data sharing.  Each test is given its own fresh copy of the\n// fixture.  You cannot expect the data modified by one test to be\n// passed on to another test, which is a bad idea.\n//\n// The reason for this design is that tests should be independent and\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-throw-on-failure-test.py"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 4,
                  "endLine": 34,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n\"\"\"Tests Google Test's throw-on-failure mode with exceptions disabled.\n\nThis script invokes googletest-throw-on-failure-test_ (a program written with\nGoogle Test) with different environments and command line flags.\n\"\"\"\n\n",
                    "rendered": {
                      "text": "\n\"\"\"Tests Google Test's throw-on-failure mode with exceptions disabled.\n\nThis script invokes googletest-throw-on-failure-test_ (a program written with\nGoogle Test) with different environments and command line flags.\n\"\"\"\n\n",
                      "markdown": "`\n\"\"\"Tests Google Test's throw-on-failure mode with exceptions disabled.\n\nThis script invokes googletest-throw-on-failure-test_ (a program written with\nGoogle Test) with different environments and command line flags.\n\"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-param-test-test.cc"
                },
                "region": {
                  "startLine": 1160,
                  "startColumn": 15,
                  "endLine": 1160,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\nint main(int argc, char** argv) {\n  // Used in TestGenerationTest test suite.\n  AddGlobalTestEnvironment(TestGenerationTest::Environment::Instance());\n  // Used in GeneratorEvaluationTest test suite. Tests that the updated value\n  // will be picked up for instantiating tests in GeneratorEvaluationTest.\n  GeneratorEvaluationTest::set_param_value(1);\n",
                    "rendered": {
                      "text": "\nint main(int argc, char** argv) {\n  // Used in TestGenerationTest test suite.\n  AddGlobalTestEnvironment(TestGenerationTest::Environment::Instance());\n  // Used in GeneratorEvaluationTest test suite. Tests that the updated value\n  // will be picked up for instantiating tests in GeneratorEvaluationTest.\n  GeneratorEvaluationTest::set_param_value(1);\n",
                      "markdown": "`\nint main(int argc, char** argv) {\n  // Used in TestGenerationTest test suite.\n  AddGlobalTestEnvironment(TestGenerationTest::Environment::Instance());\n  // Used in GeneratorEvaluationTest test suite. Tests that the updated value\n  // will be picked up for instantiating tests in GeneratorEvaluationTest.\n  GeneratorEvaluationTest::set_param_value(1);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-param-test-test.cc"
                },
                "region": {
                  "startLine": 734,
                  "startColumn": 2,
                  "endLine": 734,
                  "endColumn": 22,
                  "snippet": {
                    "text": "vector<int> TestGenerationTest::collected_parameters_;\n\nTEST_P(TestGenerationTest, TestsExpandedAndRun) {\n  Environment::Instance()->TestBodyExecuted();\n  EXPECT_EQ(current_parameter_, GetParam());\n  collected_parameters_.push_back(GetParam());\n}\n",
                    "rendered": {
                      "text": "vector<int> TestGenerationTest::collected_parameters_;\n\nTEST_P(TestGenerationTest, TestsExpandedAndRun) {\n  Environment::Instance()->TestBodyExecuted();\n  EXPECT_EQ(current_parameter_, GetParam());\n  collected_parameters_.push_back(GetParam());\n}\n",
                      "markdown": "`vector<int> TestGenerationTest::collected_parameters_;\n\nTEST_P(TestGenerationTest, TestsExpandedAndRun) {\n  Environment::Instance()->TestBodyExecuted();\n  EXPECT_EQ(current_parameter_, GetParam());\n  collected_parameters_.push_back(GetParam());\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-param-test-test.cc"
                },
                "region": {
                  "startLine": 686,
                  "startColumn": 4,
                  "endLine": 686,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    EXPECT_EQ(current_parameter_, GetParam());\n  }\n  void TearDown() override {\n    Environment::Instance()->TearDownExecuted();\n    EXPECT_EQ(current_parameter_, GetParam());\n  }\n\n",
                    "rendered": {
                      "text": "    EXPECT_EQ(current_parameter_, GetParam());\n  }\n  void TearDown() override {\n    Environment::Instance()->TearDownExecuted();\n    EXPECT_EQ(current_parameter_, GetParam());\n  }\n\n",
                      "markdown": "`    EXPECT_EQ(current_parameter_, GetParam());\n  }\n  void TearDown() override {\n    Environment::Instance()->TearDownExecuted();\n    EXPECT_EQ(current_parameter_, GetParam());\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-param-test-test.cc"
                },
                "region": {
                  "startLine": 682,
                  "startColumn": 4,
                  "endLine": 682,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    current_parameter_ = GetParam();\n  }\n  void SetUp() override {\n    Environment::Instance()->SetUpExecuted();\n    EXPECT_EQ(current_parameter_, GetParam());\n  }\n  void TearDown() override {\n",
                    "rendered": {
                      "text": "    current_parameter_ = GetParam();\n  }\n  void SetUp() override {\n    Environment::Instance()->SetUpExecuted();\n    EXPECT_EQ(current_parameter_, GetParam());\n  }\n  void TearDown() override {\n",
                      "markdown": "`    current_parameter_ = GetParam();\n  }\n  void SetUp() override {\n    Environment::Instance()->SetUpExecuted();\n    EXPECT_EQ(current_parameter_, GetParam());\n  }\n  void TearDown() override {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-param-test-test.cc"
                },
                "region": {
                  "startLine": 678,
                  "startColumn": 4,
                  "endLine": 678,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  typedef TestGenerationEnvironment<PARAMETER_COUNT> Environment;\n\n  TestGenerationTest() {\n    Environment::Instance()->FixtureConstructorExecuted();\n    current_parameter_ = GetParam();\n  }\n  void SetUp() override {\n",
                    "rendered": {
                      "text": "  typedef TestGenerationEnvironment<PARAMETER_COUNT> Environment;\n\n  TestGenerationTest() {\n    Environment::Instance()->FixtureConstructorExecuted();\n    current_parameter_ = GetParam();\n  }\n  void SetUp() override {\n",
                      "markdown": "`  typedef TestGenerationEnvironment<PARAMETER_COUNT> Environment;\n\n  TestGenerationTest() {\n    Environment::Instance()->FixtureConstructorExecuted();\n    current_parameter_ = GetParam();\n  }\n  void SetUp() override {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-param-test-test.cc"
                },
                "region": {
                  "startLine": 610,
                  "startColumn": 25,
                  "endLine": 610,
                  "endColumn": 45,
                  "snippet": {
                    "text": "class TestGenerationEnvironment : public ::testing::Environment {\n public:\n  static TestGenerationEnvironment* Instance() {\n    static TestGenerationEnvironment* instance = new TestGenerationEnvironment;\n    return instance;\n  }\n\n",
                    "rendered": {
                      "text": "class TestGenerationEnvironment : public ::testing::Environment {\n public:\n  static TestGenerationEnvironment* Instance() {\n    static TestGenerationEnvironment* instance = new TestGenerationEnvironment;\n    return instance;\n  }\n\n",
                      "markdown": "`class TestGenerationEnvironment : public ::testing::Environment {\n public:\n  static TestGenerationEnvironment* Instance() {\n    static TestGenerationEnvironment* instance = new TestGenerationEnvironment;\n    return instance;\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-param-test-test.cc"
                },
                "region": {
                  "startLine": 609,
                  "startColumn": 23,
                  "endLine": 609,
                  "endColumn": 43,
                  "snippet": {
                    "text": "template <int kExpectedCalls>\nclass TestGenerationEnvironment : public ::testing::Environment {\n public:\n  static TestGenerationEnvironment* Instance() {\n    static TestGenerationEnvironment* instance = new TestGenerationEnvironment;\n    return instance;\n  }\n",
                    "rendered": {
                      "text": "template <int kExpectedCalls>\nclass TestGenerationEnvironment : public ::testing::Environment {\n public:\n  static TestGenerationEnvironment* Instance() {\n    static TestGenerationEnvironment* instance = new TestGenerationEnvironment;\n    return instance;\n  }\n",
                      "markdown": "`template <int kExpectedCalls>\nclass TestGenerationEnvironment : public ::testing::Environment {\n public:\n  static TestGenerationEnvironment* Instance() {\n    static TestGenerationEnvironment* instance = new TestGenerationEnvironment;\n    return instance;\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-param-test-test.cc"
                },
                "region": {
                  "startLine": 742,
                  "startColumn": 73,
                  "endLine": 743,
                  "snippet": {
                    "text": "                         ValuesIn(test_generation_params));\n\n// This test verifies that the element sequence (third parameter of\n// INSTANTIATE_TEST_SUITE_P) is evaluated in InitGoogleTest() and neither at\n// the call site of INSTANTIATE_TEST_SUITE_P nor in RUN_ALL_TESTS().  For\n// that, we declare param_value_ to be a static member of\n// GeneratorEvaluationTest and initialize it to 0.  We set it to 1 in\n// main(), just before invocation of InitGoogleTest().  After calling\n",
                    "rendered": {
                      "text": "                         ValuesIn(test_generation_params));\n\n// This test verifies that the element sequence (third parameter of\n// INSTANTIATE_TEST_SUITE_P) is evaluated in InitGoogleTest() and neither at\n// the call site of INSTANTIATE_TEST_SUITE_P nor in RUN_ALL_TESTS().  For\n// that, we declare param_value_ to be a static member of\n// GeneratorEvaluationTest and initialize it to 0.  We set it to 1 in\n// main(), just before invocation of InitGoogleTest().  After calling\n",
                      "markdown": "`                         ValuesIn(test_generation_params));\n\n// This test verifies that the element sequence (third parameter of\n// INSTANTIATE_TEST_SUITE_P) is evaluated in InitGoogleTest() and neither at\n// the call site of INSTANTIATE_TEST_SUITE_P nor in RUN_ALL_TESTS().  For\n// that, we declare param_value_ to be a static member of\n// GeneratorEvaluationTest and initialize it to 0.  We set it to 1 in\n// main(), just before invocation of InitGoogleTest().  After calling\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-param-test-test.cc"
                },
                "region": {
                  "startLine": 604,
                  "startColumn": 28,
                  "endLine": 604,
                  "endColumn": 32,
                  "snippet": {
                    "text": "// supplied with the correct parameters.\n\n// The use of environment object allows detection of the case where no test\n// case functionality is run at all. In this case TearDownTestSuite will not\n// be able to detect missing tests, naturally.\ntemplate <int kExpectedCalls>\nclass TestGenerationEnvironment : public ::testing::Environment {\n",
                    "rendered": {
                      "text": "// supplied with the correct parameters.\n\n// The use of environment object allows detection of the case where no test\n// case functionality is run at all. In this case TearDownTestSuite will not\n// be able to detect missing tests, naturally.\ntemplate <int kExpectedCalls>\nclass TestGenerationEnvironment : public ::testing::Environment {\n",
                      "markdown": "`// supplied with the correct parameters.\n\n// The use of environment object allows detection of the case where no test\n// case functionality is run at all. In this case TearDownTestSuite will not\n// be able to detect missing tests, naturally.\ntemplate <int kExpectedCalls>\nclass TestGenerationEnvironment : public ::testing::Environment {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-param-test-test.cc"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 50,
                  "endLine": 68,
                  "endColumn": 54,
                  "snippet": {
                    "text": "// Prints a value to a string.\n//\n// FIXME: remove PrintValue() when we move matchers and\n// EXPECT_THAT() from Google Mock to Google Test.  At that time, we\n// can write EXPECT_THAT(x, Eq(y)) to compare two tuples x and y, as\n// EXPECT_THAT() and the matchers know how to print tuples.\ntemplate <typename T>\n",
                    "rendered": {
                      "text": "// Prints a value to a string.\n//\n// FIXME: remove PrintValue() when we move matchers and\n// EXPECT_THAT() from Google Mock to Google Test.  At that time, we\n// can write EXPECT_THAT(x, Eq(y)) to compare two tuples x and y, as\n// EXPECT_THAT() and the matchers know how to print tuples.\ntemplate <typename T>\n",
                      "markdown": "`// Prints a value to a string.\n//\n// FIXME: remove PrintValue() when we move matchers and\n// EXPECT_THAT() from Google Mock to Google Test.  At that time, we\n// can write EXPECT_THAT(x, Eq(y)) to compare two tuples x and y, as\n// EXPECT_THAT() and the matchers know how to print tuples.\ntemplate <typename T>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-param-test-test.cc"
                },
                "region": {
                  "startLine": 716,
                  "startColumn": 31,
                  "endLine": 716,
                  "endColumn": 37,
                  "snippet": {
                    "text": "                                test_generation_params + PARAMETER_COUNT);\n    // Test execution order is not guaranteed by Google Test,\n    // so the order of values in collected_parameters_ can be\n    // different and we have to sort to compare.\n    sort(expected_values.begin(), expected_values.end());\n    sort(collected_parameters_.begin(), collected_parameters_.end());\n\n",
                    "rendered": {
                      "text": "                                test_generation_params + PARAMETER_COUNT);\n    // Test execution order is not guaranteed by Google Test,\n    // so the order of values in collected_parameters_ can be\n    // different and we have to sort to compare.\n    sort(expected_values.begin(), expected_values.end());\n    sort(collected_parameters_.begin(), collected_parameters_.end());\n\n",
                      "markdown": "`                                test_generation_params + PARAMETER_COUNT);\n    // Test execution order is not guaranteed by Google Test,\n    // so the order of values in collected_parameters_ can be\n    // different and we have to sort to compare.\n    sort(expected_values.begin(), expected_values.end());\n    sort(collected_parameters_.begin(), collected_parameters_.end());\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-filter-unittest.py"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 22,
                  "endLine": 230,
                  "endColumn": 41,
                  "snippet": {
                    "text": "  return banners_printed\n\n\ndef InvokeWithModifiedEnv(extra_env, function, *args, **kwargs):\n  \"\"\"Runs the given function and arguments in a modified environment.\"\"\"\n  try:\n    original_env = environ.copy()\n",
                    "rendered": {
                      "text": "  return banners_printed\n\n\ndef InvokeWithModifiedEnv(extra_env, function, *args, **kwargs):\n  \"\"\"Runs the given function and arguments in a modified environment.\"\"\"\n  try:\n    original_env = environ.copy()\n",
                      "markdown": "`  return banners_printed\n\n\ndef InvokeWithModifiedEnv(extra_env, function, *args, **kwargs):\n  \"\"\"Runs the given function and arguments in a modified environment.\"\"\"\n  try:\n    original_env = environ.copy()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-filter-unittest.py"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 14,
                  "endLine": 255,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n\nclass GTestFilterUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests the env variable or the command line flag to filter tests.\"\"\"\n\n  # Utilities.\n\n",
                    "rendered": {
                      "text": "\n\nclass GTestFilterUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests the env variable or the command line flag to filter tests.\"\"\"\n\n  # Utilities.\n\n",
                      "markdown": "`\n\nclass GTestFilterUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests the env variable or the command line flag to filter tests.\"\"\"\n\n  # Utilities.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-filter-unittest.py"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 13,
                  "endLine": 184,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n\n  if value is not None:\n    environ[env_var] = value\n",
                    "rendered": {
                      "text": "\n\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n\n  if value is not None:\n    environ[env_var] = value\n",
                      "markdown": "`\n\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n\n  if value is not None:\n    environ[env_var] = value\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-filter-unittest.py"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 48,
                  "endLine": 86,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n\n# Checks if we should test with an empty filter. This doesn't\n# make sense on platforms that cannot pass empty env variables (Win32)\n# and on platforms that cannot unset variables (since we cannot tell\n# the difference between \"\" and NULL -- Borland and Solaris < 5.10)\nCAN_TEST_EMPTY_FILTER = CAN_PASS_EMPTY_ENV and CAN_UNSET_ENV\n",
                    "rendered": {
                      "text": "\n\n# Checks if we should test with an empty filter. This doesn't\n# make sense on platforms that cannot pass empty env variables (Win32)\n# and on platforms that cannot unset variables (since we cannot tell\n# the difference between \"\" and NULL -- Borland and Solaris < 5.10)\nCAN_TEST_EMPTY_FILTER = CAN_PASS_EMPTY_ENV and CAN_UNSET_ENV\n",
                      "markdown": "`\n\n# Checks if we should test with an empty filter. This doesn't\n# make sense on platforms that cannot pass empty env variables (Win32)\n# and on platforms that cannot unset variables (since we cannot tell\n# the difference between \"\" and NULL -- Borland and Solaris < 5.10)\nCAN_TEST_EMPTY_FILTER = CAN_PASS_EMPTY_ENV and CAN_UNSET_ENV\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-filter-unittest.py"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 10,
                  "endLine": 71,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n# Check if this platform can unset environment variables in child processes.\n# We set an env variable to a non-empty string, unset it, and invoke\n# a python script in a subprocess to print whether the variable\n# is NO LONGER in os.environ.\n# We use 'eval' to parse the child's output so that an exception\n# is thrown if the input is neither 'True' nor 'False'.\n",
                    "rendered": {
                      "text": "\n# Check if this platform can unset environment variables in child processes.\n# We set an env variable to a non-empty string, unset it, and invoke\n# a python script in a subprocess to print whether the variable\n# is NO LONGER in os.environ.\n# We use 'eval' to parse the child's output so that an exception\n# is thrown if the input is neither 'True' nor 'False'.\n",
                      "markdown": "`\n# Check if this platform can unset environment variables in child processes.\n# We set an env variable to a non-empty string, unset it, and invoke\n# a python script in a subprocess to print whether the variable\n# is NO LONGER in os.environ.\n# We use 'eval' to parse the child's output so that an exception\n# is thrown if the input is neither 'True' nor 'False'.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-filter-unittest.py"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 11,
                  "endLine": 70,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n\n# Check if this platform can unset environment variables in child processes.\n# We set an env variable to a non-empty string, unset it, and invoke\n# a python script in a subprocess to print whether the variable\n# is NO LONGER in os.environ.\n# We use 'eval' to parse the child's output so that an exception\n",
                    "rendered": {
                      "text": "\n\n# Check if this platform can unset environment variables in child processes.\n# We set an env variable to a non-empty string, unset it, and invoke\n# a python script in a subprocess to print whether the variable\n# is NO LONGER in os.environ.\n# We use 'eval' to parse the child's output so that an exception\n",
                      "markdown": "`\n\n# Check if this platform can unset environment variables in child processes.\n# We set an env variable to a non-empty string, unset it, and invoke\n# a python script in a subprocess to print whether the variable\n# is NO LONGER in os.environ.\n# We use 'eval' to parse the child's output so that an exception\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-filter-unittest.py"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 1,
                  "endLine": 57,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n# Checks if this platform can pass empty environment variables to child\n# processes.  We set an env variable to an empty string and invoke a python\n# script in a subprocess to print whether the variable is STILL in\n# os.environ.  We then use 'eval' to parse the child's output so that an\n# exception is thrown if the input is anything other than 'True' nor 'False'.\nCAN_PASS_EMPTY_ENV = False\n",
                    "rendered": {
                      "text": "\n# Checks if this platform can pass empty environment variables to child\n# processes.  We set an env variable to an empty string and invoke a python\n# script in a subprocess to print whether the variable is STILL in\n# os.environ.  We then use 'eval' to parse the child's output so that an\n# exception is thrown if the input is anything other than 'True' nor 'False'.\nCAN_PASS_EMPTY_ENV = False\n",
                      "markdown": "`\n# Checks if this platform can pass empty environment variables to child\n# processes.  We set an env variable to an empty string and invoke a python\n# script in a subprocess to print whether the variable is STILL in\n# os.environ.  We then use 'eval' to parse the child's output so that an\n# exception is thrown if the input is anything other than 'True' nor 'False'.\nCAN_PASS_EMPTY_ENV = False\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-filter-unittest.py"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 23,
                  "endLine": 56,
                  "endColumn": 28,
                  "snippet": {
                    "text": "# Constants.\n\n# Checks if this platform can pass empty environment variables to child\n# processes.  We set an env variable to an empty string and invoke a python\n# script in a subprocess to print whether the variable is STILL in\n# os.environ.  We then use 'eval' to parse the child's output so that an\n# exception is thrown if the input is anything other than 'True' nor 'False'.\n",
                    "rendered": {
                      "text": "# Constants.\n\n# Checks if this platform can pass empty environment variables to child\n# processes.  We set an env variable to an empty string and invoke a python\n# script in a subprocess to print whether the variable is STILL in\n# os.environ.  We then use 'eval' to parse the child's output so that an\n# exception is thrown if the input is anything other than 'True' nor 'False'.\n",
                      "markdown": "`# Constants.\n\n# Checks if this platform can pass empty environment variables to child\n# processes.  We set an env variable to an empty string and invoke a python\n# script in a subprocess to print whether the variable is STILL in\n# os.environ.  We then use 'eval' to parse the child's output so that an\n# exception is thrown if the input is anything other than 'True' nor 'False'.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-filter-unittest.py"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 4,
                  "endLine": 35,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\nA user can specify which test(s) in a Google Test program to run via either\nthe GTEST_FILTER environment variable or the --gtest_filter flag.\nThis script tests such functionality by invoking\ngoogletest-filter-unittest_ (a program written with Google Test) with different\nenvironments and command line flags.\n\n",
                    "rendered": {
                      "text": "\nA user can specify which test(s) in a Google Test program to run via either\nthe GTEST_FILTER environment variable or the --gtest_filter flag.\nThis script tests such functionality by invoking\ngoogletest-filter-unittest_ (a program written with Google Test) with different\nenvironments and command line flags.\n\n",
                      "markdown": "`\nA user can specify which test(s) in a Google Test program to run via either\nthe GTEST_FILTER environment variable or the --gtest_filter flag.\nThis script tests such functionality by invoking\ngoogletest-filter-unittest_ (a program written with Google Test) with different\nenvironments and command line flags.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_environment_test.cc"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 22,
                  "endLine": 164,
                  "endColumn": 27,
                  "snippet": {
                    "text": "// Verifies that RUN_ALL_TESTS() doesn't do global set-up or\n// tear-down when there is no test to run.\nvoid TestNoTestsSkipsSetUp() {\n  MyEnvironment* const env = RegisterTestEnv();\n  GTEST_FLAG_SET(filter, \"-*\");\n  Check(RunAllTests(env, NO_FAILURE) == 0,\n        \"RUN_ALL_TESTS() should return zero, as there is no test to run.\");\n",
                    "rendered": {
                      "text": "// Verifies that RUN_ALL_TESTS() doesn't do global set-up or\n// tear-down when there is no test to run.\nvoid TestNoTestsSkipsSetUp() {\n  MyEnvironment* const env = RegisterTestEnv();\n  GTEST_FLAG_SET(filter, \"-*\");\n  Check(RunAllTests(env, NO_FAILURE) == 0,\n        \"RUN_ALL_TESTS() should return zero, as there is no test to run.\");\n",
                      "markdown": "`// Verifies that RUN_ALL_TESTS() doesn't do global set-up or\n// tear-down when there is no test to run.\nvoid TestNoTestsSkipsSetUp() {\n  MyEnvironment* const env = RegisterTestEnv();\n  GTEST_FLAG_SET(filter, \"-*\");\n  Check(RunAllTests(env, NO_FAILURE) == 0,\n        \"RUN_ALL_TESTS() should return zero, as there is no test to run.\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_environment_test.cc"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 22,
                  "endLine": 150,
                  "endColumn": 27,
                  "snippet": {
                    "text": "// Verifies that RUN_ALL_TESTS() runs no test when the global set-up\n// generates a fatal failure.\nvoid TestNoTestsRunSetUpFailure() {\n  MyEnvironment* const env = RegisterTestEnv();\n  Check(RunAllTests(env, FATAL_FAILURE) != 0,\n        \"RUN_ALL_TESTS() should return non-zero, as the global set-up \"\n        \"should generate a fatal failure.\");\n",
                    "rendered": {
                      "text": "// Verifies that RUN_ALL_TESTS() runs no test when the global set-up\n// generates a fatal failure.\nvoid TestNoTestsRunSetUpFailure() {\n  MyEnvironment* const env = RegisterTestEnv();\n  Check(RunAllTests(env, FATAL_FAILURE) != 0,\n        \"RUN_ALL_TESTS() should return non-zero, as the global set-up \"\n        \"should generate a fatal failure.\");\n",
                      "markdown": "`// Verifies that RUN_ALL_TESTS() runs no test when the global set-up\n// generates a fatal failure.\nvoid TestNoTestsRunSetUpFailure() {\n  MyEnvironment* const env = RegisterTestEnv();\n  Check(RunAllTests(env, FATAL_FAILURE) != 0,\n        \"RUN_ALL_TESTS() should return non-zero, as the global set-up \"\n        \"should generate a fatal failure.\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_environment_test.cc"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 22,
                  "endLine": 136,
                  "endColumn": 27,
                  "snippet": {
                    "text": "// Verifies that RUN_ALL_TESTS() runs the tests when the global\n// set-up generates no fatal failure.\nvoid TestTestsRun() {\n  MyEnvironment* const env = RegisterTestEnv();\n  Check(RunAllTests(env, NON_FATAL_FAILURE) != 0,\n        \"RUN_ALL_TESTS() should return non-zero, as both the global set-up \"\n        \"and the global tear-down should generate a non-fatal failure.\");\n",
                    "rendered": {
                      "text": "// Verifies that RUN_ALL_TESTS() runs the tests when the global\n// set-up generates no fatal failure.\nvoid TestTestsRun() {\n  MyEnvironment* const env = RegisterTestEnv();\n  Check(RunAllTests(env, NON_FATAL_FAILURE) != 0,\n        \"RUN_ALL_TESTS() should return non-zero, as both the global set-up \"\n        \"and the global tear-down should generate a non-fatal failure.\");\n",
                      "markdown": "`// Verifies that RUN_ALL_TESTS() runs the tests when the global\n// set-up generates no fatal failure.\nvoid TestTestsRun() {\n  MyEnvironment* const env = RegisterTestEnv();\n  Check(RunAllTests(env, NON_FATAL_FAILURE) != 0,\n        \"RUN_ALL_TESTS() should return non-zero, as both the global set-up \"\n        \"and the global tear-down should generate a non-fatal failure.\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_environment_test.cc"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 22,
                  "endLine": 122,
                  "endColumn": 27,
                  "snippet": {
                    "text": "// Verifies that RUN_ALL_TESTS() runs the tests when the global\n// set-up is successful.\nvoid TestGlobalSetUp() {\n  MyEnvironment* const env = RegisterTestEnv();\n  Check(RunAllTests(env, NO_FAILURE) != 0,\n        \"RUN_ALL_TESTS() should return non-zero, as the global tear-down \"\n        \"should generate a failure.\");\n",
                    "rendered": {
                      "text": "// Verifies that RUN_ALL_TESTS() runs the tests when the global\n// set-up is successful.\nvoid TestGlobalSetUp() {\n  MyEnvironment* const env = RegisterTestEnv();\n  Check(RunAllTests(env, NO_FAILURE) != 0,\n        \"RUN_ALL_TESTS() should return non-zero, as the global tear-down \"\n        \"should generate a failure.\");\n",
                      "markdown": "`// Verifies that RUN_ALL_TESTS() runs the tests when the global\n// set-up is successful.\nvoid TestGlobalSetUp() {\n  MyEnvironment* const env = RegisterTestEnv();\n  Check(RunAllTests(env, NO_FAILURE) != 0,\n        \"RUN_ALL_TESTS() should return non-zero, as the global tear-down \"\n        \"should generate a failure.\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_environment_test.cc"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 22,
                  "endLine": 113,
                  "endColumn": 27,
                  "snippet": {
                    "text": "// Registers a global test environment, and verifies that the\n// registration function returns its argument.\nMyEnvironment* RegisterTestEnv() {\n  MyEnvironment* const env = new MyEnvironment;\n  Check(testing::AddGlobalTestEnvironment(env) == env,\n        \"AddGlobalTestEnvironment() should return its argument.\");\n  return env;\n",
                    "rendered": {
                      "text": "// Registers a global test environment, and verifies that the\n// registration function returns its argument.\nMyEnvironment* RegisterTestEnv() {\n  MyEnvironment* const env = new MyEnvironment;\n  Check(testing::AddGlobalTestEnvironment(env) == env,\n        \"AddGlobalTestEnvironment() should return its argument.\");\n  return env;\n",
                      "markdown": "`// Registers a global test environment, and verifies that the\n// registration function returns its argument.\nMyEnvironment* RegisterTestEnv() {\n  MyEnvironment* const env = new MyEnvironment;\n  Check(testing::AddGlobalTestEnvironment(env) == env,\n        \"AddGlobalTestEnvironment() should return its argument.\");\n  return env;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-output-test_.cc"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 56,
                  "endLine": 336,
                  "endColumn": 60,
                  "snippet": {
                    "text": "     DISABLED_AlsoRunDisabledTestsFlagSuppressesWarning) {\n  // This test body is intentionally empty.  Its sole purpose is for\n  // verifying that the --gtest_also_run_disabled_tests flag\n  // suppresses the \"YOU HAVE 12 DISABLED TESTS\" warning at the end of\n  // the test output.\n}\n\n",
                    "rendered": {
                      "text": "     DISABLED_AlsoRunDisabledTestsFlagSuppressesWarning) {\n  // This test body is intentionally empty.  Its sole purpose is for\n  // verifying that the --gtest_also_run_disabled_tests flag\n  // suppresses the \"YOU HAVE 12 DISABLED TESTS\" warning at the end of\n  // the test output.\n}\n\n",
                      "markdown": "`     DISABLED_AlsoRunDisabledTestsFlagSuppressesWarning) {\n  // This test body is intentionally empty.  Its sole purpose is for\n  // verifying that the --gtest_also_run_disabled_tests flag\n  // suppresses the \"YOU HAVE 12 DISABLED TESTS\" warning at the end of\n  // the test output.\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-output-test_.cc"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 13,
                  "endLine": 197,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    ADD_FAILURE() << \"This failure is expected, and should have a trace.\";\n  }\n\n  // Once the control leaves the scope of the SCOPED_TRACE(), there\n  // should be no trace again.\n  ADD_FAILURE() << \"This failure is expected, and shouldn't have a trace.\";\n}\n",
                    "rendered": {
                      "text": "    ADD_FAILURE() << \"This failure is expected, and should have a trace.\";\n  }\n\n  // Once the control leaves the scope of the SCOPED_TRACE(), there\n  // should be no trace again.\n  ADD_FAILURE() << \"This failure is expected, and shouldn't have a trace.\";\n}\n",
                      "markdown": "`    ADD_FAILURE() << \"This failure is expected, and should have a trace.\";\n  }\n\n  // Once the control leaves the scope of the SCOPED_TRACE(), there\n  // should be no trace again.\n  ADD_FAILURE() << \"This failure is expected, and shouldn't have a trace.\";\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-output-test_.cc"
                },
                "region": {
                  "startLine": 1025,
                  "startColumn": 34,
                  "endLine": 1025,
                  "endColumn": 42,
                  "snippet": {
                    "text": "  GTEST_FLAG_SET(print_time, false);\n\n  // We just run the tests, knowing some of them are intended to fail.\n  // We will use a separate Python script to compare the output of\n  // this program with the golden file.\n\n  // It's hard to test InitGoogleTest() directly, as it has many\n",
                    "rendered": {
                      "text": "  GTEST_FLAG_SET(print_time, false);\n\n  // We just run the tests, knowing some of them are intended to fail.\n  // We will use a separate Python script to compare the output of\n  // this program with the golden file.\n\n  // It's hard to test InitGoogleTest() directly, as it has many\n",
                      "markdown": "`  GTEST_FLAG_SET(print_time, false);\n\n  // We just run the tests, knowing some of them are intended to fail.\n  // We will use a separate Python script to compare the output of\n  // this program with the golden file.\n\n  // It's hard to test InitGoogleTest() directly, as it has many\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-output-test_.cc"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 41,
                  "endLine": 140,
                  "endColumn": 49,
                  "snippet": {
                    "text": "  FAIL() << \"This should never be reached.\";\n}\n\n// Tests HasFatalFailure() after a failed EXPECT check.\nTEST(FatalFailureTest, NonfatalFailureInSubroutine) {\n  printf(\"(expecting a failure on false)\\n\");\n  EXPECT_TRUE(false);               // Generates a nonfatal failure\n",
                    "rendered": {
                      "text": "  FAIL() << \"This should never be reached.\";\n}\n\n// Tests HasFatalFailure() after a failed EXPECT check.\nTEST(FatalFailureTest, NonfatalFailureInSubroutine) {\n  printf(\"(expecting a failure on false)\\n\");\n  EXPECT_TRUE(false);               // Generates a nonfatal failure\n",
                      "markdown": "`  FAIL() << \"This should never be reached.\";\n}\n\n// Tests HasFatalFailure() after a failed EXPECT check.\nTEST(FatalFailureTest, NonfatalFailureInSubroutine) {\n  printf(\"(expecting a failure on false)\\n\");\n  EXPECT_TRUE(false);               // Generates a nonfatal failure\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-filepath-test.cc"
                },
                "region": {
                  "startLine": 450,
                  "startColumn": 24,
                  "endLine": 450,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n#if GTEST_HAS_ALT_PATH_SEP_\n\n// Tests that separators at the end of the string are normalized\n// regardless of their combination (e.g. \"foo\\\" ==\"foo/\\\" ==\n// \"foo\\\\/\").\nTEST(NormalizeTest, MixAlternateSeparatorAtStringEnd) {\n",
                    "rendered": {
                      "text": "\n#if GTEST_HAS_ALT_PATH_SEP_\n\n// Tests that separators at the end of the string are normalized\n// regardless of their combination (e.g. \"foo\\\" ==\"foo/\\\" ==\n// \"foo\\\\/\").\nTEST(NormalizeTest, MixAlternateSeparatorAtStringEnd) {\n",
                      "markdown": "`\n#if GTEST_HAS_ALT_PATH_SEP_\n\n// Tests that separators at the end of the string are normalized\n// regardless of their combination (e.g. \"foo\\\" ==\"foo/\\\" ==\n// \"foo\\\\/\").\nTEST(NormalizeTest, MixAlternateSeparatorAtStringEnd) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-filepath-test.cc"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 4,
                  "endLine": 375,
                  "endColumn": 10,
                  "snippet": {
                    "text": "#ifdef GTEST_OS_WINDOWS\nTEST(DirectoryTest, RootOfWrongDriveDoesNotExists) {\n  const int saved_drive_ = _getdrive();\n  // Find a drive that doesn't exist. Start with 'Z' to avoid common ones.\n  for (char drive = 'Z'; drive >= 'A'; drive--)\n    if (_chdrive(drive - 'A' + 1) == -1) {\n      char non_drive[_MAX_PATH];  // NOLINT\n",
                    "rendered": {
                      "text": "#ifdef GTEST_OS_WINDOWS\nTEST(DirectoryTest, RootOfWrongDriveDoesNotExists) {\n  const int saved_drive_ = _getdrive();\n  // Find a drive that doesn't exist. Start with 'Z' to avoid common ones.\n  for (char drive = 'Z'; drive >= 'A'; drive--)\n    if (_chdrive(drive - 'A' + 1) == -1) {\n      char non_drive[_MAX_PATH];  // NOLINT\n",
                      "markdown": "`#ifdef GTEST_OS_WINDOWS\nTEST(DirectoryTest, RootOfWrongDriveDoesNotExists) {\n  const int saved_drive_ = _getdrive();\n  // Find a drive that doesn't exist. Start with 'Z' to avoid common ones.\n  for (char drive = 'Z'; drive >= 'A'; drive--)\n    if (_chdrive(drive - 'A' + 1) == -1) {\n      char non_drive[_MAX_PATH];  // NOLINT\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_skip_environment_check_output_test.py"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 4,
                  "endLine": 32,
                  "endColumn": 12,
                  "snippet": {
                    "text": "# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\"\"\"Tests Google Test's gtest skip in environment setup  behavior.\n\nThis script invokes gtest_skip_in_environment_setup_test_ and verifies its\noutput.\n\"\"\"\n\n",
                    "rendered": {
                      "text": "# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\"\"\"Tests Google Test's gtest skip in environment setup  behavior.\n\nThis script invokes gtest_skip_in_environment_setup_test_ and verifies its\noutput.\n\"\"\"\n\n",
                      "markdown": "`# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\"\"\"Tests Google Test's gtest skip in environment setup  behavior.\n\nThis script invokes gtest_skip_in_environment_setup_test_ and verifies its\noutput.\n\"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_xml_output_unittest.py"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 20,
                  "endLine": 170,
                  "endColumn": 72,
                  "snippet": {
                    "text": "         <property name=\"key_for_utility_int\" value=\"1\"/>\n       </properties>\n     </testcase>\n     <testcase name=\"ExternalUtilityThatCallsRecordStringValuedProperty\" file=\"gtest_xml_output_unittest_.cc\" line=\"157\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"NoFixtureTest\">\n       <properties>\n         <property name=\"key_for_utility_string\" value=\"1\"/>\n       </properties>\n",
                    "rendered": {
                      "text": "         <property name=\"key_for_utility_int\" value=\"1\"/>\n       </properties>\n     </testcase>\n     <testcase name=\"ExternalUtilityThatCallsRecordStringValuedProperty\" file=\"gtest_xml_output_unittest_.cc\" line=\"157\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"NoFixtureTest\">\n       <properties>\n         <property name=\"key_for_utility_string\" value=\"1\"/>\n       </properties>\n",
                      "markdown": "`         <property name=\"key_for_utility_int\" value=\"1\"/>\n       </properties>\n     </testcase>\n     <testcase name=\"ExternalUtilityThatCallsRecordStringValuedProperty\" file=\"gtest_xml_output_unittest_.cc\" line=\"157\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"NoFixtureTest\">\n       <properties>\n         <property name=\"key_for_utility_string\" value=\"1\"/>\n       </properties>\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_xml_output_unittest.py"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 20,
                  "endLine": 165,
                  "endColumn": 69,
                  "snippet": {
                    "text": "         <property name=\"key\" value=\"1\"/>\n       </properties>\n     </testcase>\n     <testcase name=\"ExternalUtilityThatCallsRecordIntValuedProperty\" file=\"gtest_xml_output_unittest_.cc\" line=\"153\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"NoFixtureTest\">\n       <properties>\n         <property name=\"key_for_utility_int\" value=\"1\"/>\n       </properties>\n",
                    "rendered": {
                      "text": "         <property name=\"key\" value=\"1\"/>\n       </properties>\n     </testcase>\n     <testcase name=\"ExternalUtilityThatCallsRecordIntValuedProperty\" file=\"gtest_xml_output_unittest_.cc\" line=\"153\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"NoFixtureTest\">\n       <properties>\n         <property name=\"key_for_utility_int\" value=\"1\"/>\n       </properties>\n",
                      "markdown": "`         <property name=\"key\" value=\"1\"/>\n       </properties>\n     </testcase>\n     <testcase name=\"ExternalUtilityThatCallsRecordIntValuedProperty\" file=\"gtest_xml_output_unittest_.cc\" line=\"153\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"NoFixtureTest\">\n       <properties>\n         <property name=\"key_for_utility_int\" value=\"1\"/>\n       </properties>\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_xml_output_unittest.py"
                },
                "region": {
                  "startLine": 299,
                  "startColumn": 54,
                  "endLine": 300,
                  "snippet": {
                    "text": "    )\n\n    time_delta = abs(datetime.datetime.now() - date_time_from_xml)\n    # timestamp value should be near the current local time\n    self.assertLess(time_delta, datetime.timedelta(seconds=600))\n    actual.unlink()\n\n  def testDefaultOutputFile(self):\n",
                    "rendered": {
                      "text": "    )\n\n    time_delta = abs(datetime.datetime.now() - date_time_from_xml)\n    # timestamp value should be near the current local time\n    self.assertLess(time_delta, datetime.timedelta(seconds=600))\n    actual.unlink()\n\n  def testDefaultOutputFile(self):\n",
                      "markdown": "`    )\n\n    time_delta = abs(datetime.datetime.now() - date_time_from_xml)\n    # timestamp value should be near the current local time\n    self.assertLess(time_delta, datetime.timedelta(seconds=600))\n    actual.unlink()\n\n  def testDefaultOutputFile(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_xml_output_unittest.py"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 28,
                  "endLine": 40,
                  "snippet": {
                    "text": "import os\nimport re\nimport sys\nfrom xml.dom import minidom, Node\n\nfrom googletest.test import gtest_test_utils\nfrom googletest.test import gtest_xml_test_utils\n\n",
                    "rendered": {
                      "text": "import os\nimport re\nimport sys\nfrom xml.dom import minidom, Node\n\nfrom googletest.test import gtest_test_utils\nfrom googletest.test import gtest_xml_test_utils\n\n",
                      "markdown": "`import os\nimport re\nimport sys\nfrom xml.dom import minidom, Node\n\nfrom googletest.test import gtest_test_utils\nfrom googletest.test import gtest_xml_test_utils\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-color-test.py"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 13,
                  "endLine": 45,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n\n  if value is not None:\n    os.environ[env_var] = value\n",
                    "rendered": {
                      "text": "\n\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n\n  if value is not None:\n    os.environ[env_var] = value\n",
                      "markdown": "`\n\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n\n  if value is not None:\n    os.environ[env_var] = value\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-env-var-test.py"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 66,
                  "endLine": 72,
                  "endColumn": 71,
                  "snippet": {
                    "text": "\n\ndef TestFlag(flag, test_val, default_val):\n  \"\"\"Verifies that the given flag is affected by the corresponding env var.\"\"\"\n\n  env_var = 'GTEST_' + flag.upper()\n  SetEnvVar(env_var, test_val)\n",
                    "rendered": {
                      "text": "\n\ndef TestFlag(flag, test_val, default_val):\n  \"\"\"Verifies that the given flag is affected by the corresponding env var.\"\"\"\n\n  env_var = 'GTEST_' + flag.upper()\n  SetEnvVar(env_var, test_val)\n",
                      "markdown": "`\n\ndef TestFlag(flag, test_val, default_val):\n  \"\"\"Verifies that the given flag is affected by the corresponding env var.\"\"\"\n\n  env_var = 'GTEST_' + flag.upper()\n  SetEnvVar(env_var, test_val)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-env-var-test.py"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 13,
                  "endLine": 54,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n\n  if value is not None:\n    environ[env_var] = value\n",
                    "rendered": {
                      "text": "\n\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n\n  if value is not None:\n    environ[env_var] = value\n",
                      "markdown": "`\n\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n\n  if value is not None:\n    environ[env_var] = value\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-listener-test.cc"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 15,
                  "endLine": 274,
                  "endColumn": 53,
                  "snippet": {
                    "text": "  UnitTest::GetInstance()->listeners().Append(\n      new EventRecordingListener2(\"3rd\"));\n\n  AddGlobalTestEnvironment(new EnvironmentInvocationCatcher);\n\n  GTEST_CHECK_(events.empty())\n      << \"AddGlobalTestEnvironment should not generate any events itself.\";\n",
                    "rendered": {
                      "text": "  UnitTest::GetInstance()->listeners().Append(\n      new EventRecordingListener2(\"3rd\"));\n\n  AddGlobalTestEnvironment(new EnvironmentInvocationCatcher);\n\n  GTEST_CHECK_(events.empty())\n      << \"AddGlobalTestEnvironment should not generate any events itself.\";\n",
                      "markdown": "`  UnitTest::GetInstance()->listeners().Append(\n      new EventRecordingListener2(\"3rd\"));\n\n  AddGlobalTestEnvironment(new EnvironmentInvocationCatcher);\n\n  GTEST_CHECK_(events.empty())\n      << \"AddGlobalTestEnvironment should not generate any events itself.\";\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-listener-test.cc"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 27,
                  "endLine": 235,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n}  // namespace testing\n\nusing ::testing::internal::EnvironmentInvocationCatcher;\nusing ::testing::internal::EventRecordingListener;\nusing ::testing::internal::EventRecordingListener2;\n\n",
                    "rendered": {
                      "text": "\n}  // namespace testing\n\nusing ::testing::internal::EnvironmentInvocationCatcher;\nusing ::testing::internal::EventRecordingListener;\nusing ::testing::internal::EventRecordingListener2;\n\n",
                      "markdown": "`\n}  // namespace testing\n\nusing ::testing::internal::EnvironmentInvocationCatcher;\nusing ::testing::internal::EventRecordingListener;\nusing ::testing::internal::EventRecordingListener2;\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-listener-test.cc"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 6,
                  "endLine": 197,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  std::string name_;\n};\n\nclass EnvironmentInvocationCatcher : public Environment {\n protected:\n  void SetUp() override { g_events->push_back(\"Environment::SetUp\"); }\n\n",
                    "rendered": {
                      "text": "  std::string name_;\n};\n\nclass EnvironmentInvocationCatcher : public Environment {\n protected:\n  void SetUp() override { g_events->push_back(\"Environment::SetUp\"); }\n\n",
                      "markdown": "`  std::string name_;\n};\n\nclass EnvironmentInvocationCatcher : public Environment {\n protected:\n  void SetUp() override { g_events->push_back(\"Environment::SetUp\"); }\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-listener-test.cc"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 64,
                  "endLine": 32,
                  "endColumn": 68,
                  "snippet": {
                    "text": "//\n// The Google C++ Testing and Mocking Framework (Google Test)\n//\n// This file verifies Google Test event listeners receive events at the\n// right times.\n\n#include <string>\n",
                    "rendered": {
                      "text": "//\n// The Google C++ Testing and Mocking Framework (Google Test)\n//\n// This file verifies Google Test event listeners receive events at the\n// right times.\n\n#include <string>\n",
                      "markdown": "`//\n// The Google C++ Testing and Mocking Framework (Google Test)\n//\n// This file verifies Google Test event listeners receive events at the\n// right times.\n\n#include <string>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_xml_outfiles_test.py"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 28,
                  "endLine": 36,
                  "snippet": {
                    "text": "\"\"\"Unit test for the gtest_xml_output module.\"\"\"\n\nimport os\nfrom xml.dom import minidom, Node\nfrom googletest.test import gtest_test_utils\nfrom googletest.test import gtest_xml_test_utils\n\nGTEST_OUTPUT_SUBDIR = \"xml_outfiles\"\n",
                    "rendered": {
                      "text": "\"\"\"Unit test for the gtest_xml_output module.\"\"\"\n\nimport os\nfrom xml.dom import minidom, Node\nfrom googletest.test import gtest_test_utils\nfrom googletest.test import gtest_xml_test_utils\n\nGTEST_OUTPUT_SUBDIR = \"xml_outfiles\"\n",
                      "markdown": "`\"\"\"Unit test for the gtest_xml_output module.\"\"\"\n\nimport os\nfrom xml.dom import minidom, Node\nfrom googletest.test import gtest_test_utils\nfrom googletest.test import gtest_xml_test_utils\n\nGTEST_OUTPUT_SUBDIR = \"xml_outfiles\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-list-tests-unittest_.cc"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 15,
                  "endLine": 96,
                  "endColumn": 80,
                  "snippet": {
                    "text": "               \"very\\nloooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooong line\")));  // NOLINT\n\n// A group of typed tests.\n",
                    "rendered": {
                      "text": "               \"very\\nloooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooong line\")));  // NOLINT\n\n// A group of typed tests.\n",
                      "markdown": "`               \"very\\nloooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooong line\")));  // NOLINT\n\n// A group of typed tests.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-list-tests-unittest_.cc"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 15,
                  "endLine": 95,
                  "endColumn": 80,
                  "snippet": {
                    "text": "        MyType(\"a \"\n               \"very\\nloooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooong line\")));  // NOLINT\n\n",
                    "rendered": {
                      "text": "        MyType(\"a \"\n               \"very\\nloooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooong line\")));  // NOLINT\n\n",
                      "markdown": "`        MyType(\"a \"\n               \"very\\nloooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooong line\")));  // NOLINT\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-list-tests-unittest_.cc"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 15,
                  "endLine": 94,
                  "endColumn": 80,
                  "snippet": {
                    "text": "        MyType(\"one line\"), MyType(\"two\\nlines\"),\n        MyType(\"a \"\n               \"very\\nloooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooong line\")));  // NOLINT\n",
                    "rendered": {
                      "text": "        MyType(\"one line\"), MyType(\"two\\nlines\"),\n        MyType(\"a \"\n               \"very\\nloooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooong line\")));  // NOLINT\n",
                      "markdown": "`        MyType(\"one line\"), MyType(\"two\\nlines\"),\n        MyType(\"a \"\n               \"very\\nloooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n               \"ooooong line\")));  // NOLINT\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_test_utils.py"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 28,
                  "endLine": 31,
                  "endColumn": 32,
                  "snippet": {
                    "text": "# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\"\"\"Unit test utilities for Google C++ Testing and Mocking Framework.\"\"\"\n# Suppresses the 'Import not at the top of the file' lint complaint.\n# pylint: disable=g-import-not-at-top\n\nimport os\n",
                    "rendered": {
                      "text": "# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\"\"\"Unit test utilities for Google C++ Testing and Mocking Framework.\"\"\"\n# Suppresses the 'Import not at the top of the file' lint complaint.\n# pylint: disable=g-import-not-at-top\n\nimport os\n",
                      "markdown": "`# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\"\"\"Unit test utilities for Google C++ Testing and Mocking Framework.\"\"\"\n# Suppresses the 'Import not at the top of the file' lint complaint.\n# pylint: disable=g-import-not-at-top\n\nimport os\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_test_utils.py"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 3,
                  "endLine": 258,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  # --gtest_* flags.\n  _ParseAndStripGTestFlags(sys.argv)\n  # The tested binaries should not be writing XML output files unless the\n  # script explicitly instructs them to.\n  if GTEST_OUTPUT_VAR_NAME in os.environ:\n    del os.environ[GTEST_OUTPUT_VAR_NAME]\n\n",
                    "rendered": {
                      "text": "  # --gtest_* flags.\n  _ParseAndStripGTestFlags(sys.argv)\n  # The tested binaries should not be writing XML output files unless the\n  # script explicitly instructs them to.\n  if GTEST_OUTPUT_VAR_NAME in os.environ:\n    del os.environ[GTEST_OUTPUT_VAR_NAME]\n\n",
                      "markdown": "`  # --gtest_* flags.\n  _ParseAndStripGTestFlags(sys.argv)\n  # The tested binaries should not be writing XML output files unless the\n  # script explicitly instructs them to.\n  if GTEST_OUTPUT_VAR_NAME in os.environ:\n    del os.environ[GTEST_OUTPUT_VAR_NAME]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_test_utils.py"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 18,
                  "endLine": 167,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n  if not os.path.exists(path):\n    message = (\n        'Unable to find the test binary \"%s\". Please make sure to provide\\n'\n        'a path to the binary via the --build_dir flag or the BUILD_DIR\\n'\n        'environment variable.' % path\n    )\n",
                    "rendered": {
                      "text": "\n  if not os.path.exists(path):\n    message = (\n        'Unable to find the test binary \"%s\". Please make sure to provide\\n'\n        'a path to the binary via the --build_dir flag or the BUILD_DIR\\n'\n        'environment variable.' % path\n    )\n",
                      "markdown": "`\n  if not os.path.exists(path):\n    message = (\n        'Unable to find the test binary \"%s\". Please make sure to provide\\n'\n        'a path to the binary via the --build_dir flag or the BUILD_DIR\\n'\n        'environment variable.' % path\n    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_test_utils.py"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 58,
                  "endLine": 151,
                  "endColumn": 66,
                  "snippet": {
                    "text": "  doesn't exist.\n\n  Args:\n    executable_name: name of the test binary that the test script runs.\n    build_dir:       directory where to look for executables, by default the\n      result of GetBuildDir().\n\n",
                    "rendered": {
                      "text": "  doesn't exist.\n\n  Args:\n    executable_name: name of the test binary that the test script runs.\n    build_dir:       directory where to look for executables, by default the\n      result of GetBuildDir().\n\n",
                      "markdown": "`  doesn't exist.\n\n  Args:\n    executable_name: name of the test binary that the test script runs.\n    build_dir:       directory where to look for executables, by default the\n      result of GetBuildDir().\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_test_utils.py"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 35,
                  "endLine": 31,
                  "endColumn": 40,
                  "snippet": {
                    "text": "# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\"\"\"Unit test utilities for Google C++ Testing and Mocking Framework.\"\"\"\n# Suppresses the 'Import not at the top of the file' lint complaint.\n# pylint: disable=g-import-not-at-top\n\nimport os\n",
                    "rendered": {
                      "text": "# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\"\"\"Unit test utilities for Google C++ Testing and Mocking Framework.\"\"\"\n# Suppresses the 'Import not at the top of the file' lint complaint.\n# pylint: disable=g-import-not-at-top\n\nimport os\n",
                      "markdown": "`# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\"\"\"Unit test utilities for Google C++ Testing and Mocking Framework.\"\"\"\n# Suppresses the 'Import not at the top of the file' lint complaint.\n# pylint: disable=g-import-not-at-top\n\nimport os\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/gtest-printers.h"
                },
                "region": {
                  "startLine": 1040,
                  "startColumn": 41,
                  "endLine": 1040,
                  "endColumn": 46,
                  "snippet": {
                    "text": "class UniversalTersePrinter<std::reference_wrapper<T>> {\n public:\n  static void Print(std::reference_wrapper<T> value, ::std::ostream* os) {\n    UniversalTersePrinter<T>::Print(value.get(), os);\n  }\n};\ntemplate <typename T, size_t N>\n",
                    "rendered": {
                      "text": "class UniversalTersePrinter<std::reference_wrapper<T>> {\n public:\n  static void Print(std::reference_wrapper<T> value, ::std::ostream* os) {\n    UniversalTersePrinter<T>::Print(value.get(), os);\n  }\n};\ntemplate <typename T, size_t N>\n",
                      "markdown": "`class UniversalTersePrinter<std::reference_wrapper<T>> {\n public:\n  static void Print(std::reference_wrapper<T> value, ::std::ostream* os) {\n    UniversalTersePrinter<T>::Print(value.get(), os);\n  }\n};\ntemplate <typename T, size_t N>\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/gtest-printers.h"
                },
                "region": {
                  "startLine": 769,
                  "startColumn": 44,
                  "endLine": 769,
                  "endColumn": 49,
                  "snippet": {
                    "text": "  if (ptr == nullptr) {\n    *os << \"(nullptr)\";\n  } else {\n    *os << \"(ptr = \" << (VoidifyPointer)(ptr.get()) << \", value = \";\n    UniversalPrinter<T>::Print(*ptr, os);\n    *os << \")\";\n  }\n",
                    "rendered": {
                      "text": "  if (ptr == nullptr) {\n    *os << \"(nullptr)\";\n  } else {\n    *os << \"(ptr = \" << (VoidifyPointer)(ptr.get()) << \", value = \";\n    UniversalPrinter<T>::Print(*ptr, os);\n    *os << \")\";\n  }\n",
                      "markdown": "`  if (ptr == nullptr) {\n    *os << \"(nullptr)\";\n  } else {\n    *os << \"(ptr = \" << (VoidifyPointer)(ptr.get()) << \", value = \";\n    UniversalPrinter<T>::Print(*ptr, os);\n    *os << \")\";\n  }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/gtest-printers.h"
                },
                "region": {
                  "startLine": 759,
                  "startColumn": 38,
                  "endLine": 759,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    *os << \"(nullptr)\";\n  } else {\n    // We can't print the value. Just print the pointer..\n    *os << \"(\" << (VoidifyPointer)(ptr.get()) << \")\";\n  }\n}\ntemplate <typename T, typename Ptr,\n",
                    "rendered": {
                      "text": "    *os << \"(nullptr)\";\n  } else {\n    // We can't print the value. Just print the pointer..\n    *os << \"(\" << (VoidifyPointer)(ptr.get()) << \")\";\n  }\n}\ntemplate <typename T, typename Ptr,\n",
                      "markdown": "`    *os << \"(nullptr)\";\n  } else {\n    // We can't print the value. Just print the pointer..\n    *os << \"(\" << (VoidifyPointer)(ptr.get()) << \")\";\n  }\n}\ntemplate <typename T, typename Ptr,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/gtest-printers.h"
                },
                "region": {
                  "startLine": 745,
                  "startColumn": 33,
                  "endLine": 745,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\ntemplate <typename T>\nvoid PrintTo(std::reference_wrapper<T> ref, ::std::ostream* os) {\n  UniversalPrinter<T&>::Print(ref.get(), os);\n}\n\ninline const void* VoidifyPointer(const void* p) { return p; }\n",
                    "rendered": {
                      "text": "\ntemplate <typename T>\nvoid PrintTo(std::reference_wrapper<T> ref, ::std::ostream* os) {\n  UniversalPrinter<T&>::Print(ref.get(), os);\n}\n\ninline const void* VoidifyPointer(const void* p) { return p; }\n",
                      "markdown": "`\ntemplate <typename T>\nvoid PrintTo(std::reference_wrapper<T> ref, ::std::ostream* os) {\n  UniversalPrinter<T&>::Print(ref.get(), os);\n}\n\ninline const void* VoidifyPointer(const void* p) { return p; }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/gtest-printers.h"
                },
                "region": {
                  "startLine": 943,
                  "startColumn": 21,
                  "endLine": 943,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#endif  // GTEST_INTERNAL_HAS_VARIANT\n\n// UniversalPrintArray(begin, len, os) prints an array of 'len'\n// elements, starting at address 'begin'.\ntemplate <typename T>\nvoid UniversalPrintArray(const T* begin, size_t len, ::std::ostream* os) {\n  if (len == 0) {\n",
                    "rendered": {
                      "text": "#endif  // GTEST_INTERNAL_HAS_VARIANT\n\n// UniversalPrintArray(begin, len, os) prints an array of 'len'\n// elements, starting at address 'begin'.\ntemplate <typename T>\nvoid UniversalPrintArray(const T* begin, size_t len, ::std::ostream* os) {\n  if (len == 0) {\n",
                      "markdown": "`#endif  // GTEST_INTERNAL_HAS_VARIANT\n\n// UniversalPrintArray(begin, len, os) prints an array of 'len'\n// elements, starting at address 'begin'.\ntemplate <typename T>\nvoid UniversalPrintArray(const T* begin, size_t len, ::std::ostream* os) {\n  if (len == 0) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/README.md"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 43,
                  "endLine": 138,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\nGoogleTest can be used in diverse environments. The default configuration may\nnot work (or may not work well) out of the box in some environments. However,\nyou can easily tweak GoogleTest by defining control macros on the compiler\ncommand line. Generally, these macros are named like `GTEST_XYZ` and you define\nthem to either 1 or 0 to enable or disable a certain feature.\n\n",
                    "rendered": {
                      "text": "\nGoogleTest can be used in diverse environments. The default configuration may\nnot work (or may not work well) out of the box in some environments. However,\nyou can easily tweak GoogleTest by defining control macros on the compiler\ncommand line. Generally, these macros are named like `GTEST_XYZ` and you define\nthem to either 1 or 0 to enable or disable a certain feature.\n\n",
                      "markdown": "`\nGoogleTest can be used in diverse environments. The default configuration may\nnot work (or may not work well) out of the box in some environments. However,\nyou can easily tweak GoogleTest by defining control macros on the compiler\ncommand line. Generally, these macros are named like `GTEST_XYZ` and you define\nthem to either 1 or 0 to enable or disable a certain feature.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/README.md"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 40,
                  "endLine": 96,
                  "endColumn": 48,
                  "snippet": {
                    "text": "include(FetchContent)\nFetchContent_Declare(\n  googletest\n  # Specify the commit you depend on and update it regularly.\n  URL https://github.com/google/googletest/archive/5376968f6948923e2411081fd9372e71a59d8e77.zip\n)\n# For Windows: Prevent overriding the parent project's compiler/linker settings\n",
                    "rendered": {
                      "text": "include(FetchContent)\nFetchContent_Declare(\n  googletest\n  # Specify the commit you depend on and update it regularly.\n  URL https://github.com/google/googletest/archive/5376968f6948923e2411081fd9372e71a59d8e77.zip\n)\n# For Windows: Prevent overriding the parent project's compiler/linker settings\n",
                      "markdown": "`include(FetchContent)\nFetchContent_Declare(\n  googletest\n  # Specify the commit you depend on and update it regularly.\n  URL https://github.com/google/googletest/archive/5376968f6948923e2411081fd9372e71a59d8e77.zip\n)\n# For Windows: Prevent overriding the parent project's compiler/linker settings\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/README.md"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 61,
                  "endLine": 75,
                  "endColumn": 65,
                  "snippet": {
                    "text": "particularly useful on Windows. Making GoogleTest's source code available to the\nmain build can be done a few different ways:\n\n*   Download the GoogleTest source code manually and place it at a known\n    location. This is the least flexible approach and can make it more difficult\n    to use with continuous integration systems, etc.\n*   Embed the GoogleTest source code as a direct copy in the main project's\n",
                    "rendered": {
                      "text": "particularly useful on Windows. Making GoogleTest's source code available to the\nmain build can be done a few different ways:\n\n*   Download the GoogleTest source code manually and place it at a known\n    location. This is the least flexible approach and can make it more difficult\n    to use with continuous integration systems, etc.\n*   Embed the GoogleTest source code as a direct copy in the main project's\n",
                      "markdown": "`particularly useful on Windows. Making GoogleTest's source code available to the\nmain build can be done a few different ways:\n\n*   Download the GoogleTest source code manually and place it at a known\n    location. This is the least flexible approach and can make it more difficult\n    to use with continuous integration systems, etc.\n*   Embed the GoogleTest source code as a direct copy in the main project's\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/README.md"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 28,
                  "endLine": 82,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    source tree. This is often the simplest approach, but is also the hardest to\n    keep up to date. Some organizations may not permit this method.\n*   Add GoogleTest as a git submodule or equivalent. This may not always be\n    possible or appropriate. Git submodules, for example, have their own set of\n    advantages and drawbacks.\n*   Use CMake to download GoogleTest as part of the build's configure step. This\n    approach doesn't have the limitations of the other methods.\n",
                    "rendered": {
                      "text": "    source tree. This is often the simplest approach, but is also the hardest to\n    keep up to date. Some organizations may not permit this method.\n*   Add GoogleTest as a git submodule or equivalent. This may not always be\n    possible or appropriate. Git submodules, for example, have their own set of\n    advantages and drawbacks.\n*   Use CMake to download GoogleTest as part of the build's configure step. This\n    approach doesn't have the limitations of the other methods.\n",
                      "markdown": "`    source tree. This is often the simplest approach, but is also the hardest to\n    keep up to date. Some organizations may not permit this method.\n*   Add GoogleTest as a git submodule or equivalent. This may not always be\n    possible or appropriate. Git submodules, for example, have their own set of\n    advantages and drawbacks.\n*   Use CMake to download GoogleTest as part of the build's configure step. This\n    approach doesn't have the limitations of the other methods.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/README.md"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 23,
                  "endLine": 81,
                  "endColumn": 28,
                  "snippet": {
                    "text": "*   Embed the GoogleTest source code as a direct copy in the main project's\n    source tree. This is often the simplest approach, but is also the hardest to\n    keep up to date. Some organizations may not permit this method.\n*   Add GoogleTest as a git submodule or equivalent. This may not always be\n    possible or appropriate. Git submodules, for example, have their own set of\n    advantages and drawbacks.\n*   Use CMake to download GoogleTest as part of the build's configure step. This\n",
                    "rendered": {
                      "text": "*   Embed the GoogleTest source code as a direct copy in the main project's\n    source tree. This is often the simplest approach, but is also the hardest to\n    keep up to date. Some organizations may not permit this method.\n*   Add GoogleTest as a git submodule or equivalent. This may not always be\n    possible or appropriate. Git submodules, for example, have their own set of\n    advantages and drawbacks.\n*   Use CMake to download GoogleTest as part of the build's configure step. This\n",
                      "markdown": "`*   Embed the GoogleTest source code as a direct copy in the main project's\n    source tree. This is often the simplest approach, but is also the hardest to\n    keep up to date. Some organizations may not permit this method.\n*   Add GoogleTest as a git submodule or equivalent. This may not always be\n    possible or appropriate. Git submodules, for example, have their own set of\n    advantages and drawbacks.\n*   Use CMake to download GoogleTest as part of the build's configure step. This\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/README.md"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 3,
                  "endLine": 28,
                  "endColumn": 4,
                  "snippet": {
                    "text": "When building GoogleTest as a standalone project, the typical workflow starts\nwith\n\n```\ngit clone https://github.com/google/googletest.git -b v1.15.2\ncd googletest        # Main directory of the cloned repository.\nmkdir build          # Create a directory to hold the build output.\ncd build\n",
                    "rendered": {
                      "text": "When building GoogleTest as a standalone project, the typical workflow starts\nwith\n\n```\ngit clone https://github.com/google/googletest.git -b v1.15.2\ncd googletest        # Main directory of the cloned repository.\nmkdir build          # Create a directory to hold the build output.\ncd build\n",
                      "markdown": "`When building GoogleTest as a standalone project, the typical workflow starts\nwith\n\n```\ngit clone https://github.com/google/googletest.git -b v1.15.2\ncd googletest        # Main directory of the cloned repository.\nmkdir build          # Create a directory to hold the build output.\ncd build\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/README.md"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 35,
                  "endLine": 12,
                  "snippet": {
                    "text": "\n### Build with CMake\n\nGoogleTest comes with a CMake build script\n([CMakeLists.txt](https://github.com/google/googletest/blob/main/CMakeLists.txt))\nthat can be used on a wide range of platforms (\"C\" stands for cross-platform.).\nIf you don't have CMake installed already, you can download it for free from\n<https://cmake.org/>.\n",
                    "rendered": {
                      "text": "\n### Build with CMake\n\nGoogleTest comes with a CMake build script\n([CMakeLists.txt](https://github.com/google/googletest/blob/main/CMakeLists.txt))\nthat can be used on a wide range of platforms (\"C\" stands for cross-platform.).\nIf you don't have CMake installed already, you can download it for free from\n<https://cmake.org/>.\n",
                      "markdown": "`\n### Build with CMake\n\nGoogleTest comes with a CMake build script\n([CMakeLists.txt](https://github.com/google/googletest/blob/main/CMakeLists.txt))\nthat can be used on a wide range of platforms (\"C\" stands for cross-platform.).\nIf you don't have CMake installed already, you can download it for free from\n<https://cmake.org/>.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/README.md"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 15,
                  "endLine": 6,
                  "endColumn": 21,
                  "snippet": {
                    "text": "#### Setup\n\nTo build GoogleTest and your tests that use it, you need to tell your build\nsystem where to find its headers and source files. The exact way to do it\ndepends on which build system you use, and is usually straightforward.\n\n### Build with CMake\n",
                    "rendered": {
                      "text": "#### Setup\n\nTo build GoogleTest and your tests that use it, you need to tell your build\nsystem where to find its headers and source files. The exact way to do it\ndepends on which build system you use, and is usually straightforward.\n\n### Build with CMake\n",
                      "markdown": "`#### Setup\n\nTo build GoogleTest and your tests that use it, you need to tell your build\nsystem where to find its headers and source files. The exact way to do it\ndepends on which build system you use, and is usually straightforward.\n\n### Build with CMake\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/testing.md"
                },
                "region": {
                  "startLine": 1377,
                  "startColumn": 73,
                  "endLine": 1378,
                  "snippet": {
                    "text": "function pointer that creates a new instance of the `Test` object. It handles\nownership to the caller. The signature of the callable is `Fixture*()`, where\n`Fixture` is the test fixture class for the test. All tests registered with the\nsame `test_suite_name` must return the same fixture type. This is checked at\nruntime.\n\nThe framework will infer the fixture class from the factory and will call the\n`SetUpTestSuite` and `TearDownTestSuite` methods for it.\n",
                    "rendered": {
                      "text": "function pointer that creates a new instance of the `Test` object. It handles\nownership to the caller. The signature of the callable is `Fixture*()`, where\n`Fixture` is the test fixture class for the test. All tests registered with the\nsame `test_suite_name` must return the same fixture type. This is checked at\nruntime.\n\nThe framework will infer the fixture class from the factory and will call the\n`SetUpTestSuite` and `TearDownTestSuite` methods for it.\n",
                      "markdown": "`function pointer that creates a new instance of the `Test` object. It handles\nownership to the caller. The signature of the callable is `Fixture*()`, where\n`Fixture` is the test fixture class for the test. All tests registered with the\nsame `test_suite_name` must return the same fixture type. This is checked at\nruntime.\n\nThe framework will infer the fixture class from the factory and will call the\n`SetUpTestSuite` and `TearDownTestSuite` methods for it.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/testing.md"
                },
                "region": {
                  "startLine": 1313,
                  "startColumn": 52,
                  "endLine": 1313,
                  "endColumn": 56,
                  "snippet": {
                    "text": "A value-parameterized test fixture class must inherit from both [`Test`](#Test)\nand `WithParamInterface`. In most cases that just means inheriting from\n[`TestWithParam`](#TestWithParam), but more complicated test hierarchies may\nneed to inherit from `Test` and `WithParamInterface` at different levels.\n\nThis interface defines the type alias `ParamType` for the parameter type `T` and\nhas support for accessing the test parameter value via the `GetParam()` method:\n",
                    "rendered": {
                      "text": "A value-parameterized test fixture class must inherit from both [`Test`](#Test)\nand `WithParamInterface`. In most cases that just means inheriting from\n[`TestWithParam`](#TestWithParam), but more complicated test hierarchies may\nneed to inherit from `Test` and `WithParamInterface` at different levels.\n\nThis interface defines the type alias `ParamType` for the parameter type `T` and\nhas support for accessing the test parameter value via the `GetParam()` method:\n",
                      "markdown": "`A value-parameterized test fixture class must inherit from both [`Test`](#Test)\nand `WithParamInterface`. In most cases that just means inheriting from\n[`TestWithParam`](#TestWithParam), but more complicated test hierarchies may\nneed to inherit from `Test` and `WithParamInterface` at different levels.\n\nThis interface defines the type alias `ParamType` for the parameter type `T` and\nhas support for accessing the test parameter value via the `GetParam()` method:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/testing.md"
                },
                "region": {
                  "startLine": 851,
                  "startColumn": 47,
                  "endLine": 851,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\n`int UnitTest::test_suite_to_run_count() const`\n\nGets the number of all test suites that contain at least one test that should\nrun.\n\n##### successful_test_count {#UnitTest::successful_test_count}\n",
                    "rendered": {
                      "text": "\n`int UnitTest::test_suite_to_run_count() const`\n\nGets the number of all test suites that contain at least one test that should\nrun.\n\n##### successful_test_count {#UnitTest::successful_test_count}\n",
                      "markdown": "`\n`int UnitTest::test_suite_to_run_count() const`\n\nGets the number of all test suites that contain at least one test that should\nrun.\n\n##### successful_test_count {#UnitTest::successful_test_count}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/testing.md"
                },
                "region": {
                  "startLine": 827,
                  "startColumn": 28,
                  "endLine": 827,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n`int UnitTest::random_seed() const`\n\nReturns the random seed used at the start of the current test run.\n\n##### successful_test_suite_count {#UnitTest::successful_test_suite_count}\n\n",
                    "rendered": {
                      "text": "\n`int UnitTest::random_seed() const`\n\nReturns the random seed used at the start of the current test run.\n\n##### successful_test_suite_count {#UnitTest::successful_test_suite_count}\n\n",
                      "markdown": "`\n`int UnitTest::random_seed() const`\n\nReturns the random seed used at the start of the current test run.\n\n##### successful_test_suite_count {#UnitTest::successful_test_suite_count}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/testing.md"
                },
                "region": {
                  "startLine": 376,
                  "startColumn": 31,
                  "endLine": 376,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n`GTEST_SKIP()`\n\nPrevents further test execution at runtime.\n\nCan be used in individual test cases or in the `SetUp()` methods of test\nenvironments or test fixtures (classes derived from the\n",
                    "rendered": {
                      "text": "\n`GTEST_SKIP()`\n\nPrevents further test execution at runtime.\n\nCan be used in individual test cases or in the `SetUp()` methods of test\nenvironments or test fixtures (classes derived from the\n",
                      "markdown": "`\n`GTEST_SKIP()`\n\nPrevents further test execution at runtime.\n\nCan be used in individual test cases or in the `SetUp()` methods of test\nenvironments or test fixtures (classes derived from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/testing.md"
                },
                "region": {
                  "startLine": 1286,
                  "startColumn": 28,
                  "endLine": 1286,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n`testing::TimeInMillis`\n\nAn integer type representing time in milliseconds.\n\n### Types {#Types}\n\n",
                    "rendered": {
                      "text": "\n`testing::TimeInMillis`\n\nAn integer type representing time in milliseconds.\n\n### Types {#Types}\n\n",
                      "markdown": "`\n`testing::TimeInMillis`\n\nAn integer type representing time in milliseconds.\n\n### Types {#Types}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/testing.md"
                },
                "region": {
                  "startLine": 1264,
                  "startColumn": 8,
                  "endLine": 1264,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n`TimeInMillis TestResult::start_timestamp() const`\n\nGets the time of the test case start, in ms from the start of the UNIX epoch.\n\n##### GetTestPartResult {#TestResult::GetTestPartResult}\n\n",
                    "rendered": {
                      "text": "\n`TimeInMillis TestResult::start_timestamp() const`\n\nGets the time of the test case start, in ms from the start of the UNIX epoch.\n\n##### GetTestPartResult {#TestResult::GetTestPartResult}\n\n",
                      "markdown": "`\n`TimeInMillis TestResult::start_timestamp() const`\n\nGets the time of the test case start, in ms from the start of the UNIX epoch.\n\n##### GetTestPartResult {#TestResult::GetTestPartResult}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/testing.md"
                },
                "region": {
                  "startLine": 906,
                  "startColumn": 8,
                  "endLine": 906,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n`TimeInMillis UnitTest::start_timestamp() const`\n\nGets the time of the test program start, in ms from the start of the UNIX epoch.\n\n##### elapsed_time {#UnitTest::elapsed_time}\n\n",
                    "rendered": {
                      "text": "\n`TimeInMillis UnitTest::start_timestamp() const`\n\nGets the time of the test program start, in ms from the start of the UNIX epoch.\n\n##### elapsed_time {#UnitTest::elapsed_time}\n\n",
                      "markdown": "`\n`TimeInMillis UnitTest::start_timestamp() const`\n\nGets the time of the test program start, in ms from the start of the UNIX epoch.\n\n##### elapsed_time {#UnitTest::elapsed_time}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/testing.md"
                },
                "region": {
                  "startLine": 798,
                  "startColumn": 47,
                  "endLine": 798,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n`static UnitTest* UnitTest::GetInstance()`\n\nGets the singleton `UnitTest` object. The first time this method is called, a\n`UnitTest` object is constructed and returned. Consecutive calls will return the\nsame object.\n\n",
                    "rendered": {
                      "text": "\n`static UnitTest* UnitTest::GetInstance()`\n\nGets the singleton `UnitTest` object. The first time this method is called, a\n`UnitTest` object is constructed and returned. Consecutive calls will return the\nsame object.\n\n",
                      "markdown": "`\n`static UnitTest* UnitTest::GetInstance()`\n\nGets the singleton `UnitTest` object. The first time this method is called, a\n`UnitTest` object is constructed and returned. Consecutive calls will return the\nsame object.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/testing.md"
                },
                "region": {
                  "startLine": 675,
                  "startColumn": 8,
                  "endLine": 675,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n`TimeInMillis TestSuite::start_timestamp() const`\n\nGets the time of the test suite start, in ms from the start of the UNIX epoch.\n\n##### GetTestInfo {#TestSuite::GetTestInfo}\n\n",
                    "rendered": {
                      "text": "\n`TimeInMillis TestSuite::start_timestamp() const`\n\nGets the time of the test suite start, in ms from the start of the UNIX epoch.\n\n##### GetTestInfo {#TestSuite::GetTestInfo}\n\n",
                      "markdown": "`\n`TimeInMillis TestSuite::start_timestamp() const`\n\nGets the time of the test suite start, in ms from the start of the UNIX epoch.\n\n##### GetTestInfo {#TestSuite::GetTestInfo}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/mocking.md"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 29,
                  "endLine": 377,
                  "endColumn": 33,
                  "snippet": {
                    "text": "GoogleTest provides some built-in matchers for 2-tuples, including the `Lt()`\nmatcher above. See [Multi-argument Matchers](matchers.md#MultiArgMatchers).\n\nThe `With` clause can be used at most once with each `ON_CALL` statement.\n\n#### WillByDefault {#ON_CALL.WillByDefault}\n\n",
                    "rendered": {
                      "text": "GoogleTest provides some built-in matchers for 2-tuples, including the `Lt()`\nmatcher above. See [Multi-argument Matchers](matchers.md#MultiArgMatchers).\n\nThe `With` clause can be used at most once with each `ON_CALL` statement.\n\n#### WillByDefault {#ON_CALL.WillByDefault}\n\n",
                      "markdown": "`GoogleTest provides some built-in matchers for 2-tuples, including the `Lt()`\nmatcher above. See [Multi-argument Matchers](matchers.md#MultiArgMatchers).\n\nThe `With` clause can be used at most once with each `ON_CALL` statement.\n\n#### WillByDefault {#ON_CALL.WillByDefault}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/mocking.md"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 49,
                  "endLine": 342,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n```cpp\nON_CALL(mock_object, method_name(matchers...))\n    .With(multi_argument_matcher)  // Can be used at most once\n    .WillByDefault(action);        // Required\n```\n\n",
                    "rendered": {
                      "text": "\n```cpp\nON_CALL(mock_object, method_name(matchers...))\n    .With(multi_argument_matcher)  // Can be used at most once\n    .WillByDefault(action);        // Required\n```\n\n",
                      "markdown": "`\n```cpp\nON_CALL(mock_object, method_name(matchers...))\n    .With(multi_argument_matcher)  // Can be used at most once\n    .WillByDefault(action);        // Required\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/mocking.md"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 44,
                  "endLine": 317,
                  "endColumn": 48,
                  "snippet": {
                    "text": "would match expectation 2 again, producing a failure since the limit of 2 calls\nwas exceeded.\n\nThe `RetiresOnSaturation` clause can be used at most once on an expectation and\nmust be the last clause.\n\n### ON_CALL {#ON_CALL}\n",
                    "rendered": {
                      "text": "would match expectation 2 again, producing a failure since the limit of 2 calls\nwas exceeded.\n\nThe `RetiresOnSaturation` clause can be used at most once on an expectation and\nmust be the last clause.\n\n### ON_CALL {#ON_CALL}\n",
                      "markdown": "`would match expectation 2 again, producing a failure since the limit of 2 calls\nwas exceeded.\n\nThe `RetiresOnSaturation` clause can be used at most once on an expectation and\nmust be the last clause.\n\n### ON_CALL {#ON_CALL}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/mocking.md"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 39,
                  "endLine": 285,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    .WillRepeatedly(Return(7));  // Return 7 on all subsequent calls\n```\n\nThe `WillRepeatedly` clause can be used at most once on an expectation.\n\n#### RetiresOnSaturation {#EXPECT_CALL.RetiresOnSaturation}\n\n",
                    "rendered": {
                      "text": "    .WillRepeatedly(Return(7));  // Return 7 on all subsequent calls\n```\n\nThe `WillRepeatedly` clause can be used at most once on an expectation.\n\n#### RetiresOnSaturation {#EXPECT_CALL.RetiresOnSaturation}\n\n",
                      "markdown": "`    .WillRepeatedly(Return(7));  // Return 7 on all subsequent calls\n```\n\nThe `WillRepeatedly` clause can be used at most once on an expectation.\n\n#### RetiresOnSaturation {#EXPECT_CALL.RetiresOnSaturation}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/mocking.md"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 71,
                  "endLine": 251,
                  "endColumn": 75,
                  "snippet": {
                    "text": "```\n\nThe `WillOnce` clause can be used any number of times on an expectation. Unlike\n`WillRepeatedly`, the action fed to each `WillOnce` call will be called at most\nonce, so may be a move-only type and/or have an `&&`-qualified call operator.\n\n#### WillRepeatedly {#EXPECT_CALL.WillRepeatedly}\n",
                    "rendered": {
                      "text": "```\n\nThe `WillOnce` clause can be used any number of times on an expectation. Unlike\n`WillRepeatedly`, the action fed to each `WillOnce` call will be called at most\nonce, so may be a move-only type and/or have an `&&`-qualified call operator.\n\n#### WillRepeatedly {#EXPECT_CALL.WillRepeatedly}\n",
                      "markdown": "````\n\nThe `WillOnce` clause can be used any number of times on an expectation. Unlike\n`WillRepeatedly`, the action fed to each `WillOnce` call will be called at most\nonce, so may be a move-only type and/or have an `&&`-qualified call operator.\n\n#### WillRepeatedly {#EXPECT_CALL.WillRepeatedly}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/mocking.md"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 30,
                  "endLine": 148,
                  "endColumn": 34,
                  "snippet": {
                    "text": "*   If there are *n* `WillOnce` clauses and one `WillRepeatedly` clause, where\n    *n* >= 0, the inferred cardinality is `Times(AtLeast(n))`.\n\nThe `Times` clause can be used at most once on an expectation.\n\n#### InSequence {#EXPECT_CALL.InSequence}\n\n",
                    "rendered": {
                      "text": "*   If there are *n* `WillOnce` clauses and one `WillRepeatedly` clause, where\n    *n* >= 0, the inferred cardinality is `Times(AtLeast(n))`.\n\nThe `Times` clause can be used at most once on an expectation.\n\n#### InSequence {#EXPECT_CALL.InSequence}\n\n",
                      "markdown": "`*   If there are *n* `WillOnce` clauses and one `WillRepeatedly` clause, where\n    *n* >= 0, the inferred cardinality is `Times(AtLeast(n))`.\n\nThe `Times` clause can be used at most once on an expectation.\n\n#### InSequence {#EXPECT_CALL.InSequence}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/mocking.md"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 53,
                  "endLine": 134,
                  "endColumn": 57,
                  "snippet": {
                    "text": "| ------------------- | --------------------------------------------------- |\n| `AnyNumber()`       | The function can be called any number of times.     |\n| `AtLeast(n)`        | The function call is expected at least *n* times.   |\n| `AtMost(n)`         | The function call is expected at most *n* times.    |\n| `Between(m, n)`     | The function call is expected between *m* and *n* times, inclusive. |\n| `Exactly(n)` or `n` | The function call is expected exactly *n* times. If *n* is 0, the call should never happen. |\n\n",
                    "rendered": {
                      "text": "| ------------------- | --------------------------------------------------- |\n| `AnyNumber()`       | The function can be called any number of times.     |\n| `AtLeast(n)`        | The function call is expected at least *n* times.   |\n| `AtMost(n)`         | The function call is expected at most *n* times.    |\n| `Between(m, n)`     | The function call is expected between *m* and *n* times, inclusive. |\n| `Exactly(n)` or `n` | The function call is expected exactly *n* times. If *n* is 0, the call should never happen. |\n\n",
                      "markdown": "`| ------------------- | --------------------------------------------------- |\n| `AnyNumber()`       | The function can be called any number of times.     |\n| `AtLeast(n)`        | The function call is expected at least *n* times.   |\n| `AtMost(n)`         | The function call is expected at most *n* times.    |\n| `Between(m, n)`     | The function call is expected between *m* and *n* times, inclusive. |\n| `Exactly(n)` or `n` | The function call is expected exactly *n* times. If *n* is 0, the call should never happen. |\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/mocking.md"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 53,
                  "endLine": 133,
                  "endColumn": 57,
                  "snippet": {
                    "text": "| Cardinality         | Meaning                                             |\n| ------------------- | --------------------------------------------------- |\n| `AnyNumber()`       | The function can be called any number of times.     |\n| `AtLeast(n)`        | The function call is expected at least *n* times.   |\n| `AtMost(n)`         | The function call is expected at most *n* times.    |\n| `Between(m, n)`     | The function call is expected between *m* and *n* times, inclusive. |\n| `Exactly(n)` or `n` | The function call is expected exactly *n* times. If *n* is 0, the call should never happen. |\n",
                    "rendered": {
                      "text": "| Cardinality         | Meaning                                             |\n| ------------------- | --------------------------------------------------- |\n| `AnyNumber()`       | The function can be called any number of times.     |\n| `AtLeast(n)`        | The function call is expected at least *n* times.   |\n| `AtMost(n)`         | The function call is expected at most *n* times.    |\n| `Between(m, n)`     | The function call is expected between *m* and *n* times, inclusive. |\n| `Exactly(n)` or `n` | The function call is expected exactly *n* times. If *n* is 0, the call should never happen. |\n",
                      "markdown": "`| Cardinality         | Meaning                                             |\n| ------------------- | --------------------------------------------------- |\n| `AnyNumber()`       | The function can be called any number of times.     |\n| `AtLeast(n)`        | The function call is expected at least *n* times.   |\n| `AtMost(n)`         | The function call is expected at most *n* times.    |\n| `Between(m, n)`     | The function call is expected between *m* and *n* times, inclusive. |\n| `Exactly(n)` or `n` | The function call is expected exactly *n* times. If *n* is 0, the call should never happen. |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/mocking.md"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 29,
                  "endLine": 118,
                  "endColumn": 33,
                  "snippet": {
                    "text": "GoogleTest provides some built-in matchers for 2-tuples, including the `Lt()`\nmatcher above. See [Multi-argument Matchers](matchers.md#MultiArgMatchers).\n\nThe `With` clause can be used at most once on an expectation and must be the\nfirst clause.\n\n#### Times {#EXPECT_CALL.Times}\n",
                    "rendered": {
                      "text": "GoogleTest provides some built-in matchers for 2-tuples, including the `Lt()`\nmatcher above. See [Multi-argument Matchers](matchers.md#MultiArgMatchers).\n\nThe `With` clause can be used at most once on an expectation and must be the\nfirst clause.\n\n#### Times {#EXPECT_CALL.Times}\n",
                      "markdown": "`GoogleTest provides some built-in matchers for 2-tuples, including the `Lt()`\nmatcher above. See [Multi-argument Matchers](matchers.md#MultiArgMatchers).\n\nThe `With` clause can be used at most once on an expectation and must be the\nfirst clause.\n\n#### Times {#EXPECT_CALL.Times}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/mocking.md"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 49,
                  "endLine": 86,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    .After(expectations...)        // Can be used any number of times\n    .WillOnce(action)              // Can be used any number of times\n    .WillRepeatedly(action)        // Can be used at most once\n    .RetiresOnSaturation();        // Can be used at most once\n```\n\nSee details for each modifier clause below.\n",
                    "rendered": {
                      "text": "    .After(expectations...)        // Can be used any number of times\n    .WillOnce(action)              // Can be used any number of times\n    .WillRepeatedly(action)        // Can be used at most once\n    .RetiresOnSaturation();        // Can be used at most once\n```\n\nSee details for each modifier clause below.\n",
                      "markdown": "`    .After(expectations...)        // Can be used any number of times\n    .WillOnce(action)              // Can be used any number of times\n    .WillRepeatedly(action)        // Can be used at most once\n    .RetiresOnSaturation();        // Can be used at most once\n```\n\nSee details for each modifier clause below.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/mocking.md"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 49,
                  "endLine": 85,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    .InSequence(sequences...)      // Can be used any number of times\n    .After(expectations...)        // Can be used any number of times\n    .WillOnce(action)              // Can be used any number of times\n    .WillRepeatedly(action)        // Can be used at most once\n    .RetiresOnSaturation();        // Can be used at most once\n```\n\n",
                    "rendered": {
                      "text": "    .InSequence(sequences...)      // Can be used any number of times\n    .After(expectations...)        // Can be used any number of times\n    .WillOnce(action)              // Can be used any number of times\n    .WillRepeatedly(action)        // Can be used at most once\n    .RetiresOnSaturation();        // Can be used at most once\n```\n\n",
                      "markdown": "`    .InSequence(sequences...)      // Can be used any number of times\n    .After(expectations...)        // Can be used any number of times\n    .WillOnce(action)              // Can be used any number of times\n    .WillRepeatedly(action)        // Can be used at most once\n    .RetiresOnSaturation();        // Can be used at most once\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/mocking.md"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 49,
                  "endLine": 81,
                  "endColumn": 53,
                  "snippet": {
                    "text": "```cpp\nEXPECT_CALL(mock_object, method_name(matchers...))\n    .With(multi_argument_matcher)  // Can be used at most once\n    .Times(cardinality)            // Can be used at most once\n    .InSequence(sequences...)      // Can be used any number of times\n    .After(expectations...)        // Can be used any number of times\n    .WillOnce(action)              // Can be used any number of times\n",
                    "rendered": {
                      "text": "```cpp\nEXPECT_CALL(mock_object, method_name(matchers...))\n    .With(multi_argument_matcher)  // Can be used at most once\n    .Times(cardinality)            // Can be used at most once\n    .InSequence(sequences...)      // Can be used any number of times\n    .After(expectations...)        // Can be used any number of times\n    .WillOnce(action)              // Can be used any number of times\n",
                      "markdown": "````cpp\nEXPECT_CALL(mock_object, method_name(matchers...))\n    .With(multi_argument_matcher)  // Can be used at most once\n    .Times(cardinality)            // Can be used at most once\n    .InSequence(sequences...)      // Can be used any number of times\n    .After(expectations...)        // Can be used any number of times\n    .WillOnce(action)              // Can be used any number of times\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/mocking.md"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 49,
                  "endLine": 80,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n```cpp\nEXPECT_CALL(mock_object, method_name(matchers...))\n    .With(multi_argument_matcher)  // Can be used at most once\n    .Times(cardinality)            // Can be used at most once\n    .InSequence(sequences...)      // Can be used any number of times\n    .After(expectations...)        // Can be used any number of times\n",
                    "rendered": {
                      "text": "\n```cpp\nEXPECT_CALL(mock_object, method_name(matchers...))\n    .With(multi_argument_matcher)  // Can be used at most once\n    .Times(cardinality)            // Can be used at most once\n    .InSequence(sequences...)      // Can be used any number of times\n    .After(expectations...)        // Can be used any number of times\n",
                      "markdown": "`\n```cpp\nEXPECT_CALL(mock_object, method_name(matchers...))\n    .With(multi_argument_matcher)  // Can be used at most once\n    .Times(cardinality)            // Can be used at most once\n    .InSequence(sequences...)      // Can be used any number of times\n    .After(expectations...)        // Can be used any number of times\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/mocking.md"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 26,
                  "endLine": 216,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  all_inits += EXPECT_CALL(my_mock, InitElement(i));\n}\nEXPECT_CALL(my_mock, Describe())\n    .After(all_inits);  // Expect Describe() call after all InitElement() calls\n```\n\nThe `After` clause can be used any number of times on an expectation.\n",
                    "rendered": {
                      "text": "  all_inits += EXPECT_CALL(my_mock, InitElement(i));\n}\nEXPECT_CALL(my_mock, Describe())\n    .After(all_inits);  // Expect Describe() call after all InitElement() calls\n```\n\nThe `After` clause can be used any number of times on an expectation.\n",
                      "markdown": "`  all_inits += EXPECT_CALL(my_mock, InitElement(i));\n}\nEXPECT_CALL(my_mock, Describe())\n    .After(all_inits);  // Expect Describe() call after all InitElement() calls\n```\n\nThe `After` clause can be used any number of times on an expectation.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/assertions.md"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 28,
                  "endLine": 72,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n`ADD_FAILURE_AT(`*`file_path`*`,`*`line_number`*`)`\n\nGenerates a nonfatal failure at the file and line number specified.\n\n## Generalized Assertion {#generalized}\n\n",
                    "rendered": {
                      "text": "\n`ADD_FAILURE_AT(`*`file_path`*`,`*`line_number`*`)`\n\nGenerates a nonfatal failure at the file and line number specified.\n\n## Generalized Assertion {#generalized}\n\n",
                      "markdown": "`\n`ADD_FAILURE_AT(`*`file_path`*`,`*`line_number`*`)`\n\nGenerates a nonfatal failure at the file and line number specified.\n\n## Generalized Assertion {#generalized}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/assertions.md"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 52,
                  "endLine": 26,
                  "endColumn": 61,
                  "snippet": {
                    "text": "## Explicit Success and Failure {#success-failure}\n\nThe assertions in this section generate a success or failure directly instead of\ntesting a value or expression. These are useful when control flow, rather than a\nBoolean expression, determines the test's success or failure, as shown by the\nfollowing example:\n\n",
                    "rendered": {
                      "text": "## Explicit Success and Failure {#success-failure}\n\nThe assertions in this section generate a success or failure directly instead of\ntesting a value or expression. These are useful when control flow, rather than a\nBoolean expression, determines the test's success or failure, as shown by the\nfollowing example:\n\n",
                      "markdown": "`## Explicit Success and Failure {#success-failure}\n\nThe assertions in this section generate a success or failure directly instead of\ntesting a value or expression. These are useful when control flow, rather than a\nBoolean expression, determines the test's success or failure, as shown by the\nfollowing example:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/matchers.md"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 47,
                  "endLine": 243,
                  "endColumn": 51,
                  "snippet": {
                    "text": "..., mn})`, `AllOfArray(a_container)`, `AllOfArray(begin, end)`, `AllOfArray(array)`, or `AllOfArray(array, count)` | The same as `AllOf()` except that the matchers come from an initializer list, STL-style container, iterator range, or C-style array. |\n| `AnyOf(m1, m2, ..., mn)` | `argument` matches at least one of the matchers `m1` to `mn`. |\n| `AnyOfArray({m0, m1, ..., mn})`, `AnyOfArray(a_container)`, `AnyOfArray(begin, end)`, `AnyOfArray(array)`, or `AnyOfArray(array, count)` | The same as `AnyOf()` except that the matchers come from an initializer list, STL-style container, iterator range, or",
                    "rendered": {
                      "text": "..., mn})`, `AllOfArray(a_container)`, `AllOfArray(begin, end)`, `AllOfArray(array)`, or `AllOfArray(array, count)` | The same as `AllOf()` except that the matchers come from an initializer list, STL-style container, iterator range, or C-style array. |\n| `AnyOf(m1, m2, ..., mn)` | `argument` matches at least one of the matchers `m1` to `mn`. |\n| `AnyOfArray({m0, m1, ..., mn})`, `AnyOfArray(a_container)`, `AnyOfArray(begin, end)`, `AnyOfArray(array)`, or `AnyOfArray(array, count)` | The same as `AnyOf()` except that the matchers come from an initializer list, STL-style container, iterator range, or",
                      "markdown": "`..., mn})`, `AllOfArray(a_container)`, `AllOfArray(begin, end)`, `AllOfArray(array)`, or `AllOfArray(array, count)` | The same as `AllOf()` except that the matchers come from an initializer list, STL-style container, iterator range, or C-style array. |\n| `AnyOf(m1, m2, ..., mn)` | `argument` matches at least one of the matchers `m1` to `mn`. |\n| `AnyOfArray({m0, m1, ..., mn})`, `AnyOfArray(a_container)`, `AnyOfArray(begin, end)`, `AnyOfArray(array)`, or `AnyOfArray(array, count)` | The same as `AnyOf()` except that the matchers come from an initializer list, STL-style container, iterator range, or`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/matchers.md"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 134,
                  "endLine": 99,
                  "endColumn": 138,
                  "snippet": {
                    "text": "  |\n| `HasSubstr(string)`      | `argument` contains `string` as a sub-string.     |\n| `IsEmpty()`              | `argument` is an empty string.                    |\n| `MatchesRegex(string)`   | `argument` matches the given regular expression with the match starting at the first character and ending at the last character. |\n| `StartsWith(prefix)`     | `argument` starts with string `prefix`.           |\n| `StrCaseEq(string)`      | `argument` is equal to `string`, ignoring case.   |\n| `StrCaseNe(string)`      | `argument` is not equal to `string`, ignoring case. |\n| `StrEq(string)`          | `arg",
                    "rendered": {
                      "text": "  |\n| `HasSubstr(string)`      | `argument` contains `string` as a sub-string.     |\n| `IsEmpty()`              | `argument` is an empty string.                    |\n| `MatchesRegex(string)`   | `argument` matches the given regular expression with the match starting at the first character and ending at the last character. |\n| `StartsWith(prefix)`     | `argument` starts with string `prefix`.           |\n| `StrCaseEq(string)`      | `argument` is equal to `string`, ignoring case.   |\n| `StrCaseNe(string)`      | `argument` is not equal to `string`, ignoring case. |\n| `StrEq(string)`          | `arg",
                      "markdown": "`  |\n| `HasSubstr(string)`      | `argument` contains `string` as a sub-string.     |\n| `IsEmpty()`              | `argument` is an empty string.                    |\n| `MatchesRegex(string)`   | `argument` matches the given regular expression with the match starting at the first character and ending at the last character. |\n| `StartsWith(prefix)`     | `argument` starts with string `prefix`.           |\n| `StrCaseEq(string)`      | `argument` is equal to `string`, ignoring case.   |\n| `StrCaseNe(string)`      | `argument` is not equal to `string`, ignoring case. |\n| `StrEq(string)`          | `arg`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/matchers.md"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 100,
                  "endLine": 99,
                  "endColumn": 104,
                  "snippet": {
                    "text": "s with string `suffix`.             |\n| `HasSubstr(string)`      | `argument` contains `string` as a sub-string.     |\n| `IsEmpty()`              | `argument` is an empty string.                    |\n| `MatchesRegex(string)`   | `argument` matches the given regular expression with the match starting at the first character and ending at the last character. |\n| `StartsWith(prefix)`     | `argument` starts with string `prefix`.           |\n| `StrCaseEq(string)`      | `argument` is equal to `string`, ignoring case.   |\n| `StrCaseNe(string)`      | `argument` is not equal to `string`, ignoring case. |",
                    "rendered": {
                      "text": "s with string `suffix`.             |\n| `HasSubstr(string)`      | `argument` contains `string` as a sub-string.     |\n| `IsEmpty()`              | `argument` is an empty string.                    |\n| `MatchesRegex(string)`   | `argument` matches the given regular expression with the match starting at the first character and ending at the last character. |\n| `StartsWith(prefix)`     | `argument` starts with string `prefix`.           |\n| `StrCaseEq(string)`      | `argument` is equal to `string`, ignoring case.   |\n| `StrCaseNe(string)`      | `argument` is not equal to `string`, ignoring case. |",
                      "markdown": "`s with string `suffix`.             |\n| `HasSubstr(string)`      | `argument` contains `string` as a sub-string.     |\n| `IsEmpty()`              | `argument` is an empty string.                    |\n| `MatchesRegex(string)`   | `argument` matches the given regular expression with the match starting at the first character and ending at the last character. |\n| `StartsWith(prefix)`     | `argument` starts with string `prefix`.           |\n| `StrCaseEq(string)`      | `argument` is equal to `string`, ignoring case.   |\n| `StrCaseNe(string)`      | `argument` is not equal to `string`, ignoring case. |`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/matchers.md"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 121,
                  "endLine": 137,
                  "endColumn": 127,
                  "snippet": {
                    "text": "sorted using the `<` operator, it matches container matcher `m`. E.g. `WhenSorted(ElementsAre(1, 2, 3))` verifies that `argument` contains elements 1, 2, and 3, ignoring order. |\n| `WhenSortedBy(comparator, m)` | The same as `WhenSorted(m)`, except that the given comparator instead of `<` is used to sort `argument`. E.g. `WhenSortedBy(std::greater(), ElementsAre(3, 2, 1))`. |\n\n**Notes:**\n\n*   These matchers can also match:\n    1.  a native array passed by reference (e.g. in `Foo(const int (&a)[5])`),\n        and\n    2.  an array passed as a pointer and a count (e.g. in `Bar(const T* buffer,\n        ",
                    "rendered": {
                      "text": "sorted using the `<` operator, it matches container matcher `m`. E.g. `WhenSorted(ElementsAre(1, 2, 3))` verifies that `argument` contains elements 1, 2, and 3, ignoring order. |\n| `WhenSortedBy(comparator, m)` | The same as `WhenSorted(m)`, except that the given comparator instead of `<` is used to sort `argument`. E.g. `WhenSortedBy(std::greater(), ElementsAre(3, 2, 1))`. |\n\n**Notes:**\n\n*   These matchers can also match:\n    1.  a native array passed by reference (e.g. in `Foo(const int (&a)[5])`),\n        and\n    2.  an array passed as a pointer and a count (e.g. in `Bar(const T* buffer,\n        ",
                      "markdown": "`sorted using the `<` operator, it matches container matcher `m`. E.g. `WhenSorted(ElementsAre(1, 2, 3))` verifies that `argument` contains elements 1, 2, and 3, ignoring order. |\n| `WhenSortedBy(comparator, m)` | The same as `WhenSorted(m)`, except that the given comparator instead of `<` is used to sort `argument`. E.g. `WhenSortedBy(std::greater(), ElementsAre(3, 2, 1))`. |\n\n**Notes:**\n\n*   These matchers can also match:\n    1.  a native array passed by reference (e.g. in `Foo(const int (&a)[5])`),\n        and\n    2.  an array passed as a pointer and a count (e.g. in `Bar(const T* buffer,\n        `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/samples.md"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 37,
                  "endLine": 4,
                  "snippet": {
                    "text": "# Googletest Samples\n\nIf you're like us, you'd like to look at\n[googletest samples.](https://github.com/google/googletest/blob/main/googletest/samples)\nThe sample directory has a number of well-commented samples showing how to use a\nvariety of googletest features.\n\n",
                    "rendered": {
                      "text": "# Googletest Samples\n\nIf you're like us, you'd like to look at\n[googletest samples.](https://github.com/google/googletest/blob/main/googletest/samples)\nThe sample directory has a number of well-commented samples showing how to use a\nvariety of googletest features.\n\n",
                      "markdown": "`# Googletest Samples\n\nIf you're like us, you'd like to look at\n[googletest samples.](https://github.com/google/googletest/blob/main/googletest/samples)\nThe sample directory has a number of well-commented samples showing how to use a\nvariety of googletest features.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock_stress_test.cc"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 4,
                  "endLine": 202,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    GTEST_LOG_(INFO) << \"Thread #\" << i << \" running . . .\";\n  }\n\n  // At this point, we have many threads running.\n  for (int i = 0; i < kTestThreads; i++) {\n    JoinAndDelete(threads[i]);\n  }\n",
                    "rendered": {
                      "text": "    GTEST_LOG_(INFO) << \"Thread #\" << i << \" running . . .\";\n  }\n\n  // At this point, we have many threads running.\n  for (int i = 0; i < kTestThreads; i++) {\n    JoinAndDelete(threads[i]);\n  }\n",
                      "markdown": "`    GTEST_LOG_(INFO) << \"Thread #\" << i << \" running . . .\";\n  }\n\n  // At this point, we have many threads running.\n  for (int i = 0; i < kTestThreads; i++) {\n    JoinAndDelete(threads[i]);\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-matchers-misc_test.cc"
                },
                "region": {
                  "startLine": 1017,
                  "startColumn": 10,
                  "endLine": 1017,
                  "endColumn": 16,
                  "snippet": {
                    "text": "      *listener << \"where the first value is \" << diff\n                << \" more than the second\";\n    }\n    return diff < 0;\n  }\n};\n\n",
                    "rendered": {
                      "text": "      *listener << \"where the first value is \" << diff\n                << \" more than the second\";\n    }\n    return diff < 0;\n  }\n};\n\n",
                      "markdown": "`      *listener << \"where the first value is \" << diff\n                << \" more than the second\";\n    }\n    return diff < 0;\n  }\n};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-matchers-misc_test.cc"
                },
                "region": {
                  "startLine": 1014,
                  "startColumn": 49,
                  "endLine": 1015,
                  "snippet": {
                    "text": "                       MatchResultListener* listener) const override {\n    const int diff = std::get<0>(value) - std::get<1>(value);\n    if (diff > 0) {\n      *listener << \"where the first value is \" << diff\n                << \" more than the second\";\n    }\n    return diff < 0;\n  }\n",
                    "rendered": {
                      "text": "                       MatchResultListener* listener) const override {\n    const int diff = std::get<0>(value) - std::get<1>(value);\n    if (diff > 0) {\n      *listener << \"where the first value is \" << diff\n                << \" more than the second\";\n    }\n    return diff < 0;\n  }\n",
                      "markdown": "`                       MatchResultListener* listener) const override {\n    const int diff = std::get<0>(value) - std::get<1>(value);\n    if (diff > 0) {\n      *listener << \"where the first value is \" << diff\n                << \" more than the second\";\n    }\n    return diff < 0;\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-matchers-misc_test.cc"
                },
                "region": {
                  "startLine": 1012,
                  "startColumn": 13,
                  "endLine": 1012,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n  bool MatchAndExplain(std::tuple<char, int> value,\n                       MatchResultListener* listener) const override {\n    const int diff = std::get<0>(value) - std::get<1>(value);\n    if (diff > 0) {\n      *listener << \"where the first value is \" << diff\n                << \" more than the second\";\n",
                    "rendered": {
                      "text": "\n  bool MatchAndExplain(std::tuple<char, int> value,\n                       MatchResultListener* listener) const override {\n    const int diff = std::get<0>(value) - std::get<1>(value);\n    if (diff > 0) {\n      *listener << \"where the first value is \" << diff\n                << \" more than the second\";\n",
                      "markdown": "`\n  bool MatchAndExplain(std::tuple<char, int> value,\n                       MatchResultListener* listener) const override {\n    const int diff = std::get<0>(value) - std::get<1>(value);\n    if (diff > 0) {\n      *listener << \"where the first value is \" << diff\n                << \" more than the second\";\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-matchers-misc_test.cc"
                },
                "region": {
                  "startLine": 486,
                  "startColumn": 5,
                  "endLine": 486,
                  "endColumn": 11,
                  "snippet": {
                    "text": "}  // namespace\n\n// Implement a simple backtracking algorithm to determine if it is possible\n// to find one element per matcher, without reusing elements.\ntemplate <typename Graph>\nElementMatcherPairs FindBacktrackingMaxBPM(const Graph& g) {\n  return BacktrackingMaxBPMState<Graph>(&g).Compute();\n",
                    "rendered": {
                      "text": "}  // namespace\n\n// Implement a simple backtracking algorithm to determine if it is possible\n// to find one element per matcher, without reusing elements.\ntemplate <typename Graph>\nElementMatcherPairs FindBacktrackingMaxBPM(const Graph& g) {\n  return BacktrackingMaxBPMState<Graph>(&g).Compute();\n",
                      "markdown": "`}  // namespace\n\n// Implement a simple backtracking algorithm to determine if it is possible\n// to find one element per matcher, without reusing elements.\ntemplate <typename Graph>\nElementMatcherPairs FindBacktrackingMaxBPM(const Graph& g) {\n  return BacktrackingMaxBPMState<Graph>(&g).Compute();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-matchers-misc_test.cc"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 28,
                  "endLine": 269,
                  "endColumn": 36,
                  "snippet": {
                    "text": "      Explain(m, test_set));\n}\n\n// Tests duplicated value -- expect no explanation.\nTYPED_TEST(ContainerEqTest, DuplicateDifference) {\n  static const int vals[] = {1, 1, 2, 3, 5, 8};\n  static const int test_vals[] = {1, 2, 3, 5, 8};\n",
                    "rendered": {
                      "text": "      Explain(m, test_set));\n}\n\n// Tests duplicated value -- expect no explanation.\nTYPED_TEST(ContainerEqTest, DuplicateDifference) {\n  static const int vals[] = {1, 1, 2, 3, 5, 8};\n  static const int test_vals[] = {1, 2, 3, 5, 8};\n",
                      "markdown": "`      Explain(m, test_set));\n}\n\n// Tests duplicated value -- expect no explanation.\nTYPED_TEST(ContainerEqTest, DuplicateDifference) {\n  static const int vals[] = {1, 1, 2, 3, 5, 8};\n  static const int test_vals[] = {1, 2, 3, 5, 8};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-nice-strict_test.cc"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 37,
                  "endLine": 265,
                  "endColumn": 43,
                  "snippet": {
                    "text": "#endif\n}\n\n// Tests that an unexpected call on a nice mock fails.\nTEST(NiceMockTest, UnexpectedCallFails) {\n  NiceMock<MockFoo> nice_foo;\n\n",
                    "rendered": {
                      "text": "#endif\n}\n\n// Tests that an unexpected call on a nice mock fails.\nTEST(NiceMockTest, UnexpectedCallFails) {\n  NiceMock<MockFoo> nice_foo;\n\n",
                      "markdown": "`#endif\n}\n\n// Tests that an unexpected call on a nice mock fails.\nTEST(NiceMockTest, UnexpectedCallFails) {\n  NiceMock<MockFoo> nice_foo;\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-nice-strict_test.cc"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 37,
                  "endLine": 248,
                  "endColumn": 43,
                  "snippet": {
                    "text": "  nice_foo.DoThis();\n}\n\n// Tests that an unexpected call on a nice mock which returns a\n// not-default-constructible type throws an exception and the exception contains\n// the method's name.\nTEST(NiceMockTest, ThrowsExceptionForUnknownReturnTypes) {\n",
                    "rendered": {
                      "text": "  nice_foo.DoThis();\n}\n\n// Tests that an unexpected call on a nice mock which returns a\n// not-default-constructible type throws an exception and the exception contains\n// the method's name.\nTEST(NiceMockTest, ThrowsExceptionForUnknownReturnTypes) {\n",
                      "markdown": "`  nice_foo.DoThis();\n}\n\n// Tests that an unexpected call on a nice mock which returns a\n// not-default-constructible type throws an exception and the exception contains\n// the method's name.\nTEST(NiceMockTest, ThrowsExceptionForUnknownReturnTypes) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-nice-strict_test.cc"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 15,
                  "endLine": 240,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n#endif  // GTEST_HAS_STREAM_REDIRECTION\n\n// Tests that a nice mock allows expected calls.\nTEST(NiceMockTest, AllowsExpectedCall) {\n  NiceMock<MockFoo> nice_foo;\n\n",
                    "rendered": {
                      "text": "\n#endif  // GTEST_HAS_STREAM_REDIRECTION\n\n// Tests that a nice mock allows expected calls.\nTEST(NiceMockTest, AllowsExpectedCall) {\n  NiceMock<MockFoo> nice_foo;\n\n",
                      "markdown": "`\n#endif  // GTEST_HAS_STREAM_REDIRECTION\n\n// Tests that a nice mock allows expected calls.\nTEST(NiceMockTest, AllowsExpectedCall) {\n  NiceMock<MockFoo> nice_foo;\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-nice-strict_test.cc"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 15,
                  "endLine": 223,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  EXPECT_EQ(\"\", GetCapturedStdout());\n}\n\n// Tests that a nice mock generates informational logs for\n// uninteresting calls.\nTEST(NiceMockTest, InfoForUninterestingCall) {\n  NiceMock<MockFoo> nice_foo;\n",
                    "rendered": {
                      "text": "  EXPECT_EQ(\"\", GetCapturedStdout());\n}\n\n// Tests that a nice mock generates informational logs for\n// uninteresting calls.\nTEST(NiceMockTest, InfoForUninterestingCall) {\n  NiceMock<MockFoo> nice_foo;\n",
                      "markdown": "`  EXPECT_EQ(\"\", GetCapturedStdout());\n}\n\n// Tests that a nice mock generates informational logs for\n// uninteresting calls.\nTEST(NiceMockTest, InfoForUninterestingCall) {\n  NiceMock<MockFoo> nice_foo;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-nice-strict_test.cc"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 15,
                  "endLine": 210,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  EXPECT_EQ(\"\", GetCapturedStdout());\n}\n\n// Tests that a nice mock generates no warning for uninteresting calls\n// that delete the mock object.\nTEST(NiceMockTest, NoWarningForUninterestingCallAfterDeath) {\n  NiceMock<MockFoo>* const nice_foo = new NiceMock<MockFoo>;\n",
                    "rendered": {
                      "text": "  EXPECT_EQ(\"\", GetCapturedStdout());\n}\n\n// Tests that a nice mock generates no warning for uninteresting calls\n// that delete the mock object.\nTEST(NiceMockTest, NoWarningForUninterestingCallAfterDeath) {\n  NiceMock<MockFoo>* const nice_foo = new NiceMock<MockFoo>;\n",
                      "markdown": "`  EXPECT_EQ(\"\", GetCapturedStdout());\n}\n\n// Tests that a nice mock generates no warning for uninteresting calls\n// that delete the mock object.\nTEST(NiceMockTest, NoWarningForUninterestingCallAfterDeath) {\n  NiceMock<MockFoo>* const nice_foo = new NiceMock<MockFoo>;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-nice-strict_test.cc"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 15,
                  "endLine": 200,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  EXPECT_FALSE(Mock::IsStrict(&raw_foo));\n}\n\n// Tests that a nice mock generates no warning for uninteresting calls.\nTEST(NiceMockTest, NoWarningForUninterestingCall) {\n  NiceMock<MockFoo> nice_foo;\n\n",
                    "rendered": {
                      "text": "  EXPECT_FALSE(Mock::IsStrict(&raw_foo));\n}\n\n// Tests that a nice mock generates no warning for uninteresting calls.\nTEST(NiceMockTest, NoWarningForUninterestingCall) {\n  NiceMock<MockFoo> nice_foo;\n\n",
                      "markdown": "`  EXPECT_FALSE(Mock::IsStrict(&raw_foo));\n}\n\n// Tests that a nice mock generates no warning for uninteresting calls.\nTEST(NiceMockTest, NoWarningForUninterestingCall) {\n  NiceMock<MockFoo> nice_foo;\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-internal-utils.cc"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 55,
                  "endLine": 222,
                  "endColumn": 61,
                  "snippet": {
                    "text": "}\n\nconstexpr std::array<char, 256> UnBase64(const char* const base64) {\n  return UnBase64Impl(std::make_index_sequence<256>{}, base64);\n}\n\nstatic constexpr char kBase64[] =\n",
                    "rendered": {
                      "text": "}\n\nconstexpr std::array<char, 256> UnBase64(const char* const base64) {\n  return UnBase64Impl(std::make_index_sequence<256>{}, base64);\n}\n\nstatic constexpr char kBase64[] =\n",
                      "markdown": "`}\n\nconstexpr std::array<char, 256> UnBase64(const char* const base64) {\n  return UnBase64Impl(std::make_index_sequence<256>{}, base64);\n}\n\nstatic constexpr char kBase64[] =\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-internal-utils.cc"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 59,
                  "endLine": 221,
                  "endColumn": 65,
                  "snippet": {
                    "text": "      {UnBase64Impl(UndoWebSafeEncoding(static_cast<char>(I)), base64, 0)...}};\n}\n\nconstexpr std::array<char, 256> UnBase64(const char* const base64) {\n  return UnBase64Impl(std::make_index_sequence<256>{}, base64);\n}\n\n",
                    "rendered": {
                      "text": "      {UnBase64Impl(UndoWebSafeEncoding(static_cast<char>(I)), base64, 0)...}};\n}\n\nconstexpr std::array<char, 256> UnBase64(const char* const base64) {\n  return UnBase64Impl(std::make_index_sequence<256>{}, base64);\n}\n\n",
                      "markdown": "`      {UnBase64Impl(UndoWebSafeEncoding(static_cast<char>(I)), base64, 0)...}};\n}\n\nconstexpr std::array<char, 256> UnBase64(const char* const base64) {\n  return UnBase64Impl(std::make_index_sequence<256>{}, base64);\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-internal-utils.cc"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 63,
                  "endLine": 218,
                  "endColumn": 69,
                  "snippet": {
                    "text": "constexpr std::array<char, 256> UnBase64Impl(std::index_sequence<I...>,\n                                             const char* const base64) {\n  return {\n      {UnBase64Impl(UndoWebSafeEncoding(static_cast<char>(I)), base64, 0)...}};\n}\n\nconstexpr std::array<char, 256> UnBase64(const char* const base64) {\n",
                    "rendered": {
                      "text": "constexpr std::array<char, 256> UnBase64Impl(std::index_sequence<I...>,\n                                             const char* const base64) {\n  return {\n      {UnBase64Impl(UndoWebSafeEncoding(static_cast<char>(I)), base64, 0)...}};\n}\n\nconstexpr std::array<char, 256> UnBase64(const char* const base64) {\n",
                      "markdown": "`constexpr std::array<char, 256> UnBase64Impl(std::index_sequence<I...>,\n                                             const char* const base64) {\n  return {\n      {UnBase64Impl(UndoWebSafeEncoding(static_cast<char>(I)), base64, 0)...}};\n}\n\nconstexpr std::array<char, 256> UnBase64(const char* const base64) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-internal-utils.cc"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 63,
                  "endLine": 216,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\ntemplate <size_t... I>\nconstexpr std::array<char, 256> UnBase64Impl(std::index_sequence<I...>,\n                                             const char* const base64) {\n  return {\n      {UnBase64Impl(UndoWebSafeEncoding(static_cast<char>(I)), base64, 0)...}};\n}\n",
                    "rendered": {
                      "text": "\ntemplate <size_t... I>\nconstexpr std::array<char, 256> UnBase64Impl(std::index_sequence<I...>,\n                                             const char* const base64) {\n  return {\n      {UnBase64Impl(UndoWebSafeEncoding(static_cast<char>(I)), base64, 0)...}};\n}\n",
                      "markdown": "`\ntemplate <size_t... I>\nconstexpr std::array<char, 256> UnBase64Impl(std::index_sequence<I...>,\n                                             const char* const base64) {\n  return {\n      {UnBase64Impl(UndoWebSafeEncoding(static_cast<char>(I)), base64, 0)...}};\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-internal-utils.cc"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 31,
                  "endLine": 211,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  return *base64 == 0 ? static_cast<char>(65)\n         : *base64 == c\n             ? carry\n             : UnBase64Impl(c, base64 + 1, static_cast<char>(carry + 1));\n}\n\ntemplate <size_t... I>\n",
                    "rendered": {
                      "text": "  return *base64 == 0 ? static_cast<char>(65)\n         : *base64 == c\n             ? carry\n             : UnBase64Impl(c, base64 + 1, static_cast<char>(carry + 1));\n}\n\ntemplate <size_t... I>\n",
                      "markdown": "`  return *base64 == 0 ? static_cast<char>(65)\n         : *base64 == c\n             ? carry\n             : UnBase64Impl(c, base64 + 1, static_cast<char>(carry + 1));\n}\n\ntemplate <size_t... I>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-internal-utils.cc"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 12,
                  "endLine": 209,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\nconstexpr char UnBase64Impl(char c, const char* const base64, char carry) {\n  return *base64 == 0 ? static_cast<char>(65)\n         : *base64 == c\n             ? carry\n             : UnBase64Impl(c, base64 + 1, static_cast<char>(carry + 1));\n}\n",
                    "rendered": {
                      "text": "\nconstexpr char UnBase64Impl(char c, const char* const base64, char carry) {\n  return *base64 == 0 ? static_cast<char>(65)\n         : *base64 == c\n             ? carry\n             : UnBase64Impl(c, base64 + 1, static_cast<char>(carry + 1));\n}\n",
                      "markdown": "`\nconstexpr char UnBase64Impl(char c, const char* const base64, char carry) {\n  return *base64 == 0 ? static_cast<char>(65)\n         : *base64 == c\n             ? carry\n             : UnBase64Impl(c, base64 + 1, static_cast<char>(carry + 1));\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-internal-utils.cc"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 10,
                  "endLine": 208,
                  "endColumn": 16,
                  "snippet": {
                    "text": "}\n\nconstexpr char UnBase64Impl(char c, const char* const base64, char carry) {\n  return *base64 == 0 ? static_cast<char>(65)\n         : *base64 == c\n             ? carry\n             : UnBase64Impl(c, base64 + 1, static_cast<char>(carry + 1));\n",
                    "rendered": {
                      "text": "}\n\nconstexpr char UnBase64Impl(char c, const char* const base64, char carry) {\n  return *base64 == 0 ? static_cast<char>(65)\n         : *base64 == c\n             ? carry\n             : UnBase64Impl(c, base64 + 1, static_cast<char>(carry + 1));\n",
                      "markdown": "`}\n\nconstexpr char UnBase64Impl(char c, const char* const base64, char carry) {\n  return *base64 == 0 ? static_cast<char>(65)\n         : *base64 == c\n             ? carry\n             : UnBase64Impl(c, base64 + 1, static_cast<char>(carry + 1));\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-internal-utils.cc"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 54,
                  "endLine": 207,
                  "endColumn": 60,
                  "snippet": {
                    "text": "  return c == '-' ? '+' : c == '_' ? '/' : c;\n}\n\nconstexpr char UnBase64Impl(char c, const char* const base64, char carry) {\n  return *base64 == 0 ? static_cast<char>(65)\n         : *base64 == c\n             ? carry\n",
                    "rendered": {
                      "text": "  return c == '-' ? '+' : c == '_' ? '/' : c;\n}\n\nconstexpr char UnBase64Impl(char c, const char* const base64, char carry) {\n  return *base64 == 0 ? static_cast<char>(65)\n         : *base64 == c\n             ? carry\n",
                      "markdown": "`  return c == '-' ? '+' : c == '_' ? '/' : c;\n}\n\nconstexpr char UnBase64Impl(char c, const char* const base64, char carry) {\n  return *base64 == 0 ? static_cast<char>(65)\n         : *base64 == c\n             ? carry\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-internal-utils.cc"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 30,
                  "endLine": 211,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  return *base64 == 0 ? static_cast<char>(65)\n         : *base64 == c\n             ? carry\n             : UnBase64Impl(c, base64 + 1, static_cast<char>(carry + 1));\n}\n\ntemplate <size_t... I>\n",
                    "rendered": {
                      "text": "  return *base64 == 0 ? static_cast<char>(65)\n         : *base64 == c\n             ? carry\n             : UnBase64Impl(c, base64 + 1, static_cast<char>(carry + 1));\n}\n\ntemplate <size_t... I>\n",
                      "markdown": "`  return *base64 == 0 ? static_cast<char>(65)\n         : *base64 == c\n             ? carry\n             : UnBase64Impl(c, base64 + 1, static_cast<char>(carry + 1));\n}\n\ntemplate <size_t... I>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-internal-utils.cc"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 47,
                  "endLine": 150,
                  "snippet": {
                    "text": "\n// Prints the given message to stdout if and only if 'severity' >= the level\n// specified by the --gmock_verbose flag.  If stack_frames_to_skip >=\n// 0, also prints the stack trace excluding the top\n// stack_frames_to_skip frames.  In opt mode, any positive\n// stack_frames_to_skip is treated as 0, since we don't know which\n// function calls will be inlined by the compiler and need to be\n// conservative.\n",
                    "rendered": {
                      "text": "\n// Prints the given message to stdout if and only if 'severity' >= the level\n// specified by the --gmock_verbose flag.  If stack_frames_to_skip >=\n// 0, also prints the stack trace excluding the top\n// stack_frames_to_skip frames.  In opt mode, any positive\n// stack_frames_to_skip is treated as 0, since we don't know which\n// function calls will be inlined by the compiler and need to be\n// conservative.\n",
                      "markdown": "`\n// Prints the given message to stdout if and only if 'severity' >= the level\n// specified by the --gmock_verbose flag.  If stack_frames_to_skip >=\n// 0, also prints the stack trace excluding the top\n// stack_frames_to_skip frames.  In opt mode, any positive\n// stack_frames_to_skip is treated as 0, since we don't know which\n// function calls will be inlined by the compiler and need to be\n// conservative.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-internal-utils.cc"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 52,
                  "endLine": 116,
                  "endColumn": 58,
                  "snippet": {
                    "text": "};\n\n// Returns the global failure reporter.  Will create a\n// GoogleTestFailureReporter and return it the first time called.\nGTEST_API_ FailureReporterInterface* GetFailureReporter() {\n  // Points to the global failure reporter used by Google Mock.  gcc\n  // guarantees that the following use of failure_reporter is\n",
                    "rendered": {
                      "text": "};\n\n// Returns the global failure reporter.  Will create a\n// GoogleTestFailureReporter and return it the first time called.\nGTEST_API_ FailureReporterInterface* GetFailureReporter() {\n  // Points to the global failure reporter used by Google Mock.  gcc\n  // guarantees that the following use of failure_reporter is\n",
                      "markdown": "`};\n\n// Returns the global failure reporter.  Will create a\n// GoogleTestFailureReporter and return it the first time called.\nGTEST_API_ FailureReporterInterface* GetFailureReporter() {\n  // Points to the global failure reporter used by Google Mock.  gcc\n  // guarantees that the following use of failure_reporter is\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-catch-exceptions-test_.cc"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 63,
                  "endLine": 105,
                  "endColumn": 67,
                  "snippet": {
                    "text": "class CxxExceptionInConstructorTest : public Test {\n public:\n  CxxExceptionInConstructorTest() {\n    // Without this macro VC++ complains about unreachable code at the end of\n    // the constructor.\n    GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(\n        throw std::runtime_error(\"Standard C++ exception\"));\n",
                    "rendered": {
                      "text": "class CxxExceptionInConstructorTest : public Test {\n public:\n  CxxExceptionInConstructorTest() {\n    // Without this macro VC++ complains about unreachable code at the end of\n    // the constructor.\n    GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(\n        throw std::runtime_error(\"Standard C++ exception\"));\n",
                      "markdown": "`class CxxExceptionInConstructorTest : public Test {\n public:\n  CxxExceptionInConstructorTest() {\n    // Without this macro VC++ complains about unreachable code at the end of\n    // the constructor.\n    GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(\n        throw std::runtime_error(\"Standard C++ exception\"));\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-throw-on-failure-test_.cc"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 47,
                  "endLine": 68,
                  "endColumn": 56,
                  "snippet": {
                    "text": "  // assertion will cause the program to exit with a non-zero code.\n  EXPECT_EQ(2, 3);\n\n  // When not in the throw-on-failure mode, the control will reach\n  // here.\n  return 0;\n}\n",
                    "rendered": {
                      "text": "  // assertion will cause the program to exit with a non-zero code.\n  EXPECT_EQ(2, 3);\n\n  // When not in the throw-on-failure mode, the control will reach\n  // here.\n  return 0;\n}\n",
                      "markdown": "`  // assertion will cause the program to exit with a non-zero code.\n  EXPECT_EQ(2, 3);\n\n  // When not in the throw-on-failure mode, the control will reach\n  // here.\n  return 0;\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-global-environment-unittest.py"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 21,
                  "endLine": 109,
                  "endColumn": 72,
                  "snippet": {
                    "text": "  def testEnvironmentSetUpAndTornDownOnce(self):\n    \"\"\"Tests environment and --gtest_recreate_environments_when_repeating.\"\"\"\n\n    # By default the environment should only be set up and torn down once, at\n    # the start and end of the test respectively.\n    txt = RunAndReturnOutput(\n        [\n",
                    "rendered": {
                      "text": "  def testEnvironmentSetUpAndTornDownOnce(self):\n    \"\"\"Tests environment and --gtest_recreate_environments_when_repeating.\"\"\"\n\n    # By default the environment should only be set up and torn down once, at\n    # the start and end of the test respectively.\n    txt = RunAndReturnOutput(\n        [\n",
                      "markdown": "`  def testEnvironmentSetUpAndTornDownOnce(self):\n    \"\"\"Tests environment and --gtest_recreate_environments_when_repeating.\"\"\"\n\n    # By default the environment should only be set up and torn down once, at\n    # the start and end of the test respectively.\n    txt = RunAndReturnOutput(\n        [\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-global-environment-unittest.py"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 10,
                  "endLine": 106,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    )\n    self.assertRegex(txt, expected_pattern)\n\n  def testEnvironmentSetUpAndTornDownOnce(self):\n    \"\"\"Tests environment and --gtest_recreate_environments_when_repeating.\"\"\"\n\n    # By default the environment should only be set up and torn down once, at\n",
                    "rendered": {
                      "text": "    )\n    self.assertRegex(txt, expected_pattern)\n\n  def testEnvironmentSetUpAndTornDownOnce(self):\n    \"\"\"Tests environment and --gtest_recreate_environments_when_repeating.\"\"\"\n\n    # By default the environment should only be set up and torn down once, at\n",
                      "markdown": "`    )\n    self.assertRegex(txt, expected_pattern)\n\n  def testEnvironmentSetUpAndTornDownOnce(self):\n    \"\"\"Tests environment and --gtest_recreate_environments_when_repeating.\"\"\"\n\n    # By default the environment should only be set up and torn down once, at\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-global-environment-unittest.py"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 74,
                  "endLine": 110,
                  "snippet": {
                    "text": "  def testEnvironmentSetUpAndTornDownOnce(self):\n    \"\"\"Tests environment and --gtest_recreate_environments_when_repeating.\"\"\"\n\n    # By default the environment should only be set up and torn down once, at\n    # the start and end of the test respectively.\n    txt = RunAndReturnOutput(\n        [\n            '--gtest_repeat=2',\n",
                    "rendered": {
                      "text": "  def testEnvironmentSetUpAndTornDownOnce(self):\n    \"\"\"Tests environment and --gtest_recreate_environments_when_repeating.\"\"\"\n\n    # By default the environment should only be set up and torn down once, at\n    # the start and end of the test respectively.\n    txt = RunAndReturnOutput(\n        [\n            '--gtest_repeat=2',\n",
                      "markdown": "`  def testEnvironmentSetUpAndTornDownOnce(self):\n    \"\"\"Tests environment and --gtest_recreate_environments_when_repeating.\"\"\"\n\n    # By default the environment should only be set up and torn down once, at\n    # the start and end of the test respectively.\n    txt = RunAndReturnOutput(\n        [\n            '--gtest_repeat=2',\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-global-environment-unittest.py"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 4,
                  "endLine": 34,
                  "endColumn": 12,
                  "snippet": {
                    "text": "testing::AddGlobalTestEnvironment. Failures in the global environment should\nresult in all unit tests being skipped.\n\nThis script tests such functionality by invoking\ngoogletest-global-environment-unittest_ (a program written with Google Test).\n\"\"\"\n\n",
                    "rendered": {
                      "text": "testing::AddGlobalTestEnvironment. Failures in the global environment should\nresult in all unit tests being skipped.\n\nThis script tests such functionality by invoking\ngoogletest-global-environment-unittest_ (a program written with Google Test).\n\"\"\"\n\n",
                      "markdown": "`testing::AddGlobalTestEnvironment. Failures in the global environment should\nresult in all unit tests being skipped.\n\nThis script tests such functionality by invoking\ngoogletest-global-environment-unittest_ (a program written with Google Test).\n\"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_xml_test_utils.py"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 37,
                  "endLine": 89,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    )\n    for i in range(expected_attributes.length):\n      expected_attr = expected_attributes.item(i)\n      actual_attr = actual_attributes.get(expected_attr.name)\n      self.assertTrue(\n          actual_attr is not None,\n          'expected attribute %s not found in element %s'\n",
                    "rendered": {
                      "text": "    )\n    for i in range(expected_attributes.length):\n      expected_attr = expected_attributes.item(i)\n      actual_attr = actual_attributes.get(expected_attr.name)\n      self.assertTrue(\n          actual_attr is not None,\n          'expected attribute %s not found in element %s'\n",
                      "markdown": "`    )\n    for i in range(expected_attributes.length):\n      expected_attr = expected_attributes.item(i)\n      actual_attr = actual_attributes.get(expected_attr.name)\n      self.assertTrue(\n          actual_attr is not None,\n          'expected attribute %s not found in element %s'\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_xml_test_utils.py"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 5,
                  "endLine": 220,
                  "endColumn": 11,
                  "snippet": {
                    "text": "          r'^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\\d$', '*', timestamp.value\n      )\n    if element.tagName in ('testsuites', 'testsuite', 'testcase'):\n      time = element.getAttributeNode('time')\n      # The value for exact N seconds has a trailing decimal point (e.g., \"10.\"\n      # instead of \"10\")\n      time.value = re.sub(r'^\\d+\\.(\\d+)?$', '*', time.value)\n",
                    "rendered": {
                      "text": "          r'^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\\d$', '*', timestamp.value\n      )\n    if element.tagName in ('testsuites', 'testsuite', 'testcase'):\n      time = element.getAttributeNode('time')\n      # The value for exact N seconds has a trailing decimal point (e.g., \"10.\"\n      # instead of \"10\")\n      time.value = re.sub(r'^\\d+\\.(\\d+)?$', '*', time.value)\n",
                      "markdown": "`          r'^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\\d$', '*', timestamp.value\n      )\n    if element.tagName in ('testsuites', 'testsuite', 'testcase'):\n      time = element.getAttributeNode('time')\n      # The value for exact N seconds has a trailing decimal point (e.g., \"10.\"\n      # instead of \"10\")\n      time.value = re.sub(r'^\\d+\\.(\\d+)?$', '*', time.value)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_xml_test_utils.py"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 41,
                  "endLine": 183,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        else:\n          children['detail'].nodeValue += child.nodeValue\n      else:\n        self.fail('Encountered unexpected node type %d' % child.nodeType)\n    return children\n\n  def NormalizeXml(self, element):\n",
                    "rendered": {
                      "text": "        else:\n          children['detail'].nodeValue += child.nodeValue\n      else:\n        self.fail('Encountered unexpected node type %d' % child.nodeType)\n    return children\n\n  def NormalizeXml(self, element):\n",
                      "markdown": "`        else:\n          children['detail'].nodeValue += child.nodeValue\n      else:\n        self.fail('Encountered unexpected node type %d' % child.nodeType)\n    return children\n\n  def NormalizeXml(self, element):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_xml_test_utils.py"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 67,
                  "endLine": 142,
                  "endColumn": 73,
                  "snippet": {
                    "text": "    CDATA sections and non-whitespace text nodes are concatenated into a single\n    CDATA section with ID \"detail\".  An exception is raised if any element other\n    than the above four is encountered, if two child elements with the same\n    identifying attributes are encountered, or if any other type of node is\n    encountered.\n\n    Args:\n",
                    "rendered": {
                      "text": "    CDATA sections and non-whitespace text nodes are concatenated into a single\n    CDATA section with ID \"detail\".  An exception is raised if any element other\n    than the above four is encountered, if two child elements with the same\n    identifying attributes are encountered, or if any other type of node is\n    encountered.\n\n    Args:\n",
                      "markdown": "`    CDATA sections and non-whitespace text nodes are concatenated into a single\n    CDATA section with ID \"detail\".  An exception is raised if any element other\n    than the above four is encountered, if two child elements with the same\n    identifying attributes are encountered, or if any other type of node is\n    encountered.\n\n    Args:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_xml_test_utils.py"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 29,
                  "endLine": 63,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n    Args:\n      expected_node: expected DOM node object\n      actual_node: actual DOM node object\n    \"\"\"\n\n    if expected_node.nodeType == Node.CDATA_SECTION_NODE:\n",
                    "rendered": {
                      "text": "\n    Args:\n      expected_node: expected DOM node object\n      actual_node: actual DOM node object\n    \"\"\"\n\n    if expected_node.nodeType == Node.CDATA_SECTION_NODE:\n",
                      "markdown": "`\n    Args:\n      expected_node: expected DOM node object\n      actual_node: actual DOM node object\n    \"\"\"\n\n    if expected_node.nodeType == Node.CDATA_SECTION_NODE:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_xml_test_utils.py"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 33,
                  "endLine": 62,
                  "endColumn": 39,
                  "snippet": {
                    "text": "       particular order.\n\n    Args:\n      expected_node: expected DOM node object\n      actual_node: actual DOM node object\n    \"\"\"\n\n",
                    "rendered": {
                      "text": "       particular order.\n\n    Args:\n      expected_node: expected DOM node object\n      actual_node: actual DOM node object\n    \"\"\"\n\n",
                      "markdown": "`       particular order.\n\n    Args:\n      expected_node: expected DOM node object\n      actual_node: actual DOM node object\n    \"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_xml_test_utils.py"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 30,
                  "endLine": 46,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    \"\"\"Asserts that actual_node is equivalent to expected_node.\n\n    Asserts that actual_node (a DOM node object) is equivalent to\n    expected_node (another DOM node object), in that either both of\n    them are CDATA nodes and have the same value, or both are DOM\n    elements and actual_node meets all of the following conditions:\n\n",
                    "rendered": {
                      "text": "    \"\"\"Asserts that actual_node is equivalent to expected_node.\n\n    Asserts that actual_node (a DOM node object) is equivalent to\n    expected_node (another DOM node object), in that either both of\n    them are CDATA nodes and have the same value, or both are DOM\n    elements and actual_node meets all of the following conditions:\n\n",
                      "markdown": "`    \"\"\"Asserts that actual_node is equivalent to expected_node.\n\n    Asserts that actual_node (a DOM node object) is equivalent to\n    expected_node (another DOM node object), in that either both of\n    them are CDATA nodes and have the same value, or both are DOM\n    elements and actual_node meets all of the following conditions:\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_xml_test_utils.py"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 35,
                  "endLine": 45,
                  "endColumn": 41,
                  "snippet": {
                    "text": "  def AssertEquivalentNodes(self, expected_node, actual_node):\n    \"\"\"Asserts that actual_node is equivalent to expected_node.\n\n    Asserts that actual_node (a DOM node object) is equivalent to\n    expected_node (another DOM node object), in that either both of\n    them are CDATA nodes and have the same value, or both are DOM\n    elements and actual_node meets all of the following conditions:\n",
                    "rendered": {
                      "text": "  def AssertEquivalentNodes(self, expected_node, actual_node):\n    \"\"\"Asserts that actual_node is equivalent to expected_node.\n\n    Asserts that actual_node (a DOM node object) is equivalent to\n    expected_node (another DOM node object), in that either both of\n    them are CDATA nodes and have the same value, or both are DOM\n    elements and actual_node meets all of the following conditions:\n",
                      "markdown": "`  def AssertEquivalentNodes(self, expected_node, actual_node):\n    \"\"\"Asserts that actual_node is equivalent to expected_node.\n\n    Asserts that actual_node (a DOM node object) is equivalent to\n    expected_node (another DOM node object), in that either both of\n    them are CDATA nodes and have the same value, or both are DOM\n    elements and actual_node meets all of the following conditions:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_xml_test_utils.py"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 28,
                  "endLine": 34,
                  "snippet": {
                    "text": "\"\"\"Unit test utilities for gtest_xml_output\"\"\"\n\nimport re\nfrom xml.dom import minidom, Node\nfrom googletest.test import gtest_test_utils\n\nGTEST_DEFAULT_OUTPUT_FILE = 'test_detail.xml'\n\n",
                    "rendered": {
                      "text": "\"\"\"Unit test utilities for gtest_xml_output\"\"\"\n\nimport re\nfrom xml.dom import minidom, Node\nfrom googletest.test import gtest_test_utils\n\nGTEST_DEFAULT_OUTPUT_FILE = 'test_detail.xml'\n\n",
                      "markdown": "`\"\"\"Unit test utilities for gtest_xml_output\"\"\"\n\nimport re\nfrom xml.dom import minidom, Node\nfrom googletest.test import gtest_test_utils\n\nGTEST_DEFAULT_OUTPUT_FILE = 'test_detail.xml'\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-printers-test.cc"
                },
                "region": {
                  "startLine": 1881,
                  "startColumn": 49,
                  "endLine": 1881,
                  "endColumn": 54,
                  "snippet": {
                    "text": "                std::unique_ptr<void, void (*)(void*)>(p.get(), [](void*) {})));\n  EXPECT_EQ(\"(nullptr)\", PrintToString(std::shared_ptr<void>()));\n  EXPECT_EQ(\"(\" + PrintPointer(p.get()) + \")\",\n            PrintToString(std::shared_ptr<void>(p.get(), [](void*) {})));\n}\n\nTEST(UniversalTersePrintTupleFieldsToStringsTestWithStd, PrintsEmptyTuple) {\n",
                    "rendered": {
                      "text": "                std::unique_ptr<void, void (*)(void*)>(p.get(), [](void*) {})));\n  EXPECT_EQ(\"(nullptr)\", PrintToString(std::shared_ptr<void>()));\n  EXPECT_EQ(\"(\" + PrintPointer(p.get()) + \")\",\n            PrintToString(std::shared_ptr<void>(p.get(), [](void*) {})));\n}\n\nTEST(UniversalTersePrintTupleFieldsToStringsTestWithStd, PrintsEmptyTuple) {\n",
                      "markdown": "`                std::unique_ptr<void, void (*)(void*)>(p.get(), [](void*) {})));\n  EXPECT_EQ(\"(nullptr)\", PrintToString(std::shared_ptr<void>()));\n  EXPECT_EQ(\"(\" + PrintPointer(p.get()) + \")\",\n            PrintToString(std::shared_ptr<void>(p.get(), [](void*) {})));\n}\n\nTEST(UniversalTersePrintTupleFieldsToStringsTestWithStd, PrintsEmptyTuple) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-printers-test.cc"
                },
                "region": {
                  "startLine": 1880,
                  "startColumn": 32,
                  "endLine": 1880,
                  "endColumn": 37,
                  "snippet": {
                    "text": "            PrintToString(\n                std::unique_ptr<void, void (*)(void*)>(p.get(), [](void*) {})));\n  EXPECT_EQ(\"(nullptr)\", PrintToString(std::shared_ptr<void>()));\n  EXPECT_EQ(\"(\" + PrintPointer(p.get()) + \")\",\n            PrintToString(std::shared_ptr<void>(p.get(), [](void*) {})));\n}\n\n",
                    "rendered": {
                      "text": "            PrintToString(\n                std::unique_ptr<void, void (*)(void*)>(p.get(), [](void*) {})));\n  EXPECT_EQ(\"(nullptr)\", PrintToString(std::shared_ptr<void>()));\n  EXPECT_EQ(\"(\" + PrintPointer(p.get()) + \")\",\n            PrintToString(std::shared_ptr<void>(p.get(), [](void*) {})));\n}\n\n",
                      "markdown": "`            PrintToString(\n                std::unique_ptr<void, void (*)(void*)>(p.get(), [](void*) {})));\n  EXPECT_EQ(\"(nullptr)\", PrintToString(std::shared_ptr<void>()));\n  EXPECT_EQ(\"(\" + PrintPointer(p.get()) + \")\",\n            PrintToString(std::shared_ptr<void>(p.get(), [](void*) {})));\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-printers-test.cc"
                },
                "region": {
                  "startLine": 1878,
                  "startColumn": 56,
                  "endLine": 1878,
                  "endColumn": 61,
                  "snippet": {
                    "text": "                             nullptr, nullptr)));\n  EXPECT_EQ(\"(\" + PrintPointer(p.get()) + \")\",\n            PrintToString(\n                std::unique_ptr<void, void (*)(void*)>(p.get(), [](void*) {})));\n  EXPECT_EQ(\"(nullptr)\", PrintToString(std::shared_ptr<void>()));\n  EXPECT_EQ(\"(\" + PrintPointer(p.get()) + \")\",\n            PrintToString(std::shared_ptr<void>(p.get(), [](void*) {})));\n",
                    "rendered": {
                      "text": "                             nullptr, nullptr)));\n  EXPECT_EQ(\"(\" + PrintPointer(p.get()) + \")\",\n            PrintToString(\n                std::unique_ptr<void, void (*)(void*)>(p.get(), [](void*) {})));\n  EXPECT_EQ(\"(nullptr)\", PrintToString(std::shared_ptr<void>()));\n  EXPECT_EQ(\"(\" + PrintPointer(p.get()) + \")\",\n            PrintToString(std::shared_ptr<void>(p.get(), [](void*) {})));\n",
                      "markdown": "`                             nullptr, nullptr)));\n  EXPECT_EQ(\"(\" + PrintPointer(p.get()) + \")\",\n            PrintToString(\n                std::unique_ptr<void, void (*)(void*)>(p.get(), [](void*) {})));\n  EXPECT_EQ(\"(nullptr)\", PrintToString(std::shared_ptr<void>()));\n  EXPECT_EQ(\"(\" + PrintPointer(p.get()) + \")\",\n            PrintToString(std::shared_ptr<void>(p.get(), [](void*) {})));\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-printers-test.cc"
                },
                "region": {
                  "startLine": 1876,
                  "startColumn": 32,
                  "endLine": 1876,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  // void\n  EXPECT_EQ(\"(nullptr)\", PrintToString(std::unique_ptr<void, void (*)(void*)>(\n                             nullptr, nullptr)));\n  EXPECT_EQ(\"(\" + PrintPointer(p.get()) + \")\",\n            PrintToString(\n                std::unique_ptr<void, void (*)(void*)>(p.get(), [](void*) {})));\n  EXPECT_EQ(\"(nullptr)\", PrintToString(std::shared_ptr<void>()));\n",
                    "rendered": {
                      "text": "  // void\n  EXPECT_EQ(\"(nullptr)\", PrintToString(std::unique_ptr<void, void (*)(void*)>(\n                             nullptr, nullptr)));\n  EXPECT_EQ(\"(\" + PrintPointer(p.get()) + \")\",\n            PrintToString(\n                std::unique_ptr<void, void (*)(void*)>(p.get(), [](void*) {})));\n  EXPECT_EQ(\"(nullptr)\", PrintToString(std::shared_ptr<void>()));\n",
                      "markdown": "`  // void\n  EXPECT_EQ(\"(nullptr)\", PrintToString(std::unique_ptr<void, void (*)(void*)>(\n                             nullptr, nullptr)));\n  EXPECT_EQ(\"(\" + PrintPointer(p.get()) + \")\",\n            PrintToString(\n                std::unique_ptr<void, void (*)(void*)>(p.get(), [](void*) {})));\n  EXPECT_EQ(\"(nullptr)\", PrintToString(std::shared_ptr<void>()));\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-printers-test.cc"
                },
                "region": {
                  "startLine": 1847,
                  "startColumn": 33,
                  "endLine": 1847,
                  "endColumn": 38,
                  "snippet": {
                    "text": "#if defined(__cpp_lib_shared_ptr_arrays) && \\\n    (__cpp_lib_shared_ptr_arrays >= 201611L)\n  std::shared_ptr<int[]> p4(new int[2]);\n  EXPECT_EQ(\"(\" + PrintPointer(p4.get()) + \")\", PrintToString(p4));\n#endif\n\n  // modifiers\n",
                    "rendered": {
                      "text": "#if defined(__cpp_lib_shared_ptr_arrays) && \\\n    (__cpp_lib_shared_ptr_arrays >= 201611L)\n  std::shared_ptr<int[]> p4(new int[2]);\n  EXPECT_EQ(\"(\" + PrintPointer(p4.get()) + \")\", PrintToString(p4));\n#endif\n\n  // modifiers\n",
                      "markdown": "`#if defined(__cpp_lib_shared_ptr_arrays) && \\\n    (__cpp_lib_shared_ptr_arrays >= 201611L)\n  std::shared_ptr<int[]> p4(new int[2]);\n  EXPECT_EQ(\"(\" + PrintPointer(p4.get()) + \")\", PrintToString(p4));\n#endif\n\n  // modifiers\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-printers-test.cc"
                },
                "region": {
                  "startLine": 1842,
                  "startColumn": 39,
                  "endLine": 1842,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n  EXPECT_EQ(\"(nullptr)\", PrintToString(std::shared_ptr<int>()));\n  std::shared_ptr<int> p3(new int(1979));\n  EXPECT_EQ(\"(ptr = \" + PrintPointer(p3.get()) + \", value = 1979)\",\n            PrintToString(p3));\n#if defined(__cpp_lib_shared_ptr_arrays) && \\\n    (__cpp_lib_shared_ptr_arrays >= 201611L)\n",
                    "rendered": {
                      "text": "\n  EXPECT_EQ(\"(nullptr)\", PrintToString(std::shared_ptr<int>()));\n  std::shared_ptr<int> p3(new int(1979));\n  EXPECT_EQ(\"(ptr = \" + PrintPointer(p3.get()) + \", value = 1979)\",\n            PrintToString(p3));\n#if defined(__cpp_lib_shared_ptr_arrays) && \\\n    (__cpp_lib_shared_ptr_arrays >= 201611L)\n",
                      "markdown": "`\n  EXPECT_EQ(\"(nullptr)\", PrintToString(std::shared_ptr<int>()));\n  std::shared_ptr<int> p3(new int(1979));\n  EXPECT_EQ(\"(ptr = \" + PrintPointer(p3.get()) + \", value = 1979)\",\n            PrintToString(p3));\n#if defined(__cpp_lib_shared_ptr_arrays) && \\\n    (__cpp_lib_shared_ptr_arrays >= 201611L)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-printers-test.cc"
                },
                "region": {
                  "startLine": 1838,
                  "startColumn": 33,
                  "endLine": 1838,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  EXPECT_EQ(\"(ptr = \" + PrintPointer(p.get()) + \", value = 17)\",\n            PrintToString(p));\n  std::unique_ptr<int[]> p2(new int[2]);\n  EXPECT_EQ(\"(\" + PrintPointer(p2.get()) + \")\", PrintToString(p2));\n\n  EXPECT_EQ(\"(nullptr)\", PrintToString(std::shared_ptr<int>()));\n  std::shared_ptr<int> p3(new int(1979));\n",
                    "rendered": {
                      "text": "  EXPECT_EQ(\"(ptr = \" + PrintPointer(p.get()) + \", value = 17)\",\n            PrintToString(p));\n  std::unique_ptr<int[]> p2(new int[2]);\n  EXPECT_EQ(\"(\" + PrintPointer(p2.get()) + \")\", PrintToString(p2));\n\n  EXPECT_EQ(\"(nullptr)\", PrintToString(std::shared_ptr<int>()));\n  std::shared_ptr<int> p3(new int(1979));\n",
                      "markdown": "`  EXPECT_EQ(\"(ptr = \" + PrintPointer(p.get()) + \", value = 17)\",\n            PrintToString(p));\n  std::unique_ptr<int[]> p2(new int[2]);\n  EXPECT_EQ(\"(\" + PrintPointer(p2.get()) + \")\", PrintToString(p2));\n\n  EXPECT_EQ(\"(nullptr)\", PrintToString(std::shared_ptr<int>()));\n  std::shared_ptr<int> p3(new int(1979));\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-printers-test.cc"
                },
                "region": {
                  "startLine": 1835,
                  "startColumn": 38,
                  "endLine": 1835,
                  "endColumn": 43,
                  "snippet": {
                    "text": "TEST(UniversalPrintTest, SmartPointers) {\n  EXPECT_EQ(\"(nullptr)\", PrintToString(std::unique_ptr<int>()));\n  std::unique_ptr<int> p(new int(17));\n  EXPECT_EQ(\"(ptr = \" + PrintPointer(p.get()) + \", value = 17)\",\n            PrintToString(p));\n  std::unique_ptr<int[]> p2(new int[2]);\n  EXPECT_EQ(\"(\" + PrintPointer(p2.get()) + \")\", PrintToString(p2));\n",
                    "rendered": {
                      "text": "TEST(UniversalPrintTest, SmartPointers) {\n  EXPECT_EQ(\"(nullptr)\", PrintToString(std::unique_ptr<int>()));\n  std::unique_ptr<int> p(new int(17));\n  EXPECT_EQ(\"(ptr = \" + PrintPointer(p.get()) + \", value = 17)\",\n            PrintToString(p));\n  std::unique_ptr<int[]> p2(new int[2]);\n  EXPECT_EQ(\"(\" + PrintPointer(p2.get()) + \")\", PrintToString(p2));\n",
                      "markdown": "`TEST(UniversalPrintTest, SmartPointers) {\n  EXPECT_EQ(\"(nullptr)\", PrintToString(std::unique_ptr<int>()));\n  std::unique_ptr<int> p(new int(17));\n  EXPECT_EQ(\"(ptr = \" + PrintPointer(p.get()) + \", value = 17)\",\n            PrintToString(p));\n  std::unique_ptr<int[]> p2(new int[2]);\n  EXPECT_EQ(\"(\" + PrintPointer(p2.get()) + \")\", PrintToString(p2));\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-printers-test.cc"
                },
                "region": {
                  "startLine": 1711,
                  "startColumn": 11,
                  "endLine": 1711,
                  "endColumn": 35,
                  "snippet": {
                    "text": "      {\"\\xF0\\xE2\\x80\", \"\\\"\\\\xF0\\\\xE2\\\\x80\\\"\"},\n      // Invalid UTF-8 byte sequences embedded in other chars.\n      {\"abc\\xE2\\x80\\x94\\xC3\\x74xyc\", \"\\\"abc\\\\xE2\\\\x80\\\\x94\\\\xC3txyc\\\"\"},\n      {\"abc\\xC3\\x84\\xE2\\x80\\xC3\\x84xyz\",\n       \"\\\"abc\\\\xC3\\\\x84\\\\xE2\\\\x80\\\\xC3\\\\x84xyz\\\"\"},\n      // Non-shortest UTF-8 byte sequences are also ill-formed.\n      // The classics: xC0, xC1 lead byte.\n",
                    "rendered": {
                      "text": "      {\"\\xF0\\xE2\\x80\", \"\\\"\\\\xF0\\\\xE2\\\\x80\\\"\"},\n      // Invalid UTF-8 byte sequences embedded in other chars.\n      {\"abc\\xE2\\x80\\x94\\xC3\\x74xyc\", \"\\\"abc\\\\xE2\\\\x80\\\\x94\\\\xC3txyc\\\"\"},\n      {\"abc\\xC3\\x84\\xE2\\x80\\xC3\\x84xyz\",\n       \"\\\"abc\\\\xC3\\\\x84\\\\xE2\\\\x80\\\\xC3\\\\x84xyz\\\"\"},\n      // Non-shortest UTF-8 byte sequences are also ill-formed.\n      // The classics: xC0, xC1 lead byte.\n",
                      "markdown": "`      {\"\\xF0\\xE2\\x80\", \"\\\"\\\\xF0\\\\xE2\\\\x80\\\"\"},\n      // Invalid UTF-8 byte sequences embedded in other chars.\n      {\"abc\\xE2\\x80\\x94\\xC3\\x74xyc\", \"\\\"abc\\\\xE2\\\\x80\\\\x94\\\\xC3txyc\\\"\"},\n      {\"abc\\xC3\\x84\\xE2\\x80\\xC3\\x84xyz\",\n       \"\\\"abc\\\\xC3\\\\x84\\\\xE2\\\\x80\\\\xC3\\\\x84xyz\\\"\"},\n      // Non-shortest UTF-8 byte sequences are also ill-formed.\n      // The classics: xC0, xC1 lead byte.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-printers-test.cc"
                },
                "region": {
                  "startLine": 1710,
                  "startColumn": 11,
                  "endLine": 1710,
                  "endColumn": 31,
                  "snippet": {
                    "text": "      // Truncated 4-byte character.\n      {\"\\xF0\\xE2\\x80\", \"\\\"\\\\xF0\\\\xE2\\\\x80\\\"\"},\n      // Invalid UTF-8 byte sequences embedded in other chars.\n      {\"abc\\xE2\\x80\\x94\\xC3\\x74xyc\", \"\\\"abc\\\\xE2\\\\x80\\\\x94\\\\xC3txyc\\\"\"},\n      {\"abc\\xC3\\x84\\xE2\\x80\\xC3\\x84xyz\",\n       \"\\\"abc\\\\xC3\\\\x84\\\\xE2\\\\x80\\\\xC3\\\\x84xyz\\\"\"},\n      // Non-shortest UTF-8 byte sequences are also ill-formed.\n",
                    "rendered": {
                      "text": "      // Truncated 4-byte character.\n      {\"\\xF0\\xE2\\x80\", \"\\\"\\\\xF0\\\\xE2\\\\x80\\\"\"},\n      // Invalid UTF-8 byte sequences embedded in other chars.\n      {\"abc\\xE2\\x80\\x94\\xC3\\x74xyc\", \"\\\"abc\\\\xE2\\\\x80\\\\x94\\\\xC3txyc\\\"\"},\n      {\"abc\\xC3\\x84\\xE2\\x80\\xC3\\x84xyz\",\n       \"\\\"abc\\\\xC3\\\\x84\\\\xE2\\\\x80\\\\xC3\\\\x84xyz\\\"\"},\n      // Non-shortest UTF-8 byte sequences are also ill-formed.\n",
                      "markdown": "`      // Truncated 4-byte character.\n      {\"\\xF0\\xE2\\x80\", \"\\\"\\\\xF0\\\\xE2\\\\x80\\\"\"},\n      // Invalid UTF-8 byte sequences embedded in other chars.\n      {\"abc\\xE2\\x80\\x94\\xC3\\x74xyc\", \"\\\"abc\\\\xE2\\\\x80\\\\x94\\\\xC3txyc\\\"\"},\n      {\"abc\\xC3\\x84\\xE2\\x80\\xC3\\x84xyz\",\n       \"\\\"abc\\\\xC3\\\\x84\\\\xE2\\\\x80\\\\xC3\\\\x84xyz\\\"\"},\n      // Non-shortest UTF-8 byte sequences are also ill-formed.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-printers-test.cc"
                },
                "region": {
                  "startLine": 1042,
                  "startColumn": 12,
                  "endLine": 1042,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\nTEST(PrintTypeWithGenericStreamingTest, TypeImplicitlyConvertible) {\n  AllowsGenericStreamingAndImplicitConversionTemplate<int> a;\n  EXPECT_EQ(\"AllowsGenericStreamingAndImplicitConversionTemplate\", Print(a));\n}\n\n#if GTEST_INTERNAL_HAS_STRING_VIEW\n",
                    "rendered": {
                      "text": "\nTEST(PrintTypeWithGenericStreamingTest, TypeImplicitlyConvertible) {\n  AllowsGenericStreamingAndImplicitConversionTemplate<int> a;\n  EXPECT_EQ(\"AllowsGenericStreamingAndImplicitConversionTemplate\", Print(a));\n}\n\n#if GTEST_INTERNAL_HAS_STRING_VIEW\n",
                      "markdown": "`\nTEST(PrintTypeWithGenericStreamingTest, TypeImplicitlyConvertible) {\n  AllowsGenericStreamingAndImplicitConversionTemplate<int> a;\n  EXPECT_EQ(\"AllowsGenericStreamingAndImplicitConversionTemplate\", Print(a));\n}\n\n#if GTEST_INTERNAL_HAS_STRING_VIEW\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-printers-test.cc"
                },
                "region": {
                  "startLine": 1037,
                  "startColumn": 15,
                  "endLine": 1037,
                  "endColumn": 68,
                  "snippet": {
                    "text": "std::basic_ostream<Char, CharTraits>& operator<<(\n    std::basic_ostream<Char, CharTraits>& os,\n    const AllowsGenericStreamingAndImplicitConversionTemplate<T>& /* a */) {\n  return os << \"AllowsGenericStreamingAndImplicitConversionTemplate\";\n}\n\nTEST(PrintTypeWithGenericStreamingTest, TypeImplicitlyConvertible) {\n",
                    "rendered": {
                      "text": "std::basic_ostream<Char, CharTraits>& operator<<(\n    std::basic_ostream<Char, CharTraits>& os,\n    const AllowsGenericStreamingAndImplicitConversionTemplate<T>& /* a */) {\n  return os << \"AllowsGenericStreamingAndImplicitConversionTemplate\";\n}\n\nTEST(PrintTypeWithGenericStreamingTest, TypeImplicitlyConvertible) {\n",
                      "markdown": "`std::basic_ostream<Char, CharTraits>& operator<<(\n    std::basic_ostream<Char, CharTraits>& os,\n    const AllowsGenericStreamingAndImplicitConversionTemplate<T>& /* a */) {\n  return os << \"AllowsGenericStreamingAndImplicitConversionTemplate\";\n}\n\nTEST(PrintTypeWithGenericStreamingTest, TypeImplicitlyConvertible) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/internal/gtest-type-util.h"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 7,
                  "endLine": 184,
                  "endColumn": 13,
                  "snippet": {
                    "text": "template <typename Head_>\nstruct Types<Head_> {\n  using Head = Head_;\n  using Tail = None;\n};\n\n// Helper metafunctions to tell apart a single type from types\n",
                    "rendered": {
                      "text": "template <typename Head_>\nstruct Types<Head_> {\n  using Head = Head_;\n  using Tail = None;\n};\n\n// Helper metafunctions to tell apart a single type from types\n",
                      "markdown": "`template <typename Head_>\nstruct Types<Head_> {\n  using Head = Head_;\n  using Tail = None;\n};\n\n// Helper metafunctions to tell apart a single type from types\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/internal/gtest-type-util.h"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 7,
                  "endLine": 183,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\ntemplate <typename Head_>\nstruct Types<Head_> {\n  using Head = Head_;\n  using Tail = None;\n};\n\n",
                    "rendered": {
                      "text": "\ntemplate <typename Head_>\nstruct Types<Head_> {\n  using Head = Head_;\n  using Tail = None;\n};\n\n",
                      "markdown": "`\ntemplate <typename Head_>\nstruct Types<Head_> {\n  using Head = Head_;\n  using Tail = None;\n};\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/internal/gtest-type-util.h"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 7,
                  "endLine": 178,
                  "endColumn": 13,
                  "snippet": {
                    "text": "template <typename Head_, typename... Tail_>\nstruct Types {\n  using Head = Head_;\n  using Tail = Types<Tail_...>;\n};\n\ntemplate <typename Head_>\n",
                    "rendered": {
                      "text": "template <typename Head_, typename... Tail_>\nstruct Types {\n  using Head = Head_;\n  using Tail = Types<Tail_...>;\n};\n\ntemplate <typename Head_>\n",
                      "markdown": "`template <typename Head_, typename... Tail_>\nstruct Types {\n  using Head = Head_;\n  using Tail = Types<Tail_...>;\n};\n\ntemplate <typename Head_>\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/internal/gtest-type-util.h"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 7,
                  "endLine": 177,
                  "endColumn": 13,
                  "snippet": {
                    "text": "// Tuple-like type lists\ntemplate <typename Head_, typename... Tail_>\nstruct Types {\n  using Head = Head_;\n  using Tail = Types<Tail_...>;\n};\n\n",
                    "rendered": {
                      "text": "// Tuple-like type lists\ntemplate <typename Head_, typename... Tail_>\nstruct Types {\n  using Head = Head_;\n  using Tail = Types<Tail_...>;\n};\n\n",
                      "markdown": "`// Tuple-like type lists\ntemplate <typename Head_, typename... Tail_>\nstruct Types {\n  using Head = Head_;\n  using Tail = Types<Tail_...>;\n};\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/internal/gtest-type-util.h"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 7,
                  "endLine": 171,
                  "endColumn": 13,
                  "snippet": {
                    "text": "template <GTEST_TEMPLATE_ Head_>\nstruct Templates<Head_> {\n  using Head = TemplateSel<Head_>;\n  using Tail = None;\n};\n\n// Tuple-like type lists\n",
                    "rendered": {
                      "text": "template <GTEST_TEMPLATE_ Head_>\nstruct Templates<Head_> {\n  using Head = TemplateSel<Head_>;\n  using Tail = None;\n};\n\n// Tuple-like type lists\n",
                      "markdown": "`template <GTEST_TEMPLATE_ Head_>\nstruct Templates<Head_> {\n  using Head = TemplateSel<Head_>;\n  using Tail = None;\n};\n\n// Tuple-like type lists\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/internal/gtest-type-util.h"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 7,
                  "endLine": 170,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\ntemplate <GTEST_TEMPLATE_ Head_>\nstruct Templates<Head_> {\n  using Head = TemplateSel<Head_>;\n  using Tail = None;\n};\n\n",
                    "rendered": {
                      "text": "\ntemplate <GTEST_TEMPLATE_ Head_>\nstruct Templates<Head_> {\n  using Head = TemplateSel<Head_>;\n  using Tail = None;\n};\n\n",
                      "markdown": "`\ntemplate <GTEST_TEMPLATE_ Head_>\nstruct Templates<Head_> {\n  using Head = TemplateSel<Head_>;\n  using Tail = None;\n};\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/internal/gtest-type-util.h"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 7,
                  "endLine": 165,
                  "endColumn": 13,
                  "snippet": {
                    "text": "template <GTEST_TEMPLATE_ Head_, GTEST_TEMPLATE_... Tail_>\nstruct Templates {\n  using Head = TemplateSel<Head_>;\n  using Tail = Templates<Tail_...>;\n};\n\ntemplate <GTEST_TEMPLATE_ Head_>\n",
                    "rendered": {
                      "text": "template <GTEST_TEMPLATE_ Head_, GTEST_TEMPLATE_... Tail_>\nstruct Templates {\n  using Head = TemplateSel<Head_>;\n  using Tail = Templates<Tail_...>;\n};\n\ntemplate <GTEST_TEMPLATE_ Head_>\n",
                      "markdown": "`template <GTEST_TEMPLATE_ Head_, GTEST_TEMPLATE_... Tail_>\nstruct Templates {\n  using Head = TemplateSel<Head_>;\n  using Tail = Templates<Tail_...>;\n};\n\ntemplate <GTEST_TEMPLATE_ Head_>\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/internal/gtest-type-util.h"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 7,
                  "endLine": 164,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\ntemplate <GTEST_TEMPLATE_ Head_, GTEST_TEMPLATE_... Tail_>\nstruct Templates {\n  using Head = TemplateSel<Head_>;\n  using Tail = Templates<Tail_...>;\n};\n\n",
                    "rendered": {
                      "text": "\ntemplate <GTEST_TEMPLATE_ Head_, GTEST_TEMPLATE_... Tail_>\nstruct Templates {\n  using Head = TemplateSel<Head_>;\n  using Tail = Templates<Tail_...>;\n};\n\n",
                      "markdown": "`\ntemplate <GTEST_TEMPLATE_ Head_, GTEST_TEMPLATE_... Tail_>\nstruct Templates {\n  using Head = TemplateSel<Head_>;\n  using Tail = Templates<Tail_...>;\n};\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/gtest.h"
                },
                "region": {
                  "startLine": 2328,
                  "startColumn": 13,
                  "endLine": 2328,
                  "endColumn": 55,
                  "snippet": {
                    "text": "//\n// RUN_ALL_TESTS() should be invoked after the command line has been\n// parsed by InitGoogleTest(). RUN_ALL_TESTS will tear down and delete any\n// installed environments and should only be called once per binary.\n//\n// This function was formerly a macro; thus, it is in the global\n// namespace and has an all-caps name.\n",
                    "rendered": {
                      "text": "//\n// RUN_ALL_TESTS() should be invoked after the command line has been\n// parsed by InitGoogleTest(). RUN_ALL_TESTS will tear down and delete any\n// installed environments and should only be called once per binary.\n//\n// This function was formerly a macro; thus, it is in the global\n// namespace and has an all-caps name.\n",
                      "markdown": "`//\n// RUN_ALL_TESTS() should be invoked after the command line has been\n// parsed by InitGoogleTest(). RUN_ALL_TESTS will tear down and delete any\n// installed environments and should only be called once per binary.\n//\n// This function was formerly a macro; thus, it is in the global\n// namespace and has an all-caps name.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/gtest.h"
                },
                "region": {
                  "startLine": 1342,
                  "startColumn": 29,
                  "endLine": 1342,
                  "endColumn": 56,
                  "snippet": {
                    "text": "// call AddGlobalTestEnvironment() there, as relying on initialization\n// of global variables makes the code harder to read and may cause\n// problems when you register multiple environments from different\n// translation units and the environments have dependencies among them\n// (remember that the compiler doesn't guarantee the order in which\n// global variables from different translation units are initialized).\ninline Environment* AddGlobalTestEnvironment(Environment* env) {\n",
                    "rendered": {
                      "text": "// call AddGlobalTestEnvironment() there, as relying on initialization\n// of global variables makes the code harder to read and may cause\n// problems when you register multiple environments from different\n// translation units and the environments have dependencies among them\n// (remember that the compiler doesn't guarantee the order in which\n// global variables from different translation units are initialized).\ninline Environment* AddGlobalTestEnvironment(Environment* env) {\n",
                      "markdown": "`// call AddGlobalTestEnvironment() there, as relying on initialization\n// of global variables makes the code harder to read and may cause\n// problems when you register multiple environments from different\n// translation units and the environments have dependencies among them\n// (remember that the compiler doesn't guarantee the order in which\n// global variables from different translation units are initialized).\ninline Environment* AddGlobalTestEnvironment(Environment* env) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/gtest.h"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 8,
                  "endLine": 135,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n// This flag controls whether Google Test Environments are recreated for each\n// repeat of the tests. The default value is true. If set to false the global\n// test Environment objects are only set up once, for the first iteration, and\n// only torn down once, for the last.\nGTEST_DECLARE_bool_(recreate_environments_when_repeating);\n\n",
                    "rendered": {
                      "text": "\n// This flag controls whether Google Test Environments are recreated for each\n// repeat of the tests. The default value is true. If set to false the global\n// test Environment objects are only set up once, for the first iteration, and\n// only torn down once, for the last.\nGTEST_DECLARE_bool_(recreate_environments_when_repeating);\n\n",
                      "markdown": "`\n// This flag controls whether Google Test Environments are recreated for each\n// repeat of the tests. The default value is true. If set to false the global\n// test Environment objects are only set up once, for the first iteration, and\n// only torn down once, for the last.\nGTEST_DECLARE_bool_(recreate_environments_when_repeating);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 611,
                  "startColumn": 50,
                  "endLine": 611,
                  "endColumn": 54,
                  "snippet": {
                    "text": "How would you test that the turtle is asked to go to the origin *exactly twice*\n(you want to ignore any other instructions it receives)?\n\nAfter you've come up with your answer, take a look at ours and compare notes\n(solve it yourself first - don't cheat!):\n\n```cpp\n",
                    "rendered": {
                      "text": "How would you test that the turtle is asked to go to the origin *exactly twice*\n(you want to ignore any other instructions it receives)?\n\nAfter you've come up with your answer, take a look at ours and compare notes\n(solve it yourself first - don't cheat!):\n\n```cpp\n",
                      "markdown": "`How would you test that the turtle is asked to go to the origin *exactly twice*\n(you want to ignore any other instructions it receives)?\n\nAfter you've come up with your answer, take a look at ours and compare notes\n(solve it yourself first - don't cheat!):\n\n```cpp\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 563,
                  "startColumn": 34,
                  "endLine": 563,
                  "endColumn": 38,
                  "snippet": {
                    "text": "**Tip:** It is very common to start with a catch-all expectation for a method\nand `Times(AnyNumber())` (omitting arguments, or with `_` for all arguments, if\noverloaded). This makes any calls to the method expected. This is not necessary\nfor methods that are not mentioned at all (these are \"uninteresting\"), but is\nuseful for methods that have some expectations, but for which other calls are\nok. See\n[Understanding Uninteresting vs Unexpected Calls](gmock_cook_book.md#uninteresting-vs-unexpected).\n",
                    "rendered": {
                      "text": "**Tip:** It is very common to start with a catch-all expectation for a method\nand `Times(AnyNumber())` (omitting arguments, or with `_` for all arguments, if\noverloaded). This makes any calls to the method expected. This is not necessary\nfor methods that are not mentioned at all (these are \"uninteresting\"), but is\nuseful for methods that have some expectations, but for which other calls are\nok. See\n[Understanding Uninteresting vs Unexpected Calls](gmock_cook_book.md#uninteresting-vs-unexpected).\n",
                      "markdown": "`**Tip:** It is very common to start with a catch-all expectation for a method\nand `Times(AnyNumber())` (omitting arguments, or with `_` for all arguments, if\noverloaded). This makes any calls to the method expected. This is not necessary\nfor methods that are not mentioned at all (these are \"uninteresting\"), but is\nuseful for methods that have some expectations, but for which other calls are\nok. See\n[Understanding Uninteresting vs Unexpected Calls](gmock_cook_book.md#uninteresting-vs-unexpected).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 411,
                  "startColumn": 68,
                  "endLine": 411,
                  "endColumn": 72,
                  "snippet": {
                    "text": "matcher can be. This allows a user to express the intent of a test exactly.\n\nAn interesting special case is when we say `Times(0)`. You may have guessed - it\nmeans that the function shouldn't be called with the given arguments at all, and\ngMock will report a googletest failure whenever the function is (wrongfully)\ncalled.\n\n",
                    "rendered": {
                      "text": "matcher can be. This allows a user to express the intent of a test exactly.\n\nAn interesting special case is when we say `Times(0)`. You may have guessed - it\nmeans that the function shouldn't be called with the given arguments at all, and\ngMock will report a googletest failure whenever the function is (wrongfully)\ncalled.\n\n",
                      "markdown": "`matcher can be. This allows a user to express the intent of a test exactly.\n\nAn interesting special case is when we say `Times(0)`. You may have guessed - it\nmeans that the function shouldn't be called with the given arguments at all, and\ngMock will report a googletest failure whenever the function is (wrongfully)\ncalled.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 383,
                  "startColumn": 38,
                  "endLine": 383,
                  "endColumn": 42,
                  "snippet": {
                    "text": "```cpp\nusing ::testing::Ge;\n...\n// Expects the turtle moves forward by at least 100.\nEXPECT_CALL(turtle, Forward(Ge(100)));\n```\n\n",
                    "rendered": {
                      "text": "```cpp\nusing ::testing::Ge;\n...\n// Expects the turtle moves forward by at least 100.\nEXPECT_CALL(turtle, Forward(Ge(100)));\n```\n\n",
                      "markdown": "````cpp\nusing ::testing::Ge;\n...\n// Expects the turtle moves forward by at least 100.\nEXPECT_CALL(turtle, Forward(Ge(100)));\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 16,
                  "endLine": 251,
                  "endColumn": 20,
                  "snippet": {
                    "text": "path/to/my_test.cc:119: Failure\nActual function call count doesn't match this expectation:\nActually: never called;\nExpected: called at least once.\nStack trace:\n...\n```\n",
                    "rendered": {
                      "text": "path/to/my_test.cc:119: Failure\nActual function call count doesn't match this expectation:\nActually: never called;\nExpected: called at least once.\nStack trace:\n...\n```\n",
                      "markdown": "`path/to/my_test.cc:119: Failure\nActual function call count doesn't match this expectation:\nActually: never called;\nExpected: called at least once.\nStack trace:\n...\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 70,
                  "endLine": 243,
                  "endColumn": 74,
                  "snippet": {
                    "text": "}\n```\n\nAs you might have guessed, this test checks that `PenDown()` is called at least\nonce. If the `painter` object didn't call this method, your test will fail with\na message like this:\n\n",
                    "rendered": {
                      "text": "}\n```\n\nAs you might have guessed, this test checks that `PenDown()` is called at least\nonce. If the `painter` object didn't call this method, your test will fail with\na message like this:\n\n",
                      "markdown": "`}\n```\n\nAs you might have guessed, this test checks that `PenDown()` is called at least\nonce. If the `painter` object didn't call this method, your test will fail with\na message like this:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 20,
                  "endLine": 124,
                  "endColumn": 29,
                  "snippet": {
                    "text": "pointer, and you'll get corrupted program states like memory leaks.)\n\nYou can control whether the turtle's movement will leave a trace using `PenUp()`\nand `PenDown()`, and control its movement using `Forward()`, `Turn()`, and\n`GoTo()`. Finally, `GetX()` and `GetY()` tell you the current position of the\nturtle.\n\n",
                    "rendered": {
                      "text": "pointer, and you'll get corrupted program states like memory leaks.)\n\nYou can control whether the turtle's movement will leave a trace using `PenUp()`\nand `PenDown()`, and control its movement using `Forward()`, `Turn()`, and\n`GoTo()`. Finally, `GetX()` and `GetY()` tell you the current position of the\nturtle.\n\n",
                      "markdown": "`pointer, and you'll get corrupted program states like memory leaks.)\n\nYou can control whether the turtle's movement will leave a trace using `PenUp()`\nand `PenDown()`, and control its movement using `Forward()`, `Turn()`, and\n`GoTo()`. Finally, `GetX()` and `GetY()` tell you the current position of the\nturtle.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 7,
                  "endLine": 123,
                  "endColumn": 16,
                  "snippet": {
                    "text": "derived class will not be called when you delete an object through a base\npointer, and you'll get corrupted program states like memory leaks.)\n\nYou can control whether the turtle's movement will leave a trace using `PenUp()`\nand `PenDown()`, and control its movement using `Forward()`, `Turn()`, and\n`GoTo()`. Finally, `GetX()` and `GetY()` tell you the current position of the\nturtle.\n",
                    "rendered": {
                      "text": "derived class will not be called when you delete an object through a base\npointer, and you'll get corrupted program states like memory leaks.)\n\nYou can control whether the turtle's movement will leave a trace using `PenUp()`\nand `PenDown()`, and control its movement using `Forward()`, `Turn()`, and\n`GoTo()`. Finally, `GetX()` and `GetY()` tell you the current position of the\nturtle.\n",
                      "markdown": "`derived class will not be called when you delete an object through a base\npointer, and you'll get corrupted program states like memory leaks.)\n\nYou can control whether the turtle's movement will leave a trace using `PenUp()`\nand `PenDown()`, and control its movement using `Forward()`, `Turn()`, and\n`GoTo()`. Finally, `GetX()` and `GetY()` tell you the current position of the\nturtle.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 75,
                  "endLine": 98,
                  "endColumn": 7,
                  "snippet": {
                    "text": "How would you test that it does the right thing? Well, you can\nrun it and compare the screen with a golden screen snapshot, but let's admit it:\ntests like this are expensive to run and fragile (What if you just upgraded to a\nshiny new graphics card that has better anti-aliasing? Suddenly you have to\nupdate all your golden images.). It would be too painful if all your tests are\nlike this. Fortunately, you learned about\n[Dependency Injection](https://en.wikipedia.org/wiki/Dependency_injection) and know the right thing\nto do: instead of having your application talk to the system API directly, wrap\nthe AP",
                    "rendered": {
                      "text": "How would you test that it does the right thing? Well, you can\nrun it and compare the screen with a golden screen snapshot, but let's admit it:\ntests like this are expensive to run and fragile (What if you just upgraded to a\nshiny new graphics card that has better anti-aliasing? Suddenly you have to\nupdate all your golden images.). It would be too painful if all your tests are\nlike this. Fortunately, you learned about\n[Dependency Injection](https://en.wikipedia.org/wiki/Dependency_injection) and know the right thing\nto do: instead of having your application talk to the system API directly, wrap\nthe AP",
                      "markdown": "`How would you test that it does the right thing? Well, you can\nrun it and compare the screen with a golden screen snapshot, but let's admit it:\ntests like this are expensive to run and fragile (What if you just upgraded to a\nshiny new graphics card that has better anti-aliasing? Suddenly you have to\nupdate all your golden images.). It would be too painful if all your tests are\nlike this. Fortunately, you learned about\n[Dependency Injection](https://en.wikipedia.org/wiki/Dependency_injection) and know the right thing\nto do: instead of having your application talk to the system API directly, wrap\nthe AP`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 10,
                  "endLine": 92,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n## A Case for Mock Turtles\n\nLet's look at an example. Suppose you are developing a graphics program that\nrelies on a [LOGO](https://en.wikipedia.org/wiki/Logo_programming_language)-like\nAPI for drawing. How would you test that it does the right thing? Well, you can\nrun it and compare the screen with a golden screen snapshot, but let's admit it:\n",
                    "rendered": {
                      "text": "\n## A Case for Mock Turtles\n\nLet's look at an example. Suppose you are developing a graphics program that\nrelies on a [LOGO](https://en.wikipedia.org/wiki/Logo_programming_language)-like\nAPI for drawing. How would you test that it does the right thing? Well, you can\nrun it and compare the screen with a golden screen snapshot, but let's admit it:\n",
                      "markdown": "`\n## A Case for Mock Turtles\n\nLet's look at an example. Suppose you are developing a graphics program that\nrelies on a [LOGO](https://en.wikipedia.org/wiki/Logo_programming_language)-like\nAPI for drawing. How would you test that it does the right thing? Well, you can\nrun it and compare the screen with a golden screen snapshot, but let's admit it:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 73,
                  "endLine": 74,
                  "snippet": {
                    "text": "    error), but it's not easy to cause one.\n*   You need to make sure that your module interacts with other modules in the\n    right way, but it's hard to observe the interaction; therefore you resort to\n    observing the side effects at the end of the action, but it's awkward at\n    best.\n*   You want to \"mock out\" your dependencies, except that they don't have mock\n    implementations yet; and, frankly, you aren't thrilled by some of those\n    hand-written mocks.\n",
                    "rendered": {
                      "text": "    error), but it's not easy to cause one.\n*   You need to make sure that your module interacts with other modules in the\n    right way, but it's hard to observe the interaction; therefore you resort to\n    observing the side effects at the end of the action, but it's awkward at\n    best.\n*   You want to \"mock out\" your dependencies, except that they don't have mock\n    implementations yet; and, frankly, you aren't thrilled by some of those\n    hand-written mocks.\n",
                      "markdown": "`    error), but it's not easy to cause one.\n*   You need to make sure that your module interacts with other modules in the\n    right way, but it's hard to observe the interaction; therefore you resort to\n    observing the side effects at the end of the action, but it's awkward at\n    best.\n*   You want to \"mock out\" your dependencies, except that they don't have mock\n    implementations yet; and, frankly, you aren't thrilled by some of those\n    hand-written mocks.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 30,
                  "endLine": 73,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    error), but it's not easy to cause one.\n*   You need to make sure that your module interacts with other modules in the\n    right way, but it's hard to observe the interaction; therefore you resort to\n    observing the side effects at the end of the action, but it's awkward at\n    best.\n*   You want to \"mock out\" your dependencies, except that they don't have mock\n    implementations yet; and, frankly, you aren't thrilled by some of those\n",
                    "rendered": {
                      "text": "    error), but it's not easy to cause one.\n*   You need to make sure that your module interacts with other modules in the\n    right way, but it's hard to observe the interaction; therefore you resort to\n    observing the side effects at the end of the action, but it's awkward at\n    best.\n*   You want to \"mock out\" your dependencies, except that they don't have mock\n    implementations yet; and, frankly, you aren't thrilled by some of those\n",
                      "markdown": "`    error), but it's not easy to cause one.\n*   You need to make sure that your module interacts with other modules in the\n    right way, but it's hard to observe the interaction; therefore you resort to\n    observing the side effects at the end of the action, but it's awkward at\n    best.\n*   You want to \"mock out\" your dependencies, except that they don't have mock\n    implementations yet; and, frankly, you aren't thrilled by some of those\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 23,
                  "endLine": 34,
                  "endColumn": 31,
                  "snippet": {
                    "text": "When using gMock,\n\n1.  first, you use some simple macros to describe the interface you want to\n    mock, and they will expand to the implementation of your mock class;\n2.  next, you create some mock objects and specify its expectations and behavior\n    using an intuitive syntax;\n3.  then you exercise code that uses the mock objects. gMock will catch any\n",
                    "rendered": {
                      "text": "When using gMock,\n\n1.  first, you use some simple macros to describe the interface you want to\n    mock, and they will expand to the implementation of your mock class;\n2.  next, you create some mock objects and specify its expectations and behavior\n    using an intuitive syntax;\n3.  then you exercise code that uses the mock objects. gMock will catch any\n",
                      "markdown": "`When using gMock,\n\n1.  first, you use some simple macros to describe the interface you want to\n    mock, and they will expand to the implementation of your mock class;\n2.  next, you create some mock objects and specify its expectations and behavior\n    using an intuitive syntax;\n3.  then you exercise code that uses the mock objects. gMock will catch any\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 55,
                  "endLine": 7,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\nWhen you write a prototype or test, often it's not feasible or wise to rely on\nreal objects entirely. A **mock object** implements the same interface as a real\nobject (so it can be used as one), but lets you specify at run time how it will\nbe used and what it should do (which methods will be called? in which order? how\nmany times? with what arguments? what will they return? etc).\n\n",
                    "rendered": {
                      "text": "\nWhen you write a prototype or test, often it's not feasible or wise to rely on\nreal objects entirely. A **mock object** implements the same interface as a real\nobject (so it can be used as one), but lets you specify at run time how it will\nbe used and what it should do (which methods will be called? in which order? how\nmany times? with what arguments? what will they return? etc).\n\n",
                      "markdown": "`\nWhen you write a prototype or test, often it's not feasible or wise to rely on\nreal objects entirely. A **mock object** implements the same interface as a real\nobject (so it can be used as one), but lets you specify at run time how it will\nbe used and what it should do (which methods will be called? in which order? how\nmany times? with what arguments? what will they return? etc).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 669,
                  "startColumn": 52,
                  "endLine": 669,
                  "endColumn": 60,
                  "snippet": {
                    "text": "}\n```\n\nAnd, there's a better way to do it: in this case, we expect the calls to occur\nin a specific order, and we line up the actions to match the order. Since the\norder is important here, we should make it explicit using a sequence:\n\n",
                    "rendered": {
                      "text": "}\n```\n\nAnd, there's a better way to do it: in this case, we expect the calls to occur\nin a specific order, and we line up the actions to match the order. Since the\norder is important here, we should make it explicit using a sequence:\n\n",
                      "markdown": "`}\n```\n\nAnd, there's a better way to do it: in this case, we expect the calls to occur\nin a specific order, and we line up the actions to match the order. Since the\norder is important here, we should make it explicit using a sequence:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 651,
                  "startColumn": 45,
                  "endLine": 651,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\nIf you think it says that `turtle.GetX()` will be called `n` times and will\nreturn 10, 20, 30, ..., consecutively, think twice! The problem is that, as we\nsaid, expectations are sticky. So, the second time `turtle.GetX()` is called,\nthe last (latest) `EXPECT_CALL()` statement will match, and will immediately\nlead to an \"upper bound violated\" error - this piece of code is not very useful!\n\n",
                    "rendered": {
                      "text": "\nIf you think it says that `turtle.GetX()` will be called `n` times and will\nreturn 10, 20, 30, ..., consecutively, think twice! The problem is that, as we\nsaid, expectations are sticky. So, the second time `turtle.GetX()` is called,\nthe last (latest) `EXPECT_CALL()` statement will match, and will immediately\nlead to an \"upper bound violated\" error - this piece of code is not very useful!\n\n",
                      "markdown": "`\nIf you think it says that `turtle.GetX()` will be called `n` times and will\nreturn 10, 20, 30, ..., consecutively, think twice! The problem is that, as we\nsaid, expectations are sticky. So, the second time `turtle.GetX()` is called,\nthe last (latest) `EXPECT_CALL()` statement will match, and will immediately\nlead to an \"upper bound violated\" error - this piece of code is not very useful!\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 545,
                  "startColumn": 58,
                  "endLine": 545,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    .Times(2);\n```\n\nIf `Forward(10)` is called three times in a row, the third time it will be an\nerror, as the last matching expectation (#2) has been saturated. If, however,\nthe third `Forward(10)` call is replaced by `Forward(20)`, then it would be OK,\nas now #1 will be the matching expectation.\n",
                    "rendered": {
                      "text": "    .Times(2);\n```\n\nIf `Forward(10)` is called three times in a row, the third time it will be an\nerror, as the last matching expectation (#2) has been saturated. If, however,\nthe third `Forward(10)` call is replaced by `Forward(20)`, then it would be OK,\nas now #1 will be the matching expectation.\n",
                      "markdown": "`    .Times(2);\n```\n\nIf `Forward(10)` is called three times in a row, the third time it will be an\nerror, as the last matching expectation (#2) has been saturated. If, however,\nthe third `Forward(10)` call is replaced by `Forward(20)`, then it would be OK,\nas now #1 will be the matching expectation.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 522,
                  "startColumn": 57,
                  "endLine": 522,
                  "endColumn": 63,
                  "snippet": {
                    "text": "it will return 100 every time, think twice! Remember that one `WillOnce()`\nclause will be consumed each time the function is invoked and the default action\nwill be taken afterwards. So the right answer is that `turtle.GetY()` will\nreturn 100 the first time, but **return 0 from the second time on**, as\nreturning 0 is the default action for `int` functions.\n\n### Using Multiple Expectations {#MultiExpectations}\n",
                    "rendered": {
                      "text": "it will return 100 every time, think twice! Remember that one `WillOnce()`\nclause will be consumed each time the function is invoked and the default action\nwill be taken afterwards. So the right answer is that `turtle.GetY()` will\nreturn 100 the first time, but **return 0 from the second time on**, as\nreturning 0 is the default action for `int` functions.\n\n### Using Multiple Expectations {#MultiExpectations}\n",
                      "markdown": "`it will return 100 every time, think twice! Remember that one `WillOnce()`\nclause will be consumed each time the function is invoked and the default action\nwill be taken afterwards. So the right answer is that `turtle.GetY()` will\nreturn 100 the first time, but **return 0 from the second time on**, as\nreturning 0 is the default action for `int` functions.\n\n### Using Multiple Expectations {#MultiExpectations}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 520,
                  "startColumn": 28,
                  "endLine": 520,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\nObviously `turtle.GetY()` is expected to be called four times. But if you think\nit will return 100 every time, think twice! Remember that one `WillOnce()`\nclause will be consumed each time the function is invoked and the default action\nwill be taken afterwards. So the right answer is that `turtle.GetY()` will\nreturn 100 the first time, but **return 0 from the second time on**, as\nreturning 0 is the default action for `int` functions.\n",
                    "rendered": {
                      "text": "\nObviously `turtle.GetY()` is expected to be called four times. But if you think\nit will return 100 every time, think twice! Remember that one `WillOnce()`\nclause will be consumed each time the function is invoked and the default action\nwill be taken afterwards. So the right answer is that `turtle.GetY()` will\nreturn 100 the first time, but **return 0 from the second time on**, as\nreturning 0 is the default action for `int` functions.\n",
                      "markdown": "`\nObviously `turtle.GetY()` is expected to be called four times. But if you think\nit will return 100 every time, think twice! Remember that one `WillOnce()`\nclause will be consumed each time the function is invoked and the default action\nwill be taken afterwards. So the right answer is that `turtle.GetY()` will\nreturn 100 the first time, but **return 0 from the second time on**, as\nreturning 0 is the default action for `int` functions.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 507,
                  "endLine": 508,
                  "endColumn": 5,
                  "snippet": {
                    "text": "return the same pointer every time. If you want the side effect to happen every\ntime, you need to define a custom action, which we'll teach in the\n[cook book](gmock_cook_book.md).\n\nTime for another quiz! What do you think the following means?\n\n```cpp\nusing ::testing::Return;\n",
                    "rendered": {
                      "text": "return the same pointer every time. If you want the side effect to happen every\ntime, you need to define a custom action, which we'll teach in the\n[cook book](gmock_cook_book.md).\n\nTime for another quiz! What do you think the following means?\n\n```cpp\nusing ::testing::Return;\n",
                      "markdown": "`return the same pointer every time. If you want the side effect to happen every\ntime, you need to define a custom action, which we'll teach in the\n[cook book](gmock_cook_book.md).\n\nTime for another quiz! What do you think the following means?\n\n```cpp\nusing ::testing::Return;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 481,
                  "startColumn": 43,
                  "endLine": 481,
                  "endColumn": 49,
                  "snippet": {
                    "text": "Of course, if you explicitly write a `Times()`, gMock will not try to infer the\ncardinality itself. What if the number you specified is larger than there are\n`WillOnce()` clauses? Well, after all `WillOnce()`s are used up, gMock will do\nthe *default* action for the function every time (unless, of course, you have a\n`WillRepeatedly()`.).\n\nWhat can we do inside `WillOnce()` besides `Return()`? You can return a\n",
                    "rendered": {
                      "text": "Of course, if you explicitly write a `Times()`, gMock will not try to infer the\ncardinality itself. What if the number you specified is larger than there are\n`WillOnce()` clauses? Well, after all `WillOnce()`s are used up, gMock will do\nthe *default* action for the function every time (unless, of course, you have a\n`WillRepeatedly()`.).\n\nWhat can we do inside `WillOnce()` besides `Return()`? You can return a\n",
                      "markdown": "`Of course, if you explicitly write a `Times()`, gMock will not try to infer the\ncardinality itself. What if the number you specified is larger than there are\n`WillOnce()` clauses? Well, after all `WillOnce()`s are used up, gMock will do\nthe *default* action for the function every time (unless, of course, you have a\n`WillRepeatedly()`.).\n\nWhat can we do inside `WillOnce()` besides `Return()`? You can return a\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 476,
                  "startColumn": 22,
                  "endLine": 476,
                  "endColumn": 28,
                  "snippet": {
                    "text": "says that `turtle.GetY()` will be called *at least twice* (gMock knows this as\nwe've written two `WillOnce()` clauses and a `WillRepeatedly()` while having no\nexplicit `Times()`), will return 100 and 200 respectively the first two times,\nand 300 from the third time on.\n\nOf course, if you explicitly write a `Times()`, gMock will not try to infer the\ncardinality itself. What if the number you specified is larger than there are\n",
                    "rendered": {
                      "text": "says that `turtle.GetY()` will be called *at least twice* (gMock knows this as\nwe've written two `WillOnce()` clauses and a `WillRepeatedly()` while having no\nexplicit `Times()`), will return 100 and 200 respectively the first two times,\nand 300 from the third time on.\n\nOf course, if you explicitly write a `Times()`, gMock will not try to infer the\ncardinality itself. What if the number you specified is larger than there are\n",
                      "markdown": "`says that `turtle.GetY()` will be called *at least twice* (gMock knows this as\nwe've written two `WillOnce()` clauses and a `WillRepeatedly()` while having no\nexplicit `Times()`), will return 100 and 200 respectively the first two times,\nand 300 from the third time on.\n\nOf course, if you explicitly write a `Times()`, gMock will not try to infer the\ncardinality itself. What if the number you specified is larger than there are\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 447,
                  "startColumn": 61,
                  "endLine": 447,
                  "endColumn": 67,
                  "snippet": {
                    "text": "will be used.\n\nSecond, if a mock function doesn't have a default action, or the default action\ndoesn't suit you, you can specify the action to be taken each time the\nexpectation matches using a series of `WillOnce()` clauses followed by an\noptional `WillRepeatedly()`. For example,\n\n",
                    "rendered": {
                      "text": "will be used.\n\nSecond, if a mock function doesn't have a default action, or the default action\ndoesn't suit you, you can specify the action to be taken each time the\nexpectation matches using a series of `WillOnce()` clauses followed by an\noptional `WillRepeatedly()`. For example,\n\n",
                      "markdown": "`will be used.\n\nSecond, if a mock function doesn't have a default action, or the default action\ndoesn't suit you, you can specify the action to be taken each time the\nexpectation matches using a series of `WillOnce()` clauses followed by an\noptional `WillRepeatedly()`. For example,\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 38,
                  "endLine": 256,
                  "endColumn": 45,
                  "snippet": {
                    "text": "...\n```\n\n**Tip 1:** If you run the test from an Emacs buffer, you can hit `<Enter>` on\nthe line number to jump right to the failed expectation.\n\n**Tip 2:** If your mock objects are never deleted, the final verification won't\n",
                    "rendered": {
                      "text": "...\n```\n\n**Tip 1:** If you run the test from an Emacs buffer, you can hit `<Enter>` on\nthe line number to jump right to the failed expectation.\n\n**Tip 2:** If your mock objects are never deleted, the final verification won't\n",
                      "markdown": "`...\n```\n\n**Tip 1:** If you run the test from an Emacs buffer, you can hit `<Enter>` on\nthe line number to jump right to the failed expectation.\n\n**Tip 2:** If your mock objects are never deleted, the final verification won't\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 68,
                  "endLine": 200,
                  "endColumn": 73,
                  "snippet": {
                    "text": "tests. If `Foo` ever changes, there is only one copy of `MockFoo` to change, and\nonly tests that depend on the changed methods need to be fixed.\n\nAnother way to do it: you can introduce a thin layer `FooAdaptor` on top of\n`Foo` and code to this new interface. Since you own `FooAdaptor`, you can absorb\nchanges in `Foo` much more easily. While this is more work initially, carefully\nchoosing the adaptor interface can make your code easier to write and more\n",
                    "rendered": {
                      "text": "tests. If `Foo` ever changes, there is only one copy of `MockFoo` to change, and\nonly tests that depend on the changed methods need to be fixed.\n\nAnother way to do it: you can introduce a thin layer `FooAdaptor` on top of\n`Foo` and code to this new interface. Since you own `FooAdaptor`, you can absorb\nchanges in `Foo` much more easily. While this is more work initially, carefully\nchoosing the adaptor interface can make your code easier to write and more\n",
                      "markdown": "`tests. If `Foo` ever changes, there is only one copy of `MockFoo` to change, and\nonly tests that depend on the changed methods need to be fixed.\n\nAnother way to do it: you can introduce a thin layer `FooAdaptor` on top of\n`Foo` and code to this new interface. Since you own `FooAdaptor`, you can absorb\nchanges in `Foo` much more easily. While this is more work initially, carefully\nchoosing the adaptor interface can make your code easier to write and more\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 58,
                  "endLine": 190,
                  "endColumn": 66,
                  "snippet": {
                    "text": "When you define a mock class, you need to decide where to put its definition.\nSome people put it in a `_test.cc`. This is fine when the interface being mocked\n(say, `Foo`) is owned by the same person or team. Otherwise, when the owner of\n`Foo` changes it, your test could break. (You can't really expect `Foo`'s\nmaintainer to fix every test that uses `Foo`, can you?)\n\nGenerally, you should not mock classes you don't own. If you must mock such a\n",
                    "rendered": {
                      "text": "When you define a mock class, you need to decide where to put its definition.\nSome people put it in a `_test.cc`. This is fine when the interface being mocked\n(say, `Foo`) is owned by the same person or team. Otherwise, when the owner of\n`Foo` changes it, your test could break. (You can't really expect `Foo`'s\nmaintainer to fix every test that uses `Foo`, can you?)\n\nGenerally, you should not mock classes you don't own. If you must mock such a\n",
                      "markdown": "`When you define a mock class, you need to decide where to put its definition.\nSome people put it in a `_test.cc`. This is fine when the interface being mocked\n(say, `Foo`) is owned by the same person or team. Otherwise, when the owner of\n`Foo` changes it, your test could break. (You can't really expect `Foo`'s\nmaintainer to fix every test that uses `Foo`, can you?)\n\nGenerally, you should not mock classes you don't own. If you must mock such a\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 34,
                  "endLine": 139,
                  "endColumn": 40,
                  "snippet": {
                    "text": "## Writing the Mock Class\n\nIf you are lucky, the mocks you need to use have already been implemented by\nsome nice people. If, however, you find yourself in the position to write a mock\nclass, relax - gMock turns this task into a fun game! (Well, almost.)\n\n### How to Define It\n",
                    "rendered": {
                      "text": "## Writing the Mock Class\n\nIf you are lucky, the mocks you need to use have already been implemented by\nsome nice people. If, however, you find yourself in the position to write a mock\nclass, relax - gMock turns this task into a fun game! (Well, almost.)\n\n### How to Define It\n",
                      "markdown": "`## Writing the Mock Class\n\nIf you are lucky, the mocks you need to use have already been implemented by\nsome nice people. If, however, you find yourself in the position to write a mock\nclass, relax - gMock turns this task into a fun game! (Well, almost.)\n\n### How to Define It\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 4,
                  "endLine": 139,
                  "endColumn": 10,
                  "snippet": {
                    "text": "## Writing the Mock Class\n\nIf you are lucky, the mocks you need to use have already been implemented by\nsome nice people. If, however, you find yourself in the position to write a mock\nclass, relax - gMock turns this task into a fun game! (Well, almost.)\n\n### How to Define It\n",
                    "rendered": {
                      "text": "## Writing the Mock Class\n\nIf you are lucky, the mocks you need to use have already been implemented by\nsome nice people. If, however, you find yourself in the position to write a mock\nclass, relax - gMock turns this task into a fun game! (Well, almost.)\n\n### How to Define It\n",
                      "markdown": "`## Writing the Mock Class\n\nIf you are lucky, the mocks you need to use have already been implemented by\nsome nice people. If, however, you find yourself in the position to write a mock\nclass, relax - gMock turns this task into a fun game! (Well, almost.)\n\n### How to Define It\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 43,
                  "endLine": 95,
                  "endColumn": 51,
                  "snippet": {
                    "text": "Let's look at an example. Suppose you are developing a graphics program that\nrelies on a [LOGO](https://en.wikipedia.org/wiki/Logo_programming_language)-like\nAPI for drawing. How would you test that it does the right thing? Well, you can\nrun it and compare the screen with a golden screen snapshot, but let's admit it:\ntests like this are expensive to run and fragile (What if you just upgraded to a\nshiny new graphics card that has better anti-aliasing? Suddenly you have to\nupdate all your golden images.). It would be too painful if all your tests are\n",
                    "rendered": {
                      "text": "Let's look at an example. Suppose you are developing a graphics program that\nrelies on a [LOGO](https://en.wikipedia.org/wiki/Logo_programming_language)-like\nAPI for drawing. How would you test that it does the right thing? Well, you can\nrun it and compare the screen with a golden screen snapshot, but let's admit it:\ntests like this are expensive to run and fragile (What if you just upgraded to a\nshiny new graphics card that has better anti-aliasing? Suddenly you have to\nupdate all your golden images.). It would be too painful if all your tests are\n",
                      "markdown": "`Let's look at an example. Suppose you are developing a graphics program that\nrelies on a [LOGO](https://en.wikipedia.org/wiki/Logo_programming_language)-like\nAPI for drawing. How would you test that it does the right thing? Well, you can\nrun it and compare the screen with a golden screen snapshot, but let's admit it:\ntests like this are expensive to run and fragile (What if you just upgraded to a\nshiny new graphics card that has better anti-aliasing? Suddenly you have to\nupdate all your golden images.). It would be too painful if all your tests are\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 22,
                  "endLine": 95,
                  "endColumn": 30,
                  "snippet": {
                    "text": "Let's look at an example. Suppose you are developing a graphics program that\nrelies on a [LOGO](https://en.wikipedia.org/wiki/Logo_programming_language)-like\nAPI for drawing. How would you test that it does the right thing? Well, you can\nrun it and compare the screen with a golden screen snapshot, but let's admit it:\ntests like this are expensive to run and fragile (What if you just upgraded to a\nshiny new graphics card that has better anti-aliasing? Suddenly you have to\nupdate all your golden images.). It would be too painful if all your tests are\n",
                    "rendered": {
                      "text": "Let's look at an example. Suppose you are developing a graphics program that\nrelies on a [LOGO](https://en.wikipedia.org/wiki/Logo_programming_language)-like\nAPI for drawing. How would you test that it does the right thing? Well, you can\nrun it and compare the screen with a golden screen snapshot, but let's admit it:\ntests like this are expensive to run and fragile (What if you just upgraded to a\nshiny new graphics card that has better anti-aliasing? Suddenly you have to\nupdate all your golden images.). It would be too painful if all your tests are\n",
                      "markdown": "`Let's look at an example. Suppose you are developing a graphics program that\nrelies on a [LOGO](https://en.wikipedia.org/wiki/Logo_programming_language)-like\nAPI for drawing. How would you test that it does the right thing? Well, you can\nrun it and compare the screen with a golden screen snapshot, but let's admit it:\ntests like this are expensive to run and fragile (What if you just upgraded to a\nshiny new graphics card that has better anti-aliasing? Suddenly you have to\nupdate all your golden images.). It would be too painful if all your tests are\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 23,
                  "endLine": 83,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n*   a *design* tool, for it lets you experiment with your interface design early\n    and often. More iterations lead to better designs!\n*   a *testing* tool to cut your tests' outbound dependencies and probe the\n    interaction between your module and its collaborators.\n\n## Getting Started\n",
                    "rendered": {
                      "text": "\n*   a *design* tool, for it lets you experiment with your interface design early\n    and often. More iterations lead to better designs!\n*   a *testing* tool to cut your tests' outbound dependencies and probe the\n    interaction between your module and its collaborators.\n\n## Getting Started\n",
                      "markdown": "`\n*   a *design* tool, for it lets you experiment with your interface design early\n    and often. More iterations lead to better designs!\n*   a *testing* tool to cut your tests' outbound dependencies and probe the\n    interaction between your module and its collaborators.\n\n## Getting Started\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 47,
                  "endLine": 62,
                  "endColumn": 53,
                  "snippet": {
                    "text": "but designed with C++'s specifics in mind. It is your friend if any of the\nfollowing problems is bothering you:\n\n*   You are stuck with a sub-optimal design and wish you had done more\n    prototyping before it was too late, but prototyping in C++ is by no means\n    \"rapid\".\n*   Your tests are slow as they depend on too many libraries or use expensive\n",
                    "rendered": {
                      "text": "but designed with C++'s specifics in mind. It is your friend if any of the\nfollowing problems is bothering you:\n\n*   You are stuck with a sub-optimal design and wish you had done more\n    prototyping before it was too late, but prototyping in C++ is by no means\n    \"rapid\".\n*   Your tests are slow as they depend on too many libraries or use expensive\n",
                      "markdown": "`but designed with C++'s specifics in mind. It is your friend if any of the\nfollowing problems is bothering you:\n\n*   You are stuck with a sub-optimal design and wish you had done more\n    prototyping before it was too late, but prototyping in C++ is by no means\n    \"rapid\".\n*   Your tests are slow as they depend on too many libraries or use expensive\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 23,
                  "endLine": 34,
                  "endColumn": 31,
                  "snippet": {
                    "text": "When using gMock,\n\n1.  first, you use some simple macros to describe the interface you want to\n    mock, and they will expand to the implementation of your mock class;\n2.  next, you create some mock objects and specify its expectations and behavior\n    using an intuitive syntax;\n3.  then you exercise code that uses the mock objects. gMock will catch any\n",
                    "rendered": {
                      "text": "When using gMock,\n\n1.  first, you use some simple macros to describe the interface you want to\n    mock, and they will expand to the implementation of your mock class;\n2.  next, you create some mock objects and specify its expectations and behavior\n    using an intuitive syntax;\n3.  then you exercise code that uses the mock objects. gMock will catch any\n",
                      "markdown": "`When using gMock,\n\n1.  first, you use some simple macros to describe the interface you want to\n    mock, and they will expand to the implementation of your mock class;\n2.  next, you create some mock objects and specify its expectations and behavior\n    using an intuitive syntax;\n3.  then you exercise code that uses the mock objects. gMock will catch any\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_for_dummies.md"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 62,
                  "endLine": 7,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\nWhen you write a prototype or test, often it's not feasible or wise to rely on\nreal objects entirely. A **mock object** implements the same interface as a real\nobject (so it can be used as one), but lets you specify at run time how it will\nbe used and what it should do (which methods will be called? in which order? how\nmany times? with what arguments? what will they return? etc).\n\n",
                    "rendered": {
                      "text": "\nWhen you write a prototype or test, often it's not feasible or wise to rely on\nreal objects entirely. A **mock object** implements the same interface as a real\nobject (so it can be used as one), but lets you specify at run time how it will\nbe used and what it should do (which methods will be called? in which order? how\nmany times? with what arguments? what will they return? etc).\n\n",
                      "markdown": "`\nWhen you write a prototype or test, often it's not feasible or wise to rely on\nreal objects entirely. A **mock object** implements the same interface as a real\nobject (so it can be used as one), but lets you specify at run time how it will\nbe used and what it should do (which methods will be called? in which order? how\nmany times? with what arguments? what will they return? etc).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/quickstart-bazel.md"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 42,
                  "endLine": 50,
                  "snippet": {
                    "text": "```\n# MODULE.bazel\n\n# Choose the most recent version available at\n# https://registry.bazel.build/modules/googletest\nbazel_dep(name = \"googletest\", version = \"1.15.2\")\n```\n\n",
                    "rendered": {
                      "text": "```\n# MODULE.bazel\n\n# Choose the most recent version available at\n# https://registry.bazel.build/modules/googletest\nbazel_dep(name = \"googletest\", version = \"1.15.2\")\n```\n\n",
                      "markdown": "````\n# MODULE.bazel\n\n# Choose the most recent version available at\n# https://registry.bazel.build/modules/googletest\nbazel_dep(name = \"googletest\", version = \"1.15.2\")\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/quickstart-bazel.md"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 43,
                  "endLine": 12,
                  "endColumn": 47,
                  "snippet": {
                    "text": "To complete this tutorial, you'll need:\n\n*   A compatible operating system (e.g. Linux, macOS, Windows).\n*   A compatible C++ compiler that supports at least C++14.\n*   [Bazel](https://bazel.build/) 7.0 or higher, the preferred build system used\n    by the GoogleTest team.\n\n",
                    "rendered": {
                      "text": "To complete this tutorial, you'll need:\n\n*   A compatible operating system (e.g. Linux, macOS, Windows).\n*   A compatible C++ compiler that supports at least C++14.\n*   [Bazel](https://bazel.build/) 7.0 or higher, the preferred build system used\n    by the GoogleTest team.\n\n",
                      "markdown": "`To complete this tutorial, you'll need:\n\n*   A compatible operating system (e.g. Linux, macOS, Windows).\n*   A compatible C++ compiler that supports at least C++14.\n*   [Bazel](https://bazel.build/) 7.0 or higher, the preferred build system used\n    by the GoogleTest team.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/quickstart-bazel.md"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 4,
                  "endLine": 71,
                  "endColumn": 12,
                  "snippet": {
                    "text": "TEST(HelloTest, BasicAssertions) {\n  // Expect two strings not to be equal.\n  EXPECT_STRNE(\"hello\", \"world\");\n  // Expect equality.\n  EXPECT_EQ(7 * 6, 42);\n}\n```\n",
                    "rendered": {
                      "text": "TEST(HelloTest, BasicAssertions) {\n  // Expect two strings not to be equal.\n  EXPECT_STRNE(\"hello\", \"world\");\n  // Expect equality.\n  EXPECT_EQ(7 * 6, 42);\n}\n```\n",
                      "markdown": "`TEST(HelloTest, BasicAssertions) {\n  // Expect two strings not to be equal.\n  EXPECT_STRNE(\"hello\", \"world\");\n  // Expect equality.\n  EXPECT_EQ(7 * 6, 42);\n}\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/quickstart-bazel.md"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 4,
                  "endLine": 69,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n// Demonstrate some basic assertions.\nTEST(HelloTest, BasicAssertions) {\n  // Expect two strings not to be equal.\n  EXPECT_STRNE(\"hello\", \"world\");\n  // Expect equality.\n  EXPECT_EQ(7 * 6, 42);\n",
                    "rendered": {
                      "text": "\n// Demonstrate some basic assertions.\nTEST(HelloTest, BasicAssertions) {\n  // Expect two strings not to be equal.\n  EXPECT_STRNE(\"hello\", \"world\");\n  // Expect equality.\n  EXPECT_EQ(7 * 6, 42);\n",
                      "markdown": "`\n// Demonstrate some basic assertions.\nTEST(HelloTest, BasicAssertions) {\n  // Expect two strings not to be equal.\n  EXPECT_STRNE(\"hello\", \"world\");\n  // Expect equality.\n  EXPECT_EQ(7 * 6, 42);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/quickstart-bazel.md"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 54,
                  "endLine": 4,
                  "endColumn": 60,
                  "snippet": {
                    "text": "# Quickstart: Building with Bazel\n\nThis tutorial aims to get you up and running with GoogleTest using the Bazel\nbuild system. If you're using GoogleTest for the first time or need a refresher,\nwe recommend this tutorial as a starting point.\n\n## Prerequisites\n",
                    "rendered": {
                      "text": "# Quickstart: Building with Bazel\n\nThis tutorial aims to get you up and running with GoogleTest using the Bazel\nbuild system. If you're using GoogleTest for the first time or need a refresher,\nwe recommend this tutorial as a starting point.\n\n## Prerequisites\n",
                      "markdown": "`# Quickstart: Building with Bazel\n\nThis tutorial aims to get you up and running with GoogleTest using the Bazel\nbuild system. If you're using GoogleTest for the first time or need a refresher,\nwe recommend this tutorial as a starting point.\n\n## Prerequisites\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-function-mocker_test.cc"
                },
                "region": {
                  "startLine": 481,
                  "startColumn": 41,
                  "endLine": 481,
                  "endColumn": 46,
                  "snippet": {
                    "text": "  EXPECT_EQ(std::move(mock_foo).RefQualifiedRefRef(), 4);  // NOLINT\n\n  EXPECT_EQ(std::cref(mock_foo).get().RefQualifiedOverloaded(), 5);\n  EXPECT_EQ(std::move(std::cref(mock_foo).get())  // NOLINT\n                .RefQualifiedOverloaded(),\n            6);\n  EXPECT_EQ(mock_foo.RefQualifiedOverloaded(), 7);\n",
                    "rendered": {
                      "text": "  EXPECT_EQ(std::move(mock_foo).RefQualifiedRefRef(), 4);  // NOLINT\n\n  EXPECT_EQ(std::cref(mock_foo).get().RefQualifiedOverloaded(), 5);\n  EXPECT_EQ(std::move(std::cref(mock_foo).get())  // NOLINT\n                .RefQualifiedOverloaded(),\n            6);\n  EXPECT_EQ(mock_foo.RefQualifiedOverloaded(), 7);\n",
                      "markdown": "`  EXPECT_EQ(std::move(mock_foo).RefQualifiedRefRef(), 4);  // NOLINT\n\n  EXPECT_EQ(std::cref(mock_foo).get().RefQualifiedOverloaded(), 5);\n  EXPECT_EQ(std::move(std::cref(mock_foo).get())  // NOLINT\n                .RefQualifiedOverloaded(),\n            6);\n  EXPECT_EQ(mock_foo.RefQualifiedOverloaded(), 7);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-function-mocker_test.cc"
                },
                "region": {
                  "startLine": 480,
                  "startColumn": 31,
                  "endLine": 480,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  EXPECT_EQ(mock_foo.RefQualifiedRef(), 3);\n  EXPECT_EQ(std::move(mock_foo).RefQualifiedRefRef(), 4);  // NOLINT\n\n  EXPECT_EQ(std::cref(mock_foo).get().RefQualifiedOverloaded(), 5);\n  EXPECT_EQ(std::move(std::cref(mock_foo).get())  // NOLINT\n                .RefQualifiedOverloaded(),\n            6);\n",
                    "rendered": {
                      "text": "  EXPECT_EQ(mock_foo.RefQualifiedRef(), 3);\n  EXPECT_EQ(std::move(mock_foo).RefQualifiedRefRef(), 4);  // NOLINT\n\n  EXPECT_EQ(std::cref(mock_foo).get().RefQualifiedOverloaded(), 5);\n  EXPECT_EQ(std::move(std::cref(mock_foo).get())  // NOLINT\n                .RefQualifiedOverloaded(),\n            6);\n",
                      "markdown": "`  EXPECT_EQ(mock_foo.RefQualifiedRef(), 3);\n  EXPECT_EQ(std::move(mock_foo).RefQualifiedRefRef(), 4);  // NOLINT\n\n  EXPECT_EQ(std::cref(mock_foo).get().RefQualifiedOverloaded(), 5);\n  EXPECT_EQ(std::move(std::cref(mock_foo).get())  // NOLINT\n                .RefQualifiedOverloaded(),\n            6);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/include/gmock/gmock-actions.h"
                },
                "region": {
                  "startLine": 1232,
                  "startColumn": 37,
                  "endLine": 1232,
                  "endColumn": 41,
                  "snippet": {
                    "text": " public:\n  explicit ReturnRoundRobinAction(std::vector<T> values) {\n    GTEST_CHECK_(!values.empty())\n        << \"ReturnRoundRobin requires at least one element.\";\n    state_->values = std::move(values);\n  }\n\n",
                    "rendered": {
                      "text": " public:\n  explicit ReturnRoundRobinAction(std::vector<T> values) {\n    GTEST_CHECK_(!values.empty())\n        << \"ReturnRoundRobin requires at least one element.\";\n    state_->values = std::move(values);\n  }\n\n",
                      "markdown": "` public:\n  explicit ReturnRoundRobinAction(std::vector<T> values) {\n    GTEST_CHECK_(!values.empty())\n        << \"ReturnRoundRobin requires at least one element.\";\n    state_->values = std::move(values);\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/include/gmock/gmock-actions.h"
                },
                "region": {
                  "startLine": 1101,
                  "startColumn": 47,
                  "endLine": 1101,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\n  T operator()() const {\n    GTEST_CHECK_(!state_->called)\n        << \"A ByMove() action must be performed at most once.\";\n\n    state_->called = true;\n    return std::move(state_->value);\n",
                    "rendered": {
                      "text": "\n  T operator()() const {\n    GTEST_CHECK_(!state_->called)\n        << \"A ByMove() action must be performed at most once.\";\n\n    state_->called = true;\n    return std::move(state_->value);\n",
                      "markdown": "`\n  T operator()() const {\n    GTEST_CHECK_(!state_->called)\n        << \"A ByMove() action must be performed at most once.\";\n\n    state_->called = true;\n    return std::move(state_->value);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.github/ISSUE_TEMPLATE/00-bug_report.yml"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 50,
                  "endLine": 9,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    id: what-happened\n    attributes:\n      label: Describe the issue\n      description: What happened, and what did you expect to happen?\n    validations:\n      required: true\n  - type: textarea\n",
                    "rendered": {
                      "text": "    id: what-happened\n    attributes:\n      label: Describe the issue\n      description: What happened, and what did you expect to happen?\n    validations:\n      required: true\n  - type: textarea\n",
                      "markdown": "`    id: what-happened\n    attributes:\n      label: Describe the issue\n      description: What happened, and what did you expect to happen?\n    validations:\n      required: true\n  - type: textarea\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 1328,
                  "startColumn": 43,
                  "endLine": 1328,
                  "endColumn": 48,
                  "snippet": {
                    "text": "// Gets the text streamed to this object so far as an std::string.\n// Each '\\0' character in the buffer is replaced with \"\\\\0\".\nstd::string Message::GetString() const {\n  return internal::StringStreamToString(ss_.get());\n}\n\nnamespace internal {\n",
                    "rendered": {
                      "text": "// Gets the text streamed to this object so far as an std::string.\n// Each '\\0' character in the buffer is replaced with \"\\\\0\".\nstd::string Message::GetString() const {\n  return internal::StringStreamToString(ss_.get());\n}\n\nnamespace internal {\n",
                      "markdown": "`// Gets the text streamed to this object so far as an std::string.\n// Each '\\0' character in the buffer is replaced with \"\\\\0\".\nstd::string Message::GetString() const {\n  return internal::StringStreamToString(ss_.get());\n}\n\nnamespace internal {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 1085,
                  "startColumn": 46,
                  "endLine": 1085,
                  "endColumn": 51,
                  "snippet": {
                    "text": "// Returns the test part result reporter for the current thread.\nTestPartResultReporterInterface*\nUnitTestImpl::GetTestPartResultReporterForCurrentThread() {\n  return per_thread_test_part_result_reporter_.get();\n}\n\n// Sets the test part result reporter for the current thread.\n",
                    "rendered": {
                      "text": "// Returns the test part result reporter for the current thread.\nTestPartResultReporterInterface*\nUnitTestImpl::GetTestPartResultReporterForCurrentThread() {\n  return per_thread_test_part_result_reporter_.get();\n}\n\n// Sets the test part result reporter for the current thread.\n",
                      "markdown": "`// Returns the test part result reporter for the current thread.\nTestPartResultReporterInterface*\nUnitTestImpl::GetTestPartResultReporterForCurrentThread() {\n  return per_thread_test_part_result_reporter_.get();\n}\n\n// Sets the test part result reporter for the current thread.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 6951,
                  "startColumn": 19,
                  "endLine": 6951,
                  "endColumn": 43,
                  "snippet": {
                    "text": "  return GetDirFromEnv({\"TEST_SRCDIR\"}, GetCurrentExecutableDirectory().c_str(),\n                       '/');\n#else\n  return GetDirFromEnv({\"TEST_SRCDIR\"}, GetCurrentExecutableDirectory().c_str(),\n                       '/');\n#endif\n}\n",
                    "rendered": {
                      "text": "  return GetDirFromEnv({\"TEST_SRCDIR\"}, GetCurrentExecutableDirectory().c_str(),\n                       '/');\n#else\n  return GetDirFromEnv({\"TEST_SRCDIR\"}, GetCurrentExecutableDirectory().c_str(),\n                       '/');\n#endif\n}\n",
                      "markdown": "`  return GetDirFromEnv({\"TEST_SRCDIR\"}, GetCurrentExecutableDirectory().c_str(),\n                       '/');\n#else\n  return GetDirFromEnv({\"TEST_SRCDIR\"}, GetCurrentExecutableDirectory().c_str(),\n                       '/');\n#endif\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 6948,
                  "startColumn": 19,
                  "endLine": 6948,
                  "endColumn": 43,
                  "snippet": {
                    "text": "  return GetDirFromEnv({\"TEST_SRCDIR\"}, GetCurrentExecutableDirectory().c_str(),\n                       '\\\\');\n#elif defined(GTEST_OS_LINUX_ANDROID)\n  return GetDirFromEnv({\"TEST_SRCDIR\"}, GetCurrentExecutableDirectory().c_str(),\n                       '/');\n#else\n  return GetDirFromEnv({\"TEST_SRCDIR\"}, GetCurrentExecutableDirectory().c_str(),\n",
                    "rendered": {
                      "text": "  return GetDirFromEnv({\"TEST_SRCDIR\"}, GetCurrentExecutableDirectory().c_str(),\n                       '\\\\');\n#elif defined(GTEST_OS_LINUX_ANDROID)\n  return GetDirFromEnv({\"TEST_SRCDIR\"}, GetCurrentExecutableDirectory().c_str(),\n                       '/');\n#else\n  return GetDirFromEnv({\"TEST_SRCDIR\"}, GetCurrentExecutableDirectory().c_str(),\n",
                      "markdown": "`  return GetDirFromEnv({\"TEST_SRCDIR\"}, GetCurrentExecutableDirectory().c_str(),\n                       '\\\\');\n#elif defined(GTEST_OS_LINUX_ANDROID)\n  return GetDirFromEnv({\"TEST_SRCDIR\"}, GetCurrentExecutableDirectory().c_str(),\n                       '/');\n#else\n  return GetDirFromEnv({\"TEST_SRCDIR\"}, GetCurrentExecutableDirectory().c_str(),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 6945,
                  "startColumn": 19,
                  "endLine": 6945,
                  "endColumn": 43,
                  "snippet": {
                    "text": "#if defined(GTEST_CUSTOM_SRCDIR_FUNCTION_)\n  return GTEST_CUSTOM_SRCDIR_FUNCTION_();\n#elif defined(GTEST_OS_WINDOWS) || defined(GTEST_OS_WINDOWS_MOBILE)\n  return GetDirFromEnv({\"TEST_SRCDIR\"}, GetCurrentExecutableDirectory().c_str(),\n                       '\\\\');\n#elif defined(GTEST_OS_LINUX_ANDROID)\n  return GetDirFromEnv({\"TEST_SRCDIR\"}, GetCurrentExecutableDirectory().c_str(),\n",
                    "rendered": {
                      "text": "#if defined(GTEST_CUSTOM_SRCDIR_FUNCTION_)\n  return GTEST_CUSTOM_SRCDIR_FUNCTION_();\n#elif defined(GTEST_OS_WINDOWS) || defined(GTEST_OS_WINDOWS_MOBILE)\n  return GetDirFromEnv({\"TEST_SRCDIR\"}, GetCurrentExecutableDirectory().c_str(),\n                       '\\\\');\n#elif defined(GTEST_OS_LINUX_ANDROID)\n  return GetDirFromEnv({\"TEST_SRCDIR\"}, GetCurrentExecutableDirectory().c_str(),\n",
                      "markdown": "`#if defined(GTEST_CUSTOM_SRCDIR_FUNCTION_)\n  return GTEST_CUSTOM_SRCDIR_FUNCTION_();\n#elif defined(GTEST_OS_WINDOWS) || defined(GTEST_OS_WINDOWS_MOBILE)\n  return GetDirFromEnv({\"TEST_SRCDIR\"}, GetCurrentExecutableDirectory().c_str(),\n                       '\\\\');\n#elif defined(GTEST_OS_LINUX_ANDROID)\n  return GetDirFromEnv({\"TEST_SRCDIR\"}, GetCurrentExecutableDirectory().c_str(),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 4901,
                  "startColumn": 10,
                  "endLine": 4901,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  }\n\n  // If there was a test failure outside of one of the test suites (like in a\n  // test environment) include that in the output.\n  if (unit_test.ad_hoc_test_result().Failed()) {\n    if (comma) {\n      *stream << \",\\n\";\n",
                    "rendered": {
                      "text": "  }\n\n  // If there was a test failure outside of one of the test suites (like in a\n  // test environment) include that in the output.\n  if (unit_test.ad_hoc_test_result().Failed()) {\n    if (comma) {\n      *stream << \",\\n\";\n",
                      "markdown": "`  }\n\n  // If there was a test failure outside of one of the test suites (like in a\n  // test environment) include that in the output.\n  if (unit_test.ad_hoc_test_result().Failed()) {\n    if (comma) {\n      *stream << \",\\n\";\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 4422,
                  "startColumn": 10,
                  "endLine": 4422,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  }\n\n  // If there was a test failure outside of one of the test suites (like in a\n  // test environment) include that in the output.\n  if (unit_test.ad_hoc_test_result().Failed()) {\n    OutputXmlTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());\n  }\n",
                    "rendered": {
                      "text": "  }\n\n  // If there was a test failure outside of one of the test suites (like in a\n  // test environment) include that in the output.\n  if (unit_test.ad_hoc_test_result().Failed()) {\n    OutputXmlTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());\n  }\n",
                      "markdown": "`  }\n\n  // If there was a test failure outside of one of the test suites (like in a\n  // test environment) include that in the output.\n  if (unit_test.ad_hoc_test_result().Failed()) {\n    OutputXmlTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 6740,
                  "startColumn": 31,
                  "endLine": 6740,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n  if (g_help_flag) {\n    // We print the help here instead of in RUN_ALL_TESTS(), as the\n    // latter may not be called at all if the user is using Google\n    // Test with another testing framework.\n    PrintColorEncoded(kColorEncodedHelpMessage);\n  }\n",
                    "rendered": {
                      "text": "\n  if (g_help_flag) {\n    // We print the help here instead of in RUN_ALL_TESTS(), as the\n    // latter may not be called at all if the user is using Google\n    // Test with another testing framework.\n    PrintColorEncoded(kColorEncodedHelpMessage);\n  }\n",
                      "markdown": "`\n  if (g_help_flag) {\n    // We print the help here instead of in RUN_ALL_TESTS(), as the\n    // latter may not be called at all if the user is using Google\n    // Test with another testing framework.\n    PrintColorEncoded(kColorEncodedHelpMessage);\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 6548,
                  "startColumn": 36,
                  "endLine": 6548,
                  "endColumn": 45,
                  "snippet": {
                    "text": "static const char kColorEncodedHelpMessage[] =\n    \"This program contains tests written using \" GTEST_NAME_\n    \". You can use the\\n\"\n    \"following command line flags to control its behavior:\\n\"\n    \"\\n\"\n    \"Test Selection:\\n\"\n    \"  @G--\" GTEST_FLAG_PREFIX_\n",
                    "rendered": {
                      "text": "static const char kColorEncodedHelpMessage[] =\n    \"This program contains tests written using \" GTEST_NAME_\n    \". You can use the\\n\"\n    \"following command line flags to control its behavior:\\n\"\n    \"\\n\"\n    \"Test Selection:\\n\"\n    \"  @G--\" GTEST_FLAG_PREFIX_\n",
                      "markdown": "`static const char kColorEncodedHelpMessage[] =\n    \"This program contains tests written using \" GTEST_NAME_\n    \". You can use the\\n\"\n    \"following command line flags to control its behavior:\\n\"\n    \"\\n\"\n    \"Test Selection:\\n\"\n    \"  @G--\" GTEST_FLAG_PREFIX_\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 6515,
                  "startColumn": 54,
                  "endLine": 6515,
                  "endColumn": 58,
                  "snippet": {
                    "text": "  GTestColor color = GTestColor::kDefault;  // The current color.\n\n  // Conceptually, we split the string into segments divided by escape\n  // sequences.  Then we print one segment at a time.  At the end of\n  // each iteration, the str pointer advances to the beginning of the\n  // next segment.\n  for (;;) {\n",
                    "rendered": {
                      "text": "  GTestColor color = GTestColor::kDefault;  // The current color.\n\n  // Conceptually, we split the string into segments divided by escape\n  // sequences.  Then we print one segment at a time.  At the end of\n  // each iteration, the str pointer advances to the beginning of the\n  // next segment.\n  for (;;) {\n",
                      "markdown": "`  GTestColor color = GTestColor::kDefault;  // The current color.\n\n  // Conceptually, we split the string into segments divided by escape\n  // sequences.  Then we print one segment at a time.  At the end of\n  // each iteration, the str pointer advances to the beginning of the\n  // next segment.\n  for (;;) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 6515,
                  "startColumn": 42,
                  "endLine": 6515,
                  "endColumn": 46,
                  "snippet": {
                    "text": "  GTestColor color = GTestColor::kDefault;  // The current color.\n\n  // Conceptually, we split the string into segments divided by escape\n  // sequences.  Then we print one segment at a time.  At the end of\n  // each iteration, the str pointer advances to the beginning of the\n  // next segment.\n  for (;;) {\n",
                    "rendered": {
                      "text": "  GTestColor color = GTestColor::kDefault;  // The current color.\n\n  // Conceptually, we split the string into segments divided by escape\n  // sequences.  Then we print one segment at a time.  At the end of\n  // each iteration, the str pointer advances to the beginning of the\n  // next segment.\n  for (;;) {\n",
                      "markdown": "`  GTestColor color = GTestColor::kDefault;  // The current color.\n\n  // Conceptually, we split the string into segments divided by escape\n  // sequences.  Then we print one segment at a time.  At the end of\n  // each iteration, the str pointer advances to the beginning of the\n  // next segment.\n  for (;;) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 6503,
                  "startColumn": 41,
                  "endLine": 6503,
                  "endColumn": 50,
                  "snippet": {
                    "text": "}\n\n// Prints a string containing code-encoded text.  The following escape\n// sequences can be used in the string to control the text color:\n//\n//   @@    prints a single '@' character.\n//   @R    changes the color to red.\n",
                    "rendered": {
                      "text": "}\n\n// Prints a string containing code-encoded text.  The following escape\n// sequences can be used in the string to control the text color:\n//\n//   @@    prints a single '@' character.\n//   @R    changes the color to red.\n",
                      "markdown": "`}\n\n// Prints a string containing code-encoded text.  The following escape\n// sequences can be used in the string to control the text color:\n//\n//   @@    prints a single '@' character.\n//   @R    changes the color to red.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 6236,
                  "startColumn": 10,
                  "endLine": 6236,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n// Prints the names of the tests matching the user-specified filter flag.\nvoid UnitTestImpl::ListTestsMatchingFilter() {\n  // Print at most this many characters for each type/value parameter.\n  const int kMaxParamLength = 250;\n\n  for (auto* test_suite : test_suites_) {\n",
                    "rendered": {
                      "text": "\n// Prints the names of the tests matching the user-specified filter flag.\nvoid UnitTestImpl::ListTestsMatchingFilter() {\n  // Print at most this many characters for each type/value parameter.\n  const int kMaxParamLength = 250;\n\n  for (auto* test_suite : test_suites_) {\n",
                      "markdown": "`\n// Prints the names of the tests matching the user-specified filter flag.\nvoid UnitTestImpl::ListTestsMatchingFilter() {\n  // Print at most this many characters for each type/value parameter.\n  const int kMaxParamLength = 250;\n\n  for (auto* test_suite : test_suites_) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 6059,
                  "startColumn": 55,
                  "endLine": 6059,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\n#if GTEST_HAS_FILE_SYSTEM\n// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file\n// if the variable is present. If a file already exists at this location, this\n// function will write over it. If the variable is present, but the file cannot\n// be created, prints an error and exits.\nvoid WriteToShardStatusFileIfNeeded() {\n",
                    "rendered": {
                      "text": "\n#if GTEST_HAS_FILE_SYSTEM\n// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file\n// if the variable is present. If a file already exists at this location, this\n// function will write over it. If the variable is present, but the file cannot\n// be created, prints an error and exits.\nvoid WriteToShardStatusFileIfNeeded() {\n",
                      "markdown": "`\n#if GTEST_HAS_FILE_SYSTEM\n// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file\n// if the variable is present. If a file already exists at this location, this\n// function will write over it. If the variable is present, but the file cannot\n// be created, prints an error and exits.\nvoid WriteToShardStatusFileIfNeeded() {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 5953,
                  "startColumn": 39,
                  "endLine": 5953,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    // Tells the unit test event listeners that the tests are about to start.\n    repeater->OnTestIterationStart(*parent_, i);\n\n    // Runs each test suite if there is at least one test to run.\n    if (has_tests_to_run) {\n      // Sets up all environments beforehand. If test environments aren't\n      // recreated for each iteration, only do so on the first iteration.\n",
                    "rendered": {
                      "text": "    // Tells the unit test event listeners that the tests are about to start.\n    repeater->OnTestIterationStart(*parent_, i);\n\n    // Runs each test suite if there is at least one test to run.\n    if (has_tests_to_run) {\n      // Sets up all environments beforehand. If test environments aren't\n      // recreated for each iteration, only do so on the first iteration.\n",
                      "markdown": "`    // Tells the unit test event listeners that the tests are about to start.\n    repeater->OnTestIterationStart(*parent_, i);\n\n    // Runs each test suite if there is at least one test to run.\n    if (has_tests_to_run) {\n      // Sets up all environments beforehand. If test environments aren't\n      // recreated for each iteration, only do so on the first iteration.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 5909,
                  "startColumn": 24,
                  "endLine": 5909,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n  random_seed_ = GetRandomSeedFromFlag(GTEST_FLAG_GET(random_seed));\n\n  // True if and only if at least one test has failed.\n  bool failed = false;\n\n  TestEventListener* repeater = listeners()->repeater();\n",
                    "rendered": {
                      "text": "\n  random_seed_ = GetRandomSeedFromFlag(GTEST_FLAG_GET(random_seed));\n\n  // True if and only if at least one test has failed.\n  bool failed = false;\n\n  TestEventListener* repeater = listeners()->repeater();\n",
                      "markdown": "`\n  random_seed_ = GetRandomSeedFromFlag(GTEST_FLAG_GET(random_seed));\n\n  // True if and only if at least one test has failed.\n  bool failed = false;\n\n  TestEventListener* repeater = listeners()->repeater();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 5695,
                  "startColumn": 35,
                  "endLine": 5695,
                  "endColumn": 44,
                  "snippet": {
                    "text": "}\n\n#ifdef GTEST_HAS_DEATH_TEST\n// Disables event forwarding if the control is currently in a death test\n// subprocess. Must not be called before InitGoogleTest.\nvoid UnitTestImpl::SuppressTestEventsIfInSubprocess() {\n  if (internal_run_death_test_flag_ != nullptr)\n",
                    "rendered": {
                      "text": "}\n\n#ifdef GTEST_HAS_DEATH_TEST\n// Disables event forwarding if the control is currently in a death test\n// subprocess. Must not be called before InitGoogleTest.\nvoid UnitTestImpl::SuppressTestEventsIfInSubprocess() {\n  if (internal_run_death_test_flag_ != nullptr)\n",
                      "markdown": "`}\n\n#ifdef GTEST_HAS_DEATH_TEST\n// Disables event forwarding if the control is currently in a death test\n// subprocess. Must not be called before InitGoogleTest.\nvoid UnitTestImpl::SuppressTestEventsIfInSubprocess() {\n  if (internal_run_death_test_flag_ != nullptr)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 5601,
                  "startColumn": 31,
                  "endLine": 5601,
                  "endColumn": 35,
                  "snippet": {
                    "text": "  return impl_->current_test_info();\n}\n\n// Returns the random seed used at the start of the current test run.\nint UnitTest::random_seed() const { return impl_->random_seed(); }\n\n// Returns ParameterizedTestSuiteRegistry object used to keep track of\n",
                    "rendered": {
                      "text": "  return impl_->current_test_info();\n}\n\n// Returns the random seed used at the start of the current test run.\nint UnitTest::random_seed() const { return impl_->random_seed(); }\n\n// Returns ParameterizedTestSuiteRegistry object used to keep track of\n",
                      "markdown": "`  return impl_->current_test_info();\n}\n\n// Returns the random seed used at the start of the current test run.\nint UnitTest::random_seed() const { return impl_->random_seed(); }\n\n// Returns ParameterizedTestSuiteRegistry object used to keep track of\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 5491,
                  "startColumn": 16,
                  "endLine": 5491,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  //\n  // This allows a test runner to set TEST_PREMATURE_EXIT_FILE before\n  // running a Google-Test-based test program and check the existence\n  // of the file at the end of the test execution to see if it has\n  // exited prematurely.\n\n  // If we are in the child process of a death test, don't\n",
                    "rendered": {
                      "text": "  //\n  // This allows a test runner to set TEST_PREMATURE_EXIT_FILE before\n  // running a Google-Test-based test program and check the existence\n  // of the file at the end of the test execution to see if it has\n  // exited prematurely.\n\n  // If we are in the child process of a death test, don't\n",
                      "markdown": "`  //\n  // This allows a test runner to set TEST_PREMATURE_EXIT_FILE before\n  // running a Google-Test-based test program and check the existence\n  // of the file at the end of the test execution to see if it has\n  // exited prematurely.\n\n  // If we are in the child process of a death test, don't\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 5482,
                  "startColumn": 35,
                  "endLine": 5482,
                  "endColumn": 44,
                  "snippet": {
                    "text": "      !GTEST_FLAG_GET(internal_run_death_test).empty();\n\n  // Google Test implements this protocol for catching that a test\n  // program exits before returning control to Google Test:\n  //\n  //   1. Upon start, Google Test creates a file whose absolute path\n  //      is specified by the environment variable\n",
                    "rendered": {
                      "text": "      !GTEST_FLAG_GET(internal_run_death_test).empty();\n\n  // Google Test implements this protocol for catching that a test\n  // program exits before returning control to Google Test:\n  //\n  //   1. Upon start, Google Test creates a file whose absolute path\n  //      is specified by the environment variable\n",
                      "markdown": "`      !GTEST_FLAG_GET(internal_run_death_test).empty();\n\n  // Google Test implements this protocol for catching that a test\n  // program exits before returning control to Google Test:\n  //\n  //   1. Upon start, Google Test creates a file whose absolute path\n  //      is specified by the environment variable\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 5246,
                  "startColumn": 50,
                  "endLine": 5246,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  return impl()->total_test_suite_count();\n}\n\n// Gets the number of all test suites that contain at least one test\n// that should run.\nint UnitTest::test_suite_to_run_count() const {\n  return impl()->test_suite_to_run_count();\n",
                    "rendered": {
                      "text": "  return impl()->total_test_suite_count();\n}\n\n// Gets the number of all test suites that contain at least one test\n// that should run.\nint UnitTest::test_suite_to_run_count() const {\n  return impl()->test_suite_to_run_count();\n",
                      "markdown": "`  return impl()->total_test_suite_count();\n}\n\n// Gets the number of all test suites that contain at least one test\n// that should run.\nint UnitTest::test_suite_to_run_count() const {\n  return impl()->test_suite_to_run_count();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 4011,
                  "startColumn": 59,
                  "endLine": 4011,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n  // Produces a string representing the test properties in a result as space\n  // delimited XML attributes based on the property key=\"value\" pairs.\n  // When the std::string is not empty, it includes a space at the beginning,\n  // to delimit this attribute from prior attributes.\n  static std::string TestPropertiesAsXmlAttributes(const TestResult& result);\n\n",
                    "rendered": {
                      "text": "\n  // Produces a string representing the test properties in a result as space\n  // delimited XML attributes based on the property key=\"value\" pairs.\n  // When the std::string is not empty, it includes a space at the beginning,\n  // to delimit this attribute from prior attributes.\n  static std::string TestPropertiesAsXmlAttributes(const TestResult& result);\n\n",
                      "markdown": "`\n  // Produces a string representing the test properties in a result as space\n  // delimited XML attributes based on the property key=\"value\" pairs.\n  // When the std::string is not empty, it includes a space at the beginning,\n  // to delimit this attribute from prior attributes.\n  static std::string TestPropertiesAsXmlAttributes(const TestResult& result);\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 2682,
                  "startColumn": 44,
                  "endLine": 2682,
                  "endColumn": 48,
                  "snippet": {
                    "text": "  // the debugger when the exception is thrown. On most platforms, once the\n  // control enters the catch block, the exception origin information is\n  // lost and the debugger will stop the program at the point of the\n  // re-throw in this function -- instead of at the point of the original\n  // throw statement in the code under test.  For this reason, we perform\n  // the check early, sacrificing the ability to affect Google Test's\n  // exception handling in the method where the exception is thrown.\n",
                    "rendered": {
                      "text": "  // the debugger when the exception is thrown. On most platforms, once the\n  // control enters the catch block, the exception origin information is\n  // lost and the debugger will stop the program at the point of the\n  // re-throw in this function -- instead of at the point of the original\n  // throw statement in the code under test.  For this reason, we perform\n  // the check early, sacrificing the ability to affect Google Test's\n  // exception handling in the method where the exception is thrown.\n",
                      "markdown": "`  // the debugger when the exception is thrown. On most platforms, once the\n  // control enters the catch block, the exception origin information is\n  // lost and the debugger will stop the program at the point of the\n  // re-throw in this function -- instead of at the point of the original\n  // throw statement in the code under test.  For this reason, we perform\n  // the check early, sacrificing the ability to affect Google Test's\n  // exception handling in the method where the exception is thrown.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 2681,
                  "startColumn": 48,
                  "endLine": 2681,
                  "endColumn": 52,
                  "snippet": {
                    "text": "  // However, the purpose of this flag is to allow the program to drop into\n  // the debugger when the exception is thrown. On most platforms, once the\n  // control enters the catch block, the exception origin information is\n  // lost and the debugger will stop the program at the point of the\n  // re-throw in this function -- instead of at the point of the original\n  // throw statement in the code under test.  For this reason, we perform\n  // the check early, sacrificing the ability to affect Google Test's\n",
                    "rendered": {
                      "text": "  // However, the purpose of this flag is to allow the program to drop into\n  // the debugger when the exception is thrown. On most platforms, once the\n  // control enters the catch block, the exception origin information is\n  // lost and the debugger will stop the program at the point of the\n  // re-throw in this function -- instead of at the point of the original\n  // throw statement in the code under test.  For this reason, we perform\n  // the check early, sacrificing the ability to affect Google Test's\n",
                      "markdown": "`  // However, the purpose of this flag is to allow the program to drop into\n  // the debugger when the exception is thrown. On most platforms, once the\n  // control enters the catch block, the exception origin information is\n  // lost and the debugger will stop the program at the point of the\n  // re-throw in this function -- instead of at the point of the original\n  // throw statement in the code under test.  For this reason, we perform\n  // the check early, sacrificing the ability to affect Google Test's\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 2680,
                  "startColumn": 4,
                  "endLine": 2680,
                  "endColumn": 13,
                  "snippet": {
                    "text": "  //\n  // However, the purpose of this flag is to allow the program to drop into\n  // the debugger when the exception is thrown. On most platforms, once the\n  // control enters the catch block, the exception origin information is\n  // lost and the debugger will stop the program at the point of the\n  // re-throw in this function -- instead of at the point of the original\n  // throw statement in the code under test.  For this reason, we perform\n",
                    "rendered": {
                      "text": "  //\n  // However, the purpose of this flag is to allow the program to drop into\n  // the debugger when the exception is thrown. On most platforms, once the\n  // control enters the catch block, the exception origin information is\n  // lost and the debugger will stop the program at the point of the\n  // re-throw in this function -- instead of at the point of the original\n  // throw statement in the code under test.  For this reason, we perform\n",
                      "markdown": "`  //\n  // However, the purpose of this flag is to allow the program to drop into\n  // the debugger when the exception is thrown. On most platforms, once the\n  // control enters the catch block, the exception origin information is\n  // lost and the debugger will stop the program at the point of the\n  // re-throw in this function -- instead of at the point of the original\n  // throw statement in the code under test.  For this reason, we perform\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 1670,
                  "startColumn": 67,
                  "endLine": 1670,
                  "endColumn": 71,
                  "snippet": {
                    "text": "AssertionResult DoubleNearPredFormat(const char* expr1, const char* expr2,\n                                     const char* abs_error_expr, double val1,\n                                     double val2, double abs_error) {\n  // We want to return success when the two values are infinity and at least\n  // one of the following is true:\n  //  * The values are the same-signed infinity.\n  //  * The error limit itself is infinity.\n",
                    "rendered": {
                      "text": "AssertionResult DoubleNearPredFormat(const char* expr1, const char* expr2,\n                                     const char* abs_error_expr, double val1,\n                                     double val2, double abs_error) {\n  // We want to return success when the two values are infinity and at least\n  // one of the following is true:\n  //  * The values are the same-signed infinity.\n  //  * The error limit itself is infinity.\n",
                      "markdown": "`AssertionResult DoubleNearPredFormat(const char* expr1, const char* expr2,\n                                     const char* abs_error_expr, double val1,\n                                     double val2, double abs_error) {\n  // We want to return success when the two values are infinity and at least\n  // one of the following is true:\n  //  * The values are the same-signed infinity.\n  //  * The error limit itself is infinity.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 1109,
                  "startColumn": 50,
                  "endLine": 1109,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  return static_cast<int>(test_suites_.size());\n}\n\n// Gets the number of all test suites that contain at least one test\n// that should run.\nint UnitTestImpl::test_suite_to_run_count() const {\n  return CountIf(test_suites_, ShouldRunTestSuite);\n",
                    "rendered": {
                      "text": "  return static_cast<int>(test_suites_.size());\n}\n\n// Gets the number of all test suites that contain at least one test\n// that should run.\nint UnitTestImpl::test_suite_to_run_count() const {\n  return CountIf(test_suites_, ShouldRunTestSuite);\n",
                      "markdown": "`  return static_cast<int>(test_suites_.size());\n}\n\n// Gets the number of all test suites that contain at least one test\n// that should run.\nint UnitTestImpl::test_suite_to_run_count() const {\n  return CountIf(test_suites_, ShouldRunTestSuite);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 885,
                  "startColumn": 25,
                  "endLine": 885,
                  "endColumn": 29,
                  "snippet": {
                    "text": "// suite name and the test name.\nbool UnitTestOptions::FilterMatchesTest(const std::string& test_suite_name,\n                                        const std::string& test_name) {\n  // Split --gtest_filter at '-', if there is one, to separate into\n  // positive filter and negative filter portions\n  return PositiveAndNegativeUnitTestFilter(GTEST_FLAG_GET(filter))\n      .MatchesTest(test_suite_name, test_name);\n",
                    "rendered": {
                      "text": "// suite name and the test name.\nbool UnitTestOptions::FilterMatchesTest(const std::string& test_suite_name,\n                                        const std::string& test_name) {\n  // Split --gtest_filter at '-', if there is one, to separate into\n  // positive filter and negative filter portions\n  return PositiveAndNegativeUnitTestFilter(GTEST_FLAG_GET(filter))\n      .MatchesTest(test_suite_name, test_name);\n",
                      "markdown": "`// suite name and the test name.\nbool UnitTestOptions::FilterMatchesTest(const std::string& test_suite_name,\n                                        const std::string& test_name) {\n  // Split --gtest_filter at '-', if there is one, to separate into\n  // positive filter and negative filter portions\n  return PositiveAndNegativeUnitTestFilter(GTEST_FLAG_GET(filter))\n      .MatchesTest(test_suite_name, test_name);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 804,
                  "startColumn": 45,
                  "endLine": 804,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        std::inserter(exact_match_patterns_, exact_match_patterns_.begin()));\n  }\n\n  // Returns true if and only if name matches at least one of the patterns in\n  // the filter.\n  bool MatchesName(const std::string& name) const {\n    return exact_match_patterns_.find(name) != exact_match_patterns_.end() ||\n",
                    "rendered": {
                      "text": "        std::inserter(exact_match_patterns_, exact_match_patterns_.begin()));\n  }\n\n  // Returns true if and only if name matches at least one of the patterns in\n  // the filter.\n  bool MatchesName(const std::string& name) const {\n    return exact_match_patterns_.find(name) != exact_match_patterns_.end() ||\n",
                      "markdown": "`        std::inserter(exact_match_patterns_, exact_match_patterns_.begin()));\n  }\n\n  // Returns true if and only if name matches at least one of the patterns in\n  // the filter.\n  bool MatchesName(const std::string& name) const {\n    return exact_match_patterns_.find(name) != exact_match_patterns_.end() ||\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 542,
                  "startColumn": 20,
                  "endLine": 542,
                  "endColumn": 28,
                  "snippet": {
                    "text": "      \" is defined via TEST_P, but never instantiated. None of the test \"\n      \"cases \"\n      \"will run. Either no INSTANTIATE_TEST_SUITE_P is provided or the only \"\n      \"ones provided expand to nothing.\"\n      \"\\n\\n\"\n      \"Ideally, TEST_P definitions should only ever be included as part of \"\n      \"binaries that intend to use them. (As opposed to, for example, being \"\n",
                    "rendered": {
                      "text": "      \" is defined via TEST_P, but never instantiated. None of the test \"\n      \"cases \"\n      \"will run. Either no INSTANTIATE_TEST_SUITE_P is provided or the only \"\n      \"ones provided expand to nothing.\"\n      \"\\n\\n\"\n      \"Ideally, TEST_P definitions should only ever be included as part of \"\n      \"binaries that intend to use them. (As opposed to, for example, being \"\n",
                      "markdown": "`      \" is defined via TEST_P, but never instantiated. None of the test \"\n      \"cases \"\n      \"will run. Either no INSTANTIATE_TEST_SUITE_P is provided or the only \"\n      \"ones provided expand to nothing.\"\n      \"\\n\\n\"\n      \"Ideally, TEST_P definitions should only ever be included as part of \"\n      \"binaries that intend to use them. (As opposed to, for example, being \"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 496,
                  "startColumn": 20,
                  "endLine": 496,
                  "endColumn": 24,
                  "snippet": {
                    "text": "constexpr bool kErrorOnUninstantiatedParameterizedTest = true;\nconstexpr bool kErrorOnUninstantiatedTypeParameterizedTest = true;\n\n// A test that fails at a given file/line location with a given message.\nclass FailureTest : public Test {\n public:\n  explicit FailureTest(const CodeLocation& loc, std::string error_message,\n",
                    "rendered": {
                      "text": "constexpr bool kErrorOnUninstantiatedParameterizedTest = true;\nconstexpr bool kErrorOnUninstantiatedTypeParameterizedTest = true;\n\n// A test that fails at a given file/line location with a given message.\nclass FailureTest : public Test {\n public:\n  explicit FailureTest(const CodeLocation& loc, std::string error_message,\n",
                      "markdown": "`constexpr bool kErrorOnUninstantiatedParameterizedTest = true;\nconstexpr bool kErrorOnUninstantiatedTypeParameterizedTest = true;\n\n// A test that fails at a given file/line location with a given message.\nclass FailureTest : public Test {\n public:\n  explicit FailureTest(const CodeLocation& loc, std::string error_message,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 492,
                  "startColumn": 48,
                  "endLine": 492,
                  "endColumn": 52,
                  "snippet": {
                    "text": "// to creates test cases for it, a synthetic test case is\n// inserted to report ether an error or a log message.\n//\n// This configuration bit will likely be removed at some point.\nconstexpr bool kErrorOnUninstantiatedParameterizedTest = true;\nconstexpr bool kErrorOnUninstantiatedTypeParameterizedTest = true;\n\n",
                    "rendered": {
                      "text": "// to creates test cases for it, a synthetic test case is\n// inserted to report ether an error or a log message.\n//\n// This configuration bit will likely be removed at some point.\nconstexpr bool kErrorOnUninstantiatedParameterizedTest = true;\nconstexpr bool kErrorOnUninstantiatedTypeParameterizedTest = true;\n\n",
                      "markdown": "`// to creates test cases for it, a synthetic test case is\n// inserted to report ether an error or a log message.\n//\n// This configuration bit will likely be removed at some point.\nconstexpr bool kErrorOnUninstantiatedParameterizedTest = true;\nconstexpr bool kErrorOnUninstantiatedTypeParameterizedTest = true;\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 448,
                  "startColumn": 50,
                  "endLine": 448,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  return test_suite->should_run() && test_suite->Failed();\n}\n\n// Returns true if and only if test_suite contains at least one test that\n// should run.\nstatic bool ShouldRunTestSuite(const TestSuite* test_suite) {\n  return test_suite->should_run();\n",
                    "rendered": {
                      "text": "  return test_suite->should_run() && test_suite->Failed();\n}\n\n// Returns true if and only if test_suite contains at least one test that\n// should run.\nstatic bool ShouldRunTestSuite(const TestSuite* test_suite) {\n  return test_suite->should_run();\n",
                      "markdown": "`  return test_suite->should_run() && test_suite->Failed();\n}\n\n// Returns true if and only if test_suite contains at least one test that\n// should run.\nstatic bool ShouldRunTestSuite(const TestSuite* test_suite) {\n  return test_suite->should_run();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 2,
                  "endLine": 158,
                  "endColumn": 6,
                  "snippet": {
                    "text": "#endif  // GTEST_HAS_ABSL\n\n// Checks builtin compiler feature |x| while avoiding an extra layer of #ifdefs\n// at the callsite.\n#if defined(__has_builtin)\n#define GTEST_HAS_BUILTIN(x) __has_builtin(x)\n#else\n",
                    "rendered": {
                      "text": "#endif  // GTEST_HAS_ABSL\n\n// Checks builtin compiler feature |x| while avoiding an extra layer of #ifdefs\n// at the callsite.\n#if defined(__has_builtin)\n#define GTEST_HAS_BUILTIN(x) __has_builtin(x)\n#else\n",
                      "markdown": "`#endif  // GTEST_HAS_ABSL\n\n// Checks builtin compiler feature |x| while avoiding an extra layer of #ifdefs\n// at the callsite.\n#if defined(__has_builtin)\n#define GTEST_HAS_BUILTIN(x) __has_builtin(x)\n#else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 6862,
                  "startColumn": 38,
                  "endLine": 6862,
                  "endColumn": 44,
                  "snippet": {
                    "text": "// No value is returned.  Instead, the Google Test flag variables are\n// updated.\n//\n// Calling the function for the second time has no user-visible effect.\nvoid InitGoogleTest(int* argc, char** argv) {\n#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)\n  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);\n",
                    "rendered": {
                      "text": "// No value is returned.  Instead, the Google Test flag variables are\n// updated.\n//\n// Calling the function for the second time has no user-visible effect.\nvoid InitGoogleTest(int* argc, char** argv) {\n#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)\n  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);\n",
                      "markdown": "`// No value is returned.  Instead, the Google Test flag variables are\n// updated.\n//\n// Calling the function for the second time has no user-visible effect.\nvoid InitGoogleTest(int* argc, char** argv) {\n#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)\n  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 6636,
                  "startColumn": 39,
                  "endLine": 6636,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    \"\\n\"\n    \"For more information, please read the \" GTEST_NAME_\n    \" documentation at\\n\"\n    \"@G\" GTEST_PROJECT_URL_ \"@D. If you find a bug in \" GTEST_NAME_\n    \"\\n\"\n    \"(not one in your own code or tests), please report it to\\n\"\n    \"@G<\" GTEST_DEV_EMAIL_ \">@D.\\n\";\n",
                    "rendered": {
                      "text": "    \"\\n\"\n    \"For more information, please read the \" GTEST_NAME_\n    \" documentation at\\n\"\n    \"@G\" GTEST_PROJECT_URL_ \"@D. If you find a bug in \" GTEST_NAME_\n    \"\\n\"\n    \"(not one in your own code or tests), please report it to\\n\"\n    \"@G<\" GTEST_DEV_EMAIL_ \">@D.\\n\";\n",
                      "markdown": "`    \"\\n\"\n    \"For more information, please read the \" GTEST_NAME_\n    \" documentation at\\n\"\n    \"@G\" GTEST_PROJECT_URL_ \"@D. If you find a bug in \" GTEST_NAME_\n    \"\\n\"\n    \"(not one in your own code or tests), please report it to\\n\"\n    \"@G<\" GTEST_DEV_EMAIL_ \">@D.\\n\";\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 6592,
                  "startColumn": 34,
                  "endLine": 6592,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    \"      Only print test failures.\\n\"\n    \"  @G--\" GTEST_FLAG_PREFIX_\n    \"print_time=0@D\\n\"\n    \"      Don't print the elapsed time of each test.\\n\"\n    \"  @G--\" GTEST_FLAG_PREFIX_\n    \"output=@Y(@Gjson@Y|@Gxml@Y)[@G:@YDIRECTORY_PATH@G\" GTEST_PATH_SEP_\n    \"@Y|@G:@YFILE_PATH]@D\\n\"\n",
                    "rendered": {
                      "text": "    \"      Only print test failures.\\n\"\n    \"  @G--\" GTEST_FLAG_PREFIX_\n    \"print_time=0@D\\n\"\n    \"      Don't print the elapsed time of each test.\\n\"\n    \"  @G--\" GTEST_FLAG_PREFIX_\n    \"output=@Y(@Gjson@Y|@Gxml@Y)[@G:@YDIRECTORY_PATH@G\" GTEST_PATH_SEP_\n    \"@Y|@G:@YFILE_PATH]@D\\n\"\n",
                      "markdown": "`    \"      Only print test failures.\\n\"\n    \"  @G--\" GTEST_FLAG_PREFIX_\n    \"print_time=0@D\\n\"\n    \"      Don't print the elapsed time of each test.\\n\"\n    \"  @G--\" GTEST_FLAG_PREFIX_\n    \"output=@Y(@Gjson@Y|@Gxml@Y)[@G:@YDIRECTORY_PATH@G\" GTEST_PATH_SEP_\n    \"@Y|@G:@YFILE_PATH]@D\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 6358,
                  "startColumn": 26,
                  "endLine": 6358,
                  "endColumn": 31,
                  "snippet": {
                    "text": "//\n// The maximum number of stack frames to be included is specified by\n// the gtest_stack_trace_depth flag.  The skip_count parameter\n// specifies the number of top frames to be skipped, which doesn't\n// count against the number of frames to be included.\n//\n// For example, if Foo() calls Bar(), which in turn calls\n",
                    "rendered": {
                      "text": "//\n// The maximum number of stack frames to be included is specified by\n// the gtest_stack_trace_depth flag.  The skip_count parameter\n// specifies the number of top frames to be skipped, which doesn't\n// count against the number of frames to be included.\n//\n// For example, if Foo() calls Bar(), which in turn calls\n",
                      "markdown": "`//\n// The maximum number of stack frames to be included is specified by\n// the gtest_stack_trace_depth flag.  The skip_count parameter\n// specifies the number of top frames to be skipped, which doesn't\n// count against the number of frames to be included.\n//\n// For example, if Foo() calls Bar(), which in turn calls\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 5302,
                  "startColumn": 11,
                  "endLine": 5302,
                  "endColumn": 17,
                  "snippet": {
                    "text": "// Gets the number of tests that should run.\nint UnitTest::test_to_run_count() const { return impl()->test_to_run_count(); }\n\n// Gets the time of the test program start, in ms from the start of the\n// UNIX epoch.\ninternal::TimeInMillis UnitTest::start_timestamp() const {\n  return impl()->start_timestamp();\n",
                    "rendered": {
                      "text": "// Gets the number of tests that should run.\nint UnitTest::test_to_run_count() const { return impl()->test_to_run_count(); }\n\n// Gets the time of the test program start, in ms from the start of the\n// UNIX epoch.\ninternal::TimeInMillis UnitTest::start_timestamp() const {\n  return impl()->start_timestamp();\n",
                      "markdown": "`// Gets the number of tests that should run.\nint UnitTest::test_to_run_count() const { return impl()->test_to_run_count(); }\n\n// Gets the time of the test program start, in ms from the start of the\n// UNIX epoch.\ninternal::TimeInMillis UnitTest::start_timestamp() const {\n  return impl()->start_timestamp();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 5210,
                  "startColumn": 49,
                  "endLine": 5210,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\n// class UnitTest\n\n// Gets the singleton UnitTest object.  The first time this method is\n// called, a UnitTest object is constructed and returned.  Consecutive\n// calls will return the same object.\n//\n",
                    "rendered": {
                      "text": "\n// class UnitTest\n\n// Gets the singleton UnitTest object.  The first time this method is\n// called, a UnitTest object is constructed and returned.  Consecutive\n// calls will return the same object.\n//\n",
                      "markdown": "`\n// class UnitTest\n\n// Gets the singleton UnitTest object.  The first time this method is\n// called, a UnitTest object is constructed and returned.  Consecutive\n// calls will return the same object.\n//\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 4993,
                  "startColumn": 50,
                  "endLine": 4993,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  hints.ai_socktype = SOCK_STREAM;\n  addrinfo* servinfo = nullptr;\n\n  // Use the getaddrinfo() to get a linked list of IP addresses for\n  // the given host name.\n  const int error_num =\n      getaddrinfo(host_name_.c_str(), port_num_.c_str(), &hints, &servinfo);\n",
                    "rendered": {
                      "text": "  hints.ai_socktype = SOCK_STREAM;\n  addrinfo* servinfo = nullptr;\n\n  // Use the getaddrinfo() to get a linked list of IP addresses for\n  // the given host name.\n  const int error_num =\n      getaddrinfo(host_name_.c_str(), port_num_.c_str(), &hints, &servinfo);\n",
                      "markdown": "`  hints.ai_socktype = SOCK_STREAM;\n  addrinfo* servinfo = nullptr;\n\n  // Use the getaddrinfo() to get a linked list of IP addresses for\n  // the given host name.\n  const int error_num =\n      getaddrinfo(host_name_.c_str(), port_num_.c_str(), &hints, &servinfo);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 4961,
                  "startColumn": 10,
                  "endLine": 4961,
                  "endColumn": 16,
                  "snippet": {
                    "text": "// Checks if str contains '=', '&', '%' or '\\n' characters. If yes,\n// replaces them by \"%xx\" where xx is their hexadecimal value. For\n// example, replaces \"=\" with \"%3D\".  This algorithm is O(strlen(str))\n// in both time and space -- important as the input str may contain an\n// arbitrarily long test failure message and stack trace.\nstd::string StreamingListener::UrlEncode(const char* str) {\n  std::string result;\n",
                    "rendered": {
                      "text": "// Checks if str contains '=', '&', '%' or '\\n' characters. If yes,\n// replaces them by \"%xx\" where xx is their hexadecimal value. For\n// example, replaces \"=\" with \"%3D\".  This algorithm is O(strlen(str))\n// in both time and space -- important as the input str may contain an\n// arbitrarily long test failure message and stack trace.\nstd::string StreamingListener::UrlEncode(const char* str) {\n  std::string result;\n",
                      "markdown": "`// Checks if str contains '=', '&', '%' or '\\n' characters. If yes,\n// replaces them by \"%xx\" where xx is their hexadecimal value. For\n// example, replaces \"=\" with \"%3D\".  This algorithm is O(strlen(str))\n// in both time and space -- important as the input str may contain an\n// arbitrarily long test failure message and stack trace.\nstd::string StreamingListener::UrlEncode(const char* str) {\n  std::string result;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 4618,
                  "startColumn": 27,
                  "endLine": 4618,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  return ss.str();\n}\n\n// Converts the given epoch time in milliseconds to a date string in the\n// RFC3339 format, without the timezone information.\nstatic std::string FormatEpochTimeInMillisAsRFC3339(TimeInMillis ms) {\n  struct tm time_struct;\n",
                    "rendered": {
                      "text": "  return ss.str();\n}\n\n// Converts the given epoch time in milliseconds to a date string in the\n// RFC3339 format, without the timezone information.\nstatic std::string FormatEpochTimeInMillisAsRFC3339(TimeInMillis ms) {\n  struct tm time_struct;\n",
                      "markdown": "`  return ss.str();\n}\n\n// Converts the given epoch time in milliseconds to a date string in the\n// RFC3339 format, without the timezone information.\nstatic std::string FormatEpochTimeInMillisAsRFC3339(TimeInMillis ms) {\n  struct tm time_struct;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 4611,
                  "startColumn": 20,
                  "endLine": 4611,
                  "endColumn": 26,
                  "snippet": {
                    "text": "// The following routines generate an JSON representation of a UnitTest\n// object.\n\n// Formats the given time in milliseconds as seconds.\nstatic std::string FormatTimeInMillisAsDuration(TimeInMillis ms) {\n  ::std::stringstream ss;\n  ss << (static_cast<double>(ms) * 1e-3) << \"s\";\n",
                    "rendered": {
                      "text": "// The following routines generate an JSON representation of a UnitTest\n// object.\n\n// Formats the given time in milliseconds as seconds.\nstatic std::string FormatTimeInMillisAsDuration(TimeInMillis ms) {\n  ::std::stringstream ss;\n  ss << (static_cast<double>(ms) * 1e-3) << \"s\";\n",
                      "markdown": "`// The following routines generate an JSON representation of a UnitTest\n// object.\n\n// Formats the given time in milliseconds as seconds.\nstatic std::string FormatTimeInMillisAsDuration(TimeInMillis ms) {\n  ::std::stringstream ss;\n  ss << (static_cast<double>(ms) * 1e-3) << \"s\";\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 4171,
                  "startColumn": 27,
                  "endLine": 4171,
                  "endColumn": 33,
                  "snippet": {
                    "text": "#endif\n}\n\n// Converts the given epoch time in milliseconds to a date string in the ISO\n// 8601 format, without the timezone information.\nstd::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms) {\n  struct tm time_struct;\n",
                    "rendered": {
                      "text": "#endif\n}\n\n// Converts the given epoch time in milliseconds to a date string in the ISO\n// 8601 format, without the timezone information.\nstd::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms) {\n  struct tm time_struct;\n",
                      "markdown": "`#endif\n}\n\n// Converts the given epoch time in milliseconds to a date string in the ISO\n// 8601 format, without the timezone information.\nstd::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms) {\n  struct tm time_struct;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 4138,
                  "startColumn": 20,
                  "endLine": 4138,
                  "endColumn": 26,
                  "snippet": {
                    "text": "//   </testsuite>\n// </testsuites>\n\n// Formats the given time in milliseconds as seconds.\nstd::string FormatTimeInMillisAsSeconds(TimeInMillis ms) {\n  ::std::stringstream ss;\n  // For the exact N seconds, makes sure output has a trailing decimal point.\n",
                    "rendered": {
                      "text": "//   </testsuite>\n// </testsuites>\n\n// Formats the given time in milliseconds as seconds.\nstd::string FormatTimeInMillisAsSeconds(TimeInMillis ms) {\n  ::std::stringstream ss;\n  // For the exact N seconds, makes sure output has a trailing decimal point.\n",
                      "markdown": "`//   </testsuite>\n// </testsuites>\n\n// Formats the given time in milliseconds as seconds.\nstd::string FormatTimeInMillisAsSeconds(TimeInMillis ms) {\n  ::std::stringstream ss;\n  // For the exact N seconds, makes sure output has a trailing decimal point.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 1712,
                  "startColumn": 11,
                  "endLine": 1712,
                  "endColumn": 17,
                  "snippet": {
                    "text": "  }\n  return AssertionFailure()\n         << \"The difference between \" << expr1 << \" and \" << expr2 << \" is \"\n         << diff << \", which exceeds \" << abs_error_expr << \", where\\n\"\n         << expr1 << \" evaluates to \" << val1 << \",\\n\"\n         << expr2 << \" evaluates to \" << val2 << \", and\\n\"\n         << abs_error_expr << \" evaluates to \" << abs_error << \".\";\n",
                    "rendered": {
                      "text": "  }\n  return AssertionFailure()\n         << \"The difference between \" << expr1 << \" and \" << expr2 << \" is \"\n         << diff << \", which exceeds \" << abs_error_expr << \", where\\n\"\n         << expr1 << \" evaluates to \" << val1 << \",\\n\"\n         << expr2 << \" evaluates to \" << val2 << \", and\\n\"\n         << abs_error_expr << \" evaluates to \" << abs_error << \".\";\n",
                      "markdown": "`  }\n  return AssertionFailure()\n         << \"The difference between \" << expr1 << \" and \" << expr2 << \" is \"\n         << diff << \", which exceeds \" << abs_error_expr << \", where\\n\"\n         << expr1 << \" evaluates to \" << val1 << \",\\n\"\n         << expr2 << \" evaluates to \" << val2 << \", and\\n\"\n         << abs_error_expr << \" evaluates to \" << abs_error << \".\";\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 1700,
                  "startColumn": 13,
                  "endLine": 1700,
                  "endColumn": 19,
                  "snippet": {
                    "text": "      abs_error < epsilon) {\n    return AssertionFailure()\n           << \"The difference between \" << expr1 << \" and \" << expr2 << \" is \"\n           << diff << \", where\\n\"\n           << expr1 << \" evaluates to \" << val1 << \",\\n\"\n           << expr2 << \" evaluates to \" << val2 << \".\\nThe abs_error parameter \"\n           << abs_error_expr << \" evaluates to \" << abs_error\n",
                    "rendered": {
                      "text": "      abs_error < epsilon) {\n    return AssertionFailure()\n           << \"The difference between \" << expr1 << \" and \" << expr2 << \" is \"\n           << diff << \", where\\n\"\n           << expr1 << \" evaluates to \" << val1 << \",\\n\"\n           << expr2 << \" evaluates to \" << val2 << \".\\nThe abs_error parameter \"\n           << abs_error_expr << \" evaluates to \" << abs_error\n",
                      "markdown": "`      abs_error < epsilon) {\n    return AssertionFailure()\n           << \"The difference between \" << expr1 << \" and \" << expr2 << \" is \"\n           << diff << \", where\\n\"\n           << expr1 << \" evaluates to \" << val1 << \",\\n\"\n           << expr2 << \" evaluates to \" << val2 << \".\\nThe abs_error parameter \"\n           << abs_error_expr << \" evaluates to \" << abs_error\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 1687,
                  "startColumn": 4,
                  "endLine": 1687,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n  // Find the value which is closest to zero.\n  const double min_abs = std::min(fabs(val1), fabs(val2));\n  // Find the distance to the next double from that value.\n  const double epsilon =\n      nextafter(min_abs, std::numeric_limits<double>::infinity()) - min_abs;\n  // Detect the case where abs_error is so small that EXPECT_NEAR is\n",
                    "rendered": {
                      "text": "\n  // Find the value which is closest to zero.\n  const double min_abs = std::min(fabs(val1), fabs(val2));\n  // Find the distance to the next double from that value.\n  const double epsilon =\n      nextafter(min_abs, std::numeric_limits<double>::infinity()) - min_abs;\n  // Detect the case where abs_error is so small that EXPECT_NEAR is\n",
                      "markdown": "`\n  // Find the value which is closest to zero.\n  const double min_abs = std::min(fabs(val1), fabs(val2));\n  // Find the distance to the next double from that value.\n  const double epsilon =\n      nextafter(min_abs, std::numeric_limits<double>::infinity()) - min_abs;\n  // Detect the case where abs_error is so small that EXPECT_NEAR is\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 1685,
                  "startColumn": 4,
                  "endLine": 1685,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  const double diff = fabs(val1 - val2);\n  if (diff <= abs_error) return AssertionSuccess();\n\n  // Find the value which is closest to zero.\n  const double min_abs = std::min(fabs(val1), fabs(val2));\n  // Find the distance to the next double from that value.\n  const double epsilon =\n",
                    "rendered": {
                      "text": "  const double diff = fabs(val1 - val2);\n  if (diff <= abs_error) return AssertionSuccess();\n\n  // Find the value which is closest to zero.\n  const double min_abs = std::min(fabs(val1), fabs(val2));\n  // Find the distance to the next double from that value.\n  const double epsilon =\n",
                      "markdown": "`  const double diff = fabs(val1 - val2);\n  if (diff <= abs_error) return AssertionSuccess();\n\n  // Find the value which is closest to zero.\n  const double min_abs = std::min(fabs(val1), fabs(val2));\n  // Find the distance to the next double from that value.\n  const double epsilon =\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 1682,
                  "startColumn": 14,
                  "endLine": 1682,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    return AssertionSuccess();\n  }\n\n  const double diff = fabs(val1 - val2);\n  if (diff <= abs_error) return AssertionSuccess();\n\n  // Find the value which is closest to zero.\n",
                    "rendered": {
                      "text": "    return AssertionSuccess();\n  }\n\n  const double diff = fabs(val1 - val2);\n  if (diff <= abs_error) return AssertionSuccess();\n\n  // Find the value which is closest to zero.\n",
                      "markdown": "`    return AssertionSuccess();\n  }\n\n  const double diff = fabs(val1 - val2);\n  if (diff <= abs_error) return AssertionSuccess();\n\n  // Find the value which is closest to zero.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 1524,
                  "startColumn": 6,
                  "endLine": 1524,
                  "endColumn": 12,
                  "snippet": {
                    "text": "      ++edit_i;\n    }\n\n    // Find the first line to include in the hunk.\n    const size_t prefix_context = std::min(l_i, context);\n    Hunk hunk(l_i - prefix_context + 1, r_i - prefix_context + 1);\n    for (size_t i = prefix_context; i > 0; --i) {\n",
                    "rendered": {
                      "text": "      ++edit_i;\n    }\n\n    // Find the first line to include in the hunk.\n    const size_t prefix_context = std::min(l_i, context);\n    Hunk hunk(l_i - prefix_context + 1, r_i - prefix_context + 1);\n    for (size_t i = prefix_context; i > 0; --i) {\n",
                      "markdown": "`      ++edit_i;\n    }\n\n    // Find the first line to include in the hunk.\n    const size_t prefix_context = std::min(l_i, context);\n    Hunk hunk(l_i - prefix_context + 1, r_i - prefix_context + 1);\n    for (size_t i = prefix_context; i > 0; --i) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 1517,
                  "startColumn": 6,
                  "endLine": 1517,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  size_t l_i = 0, r_i = 0, edit_i = 0;\n  std::stringstream ss;\n  while (edit_i < edits.size()) {\n    // Find first edit.\n    while (edit_i < edits.size() && edits[edit_i] == kMatch) {\n      ++l_i;\n      ++r_i;\n",
                    "rendered": {
                      "text": "  size_t l_i = 0, r_i = 0, edit_i = 0;\n  std::stringstream ss;\n  while (edit_i < edits.size()) {\n    // Find first edit.\n    while (edit_i < edits.size() && edits[edit_i] == kMatch) {\n      ++l_i;\n      ++r_i;\n",
                      "markdown": "`  size_t l_i = 0, r_i = 0, edit_i = 0;\n  std::stringstream ss;\n  while (edit_i < edits.size()) {\n    // Find first edit.\n    while (edit_i < edits.size() && edits[edit_i] == kMatch) {\n      ++l_i;\n      ++r_i;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 1502,
                  "startColumn": 41,
                  "endLine": 1502,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n}  // namespace\n\n// Create a list of diff hunks in Unified diff format.\n// Each hunk has a header generated by PrintHeader above plus a body with\n// lines prefixed with ' ' for no change, '-' for deletion and '+' for\n// addition.\n",
                    "rendered": {
                      "text": "\n}  // namespace\n\n// Create a list of diff hunks in Unified diff format.\n// Each hunk has a header generated by PrintHeader above plus a body with\n// lines prefixed with ' ' for no change, '-' for deletion and '+' for\n// addition.\n",
                      "markdown": "`\n}  // namespace\n\n// Create a list of diff hunks in Unified diff format.\n// Each hunk has a header generated by PrintHeader above plus a body with\n// lines prefixed with ' ' for no change, '-' for deletion and '+' for\n// addition.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 1502,
                  "startColumn": 19,
                  "endLine": 1502,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n}  // namespace\n\n// Create a list of diff hunks in Unified diff format.\n// Each hunk has a header generated by PrintHeader above plus a body with\n// lines prefixed with ' ' for no change, '-' for deletion and '+' for\n// addition.\n",
                    "rendered": {
                      "text": "\n}  // namespace\n\n// Create a list of diff hunks in Unified diff format.\n// Each hunk has a header generated by PrintHeader above plus a body with\n// lines prefixed with ' ' for no change, '-' for deletion and '+' for\n// addition.\n",
                      "markdown": "`\n}  // namespace\n\n// Create a list of diff hunks in Unified diff format.\n// Each hunk has a header generated by PrintHeader above plus a body with\n// lines prefixed with ' ' for no change, '-' for deletion and '+' for\n// addition.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 1477,
                  "startColumn": 20,
                  "endLine": 1477,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    hunk_.splice(hunk_.end(), hunk_adds_);\n  }\n\n  // Print a unified diff header for one hunk.\n  // The format is\n  //   \"@@ -<left_start>,<left_length> +<right_start>,<right_length> @@\"\n  // where the left/right parts are omitted if unnecessary.\n",
                    "rendered": {
                      "text": "    hunk_.splice(hunk_.end(), hunk_adds_);\n  }\n\n  // Print a unified diff header for one hunk.\n  // The format is\n  //   \"@@ -<left_start>,<left_length> +<right_start>,<right_length> @@\"\n  // where the left/right parts are omitted if unnecessary.\n",
                      "markdown": "`    hunk_.splice(hunk_.end(), hunk_adds_);\n  }\n\n  // Print a unified diff header for one hunk.\n  // The format is\n  //   \"@@ -<left_start>,<left_length> +<right_start>,<right_length> @@\"\n  // where the left/right parts are omitted if unnecessary.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 1198,
                  "startColumn": 66,
                  "endLine": 1198,
                  "endColumn": 72,
                  "snippet": {
                    "text": "};\n\n// Returns a timestamp as milliseconds since the epoch. Note this time may jump\n// around subject to adjustments by the system, to measure elapsed time use\n// Timer instead.\nTimeInMillis GetTimeInMillis() {\n  return std::chrono::duration_cast<std::chrono::milliseconds>(\n",
                    "rendered": {
                      "text": "};\n\n// Returns a timestamp as milliseconds since the epoch. Note this time may jump\n// around subject to adjustments by the system, to measure elapsed time use\n// Timer instead.\nTimeInMillis GetTimeInMillis() {\n  return std::chrono::duration_cast<std::chrono::milliseconds>(\n",
                      "markdown": "`};\n\n// Returns a timestamp as milliseconds since the epoch. Note this time may jump\n// around subject to adjustments by the system, to measure elapsed time use\n// Timer instead.\nTimeInMillis GetTimeInMillis() {\n  return std::chrono::duration_cast<std::chrono::milliseconds>(\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 1197,
                  "startColumn": 65,
                  "endLine": 1197,
                  "endColumn": 71,
                  "snippet": {
                    "text": "  clock::time_point start_;\n};\n\n// Returns a timestamp as milliseconds since the epoch. Note this time may jump\n// around subject to adjustments by the system, to measure elapsed time use\n// Timer instead.\nTimeInMillis GetTimeInMillis() {\n",
                    "rendered": {
                      "text": "  clock::time_point start_;\n};\n\n// Returns a timestamp as milliseconds since the epoch. Note this time may jump\n// around subject to adjustments by the system, to measure elapsed time use\n// Timer instead.\nTimeInMillis GetTimeInMillis() {\n",
                      "markdown": "`  clock::time_point start_;\n};\n\n// Returns a timestamp as milliseconds since the epoch. Note this time may jump\n// around subject to adjustments by the system, to measure elapsed time use\n// Timer instead.\nTimeInMillis GetTimeInMillis() {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 1179,
                  "startColumn": 11,
                  "endLine": 1179,
                  "endColumn": 17,
                  "snippet": {
                    "text": " public:\n  Timer() : start_(clock::now()) {}\n\n  // Return time elapsed in milliseconds since the timer was created.\n  TimeInMillis Elapsed() {\n    return std::chrono::duration_cast<std::chrono::milliseconds>(clock::now() -\n                                                                 start_)\n",
                    "rendered": {
                      "text": " public:\n  Timer() : start_(clock::now()) {}\n\n  // Return time elapsed in milliseconds since the timer was created.\n  TimeInMillis Elapsed() {\n    return std::chrono::duration_cast<std::chrono::milliseconds>(clock::now() -\n                                                                 start_)\n",
                      "markdown": "` public:\n  Timer() : start_(clock::now()) {}\n\n  // Return time elapsed in milliseconds since the timer was created.\n  TimeInMillis Elapsed() {\n    return std::chrono::duration_cast<std::chrono::milliseconds>(clock::now() -\n                                                                 start_)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 1160,
                  "startColumn": 26,
                  "endLine": 1160,
                  "endColumn": 31,
                  "snippet": {
                    "text": "//\n// The maximum number of stack frames to be included is specified by\n// the gtest_stack_trace_depth flag.  The skip_count parameter\n// specifies the number of top frames to be skipped, which doesn't\n// count against the number of frames to be included.\n//\n// For example, if Foo() calls Bar(), which in turn calls\n",
                    "rendered": {
                      "text": "//\n// The maximum number of stack frames to be included is specified by\n// the gtest_stack_trace_depth flag.  The skip_count parameter\n// specifies the number of top frames to be skipped, which doesn't\n// count against the number of frames to be included.\n//\n// For example, if Foo() calls Bar(), which in turn calls\n",
                      "markdown": "`//\n// The maximum number of stack frames to be included is specified by\n// the gtest_stack_trace_depth flag.  The skip_count parameter\n// specifies the number of top frames to be skipped, which doesn't\n// count against the number of frames to be included.\n//\n// For example, if Foo() calls Bar(), which in turn calls\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 542,
                  "startColumn": 20,
                  "endLine": 542,
                  "endColumn": 28,
                  "snippet": {
                    "text": "      \" is defined via TEST_P, but never instantiated. None of the test \"\n      \"cases \"\n      \"will run. Either no INSTANTIATE_TEST_SUITE_P is provided or the only \"\n      \"ones provided expand to nothing.\"\n      \"\\n\\n\"\n      \"Ideally, TEST_P definitions should only ever be included as part of \"\n      \"binaries that intend to use them. (As opposed to, for example, being \"\n",
                    "rendered": {
                      "text": "      \" is defined via TEST_P, but never instantiated. None of the test \"\n      \"cases \"\n      \"will run. Either no INSTANTIATE_TEST_SUITE_P is provided or the only \"\n      \"ones provided expand to nothing.\"\n      \"\\n\\n\"\n      \"Ideally, TEST_P definitions should only ever be included as part of \"\n      \"binaries that intend to use them. (As opposed to, for example, being \"\n",
                      "markdown": "`      \" is defined via TEST_P, but never instantiated. None of the test \"\n      \"cases \"\n      \"will run. Either no INSTANTIATE_TEST_SUITE_P is provided or the only \"\n      \"ones provided expand to nothing.\"\n      \"\\n\\n\"\n      \"Ideally, TEST_P definitions should only ever be included as part of \"\n      \"binaries that intend to use them. (As opposed to, for example, being \"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/src/gtest.cc"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 43,
                  "endLine": 331,
                  "endColumn": 49,
                  "snippet": {
                    "text": "GTEST_DEFINE_bool_(print_time,\n                   testing::internal::BoolFromGTestEnv(\"print_time\", true),\n                   \"True if and only if \" GTEST_NAME_\n                   \" should display elapsed time in text output.\");\n\nGTEST_DEFINE_bool_(print_utf8,\n                   testing::internal::BoolFromGTestEnv(\"print_utf8\", true),\n",
                    "rendered": {
                      "text": "GTEST_DEFINE_bool_(print_time,\n                   testing::internal::BoolFromGTestEnv(\"print_time\", true),\n                   \"True if and only if \" GTEST_NAME_\n                   \" should display elapsed time in text output.\");\n\nGTEST_DEFINE_bool_(print_utf8,\n                   testing::internal::BoolFromGTestEnv(\"print_utf8\", true),\n",
                      "markdown": "`GTEST_DEFINE_bool_(print_time,\n                   testing::internal::BoolFromGTestEnv(\"print_time\", true),\n                   \"True if and only if \" GTEST_NAME_\n                   \" should display elapsed time in text output.\");\n\nGTEST_DEFINE_bool_(print_utf8,\n                   testing::internal::BoolFromGTestEnv(\"print_utf8\", true),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-matchers-containers_test.cc"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 22,
                  "endLine": 265,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\nTEST(PointerTest, SmartPointerToConst) {\n  std::unique_ptr<const int> n(new int(10));\n  const int* raw_n = n.get();\n  const Matcher<std::unique_ptr<const int>> m = Pointer(Eq(raw_n));\n\n  // There's no implicit conversion from unique_ptr<int> to const\n",
                    "rendered": {
                      "text": "\nTEST(PointerTest, SmartPointerToConst) {\n  std::unique_ptr<const int> n(new int(10));\n  const int* raw_n = n.get();\n  const Matcher<std::unique_ptr<const int>> m = Pointer(Eq(raw_n));\n\n  // There's no implicit conversion from unique_ptr<int> to const\n",
                      "markdown": "`\nTEST(PointerTest, SmartPointerToConst) {\n  std::unique_ptr<const int> n(new int(10));\n  const int* raw_n = n.get();\n  const Matcher<std::unique_ptr<const int>> m = Pointer(Eq(raw_n));\n\n  // There's no implicit conversion from unique_ptr<int> to const\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-matchers-containers_test.cc"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 16,
                  "endLine": 257,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\nTEST(PointerTest, SmartPointer) {\n  std::unique_ptr<int> n(new int(10));\n  int* raw_n = n.get();\n  const Matcher<std::unique_ptr<int>> m = Pointer(Eq(raw_n));\n\n  EXPECT_TRUE(m.Matches(n));\n",
                    "rendered": {
                      "text": "\nTEST(PointerTest, SmartPointer) {\n  std::unique_ptr<int> n(new int(10));\n  int* raw_n = n.get();\n  const Matcher<std::unique_ptr<int>> m = Pointer(Eq(raw_n));\n\n  EXPECT_TRUE(m.Matches(n));\n",
                      "markdown": "`\nTEST(PointerTest, SmartPointer) {\n  std::unique_ptr<int> n(new int(10));\n  int* raw_n = n.get();\n  const Matcher<std::unique_ptr<int>> m = Pointer(Eq(raw_n));\n\n  EXPECT_TRUE(m.Matches(n));\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-matchers-containers_test.cc"
                },
                "region": {
                  "startLine": 3091,
                  "startColumn": 21,
                  "endLine": 3091,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\nTEST(ContainsTest, DescribesItselfCorrectly) {\n  Matcher<vector<int>> m = Contains(1);\n  EXPECT_EQ(\"contains at least one element that is equal to 1\", Describe(m));\n\n  Matcher<vector<int>> m2 = Not(m);\n  EXPECT_EQ(\"doesn't contain any element that is equal to 1\", Describe(m2));\n",
                    "rendered": {
                      "text": "\nTEST(ContainsTest, DescribesItselfCorrectly) {\n  Matcher<vector<int>> m = Contains(1);\n  EXPECT_EQ(\"contains at least one element that is equal to 1\", Describe(m));\n\n  Matcher<vector<int>> m2 = Not(m);\n  EXPECT_EQ(\"doesn't contain any element that is equal to 1\", Describe(m2));\n",
                      "markdown": "`\nTEST(ContainsTest, DescribesItselfCorrectly) {\n  Matcher<vector<int>> m = Contains(1);\n  EXPECT_EQ(\"contains at least one element that is equal to 1\", Describe(m));\n\n  Matcher<vector<int>> m2 = Not(m);\n  EXPECT_EQ(\"doesn't contain any element that is equal to 1\", Describe(m2));\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-matchers-containers_test.cc"
                },
                "region": {
                  "startLine": 2352,
                  "startColumn": 34,
                  "endLine": 2352,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  const int rhs[3] = {2, 6, 4};\n  EXPECT_THAT(lhs, Not(Pointwise(IsHalfOf(), rhs)));\n  EXPECT_EQ(\n      \"where the value pair (2, 6) at index #1 don't match, \"\n      \"where the second/2 is 3\",\n      Explain(Pointwise(IsHalfOf(), rhs), lhs));\n}\n",
                    "rendered": {
                      "text": "  const int rhs[3] = {2, 6, 4};\n  EXPECT_THAT(lhs, Not(Pointwise(IsHalfOf(), rhs)));\n  EXPECT_EQ(\n      \"where the value pair (2, 6) at index #1 don't match, \"\n      \"where the second/2 is 3\",\n      Explain(Pointwise(IsHalfOf(), rhs), lhs));\n}\n",
                      "markdown": "`  const int rhs[3] = {2, 6, 4};\n  EXPECT_THAT(lhs, Not(Pointwise(IsHalfOf(), rhs)));\n  EXPECT_EQ(\n      \"where the value pair (2, 6) at index #1 don't match, \"\n      \"where the second/2 is 3\",\n      Explain(Pointwise(IsHalfOf(), rhs), lhs));\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-matchers-containers_test.cc"
                },
                "region": {
                  "startLine": 2281,
                  "startColumn": 62,
                  "endLine": 2281,
                  "endColumn": 66,
                  "snippet": {
                    "text": "      \"in { 1, 2, 3 } are a pair where the first is half of the second\",\n      Describe(m));\n  EXPECT_EQ(\n      \"doesn't contain exactly 3 values, or contains a value x at some \"\n      \"index i where x and the i-th value of { 1, 2, 3 } are a pair \"\n      \"where the first isn't half of the second\",\n      DescribeNegation(m));\n",
                    "rendered": {
                      "text": "      \"in { 1, 2, 3 } are a pair where the first is half of the second\",\n      Describe(m));\n  EXPECT_EQ(\n      \"doesn't contain exactly 3 values, or contains a value x at some \"\n      \"index i where x and the i-th value of { 1, 2, 3 } are a pair \"\n      \"where the first isn't half of the second\",\n      DescribeNegation(m));\n",
                      "markdown": "`      \"in { 1, 2, 3 } are a pair where the first is half of the second\",\n      Describe(m));\n  EXPECT_EQ(\n      \"doesn't contain exactly 3 values, or contains a value x at some \"\n      \"index i where x and the i-th value of { 1, 2, 3 } are a pair \"\n      \"where the first isn't half of the second\",\n      DescribeNegation(m));\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-matchers-containers_test.cc"
                },
                "region": {
                  "startLine": 2582,
                  "startColumn": 13,
                  "endLine": 2582,
                  "endColumn": 21,
                  "snippet": {
                    "text": "TEST_F(PredicateFormatterFromMatcherTest, DetectsFlakyShortCircuit) {\n  AssertionResult result = RunPredicateFormatter(kFlaky);\n  EXPECT_FALSE(result);  // Implicit cast to bool.\n  std::string expect =\n      \"Value of: dummy-name\\nExpected: [DescribeTo]\\n\"\n      \"  The matcher failed on the initial attempt; but passed when rerun to \"\n      \"generate the explanation.\\n\"\n",
                    "rendered": {
                      "text": "TEST_F(PredicateFormatterFromMatcherTest, DetectsFlakyShortCircuit) {\n  AssertionResult result = RunPredicateFormatter(kFlaky);\n  EXPECT_FALSE(result);  // Implicit cast to bool.\n  std::string expect =\n      \"Value of: dummy-name\\nExpected: [DescribeTo]\\n\"\n      \"  The matcher failed on the initial attempt; but passed when rerun to \"\n      \"generate the explanation.\\n\"\n",
                      "markdown": "`TEST_F(PredicateFormatterFromMatcherTest, DetectsFlakyShortCircuit) {\n  AssertionResult result = RunPredicateFormatter(kFlaky);\n  EXPECT_FALSE(result);  // Implicit cast to bool.\n  std::string expect =\n      \"Value of: dummy-name\\nExpected: [DescribeTo]\\n\"\n      \"  The matcher failed on the initial attempt; but passed when rerun to \"\n      \"generate the explanation.\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-matchers-containers_test.cc"
                },
                "region": {
                  "startLine": 2572,
                  "startColumn": 13,
                  "endLine": 2572,
                  "endColumn": 21,
                  "snippet": {
                    "text": "TEST_F(PredicateFormatterFromMatcherTest, NoShortCircuitOnFailure) {\n  AssertionResult result = RunPredicateFormatter(kAlwaysFail);\n  EXPECT_FALSE(result);  // Implicit cast to bool.\n  std::string expect =\n      \"Value of: dummy-name\\nExpected: [DescribeTo]\\n\"\n      \"  Actual: 1\" +\n      OfType(internal::GetTypeName<Behavior>()) + \", [MatchAndExplain]\";\n",
                    "rendered": {
                      "text": "TEST_F(PredicateFormatterFromMatcherTest, NoShortCircuitOnFailure) {\n  AssertionResult result = RunPredicateFormatter(kAlwaysFail);\n  EXPECT_FALSE(result);  // Implicit cast to bool.\n  std::string expect =\n      \"Value of: dummy-name\\nExpected: [DescribeTo]\\n\"\n      \"  Actual: 1\" +\n      OfType(internal::GetTypeName<Behavior>()) + \", [MatchAndExplain]\";\n",
                      "markdown": "`TEST_F(PredicateFormatterFromMatcherTest, NoShortCircuitOnFailure) {\n  AssertionResult result = RunPredicateFormatter(kAlwaysFail);\n  EXPECT_FALSE(result);  // Implicit cast to bool.\n  std::string expect =\n      \"Value of: dummy-name\\nExpected: [DescribeTo]\\n\"\n      \"  Actual: 1\" +\n      OfType(internal::GetTypeName<Behavior>()) + \", [MatchAndExplain]\";\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-matchers-containers_test.cc"
                },
                "region": {
                  "startLine": 1431,
                  "startColumn": 12,
                  "endLine": 1431,
                  "endColumn": 16,
                  "snippet": {
                    "text": "  const int a[5] = {2, 1, 4, 5, 3};\n  Streamlike<int> s(a, a + 5);\n  Streamlike<int>::const_iterator it = s.begin();\n  const int* ip = a;\n  while (it != s.end()) {\n    SCOPED_TRACE(ip - a);\n    EXPECT_EQ(*ip++, *it++);\n",
                    "rendered": {
                      "text": "  const int a[5] = {2, 1, 4, 5, 3};\n  Streamlike<int> s(a, a + 5);\n  Streamlike<int>::const_iterator it = s.begin();\n  const int* ip = a;\n  while (it != s.end()) {\n    SCOPED_TRACE(ip - a);\n    EXPECT_EQ(*ip++, *it++);\n",
                      "markdown": "`  const int a[5] = {2, 1, 4, 5, 3};\n  Streamlike<int> s(a, a + 5);\n  Streamlike<int>::const_iterator it = s.begin();\n  const int* ip = a;\n  while (it != s.end()) {\n    SCOPED_TRACE(ip - a);\n    EXPECT_EQ(*ip++, *it++);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-cardinalities_test.cc"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 42,
                  "endLine": 292,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n  stringstream ss;\n  c.DescribeTo(&ss);\n  EXPECT_PRED_FORMAT2(IsSubstring, \"called at most twice\", ss.str());\n}\n\nTEST(BetweenTest, OnSameStartAndEnd) {\n",
                    "rendered": {
                      "text": "\n  stringstream ss;\n  c.DescribeTo(&ss);\n  EXPECT_PRED_FORMAT2(IsSubstring, \"called at most twice\", ss.str());\n}\n\nTEST(BetweenTest, OnSameStartAndEnd) {\n",
                      "markdown": "`\n  stringstream ss;\n  c.DescribeTo(&ss);\n  EXPECT_PRED_FORMAT2(IsSubstring, \"called at most twice\", ss.str());\n}\n\nTEST(BetweenTest, OnSameStartAndEnd) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-cardinalities_test.cc"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 42,
                  "endLine": 228,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n  stringstream ss3;\n  AtMost(3).DescribeTo(&ss3);\n  EXPECT_PRED_FORMAT2(IsSubstring, \"called at most 3 times\", ss3.str());\n}\n\nTEST(AtMostTest, HasCorrectBounds) {\n",
                    "rendered": {
                      "text": "\n  stringstream ss3;\n  AtMost(3).DescribeTo(&ss3);\n  EXPECT_PRED_FORMAT2(IsSubstring, \"called at most 3 times\", ss3.str());\n}\n\nTEST(AtMostTest, HasCorrectBounds) {\n",
                      "markdown": "`\n  stringstream ss3;\n  AtMost(3).DescribeTo(&ss3);\n  EXPECT_PRED_FORMAT2(IsSubstring, \"called at most 3 times\", ss3.str());\n}\n\nTEST(AtMostTest, HasCorrectBounds) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-cardinalities_test.cc"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 42,
                  "endLine": 224,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n  stringstream ss2;\n  c.DescribeTo(&ss2);\n  EXPECT_PRED_FORMAT2(IsSubstring, \"called at most twice\", ss2.str());\n\n  stringstream ss3;\n  AtMost(3).DescribeTo(&ss3);\n",
                    "rendered": {
                      "text": "\n  stringstream ss2;\n  c.DescribeTo(&ss2);\n  EXPECT_PRED_FORMAT2(IsSubstring, \"called at most twice\", ss2.str());\n\n  stringstream ss3;\n  AtMost(3).DescribeTo(&ss3);\n",
                      "markdown": "`\n  stringstream ss2;\n  c.DescribeTo(&ss2);\n  EXPECT_PRED_FORMAT2(IsSubstring, \"called at most twice\", ss2.str());\n\n  stringstream ss3;\n  AtMost(3).DescribeTo(&ss3);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-cardinalities_test.cc"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 42,
                  "endLine": 220,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n  stringstream ss1;\n  AtMost(1).DescribeTo(&ss1);\n  EXPECT_PRED_FORMAT2(IsSubstring, \"called at most once\", ss1.str());\n\n  stringstream ss2;\n  c.DescribeTo(&ss2);\n",
                    "rendered": {
                      "text": "\n  stringstream ss1;\n  AtMost(1).DescribeTo(&ss1);\n  EXPECT_PRED_FORMAT2(IsSubstring, \"called at most once\", ss1.str());\n\n  stringstream ss2;\n  c.DescribeTo(&ss2);\n",
                      "markdown": "`\n  stringstream ss1;\n  AtMost(1).DescribeTo(&ss1);\n  EXPECT_PRED_FORMAT2(IsSubstring, \"called at most once\", ss1.str());\n\n  stringstream ss2;\n  c.DescribeTo(&ss2);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/include/gmock/internal/gmock-internal-utils.h"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 11,
                  "endLine": 86,
                  "endColumn": 16,
                  "snippet": {
                    "text": "// the overload above, as it does not have an `element_type`.\ntemplate <typename Element>\ninline const Element* GetRawPointer(const std::reference_wrapper<Element>& r) {\n  return &r.get();\n}\n\n// This overloaded version is for the raw pointer case.\n",
                    "rendered": {
                      "text": "// the overload above, as it does not have an `element_type`.\ntemplate <typename Element>\ninline const Element* GetRawPointer(const std::reference_wrapper<Element>& r) {\n  return &r.get();\n}\n\n// This overloaded version is for the raw pointer case.\n",
                      "markdown": "`// the overload above, as it does not have an `element_type`.\ntemplate <typename Element>\ninline const Element* GetRawPointer(const std::reference_wrapper<Element>& r) {\n  return &r.get();\n}\n\n// This overloaded version is for the raw pointer case.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/include/gmock/internal/gmock-internal-utils.h"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 10,
                  "endLine": 80,
                  "endColumn": 15,
                  "snippet": {
                    "text": "// The following default implementation is for the smart pointer case.\ntemplate <typename Pointer>\ninline const typename Pointer::element_type* GetRawPointer(const Pointer& p) {\n  return p.get();\n}\n// This overload version is for std::reference_wrapper, which does not work with\n// the overload above, as it does not have an `element_type`.\n",
                    "rendered": {
                      "text": "// The following default implementation is for the smart pointer case.\ntemplate <typename Pointer>\ninline const typename Pointer::element_type* GetRawPointer(const Pointer& p) {\n  return p.get();\n}\n// This overload version is for std::reference_wrapper, which does not work with\n// the overload above, as it does not have an `element_type`.\n",
                      "markdown": "`// The following default implementation is for the smart pointer case.\ntemplate <typename Pointer>\ninline const typename Pointer::element_type* GetRawPointer(const Pointer& p) {\n  return p.get();\n}\n// This overload version is for std::reference_wrapper, which does not work with\n// the overload above, as it does not have an `element_type`.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/WORKSPACE"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 13,
                  "endLine": 61,
                  "endColumn": 79,
                  "snippet": {
                    "text": "        \"https://mirror.bazel.build/github.com/bazelbuild/platforms/releases/download/0.0.10/platforms-0.0.10.tar.gz\",\n        \"https://github.com/bazelbuild/platforms/releases/download/0.0.10/platforms-0.0.10.tar.gz\",\n    ],\n    sha256 = \"218efe8ee736d26a3572663b374a253c012b716d8af0c07e842e82f238a0a7ee\",\n)\n",
                    "rendered": {
                      "text": "        \"https://mirror.bazel.build/github.com/bazelbuild/platforms/releases/download/0.0.10/platforms-0.0.10.tar.gz\",\n        \"https://github.com/bazelbuild/platforms/releases/download/0.0.10/platforms-0.0.10.tar.gz\",\n    ],\n    sha256 = \"218efe8ee736d26a3572663b374a253c012b716d8af0c07e842e82f238a0a7ee\",\n)\n",
                      "markdown": "`        \"https://mirror.bazel.build/github.com/bazelbuild/platforms/releases/download/0.0.10/platforms-0.0.10.tar.gz\",\n        \"https://github.com/bazelbuild/platforms/releases/download/0.0.10/platforms-0.0.10.tar.gz\",\n    ],\n    sha256 = \"218efe8ee736d26a3572663b374a253c012b716d8af0c07e842e82f238a0a7ee\",\n)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/WORKSPACE"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 11,
                  "endLine": 51,
                  "endColumn": 77,
                  "snippet": {
                    "text": "\nhttp_archive(\n  name = \"bazel_skylib\",\n  sha256 = \"cd55a062e763b9349921f0f5db8c3933288dc8ba4f76dd9416aac68acee3cb94\",\n  urls = [\"https://github.com/bazelbuild/bazel-skylib/releases/download/1.5.0/bazel-skylib-1.5.0.tar.gz\"],\n)\n\n",
                    "rendered": {
                      "text": "\nhttp_archive(\n  name = \"bazel_skylib\",\n  sha256 = \"cd55a062e763b9349921f0f5db8c3933288dc8ba4f76dd9416aac68acee3cb94\",\n  urls = [\"https://github.com/bazelbuild/bazel-skylib/releases/download/1.5.0/bazel-skylib-1.5.0.tar.gz\"],\n)\n\n",
                      "markdown": "`\nhttp_archive(\n  name = \"bazel_skylib\",\n  sha256 = \"cd55a062e763b9349921f0f5db8c3933288dc8ba4f76dd9416aac68acee3cb94\",\n  urls = [\"https://github.com/bazelbuild/bazel-skylib/releases/download/1.5.0/bazel-skylib-1.5.0.tar.gz\"],\n)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/WORKSPACE"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 11,
                  "endLine": 40,
                  "endColumn": 77,
                  "snippet": {
                    "text": "\nhttp_archive(\n  name = \"rules_python\",\n  sha256 = \"d71d2c67e0bce986e1c5a7731b4693226867c45bfe0b7c5e0067228a536fc580\",\n  strip_prefix = \"rules_python-0.29.0\",\n  urls = [\"https://github.com/bazelbuild/rules_python/releases/download/0.29.0/rules_python-0.29.0.tar.gz\"],\n)\n",
                    "rendered": {
                      "text": "\nhttp_archive(\n  name = \"rules_python\",\n  sha256 = \"d71d2c67e0bce986e1c5a7731b4693226867c45bfe0b7c5e0067228a536fc580\",\n  strip_prefix = \"rules_python-0.29.0\",\n  urls = [\"https://github.com/bazelbuild/rules_python/releases/download/0.29.0/rules_python-0.29.0.tar.gz\"],\n)\n",
                      "markdown": "`\nhttp_archive(\n  name = \"rules_python\",\n  sha256 = \"d71d2c67e0bce986e1c5a7731b4693226867c45bfe0b7c5e0067228a536fc580\",\n  strip_prefix = \"rules_python-0.29.0\",\n  urls = [\"https://github.com/bazelbuild/rules_python/releases/download/0.29.0/rules_python-0.29.0.tar.gz\"],\n)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_unittest.cc"
                },
                "region": {
                  "startLine": 1719,
                  "startColumn": 6,
                  "endLine": 1719,
                  "endColumn": 49,
                  "snippet": {
                    "text": "  putenv(const_cast<char*>(added_env[name]->c_str()));\n  delete prev_env;\n#elif defined(GTEST_OS_WINDOWS)  // If we are on Windows proper.\n  _putenv((Message() << name << \"=\" << value).GetString().c_str());\n#else\n  if (*value == '\\0') {\n    unsetenv(name);\n",
                    "rendered": {
                      "text": "  putenv(const_cast<char*>(added_env[name]->c_str()));\n  delete prev_env;\n#elif defined(GTEST_OS_WINDOWS)  // If we are on Windows proper.\n  _putenv((Message() << name << \"=\" << value).GetString().c_str());\n#else\n  if (*value == '\\0') {\n    unsetenv(name);\n",
                      "markdown": "`  putenv(const_cast<char*>(added_env[name]->c_str()));\n  delete prev_env;\n#elif defined(GTEST_OS_WINDOWS)  // If we are on Windows proper.\n  _putenv((Message() << name << \"=\" << value).GetString().c_str());\n#else\n  if (*value == '\\0') {\n    unsetenv(name);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_unittest.cc"
                },
                "region": {
                  "startLine": 6415,
                  "startColumn": 44,
                  "endLine": 6415,
                  "endColumn": 48,
                  "snippet": {
                    "text": "  static void TearDownTestSuite() {\n    const TestInfo* test_info = UnitTest::GetInstance()->current_test_info();\n    EXPECT_TRUE(test_info == nullptr)\n        << \"There should be no tests running at this point.\";\n  }\n};\n\n",
                    "rendered": {
                      "text": "  static void TearDownTestSuite() {\n    const TestInfo* test_info = UnitTest::GetInstance()->current_test_info();\n    EXPECT_TRUE(test_info == nullptr)\n        << \"There should be no tests running at this point.\";\n  }\n};\n\n",
                      "markdown": "`  static void TearDownTestSuite() {\n    const TestInfo* test_info = UnitTest::GetInstance()->current_test_info();\n    EXPECT_TRUE(test_info == nullptr)\n        << \"There should be no tests running at this point.\";\n  }\n};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_unittest.cc"
                },
                "region": {
                  "startLine": 6407,
                  "startColumn": 44,
                  "endLine": 6407,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    // There should be no tests running at this point.\n    const TestInfo* test_info = UnitTest::GetInstance()->current_test_info();\n    EXPECT_TRUE(test_info == nullptr)\n        << \"There should be no tests running at this point.\";\n  }\n\n  // Tests that current_test_info() returns NULL after the last test in\n",
                    "rendered": {
                      "text": "    // There should be no tests running at this point.\n    const TestInfo* test_info = UnitTest::GetInstance()->current_test_info();\n    EXPECT_TRUE(test_info == nullptr)\n        << \"There should be no tests running at this point.\";\n  }\n\n  // Tests that current_test_info() returns NULL after the last test in\n",
                      "markdown": "`    // There should be no tests running at this point.\n    const TestInfo* test_info = UnitTest::GetInstance()->current_test_info();\n    EXPECT_TRUE(test_info == nullptr)\n        << \"There should be no tests running at this point.\";\n  }\n\n  // Tests that current_test_info() returns NULL after the last test in\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_unittest.cc"
                },
                "region": {
                  "startLine": 6404,
                  "startColumn": 39,
                  "endLine": 6404,
                  "endColumn": 43,
                  "snippet": {
                    "text": "  // Tests that current_test_info() returns NULL before the first test in\n  // the test case is run.\n  static void SetUpTestSuite() {\n    // There should be no tests running at this point.\n    const TestInfo* test_info = UnitTest::GetInstance()->current_test_info();\n    EXPECT_TRUE(test_info == nullptr)\n        << \"There should be no tests running at this point.\";\n",
                    "rendered": {
                      "text": "  // Tests that current_test_info() returns NULL before the first test in\n  // the test case is run.\n  static void SetUpTestSuite() {\n    // There should be no tests running at this point.\n    const TestInfo* test_info = UnitTest::GetInstance()->current_test_info();\n    EXPECT_TRUE(test_info == nullptr)\n        << \"There should be no tests running at this point.\";\n",
                      "markdown": "`  // Tests that current_test_info() returns NULL before the first test in\n  // the test case is run.\n  static void SetUpTestSuite() {\n    // There should be no tests running at this point.\n    const TestInfo* test_info = UnitTest::GetInstance()->current_test_info();\n    EXPECT_TRUE(test_info == nullptr)\n        << \"There should be no tests running at this point.\";\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_unittest.cc"
                },
                "region": {
                  "startLine": 3126,
                  "startColumn": 4,
                  "endLine": 3126,
                  "endColumn": 8,
                  "snippet": {
                    "text": "      EXPECT_NEAR(v.infinity, v.close_to_infinity, v.further_from_infinity),\n      \"The difference between v.infinity and v.close_to_infinity is inf, which \"\n      \"exceeds v.further_from_infinity\");\n  // At this magnitude adjacent doubles are 512.0 apart, so this triggers a\n  // slightly different failure reporting path.\n  EXPECT_NONFATAL_FAILURE(\n      EXPECT_NEAR(4.2934311416234112e+18, 4.2934311416234107e+18, 1.0),\n",
                    "rendered": {
                      "text": "      EXPECT_NEAR(v.infinity, v.close_to_infinity, v.further_from_infinity),\n      \"The difference between v.infinity and v.close_to_infinity is inf, which \"\n      \"exceeds v.further_from_infinity\");\n  // At this magnitude adjacent doubles are 512.0 apart, so this triggers a\n  // slightly different failure reporting path.\n  EXPECT_NONFATAL_FAILURE(\n      EXPECT_NEAR(4.2934311416234112e+18, 4.2934311416234107e+18, 1.0),\n",
                      "markdown": "`      EXPECT_NEAR(v.infinity, v.close_to_infinity, v.further_from_infinity),\n      \"The difference between v.infinity and v.close_to_infinity is inf, which \"\n      \"exceeds v.further_from_infinity\");\n  // At this magnitude adjacent doubles are 512.0 apart, so this triggers a\n  // slightly different failure reporting path.\n  EXPECT_NONFATAL_FAILURE(\n      EXPECT_NEAR(4.2934311416234112e+18, 4.2934311416234107e+18, 1.0),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_unittest.cc"
                },
                "region": {
                  "startLine": 2505,
                  "startColumn": 47,
                  "endLine": 2505,
                  "endColumn": 51,
                  "snippet": {
                    "text": "  const char* const p1 = \"good\";\n  ASSERT_STREQ(p1, p1);\n\n  // Let p2 have the same content as p1, but be at a different address.\n  const char p2[] = \"good\";\n  ASSERT_STREQ(p1, p2);\n\n",
                    "rendered": {
                      "text": "  const char* const p1 = \"good\";\n  ASSERT_STREQ(p1, p1);\n\n  // Let p2 have the same content as p1, but be at a different address.\n  const char p2[] = \"good\";\n  ASSERT_STREQ(p1, p2);\n\n",
                      "markdown": "`  const char* const p1 = \"good\";\n  ASSERT_STREQ(p1, p1);\n\n  // Let p2 have the same content as p1, but be at a different address.\n  const char p2[] = \"good\";\n  ASSERT_STREQ(p1, p2);\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_unittest.cc"
                },
                "region": {
                  "startLine": 1161,
                  "startColumn": 54,
                  "endLine": 1161,
                  "endColumn": 58,
                  "snippet": {
                    "text": "}\n\n// AddFatalFailure() and AddNonfatalFailure() must be stand-alone\n// functions (i.e. their definitions cannot be inlined at the call\n// sites), or C++Builder won't compile the code.\nstatic void AddFatalFailure() { FAIL() << \"Expected fatal failure.\"; }\n\n",
                    "rendered": {
                      "text": "}\n\n// AddFatalFailure() and AddNonfatalFailure() must be stand-alone\n// functions (i.e. their definitions cannot be inlined at the call\n// sites), or C++Builder won't compile the code.\nstatic void AddFatalFailure() { FAIL() << \"Expected fatal failure.\"; }\n\n",
                      "markdown": "`}\n\n// AddFatalFailure() and AddNonfatalFailure() must be stand-alone\n// functions (i.e. their definitions cannot be inlined at the call\n// sites), or C++Builder won't compile the code.\nstatic void AddFatalFailure() { FAIL() << \"Expected fatal failure.\"; }\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_unittest.cc"
                },
                "region": {
                  "startLine": 1092,
                  "startColumn": 50,
                  "endLine": 1092,
                  "endColumn": 58,
                  "snippet": {
                    "text": "  EXPECT_FALSE(String::EndsWithCaseInsensitive(\"\", \"foo\"));\n}\n\n// C++Builder's preprocessor is buggy; it fails to expand macros that\n// appear in macro parameters after wide char literals.  Provide an alias\n// for NULL as a workaround.\nstatic const wchar_t* const kNull = nullptr;\n",
                    "rendered": {
                      "text": "  EXPECT_FALSE(String::EndsWithCaseInsensitive(\"\", \"foo\"));\n}\n\n// C++Builder's preprocessor is buggy; it fails to expand macros that\n// appear in macro parameters after wide char literals.  Provide an alias\n// for NULL as a workaround.\nstatic const wchar_t* const kNull = nullptr;\n",
                      "markdown": "`  EXPECT_FALSE(String::EndsWithCaseInsensitive(\"\", \"foo\"));\n}\n\n// C++Builder's preprocessor is buggy; it fails to expand macros that\n// appear in macro parameters after wide char literals.  Provide an alias\n// for NULL as a workaround.\nstatic const wchar_t* const kNull = nullptr;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_unittest.cc"
                },
                "region": {
                  "startLine": 1001,
                  "startColumn": 11,
                  "endLine": 1001,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  ASSERT_PRED1(VectorIsNotCorrupt, vector_);\n  ASSERT_PRED1(VectorIsUnshuffled, vector_);\n\n  // ...and at the end.\n  ShuffleRange(&random_, kVectorSize - 1, kVectorSize, &vector_);\n  ASSERT_PRED1(VectorIsNotCorrupt, vector_);\n  ASSERT_PRED1(VectorIsUnshuffled, vector_);\n",
                    "rendered": {
                      "text": "  ASSERT_PRED1(VectorIsNotCorrupt, vector_);\n  ASSERT_PRED1(VectorIsUnshuffled, vector_);\n\n  // ...and at the end.\n  ShuffleRange(&random_, kVectorSize - 1, kVectorSize, &vector_);\n  ASSERT_PRED1(VectorIsNotCorrupt, vector_);\n  ASSERT_PRED1(VectorIsUnshuffled, vector_);\n",
                      "markdown": "`  ASSERT_PRED1(VectorIsNotCorrupt, vector_);\n  ASSERT_PRED1(VectorIsUnshuffled, vector_);\n\n  // ...and at the end.\n  ShuffleRange(&random_, kVectorSize - 1, kVectorSize, &vector_);\n  ASSERT_PRED1(VectorIsNotCorrupt, vector_);\n  ASSERT_PRED1(VectorIsUnshuffled, vector_);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_unittest.cc"
                },
                "region": {
                  "startLine": 991,
                  "startColumn": 27,
                  "endLine": 991,
                  "endColumn": 31,
                  "snippet": {
                    "text": "}\n\nTEST_F(VectorShuffleTest, HandlesRangeOfSizeOne) {\n  // Tests a size one range at the beginning...\n  ShuffleRange(&random_, 0, 1, &vector_);\n  ASSERT_PRED1(VectorIsNotCorrupt, vector_);\n  ASSERT_PRED1(VectorIsUnshuffled, vector_);\n",
                    "rendered": {
                      "text": "}\n\nTEST_F(VectorShuffleTest, HandlesRangeOfSizeOne) {\n  // Tests a size one range at the beginning...\n  ShuffleRange(&random_, 0, 1, &vector_);\n  ASSERT_PRED1(VectorIsNotCorrupt, vector_);\n  ASSERT_PRED1(VectorIsUnshuffled, vector_);\n",
                      "markdown": "`}\n\nTEST_F(VectorShuffleTest, HandlesRangeOfSizeOne) {\n  // Tests a size one range at the beginning...\n  ShuffleRange(&random_, 0, 1, &vector_);\n  ASSERT_PRED1(VectorIsNotCorrupt, vector_);\n  ASSERT_PRED1(VectorIsUnshuffled, vector_);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_unittest.cc"
                },
                "region": {
                  "startLine": 969,
                  "startColumn": 25,
                  "endLine": 969,
                  "endColumn": 29,
                  "snippet": {
                    "text": "const size_t VectorShuffleTest::kVectorSize;\n\nTEST_F(VectorShuffleTest, HandlesEmptyRange) {\n  // Tests an empty range at the beginning...\n  ShuffleRange(&random_, 0, 0, &vector_);\n  ASSERT_PRED1(VectorIsNotCorrupt, vector_);\n  ASSERT_PRED1(VectorIsUnshuffled, vector_);\n",
                    "rendered": {
                      "text": "const size_t VectorShuffleTest::kVectorSize;\n\nTEST_F(VectorShuffleTest, HandlesEmptyRange) {\n  // Tests an empty range at the beginning...\n  ShuffleRange(&random_, 0, 0, &vector_);\n  ASSERT_PRED1(VectorIsNotCorrupt, vector_);\n  ASSERT_PRED1(VectorIsUnshuffled, vector_);\n",
                      "markdown": "`const size_t VectorShuffleTest::kVectorSize;\n\nTEST_F(VectorShuffleTest, HandlesEmptyRange) {\n  // Tests an empty range at the beginning...\n  ShuffleRange(&random_, 0, 0, &vector_);\n  ASSERT_PRED1(VectorIsNotCorrupt, vector_);\n  ASSERT_PRED1(VectorIsUnshuffled, vector_);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_unittest.cc"
                },
                "region": {
                  "startLine": 751,
                  "startColumn": 25,
                  "endLine": 751,
                  "endColumn": 29,
                  "snippet": {
                    "text": "// Tests that encoding an invalid UTF-16 surrogate pair\n// generates the expected result.\nTEST(WideStringToUtf8Test, CanEncodeInvalidUtf16SurrogatePair) {\n  // Leading surrogate is at the end of the string.\n  const wchar_t s1[] = {0xD800, '\\0'};\n  EXPECT_STREQ(\"\\xED\\xA0\\x80\", WideStringToUtf8(s1, -1).c_str());\n  // Leading surrogate is not followed by the trailing surrogate.\n",
                    "rendered": {
                      "text": "// Tests that encoding an invalid UTF-16 surrogate pair\n// generates the expected result.\nTEST(WideStringToUtf8Test, CanEncodeInvalidUtf16SurrogatePair) {\n  // Leading surrogate is at the end of the string.\n  const wchar_t s1[] = {0xD800, '\\0'};\n  EXPECT_STREQ(\"\\xED\\xA0\\x80\", WideStringToUtf8(s1, -1).c_str());\n  // Leading surrogate is not followed by the trailing surrogate.\n",
                      "markdown": "`// Tests that encoding an invalid UTF-16 surrogate pair\n// generates the expected result.\nTEST(WideStringToUtf8Test, CanEncodeInvalidUtf16SurrogatePair) {\n  // Leading surrogate is at the end of the string.\n  const wchar_t s1[] = {0xD800, '\\0'};\n  EXPECT_STREQ(\"\\xED\\xA0\\x80\", WideStringToUtf8(s1, -1).c_str());\n  // Leading surrogate is not followed by the trailing surrogate.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_unittest.cc"
                },
                "region": {
                  "startLine": 7795,
                  "startColumn": 2,
                  "endLine": 7795,
                  "endColumn": 8,
                  "snippet": {
                    "text": "}\n\n// Test that the pattern globbing algorithm is linear. If not, this test should\n// time out.\nTEST(PatternGlobbingTest, MatchesFilterLinearRuntime) {\n  std::string name(100, 'a');  // Construct the string (a^100)b\n  name.push_back('b');\n",
                    "rendered": {
                      "text": "}\n\n// Test that the pattern globbing algorithm is linear. If not, this test should\n// time out.\nTEST(PatternGlobbingTest, MatchesFilterLinearRuntime) {\n  std::string name(100, 'a');  // Construct the string (a^100)b\n  name.push_back('b');\n",
                      "markdown": "`}\n\n// Test that the pattern globbing algorithm is linear. If not, this test should\n// time out.\nTEST(PatternGlobbingTest, MatchesFilterLinearRuntime) {\n  std::string name(100, 'a');  // Construct the string (a^100)b\n  name.push_back('b');\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_unittest.cc"
                },
                "region": {
                  "startLine": 7791,
                  "startColumn": 19,
                  "endLine": 7791,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    }\n  }\n\n  FAIL() << \"Didn't find the test!\";\n}\n\n// Test that the pattern globbing algorithm is linear. If not, this test should\n",
                    "rendered": {
                      "text": "    }\n  }\n\n  FAIL() << \"Didn't find the test!\";\n}\n\n// Test that the pattern globbing algorithm is linear. If not, this test should\n",
                      "markdown": "`    }\n  }\n\n  FAIL() << \"Didn't find the test!\";\n}\n\n// Test that the pattern globbing algorithm is linear. If not, this test should\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_unittest.cc"
                },
                "region": {
                  "startLine": 3612,
                  "startColumn": 63,
                  "endLine": 3612,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        << \">\";\n    EXPECT_TRUE(c->expected_diff == CreateUnifiedDiff(CharsToLines(c->left),\n                                                      CharsToLines(c->right)))\n        << \"Left <\" << c->left << \"> Right <\" << c->right << \"> Diff <\"\n        << CreateUnifiedDiff(CharsToLines(c->left), CharsToLines(c->right))\n        << \">\";\n  }\n",
                    "rendered": {
                      "text": "        << \">\";\n    EXPECT_TRUE(c->expected_diff == CreateUnifiedDiff(CharsToLines(c->left),\n                                                      CharsToLines(c->right)))\n        << \"Left <\" << c->left << \"> Right <\" << c->right << \"> Diff <\"\n        << CreateUnifiedDiff(CharsToLines(c->left), CharsToLines(c->right))\n        << \">\";\n  }\n",
                      "markdown": "`        << \">\";\n    EXPECT_TRUE(c->expected_diff == CreateUnifiedDiff(CharsToLines(c->left),\n                                                      CharsToLines(c->right)))\n        << \"Left <\" << c->left << \"> Right <\" << c->right << \"> Diff <\"\n        << CreateUnifiedDiff(CharsToLines(c->left), CharsToLines(c->right))\n        << \">\";\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_unittest.cc"
                },
                "region": {
                  "startLine": 1092,
                  "startColumn": 50,
                  "endLine": 1092,
                  "endColumn": 58,
                  "snippet": {
                    "text": "  EXPECT_FALSE(String::EndsWithCaseInsensitive(\"\", \"foo\"));\n}\n\n// C++Builder's preprocessor is buggy; it fails to expand macros that\n// appear in macro parameters after wide char literals.  Provide an alias\n// for NULL as a workaround.\nstatic const wchar_t* const kNull = nullptr;\n",
                    "rendered": {
                      "text": "  EXPECT_FALSE(String::EndsWithCaseInsensitive(\"\", \"foo\"));\n}\n\n// C++Builder's preprocessor is buggy; it fails to expand macros that\n// appear in macro parameters after wide char literals.  Provide an alias\n// for NULL as a workaround.\nstatic const wchar_t* const kNull = nullptr;\n",
                      "markdown": "`  EXPECT_FALSE(String::EndsWithCaseInsensitive(\"\", \"foo\"));\n}\n\n// C++Builder's preprocessor is buggy; it fails to expand macros that\n// appear in macro parameters after wide char literals.  Provide an alias\n// for NULL as a workaround.\nstatic const wchar_t* const kNull = nullptr;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_unittest.cc"
                },
                "region": {
                  "startLine": 452,
                  "startColumn": 14,
                  "endLine": 452,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    GTEST_DISABLE_MSC_DEPRECATED_POP_()\n\n    // Set the local time zone for FormatEpochTimeInMillisAsIso8601 to be\n    // a fixed time zone for reproducibility purposes.\n    SetTimeZone(\"UTC+00\");\n  }\n\n",
                    "rendered": {
                      "text": "    GTEST_DISABLE_MSC_DEPRECATED_POP_()\n\n    // Set the local time zone for FormatEpochTimeInMillisAsIso8601 to be\n    // a fixed time zone for reproducibility purposes.\n    SetTimeZone(\"UTC+00\");\n  }\n\n",
                      "markdown": "`    GTEST_DISABLE_MSC_DEPRECATED_POP_()\n\n    // Set the local time zone for FormatEpochTimeInMillisAsIso8601 to be\n    // a fixed time zone for reproducibility purposes.\n    SetTimeZone(\"UTC+00\");\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_unittest.cc"
                },
                "region": {
                  "startLine": 451,
                  "startColumn": 20,
                  "endLine": 451,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    }\n    GTEST_DISABLE_MSC_DEPRECATED_POP_()\n\n    // Set the local time zone for FormatEpochTimeInMillisAsIso8601 to be\n    // a fixed time zone for reproducibility purposes.\n    SetTimeZone(\"UTC+00\");\n  }\n",
                    "rendered": {
                      "text": "    }\n    GTEST_DISABLE_MSC_DEPRECATED_POP_()\n\n    // Set the local time zone for FormatEpochTimeInMillisAsIso8601 to be\n    // a fixed time zone for reproducibility purposes.\n    SetTimeZone(\"UTC+00\");\n  }\n",
                      "markdown": "`    }\n    GTEST_DISABLE_MSC_DEPRECATED_POP_()\n\n    // Set the local time zone for FormatEpochTimeInMillisAsIso8601 to be\n    // a fixed time zone for reproducibility purposes.\n    SetTimeZone(\"UTC+00\");\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_unittest.cc"
                },
                "region": {
                  "startLine": 425,
                  "startColumn": 43,
                  "endLine": 425,
                  "endColumn": 49,
                  "snippet": {
                    "text": "  EXPECT_EQ(\"-1234567.89\", FormatTimeInMillisAsSeconds(-1234567890));\n}\n\n// TODO: b/287046337 - In emscripten, local time zone modification is not\n// supported.\n#if !defined(__EMSCRIPTEN__)\n// Tests FormatEpochTimeInMillisAsIso8601().  The correctness of conversion\n",
                    "rendered": {
                      "text": "  EXPECT_EQ(\"-1234567.89\", FormatTimeInMillisAsSeconds(-1234567890));\n}\n\n// TODO: b/287046337 - In emscripten, local time zone modification is not\n// supported.\n#if !defined(__EMSCRIPTEN__)\n// Tests FormatEpochTimeInMillisAsIso8601().  The correctness of conversion\n",
                      "markdown": "`  EXPECT_EQ(\"-1234567.89\", FormatTimeInMillisAsSeconds(-1234567890));\n}\n\n// TODO: b/287046337 - In emscripten, local time zone modification is not\n// supported.\n#if !defined(__EMSCRIPTEN__)\n// Tests FormatEpochTimeInMillisAsIso8601().  The correctness of conversion\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_repeat_test.cc"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 16,
                  "endLine": 212,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n  TestRepeatWithFilterForFailedTests(4);\n\n  // It would be nice to verify that the tests indeed loop forever\n  // when GTEST_FLAG(repeat) is negative, but this test will be quite\n  // complicated to write.  Since this flag is for interactive\n  // debugging only and doesn't affect the normal test result, such a\n",
                    "rendered": {
                      "text": "\n  TestRepeatWithFilterForFailedTests(4);\n\n  // It would be nice to verify that the tests indeed loop forever\n  // when GTEST_FLAG(repeat) is negative, but this test will be quite\n  // complicated to write.  Since this flag is for interactive\n  // debugging only and doesn't affect the normal test result, such a\n",
                      "markdown": "`\n  TestRepeatWithFilterForFailedTests(4);\n\n  // It would be nice to verify that the tests indeed loop forever\n  // when GTEST_FLAG(repeat) is negative, but this test will be quite\n  // complicated to write.  Since this flag is for interactive\n  // debugging only and doesn't affect the normal test result, such a\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/internal/gtest-param-util.h"
                },
                "region": {
                  "startLine": 988,
                  "startColumn": 54,
                  "endLine": 988,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    ParamIteratorInterface<To>* Clone() const override {\n      return new Iterator(*this);\n    }\n    const To* Current() const override { return value_.get(); }\n    bool Equals(const ParamIteratorInterface<To>& other) const override {\n      // Having the same base generator guarantees that the other\n      // iterator is of the same type and we can downcast.\n",
                    "rendered": {
                      "text": "    ParamIteratorInterface<To>* Clone() const override {\n      return new Iterator(*this);\n    }\n    const To* Current() const override { return value_.get(); }\n    bool Equals(const ParamIteratorInterface<To>& other) const override {\n      // Having the same base generator guarantees that the other\n      // iterator is of the same type and we can downcast.\n",
                      "markdown": "`    ParamIteratorInterface<To>* Clone() const override {\n      return new Iterator(*this);\n    }\n    const To* Current() const override { return value_.get(); }\n    bool Equals(const ParamIteratorInterface<To>& other) const override {\n      // Having the same base generator guarantees that the other\n      // iterator is of the same type and we can downcast.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/internal/gtest-param-util.h"
                },
                "region": {
                  "startLine": 876,
                  "startColumn": 69,
                  "endLine": 876,
                  "endColumn": 74,
                  "snippet": {
                    "text": "      return new IteratorImpl(*this);\n    }\n\n    const ParamType* Current() const override { return current_value_.get(); }\n\n    bool Equals(const ParamIteratorInterface<ParamType>& other) const override {\n      // Having the same base generator guarantees that the other\n",
                    "rendered": {
                      "text": "      return new IteratorImpl(*this);\n    }\n\n    const ParamType* Current() const override { return current_value_.get(); }\n\n    bool Equals(const ParamIteratorInterface<ParamType>& other) const override {\n      // Having the same base generator guarantees that the other\n",
                      "markdown": "`      return new IteratorImpl(*this);\n    }\n\n    const ParamType* Current() const override { return current_value_.get(); }\n\n    bool Equals(const ParamIteratorInterface<ParamType>& other) const override {\n      // Having the same base generator guarantees that the other\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/internal/gtest-param-util.h"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 19,
                  "endLine": 341,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    // responsible for not calling Current() on an out-of-range iterator.\n    const T* Current() const override {\n      if (value_.get() == nullptr) value_.reset(new T(*iterator_));\n      return value_.get();\n    }\n    bool Equals(const ParamIteratorInterface<T>& other) const override {\n      // Having the same base generator guarantees that the other\n",
                    "rendered": {
                      "text": "    // responsible for not calling Current() on an out-of-range iterator.\n    const T* Current() const override {\n      if (value_.get() == nullptr) value_.reset(new T(*iterator_));\n      return value_.get();\n    }\n    bool Equals(const ParamIteratorInterface<T>& other) const override {\n      // Having the same base generator guarantees that the other\n",
                      "markdown": "`    // responsible for not calling Current() on an out-of-range iterator.\n    const T* Current() const override {\n      if (value_.get() == nullptr) value_.reset(new T(*iterator_));\n      return value_.get();\n    }\n    bool Equals(const ParamIteratorInterface<T>& other) const override {\n      // Having the same base generator guarantees that the other\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/internal/gtest-param-util.h"
                },
                "region": {
                  "startLine": 340,
                  "startColumn": 16,
                  "endLine": 340,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    // detect that fact. The client code, on the other hand, is\n    // responsible for not calling Current() on an out-of-range iterator.\n    const T* Current() const override {\n      if (value_.get() == nullptr) value_.reset(new T(*iterator_));\n      return value_.get();\n    }\n    bool Equals(const ParamIteratorInterface<T>& other) const override {\n",
                    "rendered": {
                      "text": "    // detect that fact. The client code, on the other hand, is\n    // responsible for not calling Current() on an out-of-range iterator.\n    const T* Current() const override {\n      if (value_.get() == nullptr) value_.reset(new T(*iterator_));\n      return value_.get();\n    }\n    bool Equals(const ParamIteratorInterface<T>& other) const override {\n",
                      "markdown": "`    // detect that fact. The client code, on the other hand, is\n    // responsible for not calling Current() on an out-of-range iterator.\n    const T* Current() const override {\n      if (value_.get() == nullptr) value_.reset(new T(*iterator_));\n      return value_.get();\n    }\n    bool Equals(const ParamIteratorInterface<T>& other) const override {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/internal/gtest-param-util.h"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 37,
                  "endLine": 156,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    return ParamIterator(clone);\n  }\n  bool operator==(const ParamIterator& other) const {\n    return impl_.get() == other.impl_.get() || impl_->Equals(*other.impl_);\n  }\n  bool operator!=(const ParamIterator& other) const {\n    return !(*this == other);\n",
                    "rendered": {
                      "text": "    return ParamIterator(clone);\n  }\n  bool operator==(const ParamIterator& other) const {\n    return impl_.get() == other.impl_.get() || impl_->Equals(*other.impl_);\n  }\n  bool operator!=(const ParamIterator& other) const {\n    return !(*this == other);\n",
                      "markdown": "`    return ParamIterator(clone);\n  }\n  bool operator==(const ParamIterator& other) const {\n    return impl_.get() == other.impl_.get() || impl_->Equals(*other.impl_);\n  }\n  bool operator!=(const ParamIterator& other) const {\n    return !(*this == other);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/internal/gtest-param-util.h"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 16,
                  "endLine": 156,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    return ParamIterator(clone);\n  }\n  bool operator==(const ParamIterator& other) const {\n    return impl_.get() == other.impl_.get() || impl_->Equals(*other.impl_);\n  }\n  bool operator!=(const ParamIterator& other) const {\n    return !(*this == other);\n",
                    "rendered": {
                      "text": "    return ParamIterator(clone);\n  }\n  bool operator==(const ParamIterator& other) const {\n    return impl_.get() == other.impl_.get() || impl_->Equals(*other.impl_);\n  }\n  bool operator!=(const ParamIterator& other) const {\n    return !(*this == other);\n",
                      "markdown": "`    return ParamIterator(clone);\n  }\n  bool operator==(const ParamIterator& other) const {\n    return impl_.get() == other.impl_.get() || impl_->Equals(*other.impl_);\n  }\n  bool operator!=(const ParamIterator& other) const {\n    return !(*this == other);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/internal/gtest-param-util.h"
                },
                "region": {
                  "startLine": 717,
                  "startColumn": 10,
                  "endLine": 717,
                  "endColumn": 14,
                  "snippet": {
                    "text": "        ReportInvalidTestSuiteType(test_suite_name.c_str(), code_location);\n        posix::Abort();\n      } else {\n        // At this point we are sure that the object we found is of the same\n        // type we are looking for, so we downcast it to that type\n        // without further checks.\n        typed_test_info =\n",
                    "rendered": {
                      "text": "        ReportInvalidTestSuiteType(test_suite_name.c_str(), code_location);\n        posix::Abort();\n      } else {\n        // At this point we are sure that the object we found is of the same\n        // type we are looking for, so we downcast it to that type\n        // without further checks.\n        typed_test_info =\n",
                      "markdown": "`        ReportInvalidTestSuiteType(test_suite_name.c_str(), code_location);\n        posix::Abort();\n      } else {\n        // At this point we are sure that the object we found is of the same\n        // type we are looking for, so we downcast it to that type\n        // without further checks.\n        typed_test_info =\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/internal/gtest-port.h"
                },
                "region": {
                  "startLine": 1585,
                  "startColumn": 22,
                  "endLine": 1585,
                  "endColumn": 27,
                  "snippet": {
                    "text": "//   // Thread 1\n//   EXPECT_EQ(100, tl.get());  // In thread 1, tl has the original value.\n//   tl.set(200);\n//   EXPECT_EQ(200, tl.get());\n//\n// The template type argument T must have a public copy constructor.\n// In addition, the default ThreadLocal constructor requires T to have\n",
                    "rendered": {
                      "text": "//   // Thread 1\n//   EXPECT_EQ(100, tl.get());  // In thread 1, tl has the original value.\n//   tl.set(200);\n//   EXPECT_EQ(200, tl.get());\n//\n// The template type argument T must have a public copy constructor.\n// In addition, the default ThreadLocal constructor requires T to have\n",
                      "markdown": "`//   // Thread 1\n//   EXPECT_EQ(100, tl.get());  // In thread 1, tl has the original value.\n//   tl.set(200);\n//   EXPECT_EQ(200, tl.get());\n//\n// The template type argument T must have a public copy constructor.\n// In addition, the default ThreadLocal constructor requires T to have\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/internal/gtest-port.h"
                },
                "region": {
                  "startLine": 1583,
                  "startColumn": 22,
                  "endLine": 1583,
                  "endColumn": 27,
                  "snippet": {
                    "text": "//   EXPECT_EQ(150, tl.get());\n//\n//   // Thread 1\n//   EXPECT_EQ(100, tl.get());  // In thread 1, tl has the original value.\n//   tl.set(200);\n//   EXPECT_EQ(200, tl.get());\n//\n",
                    "rendered": {
                      "text": "//   EXPECT_EQ(150, tl.get());\n//\n//   // Thread 1\n//   EXPECT_EQ(100, tl.get());  // In thread 1, tl has the original value.\n//   tl.set(200);\n//   EXPECT_EQ(200, tl.get());\n//\n",
                      "markdown": "`//   EXPECT_EQ(150, tl.get());\n//\n//   // Thread 1\n//   EXPECT_EQ(100, tl.get());  // In thread 1, tl has the original value.\n//   tl.set(200);\n//   EXPECT_EQ(200, tl.get());\n//\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/internal/gtest-port.h"
                },
                "region": {
                  "startLine": 1580,
                  "startColumn": 22,
                  "endLine": 1580,
                  "endColumn": 27,
                  "snippet": {
                    "text": "//\n//   // Thread 2\n//   tl.set(150);  // Changes the value for thread 2 only.\n//   EXPECT_EQ(150, tl.get());\n//\n//   // Thread 1\n//   EXPECT_EQ(100, tl.get());  // In thread 1, tl has the original value.\n",
                    "rendered": {
                      "text": "//\n//   // Thread 2\n//   tl.set(150);  // Changes the value for thread 2 only.\n//   EXPECT_EQ(150, tl.get());\n//\n//   // Thread 1\n//   EXPECT_EQ(100, tl.get());  // In thread 1, tl has the original value.\n",
                      "markdown": "`//\n//   // Thread 2\n//   tl.set(150);  // Changes the value for thread 2 only.\n//   EXPECT_EQ(150, tl.get());\n//\n//   // Thread 1\n//   EXPECT_EQ(100, tl.get());  // In thread 1, tl has the original value.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/internal/gtest-port.h"
                },
                "region": {
                  "startLine": 2180,
                  "startColumn": 20,
                  "endLine": 2180,
                  "endColumn": 29,
                  "snippet": {
                    "text": "#elif defined(__BORLANDC__) || defined(__SunOS_5_8) || defined(__SunOS_5_9)\n  // Environment variables which we programmatically clear will be set to the\n  // empty string rather than unset (NULL).  Handle that case.\n  const char* const env = getenv(name);\n  return (env != nullptr && env[0] != '\\0') ? env : nullptr;\n#else\n  return getenv(name);\n",
                    "rendered": {
                      "text": "#elif defined(__BORLANDC__) || defined(__SunOS_5_8) || defined(__SunOS_5_9)\n  // Environment variables which we programmatically clear will be set to the\n  // empty string rather than unset (NULL).  Handle that case.\n  const char* const env = getenv(name);\n  return (env != nullptr && env[0] != '\\0') ? env : nullptr;\n#else\n  return getenv(name);\n",
                      "markdown": "`#elif defined(__BORLANDC__) || defined(__SunOS_5_8) || defined(__SunOS_5_9)\n  // Environment variables which we programmatically clear will be set to the\n  // empty string rather than unset (NULL).  Handle that case.\n  const char* const env = getenv(name);\n  return (env != nullptr && env[0] != '\\0') ? env : nullptr;\n#else\n  return getenv(name);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/internal/gtest-port.h"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 8,
                  "endLine": 259,
                  "endColumn": 31,
                  "snippet": {
                    "text": "//   GetInjectableArgvs() - returns the command line as a vector of strings.\n//\n// Environment variable utilities:\n//   GetEnv()             - gets the value of an environment variable.\n//   BoolFromGTestEnv()   - parses a bool environment variable.\n//   Int32FromGTestEnv()  - parses an int32_t environment variable.\n//   StringFromGTestEnv() - parses a string environment variable.\n",
                    "rendered": {
                      "text": "//   GetInjectableArgvs() - returns the command line as a vector of strings.\n//\n// Environment variable utilities:\n//   GetEnv()             - gets the value of an environment variable.\n//   BoolFromGTestEnv()   - parses a bool environment variable.\n//   Int32FromGTestEnv()  - parses an int32_t environment variable.\n//   StringFromGTestEnv() - parses a string environment variable.\n",
                      "markdown": "`//   GetInjectableArgvs() - returns the command line as a vector of strings.\n//\n// Environment variable utilities:\n//   GetEnv()             - gets the value of an environment variable.\n//   BoolFromGTestEnv()   - parses a bool environment variable.\n//   Int32FromGTestEnv()  - parses an int32_t environment variable.\n//   StringFromGTestEnv() - parses a string environment variable.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/internal/gtest-port.h"
                },
                "region": {
                  "startLine": 2128,
                  "startColumn": 41,
                  "endLine": 2128,
                  "endColumn": 45,
                  "snippet": {
                    "text": "GTEST_DISABLE_MSC_DEPRECATED_PUSH_()\n\n// ChDir(), FReopen(), FDOpen(), Read(), Write(), Close(), and\n// StrError() aren't needed on Windows CE at this time and thus not\n// defined there.\n#if GTEST_HAS_FILE_SYSTEM\n#if !defined(GTEST_OS_WINDOWS_MOBILE) && !defined(GTEST_OS_WINDOWS_PHONE) && \\\n",
                    "rendered": {
                      "text": "GTEST_DISABLE_MSC_DEPRECATED_PUSH_()\n\n// ChDir(), FReopen(), FDOpen(), Read(), Write(), Close(), and\n// StrError() aren't needed on Windows CE at this time and thus not\n// defined there.\n#if GTEST_HAS_FILE_SYSTEM\n#if !defined(GTEST_OS_WINDOWS_MOBILE) && !defined(GTEST_OS_WINDOWS_PHONE) && \\\n",
                      "markdown": "`GTEST_DISABLE_MSC_DEPRECATED_PUSH_()\n\n// ChDir(), FReopen(), FDOpen(), Read(), Write(), Close(), and\n// StrError() aren't needed on Windows CE at this time and thus not\n// defined there.\n#if GTEST_HAS_FILE_SYSTEM\n#if !defined(GTEST_OS_WINDOWS_MOBILE) && !defined(GTEST_OS_WINDOWS_PHONE) && \\\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/internal/gtest-port.h"
                },
                "region": {
                  "startLine": 2181,
                  "startColumn": 45,
                  "endLine": 2181,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  // Environment variables which we programmatically clear will be set to the\n  // empty string rather than unset (NULL).  Handle that case.\n  const char* const env = getenv(name);\n  return (env != nullptr && env[0] != '\\0') ? env : nullptr;\n#else\n  return getenv(name);\n#endif\n",
                    "rendered": {
                      "text": "  // Environment variables which we programmatically clear will be set to the\n  // empty string rather than unset (NULL).  Handle that case.\n  const char* const env = getenv(name);\n  return (env != nullptr && env[0] != '\\0') ? env : nullptr;\n#else\n  return getenv(name);\n#endif\n",
                      "markdown": "`  // Environment variables which we programmatically clear will be set to the\n  // empty string rather than unset (NULL).  Handle that case.\n  const char* const env = getenv(name);\n  return (env != nullptr && env[0] != '\\0') ? env : nullptr;\n#else\n  return getenv(name);\n#endif\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/internal/gtest-port.h"
                },
                "region": {
                  "startLine": 2180,
                  "startColumn": 19,
                  "endLine": 2180,
                  "endColumn": 24,
                  "snippet": {
                    "text": "#elif defined(__BORLANDC__) || defined(__SunOS_5_8) || defined(__SunOS_5_9)\n  // Environment variables which we programmatically clear will be set to the\n  // empty string rather than unset (NULL).  Handle that case.\n  const char* const env = getenv(name);\n  return (env != nullptr && env[0] != '\\0') ? env : nullptr;\n#else\n  return getenv(name);\n",
                    "rendered": {
                      "text": "#elif defined(__BORLANDC__) || defined(__SunOS_5_8) || defined(__SunOS_5_9)\n  // Environment variables which we programmatically clear will be set to the\n  // empty string rather than unset (NULL).  Handle that case.\n  const char* const env = getenv(name);\n  return (env != nullptr && env[0] != '\\0') ? env : nullptr;\n#else\n  return getenv(name);\n",
                      "markdown": "`#elif defined(__BORLANDC__) || defined(__SunOS_5_8) || defined(__SunOS_5_9)\n  // Environment variables which we programmatically clear will be set to the\n  // empty string rather than unset (NULL).  Handle that case.\n  const char* const env = getenv(name);\n  return (env != nullptr && env[0] != '\\0') ? env : nullptr;\n#else\n  return getenv(name);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/include/gtest/internal/gtest-port.h"
                },
                "region": {
                  "startLine": 2128,
                  "startColumn": 49,
                  "endLine": 2128,
                  "endColumn": 55,
                  "snippet": {
                    "text": "GTEST_DISABLE_MSC_DEPRECATED_PUSH_()\n\n// ChDir(), FReopen(), FDOpen(), Read(), Write(), Close(), and\n// StrError() aren't needed on Windows CE at this time and thus not\n// defined there.\n#if GTEST_HAS_FILE_SYSTEM\n#if !defined(GTEST_OS_WINDOWS_MOBILE) && !defined(GTEST_OS_WINDOWS_PHONE) && \\\n",
                    "rendered": {
                      "text": "GTEST_DISABLE_MSC_DEPRECATED_PUSH_()\n\n// ChDir(), FReopen(), FDOpen(), Read(), Write(), Close(), and\n// StrError() aren't needed on Windows CE at this time and thus not\n// defined there.\n#if GTEST_HAS_FILE_SYSTEM\n#if !defined(GTEST_OS_WINDOWS_MOBILE) && !defined(GTEST_OS_WINDOWS_PHONE) && \\\n",
                      "markdown": "`GTEST_DISABLE_MSC_DEPRECATED_PUSH_()\n\n// ChDir(), FReopen(), FDOpen(), Read(), Write(), Close(), and\n// StrError() aren't needed on Windows CE at this time and thus not\n// defined there.\n#if GTEST_HAS_FILE_SYSTEM\n#if !defined(GTEST_OS_WINDOWS_MOBILE) && !defined(GTEST_OS_WINDOWS_PHONE) && \\\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/ci/macos-presubmit.sh"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 1,
                  "endLine": 59,
                  "endColumn": 8,
                  "snippet": {
                    "text": "KOKORO_GFILE_BAZEL_BIN=\"bazel-7.0.0-darwin-x86_64\"\nif [[ ${KOKORO_GFILE_DIR:-} ]] && [[ -f ${KOKORO_GFILE_DIR}/${KOKORO_GFILE_BAZEL_BIN} ]]; then\n  BAZEL_BIN=\"${KOKORO_GFILE_DIR}/${KOKORO_GFILE_BAZEL_BIN}\"\n  chmod +x ${BAZEL_BIN}\nelse\n  BAZEL_BIN=\"bazel\"\nfi\n",
                    "rendered": {
                      "text": "KOKORO_GFILE_BAZEL_BIN=\"bazel-7.0.0-darwin-x86_64\"\nif [[ ${KOKORO_GFILE_DIR:-} ]] && [[ -f ${KOKORO_GFILE_DIR}/${KOKORO_GFILE_BAZEL_BIN} ]]; then\n  BAZEL_BIN=\"${KOKORO_GFILE_DIR}/${KOKORO_GFILE_BAZEL_BIN}\"\n  chmod +x ${BAZEL_BIN}\nelse\n  BAZEL_BIN=\"bazel\"\nfi\n",
                      "markdown": "`KOKORO_GFILE_BAZEL_BIN=\"bazel-7.0.0-darwin-x86_64\"\nif [[ ${KOKORO_GFILE_DIR:-} ]] && [[ -f ${KOKORO_GFILE_DIR}/${KOKORO_GFILE_BAZEL_BIN} ]]; then\n  BAZEL_BIN=\"${KOKORO_GFILE_DIR}/${KOKORO_GFILE_BAZEL_BIN}\"\n  chmod +x ${BAZEL_BIN}\nelse\n  BAZEL_BIN=\"bazel\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/ci/macos-presubmit.sh"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 1,
                  "endLine": 50,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    -Dcxx_no_exception=${cmake_off_on} \\\n    -Dcxx_no_rtti=${cmake_off_on}\n  time make\n  time ctest -j$(nproc) --output-on-failure\ndone\n\n# Test the Bazel build\n",
                    "rendered": {
                      "text": "    -Dcxx_no_exception=${cmake_off_on} \\\n    -Dcxx_no_rtti=${cmake_off_on}\n  time make\n  time ctest -j$(nproc) --output-on-failure\ndone\n\n# Test the Bazel build\n",
                      "markdown": "`    -Dcxx_no_exception=${cmake_off_on} \\\n    -Dcxx_no_rtti=${cmake_off_on}\n  time make\n  time ctest -j$(nproc) --output-on-failure\ndone\n\n# Test the Bazel build\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/ci/macos-presubmit.sh"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 1,
                  "endLine": 49,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    -Dgmock_build_tests=ON \\\n    -Dcxx_no_exception=${cmake_off_on} \\\n    -Dcxx_no_rtti=${cmake_off_on}\n  time make\n  time ctest -j$(nproc) --output-on-failure\ndone\n\n",
                    "rendered": {
                      "text": "    -Dgmock_build_tests=ON \\\n    -Dcxx_no_exception=${cmake_off_on} \\\n    -Dcxx_no_rtti=${cmake_off_on}\n  time make\n  time ctest -j$(nproc) --output-on-failure\ndone\n\n",
                      "markdown": "`    -Dgmock_build_tests=ON \\\n    -Dcxx_no_exception=${cmake_off_on} \\\n    -Dcxx_no_rtti=${cmake_off_on}\n  time make\n  time ctest -j$(nproc) --output-on-failure\ndone\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/ci/macos-presubmit.sh"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 1,
                  "endLine": 42,
                  "endColumn": 7,
                  "snippet": {
                    "text": "for cmake_off_on in OFF ON; do\n  BUILD_DIR=$(mktemp -d build_dir.XXXXXXXX)\n  cd ${BUILD_DIR}\n  time cmake ${GTEST_ROOT} \\\n    -DCMAKE_CXX_STANDARD=14 \\\n    -Dgtest_build_samples=ON \\\n    -Dgtest_build_tests=ON \\\n",
                    "rendered": {
                      "text": "for cmake_off_on in OFF ON; do\n  BUILD_DIR=$(mktemp -d build_dir.XXXXXXXX)\n  cd ${BUILD_DIR}\n  time cmake ${GTEST_ROOT} \\\n    -DCMAKE_CXX_STANDARD=14 \\\n    -Dgtest_build_samples=ON \\\n    -Dgtest_build_tests=ON \\\n",
                      "markdown": "`for cmake_off_on in OFF ON; do\n  BUILD_DIR=$(mktemp -d build_dir.XXXXXXXX)\n  cd ${BUILD_DIR}\n  time cmake ${GTEST_ROOT} \\\n    -DCMAKE_CXX_STANDARD=14 \\\n    -Dgtest_build_samples=ON \\\n    -Dgtest_build_tests=ON \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/ci/linux-presubmit.sh"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 3,
                  "endLine": 118,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# Test Clang\nfor std in ${STD}; do\n  for absl in 0 1; do\n    time docker run \\\n      --volume=\"${GTEST_ROOT}:/src:ro\" \\\n      --workdir=\"/src\" \\\n      --rm \\\n",
                    "rendered": {
                      "text": "# Test Clang\nfor std in ${STD}; do\n  for absl in 0 1; do\n    time docker run \\\n      --volume=\"${GTEST_ROOT}:/src:ro\" \\\n      --workdir=\"/src\" \\\n      --rm \\\n",
                      "markdown": "`# Test Clang\nfor std in ${STD}; do\n  for absl in 0 1; do\n    time docker run \\\n      --volume=\"${GTEST_ROOT}:/src:ro\" \\\n      --workdir=\"/src\" \\\n      --rm \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/ci/linux-presubmit.sh"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 3,
                  "endLine": 94,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# Test GCC\nfor std in ${STD}; do\n  for absl in 0 1; do\n    time docker run \\\n      --volume=\"${GTEST_ROOT}:/src:ro\" \\\n      --workdir=\"/src\" \\\n      --rm \\\n",
                    "rendered": {
                      "text": "# Test GCC\nfor std in ${STD}; do\n  for absl in 0 1; do\n    time docker run \\\n      --volume=\"${GTEST_ROOT}:/src:ro\" \\\n      --workdir=\"/src\" \\\n      --rm \\\n",
                      "markdown": "`# Test GCC\nfor std in ${STD}; do\n  for absl in 0 1; do\n    time docker run \\\n      --volume=\"${GTEST_ROOT}:/src:ro\" \\\n      --workdir=\"/src\" \\\n      --rm \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/ci/linux-presubmit.sh"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 55,
                  "endLine": 73,
                  "endColumn": 5,
                  "snippet": {
                    "text": "# Do one test with an older version of GCC\n# TODO(googletest-team): This currently uses Bazel 5. When upgrading to a\n# version of Bazel that supports Bzlmod, add --enable_bzlmod=false to keep test\n# coverage for the old WORKSPACE dependency management.\ntime docker run \\\n  --volume=\"${GTEST_ROOT}:/src:ro\" \\\n  --workdir=\"/src\" \\\n  --rm \\\n",
                    "rendered": {
                      "text": "# Do one test with an older version of GCC\n# TODO(googletest-team): This currently uses Bazel 5. When upgrading to a\n# version of Bazel that supports Bzlmod, add --enable_bzlmod=false to keep test\n# coverage for the old WORKSPACE dependency management.\ntime docker run \\\n  --volume=\"${GTEST_ROOT}:/src:ro\" \\\n  --workdir=\"/src\" \\\n  --rm \\\n",
                      "markdown": "`# Do one test with an older version of GCC\n# TODO(googletest-team): This currently uses Bazel 5. When upgrading to a\n# version of Bazel that supports Bzlmod, add --enable_bzlmod=false to keep test\n# coverage for the old WORKSPACE dependency management.\ntime docker run \\\n  --volume=\"${GTEST_ROOT}:/src:ro\" \\\n  --workdir=\"/src\" \\\n  --rm \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/ci/linux-presubmit.sh"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 3,
                  "endLine": 48,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# Test the CMake build\nfor cc in /usr/local/bin/gcc /opt/llvm/clang/bin/clang; do\n  for cmake_off_on in OFF ON; do\n    time docker run \\\n      --volume=\"${GTEST_ROOT}:/src:ro\" \\\n      --tmpfs=\"/build:exec\" \\\n      --workdir=\"/build\" \\\n",
                    "rendered": {
                      "text": "# Test the CMake build\nfor cc in /usr/local/bin/gcc /opt/llvm/clang/bin/clang; do\n  for cmake_off_on in OFF ON; do\n    time docker run \\\n      --volume=\"${GTEST_ROOT}:/src:ro\" \\\n      --tmpfs=\"/build:exec\" \\\n      --workdir=\"/build\" \\\n",
                      "markdown": "`# Test the CMake build\nfor cc in /usr/local/bin/gcc /opt/llvm/clang/bin/clang; do\n  for cmake_off_on in OFF ON; do\n    time docker run \\\n      --volume=\"${GTEST_ROOT}:/src:ro\" \\\n      --tmpfs=\"/build:exec\" \\\n      --workdir=\"/build\" \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/actions.md"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 95,
                  "endLine": 19,
                  "endColumn": 99,
                  "snippet": {
                    "text": "| `ReturnPointee(ptr)`              | Return the value pointed to by `ptr`.         |\n| `ReturnRef(variable)`             | Return a reference to `variable`.             |\n| `ReturnRefOfCopy(value)`          | Return a reference to a copy of `value`; the  copy lives as long as the action. |\n| `ReturnRoundRobin({a1, ..., ak})` | Each call will return the next `ai` in the list, starting at the beginning when the end of the list is reached. |\n\n## Side Effects\n\n",
                    "rendered": {
                      "text": "| `ReturnPointee(ptr)`              | Return the value pointed to by `ptr`.         |\n| `ReturnRef(variable)`             | Return a reference to `variable`.             |\n| `ReturnRefOfCopy(value)`          | Return a reference to a copy of `value`; the  copy lives as long as the action. |\n| `ReturnRoundRobin({a1, ..., ak})` | Each call will return the next `ai` in the list, starting at the beginning when the end of the list is reached. |\n\n## Side Effects\n\n",
                      "markdown": "`| `ReturnPointee(ptr)`              | Return the value pointed to by `ptr`.         |\n| `ReturnRef(variable)`             | Return a reference to `variable`.             |\n| `ReturnRefOfCopy(value)`          | Return a reference to a copy of `value`; the  copy lives as long as the action. |\n| `ReturnRoundRobin({a1, ..., ak})` | Each call will return the next `ai` in the list, starting at the beginning when the end of the list is reached. |\n\n## Side Effects\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/reference/actions.md"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 179,
                  "endLine": 12,
                  "endColumn": 185,
                  "snippet": {
                    "text": "-------------------------------- |\n| `Return()`                        | Return from a `void` mock function.           |\n| `Return(value)`                   | Return `value`. If the type of `value` is     different to the mock function's return type, `value` is converted to the latter type <i>at the time the expectation is set</i>, not when the action is executed. |\n| `ReturnArg<N>()`                  | Return the `N`-th (0-based) argument.         |\n| `ReturnNew<T>(a1, ..., ak)`       | Return `new T(a1, ..., ak)`; a different      object is created each time. |\n| `ReturnNull()`                    ",
                    "rendered": {
                      "text": "-------------------------------- |\n| `Return()`                        | Return from a `void` mock function.           |\n| `Return(value)`                   | Return `value`. If the type of `value` is     different to the mock function's return type, `value` is converted to the latter type <i>at the time the expectation is set</i>, not when the action is executed. |\n| `ReturnArg<N>()`                  | Return the `N`-th (0-based) argument.         |\n| `ReturnNew<T>(a1, ..., ak)`       | Return `new T(a1, ..., ak)`; a different      object is created each time. |\n| `ReturnNull()`                    ",
                      "markdown": "`-------------------------------- |\n| `Return()`                        | Return from a `void` mock function.           |\n| `Return(value)`                   | Return `value`. If the type of `value` is     different to the mock function's return type, `value` is converted to the latter type <i>at the time the expectation is set</i>, not when the action is executed. |\n| `ReturnArg<N>()`                  | Return the `N`-th (0-based) argument.         |\n| `ReturnNew<T>(a1, ..., ak)`       | Return `new T(a1, ..., ak)`; a different      object is created each time. |\n| `ReturnNull()`                    `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock_leak_test.py"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 61,
                  "endLine": 44,
                  "endColumn": 69,
                  "snippet": {
                    "text": "environ = gmock_test_utils.environ\nSetEnvVar = gmock_test_utils.SetEnvVar\n\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n",
                    "rendered": {
                      "text": "environ = gmock_test_utils.environ\nSetEnvVar = gmock_test_utils.SetEnvVar\n\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n",
                      "markdown": "`environ = gmock_test_utils.environ\nSetEnvVar = gmock_test_utils.SetEnvVar\n\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/include/gmock/gmock-spec-builders.h"
                },
                "region": {
                  "startLine": 1718,
                  "startColumn": 68,
                  "endLine": 1718,
                  "endColumn": 73,
                  "snippet": {
                    "text": "         << \":\\n\";\n    for (size_t i = 0; i < count; i++) {\n      TypedExpectation<F>* const expectation =\n          static_cast<TypedExpectation<F>*>(untyped_expectations_[i].get());\n      *why << \"\\n\";\n      expectation->DescribeLocationTo(why);\n      if (count > 1) {\n",
                    "rendered": {
                      "text": "         << \":\\n\";\n    for (size_t i = 0; i < count; i++) {\n      TypedExpectation<F>* const expectation =\n          static_cast<TypedExpectation<F>*>(untyped_expectations_[i].get());\n      *why << \"\\n\";\n      expectation->DescribeLocationTo(why);\n      if (count > 1) {\n",
                      "markdown": "`         << \":\\n\";\n    for (size_t i = 0; i < count; i++) {\n      TypedExpectation<F>* const expectation =\n          static_cast<TypedExpectation<F>*>(untyped_expectations_[i].get());\n      *why << \"\\n\";\n      expectation->DescribeLocationTo(why);\n      if (count > 1) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/include/gmock/gmock-spec-builders.h"
                },
                "region": {
                  "startLine": 1583,
                  "startColumn": 65,
                  "endLine": 1583,
                  "endColumn": 70,
                  "snippet": {
                    "text": "    untyped_expectations_.push_back(untyped_expectation);\n\n    // Adds this expectation into the implicit sequence if there is one.\n    Sequence* const implicit_sequence = g_gmock_implicit_sequence.get();\n    if (implicit_sequence != nullptr) {\n      implicit_sequence->AddExpectation(Expectation(untyped_expectation));\n    }\n",
                    "rendered": {
                      "text": "    untyped_expectations_.push_back(untyped_expectation);\n\n    // Adds this expectation into the implicit sequence if there is one.\n    Sequence* const implicit_sequence = g_gmock_implicit_sequence.get();\n    if (implicit_sequence != nullptr) {\n      implicit_sequence->AddExpectation(Expectation(untyped_expectation));\n    }\n",
                      "markdown": "`    untyped_expectations_.push_back(untyped_expectation);\n\n    // Adds this expectation into the implicit sequence if there is one.\n    Sequence* const implicit_sequence = g_gmock_implicit_sequence.get();\n    if (implicit_sequence != nullptr) {\n      implicit_sequence->AddExpectation(Expectation(untyped_expectation));\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/include/gmock/gmock-spec-builders.h"
                },
                "region": {
                  "startLine": 529,
                  "startColumn": 64,
                  "endLine": 529,
                  "endColumn": 69,
                  "snippet": {
                    "text": "  class Less {\n   public:\n    bool operator()(const Expectation& lhs, const Expectation& rhs) const {\n      return lhs.expectation_base_.get() < rhs.expectation_base_.get();\n    }\n  };\n\n",
                    "rendered": {
                      "text": "  class Less {\n   public:\n    bool operator()(const Expectation& lhs, const Expectation& rhs) const {\n      return lhs.expectation_base_.get() < rhs.expectation_base_.get();\n    }\n  };\n\n",
                      "markdown": "`  class Less {\n   public:\n    bool operator()(const Expectation& lhs, const Expectation& rhs) const {\n      return lhs.expectation_base_.get() < rhs.expectation_base_.get();\n    }\n  };\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/include/gmock/gmock-spec-builders.h"
                },
                "region": {
                  "startLine": 529,
                  "startColumn": 34,
                  "endLine": 529,
                  "endColumn": 39,
                  "snippet": {
                    "text": "  class Less {\n   public:\n    bool operator()(const Expectation& lhs, const Expectation& rhs) const {\n      return lhs.expectation_base_.get() < rhs.expectation_base_.get();\n    }\n  };\n\n",
                    "rendered": {
                      "text": "  class Less {\n   public:\n    bool operator()(const Expectation& lhs, const Expectation& rhs) const {\n      return lhs.expectation_base_.get() < rhs.expectation_base_.get();\n    }\n  };\n\n",
                      "markdown": "`  class Less {\n   public:\n    bool operator()(const Expectation& lhs, const Expectation& rhs) const {\n      return lhs.expectation_base_.get() < rhs.expectation_base_.get();\n    }\n  };\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/include/gmock/gmock-spec-builders.h"
                },
                "region": {
                  "startLine": 1640,
                  "startColumn": 44,
                  "endLine": 1640,
                  "endColumn": 53,
                  "snippet": {
                    "text": "  // method in the middle and mess up the state.\n  //\n  // However, performing the action has to be left out of the critical\n  // section.  The reason is that we have no control on what the\n  // action does (it can invoke an arbitrary user function or even a\n  // mock function) and excessive locking could cause a dead lock.\n  const ExpectationBase* UntypedFindMatchingExpectation(\n",
                    "rendered": {
                      "text": "  // method in the middle and mess up the state.\n  //\n  // However, performing the action has to be left out of the critical\n  // section.  The reason is that we have no control on what the\n  // action does (it can invoke an arbitrary user function or even a\n  // mock function) and excessive locking could cause a dead lock.\n  const ExpectationBase* UntypedFindMatchingExpectation(\n",
                      "markdown": "`  // method in the middle and mess up the state.\n  //\n  // However, performing the action has to be left out of the critical\n  // section.  The reason is that we have no control on what the\n  // action does (it can invoke an arbitrary user function or even a\n  // mock function) and excessive locking could cause a dead lock.\n  const ExpectationBase* UntypedFindMatchingExpectation(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/include/gmock/gmock-spec-builders.h"
                },
                "region": {
                  "startLine": 1193,
                  "startColumn": 20,
                  "endLine": 1193,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    const int action_count = static_cast<int>(untyped_actions_.size());\n    if (action_count > 0 && !repeated_action_specified_ &&\n        count > action_count) {\n      // If there is at least one WillOnce() and no WillRepeatedly(),\n      // we warn the user when the WillOnce() clauses ran out.\n      ::std::stringstream ss;\n      DescribeLocationTo(&ss);\n",
                    "rendered": {
                      "text": "    const int action_count = static_cast<int>(untyped_actions_.size());\n    if (action_count > 0 && !repeated_action_specified_ &&\n        count > action_count) {\n      // If there is at least one WillOnce() and no WillRepeatedly(),\n      // we warn the user when the WillOnce() clauses ran out.\n      ::std::stringstream ss;\n      DescribeLocationTo(&ss);\n",
                      "markdown": "`    const int action_count = static_cast<int>(untyped_actions_.size());\n    if (action_count > 0 && !repeated_action_specified_ &&\n        count > action_count) {\n      // If there is at least one WillOnce() and no WillRepeatedly(),\n      // we warn the user when the WillOnce() clauses ran out.\n      ::std::stringstream ss;\n      DescribeLocationTo(&ss);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/include/gmock/gmock-spec-builders.h"
                },
                "region": {
                  "startLine": 1098,
                  "startColumn": 30,
                  "endLine": 1098,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  friend class FunctionMocker;\n\n  // An adaptor that turns a OneAction<F> into something compatible with\n  // Action<F>. Must be called at most once.\n  struct ActionAdaptor {\n    std::shared_ptr<OnceAction<R(Args...)>> once_action;\n\n",
                    "rendered": {
                      "text": "  friend class FunctionMocker;\n\n  // An adaptor that turns a OneAction<F> into something compatible with\n  // Action<F>. Must be called at most once.\n  struct ActionAdaptor {\n    std::shared_ptr<OnceAction<R(Args...)>> once_action;\n\n",
                      "markdown": "`  friend class FunctionMocker;\n\n  // An adaptor that turns a OneAction<F> into something compatible with\n  // Action<F>. Must be called at most once.\n  struct ActionAdaptor {\n    std::shared_ptr<OnceAction<R(Args...)>> once_action;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/include/gmock/gmock-spec-builders.h"
                },
                "region": {
                  "startLine": 856,
                  "startColumn": 65,
                  "endLine": 857,
                  "snippet": {
                    "text": "  // satisfied before this expectation can be matched) of this\n  // expectation.  We use std::shared_ptr in the set because we want an\n  // Expectation object to be co-owned by its FunctionMocker and its\n  // successors.  This allows multiple mock objects to be deleted at\n  // different times.\n  ExpectationSet immediate_prerequisites_;\n\n  // This group of fields are the current state of the expectation,\n",
                    "rendered": {
                      "text": "  // satisfied before this expectation can be matched) of this\n  // expectation.  We use std::shared_ptr in the set because we want an\n  // Expectation object to be co-owned by its FunctionMocker and its\n  // successors.  This allows multiple mock objects to be deleted at\n  // different times.\n  ExpectationSet immediate_prerequisites_;\n\n  // This group of fields are the current state of the expectation,\n",
                      "markdown": "`  // satisfied before this expectation can be matched) of this\n  // expectation.  We use std::shared_ptr in the set because we want an\n  // Expectation object to be co-owned by its FunctionMocker and its\n  // successors.  This allows multiple mock objects to be deleted at\n  // different times.\n  ExpectationSet immediate_prerequisites_;\n\n  // This group of fields are the current state of the expectation,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/include/gmock/gmock-spec-builders.h"
                },
                "region": {
                  "startLine": 299,
                  "startColumn": 32,
                  "endLine": 299,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n  // Implements the .With() clause.\n  OnCallSpec& With(const Matcher<const ArgumentTuple&>& m) {\n    // Makes sure this is called at most once.\n    ExpectSpecProperty(last_clause_ < kWith,\n                       \".With() cannot appear \"\n                       \"more than once in an ON_CALL().\");\n",
                    "rendered": {
                      "text": "\n  // Implements the .With() clause.\n  OnCallSpec& With(const Matcher<const ArgumentTuple&>& m) {\n    // Makes sure this is called at most once.\n    ExpectSpecProperty(last_clause_ < kWith,\n                       \".With() cannot appear \"\n                       \"more than once in an ON_CALL().\");\n",
                      "markdown": "`\n  // Implements the .With() clause.\n  OnCallSpec& With(const Matcher<const ArgumentTuple&>& m) {\n    // Makes sure this is called at most once.\n    ExpectSpecProperty(last_clause_ < kWith,\n                       \".With() cannot appear \"\n                       \"more than once in an ON_CALL().\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/include/gmock/gmock-spec-builders.h"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 57,
                  "endLine": 130,
                  "endColumn": 61,
                  "snippet": {
                    "text": "// The reason we don't use more fine-grained protection is: when a\n// mock function Foo() is called, it needs to consult its expectations\n// to see which one should be picked.  If another thread is allowed to\n// call a mock function (either Foo() or a different one) at the same\n// time, it could affect the \"retired\" attributes of Foo()'s\n// expectations when InSequence() is used, and thus affect which\n// expectation gets picked.  Therefore, we sequence all mock function\n",
                    "rendered": {
                      "text": "// The reason we don't use more fine-grained protection is: when a\n// mock function Foo() is called, it needs to consult its expectations\n// to see which one should be picked.  If another thread is allowed to\n// call a mock function (either Foo() or a different one) at the same\n// time, it could affect the \"retired\" attributes of Foo()'s\n// expectations when InSequence() is used, and thus affect which\n// expectation gets picked.  Therefore, we sequence all mock function\n",
                      "markdown": "`// The reason we don't use more fine-grained protection is: when a\n// mock function Foo() is called, it needs to consult its expectations\n// to see which one should be picked.  If another thread is allowed to\n// call a mock function (either Foo() or a different one) at the same\n// time, it could affect the \"retired\" attributes of Foo()'s\n// expectations when InSequence() is used, and thus affect which\n// expectation gets picked.  Therefore, we sequence all mock function\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/include/gmock/gmock-spec-builders.h"
                },
                "region": {
                  "startLine": 1634,
                  "startColumn": 30,
                  "endLine": 1634,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  // is_excessive is modified to indicate whether the call exceeds the\n  // expected number.\n  //\n  // Critical section: We must find the matching expectation and the\n  // corresponding action that needs to be taken in an ATOMIC\n  // transaction.  Otherwise another thread may call this mock\n  // method in the middle and mess up the state.\n",
                    "rendered": {
                      "text": "  // is_excessive is modified to indicate whether the call exceeds the\n  // expected number.\n  //\n  // Critical section: We must find the matching expectation and the\n  // corresponding action that needs to be taken in an ATOMIC\n  // transaction.  Otherwise another thread may call this mock\n  // method in the middle and mess up the state.\n",
                      "markdown": "`  // is_excessive is modified to indicate whether the call exceeds the\n  // expected number.\n  //\n  // Critical section: We must find the matching expectation and the\n  // corresponding action that needs to be taken in an ATOMIC\n  // transaction.  Otherwise another thread may call this mock\n  // method in the middle and mess up the state.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/include/gmock/gmock-spec-builders.h"
                },
                "region": {
                  "startLine": 388,
                  "startColumn": 46,
                  "endLine": 388,
                  "endColumn": 52,
                  "snippet": {
                    "text": "  // Returns whether the mock was created as a naggy mock (default)\n  static bool IsNaggy(void* mock_obj)\n      GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);\n  // Returns whether the mock was created as a nice mock\n  static bool IsNice(void* mock_obj)\n      GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);\n  // Returns whether the mock was created as a strict mock\n",
                    "rendered": {
                      "text": "  // Returns whether the mock was created as a naggy mock (default)\n  static bool IsNaggy(void* mock_obj)\n      GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);\n  // Returns whether the mock was created as a nice mock\n  static bool IsNice(void* mock_obj)\n      GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);\n  // Returns whether the mock was created as a strict mock\n",
                      "markdown": "`  // Returns whether the mock was created as a naggy mock (default)\n  static bool IsNaggy(void* mock_obj)\n      GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);\n  // Returns whether the mock was created as a nice mock\n  static bool IsNice(void* mock_obj)\n      GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);\n  // Returns whether the mock was created as a strict mock\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest_deps.bzl"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 21,
                  "endLine": 20,
                  "endColumn": 87,
                  "snippet": {
                    "text": "    if not native.existing_rule(\"abseil-cpp\"):\n        http_archive(\n            name = \"abseil-cpp\",\n            sha256 = \"733726b8c3a6d39a4120d7e45ea8b41a434cdacde401cba500f14236c49b39dc\",\n            strip_prefix = \"abseil-cpp-20240116.2\",\n            urls = [\"https://github.com/abseil/abseil-cpp/releases/download/20240116.2/abseil-cpp-20240116.2.tar.gz\"],\n        )\n",
                    "rendered": {
                      "text": "    if not native.existing_rule(\"abseil-cpp\"):\n        http_archive(\n            name = \"abseil-cpp\",\n            sha256 = \"733726b8c3a6d39a4120d7e45ea8b41a434cdacde401cba500f14236c49b39dc\",\n            strip_prefix = \"abseil-cpp-20240116.2\",\n            urls = [\"https://github.com/abseil/abseil-cpp/releases/download/20240116.2/abseil-cpp-20240116.2.tar.gz\"],\n        )\n",
                      "markdown": "`    if not native.existing_rule(\"abseil-cpp\"):\n        http_archive(\n            name = \"abseil-cpp\",\n            sha256 = \"733726b8c3a6d39a4120d7e45ea8b41a434cdacde401cba500f14236c49b39dc\",\n            strip_prefix = \"abseil-cpp-20240116.2\",\n            urls = [\"https://github.com/abseil/abseil-cpp/releases/download/20240116.2/abseil-cpp-20240116.2.tar.gz\"],\n        )\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest_deps.bzl"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 21,
                  "endLine": 12,
                  "endColumn": 87,
                  "snippet": {
                    "text": "    if not native.existing_rule(\"re2\"):\n        http_archive(\n            name = \"re2\",\n            sha256 = \"eb2df807c781601c14a260a507a5bb4509be1ee626024cb45acbd57cb9d4032b\",\n            strip_prefix = \"re2-2024-07-02\",\n            urls = [\"https://github.com/google/re2/releases/download/2024-07-02/re2-2024-07-02.tar.gz\"],\n        )\n",
                    "rendered": {
                      "text": "    if not native.existing_rule(\"re2\"):\n        http_archive(\n            name = \"re2\",\n            sha256 = \"eb2df807c781601c14a260a507a5bb4509be1ee626024cb45acbd57cb9d4032b\",\n            strip_prefix = \"re2-2024-07-02\",\n            urls = [\"https://github.com/google/re2/releases/download/2024-07-02/re2-2024-07-02.tar.gz\"],\n        )\n",
                      "markdown": "`    if not native.existing_rule(\"re2\"):\n        http_archive(\n            name = \"re2\",\n            sha256 = \"eb2df807c781601c14a260a507a5bb4509be1ee626024cb45acbd57cb9d4032b\",\n            strip_prefix = \"re2-2024-07-02\",\n            urls = [\"https://github.com/google/re2/releases/download/2024-07-02/re2-2024-07-02.tar.gz\"],\n        )\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-filter-unittest_.cc"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 10,
                  "endLine": 77,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\nTEST(HasDeathTest, Test1) { EXPECT_DEATH_IF_SUPPORTED(exit(1), \".*\"); }\n\n// We need at least two death tests to make sure that the all death tests\n// aren't on the first shard.\nTEST(HasDeathTest, Test2) { EXPECT_DEATH_IF_SUPPORTED(exit(1), \".*\"); }\n\n",
                    "rendered": {
                      "text": "\nTEST(HasDeathTest, Test1) { EXPECT_DEATH_IF_SUPPORTED(exit(1), \".*\"); }\n\n// We need at least two death tests to make sure that the all death tests\n// aren't on the first shard.\nTEST(HasDeathTest, Test2) { EXPECT_DEATH_IF_SUPPORTED(exit(1), \".*\"); }\n\n",
                      "markdown": "`\nTEST(HasDeathTest, Test1) { EXPECT_DEATH_IF_SUPPORTED(exit(1), \".*\"); }\n\n// We need at least two death tests to make sure that the all death tests\n// aren't on the first shard.\nTEST(HasDeathTest, Test2) { EXPECT_DEATH_IF_SUPPORTED(exit(1), \".*\"); }\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-list-tests-unittest.py"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 30,
                  "endLine": 35,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\"\"\"Unit test for Google Test's --gtest_list_tests flag.\n\nA user can ask Google Test to list all tests by specifying the\n--gtest_list_tests flag.  This script tests such functionality\nby invoking googletest-list-tests-unittest_ (a program written with\nGoogle Test) the command line flags.\n\"\"\"\n",
                    "rendered": {
                      "text": "\"\"\"Unit test for Google Test's --gtest_list_tests flag.\n\nA user can ask Google Test to list all tests by specifying the\n--gtest_list_tests flag.  This script tests such functionality\nby invoking googletest-list-tests-unittest_ (a program written with\nGoogle Test) the command line flags.\n\"\"\"\n",
                      "markdown": "`\"\"\"Unit test for Google Test's --gtest_list_tests flag.\n\nA user can ask Google Test to list all tests by specifying the\n--gtest_list_tests flag.  This script tests such functionality\nby invoking googletest-list-tests-unittest_ (a program written with\nGoogle Test) the command line flags.\n\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-output-test.py"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 29,
                  "endLine": 310,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    output = GetOutputOfAllCommands()\n\n    golden_file = open(GOLDEN_PATH, 'rb')\n    # A mis-configured source control system can cause \\r appear in EOL\n    # sequences when we read the golden file irrespective of an operating\n    # system used. Therefore, we need to strip those \\r's from newlines\n    # unconditionally.\n",
                    "rendered": {
                      "text": "    output = GetOutputOfAllCommands()\n\n    golden_file = open(GOLDEN_PATH, 'rb')\n    # A mis-configured source control system can cause \\r appear in EOL\n    # sequences when we read the golden file irrespective of an operating\n    # system used. Therefore, we need to strip those \\r's from newlines\n    # unconditionally.\n",
                      "markdown": "`    output = GetOutputOfAllCommands()\n\n    golden_file = open(GOLDEN_PATH, 'rb')\n    # A mis-configured source control system can cause \\r appear in EOL\n    # sequences when we read the golden file irrespective of an operating\n    # system used. Therefore, we need to strip those \\r's from newlines\n    # unconditionally.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-output-test.py"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 10,
                  "endLine": 230,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    A string with the command's combined standard and diagnostic output.\n  \"\"\"\n\n  # Spawns cmd in a sub-process, and gets its standard I/O file objects.\n  # Set and save the environment properly.\n  environ = os.environ.copy()\n  environ.update(env_cmd[0])\n",
                    "rendered": {
                      "text": "    A string with the command's combined standard and diagnostic output.\n  \"\"\"\n\n  # Spawns cmd in a sub-process, and gets its standard I/O file objects.\n  # Set and save the environment properly.\n  environ = os.environ.copy()\n  environ.update(env_cmd[0])\n",
                      "markdown": "`    A string with the command's combined standard and diagnostic output.\n  \"\"\"\n\n  # Spawns cmd in a sub-process, and gets its standard I/O file objects.\n  # Set and save the environment properly.\n  environ = os.environ.copy()\n  environ.update(env_cmd[0])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-output-test.py"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 1,
                  "endLine": 62,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nPROGRAM_PATH = gtest_test_utils.GetTestExecutablePath('googletest-output-test_')\n\n# At least one command we exercise must not have the\n# 'internal_skip_environment_and_ad_hoc_tests' argument.\nCOMMAND_LIST_TESTS = ({}, [PROGRAM_PATH, '--gtest_list_tests'])\nCOMMAND_WITH_COLOR = ({}, [PROGRAM_PATH, '--gtest_color=yes'])\n",
                    "rendered": {
                      "text": "\nPROGRAM_PATH = gtest_test_utils.GetTestExecutablePath('googletest-output-test_')\n\n# At least one command we exercise must not have the\n# 'internal_skip_environment_and_ad_hoc_tests' argument.\nCOMMAND_LIST_TESTS = ({}, [PROGRAM_PATH, '--gtest_list_tests'])\nCOMMAND_WITH_COLOR = ({}, [PROGRAM_PATH, '--gtest_color=yes'])\n",
                      "markdown": "`\nPROGRAM_PATH = gtest_test_utils.GetTestExecutablePath('googletest-output-test_')\n\n# At least one command we exercise must not have the\n# 'internal_skip_environment_and_ad_hoc_tests' argument.\nCOMMAND_LIST_TESTS = ({}, [PROGRAM_PATH, '--gtest_list_tests'])\nCOMMAND_WITH_COLOR = ({}, [PROGRAM_PATH, '--gtest_color=yes'])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-output-test.py"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 2,
                  "endLine": 34,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\nr\"\"\"Tests the text output of Google C++ Testing and Mocking Framework.\n\nTo update the golden file:\ngoogletest_output_test.py --build_dir=BUILD/DIR --gengolden\nwhere BUILD/DIR contains the built googletest-output-test_ file.\ngoogletest_output_test.py --gengolden\n",
                    "rendered": {
                      "text": "\nr\"\"\"Tests the text output of Google C++ Testing and Mocking Framework.\n\nTo update the golden file:\ngoogletest_output_test.py --build_dir=BUILD/DIR --gengolden\nwhere BUILD/DIR contains the built googletest-output-test_ file.\ngoogletest_output_test.py --gengolden\n",
                      "markdown": "`\nr\"\"\"Tests the text output of Google C++ Testing and Mocking Framework.\n\nTo update the golden file:\ngoogletest_output_test.py --build_dir=BUILD/DIR --gengolden\nwhere BUILD/DIR contains the built googletest-output-test_ file.\ngoogletest_output_test.py --gengolden\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-output-test.py"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 16,
                  "endLine": 139,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n\ndef RemoveTime(output):\n  \"\"\"Removes all time information from a Google Test program's output.\"\"\"\n\n  return re.sub(r'\\(\\d+ ms', '(? ms', output)\n\n",
                    "rendered": {
                      "text": "\n\ndef RemoveTime(output):\n  \"\"\"Removes all time information from a Google Test program's output.\"\"\"\n\n  return re.sub(r'\\(\\d+ ms', '(? ms', output)\n\n",
                      "markdown": "`\n\ndef RemoveTime(output):\n  \"\"\"Removes all time information from a Google Test program's output.\"\"\"\n\n  return re.sub(r'\\(\\d+ ms', '(? ms', output)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-break-on-failure-unittest.py"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 61,
                  "endLine": 69,
                  "endColumn": 69,
                  "snippet": {
                    "text": "environ = gtest_test_utils.environ\nSetEnvVar = gtest_test_utils.SetEnvVar\n\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n",
                    "rendered": {
                      "text": "environ = gtest_test_utils.environ\nSetEnvVar = gtest_test_utils.SetEnvVar\n\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n",
                      "markdown": "`environ = gtest_test_utils.environ\nSetEnvVar = gtest_test_utils.SetEnvVar\n\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-break-on-failure-unittest.py"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 36,
                  "endLine": 36,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\nA user can ask Google Test to seg-fault when an assertion fails, using\neither the GTEST_BREAK_ON_FAILURE environment variable or the\n--gtest_break_on_failure flag.  This script tests such functionality\nby invoking googletest-break-on-failure-unittest_ (a program written with\nGoogle Test) with different environments and command line flags.\n\"\"\"\n",
                    "rendered": {
                      "text": "\nA user can ask Google Test to seg-fault when an assertion fails, using\neither the GTEST_BREAK_ON_FAILURE environment variable or the\n--gtest_break_on_failure flag.  This script tests such functionality\nby invoking googletest-break-on-failure-unittest_ (a program written with\nGoogle Test) with different environments and command line flags.\n\"\"\"\n",
                      "markdown": "`\nA user can ask Google Test to seg-fault when an assertion fails, using\neither the GTEST_BREAK_ON_FAILURE environment variable or the\n--gtest_break_on_failure flag.  This script tests such functionality\nby invoking googletest-break-on-failure-unittest_ (a program written with\nGoogle Test) with different environments and command line flags.\n\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-json-output-unittest.py"
                },
                "region": {
                  "startLine": 409,
                  "startColumn": 24,
                  "endLine": 409,
                  "endColumn": 76,
                  "snippet": {
                    "text": "                },\n                {\n                    'name': (\n                        'ExternalUtilityThatCallsRecordStringValuedProperty'\n                    ),\n                    'file': 'gtest_xml_output_unittest_.cc',\n                    'line': 157,\n",
                    "rendered": {
                      "text": "                },\n                {\n                    'name': (\n                        'ExternalUtilityThatCallsRecordStringValuedProperty'\n                    ),\n                    'file': 'gtest_xml_output_unittest_.cc',\n                    'line': 157,\n",
                      "markdown": "`                },\n                {\n                    'name': (\n                        'ExternalUtilityThatCallsRecordStringValuedProperty'\n                    ),\n                    'file': 'gtest_xml_output_unittest_.cc',\n                    'line': 157,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-json-output-unittest.py"
                },
                "region": {
                  "startLine": 397,
                  "startColumn": 28,
                  "endLine": 397,
                  "endColumn": 77,
                  "snippet": {
                    "text": "                    'key': '1',\n                },\n                {\n                    'name': 'ExternalUtilityThatCallsRecordIntValuedProperty',\n                    'file': 'gtest_xml_output_unittest_.cc',\n                    'line': 153,\n                    'status': 'RUN',\n",
                    "rendered": {
                      "text": "                    'key': '1',\n                },\n                {\n                    'name': 'ExternalUtilityThatCallsRecordIntValuedProperty',\n                    'file': 'gtest_xml_output_unittest_.cc',\n                    'line': 153,\n                    'status': 'RUN',\n",
                      "markdown": "`                    'key': '1',\n                },\n                {\n                    'name': 'ExternalUtilityThatCallsRecordIntValuedProperty',\n                    'file': 'gtest_xml_output_unittest_.cc',\n                    'line': 153,\n                    'status': 'RUN',\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-json-output-unittest.py"
                },
                "region": {
                  "startLine": 686,
                  "startColumn": 54,
                  "endLine": 687,
                  "snippet": {
                    "text": "    )\n\n    time_delta = abs(datetime.datetime.now() - date_time_from_json)\n    # timestamp value should be near the current local time\n    self.assertTrue(\n        time_delta < datetime.timedelta(seconds=600),\n        'time_delta is %s' % time_delta,\n    )\n",
                    "rendered": {
                      "text": "    )\n\n    time_delta = abs(datetime.datetime.now() - date_time_from_json)\n    # timestamp value should be near the current local time\n    self.assertTrue(\n        time_delta < datetime.timedelta(seconds=600),\n        'time_delta is %s' % time_delta,\n    )\n",
                      "markdown": "`    )\n\n    time_delta = abs(datetime.datetime.now() - date_time_from_json)\n    # timestamp value should be near the current local time\n    self.assertTrue(\n        time_delta < datetime.timedelta(seconds=600),\n        'time_delta is %s' % time_delta,\n    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-failfast-unittest.py"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 39,
                  "endLine": 179,
                  "endColumn": 44,
                  "snippet": {
                    "text": "      SetEnvVar(FAIL_FAST_ENV_VAR, None)\n\n  def testGoogletestEnvVarOverridesBazelEnvVar(self):\n    \"\"\"Tests that the Googletest native env var over Bazel testbridge.\"\"\"\n\n    try:\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, '0')\n",
                    "rendered": {
                      "text": "      SetEnvVar(FAIL_FAST_ENV_VAR, None)\n\n  def testGoogletestEnvVarOverridesBazelEnvVar(self):\n    \"\"\"Tests that the Googletest native env var over Bazel testbridge.\"\"\"\n\n    try:\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, '0')\n",
                      "markdown": "`      SetEnvVar(FAIL_FAST_ENV_VAR, None)\n\n  def testGoogletestEnvVarOverridesBazelEnvVar(self):\n    \"\"\"Tests that the Googletest native env var over Bazel testbridge.\"\"\"\n\n    try:\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, '0')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-failfast-unittest.py"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 36,
                  "endLine": 168,
                  "endColumn": 41,
                  "snippet": {
                    "text": "      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, None)\n\n  def testFlagOverridesEnvVar(self):\n    \"\"\"Tests precedence of flag over env var.\"\"\"\n\n    try:\n      SetEnvVar(FAIL_FAST_ENV_VAR, '0')\n",
                    "rendered": {
                      "text": "      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, None)\n\n  def testFlagOverridesEnvVar(self):\n    \"\"\"Tests precedence of flag over env var.\"\"\"\n\n    try:\n      SetEnvVar(FAIL_FAST_ENV_VAR, '0')\n",
                      "markdown": "`      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, None)\n\n  def testFlagOverridesEnvVar(self):\n    \"\"\"Tests precedence of flag over env var.\"\"\"\n\n    try:\n      SetEnvVar(FAIL_FAST_ENV_VAR, '0')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-failfast-unittest.py"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 64,
                  "endLine": 136,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    self.assertNotIn('[  SKIPPED ]', txt)\n\n  def testGoogletestEnvVar(self):\n    \"\"\"Tests the behavior of specifying fail_fast via Googletest env var.\"\"\"\n\n    try:\n      SetEnvVar(FAIL_FAST_ENV_VAR, '1')\n",
                    "rendered": {
                      "text": "    self.assertNotIn('[  SKIPPED ]', txt)\n\n  def testGoogletestEnvVar(self):\n    \"\"\"Tests the behavior of specifying fail_fast via Googletest env var.\"\"\"\n\n    try:\n      SetEnvVar(FAIL_FAST_ENV_VAR, '1')\n",
                      "markdown": "`    self.assertNotIn('[  SKIPPED ]', txt)\n\n  def testGoogletestEnvVar(self):\n    \"\"\"Tests the behavior of specifying fail_fast via Googletest env var.\"\"\"\n\n    try:\n      SetEnvVar(FAIL_FAST_ENV_VAR, '1')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-failfast-unittest.py"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 14,
                  "endLine": 118,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n# The unit test.\nclass GTestFailFastUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests the env variable or the command line flag for fail_fast.\"\"\"\n\n  def testDefaultBehavior(self):\n    \"\"\"Tests the behavior of not specifying the fail_fast.\"\"\"\n",
                    "rendered": {
                      "text": "\n# The unit test.\nclass GTestFailFastUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests the env variable or the command line flag for fail_fast.\"\"\"\n\n  def testDefaultBehavior(self):\n    \"\"\"Tests the behavior of not specifying the fail_fast.\"\"\"\n",
                      "markdown": "`\n# The unit test.\nclass GTestFailFastUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests the env variable or the command line flag for fail_fast.\"\"\"\n\n  def testDefaultBehavior(self):\n    \"\"\"Tests the behavior of not specifying the fail_fast.\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-failfast-unittest.py"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 13,
                  "endLine": 84,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n\n  if value is not None:\n    environ[env_var] = value\n",
                    "rendered": {
                      "text": "\n\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n\n  if value is not None:\n    environ[env_var] = value\n",
                      "markdown": "`\n\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n\n  if value is not None:\n    environ[env_var] = value\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/googletest-failfast-unittest.py"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 4,
                  "endLine": 38,
                  "endColumn": 12,
                  "snippet": {
                    "text": "--gtest_fail_fast flag. The default value of the flag can also be changed\nby Bazel fail fast environment variable TESTBRIDGE_TEST_RUNNER_FAIL_FAST.\n\nThis script tests such functionality by invoking googletest-failfast-unittest_\n(a program written with Google Test) with different environments and command\nline flags.\n\"\"\"\n",
                    "rendered": {
                      "text": "--gtest_fail_fast flag. The default value of the flag can also be changed\nby Bazel fail fast environment variable TESTBRIDGE_TEST_RUNNER_FAIL_FAST.\n\nThis script tests such functionality by invoking googletest-failfast-unittest_\n(a program written with Google Test) with different environments and command\nline flags.\n\"\"\"\n",
                      "markdown": "`--gtest_fail_fast flag. The default value of the flag can also be changed\nby Bazel fail fast environment variable TESTBRIDGE_TEST_RUNNER_FAIL_FAST.\n\nThis script tests such functionality by invoking googletest-failfast-unittest_\n(a program written with Google Test) with different environments and command\nline flags.\n\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/test/gtest_skip_check_output_test.py"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 4,
                  "endLine": 32,
                  "endColumn": 12,
                  "snippet": {
                    "text": "# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\"\"\"Tests Google Test's gtest skip in environment setup  behavior.\n\nThis script invokes gtest_skip_in_environment_setup_test_ and verifies its\noutput.\n\"\"\"\n\n",
                    "rendered": {
                      "text": "# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\"\"\"Tests Google Test's gtest skip in environment setup  behavior.\n\nThis script invokes gtest_skip_in_environment_setup_test_ and verifies its\noutput.\n\"\"\"\n\n",
                      "markdown": "`# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\"\"\"Tests Google Test's gtest skip in environment setup  behavior.\n\nThis script invokes gtest_skip_in_environment_setup_test_ and verifies its\noutput.\n\"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/faq.md"
                },
                "region": {
                  "startLine": 612,
                  "startColumn": 50,
                  "endLine": 612,
                  "endColumn": 54,
                  "snippet": {
                    "text": "In general, the recommended way to cause the code to behave differently under\ntest is [Dependency Injection](https://en.wikipedia.org/wiki/Dependency_injection). You can inject\ndifferent functionality from the test and from the production code. Since your\nproduction code doesn't link in the for-test logic at all (the\n[`testonly`](https://docs.bazel.build/versions/master/be/common-definitions.html#common.testonly) attribute for BUILD targets helps to ensure\nthat), there is no danger in accidentally running it.\n\n",
                    "rendered": {
                      "text": "In general, the recommended way to cause the code to behave differently under\ntest is [Dependency Injection](https://en.wikipedia.org/wiki/Dependency_injection). You can inject\ndifferent functionality from the test and from the production code. Since your\nproduction code doesn't link in the for-test logic at all (the\n[`testonly`](https://docs.bazel.build/versions/master/be/common-definitions.html#common.testonly) attribute for BUILD targets helps to ensure\nthat), there is no danger in accidentally running it.\n\n",
                      "markdown": "`In general, the recommended way to cause the code to behave differently under\ntest is [Dependency Injection](https://en.wikipedia.org/wiki/Dependency_injection). You can inject\ndifferent functionality from the test and from the production code. Since your\nproduction code doesn't link in the for-test logic at all (the\n[`testonly`](https://docs.bazel.build/versions/master/be/common-definitions.html#common.testonly) attribute for BUILD targets helps to ensure\nthat), there is no danger in accidentally running it.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/faq.md"
                },
                "region": {
                  "startLine": 594,
                  "startColumn": 70,
                  "endLine": 594,
                  "endColumn": 74,
                  "snippet": {
                    "text": "## How do I suppress the memory leak messages on Windows?\n\nSince the statically initialized GoogleTest singleton requires allocations on\nthe heap, the Visual C++ memory leak detector will report memory leaks at the\nend of the program run. The easiest way to avoid this is to use the\n`_CrtMemCheckpoint` and `_CrtMemDumpAllObjectsSince` calls to not report any\nstatically initialized heap objects. See MSDN for more details and additional\n",
                    "rendered": {
                      "text": "## How do I suppress the memory leak messages on Windows?\n\nSince the statically initialized GoogleTest singleton requires allocations on\nthe heap, the Visual C++ memory leak detector will report memory leaks at the\nend of the program run. The easiest way to avoid this is to use the\n`_CrtMemCheckpoint` and `_CrtMemDumpAllObjectsSince` calls to not report any\nstatically initialized heap objects. See MSDN for more details and additional\n",
                      "markdown": "`## How do I suppress the memory leak messages on Windows?\n\nSince the statically initialized GoogleTest singleton requires allocations on\nthe heap, the Visual C++ memory leak detector will report memory leaks at the\nend of the program run. The easiest way to avoid this is to use the\n`_CrtMemCheckpoint` and `_CrtMemDumpAllObjectsSince` calls to not report any\nstatically initialized heap objects. See MSDN for more details and additional\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/faq.md"
                },
                "region": {
                  "startLine": 524,
                  "startColumn": 46,
                  "endLine": 524,
                  "endColumn": 55,
                  "snippet": {
                    "text": "means you cannot safely run a death test.\n\nThe new NPTL thread library doesn't suffer from this problem, as it doesn't\ncreate a manager thread. However, if you don't control which machine your test\nruns on, you shouldn't depend on this.\n\n## Why does GoogleTest require the entire test suite, instead of individual tests, to be named `*DeathTest` when it uses `ASSERT_DEATH`?\n",
                    "rendered": {
                      "text": "means you cannot safely run a death test.\n\nThe new NPTL thread library doesn't suffer from this problem, as it doesn't\ncreate a manager thread. However, if you don't control which machine your test\nruns on, you shouldn't depend on this.\n\n## Why does GoogleTest require the entire test suite, instead of individual tests, to be named `*DeathTest` when it uses `ASSERT_DEATH`?\n",
                      "markdown": "`means you cannot safely run a death test.\n\nThe new NPTL thread library doesn't suffer from this problem, as it doesn't\ncreate a manager thread. However, if you don't control which machine your test\nruns on, you shouldn't depend on this.\n\n## Why does GoogleTest require the entire test suite, instead of individual tests, to be named `*DeathTest` when it uses `ASSERT_DEATH`?\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/faq.md"
                },
                "region": {
                  "startLine": 489,
                  "startColumn": 18,
                  "endLine": 489,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n// A death assertion can contain a compound statement.\nTEST(MyDeathTest, CompoundStatement) {\n  // Verifies that at lease one of Bar(0), Bar(1), ..., and\n  // Bar(4) dies.\n  ASSERT_DEATH({\n    for (int i = 0; i < 5; i++) {\n",
                    "rendered": {
                      "text": "\n// A death assertion can contain a compound statement.\nTEST(MyDeathTest, CompoundStatement) {\n  // Verifies that at lease one of Bar(0), Bar(1), ..., and\n  // Bar(4) dies.\n  ASSERT_DEATH({\n    for (int i = 0; i < 5; i++) {\n",
                      "markdown": "`\n// A death assertion can contain a compound statement.\nTEST(MyDeathTest, CompoundStatement) {\n  // Verifies that at lease one of Bar(0), Bar(1), ..., and\n  // Bar(4) dies.\n  ASSERT_DEATH({\n    for (int i = 0; i < 5; i++) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/faq.md"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 72,
                  "endLine": 303,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    constructor is guaranteed to call the base class' constructor *first*, and\n    the subclass' destructor is guaranteed to call the base class' destructor\n    *afterward*. With `SetUp()/TearDown()`, a subclass may make the mistake of\n    forgetting to call the base class' `SetUp()/TearDown()` or call them at the\n    wrong time.\n\nYou may still want to use `SetUp()/TearDown()` in the following cases:\n",
                    "rendered": {
                      "text": "    constructor is guaranteed to call the base class' constructor *first*, and\n    the subclass' destructor is guaranteed to call the base class' destructor\n    *afterward*. With `SetUp()/TearDown()`, a subclass may make the mistake of\n    forgetting to call the base class' `SetUp()/TearDown()` or call them at the\n    wrong time.\n\nYou may still want to use `SetUp()/TearDown()` in the following cases:\n",
                      "markdown": "`    constructor is guaranteed to call the base class' constructor *first*, and\n    the subclass' destructor is guaranteed to call the base class' destructor\n    *afterward*. With `SetUp()/TearDown()`, a subclass may make the mistake of\n    forgetting to call the base class' `SetUp()/TearDown()` or call them at the\n    wrong time.\n\nYou may still want to use `SetUp()/TearDown()` in the following cases:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/faq.md"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 11,
                  "endLine": 262,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\nIn GoogleTest, death tests are run in a child process and the way they work is\ndelicate. To write death tests you really need to understand how they work—see\nthe details at [Death Assertions](reference/assertions.md#death) in the\nAssertions Reference.\n\nIn particular, death tests don't like having multiple threads in the parent\n",
                    "rendered": {
                      "text": "\nIn GoogleTest, death tests are run in a child process and the way they work is\ndelicate. To write death tests you really need to understand how they work—see\nthe details at [Death Assertions](reference/assertions.md#death) in the\nAssertions Reference.\n\nIn particular, death tests don't like having multiple threads in the parent\n",
                      "markdown": "`\nIn GoogleTest, death tests are run in a child process and the way they work is\ndelicate. To write death tests you really need to understand how they work—see\nthe details at [Death Assertions](reference/assertions.md#death) in the\nAssertions Reference.\n\nIn particular, death tests don't like having multiple threads in the parent\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/faq.md"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 14,
                  "endLine": 19,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\nUser code is *prohibited* from using such identifiers.\n\nNow let's look at what this means for `TEST` and `TEST_F`.\n\nCurrently `TEST(TestSuiteName, TestName)` generates a class named\n`TestSuiteName_TestName_Test`. What happens if `TestSuiteName` or `TestName`\n",
                    "rendered": {
                      "text": "\nUser code is *prohibited* from using such identifiers.\n\nNow let's look at what this means for `TEST` and `TEST_F`.\n\nCurrently `TEST(TestSuiteName, TestName)` generates a class named\n`TestSuiteName_TestName_Test`. What happens if `TestSuiteName` or `TestName`\n",
                      "markdown": "`\nUser code is *prohibited* from using such identifiers.\n\nNow let's look at what this means for `TEST` and `TEST_F`.\n\nCurrently `TEST(TestSuiteName, TestName)` generates a class named\n`TestSuiteName_TestName_Test`. What happens if `TestSuiteName` or `TestName`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/faq.md"
                },
                "region": {
                  "startLine": 517,
                  "startColumn": 51,
                  "endLine": 517,
                  "endColumn": 57,
                  "snippet": {
                    "text": "## Why does ASSERT_DEATH complain about previous threads that were already joined?\n\nWith the Linux pthread library, there is no turning back once you cross the line\nfrom a single thread to multiple threads. The first time you create a thread, a\nmanager thread is created in addition, so you get 3, not 2, threads. Later when\nthe thread you create joins the main thread, the thread count decrements by 1,\nbut the manager thread will never be killed, so you still have 2 threads, which\n",
                    "rendered": {
                      "text": "## Why does ASSERT_DEATH complain about previous threads that were already joined?\n\nWith the Linux pthread library, there is no turning back once you cross the line\nfrom a single thread to multiple threads. The first time you create a thread, a\nmanager thread is created in addition, so you get 3, not 2, threads. Later when\nthe thread you create joins the main thread, the thread count decrements by 1,\nbut the manager thread will never be killed, so you still have 2 threads, which\n",
                      "markdown": "`## Why does ASSERT_DEATH complain about previous threads that were already joined?\n\nWith the Linux pthread library, there is no turning back once you cross the line\nfrom a single thread to multiple threads. The first time you create a thread, a\nmanager thread is created in addition, so you get 3, not 2, threads. Later when\nthe thread you create joins the main thread, the thread count decrements by 1,\nbut the manager thread will never be killed, so you still have 2 threads, which\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/quickstart-cmake.md"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 21,
                  "endLine": 55,
                  "endColumn": 25,
                  "snippet": {
                    "text": "cmake_minimum_required(VERSION 3.14)\nproject(my_project)\n\n# GoogleTest requires at least C++14\nset(CMAKE_CXX_STANDARD 14)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n",
                    "rendered": {
                      "text": "cmake_minimum_required(VERSION 3.14)\nproject(my_project)\n\n# GoogleTest requires at least C++14\nset(CMAKE_CXX_STANDARD 14)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n",
                      "markdown": "`cmake_minimum_required(VERSION 3.14)\nproject(my_project)\n\n# GoogleTest requires at least C++14\nset(CMAKE_CXX_STANDARD 14)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/quickstart-cmake.md"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 43,
                  "endLine": 13,
                  "endColumn": 47,
                  "snippet": {
                    "text": "To complete this tutorial, you'll need:\n\n*   A compatible operating system (e.g. Linux, macOS, Windows).\n*   A compatible C++ compiler that supports at least C++14.\n*   [CMake](https://cmake.org/) and a compatible build tool for building the\n    project.\n    *   Compatible build tools include\n",
                    "rendered": {
                      "text": "To complete this tutorial, you'll need:\n\n*   A compatible operating system (e.g. Linux, macOS, Windows).\n*   A compatible C++ compiler that supports at least C++14.\n*   [CMake](https://cmake.org/) and a compatible build tool for building the\n    project.\n    *   Compatible build tools include\n",
                      "markdown": "`To complete this tutorial, you'll need:\n\n*   A compatible operating system (e.g. Linux, macOS, Windows).\n*   A compatible C++ compiler that supports at least C++14.\n*   [CMake](https://cmake.org/) and a compatible build tool for building the\n    project.\n    *   Compatible build tools include\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/quickstart-cmake.md"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 10,
                  "endLine": 146,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n100% tests passed, 0 tests failed out of 1\n\nTotal Test time (real) =   0.01 sec\n</pre>\n\nCongratulations! You've successfully built and run a test binary using\n",
                    "rendered": {
                      "text": "\n100% tests passed, 0 tests failed out of 1\n\nTotal Test time (real) =   0.01 sec\n</pre>\n\nCongratulations! You've successfully built and run a test binary using\n",
                      "markdown": "`\n100% tests passed, 0 tests failed out of 1\n\nTotal Test time (real) =   0.01 sec\n</pre>\n\nCongratulations! You've successfully built and run a test binary using\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/quickstart-cmake.md"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 4,
                  "endLine": 92,
                  "endColumn": 12,
                  "snippet": {
                    "text": "TEST(HelloTest, BasicAssertions) {\n  // Expect two strings not to be equal.\n  EXPECT_STRNE(\"hello\", \"world\");\n  // Expect equality.\n  EXPECT_EQ(7 * 6, 42);\n}\n```\n",
                    "rendered": {
                      "text": "TEST(HelloTest, BasicAssertions) {\n  // Expect two strings not to be equal.\n  EXPECT_STRNE(\"hello\", \"world\");\n  // Expect equality.\n  EXPECT_EQ(7 * 6, 42);\n}\n```\n",
                      "markdown": "`TEST(HelloTest, BasicAssertions) {\n  // Expect two strings not to be equal.\n  EXPECT_STRNE(\"hello\", \"world\");\n  // Expect equality.\n  EXPECT_EQ(7 * 6, 42);\n}\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/quickstart-cmake.md"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 4,
                  "endLine": 90,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n// Demonstrate some basic assertions.\nTEST(HelloTest, BasicAssertions) {\n  // Expect two strings not to be equal.\n  EXPECT_STRNE(\"hello\", \"world\");\n  // Expect equality.\n  EXPECT_EQ(7 * 6, 42);\n",
                    "rendered": {
                      "text": "\n// Demonstrate some basic assertions.\nTEST(HelloTest, BasicAssertions) {\n  // Expect two strings not to be equal.\n  EXPECT_STRNE(\"hello\", \"world\");\n  // Expect equality.\n  EXPECT_EQ(7 * 6, 42);\n",
                      "markdown": "`\n// Demonstrate some basic assertions.\nTEST(HelloTest, BasicAssertions) {\n  // Expect two strings not to be equal.\n  EXPECT_STRNE(\"hello\", \"world\");\n  // Expect equality.\n  EXPECT_EQ(7 * 6, 42);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/quickstart-cmake.md"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 3,
                  "endLine": 71,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nThe above configuration declares a dependency on GoogleTest which is downloaded\nfrom GitHub. In the above example, `03597a01ee50ed33e9dfd640b249b4be3799d395` is\nthe Git commit hash of the GoogleTest version to use; we recommend updating the\nhash often to point to the latest version.\n\nFor more information about how to create `CMakeLists.txt` files, see the\n",
                    "rendered": {
                      "text": "\nThe above configuration declares a dependency on GoogleTest which is downloaded\nfrom GitHub. In the above example, `03597a01ee50ed33e9dfd640b249b4be3799d395` is\nthe Git commit hash of the GoogleTest version to use; we recommend updating the\nhash often to point to the latest version.\n\nFor more information about how to create `CMakeLists.txt` files, see the\n",
                      "markdown": "`\nThe above configuration declares a dependency on GoogleTest which is downloaded\nfrom GitHub. In the above example, `03597a01ee50ed33e9dfd640b249b4be3799d395` is\nthe Git commit hash of the GoogleTest version to use; we recommend updating the\nhash often to point to the latest version.\n\nFor more information about how to create `CMakeLists.txt` files, see the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/quickstart-cmake.md"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 37,
                  "endLine": 4,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# Quickstart: Building with CMake\n\nThis tutorial aims to get you up and running with GoogleTest using CMake. If\nyou're using GoogleTest for the first time or need a refresher, we recommend\nthis tutorial as a starting point. If your project uses Bazel, see the\n[Quickstart for Bazel](quickstart-bazel.md) instead.\n\n",
                    "rendered": {
                      "text": "# Quickstart: Building with CMake\n\nThis tutorial aims to get you up and running with GoogleTest using CMake. If\nyou're using GoogleTest for the first time or need a refresher, we recommend\nthis tutorial as a starting point. If your project uses Bazel, see the\n[Quickstart for Bazel](quickstart-bazel.md) instead.\n\n",
                      "markdown": "`# Quickstart: Building with CMake\n\nThis tutorial aims to get you up and running with GoogleTest using CMake. If\nyou're using GoogleTest for the first time or need a refresher, we recommend\nthis tutorial as a starting point. If your project uses Bazel, see the\n[Quickstart for Bazel](quickstart-bazel.md) instead.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cheat_sheet.md"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 69,
                  "endLine": 49,
                  "endColumn": 75,
                  "snippet": {
                    "text": "```\n\n{: .callout .note}\n**Note:** A mock object is currently naggy by default. We may make it nice by\ndefault in the future.\n\n### Mocking a Class Template {#MockTemplate}\n",
                    "rendered": {
                      "text": "```\n\n{: .callout .note}\n**Note:** A mock object is currently naggy by default. We may make it nice by\ndefault in the future.\n\n### Mocking a Class Template {#MockTemplate}\n",
                      "markdown": "````\n\n{: .callout .note}\n**Note:** A mock object is currently naggy by default. We may make it nice by\ndefault in the future.\n\n### Mocking a Class Template {#MockTemplate}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 1996,
                  "startColumn": 4,
                  "endLine": 1996,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    of the shard. Different shards must be assigned different indices, which\n    must be in the range `[0, GTEST_TOTAL_SHARDS - 1]`.\n1.  Run the same test program on all shards. When GoogleTest sees the above two\n    environment variables, it will select a subset of the test functions to run.\n    Across all shards, each test function in the program will be run exactly\n    once.\n1.  Wait for all shards to finish, then collect and report the results.\n",
                    "rendered": {
                      "text": "    of the shard. Different shards must be assigned different indices, which\n    must be in the range `[0, GTEST_TOTAL_SHARDS - 1]`.\n1.  Run the same test program on all shards. When GoogleTest sees the above two\n    environment variables, it will select a subset of the test functions to run.\n    Across all shards, each test function in the program will be run exactly\n    once.\n1.  Wait for all shards to finish, then collect and report the results.\n",
                      "markdown": "`    of the shard. Different shards must be assigned different indices, which\n    must be in the range `[0, GTEST_TOTAL_SHARDS - 1]`.\n1.  Run the same test program on all shards. When GoogleTest sees the above two\n    environment variables, it will select a subset of the test functions to run.\n    Across all shards, each test function in the program will be run exactly\n    once.\n1.  Wait for all shards to finish, then collect and report the results.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 1001,
                  "startColumn": 37,
                  "endLine": 1001,
                  "endColumn": 56,
                  "snippet": {
                    "text": "```\n\nThen, you register an instance of your environment class with GoogleTest by\ncalling the `::testing::AddGlobalTestEnvironment()` function:\n\n```c++\nEnvironment* AddGlobalTestEnvironment(Environment* env);\n",
                    "rendered": {
                      "text": "```\n\nThen, you register an instance of your environment class with GoogleTest by\ncalling the `::testing::AddGlobalTestEnvironment()` function:\n\n```c++\nEnvironment* AddGlobalTestEnvironment(Environment* env);\n",
                      "markdown": "````\n\nThen, you register an instance of your environment class with GoogleTest by\ncalling the `::testing::AddGlobalTestEnvironment()` function:\n\n```c++\nEnvironment* AddGlobalTestEnvironment(Environment* env);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 581,
                  "startColumn": 45,
                  "endLine": 581,
                  "endColumn": 71,
                  "snippet": {
                    "text": "### Death Test Styles\n\nThe \"threadsafe\" death test style was introduced in order to help mitigate the\nrisks of testing in a possibly multithreaded environment. It trades increased\ntest execution time (potentially dramatically so) for improved thread safety.\n\nThe automated testing framework does not set the style flag. You can choose a\n",
                    "rendered": {
                      "text": "### Death Test Styles\n\nThe \"threadsafe\" death test style was introduced in order to help mitigate the\nrisks of testing in a possibly multithreaded environment. It trades increased\ntest execution time (potentially dramatically so) for improved thread safety.\n\nThe automated testing framework does not set the style flag. You can choose a\n",
                      "markdown": "`### Death Test Styles\n\nThe \"threadsafe\" death test style was introduced in order to help mitigate the\nrisks of testing in a possibly multithreaded environment. It trades increased\ntest execution time (potentially dramatically so) for improved thread safety.\n\nThe automated testing framework does not set the style flag. You can choose a\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 2176,
                  "startColumn": 15,
                  "endLine": 2176,
                  "endColumn": 19,
                  "snippet": {
                    "text": "GoogleTest can also emit a JSON report as an alternative format to XML. To\ngenerate the JSON report, set the `GTEST_OUTPUT` environment variable or the\n`--gtest_output` flag to the string `\"json:path_to_output_file\"`, which will\ncreate the file at the given location. You can also just use the string\n`\"json\"`, in which case the output can be found in the `test_detail.json` file\nin the current directory.\n\n",
                    "rendered": {
                      "text": "GoogleTest can also emit a JSON report as an alternative format to XML. To\ngenerate the JSON report, set the `GTEST_OUTPUT` environment variable or the\n`--gtest_output` flag to the string `\"json:path_to_output_file\"`, which will\ncreate the file at the given location. You can also just use the string\n`\"json\"`, in which case the output can be found in the `test_detail.json` file\nin the current directory.\n\n",
                      "markdown": "`GoogleTest can also emit a JSON report as an alternative format to XML. To\ngenerate the JSON report, set the `GTEST_OUTPUT` environment variable or the\n`--gtest_output` flag to the string `\"json:path_to_output_file\"`, which will\ncreate the file at the given location. You can also just use the string\n`\"json\"`, in which case the output can be found in the `test_detail.json` file\nin the current directory.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 2094,
                  "startColumn": 15,
                  "endLine": 2094,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\nTo generate the XML report, set the `GTEST_OUTPUT` environment variable or the\n`--gtest_output` flag to the string `\"xml:path_to_output_file\"`, which will\ncreate the file at the given location. You can also just use the string `\"xml\"`,\nin which case the output can be found in the `test_detail.xml` file in the\ncurrent directory.\n\n",
                    "rendered": {
                      "text": "\nTo generate the XML report, set the `GTEST_OUTPUT` environment variable or the\n`--gtest_output` flag to the string `\"xml:path_to_output_file\"`, which will\ncreate the file at the given location. You can also just use the string `\"xml\"`,\nin which case the output can be found in the `test_detail.xml` file in the\ncurrent directory.\n\n",
                      "markdown": "`\nTo generate the XML report, set the `GTEST_OUTPUT` environment variable or the\n`--gtest_output` flag to the string `\"xml:path_to_output_file\"`, which will\ncreate the file at the given location. You can also just use the string `\"xml\"`,\nin which case the output can be found in the `test_detail.xml` file in the\ncurrent directory.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 2020,
                  "startColumn": 27,
                  "endLine": 2020,
                  "endColumn": 31,
                  "snippet": {
                    "text": "TEST(B, Z)\n```\n\nSuppose you have 3 machines at your disposal. To run the test functions in\nparallel, you would set `GTEST_TOTAL_SHARDS` to 3 on all machines, and set\n`GTEST_SHARD_INDEX` to 0, 1, and 2 on the machines respectively. Then you would\nrun the same `foo_test` on each machine.\n",
                    "rendered": {
                      "text": "TEST(B, Z)\n```\n\nSuppose you have 3 machines at your disposal. To run the test functions in\nparallel, you would set `GTEST_TOTAL_SHARDS` to 3 on all machines, and set\n`GTEST_SHARD_INDEX` to 0, 1, and 2 on the machines respectively. Then you would\nrun the same `foo_test` on each machine.\n",
                      "markdown": "`TEST(B, Z)\n```\n\nSuppose you have 3 machines at your disposal. To run the test functions in\nparallel, you would set `GTEST_TOTAL_SHARDS` to 3 on all machines, and set\n`GTEST_SHARD_INDEX` to 0, 1, and 2 on the machines respectively. Then you would\nrun the same `foo_test` on each machine.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 2006,
                  "startColumn": 38,
                  "endLine": 2006,
                  "endColumn": 42,
                  "snippet": {
                    "text": "supports sharding, it can set the environment variable `GTEST_SHARD_STATUS_FILE`\nto a non-existent file path. If a test program supports sharding, it will create\nthis file to acknowledge that fact; otherwise it will not create it. The actual\ncontents of the file are not important at this time, although we may put some\nuseful information in it in the future.\n\nHere's an example to make it clear. Suppose you have a test program `foo_test`\n",
                    "rendered": {
                      "text": "supports sharding, it can set the environment variable `GTEST_SHARD_STATUS_FILE`\nto a non-existent file path. If a test program supports sharding, it will create\nthis file to acknowledge that fact; otherwise it will not create it. The actual\ncontents of the file are not important at this time, although we may put some\nuseful information in it in the future.\n\nHere's an example to make it clear. Suppose you have a test program `foo_test`\n",
                      "markdown": "`supports sharding, it can set the environment variable `GTEST_SHARD_STATUS_FILE`\nto a non-existent file path. If a test program supports sharding, it will create\nthis file to acknowledge that fact; otherwise it will not create it. The actual\ncontents of the file are not important at this time, although we may put some\nuseful information in it in the future.\n\nHere's an example to make it clear. Suppose you have a test program `foo_test`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 1944,
                  "startColumn": 36,
                  "endLine": 1944,
                  "endColumn": 40,
                  "snippet": {
                    "text": "A negative count means repeating forever.\n\n$ foo_test --gtest_repeat=1000 --gtest_break_on_failure\nRepeat foo_test 1000 times, stopping at the first failure.  This\nis especially useful when running under a debugger: when the test\nfails, it will drop into the debugger and you can then inspect\nvariables and stacks.\n",
                    "rendered": {
                      "text": "A negative count means repeating forever.\n\n$ foo_test --gtest_repeat=1000 --gtest_break_on_failure\nRepeat foo_test 1000 times, stopping at the first failure.  This\nis especially useful when running under a debugger: when the test\nfails, it will drop into the debugger and you can then inspect\nvariables and stacks.\n",
                      "markdown": "`A negative count means repeating forever.\n\n$ foo_test --gtest_repeat=1000 --gtest_break_on_failure\nRepeat foo_test 1000 times, stopping at the first failure.  This\nis especially useful when running under a debugger: when the test\nfails, it will drop into the debugger and you can then inspect\nvariables and stacks.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 1938,
                  "startColumn": 41,
                  "endLine": 1938,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n```none\n$ foo_test --gtest_repeat=1000\nRepeat foo_test 1000 times and don't stop at failures.\n\n$ foo_test --gtest_repeat=-1\nA negative count means repeating forever.\n",
                    "rendered": {
                      "text": "\n```none\n$ foo_test --gtest_repeat=1000\nRepeat foo_test 1000 times and don't stop at failures.\n\n$ foo_test --gtest_repeat=-1\nA negative count means repeating forever.\n",
                      "markdown": "`\n```none\n$ foo_test --gtest_repeat=1000\nRepeat foo_test 1000 times and don't stop at failures.\n\n$ foo_test --gtest_repeat=-1\nA negative count means repeating forever.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 1910,
                  "startColumn": 25,
                  "endLine": 1910,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n{: .callout .note}\nNOTE: This feature should only be used for temporary pain-relief. You still have\nto fix the disabled tests at a later date. As a reminder, GoogleTest will print\na banner warning you if a test program contains any disabled tests.\n\n{: .callout .tip}\n",
                    "rendered": {
                      "text": "\n{: .callout .note}\nNOTE: This feature should only be used for temporary pain-relief. You still have\nto fix the disabled tests at a later date. As a reminder, GoogleTest will print\na banner warning you if a test program contains any disabled tests.\n\n{: .callout .tip}\n",
                      "markdown": "`\n{: .callout .note}\nNOTE: This feature should only be used for temporary pain-relief. You still have\nto fix the disabled tests at a later date. As a reminder, GoogleTest will print\na banner warning you if a test program contains any disabled tests.\n\n{: .callout .tip}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 1749,
                  "startColumn": 78,
                  "endLine": 1750,
                  "endColumn": 3,
                  "snippet": {
                    "text": "\nTo use the event listener you have defined, add an instance of it to the\nGoogleTest event listener list (represented by class\n[`TestEventListeners`](reference/testing.md#TestEventListeners) - note the \"s\"\nat the end of the name) in your `main()` function, before calling\n`RUN_ALL_TESTS()`:\n\n```c++\n",
                    "rendered": {
                      "text": "\nTo use the event listener you have defined, add an instance of it to the\nGoogleTest event listener list (represented by class\n[`TestEventListeners`](reference/testing.md#TestEventListeners) - note the \"s\"\nat the end of the name) in your `main()` function, before calling\n`RUN_ALL_TESTS()`:\n\n```c++\n",
                      "markdown": "`\nTo use the event listener you have defined, add an instance of it to the\nGoogleTest event listener list (represented by class\n[`TestEventListeners`](reference/testing.md#TestEventListeners) - note the \"s\"\nat the end of the name) in your `main()` function, before calling\n`RUN_ALL_TESTS()`:\n\n```c++\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 1608,
                  "startColumn": 73,
                  "endLine": 1609,
                  "snippet": {
                    "text": "function pointer that creates a new instance of the Test object. It handles\nownership to the caller. The signature of the callable is `Fixture*()`, where\n`Fixture` is the test fixture class for the test. All tests registered with the\nsame `test_suite_name` must return the same fixture type. This is checked at\nruntime.\n\nThe framework will infer the fixture class from the factory and will call the\n`SetUpTestSuite` and `TearDownTestSuite` for it.\n",
                    "rendered": {
                      "text": "function pointer that creates a new instance of the Test object. It handles\nownership to the caller. The signature of the callable is `Fixture*()`, where\n`Fixture` is the test fixture class for the test. All tests registered with the\nsame `test_suite_name` must return the same fixture type. This is checked at\nruntime.\n\nThe framework will infer the fixture class from the factory and will call the\n`SetUpTestSuite` and `TearDownTestSuite` for it.\n",
                      "markdown": "`function pointer that creates a new instance of the Test object. It handles\nownership to the caller. The signature of the callable is `Fixture*()`, where\n`Fixture` is the test fixture class for the test. All tests registered with the\nsame `test_suite_name` must return the same fixture type. This is checked at\nruntime.\n\nThe framework will infer the fixture class from the factory and will call the\n`SetUpTestSuite` and `TearDownTestSuite` for it.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 1244,
                  "startColumn": 42,
                  "endLine": 1244,
                  "endColumn": 51,
                  "snippet": {
                    "text": "                         testing::PrintToStringParamName());\n```\n\nProviding a custom functor allows for more control over test parameter name\ngeneration, especially for types where the automatic conversion does not\ngenerate helpful parameter names (e.g. strings as demonstrated above). The\nfollowing example illustrates this for multiple parameters, an enumeration type\n",
                    "rendered": {
                      "text": "                         testing::PrintToStringParamName());\n```\n\nProviding a custom functor allows for more control over test parameter name\ngeneration, especially for types where the automatic conversion does not\ngenerate helpful parameter names (e.g. strings as demonstrated above). The\nfollowing example illustrates this for multiple parameters, an enumeration type\n",
                      "markdown": "`                         testing::PrintToStringParamName());\n```\n\nProviding a custom functor allows for more control over test parameter name\ngeneration, especially for types where the automatic conversion does not\ngenerate helpful parameter names (e.g. strings as demonstrated above). The\nfollowing example illustrates this for multiple parameters, an enumeration type\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 1129,
                  "startColumn": 69,
                  "endLine": 1130,
                  "snippet": {
                    "text": "```\n\n{: .callout .note}\nNOTE: The code above must be placed at global or namespace scope, not at\nfunction scope.\n\nThe first argument to `INSTANTIATE_TEST_SUITE_P` is a unique name for the\ninstantiation of the test suite. The next argument is the name of the test\n",
                    "rendered": {
                      "text": "```\n\n{: .callout .note}\nNOTE: The code above must be placed at global or namespace scope, not at\nfunction scope.\n\nThe first argument to `INSTANTIATE_TEST_SUITE_P` is a unique name for the\ninstantiation of the test suite. The next argument is the name of the test\n",
                      "markdown": "````\n\n{: .callout .note}\nNOTE: The code above must be placed at global or namespace scope, not at\nfunction scope.\n\nThe first argument to `INSTANTIATE_TEST_SUITE_P` is a unique name for the\ninstantiation of the test suite. The next argument is the name of the test\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 1129,
                  "startColumn": 35,
                  "endLine": 1129,
                  "endColumn": 39,
                  "snippet": {
                    "text": "```\n\n{: .callout .note}\nNOTE: The code above must be placed at global or namespace scope, not at\nfunction scope.\n\nThe first argument to `INSTANTIATE_TEST_SUITE_P` is a unique name for the\n",
                    "rendered": {
                      "text": "```\n\n{: .callout .note}\nNOTE: The code above must be placed at global or namespace scope, not at\nfunction scope.\n\nThe first argument to `INSTANTIATE_TEST_SUITE_P` is a unique name for the\n",
                      "markdown": "````\n\n{: .callout .note}\nNOTE: The code above must be placed at global or namespace scope, not at\nfunction scope.\n\nThe first argument to `INSTANTIATE_TEST_SUITE_P` is a unique name for the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 1114,
                  "startColumn": 52,
                  "endLine": 1115,
                  "snippet": {
                    "text": "\nFinally, you can use the `INSTANTIATE_TEST_SUITE_P` macro to instantiate the\ntest suite with any set of parameters you want. GoogleTest defines a number of\nfunctions for generating test parameters—see details at\n[`INSTANTIATE_TEST_SUITE_P`](reference/testing.md#INSTANTIATE_TEST_SUITE_P) in\nthe Testing Reference.\n\nFor example, the following statement will instantiate tests from the `FooTest`\n",
                    "rendered": {
                      "text": "\nFinally, you can use the `INSTANTIATE_TEST_SUITE_P` macro to instantiate the\ntest suite with any set of parameters you want. GoogleTest defines a number of\nfunctions for generating test parameters—see details at\n[`INSTANTIATE_TEST_SUITE_P`](reference/testing.md#INSTANTIATE_TEST_SUITE_P) in\nthe Testing Reference.\n\nFor example, the following statement will instantiate tests from the `FooTest`\n",
                      "markdown": "`\nFinally, you can use the `INSTANTIATE_TEST_SUITE_P` macro to instantiate the\ntest suite with any set of parameters you want. GoogleTest defines a number of\nfunctions for generating test parameters—see details at\n[`INSTANTIATE_TEST_SUITE_P`](reference/testing.md#INSTANTIATE_TEST_SUITE_P) in\nthe Testing Reference.\n\nFor example, the following statement will instantiate tests from the `FooTest`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 1012,
                  "startColumn": 65,
                  "endLine": 1012,
                  "endColumn": 69,
                  "snippet": {
                    "text": "fatal failures and `GTEST_SKIP()` has not been invoked. Finally, `TearDown()` is\ncalled.\n\nNote that `SetUp()` and `TearDown()` are only invoked if there is at least one\ntest to be performed. Importantly, `TearDown()` is executed even if the test is\nnot run due to a fatal failure or `GTEST_SKIP()`.\n\n",
                    "rendered": {
                      "text": "fatal failures and `GTEST_SKIP()` has not been invoked. Finally, `TearDown()` is\ncalled.\n\nNote that `SetUp()` and `TearDown()` are only invoked if there is at least one\ntest to be performed. Importantly, `TearDown()` is executed even if the test is\nnot run due to a fatal failure or `GTEST_SKIP()`.\n\n",
                      "markdown": "`fatal failures and `GTEST_SKIP()` has not been invoked. Finally, `TearDown()` is\ncalled.\n\nNote that `SetUp()` and `TearDown()` are only invoked if there is at least one\ntest to be performed. Importantly, `TearDown()` is executed even if the test is\nnot run due to a fatal failure or `GTEST_SKIP()`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 982,
                  "startColumn": 25,
                  "endLine": 982,
                  "endColumn": 29,
                  "snippet": {
                    "text": "## Global Set-Up and Tear-Down\n\nJust as you can do set-up and tear-down at the test level and the test suite\nlevel, you can also do it at the test program level. Here's how.\n\nFirst, you subclass the `::testing::Environment` class to define a test\nenvironment, which knows how to set-up and tear-down:\n",
                    "rendered": {
                      "text": "## Global Set-Up and Tear-Down\n\nJust as you can do set-up and tear-down at the test level and the test suite\nlevel, you can also do it at the test program level. Here's how.\n\nFirst, you subclass the `::testing::Environment` class to define a test\nenvironment, which knows how to set-up and tear-down:\n",
                      "markdown": "`## Global Set-Up and Tear-Down\n\nJust as you can do set-up and tear-down at the test level and the test suite\nlevel, you can also do it at the test program level. Here's how.\n\nFirst, you subclass the `::testing::Environment` class to define a test\nenvironment, which knows how to set-up and tear-down:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 981,
                  "startColumn": 39,
                  "endLine": 981,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n## Global Set-Up and Tear-Down\n\nJust as you can do set-up and tear-down at the test level and the test suite\nlevel, you can also do it at the test program level. Here's how.\n\nFirst, you subclass the `::testing::Environment` class to define a test\n",
                    "rendered": {
                      "text": "\n## Global Set-Up and Tear-Down\n\nJust as you can do set-up and tear-down at the test level and the test suite\nlevel, you can also do it at the test program level. Here's how.\n\nFirst, you subclass the `::testing::Environment` class to define a test\n",
                      "markdown": "`\n## Global Set-Up and Tear-Down\n\nJust as you can do set-up and tear-down at the test level and the test suite\nlevel, you can also do it at the test program level. Here's how.\n\nFirst, you subclass the `::testing::Environment` class to define a test\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 916,
                  "startColumn": 42,
                  "endLine": 916,
                  "endColumn": 51,
                  "snippet": {
                    "text": "Remember that the test order is undefined, so your code can't depend on a test\npreceding or following another. Also, the tests must either not modify the state\nof any shared resource, or, if they do modify the state, they must restore the\nstate to its original value before passing control to the next test.\n\nNote that `SetUpTestSuite()` may be called multiple times for a test fixture\nclass that has derived classes, so you should not expect code in the function\n",
                    "rendered": {
                      "text": "Remember that the test order is undefined, so your code can't depend on a test\npreceding or following another. Also, the tests must either not modify the state\nof any shared resource, or, if they do modify the state, they must restore the\nstate to its original value before passing control to the next test.\n\nNote that `SetUpTestSuite()` may be called multiple times for a test fixture\nclass that has derived classes, so you should not expect code in the function\n",
                      "markdown": "`Remember that the test order is undefined, so your code can't depend on a test\npreceding or following another. Also, the tests must either not modify the state\nof any shared resource, or, if they do modify the state, they must restore the\nstate to its original value before passing control to the next test.\n\nNote that `SetUpTestSuite()` may be called multiple times for a test fixture\nclass that has derived classes, so you should not expect code in the function\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 846,
                  "startColumn": 8,
                  "endLine": 846,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\nSimilarly, `HasNonfatalFailure()` returns `true` if the current test has at\nleast one non-fatal failure, and `HasFailure()` returns `true` if the current\ntest has at least one failure of either kind.\n\n## Logging Additional Information\n\n",
                    "rendered": {
                      "text": "\nSimilarly, `HasNonfatalFailure()` returns `true` if the current test has at\nleast one non-fatal failure, and `HasFailure()` returns `true` if the current\ntest has at least one failure of either kind.\n\n## Logging Additional Information\n\n",
                      "markdown": "`\nSimilarly, `HasNonfatalFailure()` returns `true` if the current test has at\nleast one non-fatal failure, and `HasFailure()` returns `true` if the current\ntest has at least one failure of either kind.\n\n## Logging Additional Information\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 844,
                  "startColumn": 72,
                  "endLine": 845,
                  "snippet": {
                    "text": "if (testing::Test::HasFatalFailure()) return;\n```\n\nSimilarly, `HasNonfatalFailure()` returns `true` if the current test has at\nleast one non-fatal failure, and `HasFailure()` returns `true` if the current\ntest has at least one failure of either kind.\n\n## Logging Additional Information\n",
                    "rendered": {
                      "text": "if (testing::Test::HasFatalFailure()) return;\n```\n\nSimilarly, `HasNonfatalFailure()` returns `true` if the current test has at\nleast one non-fatal failure, and `HasFailure()` returns `true` if the current\ntest has at least one failure of either kind.\n\n## Logging Additional Information\n",
                      "markdown": "`if (testing::Test::HasFatalFailure()) return;\n```\n\nSimilarly, `HasNonfatalFailure()` returns `true` if the current test has at\nleast one non-fatal failure, and `HasFailure()` returns `true` if the current\ntest has at least one failure of either kind.\n\n## Logging Additional Information\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 714,
                  "startColumn": 42,
                  "endLine": 714,
                  "endColumn": 46,
                  "snippet": {
                    "text": "Some tips on using `SCOPED_TRACE`:\n\n1.  With a suitable message, it's often enough to use `SCOPED_TRACE` at the\n    beginning of a sub-routine, instead of at each call site.\n2.  When calling sub-routines inside a loop, make the loop iterator part of the\n    message in `SCOPED_TRACE` such that you can know which iteration the failure\n    is from.\n",
                    "rendered": {
                      "text": "Some tips on using `SCOPED_TRACE`:\n\n1.  With a suitable message, it's often enough to use `SCOPED_TRACE` at the\n    beginning of a sub-routine, instead of at each call site.\n2.  When calling sub-routines inside a loop, make the loop iterator part of the\n    message in `SCOPED_TRACE` such that you can know which iteration the failure\n    is from.\n",
                      "markdown": "`Some tips on using `SCOPED_TRACE`:\n\n1.  With a suitable message, it's often enough to use `SCOPED_TRACE` at the\n    beginning of a sub-routine, instead of at each call site.\n2.  When calling sub-routines inside a loop, make the loop iterator part of the\n    message in `SCOPED_TRACE` such that you can know which iteration the failure\n    is from.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 713,
                  "startColumn": 68,
                  "endLine": 713,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\nSome tips on using `SCOPED_TRACE`:\n\n1.  With a suitable message, it's often enough to use `SCOPED_TRACE` at the\n    beginning of a sub-routine, instead of at each call site.\n2.  When calling sub-routines inside a loop, make the loop iterator part of the\n    message in `SCOPED_TRACE` such that you can know which iteration the failure\n",
                    "rendered": {
                      "text": "\nSome tips on using `SCOPED_TRACE`:\n\n1.  With a suitable message, it's often enough to use `SCOPED_TRACE` at the\n    beginning of a sub-routine, instead of at each call site.\n2.  When calling sub-routines inside a loop, make the loop iterator part of the\n    message in `SCOPED_TRACE` such that you can know which iteration the failure\n",
                      "markdown": "`\nSome tips on using `SCOPED_TRACE`:\n\n1.  With a suitable message, it's often enough to use `SCOPED_TRACE` at the\n    beginning of a sub-routine, instead of at each call site.\n2.  When calling sub-routines inside a loop, make the loop iterator part of the\n    message in `SCOPED_TRACE` such that you can know which iteration the failure\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 669,
                  "startColumn": 23,
                  "endLine": 669,
                  "endColumn": 32,
                  "snippet": {
                    "text": "macro will cause the current file name, line number, and the given message to be\nadded in every failure message. `ScopedTrace` accepts explicit file name and\nline number in arguments, which is useful for writing test helpers. The effect\nwill be undone when the control leaves the current lexical scope.\n\nFor example,\n\n",
                    "rendered": {
                      "text": "macro will cause the current file name, line number, and the given message to be\nadded in every failure message. `ScopedTrace` accepts explicit file name and\nline number in arguments, which is useful for writing test helpers. The effect\nwill be undone when the control leaves the current lexical scope.\n\nFor example,\n\n",
                      "markdown": "`macro will cause the current file name, line number, and the given message to be\nadded in every failure message. `ScopedTrace` accepts explicit file name and\nline number in arguments, which is useful for writing test helpers. The effect\nwill be undone when the control leaves the current lexical scope.\n\nFor example,\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 43,
                  "endLine": 412,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\nIn many applications, there are assertions that can cause application failure if\na condition is not met. These consistency checks, which ensure that the program\nis in a known good state, are there to fail at the earliest possible time after\nsome program state is corrupted. If the assertion checks the wrong condition,\nthen the program may proceed in an erroneous state, which could lead to memory\ncorruption, security holes, or worse. Hence it is vitally important to test that\n",
                    "rendered": {
                      "text": "\nIn many applications, there are assertions that can cause application failure if\na condition is not met. These consistency checks, which ensure that the program\nis in a known good state, are there to fail at the earliest possible time after\nsome program state is corrupted. If the assertion checks the wrong condition,\nthen the program may proceed in an erroneous state, which could lead to memory\ncorruption, security holes, or worse. Hence it is vitally important to test that\n",
                      "markdown": "`\nIn many applications, there are assertions that can cause application failure if\na condition is not met. These consistency checks, which ensure that the program\nis in a known good state, are there to fail at the earliest possible time after\nsome program state is corrupted. If the assertion checks the wrong condition,\nthen the program may proceed in an erroneous state, which could lead to memory\ncorruption, security holes, or worse. Hence it is vitally important to test that\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 18,
                  "endLine": 317,
                  "endColumn": 22,
                  "snippet": {
                    "text": "prints the raw bytes in the value and hopes that you the user can figure it out.\n\nAs mentioned earlier, the printer is *extensible*. That means you can teach it\nto do a better job at printing your particular type than to dump the bytes. To\ndo that, define an `AbslStringify()` overload as a `friend` function template\nfor your type:\n\n",
                    "rendered": {
                      "text": "prints the raw bytes in the value and hopes that you the user can figure it out.\n\nAs mentioned earlier, the printer is *extensible*. That means you can teach it\nto do a better job at printing your particular type than to dump the bytes. To\ndo that, define an `AbslStringify()` overload as a `friend` function template\nfor your type:\n\n",
                      "markdown": "`prints the raw bytes in the value and hopes that you the user can figure it out.\n\nAs mentioned earlier, the printer is *extensible*. That means you can teach it\nto do a better job at printing your particular type than to dump the bytes. To\ndo that, define an `AbslStringify()` overload as a `friend` function template\nfor your type:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 9,
                  "endLine": 278,
                  "endColumn": 13,
                  "snippet": {
                    "text": "## Skipping test execution\n\nRelated to the assertions `SUCCEED()` and `FAIL()`, you can prevent further test\nexecution at runtime with the `GTEST_SKIP()` macro. This is useful when you need\nto check for preconditions of the system under test during runtime and skip\ntests in a meaningful way.\n\n",
                    "rendered": {
                      "text": "## Skipping test execution\n\nRelated to the assertions `SUCCEED()` and `FAIL()`, you can prevent further test\nexecution at runtime with the `GTEST_SKIP()` macro. This is useful when you need\nto check for preconditions of the system under test during runtime and skip\ntests in a meaningful way.\n\n",
                      "markdown": "`## Skipping test execution\n\nRelated to the assertions `SUCCEED()` and `FAIL()`, you can prevent further test\nexecution at runtime with the `GTEST_SKIP()` macro. This is useful when you need\nto check for preconditions of the system under test during runtime and skip\ntests in a meaningful way.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 2293,
                  "startColumn": 26,
                  "endLine": 2293,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    NOTRUN = 1;\n  }\n  Status status = 2;\n  google.protobuf.Duration time = 3;\n  string classname = 4;\n  message Failure {\n    string failures = 1;\n",
                    "rendered": {
                      "text": "    NOTRUN = 1;\n  }\n  Status status = 2;\n  google.protobuf.Duration time = 3;\n  string classname = 4;\n  message Failure {\n    string failures = 1;\n",
                      "markdown": "`    NOTRUN = 1;\n  }\n  Status status = 2;\n  google.protobuf.Duration time = 3;\n  string classname = 4;\n  message Failure {\n    string failures = 1;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 2280,
                  "startColumn": 26,
                  "endLine": 2280,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  int32 failures = 3;\n  int32 disabled = 4;\n  int32 errors = 5;\n  google.protobuf.Duration time = 6;\n  repeated TestInfo testsuite = 7;\n}\n\n",
                    "rendered": {
                      "text": "  int32 failures = 3;\n  int32 disabled = 4;\n  int32 errors = 5;\n  google.protobuf.Duration time = 6;\n  repeated TestInfo testsuite = 7;\n}\n\n",
                      "markdown": "`  int32 failures = 3;\n  int32 disabled = 4;\n  int32 errors = 5;\n  google.protobuf.Duration time = 6;\n  repeated TestInfo testsuite = 7;\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 2269,
                  "startColumn": 26,
                  "endLine": 2269,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  int32 disabled = 3;\n  int32 errors = 4;\n  google.protobuf.Timestamp timestamp = 5;\n  google.protobuf.Duration time = 6;\n  string name = 7;\n  repeated TestCase testsuites = 8;\n}\n",
                    "rendered": {
                      "text": "  int32 disabled = 3;\n  int32 errors = 4;\n  google.protobuf.Timestamp timestamp = 5;\n  google.protobuf.Duration time = 6;\n  string name = 7;\n  repeated TestCase testsuites = 8;\n}\n",
                      "markdown": "`  int32 disabled = 3;\n  int32 errors = 4;\n  google.protobuf.Timestamp timestamp = 5;\n  google.protobuf.Duration time = 6;\n  string name = 7;\n  repeated TestCase testsuites = 8;\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 2162,
                  "startColumn": 56,
                  "endLine": 2162,
                  "endColumn": 62,
                  "snippet": {
                    "text": "*   The `time` attribute expresses the duration of the test, test suite, or\n    entire test program in seconds.\n\n*   The `timestamp` attribute records the local date and time of the test\n    execution.\n\n*   The `file` and `line` attributes record the source file location, where the\n",
                    "rendered": {
                      "text": "*   The `time` attribute expresses the duration of the test, test suite, or\n    entire test program in seconds.\n\n*   The `timestamp` attribute records the local date and time of the test\n    execution.\n\n*   The `file` and `line` attributes record the source file location, where the\n",
                      "markdown": "`*   The `time` attribute expresses the duration of the test, test suite, or\n    entire test program in seconds.\n\n*   The `timestamp` attribute records the local date and time of the test\n    execution.\n\n*   The `file` and `line` attributes record the source file location, where the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 2073,
                  "startColumn": 33,
                  "endLine": 2073,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n#### Suppressing the Elapsed Time\n\nBy default, GoogleTest prints the time it takes to run each test. To disable\nthat, run the test program with the `--gtest_print_time=0` command line flag, or\nset the GTEST_PRINT_TIME environment variable to `0`.\n\n",
                    "rendered": {
                      "text": "\n#### Suppressing the Elapsed Time\n\nBy default, GoogleTest prints the time it takes to run each test. To disable\nthat, run the test program with the `--gtest_print_time=0` command line flag, or\nset the GTEST_PRINT_TIME environment variable to `0`.\n\n",
                      "markdown": "`\n#### Suppressing the Elapsed Time\n\nBy default, GoogleTest prints the time it takes to run each test. To disable\nthat, run the test program with the `--gtest_print_time=0` command line flag, or\nset the GTEST_PRINT_TIME environment variable to `0`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 2071,
                  "startColumn": 28,
                  "endLine": 2072,
                  "snippet": {
                    "text": "passed or failed. To show only test failures, run the test program with\n`--gtest_brief=1`, or set the GTEST_BRIEF environment variable to `1`.\n\n#### Suppressing the Elapsed Time\n\nBy default, GoogleTest prints the time it takes to run each test. To disable\nthat, run the test program with the `--gtest_print_time=0` command line flag, or\nset the GTEST_PRINT_TIME environment variable to `0`.\n",
                    "rendered": {
                      "text": "passed or failed. To show only test failures, run the test program with\n`--gtest_brief=1`, or set the GTEST_BRIEF environment variable to `1`.\n\n#### Suppressing the Elapsed Time\n\nBy default, GoogleTest prints the time it takes to run each test. To disable\nthat, run the test program with the `--gtest_print_time=0` command line flag, or\nset the GTEST_PRINT_TIME environment variable to `0`.\n",
                      "markdown": "`passed or failed. To show only test failures, run the test program with\n`--gtest_brief=1`, or set the GTEST_BRIEF environment variable to `1`.\n\n#### Suppressing the Elapsed Time\n\nBy default, GoogleTest prints the time it takes to run each test. To disable\nthat, run the test program with the `--gtest_print_time=0` command line flag, or\nset the GTEST_PRINT_TIME environment variable to `0`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 1715,
                  "startColumn": 65,
                  "endLine": 1715,
                  "endColumn": 71,
                  "snippet": {
                    "text": "*   TestInfo contains the state of a test, and\n*   TestPartResult represents the result of a test assertion.\n\nAn event handler function can examine the argument it receives to find out\ninteresting information about the event and the test program's state.\n\nHere's an example:\n",
                    "rendered": {
                      "text": "*   TestInfo contains the state of a test, and\n*   TestPartResult represents the result of a test assertion.\n\nAn event handler function can examine the argument it receives to find out\ninteresting information about the event and the test program's state.\n\nHere's an example:\n",
                      "markdown": "`*   TestInfo contains the state of a test, and\n*   TestPartResult represents the result of a test assertion.\n\nAn event handler function can examine the argument it receives to find out\ninteresting information about the event and the test program's state.\n\nHere's an example:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 1681,
                  "startColumn": 22,
                  "endLine": 1681,
                  "endColumn": 28,
                  "snippet": {
                    "text": "```\n\n`current_test_info()` returns a null pointer if no test is running. In\nparticular, you cannot find the test suite name in `SetUpTestSuite()`,\n`TearDownTestSuite()` (where you know the test suite name implicitly), or\nfunctions called from them.\n\n",
                    "rendered": {
                      "text": "```\n\n`current_test_info()` returns a null pointer if no test is running. In\nparticular, you cannot find the test suite name in `SetUpTestSuite()`,\n`TearDownTestSuite()` (where you know the test suite name implicitly), or\nfunctions called from them.\n\n",
                      "markdown": "````\n\n`current_test_info()` returns a null pointer if no test is running. In\nparticular, you cannot find the test suite name in `SetUpTestSuite()`,\n`TearDownTestSuite()` (where you know the test suite name implicitly), or\nfunctions called from them.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 1537,
                  "startColumn": 40,
                  "endLine": 1537,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n## \"Catching\" Failures\n\nIf you are building a testing utility on top of GoogleTest, you'll want to test\nyour utility. What framework would you use to test it? GoogleTest, of course.\n\nThe challenge is to verify that your testing utility reports failures correctly.\n",
                    "rendered": {
                      "text": "\n## \"Catching\" Failures\n\nIf you are building a testing utility on top of GoogleTest, you'll want to test\nyour utility. What framework would you use to test it? GoogleTest, of course.\n\nThe challenge is to verify that your testing utility reports failures correctly.\n",
                      "markdown": "`\n## \"Catching\" Failures\n\nIf you are building a testing utility on top of GoogleTest, you'll want to test\nyour utility. What framework would you use to test it? GoogleTest, of course.\n\nThe challenge is to verify that your testing utility reports failures correctly.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 1429,
                  "startColumn": 14,
                  "endLine": 1429,
                  "endColumn": 20,
                  "snippet": {
                    "text": "black-box testing principle, most of the time you should test your code through\nits public interfaces.**\n\n**If you still find yourself needing to test internal implementation code,\nconsider if there's a better design.** The desire to test internal\nimplementation is often a sign that the class is doing too much. Consider\nextracting an implementation class, and testing it. Then use that implementation\n",
                    "rendered": {
                      "text": "black-box testing principle, most of the time you should test your code through\nits public interfaces.**\n\n**If you still find yourself needing to test internal implementation code,\nconsider if there's a better design.** The desire to test internal\nimplementation is often a sign that the class is doing too much. Consider\nextracting an implementation class, and testing it. Then use that implementation\n",
                      "markdown": "`black-box testing principle, most of the time you should test your code through\nits public interfaces.**\n\n**If you still find yourself needing to test internal implementation code,\nconsider if there's a better design.** The desire to test internal\nimplementation is often a sign that the class is doing too much. Consider\nextracting an implementation class, and testing it. Then use that implementation\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 1426,
                  "startColumn": 40,
                  "endLine": 1426,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\nIf you change your software's internal implementation, your tests should not\nbreak as long as the change is not observable by users. Therefore, **per the\nblack-box testing principle, most of the time you should test your code through\nits public interfaces.**\n\n**If you still find yourself needing to test internal implementation code,\n",
                    "rendered": {
                      "text": "\nIf you change your software's internal implementation, your tests should not\nbreak as long as the change is not observable by users. Therefore, **per the\nblack-box testing principle, most of the time you should test your code through\nits public interfaces.**\n\n**If you still find yourself needing to test internal implementation code,\n",
                      "markdown": "`\nIf you change your software's internal implementation, your tests should not\nbreak as long as the change is not observable by users. Therefore, **per the\nblack-box testing principle, most of the time you should test your code through\nits public interfaces.**\n\n**If you still find yourself needing to test internal implementation code,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 919,
                  "startColumn": 49,
                  "endLine": 919,
                  "endColumn": 57,
                  "snippet": {
                    "text": "state to its original value before passing control to the next test.\n\nNote that `SetUpTestSuite()` may be called multiple times for a test fixture\nclass that has derived classes, so you should not expect code in the function\nbody to be run only once. Also, derived classes still have access to shared\nresources defined as static members, so careful consideration is needed when\nmanaging shared resources to avoid memory leaks if shared resources are not\n",
                    "rendered": {
                      "text": "state to its original value before passing control to the next test.\n\nNote that `SetUpTestSuite()` may be called multiple times for a test fixture\nclass that has derived classes, so you should not expect code in the function\nbody to be run only once. Also, derived classes still have access to shared\nresources defined as static members, so careful consideration is needed when\nmanaging shared resources to avoid memory leaks if shared resources are not\n",
                      "markdown": "`state to its original value before passing control to the next test.\n\nNote that `SetUpTestSuite()` may be called multiple times for a test fixture\nclass that has derived classes, so you should not expect code in the function\nbody to be run only once. Also, derived classes still have access to shared\nresources defined as static members, so careful consideration is needed when\nmanaging shared resources to avoid memory leaks if shared resources are not\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 724,
                  "startColumn": 34,
                  "endLine": 724,
                  "endColumn": 41,
                  "snippet": {
                    "text": "4.  You can use `SCOPED_TRACE` in an inner scope when there is one in the outer\n    scope. In this case, all active trace points will be included in the failure\n    messages, in reverse order they are encountered.\n5.  The trace dump is clickable in Emacs - hit `return` on a line number and\n    you'll be taken to that line in the source file!\n\n### Propagating Fatal Failures\n",
                    "rendered": {
                      "text": "4.  You can use `SCOPED_TRACE` in an inner scope when there is one in the outer\n    scope. In this case, all active trace points will be included in the failure\n    messages, in reverse order they are encountered.\n5.  The trace dump is clickable in Emacs - hit `return` on a line number and\n    you'll be taken to that line in the source file!\n\n### Propagating Fatal Failures\n",
                      "markdown": "`4.  You can use `SCOPED_TRACE` in an inner scope when there is one in the outer\n    scope. In this case, all active trace points will be included in the failure\n    messages, in reverse order they are encountered.\n5.  The trace dump is clickable in Emacs - hit `return` on a line number and\n    you'll be taken to that line in the source file!\n\n### Propagating Fatal Failures\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 582,
                  "startColumn": 14,
                  "endLine": 582,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\nThe \"threadsafe\" death test style was introduced in order to help mitigate the\nrisks of testing in a possibly multithreaded environment. It trades increased\ntest execution time (potentially dramatically so) for improved thread safety.\n\nThe automated testing framework does not set the style flag. You can choose a\nparticular style of death tests by setting the flag programmatically:\n",
                    "rendered": {
                      "text": "\nThe \"threadsafe\" death test style was introduced in order to help mitigate the\nrisks of testing in a possibly multithreaded environment. It trades increased\ntest execution time (potentially dramatically so) for improved thread safety.\n\nThe automated testing framework does not set the style flag. You can choose a\nparticular style of death tests by setting the flag programmatically:\n",
                      "markdown": "`\nThe \"threadsafe\" death test style was introduced in order to help mitigate the\nrisks of testing in a possibly multithreaded environment. It trades increased\ntest execution time (potentially dramatically so) for improved thread safety.\n\nThe automated testing framework does not set the style flag. You can choose a\nparticular style of death tests by setting the flag programmatically:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 68,
                  "endLine": 412,
                  "endColumn": 74,
                  "snippet": {
                    "text": "\nIn many applications, there are assertions that can cause application failure if\na condition is not met. These consistency checks, which ensure that the program\nis in a known good state, are there to fail at the earliest possible time after\nsome program state is corrupted. If the assertion checks the wrong condition,\nthen the program may proceed in an erroneous state, which could lead to memory\ncorruption, security holes, or worse. Hence it is vitally important to test that\n",
                    "rendered": {
                      "text": "\nIn many applications, there are assertions that can cause application failure if\na condition is not met. These consistency checks, which ensure that the program\nis in a known good state, are there to fail at the earliest possible time after\nsome program state is corrupted. If the assertion checks the wrong condition,\nthen the program may proceed in an erroneous state, which could lead to memory\ncorruption, security holes, or worse. Hence it is vitally important to test that\n",
                      "markdown": "`\nIn many applications, there are assertions that can cause application failure if\na condition is not met. These consistency checks, which ensure that the program\nis in a known good state, are there to fail at the earliest possible time after\nsome program state is corrupted. If the assertion checks the wrong condition,\nthen the program may proceed in an erroneous state, which could lead to memory\ncorruption, security holes, or worse. Hence it is vitally important to test that\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 358,
                  "startColumn": 66,
                  "endLine": 358,
                  "endColumn": 72,
                  "snippet": {
                    "text": "within its own format strings to perform type deduction. `Point` above could be\nformatted as `\"(%v, %v)\"` for example, and deduce the `int` values as `%d`.\n\nSometimes, `AbslStringify()` might not be an option: your team may wish to print\ntypes with extra debugging information for testing purposes only. If so, you can\ninstead define a `PrintTo()` function like this:\n\n",
                    "rendered": {
                      "text": "within its own format strings to perform type deduction. `Point` above could be\nformatted as `\"(%v, %v)\"` for example, and deduce the `int` values as `%d`.\n\nSometimes, `AbslStringify()` might not be an option: your team may wish to print\ntypes with extra debugging information for testing purposes only. If so, you can\ninstead define a `PrintTo()` function like this:\n\n",
                      "markdown": "`within its own format strings to perform type deduction. `Point` above could be\nformatted as `\"(%v, %v)\"` for example, and deduce the `int` values as `%d`.\n\nSometimes, `AbslStringify()` might not be an option: your team may wish to print\ntypes with extra debugging information for testing purposes only. If so, you can\ninstead define a `PrintTo()` function like this:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 6,
                  "endLine": 137,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n#### Using a Predicate-Formatter\n\nIf you find the default message generated by\n[`EXPECT_PRED*`](reference/assertions.md#EXPECT_PRED) and\n[`EXPECT_TRUE`](reference/assertions.md#EXPECT_TRUE) unsatisfactory, or some\narguments to your predicate do not support streaming to `ostream`, you can\n",
                    "rendered": {
                      "text": "\n#### Using a Predicate-Formatter\n\nIf you find the default message generated by\n[`EXPECT_PRED*`](reference/assertions.md#EXPECT_PRED) and\n[`EXPECT_TRUE`](reference/assertions.md#EXPECT_TRUE) unsatisfactory, or some\narguments to your predicate do not support streaming to `ostream`, you can\n",
                      "markdown": "`\n#### Using a Predicate-Formatter\n\nIf you find the default message generated by\n[`EXPECT_PRED*`](reference/assertions.md#EXPECT_PRED) and\n[`EXPECT_TRUE`](reference/assertions.md#EXPECT_TRUE) unsatisfactory, or some\narguments to your predicate do not support streaming to `ostream`, you can\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/advanced.md"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 34,
                  "endLine": 6,
                  "endColumn": 40,
                  "snippet": {
                    "text": "## Introduction\n\nNow that you have read the [GoogleTest Primer](primer.md) and learned how to\nwrite tests using GoogleTest, it's time to learn some new tricks. This document\nwill show you more assertions as well as how to construct complex failure\nmessages, propagate fatal failures, reuse and speed up your test fixtures, and\nuse various flags with your tests.\n",
                    "rendered": {
                      "text": "## Introduction\n\nNow that you have read the [GoogleTest Primer](primer.md) and learned how to\nwrite tests using GoogleTest, it's time to learn some new tricks. This document\nwill show you more assertions as well as how to construct complex failure\nmessages, propagate fatal failures, reuse and speed up your test fixtures, and\nuse various flags with your tests.\n",
                      "markdown": "`## Introduction\n\nNow that you have read the [GoogleTest Primer](primer.md) and learned how to\nwrite tests using GoogleTest, it's time to learn some new tricks. This document\nwill show you more assertions as well as how to construct complex failure\nmessages, propagate fatal failures, reuse and speed up your test fixtures, and\nuse various flags with your tests.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-actions_test.cc"
                },
                "region": {
                  "startLine": 1834,
                  "startColumn": 22,
                  "endLine": 1834,
                  "endColumn": 27,
                  "snippet": {
                    "text": "  EXPECT_EQ(7, *vresult[0]);\n\n  std::unique_ptr<Base> result2 = mock.MakeUniqueBase();\n  EXPECT_EQ(d, result2.get());\n}\n\nTEST(MockMethodTest, CanReturnMoveOnlyValue_DoAllReturn) {\n",
                    "rendered": {
                      "text": "  EXPECT_EQ(7, *vresult[0]);\n\n  std::unique_ptr<Base> result2 = mock.MakeUniqueBase();\n  EXPECT_EQ(d, result2.get());\n}\n\nTEST(MockMethodTest, CanReturnMoveOnlyValue_DoAllReturn) {\n",
                      "markdown": "`  EXPECT_EQ(7, *vresult[0]);\n\n  std::unique_ptr<Base> result2 = mock.MakeUniqueBase();\n  EXPECT_EQ(d, result2.get());\n}\n\nTEST(MockMethodTest, CanReturnMoveOnlyValue_DoAllReturn) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-actions_test.cc"
                },
                "region": {
                  "startLine": 1483,
                  "startColumn": 15,
                  "endLine": 1483,
                  "endColumn": 19,
                  "snippet": {
                    "text": "// A DoAll action should be convertible to a OnceAction, even when its component\n// sub-actions are user-provided types that define only an Action conversion\n// operator. If they supposed being called more than once then they also support\n// being called at most once.\nTEST(DoAll, ConvertibleToOnceActionWithUserProvidedActionConversion) {\n  // Simplest case: only one sub-action.\n  struct CustomFinal final {\n",
                    "rendered": {
                      "text": "// A DoAll action should be convertible to a OnceAction, even when its component\n// sub-actions are user-provided types that define only an Action conversion\n// operator. If they supposed being called more than once then they also support\n// being called at most once.\nTEST(DoAll, ConvertibleToOnceActionWithUserProvidedActionConversion) {\n  // Simplest case: only one sub-action.\n  struct CustomFinal final {\n",
                      "markdown": "`// A DoAll action should be convertible to a OnceAction, even when its component\n// sub-actions are user-provided types that define only an Action conversion\n// operator. If they supposed being called more than once then they also support\n// being called at most once.\nTEST(DoAll, ConvertibleToOnceActionWithUserProvidedActionConversion) {\n  // Simplest case: only one sub-action.\n  struct CustomFinal final {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-actions_test.cc"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 30,
                  "endLine": 161,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  static_assert(\n      std::is_base_of<MyTrue<0>, internal::disjunction<MyTrue<0>>>::value, \"\");\n\n  // Multiple predicates, with at least one true: inherits from that one.\n  static_assert(\n      std::is_base_of<MyTrue<1>, internal::disjunction<MyFalse<0>, MyTrue<1>,\n                                                       MyFalse<2>>>::value,\n",
                    "rendered": {
                      "text": "  static_assert(\n      std::is_base_of<MyTrue<0>, internal::disjunction<MyTrue<0>>>::value, \"\");\n\n  // Multiple predicates, with at least one true: inherits from that one.\n  static_assert(\n      std::is_base_of<MyTrue<1>, internal::disjunction<MyFalse<0>, MyTrue<1>,\n                                                       MyFalse<2>>>::value,\n",
                      "markdown": "`  static_assert(\n      std::is_base_of<MyTrue<0>, internal::disjunction<MyTrue<0>>>::value, \"\");\n\n  // Multiple predicates, with at least one true: inherits from that one.\n  static_assert(\n      std::is_base_of<MyTrue<1>, internal::disjunction<MyFalse<0>, MyTrue<1>,\n                                                       MyFalse<2>>>::value,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-actions_test.cc"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 30,
                  "endLine": 122,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  static_assert(\n      std::is_base_of<MyTrue<0>, internal::conjunction<MyTrue<0>>>::value, \"\");\n\n  // Multiple predicates, with at least one false: inherits from that one.\n  static_assert(\n      std::is_base_of<MyFalse<1>, internal::conjunction<MyTrue<0>, MyFalse<1>,\n                                                        MyTrue<2>>>::value,\n",
                    "rendered": {
                      "text": "  static_assert(\n      std::is_base_of<MyTrue<0>, internal::conjunction<MyTrue<0>>>::value, \"\");\n\n  // Multiple predicates, with at least one false: inherits from that one.\n  static_assert(\n      std::is_base_of<MyFalse<1>, internal::conjunction<MyTrue<0>, MyFalse<1>,\n                                                        MyTrue<2>>>::value,\n",
                      "markdown": "`  static_assert(\n      std::is_base_of<MyTrue<0>, internal::conjunction<MyTrue<0>>>::value, \"\");\n\n  // Multiple predicates, with at least one false: inherits from that one.\n  static_assert(\n      std::is_base_of<MyFalse<1>, internal::conjunction<MyTrue<0>, MyFalse<1>,\n                                                        MyTrue<2>>>::value,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-cardinalities.cc"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 36,
                  "endLine": 141,
                  "endColumn": 40,
                  "snippet": {
                    "text": "// Creates a cardinality that allows at least n calls.\nGTEST_API_ Cardinality AtLeast(int n) { return Between(n, INT_MAX); }\n\n// Creates a cardinality that allows at most n calls.\nGTEST_API_ Cardinality AtMost(int n) { return Between(0, n); }\n\n// Creates a cardinality that allows any number of calls.\n",
                    "rendered": {
                      "text": "// Creates a cardinality that allows at least n calls.\nGTEST_API_ Cardinality AtLeast(int n) { return Between(n, INT_MAX); }\n\n// Creates a cardinality that allows at most n calls.\nGTEST_API_ Cardinality AtMost(int n) { return Between(0, n); }\n\n// Creates a cardinality that allows any number of calls.\n",
                      "markdown": "`// Creates a cardinality that allows at least n calls.\nGTEST_API_ Cardinality AtLeast(int n) { return Between(n, INT_MAX); }\n\n// Creates a cardinality that allows at most n calls.\nGTEST_API_ Cardinality AtMost(int n) { return Between(0, n); }\n\n// Creates a cardinality that allows any number of calls.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-cardinalities.cc"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 36,
                  "endLine": 138,
                  "endColumn": 40,
                  "snippet": {
                    "text": "  }\n}\n\n// Creates a cardinality that allows at least n calls.\nGTEST_API_ Cardinality AtLeast(int n) { return Between(n, INT_MAX); }\n\n// Creates a cardinality that allows at most n calls.\n",
                    "rendered": {
                      "text": "  }\n}\n\n// Creates a cardinality that allows at least n calls.\nGTEST_API_ Cardinality AtLeast(int n) { return Between(n, INT_MAX); }\n\n// Creates a cardinality that allows at most n calls.\n",
                      "markdown": "`  }\n}\n\n// Creates a cardinality that allows at least n calls.\nGTEST_API_ Cardinality AtLeast(int n) { return Between(n, INT_MAX); }\n\n// Creates a cardinality that allows at most n calls.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-cardinalities.cc"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 18,
                  "endLine": 119,
                  "endColumn": 22,
                  "snippet": {
                    "text": "  } else if (min_ == max_) {\n    *os << \"called \" << FormatTimes(min_);\n  } else if (max_ == INT_MAX) {\n    *os << \"called at least \" << FormatTimes(min_);\n  } else {\n    // 0 < min_ < max_ < INT_MAX\n    *os << \"called between \" << min_ << \" and \" << max_ << \" times\";\n",
                    "rendered": {
                      "text": "  } else if (min_ == max_) {\n    *os << \"called \" << FormatTimes(min_);\n  } else if (max_ == INT_MAX) {\n    *os << \"called at least \" << FormatTimes(min_);\n  } else {\n    // 0 < min_ < max_ < INT_MAX\n    *os << \"called between \" << min_ << \" and \" << max_ << \" times\";\n",
                      "markdown": "`  } else if (min_ == max_) {\n    *os << \"called \" << FormatTimes(min_);\n  } else if (max_ == INT_MAX) {\n    *os << \"called at least \" << FormatTimes(min_);\n  } else {\n    // 0 < min_ < max_ < INT_MAX\n    *os << \"called between \" << min_ << \" and \" << max_ << \" times\";\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-cardinalities.cc"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 20,
                  "endLine": 114,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    } else if (max_ == INT_MAX) {\n      *os << \"called any number of times\";\n    } else {\n      *os << \"called at most \" << FormatTimes(max_);\n    }\n  } else if (min_ == max_) {\n    *os << \"called \" << FormatTimes(min_);\n",
                    "rendered": {
                      "text": "    } else if (max_ == INT_MAX) {\n      *os << \"called any number of times\";\n    } else {\n      *os << \"called at most \" << FormatTimes(max_);\n    }\n  } else if (min_ == max_) {\n    *os << \"called \" << FormatTimes(min_);\n",
                      "markdown": "`    } else if (max_ == INT_MAX) {\n      *os << \"called any number of times\";\n    } else {\n      *os << \"called at most \" << FormatTimes(max_);\n    }\n  } else if (min_ == max_) {\n    *os << \"called \" << FormatTimes(min_);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/README.md"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 37,
                  "endLine": 96,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n## Who Is Using GoogleTest?\n\nIn addition to many internal projects at Google, GoogleTest is also used by the\nfollowing notable projects:\n\n*   The [Chromium projects](https://www.chromium.org/) (behind the Chrome\n",
                    "rendered": {
                      "text": "\n## Who Is Using GoogleTest?\n\nIn addition to many internal projects at Google, GoogleTest is also used by the\nfollowing notable projects:\n\n*   The [Chromium projects](https://www.chromium.org/) (behind the Chrome\n",
                      "markdown": "`\n## Who Is Using GoogleTest?\n\nIn addition to many internal projects at Google, GoogleTest is also used by the\nfollowing notable projects:\n\n*   The [Chromium projects](https://www.chromium.org/) (behind the Chrome\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/README.md"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 55,
                  "endLine": 49,
                  "snippet": {
                    "text": "documentation. We recommend starting with the\n[GoogleTest Primer](https://google.github.io/googletest/primer.html).\n\nMore information about building GoogleTest can be found at\n[googletest/README.md](googletest/README.md).\n\n## Features\n\n",
                    "rendered": {
                      "text": "documentation. We recommend starting with the\n[GoogleTest Primer](https://google.github.io/googletest/primer.html).\n\nMore information about building GoogleTest can be found at\n[googletest/README.md](googletest/README.md).\n\n## Features\n\n",
                      "markdown": "`documentation. We recommend starting with the\n[GoogleTest Primer](https://google.github.io/googletest/primer.html).\n\nMore information about building GoogleTest can be found at\n[googletest/README.md](googletest/README.md).\n\n## Features\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/README.md"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 26,
                  "endLine": 25,
                  "endColumn": 30,
                  "snippet": {
                    "text": "[Release 1.15.2](https://github.com/google/googletest/releases/tag/v1.15.2) is\nnow available.\n\nThe 1.15.x branch requires at least C++14.\n\n#### Continuous Integration\n\n",
                    "rendered": {
                      "text": "[Release 1.15.2](https://github.com/google/googletest/releases/tag/v1.15.2) is\nnow available.\n\nThe 1.15.x branch requires at least C++14.\n\n#### Continuous Integration\n\n",
                      "markdown": "`[Release 1.15.2](https://github.com/google/googletest/releases/tag/v1.15.2) is\nnow available.\n\nThe 1.15.x branch requires at least C++14.\n\n#### Continuous Integration\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/README.md"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 45,
                  "endLine": 17,
                  "snippet": {
                    "text": "\n#### Documentation Updates\n\nOur documentation is now live on GitHub Pages at\nhttps://google.github.io/googletest/. We recommend browsing the documentation on\nGitHub Pages rather than directly in the repository.\n\n#### Release 1.15.2\n",
                    "rendered": {
                      "text": "\n#### Documentation Updates\n\nOur documentation is now live on GitHub Pages at\nhttps://google.github.io/googletest/. We recommend browsing the documentation on\nGitHub Pages rather than directly in the repository.\n\n#### Release 1.15.2\n",
                      "markdown": "`\n#### Documentation Updates\n\nOur documentation is now live on GitHub Pages at\nhttps://google.github.io/googletest/. We recommend browsing the documentation on\nGitHub Pages rather than directly in the repository.\n\n#### Release 1.15.2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/README.md"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 12,
                  "endLine": 8,
                  "endColumn": 16,
                  "snippet": {
                    "text": "#### Live at Head\n\nGoogleTest now follows the\n[Abseil Live at Head philosophy](https://abseil.io/about/philosophy#upgrade-support).\nWe recommend\n[updating to the latest commit in the `main` branch as often as possible](https://github.com/abseil/abseil-cpp/blob/master/FAQ.md#what-is-live-at-head-and-how-do-i-do-it).\nWe do publish occasional semantic versions, tagged with\n",
                    "rendered": {
                      "text": "#### Live at Head\n\nGoogleTest now follows the\n[Abseil Live at Head philosophy](https://abseil.io/about/philosophy#upgrade-support).\nWe recommend\n[updating to the latest commit in the `main` branch as often as possible](https://github.com/abseil/abseil-cpp/blob/master/FAQ.md#what-is-live-at-head-and-how-do-i-do-it).\nWe do publish occasional semantic versions, tagged with\n",
                      "markdown": "`#### Live at Head\n\nGoogleTest now follows the\n[Abseil Live at Head philosophy](https://abseil.io/about/philosophy#upgrade-support).\nWe recommend\n[updating to the latest commit in the `main` branch as often as possible](https://github.com/abseil/abseil-cpp/blob/master/FAQ.md#what-is-live-at-head-and-how-do-i-do-it).\nWe do publish occasional semantic versions, tagged with\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/README.md"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 9,
                  "endLine": 5,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n### Announcements\n\n#### Live at Head\n\nGoogleTest now follows the\n[Abseil Live at Head philosophy](https://abseil.io/about/philosophy#upgrade-support).\n",
                    "rendered": {
                      "text": "\n### Announcements\n\n#### Live at Head\n\nGoogleTest now follows the\n[Abseil Live at Head philosophy](https://abseil.io/about/philosophy#upgrade-support).\n",
                      "markdown": "`\n### Announcements\n\n#### Live at Head\n\nGoogleTest now follows the\n[Abseil Live at Head philosophy](https://abseil.io/about/philosophy#upgrade-support).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/README.md"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 59,
                  "endLine": 120,
                  "endColumn": 65,
                  "snippet": {
                    "text": "[GTest TAP Listener](https://github.com/kinow/gtest-tap-listener) is an event\nlistener for GoogleTest that implements the\n[TAP protocol](https://en.wikipedia.org/wiki/Test_Anything_Protocol) for test\nresult output. If your test runner understands TAP, you may find it useful.\n\n[gtest-parallel](https://github.com/google/gtest-parallel) is a test runner that\nruns tests from your binary in parallel to provide significant speed-up.\n",
                    "rendered": {
                      "text": "[GTest TAP Listener](https://github.com/kinow/gtest-tap-listener) is an event\nlistener for GoogleTest that implements the\n[TAP protocol](https://en.wikipedia.org/wiki/Test_Anything_Protocol) for test\nresult output. If your test runner understands TAP, you may find it useful.\n\n[gtest-parallel](https://github.com/google/gtest-parallel) is a test runner that\nruns tests from your binary in parallel to provide significant speed-up.\n",
                      "markdown": "`[GTest TAP Listener](https://github.com/kinow/gtest-tap-listener) is an event\nlistener for GoogleTest that implements the\n[TAP protocol](https://en.wikipedia.org/wiki/Test_Anything_Protocol) for test\nresult output. If your test runner understands TAP, you may find it useful.\n\n[gtest-parallel](https://github.com/google/gtest-parallel) is a test runner that\nruns tests from your binary in parallel to provide significant speed-up.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/README.md"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 15,
                  "endLine": 8,
                  "endColumn": 21,
                  "snippet": {
                    "text": "#### Live at Head\n\nGoogleTest now follows the\n[Abseil Live at Head philosophy](https://abseil.io/about/philosophy#upgrade-support).\nWe recommend\n[updating to the latest commit in the `main` branch as often as possible](https://github.com/abseil/abseil-cpp/blob/master/FAQ.md#what-is-live-at-head-and-how-do-i-do-it).\nWe do publish occasional semantic versions, tagged with\n",
                    "rendered": {
                      "text": "#### Live at Head\n\nGoogleTest now follows the\n[Abseil Live at Head philosophy](https://abseil.io/about/philosophy#upgrade-support).\nWe recommend\n[updating to the latest commit in the `main` branch as often as possible](https://github.com/abseil/abseil-cpp/blob/master/FAQ.md#what-is-live-at-head-and-how-do-i-do-it).\nWe do publish occasional semantic versions, tagged with\n",
                      "markdown": "`#### Live at Head\n\nGoogleTest now follows the\n[Abseil Live at Head philosophy](https://abseil.io/about/philosophy#upgrade-support).\nWe recommend\n[updating to the latest commit in the `main` branch as often as possible](https://github.com/abseil/abseil-cpp/blob/master/FAQ.md#what-is-live-at-head-and-how-do-i-do-it).\nWe do publish occasional semantic versions, tagged with\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/README.md"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 12,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n### Announcements\n\n#### Live at Head\n\nGoogleTest now follows the\n[Abseil Live at Head philosophy](https://abseil.io/about/philosophy#upgrade-support).\nWe recommend\n",
                    "rendered": {
                      "text": "\n### Announcements\n\n#### Live at Head\n\nGoogleTest now follows the\n[Abseil Live at Head philosophy](https://abseil.io/about/philosophy#upgrade-support).\nWe recommend\n",
                      "markdown": "`\n### Announcements\n\n#### Live at Head\n\nGoogleTest now follows the\n[Abseil Live at Head philosophy](https://abseil.io/about/philosophy#upgrade-support).\nWe recommend\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/samples/sample6_unittest.cc"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 10,
                  "endLine": 207,
                  "endColumn": 14,
                  "snippet": {
                    "text": "// become part of the test case name and can be used in test filters.\n\n// The list of types we want to test.  Note that it doesn't have to be\n// defined at the time we write the TYPED_TEST_P()s.\ntypedef Types<OnTheFlyPrimeTable, PreCalculatedPrimeTable>\n    PrimeTableImplementations;\nINSTANTIATE_TYPED_TEST_SUITE_P(OnTheFlyAndPreCalculated,    // Instance name\n",
                    "rendered": {
                      "text": "// become part of the test case name and can be used in test filters.\n\n// The list of types we want to test.  Note that it doesn't have to be\n// defined at the time we write the TYPED_TEST_P()s.\ntypedef Types<OnTheFlyPrimeTable, PreCalculatedPrimeTable>\n    PrimeTableImplementations;\nINSTANTIATE_TYPED_TEST_SUITE_P(OnTheFlyAndPreCalculated,    // Instance name\n",
                      "markdown": "`// become part of the test case name and can be used in test filters.\n\n// The list of types we want to test.  Note that it doesn't have to be\n// defined at the time we write the TYPED_TEST_P()s.\ntypedef Types<OnTheFlyPrimeTable, PreCalculatedPrimeTable>\n    PrimeTableImplementations;\nINSTANTIATE_TYPED_TEST_SUITE_P(OnTheFlyAndPreCalculated,    // Instance name\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/samples/sample6_unittest.cc"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 2,
                  "endLine": 195,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    // The rest of the arguments are the test names.\n    ReturnsFalseForNonPrimes, ReturnsTrueForPrimes, CanGetNextPrime);\n\n// At this point the test pattern is done.  However, you don't have\n// any real test yet as you haven't said which types you want to run\n// the tests with.\n\n",
                    "rendered": {
                      "text": "    // The rest of the arguments are the test names.\n    ReturnsFalseForNonPrimes, ReturnsTrueForPrimes, CanGetNextPrime);\n\n// At this point the test pattern is done.  However, you don't have\n// any real test yet as you haven't said which types you want to run\n// the tests with.\n\n",
                      "markdown": "`    // The rest of the arguments are the test names.\n    ReturnsFalseForNonPrimes, ReturnsTrueForPrimes, CanGetNextPrime);\n\n// At this point the test pattern is done.  However, you don't have\n// any real test yet as you haven't said which types you want to run\n// the tests with.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/samples/sample6_unittest.cc"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 17,
                  "endLine": 207,
                  "endColumn": 23,
                  "snippet": {
                    "text": "// become part of the test case name and can be used in test filters.\n\n// The list of types we want to test.  Note that it doesn't have to be\n// defined at the time we write the TYPED_TEST_P()s.\ntypedef Types<OnTheFlyPrimeTable, PreCalculatedPrimeTable>\n    PrimeTableImplementations;\nINSTANTIATE_TYPED_TEST_SUITE_P(OnTheFlyAndPreCalculated,    // Instance name\n",
                    "rendered": {
                      "text": "// become part of the test case name and can be used in test filters.\n\n// The list of types we want to test.  Note that it doesn't have to be\n// defined at the time we write the TYPED_TEST_P()s.\ntypedef Types<OnTheFlyPrimeTable, PreCalculatedPrimeTable>\n    PrimeTableImplementations;\nINSTANTIATE_TYPED_TEST_SUITE_P(OnTheFlyAndPreCalculated,    // Instance name\n",
                      "markdown": "`// become part of the test case name and can be used in test filters.\n\n// The list of types we want to test.  Note that it doesn't have to be\n// defined at the time we write the TYPED_TEST_P()s.\ntypedef Types<OnTheFlyPrimeTable, PreCalculatedPrimeTable>\n    PrimeTableImplementations;\nINSTANTIATE_TYPED_TEST_SUITE_P(OnTheFlyAndPreCalculated,    // Instance name\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/samples/sample6_unittest.cc"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 29,
                  "endLine": 137,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n// Sometimes, however, you don't yet know all the types that you want\n// to test when you write the tests.  For example, if you are the\n// author of an interface and expect other people to implement it, you\n// might want to write a set of tests to make sure each implementation\n// conforms to some basic requirements, but you don't know what\n// implementations will be written in the future.\n",
                    "rendered": {
                      "text": "\n// Sometimes, however, you don't yet know all the types that you want\n// to test when you write the tests.  For example, if you are the\n// author of an interface and expect other people to implement it, you\n// might want to write a set of tests to make sure each implementation\n// conforms to some basic requirements, but you don't know what\n// implementations will be written in the future.\n",
                      "markdown": "`\n// Sometimes, however, you don't yet know all the types that you want\n// to test when you write the tests.  For example, if you are the\n// author of an interface and expect other people to implement it, you\n// might want to write a set of tests to make sure each implementation\n// conforms to some basic requirements, but you don't know what\n// implementations will be written in the future.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/samples/sample10_unittest.cc"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 30,
                  "endLine": 71,
                  "endColumn": 34,
                  "snippet": {
                    "text": "// This event listener monitors how many Water objects are created and\n// destroyed by each test, and reports a failure if a test leaks some Water\n// objects. It does this by comparing the number of live Water objects at\n// the beginning of a test and at the end of a test.\nclass LeakChecker : public EmptyTestEventListener {\n private:\n  // Called before a test starts.\n",
                    "rendered": {
                      "text": "// This event listener monitors how many Water objects are created and\n// destroyed by each test, and reports a failure if a test leaks some Water\n// objects. It does this by comparing the number of live Water objects at\n// the beginning of a test and at the end of a test.\nclass LeakChecker : public EmptyTestEventListener {\n private:\n  // Called before a test starts.\n",
                      "markdown": "`// This event listener monitors how many Water objects are created and\n// destroyed by each test, and reports a failure if a test leaks some Water\n// objects. It does this by comparing the number of live Water objects at\n// the beginning of a test and at the end of a test.\nclass LeakChecker : public EmptyTestEventListener {\n private:\n  // Called before a test starts.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/samples/sample10_unittest.cc"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 70,
                  "endLine": 71,
                  "snippet": {
                    "text": "\n// This event listener monitors how many Water objects are created and\n// destroyed by each test, and reports a failure if a test leaks some Water\n// objects. It does this by comparing the number of live Water objects at\n// the beginning of a test and at the end of a test.\nclass LeakChecker : public EmptyTestEventListener {\n private:\n  // Called before a test starts.\n",
                    "rendered": {
                      "text": "\n// This event listener monitors how many Water objects are created and\n// destroyed by each test, and reports a failure if a test leaks some Water\n// objects. It does this by comparing the number of live Water objects at\n// the beginning of a test and at the end of a test.\nclass LeakChecker : public EmptyTestEventListener {\n private:\n  // Called before a test starts.\n",
                      "markdown": "`\n// This event listener monitors how many Water objects are created and\n// destroyed by each test, and reports a failure if a test leaks some Water\n// objects. It does this by comparing the number of live Water objects at\n// the beginning of a test and at the end of a test.\nclass LeakChecker : public EmptyTestEventListener {\n private:\n  // Called before a test starts.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googletest/samples/sample10_unittest.cc"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 45,
                  "endLine": 49,
                  "endColumn": 54,
                  "snippet": {
                    "text": " public:\n  // Normal Water declarations go here.\n\n  // operator new and operator delete help us control water allocation.\n  void* operator new(size_t allocation_size) {\n    allocated_++;\n    return malloc(allocation_size);\n",
                    "rendered": {
                      "text": " public:\n  // Normal Water declarations go here.\n\n  // operator new and operator delete help us control water allocation.\n  void* operator new(size_t allocation_size) {\n    allocated_++;\n    return malloc(allocation_size);\n",
                      "markdown": "` public:\n  // Normal Water declarations go here.\n\n  // operator new and operator delete help us control water allocation.\n  void* operator new(size_t allocation_size) {\n    allocated_++;\n    return malloc(allocation_size);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 2861,
                  "startColumn": 27,
                  "endLine": 2861,
                  "endColumn": 32,
                  "snippet": {
                    "text": " public:\n  MOCK_METHOD(bool, DoShareBuzz, (Buzz* buzz, Time timestamp));\n  bool ShareBuzz(std::unique_ptr<Buzz> buzz, Time timestamp) override {\n    return DoShareBuzz(buzz.get(), timestamp);\n  }\n};\n```\n",
                    "rendered": {
                      "text": " public:\n  MOCK_METHOD(bool, DoShareBuzz, (Buzz* buzz, Time timestamp));\n  bool ShareBuzz(std::unique_ptr<Buzz> buzz, Time timestamp) override {\n    return DoShareBuzz(buzz.get(), timestamp);\n  }\n};\n```\n",
                      "markdown": "` public:\n  MOCK_METHOD(bool, DoShareBuzz, (Buzz* buzz, Time timestamp));\n  bool ShareBuzz(std::unique_ptr<Buzz> buzz, Time timestamp) override {\n    return DoShareBuzz(buzz.get(), timestamp);\n  }\n};\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 4322,
                  "startColumn": 53,
                  "endLine": 4322,
                  "endColumn": 57,
                  "snippet": {
                    "text": "containers, and any type that supports the `<<` operator. For other types, it\nprints the raw bytes in the value and hopes that you the user can figure it out.\n[The GoogleTest advanced guide](advanced.md#teaching-googletest-how-to-print-your-values)\nexplains how to extend the printer to do a better job at printing your\nparticular type than to dump the bytes.\n\n## Useful Mocks Created Using gMock\n",
                    "rendered": {
                      "text": "containers, and any type that supports the `<<` operator. For other types, it\nprints the raw bytes in the value and hopes that you the user can figure it out.\n[The GoogleTest advanced guide](advanced.md#teaching-googletest-how-to-print-your-values)\nexplains how to extend the printer to do a better job at printing your\nparticular type than to dump the bytes.\n\n## Useful Mocks Created Using gMock\n",
                      "markdown": "`containers, and any type that supports the `<<` operator. For other types, it\nprints the raw bytes in the value and hopes that you the user can figure it out.\n[The GoogleTest advanced guide](advanced.md#teaching-googletest-how-to-print-your-values)\nexplains how to extend the printer to do a better job at printing your\nparticular type than to dump the bytes.\n\n## Useful Mocks Created Using gMock\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 3911,
                  "startColumn": 66,
                  "endLine": 3911,
                  "endColumn": 70,
                  "snippet": {
                    "text": "called repeatedly whereas `OnceAction` requires only move-constructible and\nsupports `&&`-qualified call operators), but can be used only with `WillOnce`.\n`OnceAction` is typically relevant only when supporting move-only types or\nactions that want a type-system guarantee that they will be called at most once.\n\nTypically the `OnceAction` and `Action` templates need not be referenced\ndirectly in your actions: a struct or class with a call operator is sufficient,\n",
                    "rendered": {
                      "text": "called repeatedly whereas `OnceAction` requires only move-constructible and\nsupports `&&`-qualified call operators), but can be used only with `WillOnce`.\n`OnceAction` is typically relevant only when supporting move-only types or\nactions that want a type-system guarantee that they will be called at most once.\n\nTypically the `OnceAction` and `Action` templates need not be referenced\ndirectly in your actions: a struct or class with a call operator is sufficient,\n",
                      "markdown": "`called repeatedly whereas `OnceAction` requires only move-constructible and\nsupports `&&`-qualified call operators), but can be used only with `WillOnce`.\n`OnceAction` is typically relevant only when supporting move-only types or\nactions that want a type-system guarantee that they will be called at most once.\n\nTypically the `OnceAction` and `Action` templates need not be referenced\ndirectly in your actions: a struct or class with a call operator is sufficient,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 3891,
                  "startColumn": 49,
                  "endLine": 3891,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n```cpp\n// An action that contains move-only types and has an &&-qualified operator,\n// demanding in the type system that it be called at most once. This can be\n// used with WillOnce, but the compiler will reject it if handed to\n// WillRepeatedly.\nstruct MoveOnlyAction {\n",
                    "rendered": {
                      "text": "\n```cpp\n// An action that contains move-only types and has an &&-qualified operator,\n// demanding in the type system that it be called at most once. This can be\n// used with WillOnce, but the compiler will reject it if handed to\n// WillRepeatedly.\nstruct MoveOnlyAction {\n",
                      "markdown": "`\n```cpp\n// An action that contains move-only types and has an &&-qualified operator,\n// demanding in the type system that it be called at most once. This can be\n// used with WillOnce, but the compiler will reject it if handed to\n// WillRepeatedly.\nstruct MoveOnlyAction {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 3886,
                  "startColumn": 68,
                  "endLine": 3886,
                  "endColumn": 72,
                  "snippet": {
                    "text": "EXPECT_EQ(mock.AsStdFunction()(0), 17);\n```\n\nWhen used with `WillOnce`, the callable can assume it will be called at most\nonce and is allowed to be a move-only type:\n\n```cpp\n",
                    "rendered": {
                      "text": "EXPECT_EQ(mock.AsStdFunction()(0), 17);\n```\n\nWhen used with `WillOnce`, the callable can assume it will be called at most\nonce and is allowed to be a move-only type:\n\n```cpp\n",
                      "markdown": "`EXPECT_EQ(mock.AsStdFunction()(0), 17);\n```\n\nWhen used with `WillOnce`, the callable can assume it will be called at most\nonce and is allowed to be a move-only type:\n\n```cpp\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 3562,
                  "startColumn": 67,
                  "endLine": 3562,
                  "endColumn": 76,
                  "snippet": {
                    "text": "While it's tempting to always use the `MATCHER*` macros when defining a new\nmatcher, you should also consider implementing the matcher interface directly\ninstead (see the recipes that follow), especially if you need to use the matcher\na lot. While these approaches require more work, they give you more control on\nthe types of the value being matched and the matcher parameters, which in\ngeneral leads to better compiler error messages that pay off in the long run.\nThey also allow overloading matchers based on parameter types (as opposed to\n",
                    "rendered": {
                      "text": "While it's tempting to always use the `MATCHER*` macros when defining a new\nmatcher, you should also consider implementing the matcher interface directly\ninstead (see the recipes that follow), especially if you need to use the matcher\na lot. While these approaches require more work, they give you more control on\nthe types of the value being matched and the matcher parameters, which in\ngeneral leads to better compiler error messages that pay off in the long run.\nThey also allow overloading matchers based on parameter types (as opposed to\n",
                      "markdown": "`While it's tempting to always use the `MATCHER*` macros when defining a new\nmatcher, you should also consider implementing the matcher interface directly\ninstead (see the recipes that follow), especially if you need to use the matcher\na lot. While these approaches require more work, they give you more control on\nthe types of the value being matched and the matcher parameters, which in\ngeneral leads to better compiler error messages that pay off in the long run.\nThey also allow overloading matchers based on parameter types (as opposed to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 3197,
                  "startColumn": 48,
                  "endLine": 3197,
                  "endColumn": 52,
                  "snippet": {
                    "text": "`EXPECT_CALL`s and mock method calls as they are made? For each call, would you\nlike to see its actual argument values and which `EXPECT_CALL` gMock thinks it\nmatches? If you still need some help to figure out who made these calls, how\nabout being able to see the complete stack trace at each mock call?\n\nYou can unlock this power by running your test with the `--gmock_verbose=info`\nflag. For example, given the test program:\n",
                    "rendered": {
                      "text": "`EXPECT_CALL`s and mock method calls as they are made? For each call, would you\nlike to see its actual argument values and which `EXPECT_CALL` gMock thinks it\nmatches? If you still need some help to figure out who made these calls, how\nabout being able to see the complete stack trace at each mock call?\n\nYou can unlock this power by running your test with the `--gmock_verbose=info`\nflag. For example, given the test program:\n",
                      "markdown": "``EXPECT_CALL`s and mock method calls as they are made? For each call, would you\nlike to see its actual argument values and which `EXPECT_CALL` gMock thinks it\nmatches? If you still need some help to figure out who made these calls, how\nabout being able to see the complete stack trace at each mock call?\n\nYou can unlock this power by running your test with the `--gmock_verbose=info`\nflag. For example, given the test program:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 3181,
                  "startColumn": 39,
                  "endLine": 3181,
                  "endColumn": 48,
                  "snippet": {
                    "text": "```\n\nIf you find gMock printing too many stack frames with its informational or\nwarning messages, remember that you can control their amount with the\n`--gtest_stack_trace_depth=max_depth` flag.\n\nNow, judiciously use the right flag to enable gMock serve you better!\n",
                    "rendered": {
                      "text": "```\n\nIf you find gMock printing too many stack frames with its informational or\nwarning messages, remember that you can control their amount with the\n`--gtest_stack_trace_depth=max_depth` flag.\n\nNow, judiciously use the right flag to enable gMock serve you better!\n",
                      "markdown": "````\n\nIf you find gMock printing too many stack frames with its informational or\nwarning messages, remember that you can control their amount with the\n`--gtest_stack_trace_depth=max_depth` flag.\n\nNow, judiciously use the right flag to enable gMock serve you better!\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 3166,
                  "startColumn": 19,
                  "endLine": 3166,
                  "endColumn": 23,
                  "snippet": {
                    "text": "command-line flag, where `LEVEL` is a string with three possible values:\n\n*   `info`: gMock will print all informational messages, warnings, and errors\n    (most verbose). At this setting, gMock will also log any calls to the\n    `ON_CALL/EXPECT_CALL` macros. It will include a stack trace in\n    \"uninteresting call\" warnings.\n*   `warning`: gMock will print both warnings and errors (less verbose); it will\n",
                    "rendered": {
                      "text": "command-line flag, where `LEVEL` is a string with three possible values:\n\n*   `info`: gMock will print all informational messages, warnings, and errors\n    (most verbose). At this setting, gMock will also log any calls to the\n    `ON_CALL/EXPECT_CALL` macros. It will include a stack trace in\n    \"uninteresting call\" warnings.\n*   `warning`: gMock will print both warnings and errors (less verbose); it will\n",
                      "markdown": "`command-line flag, where `LEVEL` is a string with three possible values:\n\n*   `info`: gMock will print all informational messages, warnings, and errors\n    (most verbose). At this setting, gMock will also log any calls to the\n    `ON_CALL/EXPECT_CALL` macros. It will include a stack trace in\n    \"uninteresting call\" warnings.\n*   `warning`: gMock will print both warnings and errors (less verbose); it will\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 3162,
                  "startColumn": 7,
                  "endLine": 3162,
                  "endColumn": 16,
                  "snippet": {
                    "text": "observe every mock call that happens (including argument values, the return\nvalue, and the stack trace). Clearly, one size doesn't fit all.\n\nYou can control how much gMock tells you using the `--gmock_verbose=LEVEL`\ncommand-line flag, where `LEVEL` is a string with three possible values:\n\n*   `info`: gMock will print all informational messages, warnings, and errors\n",
                    "rendered": {
                      "text": "observe every mock call that happens (including argument values, the return\nvalue, and the stack trace). Clearly, one size doesn't fit all.\n\nYou can control how much gMock tells you using the `--gmock_verbose=LEVEL`\ncommand-line flag, where `LEVEL` is a string with three possible values:\n\n*   `info`: gMock will print all informational messages, warnings, and errors\n",
                      "markdown": "`observe every mock call that happens (including argument values, the return\nvalue, and the stack trace). Clearly, one size doesn't fit all.\n\nYou can control how much gMock tells you using the `--gmock_verbose=LEVEL`\ncommand-line flag, where `LEVEL` is a string with three possible values:\n\n*   `info`: gMock will print all informational messages, warnings, and errors\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 3043,
                  "startColumn": 59,
                  "endLine": 3043,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n### Mocking Destructors\n\nSometimes you want to make sure a mock object is destructed at the right time,\ne.g. after `bar->A()` is called but before `bar->B()` is called. We already know\nthat you can specify constraints on the [order](#OrderedCalls) of mock function\ncalls, so all we need to do is to mock the destructor of the mock function.\n",
                    "rendered": {
                      "text": "\n### Mocking Destructors\n\nSometimes you want to make sure a mock object is destructed at the right time,\ne.g. after `bar->A()` is called but before `bar->B()` is called. We already know\nthat you can specify constraints on the [order](#OrderedCalls) of mock function\ncalls, so all we need to do is to mock the destructor of the mock function.\n",
                      "markdown": "`\n### Mocking Destructors\n\nSometimes you want to make sure a mock object is destructed at the right time,\ne.g. after `bar->A()` is called but before `bar->B()` is called. We already know\nthat you can specify constraints on the [order](#OrderedCalls) of mock function\ncalls, so all we need to do is to mock the destructor of the mock function.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 3000,
                  "startColumn": 38,
                  "endLine": 3000,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\nA technique you can use is to put the expectations in a sequence and insert\ncalls to a dummy \"checkpoint\" function at specific places. Then you can verify\nthat the mock function calls do happen at the right time. For example, if you\nare exercising the code:\n\n```cpp\n",
                    "rendered": {
                      "text": "\nA technique you can use is to put the expectations in a sequence and insert\ncalls to a dummy \"checkpoint\" function at specific places. Then you can verify\nthat the mock function calls do happen at the right time. For example, if you\nare exercising the code:\n\n```cpp\n",
                      "markdown": "`\nA technique you can use is to put the expectations in a sequence and insert\ncalls to a dummy \"checkpoint\" function at specific places. Then you can verify\nthat the mock function calls do happen at the right time. For example, if you\nare exercising the code:\n\n```cpp\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 2999,
                  "startColumn": 38,
                  "endLine": 2999,
                  "endColumn": 42,
                  "snippet": {
                    "text": "which API calls invoke which mock functions.\n\nA technique you can use is to put the expectations in a sequence and insert\ncalls to a dummy \"checkpoint\" function at specific places. Then you can verify\nthat the mock function calls do happen at the right time. For example, if you\nare exercising the code:\n\n",
                    "rendered": {
                      "text": "which API calls invoke which mock functions.\n\nA technique you can use is to put the expectations in a sequence and insert\ncalls to a dummy \"checkpoint\" function at specific places. Then you can verify\nthat the mock function calls do happen at the right time. For example, if you\nare exercising the code:\n\n",
                      "markdown": "`which API calls invoke which mock functions.\n\nA technique you can use is to put the expectations in a sequence and insert\ncalls to a dummy \"checkpoint\" function at specific places. Then you can verify\nthat the mock function calls do happen at the right time. For example, if you\nare exercising the code:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 2520,
                  "startColumn": 64,
                  "endLine": 2520,
                  "endColumn": 68,
                  "snippet": {
                    "text": "WithArgs<N1, N2, ..., Nk>(action)\n```\n\ncreates an action that passes the arguments of the mock function at the given\nindices (0-based) to the inner `action` and performs it. Using `WithArgs`, our\noriginal example can be written as:\n\n",
                    "rendered": {
                      "text": "WithArgs<N1, N2, ..., Nk>(action)\n```\n\ncreates an action that passes the arguments of the mock function at the given\nindices (0-based) to the inner `action` and performs it. Using `WithArgs`, our\noriginal example can be written as:\n\n",
                      "markdown": "`WithArgs<N1, N2, ..., Nk>(action)\n```\n\ncreates an action that passes the arguments of the mock function at the given\nindices (0-based) to the inner `action` and performs it. Using `WithArgs`, our\noriginal example can be written as:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 2151,
                  "startColumn": 50,
                  "endLine": 2151,
                  "endColumn": 54,
                  "snippet": {
                    "text": "You've learned how to change the default value of a given type. However, this\nmay be too coarse for your purpose: perhaps you have two mock methods with the\nsame return type and you want them to have different behaviors. The `ON_CALL()`\nmacro allows you to customize your mock's behavior at the method level:\n\n```cpp\nusing ::testing::_;\n",
                    "rendered": {
                      "text": "You've learned how to change the default value of a given type. However, this\nmay be too coarse for your purpose: perhaps you have two mock methods with the\nsame return type and you want them to have different behaviors. The `ON_CALL()`\nmacro allows you to customize your mock's behavior at the method level:\n\n```cpp\nusing ::testing::_;\n",
                      "markdown": "`You've learned how to change the default value of a given type. However, this\nmay be too coarse for your purpose: perhaps you have two mock methods with the\nsame return type and you want them to have different behaviors. The `ON_CALL()`\nmacro allows you to customize your mock's behavior at the method level:\n\n```cpp\nusing ::testing::_;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 1895,
                  "startColumn": 41,
                  "endLine": 1895,
                  "endColumn": 45,
                  "snippet": {
                    "text": "the expectation is set, and `Return(std::ref(x))` will always return 0.\n\n`ReturnPointee(pointer)` was provided to solve this problem specifically. It\nreturns the value pointed to by `pointer` at the time the action is *executed*:\n\n```cpp\nusing ::testing::ReturnPointee;\n",
                    "rendered": {
                      "text": "the expectation is set, and `Return(std::ref(x))` will always return 0.\n\n`ReturnPointee(pointer)` was provided to solve this problem specifically. It\nreturns the value pointed to by `pointer` at the time the action is *executed*:\n\n```cpp\nusing ::testing::ReturnPointee;\n",
                      "markdown": "`the expectation is set, and `Return(std::ref(x))` will always return 0.\n\n`ReturnPointee(pointer)` was provided to solve this problem specifically. It\nreturns the value pointed to by `pointer` at the time the action is *executed*:\n\n```cpp\nusing ::testing::ReturnPointee;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 1888,
                  "startColumn": 20,
                  "endLine": 1888,
                  "endColumn": 24,
                  "snippet": {
                    "text": "```\n\nThe reason is that `Return(*value*)` converts `value` to the actual return type\nof the mock function at the time when the action is *created*, not when it is\n*executed*. (This behavior was chosen for the action to be safe when `value` is\na proxy object that references some temporary objects.) As a result,\n`std::ref(x)` is converted to an `int` value (instead of a `const int&`) when\n",
                    "rendered": {
                      "text": "```\n\nThe reason is that `Return(*value*)` converts `value` to the actual return type\nof the mock function at the time when the action is *created*, not when it is\n*executed*. (This behavior was chosen for the action to be safe when `value` is\na proxy object that references some temporary objects.) As a result,\n`std::ref(x)` is converted to an `int` value (instead of a `const int&`) when\n",
                      "markdown": "````\n\nThe reason is that `Return(*value*)` converts `value` to the actual return type\nof the mock function at the time when the action is *created*, not when it is\n*executed*. (This behavior was chosen for the action to be safe when `value` is\na proxy object that references some temporary objects.) As a result,\n`std::ref(x)` is converted to an `int` value (instead of a `const int&`) when\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 1851,
                  "startColumn": 54,
                  "endLine": 1851,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\nThe `Return(x)` action saves a copy of `x` when the action is created, and\nalways returns the same value whenever it's executed. Sometimes you may want to\ninstead return the *live* value of `x` (i.e. its value at the time when the\naction is *executed*.). Use either `ReturnRef()` or `ReturnPointee()` for this\npurpose.\n\n",
                    "rendered": {
                      "text": "\nThe `Return(x)` action saves a copy of `x` when the action is created, and\nalways returns the same value whenever it's executed. Sometimes you may want to\ninstead return the *live* value of `x` (i.e. its value at the time when the\naction is *executed*.). Use either `ReturnRef()` or `ReturnPointee()` for this\npurpose.\n\n",
                      "markdown": "`\nThe `Return(x)` action saves a copy of `x` when the action is created, and\nalways returns the same value whenever it's executed. Sometimes you may want to\ninstead return the *live* value of `x` (i.e. its value at the time when the\naction is *executed*.). Use either `ReturnRef()` or `ReturnPointee()` for this\npurpose.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 1618,
                  "startColumn": 10,
                  "endLine": 1618,
                  "endColumn": 14,
                  "snippet": {
                    "text": "A **strict mock** turns uninteresting call warnings into errors. So making a\nmock strict may change the test's result.\n\nLet's look at an example:\n\n```cpp\nTEST(...) {\n",
                    "rendered": {
                      "text": "A **strict mock** turns uninteresting call warnings into errors. So making a\nmock strict may change the test's result.\n\nLet's look at an example:\n\n```cpp\nTEST(...) {\n",
                      "markdown": "`A **strict mock** turns uninteresting call warnings into errors. So making a\nmock strict may change the test's result.\n\nLet's look at an example:\n\n```cpp\nTEST(...) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 1589,
                  "startColumn": 14,
                  "endLine": 1589,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\nA call `x.Y(...)` is **uninteresting** if there's *not even a single*\n`EXPECT_CALL(x, Y(...))` set. In other words, the test isn't interested in the\n`x.Y()` method at all, as evident in that the test doesn't care to say anything\nabout it.\n\nA call `x.Y(...)` is **unexpected** if there are *some* `EXPECT_CALL(x,\n",
                    "rendered": {
                      "text": "\nA call `x.Y(...)` is **uninteresting** if there's *not even a single*\n`EXPECT_CALL(x, Y(...))` set. In other words, the test isn't interested in the\n`x.Y()` method at all, as evident in that the test doesn't care to say anything\nabout it.\n\nA call `x.Y(...)` is **unexpected** if there are *some* `EXPECT_CALL(x,\n",
                      "markdown": "`\nA call `x.Y(...)` is **uninteresting** if there's *not even a single*\n`EXPECT_CALL(x, Y(...))` set. In other words, the test isn't interested in the\n`x.Y()` method at all, as evident in that the test doesn't care to say anything\nabout it.\n\nA call `x.Y(...)` is **unexpected** if there are *some* `EXPECT_CALL(x,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 1558,
                  "startColumn": 36,
                  "endLine": 1558,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n### Disallowing Unexpected Calls\n\nIf a mock method shouldn't be called at all, explicitly say so:\n\n```cpp\nusing ::testing::_;\n",
                    "rendered": {
                      "text": "\n### Disallowing Unexpected Calls\n\nIf a mock method shouldn't be called at all, explicitly say so:\n\n```cpp\nusing ::testing::_;\n",
                      "markdown": "`\n### Disallowing Unexpected Calls\n\nIf a mock method shouldn't be called at all, explicitly say so:\n\n```cpp\nusing ::testing::_;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 1315,
                  "startColumn": 11,
                  "endLine": 1315,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\nFor more advanced cases, you may need to define your own matcher class. A custom\nmatcher allows you to test a specific invariant property of that object. Let's\ntake a look at how to do so.\n\nImagine you have a mock function that takes an object of type `Foo`, which has\nan `int bar()` method and an `int baz()` method. You want to constrain that the\n",
                    "rendered": {
                      "text": "\nFor more advanced cases, you may need to define your own matcher class. A custom\nmatcher allows you to test a specific invariant property of that object. Let's\ntake a look at how to do so.\n\nImagine you have a mock function that takes an object of type `Foo`, which has\nan `int bar()` method and an `int baz()` method. You want to constrain that the\n",
                      "markdown": "`\nFor more advanced cases, you may need to define your own matcher class. A custom\nmatcher allows you to test a specific invariant property of that object. Let's\ntake a look at how to do so.\n\nImagine you have a mock function that takes an object of type `Foo`, which has\nan `int bar()` method and an `int baz()` method. You want to constrain that the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 1244,
                  "startColumn": 50,
                  "endLine": 1244,
                  "endColumn": 54,
                  "snippet": {
                    "text": "matches a plain pointer `p` where `p->number >= 3`. If `p` is `NULL`, the match\nwill always fail regardless of the inner matcher.\n\nWhat if you want to validate more than one members at the same time? Remember\nthat there are [`AllOf()` and `AllOfArray()`](#CombiningMatchers).\n\nFinally `Field()` and `Property()` provide overloads that take the field or\n",
                    "rendered": {
                      "text": "matches a plain pointer `p` where `p->number >= 3`. If `p` is `NULL`, the match\nwill always fail regardless of the inner matcher.\n\nWhat if you want to validate more than one members at the same time? Remember\nthat there are [`AllOf()` and `AllOfArray()`](#CombiningMatchers).\n\nFinally `Field()` and `Property()` provide overloads that take the field or\n",
                      "markdown": "`matches a plain pointer `p` where `p->number >= 3`. If `p` is `NULL`, the match\nwill always fail regardless of the inner matcher.\n\nWhat if you want to validate more than one members at the same time? Remember\nthat there are [`AllOf()` and `AllOfArray()`](#CombiningMatchers).\n\nFinally `Field()` and `Property()` provide overloads that take the field or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 820,
                  "startColumn": 51,
                  "endLine": 820,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\nSometimes you may want to call `Foo::Concrete()` instead of\n`MockFoo::Concrete()`. Perhaps you want to do it as part of a stub action, or\nperhaps your test doesn't need to mock `Concrete()` at all (but it would be\noh-so painful to have to define a new mock class whenever you don't need to mock\none of its methods).\n\n",
                    "rendered": {
                      "text": "\nSometimes you may want to call `Foo::Concrete()` instead of\n`MockFoo::Concrete()`. Perhaps you want to do it as part of a stub action, or\nperhaps your test doesn't need to mock `Concrete()` at all (but it would be\noh-so painful to have to define a new mock class whenever you don't need to mock\none of its methods).\n\n",
                      "markdown": "`\nSometimes you may want to call `Foo::Concrete()` instead of\n`MockFoo::Concrete()`. Perhaps you want to do it as part of a stub action, or\nperhaps your test doesn't need to mock `Concrete()` at all (but it would be\noh-so painful to have to define a new mock class whenever you don't need to mock\none of its methods).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 572,
                  "startColumn": 72,
                  "endLine": 573,
                  "snippet": {
                    "text": "Try not to do that.\n\nMaking a non-virtual function virtual is a big decision. It creates an extension\npoint where subclasses can tweak your class' behavior. This weakens your control\non the class because now it's harder to maintain the class invariants. You\nshould make a function virtual only when there is a valid reason for a subclass\nto override it.\n\n",
                    "rendered": {
                      "text": "Try not to do that.\n\nMaking a non-virtual function virtual is a big decision. It creates an extension\npoint where subclasses can tweak your class' behavior. This weakens your control\non the class because now it's harder to maintain the class invariants. You\nshould make a function virtual only when there is a valid reason for a subclass\nto override it.\n\n",
                      "markdown": "`Try not to do that.\n\nMaking a non-virtual function virtual is a big decision. It creates an extension\npoint where subclasses can tweak your class' behavior. This weakens your control\non the class because now it's harder to maintain the class invariants. You\nshould make a function virtual only when there is a valid reason for a subclass\nto override it.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 483,
                  "startColumn": 17,
                  "endLine": 483,
                  "endColumn": 25,
                  "snippet": {
                    "text": "Finally, you should be **very cautious** about when to use naggy or strict\nmocks, as they tend to make tests more brittle and harder to maintain. When you\nrefactor your code without changing its externally visible behavior, ideally you\nshouldn't need to update any tests. If your code interacts with a naggy mock,\nhowever, you may start to get spammed with warnings as the result of your\nchange. Worse, if your code interacts with a strict mock, your tests may start\nto fail and you'll be forced to fix them. Our general recommendation is to use\n",
                    "rendered": {
                      "text": "Finally, you should be **very cautious** about when to use naggy or strict\nmocks, as they tend to make tests more brittle and harder to maintain. When you\nrefactor your code without changing its externally visible behavior, ideally you\nshouldn't need to update any tests. If your code interacts with a naggy mock,\nhowever, you may start to get spammed with warnings as the result of your\nchange. Worse, if your code interacts with a strict mock, your tests may start\nto fail and you'll be forced to fix them. Our general recommendation is to use\n",
                      "markdown": "`Finally, you should be **very cautious** about when to use naggy or strict\nmocks, as they tend to make tests more brittle and harder to maintain. When you\nrefactor your code without changing its externally visible behavior, ideally you\nshouldn't need to update any tests. If your code interacts with a naggy mock,\nhowever, you may start to get spammed with warnings as the result of your\nchange. Worse, if your code interacts with a strict mock, your tests may start\nto fail and you'll be forced to fix them. Our general recommendation is to use\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 75,
                  "endLine": 220,
                  "snippet": {
                    "text": "\nNext, you need a way to say that you want to use `ConcretePacketStream` in\nproduction code, and use `MockPacketStream` in tests. Since the functions are\nnot virtual and the two classes are unrelated, you must specify your choice at\n*compile time* (as opposed to run time).\n\nOne way to do it is to templatize your code that needs to use a packet stream.\nMore specifically, you will give your code a template type argument for the type\n",
                    "rendered": {
                      "text": "\nNext, you need a way to say that you want to use `ConcretePacketStream` in\nproduction code, and use `MockPacketStream` in tests. Since the functions are\nnot virtual and the two classes are unrelated, you must specify your choice at\n*compile time* (as opposed to run time).\n\nOne way to do it is to templatize your code that needs to use a packet stream.\nMore specifically, you will give your code a template type argument for the type\n",
                      "markdown": "`\nNext, you need a way to say that you want to use `ConcretePacketStream` in\nproduction code, and use `MockPacketStream` in tests. Since the functions are\nnot virtual and the two classes are unrelated, you must specify your choice at\n*compile time* (as opposed to run time).\n\nOne way to do it is to templatize your code that needs to use a packet stream.\nMore specifically, you will give your code a template type argument for the type\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 3794,
                  "startColumn": 67,
                  "endLine": 3794,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\n### Writing New Cardinalities\n\nA cardinality is used in `Times()` to tell gMock how many times you expect a\ncall to occur. It doesn't have to be exact. For example, you can say\n`AtLeast(5)` or `Between(2, 4)`.\n\n",
                    "rendered": {
                      "text": "\n### Writing New Cardinalities\n\nA cardinality is used in `Times()` to tell gMock how many times you expect a\ncall to occur. It doesn't have to be exact. For example, you can say\n`AtLeast(5)` or `Between(2, 4)`.\n\n",
                      "markdown": "`\n### Writing New Cardinalities\n\nA cardinality is used in `Times()` to tell gMock how many times you expect a\ncall to occur. It doesn't have to be exact. For example, you can say\n`AtLeast(5)` or `Between(2, 4)`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 3741,
                  "startColumn": 24,
                  "endLine": 3741,
                  "endColumn": 30,
                  "snippet": {
                    "text": "};\n```\n\nFortunately, most of the time you can define a polymorphic matcher easily with\nthe help of `MakePolymorphicMatcher()`. Here's how you can define `NotNull()` as\nan example:\n\n",
                    "rendered": {
                      "text": "};\n```\n\nFortunately, most of the time you can define a polymorphic matcher easily with\nthe help of `MakePolymorphicMatcher()`. Here's how you can define `NotNull()` as\nan example:\n\n",
                      "markdown": "`};\n```\n\nFortunately, most of the time you can define a polymorphic matcher easily with\nthe help of `MakePolymorphicMatcher()`. Here's how you can define `NotNull()` as\nan example:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 3266,
                  "startColumn": 34,
                  "endLine": 3266,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n### Running Tests in Emacs\n\nIf you build and run your tests in Emacs using the `M-x google-compile` command\n(as many googletest users do), the source file locations of gMock and googletest\nerrors will be highlighted. Just press `<Enter>` on one of them and you'll be\ntaken to the offending line. Or, you can just type `C-x`` to jump to the next\n",
                    "rendered": {
                      "text": "\n### Running Tests in Emacs\n\nIf you build and run your tests in Emacs using the `M-x google-compile` command\n(as many googletest users do), the source file locations of gMock and googletest\nerrors will be highlighted. Just press `<Enter>` on one of them and you'll be\ntaken to the offending line. Or, you can just type `C-x`` to jump to the next\n",
                      "markdown": "`\n### Running Tests in Emacs\n\nIf you build and run your tests in Emacs using the `M-x google-compile` command\n(as many googletest users do), the source file locations of gMock and googletest\nerrors will be highlighted. Just press `<Enter>` on one of them and you'll be\ntaken to the offending line. Or, you can just type `C-x`` to jump to the next\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 3264,
                  "startColumn": 20,
                  "endLine": 3265,
                  "snippet": {
                    "text": "combine `--gmock_verbose=info` with `--gtest_stack_trace_depth=0` on the test\ncommand line.\n\n### Running Tests in Emacs\n\nIf you build and run your tests in Emacs using the `M-x google-compile` command\n(as many googletest users do), the source file locations of gMock and googletest\nerrors will be highlighted. Just press `<Enter>` on one of them and you'll be\n",
                    "rendered": {
                      "text": "combine `--gmock_verbose=info` with `--gtest_stack_trace_depth=0` on the test\ncommand line.\n\n### Running Tests in Emacs\n\nIf you build and run your tests in Emacs using the `M-x google-compile` command\n(as many googletest users do), the source file locations of gMock and googletest\nerrors will be highlighted. Just press `<Enter>` on one of them and you'll be\n",
                      "markdown": "`combine `--gmock_verbose=info` with `--gtest_stack_trace_depth=0` on the test\ncommand line.\n\n### Running Tests in Emacs\n\nIf you build and run your tests in Emacs using the `M-x google-compile` command\n(as many googletest users do), the source file locations of gMock and googletest\nerrors will be highlighted. Just press `<Enter>` on one of them and you'll be\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 3193,
                  "startColumn": 11,
                  "endLine": 3193,
                  "endColumn": 17,
                  "snippet": {
                    "text": "matchers? Did you mess up the order of the `EXPECT_CALL`s? Or is the code under\ntest doing something wrong? How can you find out the cause?\n\nWon't it be nice if you have X-ray vision and can actually see the trace of all\n`EXPECT_CALL`s and mock method calls as they are made? For each call, would you\nlike to see its actual argument values and which `EXPECT_CALL` gMock thinks it\nmatches? If you still need some help to figure out who made these calls, how\n",
                    "rendered": {
                      "text": "matchers? Did you mess up the order of the `EXPECT_CALL`s? Or is the code under\ntest doing something wrong? How can you find out the cause?\n\nWon't it be nice if you have X-ray vision and can actually see the trace of all\n`EXPECT_CALL`s and mock method calls as they are made? For each call, would you\nlike to see its actual argument values and which `EXPECT_CALL` gMock thinks it\nmatches? If you still need some help to figure out who made these calls, how\n",
                      "markdown": "`matchers? Did you mess up the order of the `EXPECT_CALL`s? Or is the code under\ntest doing something wrong? How can you find out the cause?\n\nWon't it be nice if you have X-ray vision and can actually see the trace of all\n`EXPECT_CALL`s and mock method calls as they are made? For each call, would you\nlike to see its actual argument values and which `EXPECT_CALL` gMock thinks it\nmatches? If you still need some help to figure out who made these calls, how\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 3191,
                  "startColumn": 39,
                  "endLine": 3191,
                  "endColumn": 45,
                  "snippet": {
                    "text": "You have a test using gMock. It fails: gMock tells you some expectations aren't\nsatisfied. However, you aren't sure why: Is there a typo somewhere in the\nmatchers? Did you mess up the order of the `EXPECT_CALL`s? Or is the code under\ntest doing something wrong? How can you find out the cause?\n\nWon't it be nice if you have X-ray vision and can actually see the trace of all\n`EXPECT_CALL`s and mock method calls as they are made? For each call, would you\n",
                    "rendered": {
                      "text": "You have a test using gMock. It fails: gMock tells you some expectations aren't\nsatisfied. However, you aren't sure why: Is there a typo somewhere in the\nmatchers? Did you mess up the order of the `EXPECT_CALL`s? Or is the code under\ntest doing something wrong? How can you find out the cause?\n\nWon't it be nice if you have X-ray vision and can actually see the trace of all\n`EXPECT_CALL`s and mock method calls as they are made? For each call, would you\n",
                      "markdown": "`You have a test using gMock. It fails: gMock tells you some expectations aren't\nsatisfied. However, you aren't sure why: Is there a typo somewhere in the\nmatchers? Did you mess up the order of the `EXPECT_CALL`s? Or is the code under\ntest doing something wrong? How can you find out the cause?\n\nWon't it be nice if you have X-ray vision and can actually see the trace of all\n`EXPECT_CALL`s and mock method calls as they are made? For each call, would you\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 3180,
                  "startColumn": 6,
                  "endLine": 3180,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  ::testing::FLAGS_gmock_verbose = \"error\";\n```\n\nIf you find gMock printing too many stack frames with its informational or\nwarning messages, remember that you can control their amount with the\n`--gtest_stack_trace_depth=max_depth` flag.\n\n",
                    "rendered": {
                      "text": "  ::testing::FLAGS_gmock_verbose = \"error\";\n```\n\nIf you find gMock printing too many stack frames with its informational or\nwarning messages, remember that you can control their amount with the\n`--gtest_stack_trace_depth=max_depth` flag.\n\n",
                      "markdown": "`  ::testing::FLAGS_gmock_verbose = \"error\";\n```\n\nIf you find gMock printing too many stack frames with its informational or\nwarning messages, remember that you can control their amount with the\n`--gtest_stack_trace_depth=max_depth` flag.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 3158,
                  "startColumn": 60,
                  "endLine": 3158,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\nSometimes you are confident that your tests are correct and may not appreciate\nsuch friendly messages. Some other times, you are debugging your tests or\nlearning about the behavior of the code you are testing, and wish you could\nobserve every mock call that happens (including argument values, the return\nvalue, and the stack trace). Clearly, one size doesn't fit all.\n\n",
                    "rendered": {
                      "text": "\nSometimes you are confident that your tests are correct and may not appreciate\nsuch friendly messages. Some other times, you are debugging your tests or\nlearning about the behavior of the code you are testing, and wish you could\nobserve every mock call that happens (including argument values, the return\nvalue, and the stack trace). Clearly, one size doesn't fit all.\n\n",
                      "markdown": "`\nSometimes you are confident that your tests are correct and may not appreciate\nsuch friendly messages. Some other times, you are debugging your tests or\nlearning about the behavior of the code you are testing, and wish you could\nobserve every mock call that happens (including argument values, the return\nvalue, and the stack trace). Clearly, one size doesn't fit all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 2883,
                  "startColumn": 45,
                  "endLine": 2883,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\n### Making the Compilation Faster\n\nBelieve it or not, the *vast majority* of the time spent on compiling a mock\nclass is in generating its constructor and destructor, as they perform\nnon-trivial tasks (e.g. verification of the expectations). What's more, mock\nmethods with different signatures have different types and thus their\n",
                    "rendered": {
                      "text": "\n### Making the Compilation Faster\n\nBelieve it or not, the *vast majority* of the time spent on compiling a mock\nclass is in generating its constructor and destructor, as they perform\nnon-trivial tasks (e.g. verification of the expectations). What's more, mock\nmethods with different signatures have different types and thus their\n",
                      "markdown": "`\n### Making the Compilation Faster\n\nBelieve it or not, the *vast majority* of the time spent on compiling a mock\nclass is in generating its constructor and destructor, as they perform\nnon-trivial tasks (e.g. verification of the expectations). What's more, mock\nmethods with different signatures have different types and thus their\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 2860,
                  "startColumn": 44,
                  "endLine": 2860,
                  "endColumn": 50,
                  "snippet": {
                    "text": "class MockBuzzer : public Buzzer {\n public:\n  MOCK_METHOD(bool, DoShareBuzz, (Buzz* buzz, Time timestamp));\n  bool ShareBuzz(std::unique_ptr<Buzz> buzz, Time timestamp) override {\n    return DoShareBuzz(buzz.get(), timestamp);\n  }\n};\n",
                    "rendered": {
                      "text": "class MockBuzzer : public Buzzer {\n public:\n  MOCK_METHOD(bool, DoShareBuzz, (Buzz* buzz, Time timestamp));\n  bool ShareBuzz(std::unique_ptr<Buzz> buzz, Time timestamp) override {\n    return DoShareBuzz(buzz.get(), timestamp);\n  }\n};\n",
                      "markdown": "`class MockBuzzer : public Buzzer {\n public:\n  MOCK_METHOD(bool, DoShareBuzz, (Buzz* buzz, Time timestamp));\n  bool ShareBuzz(std::unique_ptr<Buzz> buzz, Time timestamp) override {\n    return DoShareBuzz(buzz.get(), timestamp);\n  }\n};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 2859,
                  "startColumn": 45,
                  "endLine": 2859,
                  "endColumn": 51,
                  "snippet": {
                    "text": "```cpp\nclass MockBuzzer : public Buzzer {\n public:\n  MOCK_METHOD(bool, DoShareBuzz, (Buzz* buzz, Time timestamp));\n  bool ShareBuzz(std::unique_ptr<Buzz> buzz, Time timestamp) override {\n    return DoShareBuzz(buzz.get(), timestamp);\n  }\n",
                    "rendered": {
                      "text": "```cpp\nclass MockBuzzer : public Buzzer {\n public:\n  MOCK_METHOD(bool, DoShareBuzz, (Buzz* buzz, Time timestamp));\n  bool ShareBuzz(std::unique_ptr<Buzz> buzz, Time timestamp) override {\n    return DoShareBuzz(buzz.get(), timestamp);\n  }\n",
                      "markdown": "````cpp\nclass MockBuzzer : public Buzzer {\n public:\n  MOCK_METHOD(bool, DoShareBuzz, (Buzz* buzz, Time timestamp));\n  bool ShareBuzz(std::unique_ptr<Buzz> buzz, Time timestamp) override {\n    return DoShareBuzz(buzz.get(), timestamp);\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 2822,
                  "startColumn": 5,
                  "endLine": 2822,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  EXPECT_NE(nullptr, mock_buzzer_.MakeBuzz(\"x\"));\n```\n\nEvery time this `EXPECT_CALL` fires, a new `unique_ptr<Buzz>` will be created\nand returned. You cannot do this with `Return(std::make_unique<...>(...))`.\n\nThat covers returning move-only values; but how do we work with methods\n",
                    "rendered": {
                      "text": "  EXPECT_NE(nullptr, mock_buzzer_.MakeBuzz(\"x\"));\n```\n\nEvery time this `EXPECT_CALL` fires, a new `unique_ptr<Buzz>` will be created\nand returned. You cannot do this with `Return(std::make_unique<...>(...))`.\n\nThat covers returning move-only values; but how do we work with methods\n",
                      "markdown": "`  EXPECT_NE(nullptr, mock_buzzer_.MakeBuzz(\"x\"));\n```\n\nEvery time this `EXPECT_CALL` fires, a new `unique_ptr<Buzz>` will be created\nand returned. You cannot do this with `Return(std::make_unique<...>(...))`.\n\nThat covers returning move-only values; but how do we work with methods\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 2804,
                  "startColumn": 52,
                  "endLine": 2804,
                  "endColumn": 58,
                  "snippet": {
                    "text": "Quiz time! What do you think will happen if a `Return` action is performed more\nthan once (e.g. you write `... .WillRepeatedly(Return(std::move(...)));`)? Come\nthink of it, after the first time the action runs, the source value will be\nconsumed (since it’s a move-only value), so the next time around, there’s no\nvalue to move from -- you’ll get a run-time error that `Return(std::move(...))`\ncan only be run once.\n\n",
                    "rendered": {
                      "text": "Quiz time! What do you think will happen if a `Return` action is performed more\nthan once (e.g. you write `... .WillRepeatedly(Return(std::move(...)));`)? Come\nthink of it, after the first time the action runs, the source value will be\nconsumed (since it’s a move-only value), so the next time around, there’s no\nvalue to move from -- you’ll get a run-time error that `Return(std::move(...))`\ncan only be run once.\n\n",
                      "markdown": "`Quiz time! What do you think will happen if a `Return` action is performed more\nthan once (e.g. you write `... .WillRepeatedly(Return(std::move(...)));`)? Come\nthink of it, after the first time the action runs, the source value will be\nconsumed (since it’s a move-only value), so the next time around, there’s no\nvalue to move from -- you’ll get a run-time error that `Return(std::move(...))`\ncan only be run once.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 2803,
                  "startColumn": 28,
                  "endLine": 2803,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\nQuiz time! What do you think will happen if a `Return` action is performed more\nthan once (e.g. you write `... .WillRepeatedly(Return(std::move(...)));`)? Come\nthink of it, after the first time the action runs, the source value will be\nconsumed (since it’s a move-only value), so the next time around, there’s no\nvalue to move from -- you’ll get a run-time error that `Return(std::move(...))`\ncan only be run once.\n",
                    "rendered": {
                      "text": "\nQuiz time! What do you think will happen if a `Return` action is performed more\nthan once (e.g. you write `... .WillRepeatedly(Return(std::move(...)));`)? Come\nthink of it, after the first time the action runs, the source value will be\nconsumed (since it’s a move-only value), so the next time around, there’s no\nvalue to move from -- you’ll get a run-time error that `Return(std::move(...))`\ncan only be run once.\n",
                      "markdown": "`\nQuiz time! What do you think will happen if a `Return` action is performed more\nthan once (e.g. you write `... .WillRepeatedly(Return(std::move(...)));`)? Come\nthink of it, after the first time the action runs, the source value will be\nconsumed (since it’s a move-only value), so the next time around, there’s no\nvalue to move from -- you’ll get a run-time error that `Return(std::move(...))`\ncan only be run once.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 2721,
                  "startColumn": 43,
                  "endLine": 2721,
                  "endColumn": 49,
                  "snippet": {
                    "text": "Mocking a method that takes and/or returns move-only types presents some\nchallenges, but nothing insurmountable. This recipe shows you how you can do it.\nNote that the support for move-only method arguments was only introduced to\ngMock in April 2017; in older code, you may find more complex\n[workarounds](#LegacyMoveOnly) for lack of this feature.\n\nLet’s say we are working on a fictional project that lets one post and share\n",
                    "rendered": {
                      "text": "Mocking a method that takes and/or returns move-only types presents some\nchallenges, but nothing insurmountable. This recipe shows you how you can do it.\nNote that the support for move-only method arguments was only introduced to\ngMock in April 2017; in older code, you may find more complex\n[workarounds](#LegacyMoveOnly) for lack of this feature.\n\nLet’s say we are working on a fictional project that lets one post and share\n",
                      "markdown": "`Mocking a method that takes and/or returns move-only types presents some\nchallenges, but nothing insurmountable. This recipe shows you how you can do it.\nNote that the support for move-only method arguments was only introduced to\ngMock in April 2017; in older code, you may find more complex\n[workarounds](#LegacyMoveOnly) for lack of this feature.\n\nLet’s say we are working on a fictional project that lets one post and share\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 2513,
                  "startColumn": 64,
                  "endLine": 2513,
                  "endColumn": 70,
                  "snippet": {
                    "text": "\nBut isn't this awkward?\n\ngMock provides a generic *action adaptor*, so you can spend your time minding\nmore important business than writing your own adaptors. Here's the syntax:\n\n```cpp\n",
                    "rendered": {
                      "text": "\nBut isn't this awkward?\n\ngMock provides a generic *action adaptor*, so you can spend your time minding\nmore important business than writing your own adaptors. Here's the syntax:\n\n```cpp\n",
                      "markdown": "`\nBut isn't this awkward?\n\ngMock provides a generic *action adaptor*, so you can spend your time minding\nmore important business than writing your own adaptors. Here's the syntax:\n\n```cpp\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 2059,
                  "startColumn": 6,
                  "endLine": 2059,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n### Changing a Mock Object's Behavior Based on the State\n\nIf you expect a call to change the behavior of a mock object, you can use\n`::testing::InSequence` to specify different behaviors before and after the\ncall:\n\n",
                    "rendered": {
                      "text": "\n### Changing a Mock Object's Behavior Based on the State\n\nIf you expect a call to change the behavior of a mock object, you can use\n`::testing::InSequence` to specify different behaviors before and after the\ncall:\n\n",
                      "markdown": "`\n### Changing a Mock Object's Behavior Based on the State\n\nIf you expect a call to change the behavior of a mock object, you can use\n`::testing::InSequence` to specify different behaviors before and after the\ncall:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 1895,
                  "startColumn": 48,
                  "endLine": 1895,
                  "endColumn": 54,
                  "snippet": {
                    "text": "the expectation is set, and `Return(std::ref(x))` will always return 0.\n\n`ReturnPointee(pointer)` was provided to solve this problem specifically. It\nreturns the value pointed to by `pointer` at the time the action is *executed*:\n\n```cpp\nusing ::testing::ReturnPointee;\n",
                    "rendered": {
                      "text": "the expectation is set, and `Return(std::ref(x))` will always return 0.\n\n`ReturnPointee(pointer)` was provided to solve this problem specifically. It\nreturns the value pointed to by `pointer` at the time the action is *executed*:\n\n```cpp\nusing ::testing::ReturnPointee;\n",
                      "markdown": "`the expectation is set, and `Return(std::ref(x))` will always return 0.\n\n`ReturnPointee(pointer)` was provided to solve this problem specifically. It\nreturns the value pointed to by `pointer` at the time the action is *executed*:\n\n```cpp\nusing ::testing::ReturnPointee;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 1888,
                  "startColumn": 27,
                  "endLine": 1888,
                  "endColumn": 33,
                  "snippet": {
                    "text": "```\n\nThe reason is that `Return(*value*)` converts `value` to the actual return type\nof the mock function at the time when the action is *created*, not when it is\n*executed*. (This behavior was chosen for the action to be safe when `value` is\na proxy object that references some temporary objects.) As a result,\n`std::ref(x)` is converted to an `int` value (instead of a `const int&`) when\n",
                    "rendered": {
                      "text": "```\n\nThe reason is that `Return(*value*)` converts `value` to the actual return type\nof the mock function at the time when the action is *created*, not when it is\n*executed*. (This behavior was chosen for the action to be safe when `value` is\na proxy object that references some temporary objects.) As a result,\n`std::ref(x)` is converted to an `int` value (instead of a `const int&`) when\n",
                      "markdown": "````\n\nThe reason is that `Return(*value*)` converts `value` to the actual return type\nof the mock function at the time when the action is *created*, not when it is\n*executed*. (This behavior was chosen for the action to be safe when `value` is\na proxy object that references some temporary objects.) As a result,\n`std::ref(x)` is converted to an `int` value (instead of a `const int&`) when\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 1851,
                  "startColumn": 61,
                  "endLine": 1851,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\nThe `Return(x)` action saves a copy of `x` when the action is created, and\nalways returns the same value whenever it's executed. Sometimes you may want to\ninstead return the *live* value of `x` (i.e. its value at the time when the\naction is *executed*.). Use either `ReturnRef()` or `ReturnPointee()` for this\npurpose.\n\n",
                    "rendered": {
                      "text": "\nThe `Return(x)` action saves a copy of `x` when the action is created, and\nalways returns the same value whenever it's executed. Sometimes you may want to\ninstead return the *live* value of `x` (i.e. its value at the time when the\naction is *executed*.). Use either `ReturnRef()` or `ReturnPointee()` for this\npurpose.\n\n",
                      "markdown": "`\nThe `Return(x)` action saves a copy of `x` when the action is created, and\nalways returns the same value whenever it's executed. Sometimes you may want to\ninstead return the *live* value of `x` (i.e. its value at the time when the\naction is *executed*.). Use either `ReturnRef()` or `ReturnPointee()` for this\npurpose.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 1732,
                  "startColumn": 9,
                  "endLine": 1732,
                  "endColumn": 15,
                  "snippet": {
                    "text": "Here's how it works:\n\nIf we view `EXPECT_CALL()` statements as nodes in a graph, and add an edge from\nnode A to node B wherever A must occur before B, we can get a DAG. We use the\nterm \"sequence\" to mean a directed path in this DAG. Now, if we decompose the\nDAG into sequences, we just need to know which sequences each `EXPECT_CALL()`\nbelongs to in order to be able to reconstruct the original DAG.\n",
                    "rendered": {
                      "text": "Here's how it works:\n\nIf we view `EXPECT_CALL()` statements as nodes in a graph, and add an edge from\nnode A to node B wherever A must occur before B, we can get a DAG. We use the\nterm \"sequence\" to mean a directed path in this DAG. Now, if we decompose the\nDAG into sequences, we just need to know which sequences each `EXPECT_CALL()`\nbelongs to in order to be able to reconstruct the original DAG.\n",
                      "markdown": "`Here's how it works:\n\nIf we view `EXPECT_CALL()` statements as nodes in a graph, and add an edge from\nnode A to node B wherever A must occur before B, we can get a DAG. We use the\nterm \"sequence\" to mean a directed path in this DAG. Now, if we decompose the\nDAG into sequences, we just need to know which sequences each `EXPECT_CALL()`\nbelongs to in order to be able to reconstruct the original DAG.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 1731,
                  "startColumn": 79,
                  "endLine": 1732,
                  "endColumn": 5,
                  "snippet": {
                    "text": "require you to come up with different names for the expectations in the chains.\nHere's how it works:\n\nIf we view `EXPECT_CALL()` statements as nodes in a graph, and add an edge from\nnode A to node B wherever A must occur before B, we can get a DAG. We use the\nterm \"sequence\" to mean a directed path in this DAG. Now, if we decompose the\nDAG into sequences, we just need to know which sequences each `EXPECT_CALL()`\nbelongs to in order to be able to reconstruct the original DAG.\n",
                    "rendered": {
                      "text": "require you to come up with different names for the expectations in the chains.\nHere's how it works:\n\nIf we view `EXPECT_CALL()` statements as nodes in a graph, and add an edge from\nnode A to node B wherever A must occur before B, we can get a DAG. We use the\nterm \"sequence\" to mean a directed path in this DAG. Now, if we decompose the\nDAG into sequences, we just need to know which sequences each `EXPECT_CALL()`\nbelongs to in order to be able to reconstruct the original DAG.\n",
                      "markdown": "`require you to come up with different names for the expectations in the chains.\nHere's how it works:\n\nIf we view `EXPECT_CALL()` statements as nodes in a graph, and add an edge from\nnode A to node B wherever A must occur before B, we can get a DAG. We use the\nterm \"sequence\" to mean a directed path in this DAG. Now, if we decompose the\nDAG into sequences, we just need to know which sequences each `EXPECT_CALL()`\nbelongs to in order to be able to reconstruct the original DAG.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 1709,
                  "startColumn": 19,
                  "endLine": 1709,
                  "endColumn": 27,
                  "snippet": {
                    "text": "  }\n```\n\nIn this example, we expect a call to `foo.DoThis(5)`, followed by two calls to\n`bar.DoThat()` where the argument can be anything, which are in turn followed by\na call to `foo.DoThis(6)`. If a call occurred out-of-order, gMock will report an\nerror.\n",
                    "rendered": {
                      "text": "  }\n```\n\nIn this example, we expect a call to `foo.DoThis(5)`, followed by two calls to\n`bar.DoThat()` where the argument can be anything, which are in turn followed by\na call to `foo.DoThis(6)`. If a call occurred out-of-order, gMock will report an\nerror.\n",
                      "markdown": "`  }\n```\n\nIn this example, we expect a call to `foo.DoThis(5)`, followed by two calls to\n`bar.DoThat()` where the argument can be anything, which are in turn followed by\na call to `foo.DoThis(6)`. If a call occurred out-of-order, gMock will report an\nerror.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 1663,
                  "startColumn": 4,
                  "endLine": 1663,
                  "endColumn": 12,
                  "snippet": {
                    "text": "or order of calls), you can often simply omit the parameter list:\n\n```cpp\n  // Expect foo.Bar( ... ) twice with any arguments.\n  EXPECT_CALL(foo, Bar).Times(2);\n\n  // Delegate to the given method whenever the factory is invoked.\n",
                    "rendered": {
                      "text": "or order of calls), you can often simply omit the parameter list:\n\n```cpp\n  // Expect foo.Bar( ... ) twice with any arguments.\n  EXPECT_CALL(foo, Bar).Times(2);\n\n  // Delegate to the given method whenever the factory is invoked.\n",
                      "markdown": "`or order of calls), you can often simply omit the parameter list:\n\n```cpp\n  // Expect foo.Bar( ... ) twice with any arguments.\n  EXPECT_CALL(foo, Bar).Times(2);\n\n  // Delegate to the given method whenever the factory is invoked.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 1654,
                  "startColumn": 32,
                  "endLine": 1654,
                  "endColumn": 38,
                  "snippet": {
                    "text": "Note that the order of the two `EXPECT_CALL`s is important, as a newer\n`EXPECT_CALL` takes precedence over an older one.\n\nFor more on uninteresting calls, nice mocks, and strict mocks, read\n[\"The Nice, the Strict, and the Naggy\"](#NiceStrictNaggy).\n\n### Ignoring Uninteresting Arguments {#ParameterlessExpectations}\n",
                    "rendered": {
                      "text": "Note that the order of the two `EXPECT_CALL`s is important, as a newer\n`EXPECT_CALL` takes precedence over an older one.\n\nFor more on uninteresting calls, nice mocks, and strict mocks, read\n[\"The Nice, the Strict, and the Naggy\"](#NiceStrictNaggy).\n\n### Ignoring Uninteresting Arguments {#ParameterlessExpectations}\n",
                      "markdown": "`Note that the order of the two `EXPECT_CALL`s is important, as a newer\n`EXPECT_CALL` takes precedence over an older one.\n\nFor more on uninteresting calls, nice mocks, and strict mocks, read\n[\"The Nice, the Strict, and the Naggy\"](#NiceStrictNaggy).\n\n### Ignoring Uninteresting Arguments {#ParameterlessExpectations}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 1633,
                  "startColumn": 56,
                  "endLine": 1633,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\nThe sole `EXPECT_CALL` here says that all calls to `GetDomainOwner()` must have\n`\"google.com\"` as the argument. If `GetDomainOwner(\"yahoo.com\")` is called, it\nwill be an unexpected call, and thus an error. *Having a nice mock doesn't\nchange the severity of an unexpected call.*\n\nSo how do we tell gMock that `GetDomainOwner()` can be called with some other\n",
                    "rendered": {
                      "text": "\nThe sole `EXPECT_CALL` here says that all calls to `GetDomainOwner()` must have\n`\"google.com\"` as the argument. If `GetDomainOwner(\"yahoo.com\")` is called, it\nwill be an unexpected call, and thus an error. *Having a nice mock doesn't\nchange the severity of an unexpected call.*\n\nSo how do we tell gMock that `GetDomainOwner()` can be called with some other\n",
                      "markdown": "`\nThe sole `EXPECT_CALL` here says that all calls to `GetDomainOwner()` must have\n`\"google.com\"` as the argument. If `GetDomainOwner(\"yahoo.com\")` is called, it\nwill be an unexpected call, and thus an error. *Having a nice mock doesn't\nchange the severity of an unexpected call.*\n\nSo how do we tell gMock that `GetDomainOwner()` can be called with some other\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 1613,
                  "startColumn": 13,
                  "endLine": 1613,
                  "endColumn": 19,
                  "snippet": {
                    "text": "A **nice mock** suppresses uninteresting call *warnings*. It is less chatty than\nthe default mock, but otherwise is the same. If a test fails with a default\nmock, it will also fail using a nice mock instead. And vice versa. Don't expect\nmaking a mock nice to change the test's result.\n\nA **strict mock** turns uninteresting call warnings into errors. So making a\nmock strict may change the test's result.\n",
                    "rendered": {
                      "text": "A **nice mock** suppresses uninteresting call *warnings*. It is less chatty than\nthe default mock, but otherwise is the same. If a test fails with a default\nmock, it will also fail using a nice mock instead. And vice versa. Don't expect\nmaking a mock nice to change the test's result.\n\nA **strict mock** turns uninteresting call warnings into errors. So making a\nmock strict may change the test's result.\n",
                      "markdown": "`A **nice mock** suppresses uninteresting call *warnings*. It is less chatty than\nthe default mock, but otherwise is the same. If a test fails with a default\nmock, it will also fail using a nice mock instead. And vice versa. Don't expect\nmaking a mock nice to change the test's result.\n\nA **strict mock** turns uninteresting call warnings into errors. So making a\nmock strict may change the test's result.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 1612,
                  "startColumn": 72,
                  "endLine": 1613,
                  "snippet": {
                    "text": "\nA **nice mock** suppresses uninteresting call *warnings*. It is less chatty than\nthe default mock, but otherwise is the same. If a test fails with a default\nmock, it will also fail using a nice mock instead. And vice versa. Don't expect\nmaking a mock nice to change the test's result.\n\nA **strict mock** turns uninteresting call warnings into errors. So making a\nmock strict may change the test's result.\n",
                    "rendered": {
                      "text": "\nA **nice mock** suppresses uninteresting call *warnings*. It is less chatty than\nthe default mock, but otherwise is the same. If a test fails with a default\nmock, it will also fail using a nice mock instead. And vice versa. Don't expect\nmaking a mock nice to change the test's result.\n\nA **strict mock** turns uninteresting call warnings into errors. So making a\nmock strict may change the test's result.\n",
                      "markdown": "`\nA **nice mock** suppresses uninteresting call *warnings*. It is less chatty than\nthe default mock, but otherwise is the same. If a test fails with a default\nmock, it will also fail using a nice mock instead. And vice versa. Don't expect\nmaking a mock nice to change the test's result.\n\nA **strict mock** turns uninteresting call warnings into errors. So making a\nmock strict may change the test's result.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 1612,
                  "startColumn": 31,
                  "endLine": 1612,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\nA **nice mock** suppresses uninteresting call *warnings*. It is less chatty than\nthe default mock, but otherwise is the same. If a test fails with a default\nmock, it will also fail using a nice mock instead. And vice versa. Don't expect\nmaking a mock nice to change the test's result.\n\nA **strict mock** turns uninteresting call warnings into errors. So making a\n",
                    "rendered": {
                      "text": "\nA **nice mock** suppresses uninteresting call *warnings*. It is less chatty than\nthe default mock, but otherwise is the same. If a test fails with a default\nmock, it will also fail using a nice mock instead. And vice versa. Don't expect\nmaking a mock nice to change the test's result.\n\nA **strict mock** turns uninteresting call warnings into errors. So making a\n",
                      "markdown": "`\nA **nice mock** suppresses uninteresting call *warnings*. It is less chatty than\nthe default mock, but otherwise is the same. If a test fails with a default\nmock, it will also fail using a nice mock instead. And vice versa. Don't expect\nmaking a mock nice to change the test's result.\n\nA **strict mock** turns uninteresting call warnings into errors. So making a\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 1596,
                  "startColumn": 12,
                  "endLine": 1596,
                  "endColumn": 20,
                  "snippet": {
                    "text": "Y(...))`s set, but none of them matches the call. Put another way, the test is\ninterested in the `x.Y()` method (therefore it explicitly sets some\n`EXPECT_CALL` to verify how it's called); however, the verification fails as the\ntest doesn't expect this particular call to happen.\n\n**An unexpected call is always an error,** as the code under test doesn't behave\nthe way the test expects it to behave.\n",
                    "rendered": {
                      "text": "Y(...))`s set, but none of them matches the call. Put another way, the test is\ninterested in the `x.Y()` method (therefore it explicitly sets some\n`EXPECT_CALL` to verify how it's called); however, the verification fails as the\ntest doesn't expect this particular call to happen.\n\n**An unexpected call is always an error,** as the code under test doesn't behave\nthe way the test expects it to behave.\n",
                      "markdown": "`Y(...))`s set, but none of them matches the call. Put another way, the test is\ninterested in the `x.Y()` method (therefore it explicitly sets some\n`EXPECT_CALL` to verify how it's called); however, the verification fails as the\ntest doesn't expect this particular call to happen.\n\n**An unexpected call is always an error,** as the code under test doesn't behave\nthe way the test expects it to behave.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 1517,
                  "startColumn": 44,
                  "endLine": 1517,
                  "endColumn": 50,
                  "snippet": {
                    "text": "freedom to the implementation. As a result, changing the implementation without\nbreaking the contract (e.g. refactoring and optimization), which should be\nperfectly fine to do, can break such tests. Then you have to spend time fixing\nthem, only to see them broken again the next time the implementation is changed.\n\nKeep in mind that one doesn't have to verify more than one property in one test.\nIn fact, **it's a good style to verify only one thing in one test.** If you do\n",
                    "rendered": {
                      "text": "freedom to the implementation. As a result, changing the implementation without\nbreaking the contract (e.g. refactoring and optimization), which should be\nperfectly fine to do, can break such tests. Then you have to spend time fixing\nthem, only to see them broken again the next time the implementation is changed.\n\nKeep in mind that one doesn't have to verify more than one property in one test.\nIn fact, **it's a good style to verify only one thing in one test.** If you do\n",
                      "markdown": "`freedom to the implementation. As a result, changing the implementation without\nbreaking the contract (e.g. refactoring and optimization), which should be\nperfectly fine to do, can break such tests. Then you have to spend time fixing\nthem, only to see them broken again the next time the implementation is changed.\n\nKeep in mind that one doesn't have to verify more than one property in one test.\nIn fact, **it's a good style to verify only one thing in one test.** If you do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 1516,
                  "startColumn": 66,
                  "endLine": 1516,
                  "endColumn": 72,
                  "snippet": {
                    "text": "contract of the code.** If a test over-specifies, it doesn't leave enough\nfreedom to the implementation. As a result, changing the implementation without\nbreaking the contract (e.g. refactoring and optimization), which should be\nperfectly fine to do, can break such tests. Then you have to spend time fixing\nthem, only to see them broken again the next time the implementation is changed.\n\nKeep in mind that one doesn't have to verify more than one property in one test.\n",
                    "rendered": {
                      "text": "contract of the code.** If a test over-specifies, it doesn't leave enough\nfreedom to the implementation. As a result, changing the implementation without\nbreaking the contract (e.g. refactoring and optimization), which should be\nperfectly fine to do, can break such tests. Then you have to spend time fixing\nthem, only to see them broken again the next time the implementation is changed.\n\nKeep in mind that one doesn't have to verify more than one property in one test.\n",
                      "markdown": "`contract of the code.** If a test over-specifies, it doesn't leave enough\nfreedom to the implementation. As a result, changing the implementation without\nbreaking the contract (e.g. refactoring and optimization), which should be\nperfectly fine to do, can break such tests. Then you have to spend time fixing\nthem, only to see them broken again the next time the implementation is changed.\n\nKeep in mind that one doesn't have to verify more than one property in one test.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 1492,
                  "startColumn": 19,
                  "endLine": 1492,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n## Setting Expectations\n\n### Knowing When to Expect {#UseOnCall}\n\n**`ON_CALL`** is likely the *single most under-utilized construct* in gMock.\n\n",
                    "rendered": {
                      "text": "\n## Setting Expectations\n\n### Knowing When to Expect {#UseOnCall}\n\n**`ON_CALL`** is likely the *single most under-utilized construct* in gMock.\n\n",
                      "markdown": "`\n## Setting Expectations\n\n### Knowing When to Expect {#UseOnCall}\n\n**`ON_CALL`** is likely the *single most under-utilized construct* in gMock.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 1285,
                  "startColumn": 3,
                  "endLine": 1285,
                  "endColumn": 9,
                  "snippet": {
                    "text": "expects `foo.Bar()` to be called with a pointer that points to a value greater\nthan or equal to 3.\n\nOne nice thing about `Pointee()` is that it treats a `NULL` pointer as a match\nfailure, so you can write `Pointee(m)` instead of\n\n```cpp\n",
                    "rendered": {
                      "text": "expects `foo.Bar()` to be called with a pointer that points to a value greater\nthan or equal to 3.\n\nOne nice thing about `Pointee()` is that it treats a `NULL` pointer as a match\nfailure, so you can write `Pointee(m)` instead of\n\n```cpp\n",
                      "markdown": "`expects `foo.Bar()` to be called with a pointer that points to a value greater\nthan or equal to 3.\n\nOne nice thing about `Pointee()` is that it treats a `NULL` pointer as a match\nfailure, so you can write `Pointee(m)` instead of\n\n```cpp\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 1150,
                  "startColumn": 11,
                  "endLine": 1150,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\ngMock provides a set of built-in matchers for matching arguments with expected\nvalues—see the [Matchers Reference](reference/matchers.md) for more information.\nIn case you find the built-in set lacking, you can use an arbitrary unary\npredicate function or functor as a matcher - as long as the predicate accepts a\nvalue of the type you want. You do this by wrapping the predicate inside the\n`Truly()` function, for example:\n",
                    "rendered": {
                      "text": "\ngMock provides a set of built-in matchers for matching arguments with expected\nvalues—see the [Matchers Reference](reference/matchers.md) for more information.\nIn case you find the built-in set lacking, you can use an arbitrary unary\npredicate function or functor as a matcher - as long as the predicate accepts a\nvalue of the type you want. You do this by wrapping the predicate inside the\n`Truly()` function, for example:\n",
                      "markdown": "`\ngMock provides a set of built-in matchers for matching arguments with expected\nvalues—see the [Matchers Reference](reference/matchers.md) for more information.\nIn case you find the built-in set lacking, you can use an arbitrary unary\npredicate function or functor as a matcher - as long as the predicate accepts a\nvalue of the type you want. You do this by wrapping the predicate inside the\n`Truly()` function, for example:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 974,
                  "startColumn": 6,
                  "endLine": 974,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n### Selecting Between Overloaded Functions {#SelectOverload}\n\nIf you expect an overloaded function to be called, the compiler may need some\nhelp on which overloaded version it is.\n\nTo disambiguate functions overloaded on the const-ness of this object, use the\n",
                    "rendered": {
                      "text": "\n### Selecting Between Overloaded Functions {#SelectOverload}\n\nIf you expect an overloaded function to be called, the compiler may need some\nhelp on which overloaded version it is.\n\nTo disambiguate functions overloaded on the const-ness of this object, use the\n",
                      "markdown": "`\n### Selecting Between Overloaded Functions {#SelectOverload}\n\nIf you expect an overloaded function to be called, the compiler may need some\nhelp on which overloaded version it is.\n\nTo disambiguate functions overloaded on the const-ness of this object, use the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 964,
                  "startColumn": 6,
                  "endLine": 964,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  EXPECT_CALL(foo, DoThis(SafeMatcherCast<Derived*>(m)));\n```\n\nIf you find `SafeMatcherCast<T>(m)` too limiting, you can use a similar function\n`MatcherCast<T>(m)`. The difference is that `MatcherCast` works as long as you\ncan `static_cast` type `T` to type `U`.\n\n",
                    "rendered": {
                      "text": "  EXPECT_CALL(foo, DoThis(SafeMatcherCast<Derived*>(m)));\n```\n\nIf you find `SafeMatcherCast<T>(m)` too limiting, you can use a similar function\n`MatcherCast<T>(m)`. The difference is that `MatcherCast` works as long as you\ncan `static_cast` type `T` to type `U`.\n\n",
                      "markdown": "`  EXPECT_CALL(foo, DoThis(SafeMatcherCast<Derived*>(m)));\n```\n\nIf you find `SafeMatcherCast<T>(m)` too limiting, you can use a similar function\n`MatcherCast<T>(m)`. The difference is that `MatcherCast` works as long as you\ncan `static_cast` type `T` to type `U`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 622,
                  "startColumn": 4,
                  "endLine": 622,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\nYou need to weigh the pros and cons carefully for your particular problem, but\nI'd like to assure you that the Java community has been practicing this for a\nlong time and it's a proven effective technique applicable in a wide variety of\nsituations. :-)\n\n### Delegating Calls to a Fake {#DelegatingToFake}\n",
                    "rendered": {
                      "text": "\nYou need to weigh the pros and cons carefully for your particular problem, but\nI'd like to assure you that the Java community has been practicing this for a\nlong time and it's a proven effective technique applicable in a wide variety of\nsituations. :-)\n\n### Delegating Calls to a Fake {#DelegatingToFake}\n",
                      "markdown": "`\nYou need to weigh the pros and cons carefully for your particular problem, but\nI'd like to assure you that the Java community has been practicing this for a\nlong time and it's a proven effective technique applicable in a wide variety of\nsituations. :-)\n\n### Delegating Calls to a Fake {#DelegatingToFake}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 613,
                  "startColumn": 36,
                  "endLine": 613,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n*   Different projects may need to use `Concrete` in different ways, so the best\n    interfaces for them will be different. Therefore, each of them will have its\n    own domain-specific interface on top of `Concrete`, and they will not be the\n    same code.\n*   If enough projects want to use the same interface, they can always share it,\n    just like they have been sharing `Concrete`. You can check in the interface\n",
                    "rendered": {
                      "text": "\n*   Different projects may need to use `Concrete` in different ways, so the best\n    interfaces for them will be different. Therefore, each of them will have its\n    own domain-specific interface on top of `Concrete`, and they will not be the\n    same code.\n*   If enough projects want to use the same interface, they can always share it,\n    just like they have been sharing `Concrete`. You can check in the interface\n",
                      "markdown": "`\n*   Different projects may need to use `Concrete` in different ways, so the best\n    interfaces for them will be different. Therefore, each of them will have its\n    own domain-specific interface on top of `Concrete`, and they will not be the\n    same code.\n*   If enough projects want to use the same interface, they can always share it,\n    just like they have been sharing `Concrete`. You can check in the interface\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 583,
                  "startColumn": 79,
                  "endLine": 584,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nTo avoid such problems, many programmers have been practicing \"coding to\ninterfaces\": instead of talking to the `Concrete` class, your code would define\nan interface and talk to it. Then you implement that interface as an adaptor on\ntop of `Concrete`. In tests, you can easily mock that interface to observe how\nyour code is doing.\n\nThis technique incurs some overhead:\n",
                    "rendered": {
                      "text": "\nTo avoid such problems, many programmers have been practicing \"coding to\ninterfaces\": instead of talking to the `Concrete` class, your code would define\nan interface and talk to it. Then you implement that interface as an adaptor on\ntop of `Concrete`. In tests, you can easily mock that interface to observe how\nyour code is doing.\n\nThis technique incurs some overhead:\n",
                      "markdown": "`\nTo avoid such problems, many programmers have been practicing \"coding to\ninterfaces\": instead of talking to the `Concrete` class, your code would define\nan interface and talk to it. Then you implement that interface as an adaptor on\ntop of `Concrete`. In tests, you can easily mock that interface to observe how\nyour code is doing.\n\nThis technique incurs some overhead:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 565,
                  "startColumn": 13,
                  "endLine": 565,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n### Alternative to Mocking Concrete Classes\n\nOften you may find yourself using classes that don't implement interfaces. In\norder to test your code that uses such a class (let's call it `Concrete`), you\nmay be tempted to make the methods of `Concrete` virtual and then mock it.\n\n",
                    "rendered": {
                      "text": "\n### Alternative to Mocking Concrete Classes\n\nOften you may find yourself using classes that don't implement interfaces. In\norder to test your code that uses such a class (let's call it `Concrete`), you\nmay be tempted to make the methods of `Concrete` virtual and then mock it.\n\n",
                      "markdown": "`\n### Alternative to Mocking Concrete Classes\n\nOften you may find yourself using classes that don't implement interfaces. In\norder to test your code that uses such a class (let's call it `Concrete`), you\nmay be tempted to make the methods of `Concrete` virtual and then mock it.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 486,
                  "startColumn": 78,
                  "endLine": 487,
                  "endColumn": 5,
                  "snippet": {
                    "text": "shouldn't need to update any tests. If your code interacts with a naggy mock,\nhowever, you may start to get spammed with warnings as the result of your\nchange. Worse, if your code interacts with a strict mock, your tests may start\nto fail and you'll be forced to fix them. Our general recommendation is to use\nnice mocks (not yet the default) most of the time, use naggy mocks (the current\ndefault) when developing or debugging tests, and use strict mocks only as the\nlast resort.\n\n",
                    "rendered": {
                      "text": "shouldn't need to update any tests. If your code interacts with a naggy mock,\nhowever, you may start to get spammed with warnings as the result of your\nchange. Worse, if your code interacts with a strict mock, your tests may start\nto fail and you'll be forced to fix them. Our general recommendation is to use\nnice mocks (not yet the default) most of the time, use naggy mocks (the current\ndefault) when developing or debugging tests, and use strict mocks only as the\nlast resort.\n\n",
                      "markdown": "`shouldn't need to update any tests. If your code interacts with a naggy mock,\nhowever, you may start to get spammed with warnings as the result of your\nchange. Worse, if your code interacts with a strict mock, your tests may start\nto fail and you'll be forced to fix them. Our general recommendation is to use\nnice mocks (not yet the default) most of the time, use naggy mocks (the current\ndefault) when developing or debugging tests, and use strict mocks only as the\nlast resort.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/docs/gmock_cook_book.md"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 7,
                  "endLine": 3,
                  "endColumn": 13,
                  "snippet": {
                    "text": "# gMock Cookbook\n\nYou can find recipes for using gMock here. If you haven't yet, please read\n[the dummy guide](gmock_for_dummies.md) first to make sure you understand the\nbasics.\n\n",
                    "rendered": {
                      "text": "# gMock Cookbook\n\nYou can find recipes for using gMock here. If you haven't yet, please read\n[the dummy guide](gmock_for_dummies.md) first to make sure you understand the\nbasics.\n\n",
                      "markdown": "`# gMock Cookbook\n\nYou can find recipes for using gMock here. If you haven't yet, please read\n[the dummy guide](gmock_for_dummies.md) first to make sure you understand the\nbasics.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock_test_utils.py"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 58,
                  "endLine": 51,
                  "endColumn": 66,
                  "snippet": {
                    "text": "  doesn't exist.\n\n  Args:\n    executable_name: name of the test binary that the test script runs.\n\n  Returns:\n    The absolute path of the test binary.\n",
                    "rendered": {
                      "text": "  doesn't exist.\n\n  Args:\n    executable_name: name of the test binary that the test script runs.\n\n  Returns:\n    The absolute path of the test binary.\n",
                      "markdown": "`  doesn't exist.\n\n  Args:\n    executable_name: name of the test binary that the test script runs.\n\n  Returns:\n    The absolute path of the test binary.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-spec-builders_test.cc"
                },
                "region": {
                  "startLine": 889,
                  "startColumn": 62,
                  "endLine": 889,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\n  CaptureStdout();\n  EXPECT_EQ(0, b.DoB(1));  // Shouldn't generate a warning as the\n                           // expectation has no action clause at all.\n  EXPECT_EQ(1, b.DoB());\n  EXPECT_EQ(2, b.DoB());\n  const std::string output1 = GetCapturedStdout();\n",
                    "rendered": {
                      "text": "\n  CaptureStdout();\n  EXPECT_EQ(0, b.DoB(1));  // Shouldn't generate a warning as the\n                           // expectation has no action clause at all.\n  EXPECT_EQ(1, b.DoB());\n  EXPECT_EQ(2, b.DoB());\n  const std::string output1 = GetCapturedStdout();\n",
                      "markdown": "`\n  CaptureStdout();\n  EXPECT_EQ(0, b.DoB(1));  // Shouldn't generate a warning as the\n                           // expectation has no action clause at all.\n  EXPECT_EQ(1, b.DoB());\n  EXPECT_EQ(2, b.DoB());\n  const std::string output1 = GetCapturedStdout();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-spec-builders_test.cc"
                },
                "region": {
                  "startLine": 804,
                  "startColumn": 19,
                  "endLine": 804,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        MockB b;\n        EXPECT_CALL(b, DoB()).WillOnce(Return(1)).WillRepeatedly(Return(2));\n      },\n      \"to be called at least once\");\n}\n\n#if defined(GTEST_INTERNAL_CPLUSPLUS_LANG) && \\\n",
                    "rendered": {
                      "text": "        MockB b;\n        EXPECT_CALL(b, DoB()).WillOnce(Return(1)).WillRepeatedly(Return(2));\n      },\n      \"to be called at least once\");\n}\n\n#if defined(GTEST_INTERNAL_CPLUSPLUS_LANG) && \\\n",
                      "markdown": "`        MockB b;\n        EXPECT_CALL(b, DoB()).WillOnce(Return(1)).WillRepeatedly(Return(2));\n      },\n      \"to be called at least once\");\n}\n\n#if defined(GTEST_INTERNAL_CPLUSPLUS_LANG) && \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-spec-builders_test.cc"
                },
                "region": {
                  "startLine": 748,
                  "startColumn": 38,
                  "endLine": 748,
                  "endColumn": 42,
                  "snippet": {
                    "text": "      },\n      \"Actual function \\\"DoB Method\\\" call count \"\n      \"doesn't match EXPECT_CALL(b, DoB(5))...\\n\"\n      \"         Expected: to be called at least twice\\n\"\n      \"           Actual: called once - unsatisfied and active\");\n}\n\n",
                    "rendered": {
                      "text": "      },\n      \"Actual function \\\"DoB Method\\\" call count \"\n      \"doesn't match EXPECT_CALL(b, DoB(5))...\\n\"\n      \"         Expected: to be called at least twice\\n\"\n      \"           Actual: called once - unsatisfied and active\");\n}\n\n",
                      "markdown": "`      },\n      \"Actual function \\\"DoB Method\\\" call count \"\n      \"doesn't match EXPECT_CALL(b, DoB(5))...\\n\"\n      \"         Expected: to be called at least twice\\n\"\n      \"           Actual: called once - unsatisfied and active\");\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-spec-builders_test.cc"
                },
                "region": {
                  "startLine": 584,
                  "startColumn": 44,
                  "endLine": 584,
                  "endColumn": 48,
                  "snippet": {
                    "text": "                      output);  // #1\n  EXPECT_PRED_FORMAT2(IsSubstring,\n                      \"Too many actions specified in EXPECT_CALL(b, DoB())...\\n\"\n                      \"Expected to be called at most once, \"\n                      \"but has 2 WillOnce()s.\",\n                      output);  // #2\n  EXPECT_PRED_FORMAT2(\n",
                    "rendered": {
                      "text": "                      output);  // #1\n  EXPECT_PRED_FORMAT2(IsSubstring,\n                      \"Too many actions specified in EXPECT_CALL(b, DoB())...\\n\"\n                      \"Expected to be called at most once, \"\n                      \"but has 2 WillOnce()s.\",\n                      output);  // #2\n  EXPECT_PRED_FORMAT2(\n",
                      "markdown": "`                      output);  // #1\n  EXPECT_PRED_FORMAT2(IsSubstring,\n                      \"Too many actions specified in EXPECT_CALL(b, DoB())...\\n\"\n                      \"Expected to be called at most once, \"\n                      \"but has 2 WillOnce()s.\",\n                      output);  // #2\n  EXPECT_PRED_FORMAT2(\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-spec-builders_test.cc"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 53,
                  "endLine": 271,
                  "endColumn": 57,
                  "snippet": {
                    "text": "  EXPECT_EQ(1, n);\n}\n\n// Tests that the syntax of EXPECT_CALL() is enforced at run time.\n\nTEST(ExpectCallSyntaxTest, WithIsOptional) {\n  MockA a;\n",
                    "rendered": {
                      "text": "  EXPECT_EQ(1, n);\n}\n\n// Tests that the syntax of EXPECT_CALL() is enforced at run time.\n\nTEST(ExpectCallSyntaxTest, WithIsOptional) {\n  MockA a;\n",
                      "markdown": "`  EXPECT_EQ(1, n);\n}\n\n// Tests that the syntax of EXPECT_CALL() is enforced at run time.\n\nTEST(ExpectCallSyntaxTest, WithIsOptional) {\n  MockA a;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/test/gmock-spec-builders_test.cc"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 49,
                  "endLine": 208,
                  "endColumn": 53,
                  "snippet": {
                    "text": "  EXPECT_EQ(1, n);\n}\n\n// Tests that the syntax of ON_CALL() is enforced at run time.\n\nTEST(OnCallSyntaxTest, WithIsOptional) {\n  MockA a;\n",
                    "rendered": {
                      "text": "  EXPECT_EQ(1, n);\n}\n\n// Tests that the syntax of ON_CALL() is enforced at run time.\n\nTEST(OnCallSyntaxTest, WithIsOptional) {\n  MockA a;\n",
                      "markdown": "`  EXPECT_EQ(1, n);\n}\n\n// Tests that the syntax of ON_CALL() is enforced at run time.\n\nTEST(OnCallSyntaxTest, WithIsOptional) {\n  MockA a;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-matchers.cc"
                },
                "region": {
                  "startLine": 365,
                  "startColumn": 17,
                  "endLine": 365,
                  "endColumn": 21,
                  "snippet": {
                    "text": "}\n\n// Checks that all matchers match at least one element, and that all\n// elements match at least one matcher. This enables faster matching\n// and better error reporting.\n// Returns false, writing an explanation to 'listener', if and only\n// if the success criteria are not met.\n",
                    "rendered": {
                      "text": "}\n\n// Checks that all matchers match at least one element, and that all\n// elements match at least one matcher. This enables faster matching\n// and better error reporting.\n// Returns false, writing an explanation to 'listener', if and only\n// if the success criteria are not met.\n",
                      "markdown": "`}\n\n// Checks that all matchers match at least one element, and that all\n// elements match at least one matcher. This enables faster matching\n// and better error reporting.\n// Returns false, writing an explanation to 'listener', if and only\n// if the success criteria are not met.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-matchers.cc"
                },
                "region": {
                  "startLine": 364,
                  "startColumn": 33,
                  "endLine": 364,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  }\n}\n\n// Checks that all matchers match at least one element, and that all\n// elements match at least one matcher. This enables faster matching\n// and better error reporting.\n// Returns false, writing an explanation to 'listener', if and only\n",
                    "rendered": {
                      "text": "  }\n}\n\n// Checks that all matchers match at least one element, and that all\n// elements match at least one matcher. This enables faster matching\n// and better error reporting.\n// Returns false, writing an explanation to 'listener', if and only\n",
                      "markdown": "`  }\n}\n\n// Checks that all matchers match at least one element, and that all\n// elements match at least one matcher. This enables faster matching\n// and better error reporting.\n// Returns false, writing an explanation to 'listener', if and only\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-matchers.cc"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 24,
                  "endLine": 176,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  // to right nodes and are marked to eliminate cycles from the search.\n  //\n  // Left nodes will only be explored at most once because they\n  // are accessible from at most one right node in the residual flow\n  // graph.\n  //\n  // Note that left_[ilhs] is the only element of left_ that TryAugment will\n",
                    "rendered": {
                      "text": "  // to right nodes and are marked to eliminate cycles from the search.\n  //\n  // Left nodes will only be explored at most once because they\n  // are accessible from at most one right node in the residual flow\n  // graph.\n  //\n  // Note that left_[ilhs] is the only element of left_ that TryAugment will\n",
                      "markdown": "`  // to right nodes and are marked to eliminate cycles from the search.\n  //\n  // Left nodes will only be explored at most once because they\n  // are accessible from at most one right node in the residual flow\n  // graph.\n  //\n  // Note that left_[ilhs] is the only element of left_ that TryAugment will\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-matchers.cc"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 37,
                  "endLine": 175,
                  "endColumn": 41,
                  "snippet": {
                    "text": "  // flow was added to the network. The 'seen' vector elements correspond\n  // to right nodes and are marked to eliminate cycles from the search.\n  //\n  // Left nodes will only be explored at most once because they\n  // are accessible from at most one right node in the residual flow\n  // graph.\n  //\n",
                    "rendered": {
                      "text": "  // flow was added to the network. The 'seen' vector elements correspond\n  // to right nodes and are marked to eliminate cycles from the search.\n  //\n  // Left nodes will only be explored at most once because they\n  // are accessible from at most one right node in the residual flow\n  // graph.\n  //\n",
                      "markdown": "`  // flow was added to the network. The 'seen' vector elements correspond\n  // to right nodes and are marked to eliminate cycles from the search.\n  //\n  // Left nodes will only be explored at most once because they\n  // are accessible from at most one right node in the residual flow\n  // graph.\n  //\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-matchers.cc"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 32,
                  "endLine": 149,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    // node once.\n    for (size_t ilhs = 0; ilhs < graph_->LhsSize(); ++ilhs) {\n      // Reset the path-marking vector and try to find a path from\n      // source to sink starting at the left_[ilhs] node.\n      GTEST_CHECK_(left_[ilhs] == kUnused)\n          << \"ilhs: \" << ilhs << \", left_[ilhs]: \" << left_[ilhs];\n      // 'seen' initialized to 'graph_->RhsSize()' copies of 0.\n",
                    "rendered": {
                      "text": "    // node once.\n    for (size_t ilhs = 0; ilhs < graph_->LhsSize(); ++ilhs) {\n      // Reset the path-marking vector and try to find a path from\n      // source to sink starting at the left_[ilhs] node.\n      GTEST_CHECK_(left_[ilhs] == kUnused)\n          << \"ilhs: \" << ilhs << \", left_[ilhs]: \" << left_[ilhs];\n      // 'seen' initialized to 'graph_->RhsSize()' copies of 0.\n",
                      "markdown": "`    // node once.\n    for (size_t ilhs = 0; ilhs < graph_->LhsSize(); ++ilhs) {\n      // Reset the path-marking vector and try to find a path from\n      // source to sink starting at the left_[ilhs] node.\n      GTEST_CHECK_(left_[ilhs] == kUnused)\n          << \"ilhs: \" << ilhs << \", left_[ilhs]: \" << left_[ilhs];\n      // 'seen' initialized to 'graph_->RhsSize()' copies of 0.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-matchers.cc"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 64,
                  "endLine": 145,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    // Since the source-to-left edge can only carry one flow unit (or,\n    // each element can be matched to only one matcher), there is no need\n    // to visit the left nodes more than once looking for augmented paths.\n    // The flow is known to be possible or impossible by looking at the\n    // node once.\n    for (size_t ilhs = 0; ilhs < graph_->LhsSize(); ++ilhs) {\n      // Reset the path-marking vector and try to find a path from\n",
                    "rendered": {
                      "text": "    // Since the source-to-left edge can only carry one flow unit (or,\n    // each element can be matched to only one matcher), there is no need\n    // to visit the left nodes more than once looking for augmented paths.\n    // The flow is known to be possible or impossible by looking at the\n    // node once.\n    for (size_t ilhs = 0; ilhs < graph_->LhsSize(); ++ilhs) {\n      // Reset the path-marking vector and try to find a path from\n",
                      "markdown": "`    // Since the source-to-left edge can only carry one flow unit (or,\n    // each element can be matched to only one matcher), there is no need\n    // to visit the left nodes more than once looking for augmented paths.\n    // The flow is known to be possible or impossible by looking at the\n    // node once.\n    for (size_t ilhs = 0; ilhs < graph_->LhsSize(); ++ilhs) {\n      // Reset the path-marking vector and try to find a path from\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-matchers.cc"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 62,
                  "endLine": 95,
                  "endColumn": 66,
                  "snippet": {
                    "text": "// respect to r1 and \"redoing\" them with respect to r2.\n//\n// It bears repeating that the flow graph and residual flow graph are\n// never represented explicitly, but can be derived by looking at the\n// information in 'graph' and in left_.\n//\n// As an optimization, there is a second vector<int> called right_ which\n",
                    "rendered": {
                      "text": "// respect to r1 and \"redoing\" them with respect to r2.\n//\n// It bears repeating that the flow graph and residual flow graph are\n// never represented explicitly, but can be derived by looking at the\n// information in 'graph' and in left_.\n//\n// As an optimization, there is a second vector<int> called right_ which\n",
                      "markdown": "`// respect to r1 and \"redoing\" them with respect to r2.\n//\n// It bears repeating that the flow graph and residual flow graph are\n// never represented explicitly, but can be derived by looking at the\n// information in 'graph' and in left_.\n//\n// As an optimization, there is a second vector<int> called right_ which\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-matchers.cc"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 59,
                  "endLine": 215,
                  "endColumn": 65,
                  "snippet": {
                    "text": "  // (i.e. an element) and each element of right_ is a right hand side\n  // node (i.e. a matcher). The values in the left_ vector indicate\n  // outflow from that node to a node on the right_ side. The values\n  // in the right_ indicate inflow, and specify which left_ node is\n  // feeding that right_ node, if any. For example, left_[3] == 1 means\n  // there's a flow from element #3 to matcher #1. Such a flow would also\n  // be redundantly represented in the right_ vector as right_[1] == 3.\n",
                    "rendered": {
                      "text": "  // (i.e. an element) and each element of right_ is a right hand side\n  // node (i.e. a matcher). The values in the left_ vector indicate\n  // outflow from that node to a node on the right_ side. The values\n  // in the right_ indicate inflow, and specify which left_ node is\n  // feeding that right_ node, if any. For example, left_[3] == 1 means\n  // there's a flow from element #3 to matcher #1. Such a flow would also\n  // be redundantly represented in the right_ vector as right_[1] == 3.\n",
                      "markdown": "`  // (i.e. an element) and each element of right_ is a right hand side\n  // node (i.e. a matcher). The values in the left_ vector indicate\n  // outflow from that node to a node on the right_ side. The values\n  // in the right_ indicate inflow, and specify which left_ node is\n  // feeding that right_ node, if any. For example, left_[3] == 1 means\n  // there's a flow from element #3 to matcher #1. Such a flow would also\n  // be redundantly represented in the right_ vector as right_[1] == 3.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-matchers.cc"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 32,
                  "endLine": 214,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  // Each element of the left_ vector represents a left hand side node\n  // (i.e. an element) and each element of right_ is a right hand side\n  // node (i.e. a matcher). The values in the left_ vector indicate\n  // outflow from that node to a node on the right_ side. The values\n  // in the right_ indicate inflow, and specify which left_ node is\n  // feeding that right_ node, if any. For example, left_[3] == 1 means\n  // there's a flow from element #3 to matcher #1. Such a flow would also\n",
                    "rendered": {
                      "text": "  // Each element of the left_ vector represents a left hand side node\n  // (i.e. an element) and each element of right_ is a right hand side\n  // node (i.e. a matcher). The values in the left_ vector indicate\n  // outflow from that node to a node on the right_ side. The values\n  // in the right_ indicate inflow, and specify which left_ node is\n  // feeding that right_ node, if any. For example, left_[3] == 1 means\n  // there's a flow from element #3 to matcher #1. Such a flow would also\n",
                      "markdown": "`  // Each element of the left_ vector represents a left hand side node\n  // (i.e. an element) and each element of right_ is a right hand side\n  // node (i.e. a matcher). The values in the left_ vector indicate\n  // outflow from that node to a node on the right_ side. The values\n  // in the right_ indicate inflow, and specify which left_ node is\n  // feeding that right_ node, if any. For example, left_[3] == 1 means\n  // there's a flow from element #3 to matcher #1. Such a flow would also\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-matchers.cc"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 22,
                  "endLine": 214,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  // Each element of the left_ vector represents a left hand side node\n  // (i.e. an element) and each element of right_ is a right hand side\n  // node (i.e. a matcher). The values in the left_ vector indicate\n  // outflow from that node to a node on the right_ side. The values\n  // in the right_ indicate inflow, and specify which left_ node is\n  // feeding that right_ node, if any. For example, left_[3] == 1 means\n  // there's a flow from element #3 to matcher #1. Such a flow would also\n",
                    "rendered": {
                      "text": "  // Each element of the left_ vector represents a left hand side node\n  // (i.e. an element) and each element of right_ is a right hand side\n  // node (i.e. a matcher). The values in the left_ vector indicate\n  // outflow from that node to a node on the right_ side. The values\n  // in the right_ indicate inflow, and specify which left_ node is\n  // feeding that right_ node, if any. For example, left_[3] == 1 means\n  // there's a flow from element #3 to matcher #1. Such a flow would also\n",
                      "markdown": "`  // Each element of the left_ vector represents a left hand side node\n  // (i.e. an element) and each element of right_ is a right hand side\n  // node (i.e. a matcher). The values in the left_ vector indicate\n  // outflow from that node to a node on the right_ side. The values\n  // in the right_ indicate inflow, and specify which left_ node is\n  // feeding that right_ node, if any. For example, left_[3] == 1 means\n  // there's a flow from element #3 to matcher #1. Such a flow would also\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-matchers.cc"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 4,
                  "endLine": 213,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  const MatchMatrix* graph_;  // not owned\n  // Each element of the left_ vector represents a left hand side node\n  // (i.e. an element) and each element of right_ is a right hand side\n  // node (i.e. a matcher). The values in the left_ vector indicate\n  // outflow from that node to a node on the right_ side. The values\n  // in the right_ indicate inflow, and specify which left_ node is\n  // feeding that right_ node, if any. For example, left_[3] == 1 means\n",
                    "rendered": {
                      "text": "  const MatchMatrix* graph_;  // not owned\n  // Each element of the left_ vector represents a left hand side node\n  // (i.e. an element) and each element of right_ is a right hand side\n  // node (i.e. a matcher). The values in the left_ vector indicate\n  // outflow from that node to a node on the right_ side. The values\n  // in the right_ indicate inflow, and specify which left_ node is\n  // feeding that right_ node, if any. For example, left_[3] == 1 means\n",
                      "markdown": "`  const MatchMatrix* graph_;  // not owned\n  // Each element of the left_ vector represents a left hand side node\n  // (i.e. an element) and each element of right_ is a right hand side\n  // node (i.e. a matcher). The values in the left_ vector indicate\n  // outflow from that node to a node on the right_ side. The values\n  // in the right_ indicate inflow, and specify which left_ node is\n  // feeding that right_ node, if any. For example, left_[3] == 1 means\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-matchers.cc"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 65,
                  "endLine": 212,
                  "snippet": {
                    "text": "  }\n\n  const MatchMatrix* graph_;  // not owned\n  // Each element of the left_ vector represents a left hand side node\n  // (i.e. an element) and each element of right_ is a right hand side\n  // node (i.e. a matcher). The values in the left_ vector indicate\n  // outflow from that node to a node on the right_ side. The values\n  // in the right_ indicate inflow, and specify which left_ node is\n",
                    "rendered": {
                      "text": "  }\n\n  const MatchMatrix* graph_;  // not owned\n  // Each element of the left_ vector represents a left hand side node\n  // (i.e. an element) and each element of right_ is a right hand side\n  // node (i.e. a matcher). The values in the left_ vector indicate\n  // outflow from that node to a node on the right_ side. The values\n  // in the right_ indicate inflow, and specify which left_ node is\n",
                      "markdown": "`  }\n\n  const MatchMatrix* graph_;  // not owned\n  // Each element of the left_ vector represents a left hand side node\n  // (i.e. an element) and each element of right_ is a right hand side\n  // node (i.e. a matcher). The values in the left_ vector indicate\n  // outflow from that node to a node on the right_ side. The values\n  // in the right_ indicate inflow, and specify which left_ node is\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-matchers.cc"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 14,
                  "endLine": 194,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      // this edge is a dead end or leads to the sink.\n      //\n      // right_[irhs] == kUnused means that there is residual flow from\n      // right node irhs to the sink, so we can use that to finish this\n      // flow path and return success.\n      //\n      // Otherwise there is residual flow to some ilhs. We push flow\n",
                    "rendered": {
                      "text": "      // this edge is a dead end or leads to the sink.\n      //\n      // right_[irhs] == kUnused means that there is residual flow from\n      // right node irhs to the sink, so we can use that to finish this\n      // flow path and return success.\n      //\n      // Otherwise there is residual flow to some ilhs. We push flow\n",
                      "markdown": "`      // this edge is a dead end or leads to the sink.\n      //\n      // right_[irhs] == kUnused means that there is residual flow from\n      // right node irhs to the sink, so we can use that to finish this\n      // flow path and return success.\n      //\n      // Otherwise there is residual flow to some ilhs. We push flow\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-matchers.cc"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 42,
                  "endLine": 176,
                  "endColumn": 48,
                  "snippet": {
                    "text": "  // to right nodes and are marked to eliminate cycles from the search.\n  //\n  // Left nodes will only be explored at most once because they\n  // are accessible from at most one right node in the residual flow\n  // graph.\n  //\n  // Note that left_[ilhs] is the only element of left_ that TryAugment will\n",
                    "rendered": {
                      "text": "  // to right nodes and are marked to eliminate cycles from the search.\n  //\n  // Left nodes will only be explored at most once because they\n  // are accessible from at most one right node in the residual flow\n  // graph.\n  //\n  // Note that left_[ilhs] is the only element of left_ that TryAugment will\n",
                      "markdown": "`  // to right nodes and are marked to eliminate cycles from the search.\n  //\n  // Left nodes will only be explored at most once because they\n  // are accessible from at most one right node in the residual flow\n  // graph.\n  //\n  // Note that left_[ilhs] is the only element of left_ that TryAugment will\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-matchers.cc"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 43,
                  "endLine": 168,
                  "endColumn": 49,
                  "snippet": {
                    "text": " private:\n  static const size_t kUnused = static_cast<size_t>(-1);\n\n  // Perform a depth-first search from left node ilhs to the sink.  If a\n  // path is found, flow is added to the network by linking the left and\n  // right vector elements corresponding each segment of the path.\n  // Returns true if a path to sink was found, which means that a unit of\n",
                    "rendered": {
                      "text": " private:\n  static const size_t kUnused = static_cast<size_t>(-1);\n\n  // Perform a depth-first search from left node ilhs to the sink.  If a\n  // path is found, flow is added to the network by linking the left and\n  // right vector elements corresponding each segment of the path.\n  // Returns true if a path to sink was found, which means that a unit of\n",
                      "markdown": "` private:\n  static const size_t kUnused = static_cast<size_t>(-1);\n\n  // Perform a depth-first search from left node ilhs to the sink.  If a\n  // path is found, flow is added to the network by linking the left and\n  // right vector elements corresponding each segment of the path.\n  // Returns true if a path to sink was found, which means that a unit of\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-matchers.cc"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 49,
                  "endLine": 148,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    // The flow is known to be possible or impossible by looking at the\n    // node once.\n    for (size_t ilhs = 0; ilhs < graph_->LhsSize(); ++ilhs) {\n      // Reset the path-marking vector and try to find a path from\n      // source to sink starting at the left_[ilhs] node.\n      GTEST_CHECK_(left_[ilhs] == kUnused)\n          << \"ilhs: \" << ilhs << \", left_[ilhs]: \" << left_[ilhs];\n",
                    "rendered": {
                      "text": "    // The flow is known to be possible or impossible by looking at the\n    // node once.\n    for (size_t ilhs = 0; ilhs < graph_->LhsSize(); ++ilhs) {\n      // Reset the path-marking vector and try to find a path from\n      // source to sink starting at the left_[ilhs] node.\n      GTEST_CHECK_(left_[ilhs] == kUnused)\n          << \"ilhs: \" << ilhs << \", left_[ilhs]: \" << left_[ilhs];\n",
                      "markdown": "`    // The flow is known to be possible or impossible by looking at the\n    // node once.\n    for (size_t ilhs = 0; ilhs < graph_->LhsSize(); ++ilhs) {\n      // Reset the path-marking vector and try to find a path from\n      // source to sink starting at the left_[ilhs] node.\n      GTEST_CHECK_(left_[ilhs] == kUnused)\n          << \"ilhs: \" << ilhs << \", left_[ilhs]: \" << left_[ilhs];\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-matchers.cc"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 6,
                  "endLine": 146,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    // each element can be matched to only one matcher), there is no need\n    // to visit the left nodes more than once looking for augmented paths.\n    // The flow is known to be possible or impossible by looking at the\n    // node once.\n    for (size_t ilhs = 0; ilhs < graph_->LhsSize(); ++ilhs) {\n      // Reset the path-marking vector and try to find a path from\n      // source to sink starting at the left_[ilhs] node.\n",
                    "rendered": {
                      "text": "    // each element can be matched to only one matcher), there is no need\n    // to visit the left nodes more than once looking for augmented paths.\n    // The flow is known to be possible or impossible by looking at the\n    // node once.\n    for (size_t ilhs = 0; ilhs < graph_->LhsSize(); ++ilhs) {\n      // Reset the path-marking vector and try to find a path from\n      // source to sink starting at the left_[ilhs] node.\n",
                      "markdown": "`    // each element can be matched to only one matcher), there is no need\n    // to visit the left nodes more than once looking for augmented paths.\n    // The flow is known to be possible or impossible by looking at the\n    // node once.\n    for (size_t ilhs = 0; ilhs < graph_->LhsSize(); ++ilhs) {\n      // Reset the path-marking vector and try to find a path from\n      // source to sink starting at the left_[ilhs] node.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-matchers.cc"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 39,
                  "endLine": 139,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    // the sink in the residual flow graph, and if one is found, add flow\n    // to the graph. It's okay to search through the left nodes once. The\n    // edge from the implicit source node to each previously-visited left\n    // node will have flow if that left node has any path to the sink\n    // whatsoever. Subsequent augmentations can only add flow to the\n    // network, and cannot take away that previous flow unit from the source.\n    // Since the source-to-left edge can only carry one flow unit (or,\n",
                    "rendered": {
                      "text": "    // the sink in the residual flow graph, and if one is found, add flow\n    // to the graph. It's okay to search through the left nodes once. The\n    // edge from the implicit source node to each previously-visited left\n    // node will have flow if that left node has any path to the sink\n    // whatsoever. Subsequent augmentations can only add flow to the\n    // network, and cannot take away that previous flow unit from the source.\n    // Since the source-to-left edge can only carry one flow unit (or,\n",
                      "markdown": "`    // the sink in the residual flow graph, and if one is found, add flow\n    // to the graph. It's okay to search through the left nodes once. The\n    // edge from the implicit source node to each previously-visited left\n    // node will have flow if that left node has any path to the sink\n    // whatsoever. Subsequent augmentations can only add flow to the\n    // network, and cannot take away that previous flow unit from the source.\n    // Since the source-to-left edge can only carry one flow unit (or,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-matchers.cc"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 6,
                  "endLine": 139,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    // the sink in the residual flow graph, and if one is found, add flow\n    // to the graph. It's okay to search through the left nodes once. The\n    // edge from the implicit source node to each previously-visited left\n    // node will have flow if that left node has any path to the sink\n    // whatsoever. Subsequent augmentations can only add flow to the\n    // network, and cannot take away that previous flow unit from the source.\n    // Since the source-to-left edge can only carry one flow unit (or,\n",
                    "rendered": {
                      "text": "    // the sink in the residual flow graph, and if one is found, add flow\n    // to the graph. It's okay to search through the left nodes once. The\n    // edge from the implicit source node to each previously-visited left\n    // node will have flow if that left node has any path to the sink\n    // whatsoever. Subsequent augmentations can only add flow to the\n    // network, and cannot take away that previous flow unit from the source.\n    // Since the source-to-left edge can only carry one flow unit (or,\n",
                      "markdown": "`    // the sink in the residual flow graph, and if one is found, add flow\n    // to the graph. It's okay to search through the left nodes once. The\n    // edge from the implicit source node to each previously-visited left\n    // node will have flow if that left node has any path to the sink\n    // whatsoever. Subsequent augmentations can only add flow to the\n    // network, and cannot take away that previous flow unit from the source.\n    // Since the source-to-left edge can only carry one flow unit (or,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-matchers.cc"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 36,
                  "endLine": 138,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    // Searches the residual flow graph for a path from each left node to\n    // the sink in the residual flow graph, and if one is found, add flow\n    // to the graph. It's okay to search through the left nodes once. The\n    // edge from the implicit source node to each previously-visited left\n    // node will have flow if that left node has any path to the sink\n    // whatsoever. Subsequent augmentations can only add flow to the\n    // network, and cannot take away that previous flow unit from the source.\n",
                    "rendered": {
                      "text": "    // Searches the residual flow graph for a path from each left node to\n    // the sink in the residual flow graph, and if one is found, add flow\n    // to the graph. It's okay to search through the left nodes once. The\n    // edge from the implicit source node to each previously-visited left\n    // node will have flow if that left node has any path to the sink\n    // whatsoever. Subsequent augmentations can only add flow to the\n    // network, and cannot take away that previous flow unit from the source.\n",
                      "markdown": "`    // Searches the residual flow graph for a path from each left node to\n    // the sink in the residual flow graph, and if one is found, add flow\n    // to the graph. It's okay to search through the left nodes once. The\n    // edge from the implicit source node to each previously-visited left\n    // node will have flow if that left node has any path to the sink\n    // whatsoever. Subsequent augmentations can only add flow to the\n    // network, and cannot take away that previous flow unit from the source.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-matchers.cc"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 65,
                  "endLine": 135,
                  "endColumn": 71,
                  "snippet": {
                    "text": "  ElementMatcherPairs Compute() {\n    // 'seen' is used for path finding { 0: unseen, 1: seen }.\n    ::std::vector<char> seen;\n    // Searches the residual flow graph for a path from each left node to\n    // the sink in the residual flow graph, and if one is found, add flow\n    // to the graph. It's okay to search through the left nodes once. The\n    // edge from the implicit source node to each previously-visited left\n",
                    "rendered": {
                      "text": "  ElementMatcherPairs Compute() {\n    // 'seen' is used for path finding { 0: unseen, 1: seen }.\n    ::std::vector<char> seen;\n    // Searches the residual flow graph for a path from each left node to\n    // the sink in the residual flow graph, and if one is found, add flow\n    // to the graph. It's okay to search through the left nodes once. The\n    // edge from the implicit source node to each previously-visited left\n",
                      "markdown": "`  ElementMatcherPairs Compute() {\n    // 'seen' is used for path finding { 0: unseen, 1: seen }.\n    ::std::vector<char> seen;\n    // Searches the residual flow graph for a path from each left node to\n    // the sink in the residual flow graph, and if one is found, add flow\n    // to the graph. It's okay to search through the left nodes once. The\n    // edge from the implicit source node to each previously-visited left\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-matchers.cc"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 30,
                  "endLine": 78,
                  "endColumn": 36,
                  "snippet": {
                    "text": "// following edges:\n//   - An edge from source to each left_ node\n//   - An edge from each right_ node to sink\n//   - An edge from each left_ node to each right_ node, if the\n//     corresponding edge exists in 'graph'.\n//\n// When the TryAugment() method adds a flow, it sets left_[l] = r for some\n",
                    "rendered": {
                      "text": "// following edges:\n//   - An edge from source to each left_ node\n//   - An edge from each right_ node to sink\n//   - An edge from each left_ node to each right_ node, if the\n//     corresponding edge exists in 'graph'.\n//\n// When the TryAugment() method adds a flow, it sets left_[l] = r for some\n",
                      "markdown": "`// following edges:\n//   - An edge from source to each left_ node\n//   - An edge from each right_ node to sink\n//   - An edge from each left_ node to each right_ node, if the\n//     corresponding edge exists in 'graph'.\n//\n// When the TryAugment() method adds a flow, it sets left_[l] = r for some\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-matchers.cc"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 31,
                  "endLine": 77,
                  "endColumn": 37,
                  "snippet": {
                    "text": "// where the flow graph is empty, and the residual flow graph has the\n// following edges:\n//   - An edge from source to each left_ node\n//   - An edge from each right_ node to sink\n//   - An edge from each left_ node to each right_ node, if the\n//     corresponding edge exists in 'graph'.\n//\n",
                    "rendered": {
                      "text": "// where the flow graph is empty, and the residual flow graph has the\n// following edges:\n//   - An edge from source to each left_ node\n//   - An edge from each right_ node to sink\n//   - An edge from each left_ node to each right_ node, if the\n//     corresponding edge exists in 'graph'.\n//\n",
                      "markdown": "`// where the flow graph is empty, and the residual flow graph has the\n// following edges:\n//   - An edge from source to each left_ node\n//   - An edge from each right_ node to sink\n//   - An edge from each left_ node to each right_ node, if the\n//     corresponding edge exists in 'graph'.\n//\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-matchers.cc"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 40,
                  "endLine": 77,
                  "snippet": {
                    "text": "// value kUnused. This represents the initial state of the algorithm,\n// where the flow graph is empty, and the residual flow graph has the\n// following edges:\n//   - An edge from source to each left_ node\n//   - An edge from each right_ node to sink\n//   - An edge from each left_ node to each right_ node, if the\n//     corresponding edge exists in 'graph'.\n//\n",
                    "rendered": {
                      "text": "// value kUnused. This represents the initial state of the algorithm,\n// where the flow graph is empty, and the residual flow graph has the\n// following edges:\n//   - An edge from source to each left_ node\n//   - An edge from each right_ node to sink\n//   - An edge from each left_ node to each right_ node, if the\n//     corresponding edge exists in 'graph'.\n//\n",
                      "markdown": "`// value kUnused. This represents the initial state of the algorithm,\n// where the flow graph is empty, and the residual flow graph has the\n// following edges:\n//   - An edge from source to each left_ node\n//   - An edge from each right_ node to sink\n//   - An edge from each left_ node to each right_ node, if the\n//     corresponding edge exists in 'graph'.\n//\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-matchers.cc"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 30,
                  "endLine": 67,
                  "endColumn": 36,
                  "snippet": {
                    "text": "// Uses the well-known Ford-Fulkerson max flow method to find a maximum\n// bipartite matching. Flow is considered to be from left to right.\n// There is an implicit source node that is connected to all of the left\n// nodes, and an implicit sink node that is connected to all of the\n// right nodes. All edges have unit capacity.\n//\n// Neither the flow graph nor the residual flow graph are represented\n",
                    "rendered": {
                      "text": "// Uses the well-known Ford-Fulkerson max flow method to find a maximum\n// bipartite matching. Flow is considered to be from left to right.\n// There is an implicit source node that is connected to all of the left\n// nodes, and an implicit sink node that is connected to all of the\n// right nodes. All edges have unit capacity.\n//\n// Neither the flow graph nor the residual flow graph are represented\n",
                      "markdown": "`// Uses the well-known Ford-Fulkerson max flow method to find a maximum\n// bipartite matching. Flow is considered to be from left to right.\n// There is an implicit source node that is connected to all of the left\n// nodes, and an implicit sink node that is connected to all of the\n// right nodes. All edges have unit capacity.\n//\n// Neither the flow graph nor the residual flow graph are represented\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-matchers.cc"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 30,
                  "endLine": 66,
                  "endColumn": 36,
                  "snippet": {
                    "text": "//\n// Uses the well-known Ford-Fulkerson max flow method to find a maximum\n// bipartite matching. Flow is considered to be from left to right.\n// There is an implicit source node that is connected to all of the left\n// nodes, and an implicit sink node that is connected to all of the\n// right nodes. All edges have unit capacity.\n//\n",
                    "rendered": {
                      "text": "//\n// Uses the well-known Ford-Fulkerson max flow method to find a maximum\n// bipartite matching. Flow is considered to be from left to right.\n// There is an implicit source node that is connected to all of the left\n// nodes, and an implicit sink node that is connected to all of the\n// right nodes. All edges have unit capacity.\n//\n",
                      "markdown": "`//\n// Uses the well-known Ford-Fulkerson max flow method to find a maximum\n// bipartite matching. Flow is considered to be from left to right.\n// There is an implicit source node that is connected to all of the left\n// nodes, and an implicit sink node that is connected to all of the\n// right nodes. All edges have unit capacity.\n//\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-matchers.cc"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 56,
                  "endLine": 64,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n// FindMaxBipartiteMatching and its helper class.\n//\n// Uses the well-known Ford-Fulkerson max flow method to find a maximum\n// bipartite matching. Flow is considered to be from left to right.\n// There is an implicit source node that is connected to all of the left\n// nodes, and an implicit sink node that is connected to all of the\n",
                    "rendered": {
                      "text": "\n// FindMaxBipartiteMatching and its helper class.\n//\n// Uses the well-known Ford-Fulkerson max flow method to find a maximum\n// bipartite matching. Flow is considered to be from left to right.\n// There is an implicit source node that is connected to all of the left\n// nodes, and an implicit sink node that is connected to all of the\n",
                      "markdown": "`\n// FindMaxBipartiteMatching and its helper class.\n//\n// Uses the well-known Ford-Fulkerson max flow method to find a maximum\n// bipartite matching. Flow is considered to be from left to right.\n// There is an implicit source node that is connected to all of the left\n// nodes, and an implicit sink node that is connected to all of the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-spec-builders.cc"
                },
                "region": {
                  "startLine": 783,
                  "startColumn": 46,
                  "endLine": 783,
                  "endColumn": 51,
                  "snippet": {
                    "text": "// of this object.\nInSequence::~InSequence() {\n  if (sequence_created_) {\n    delete internal::g_gmock_implicit_sequence.get();\n    internal::g_gmock_implicit_sequence.set(nullptr);\n  }\n}\n",
                    "rendered": {
                      "text": "// of this object.\nInSequence::~InSequence() {\n  if (sequence_created_) {\n    delete internal::g_gmock_implicit_sequence.get();\n    internal::g_gmock_implicit_sequence.set(nullptr);\n  }\n}\n",
                      "markdown": "`// of this object.\nInSequence::~InSequence() {\n  if (sequence_created_) {\n    delete internal::g_gmock_implicit_sequence.get();\n    internal::g_gmock_implicit_sequence.set(nullptr);\n  }\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-spec-builders.cc"
                },
                "region": {
                  "startLine": 771,
                  "startColumn": 41,
                  "endLine": 771,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n// Creates the implicit sequence if there isn't one.\nInSequence::InSequence() {\n  if (internal::g_gmock_implicit_sequence.get() == nullptr) {\n    internal::g_gmock_implicit_sequence.set(new Sequence);\n    sequence_created_ = true;\n  } else {\n",
                    "rendered": {
                      "text": "\n// Creates the implicit sequence if there isn't one.\nInSequence::InSequence() {\n  if (internal::g_gmock_implicit_sequence.get() == nullptr) {\n    internal::g_gmock_implicit_sequence.set(new Sequence);\n    sequence_created_ = true;\n  } else {\n",
                      "markdown": "`\n// Creates the implicit sequence if there isn't one.\nInSequence::InSequence() {\n  if (internal::g_gmock_implicit_sequence.get() == nullptr) {\n    internal::g_gmock_implicit_sequence.set(new Sequence);\n    sequence_created_ = true;\n  } else {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-spec-builders.cc"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 58,
                  "endLine": 167,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    for (ExpectationSet::const_iterator it =\n             exp->immediate_prerequisites_.begin();\n         it != exp->immediate_prerequisites_.end(); ++it) {\n      const ExpectationBase* next = it->expectation_base().get();\n\n      if (next->IsSatisfied()) {\n        // If *it is satisfied and has a call count of 0, some of its\n",
                    "rendered": {
                      "text": "    for (ExpectationSet::const_iterator it =\n             exp->immediate_prerequisites_.begin();\n         it != exp->immediate_prerequisites_.end(); ++it) {\n      const ExpectationBase* next = it->expectation_base().get();\n\n      if (next->IsSatisfied()) {\n        // If *it is satisfied and has a call count of 0, some of its\n",
                      "markdown": "`    for (ExpectationSet::const_iterator it =\n             exp->immediate_prerequisites_.begin();\n         it != exp->immediate_prerequisites_.end(); ++it) {\n      const ExpectationBase* next = it->expectation_base().get();\n\n      if (next->IsSatisfied()) {\n        // If *it is satisfied and has a call count of 0, some of its\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-spec-builders.cc"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 58,
                  "endLine": 147,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    for (ExpectationSet::const_iterator it =\n             exp->immediate_prerequisites_.begin();\n         it != exp->immediate_prerequisites_.end(); ++it) {\n      const ExpectationBase* next = it->expectation_base().get();\n      if (!next->IsSatisfied()) return false;\n      expectations.push_back(next);\n    }\n",
                    "rendered": {
                      "text": "    for (ExpectationSet::const_iterator it =\n             exp->immediate_prerequisites_.begin();\n         it != exp->immediate_prerequisites_.end(); ++it) {\n      const ExpectationBase* next = it->expectation_base().get();\n      if (!next->IsSatisfied()) return false;\n      expectations.push_back(next);\n    }\n",
                      "markdown": "`    for (ExpectationSet::const_iterator it =\n             exp->immediate_prerequisites_.begin();\n         it != exp->immediate_prerequisites_.end(); ++it) {\n      const ExpectationBase* next = it->expectation_base().get();\n      if (!next->IsSatisfied()) return false;\n      expectations.push_back(next);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-spec-builders.cc"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 52,
                  "endLine": 125,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    for (ExpectationSet::const_iterator it =\n             exp->immediate_prerequisites_.begin();\n         it != exp->immediate_prerequisites_.end(); ++it) {\n      ExpectationBase* next = it->expectation_base().get();\n      if (!next->is_retired()) {\n        next->Retire();\n        expectations.push_back(next);\n",
                    "rendered": {
                      "text": "    for (ExpectationSet::const_iterator it =\n             exp->immediate_prerequisites_.begin();\n         it != exp->immediate_prerequisites_.end(); ++it) {\n      ExpectationBase* next = it->expectation_base().get();\n      if (!next->is_retired()) {\n        next->Retire();\n        expectations.push_back(next);\n",
                      "markdown": "`    for (ExpectationSet::const_iterator it =\n             exp->immediate_prerequisites_.begin();\n         it != exp->immediate_prerequisites_.end(); ++it) {\n      ExpectationBase* next = it->expectation_base().get();\n      if (!next->is_retired()) {\n        next->Retire();\n        expectations.push_back(next);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-spec-builders.cc"
                },
                "region": {
                  "startLine": 519,
                  "startColumn": 26,
                  "endLine": 519,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    if (leaked_count > 0) {\n      std::cout << \"\\nERROR: \" << leaked_count << \" leaked mock \"\n                << (leaked_count == 1 ? \"object\" : \"objects\")\n                << \" found at program exit. Expectations on a mock object are \"\n                   \"verified when the object is destructed. Leaking a mock \"\n                   \"means that its expectations aren't verified, which is \"\n                   \"usually a test bug. If you really intend to leak a mock, \"\n",
                    "rendered": {
                      "text": "    if (leaked_count > 0) {\n      std::cout << \"\\nERROR: \" << leaked_count << \" leaked mock \"\n                << (leaked_count == 1 ? \"object\" : \"objects\")\n                << \" found at program exit. Expectations on a mock object are \"\n                   \"verified when the object is destructed. Leaking a mock \"\n                   \"means that its expectations aren't verified, which is \"\n                   \"usually a test bug. If you really intend to leak a mock, \"\n",
                      "markdown": "`    if (leaked_count > 0) {\n      std::cout << \"\\nERROR: \" << leaked_count << \" leaked mock \"\n                << (leaked_count == 1 ? \"object\" : \"objects\")\n                << \" found at program exit. Expectations on a mock object are \"\n                   \"verified when the object is destructed. Leaking a mock \"\n                   \"means that its expectations aren't verified, which is \"\n                   \"usually a test bug. If you really intend to leak a mock, \"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-spec-builders.cc"
                },
                "region": {
                  "startLine": 479,
                  "startColumn": 60,
                  "endLine": 480,
                  "snippet": {
                    "text": "};\n\n// A global registry holding the state of all mock objects that are\n// alive.  A mock object is added to this registry the first time\n// Mock::AllowLeak(), ON_CALL(), or EXPECT_CALL() is called on it.  It\n// is removed from the registry in the mock object's destructor.\nclass MockObjectRegistry {\n public:\n",
                    "rendered": {
                      "text": "};\n\n// A global registry holding the state of all mock objects that are\n// alive.  A mock object is added to this registry the first time\n// Mock::AllowLeak(), ON_CALL(), or EXPECT_CALL() is called on it.  It\n// is removed from the registry in the mock object's destructor.\nclass MockObjectRegistry {\n public:\n",
                      "markdown": "`};\n\n// A global registry holding the state of all mock objects that are\n// alive.  A mock object is added to this registry the first time\n// Mock::AllowLeak(), ON_CALL(), or EXPECT_CALL() is called on it.  It\n// is removed from the registry in the mock object's destructor.\nclass MockObjectRegistry {\n public:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/googlemock/src/gmock-spec-builders.cc"
                },
                "region": {
                  "startLine": 386,
                  "startColumn": 43,
                  "endLine": 386,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    }\n  }\n\n  Assert(false, __FILE__, __LINE__, \"Cannot find expectation.\");\n  return Expectation();\n  // The above statement is just to make the code compile, and will\n  // never be executed.\n",
                    "rendered": {
                      "text": "    }\n  }\n\n  Assert(false, __FILE__, __LINE__, \"Cannot find expectation.\");\n  return Expectation();\n  // The above statement is just to make the code compile, and will\n  // never be executed.\n",
                      "markdown": "`    }\n  }\n\n  Assert(false, __FILE__, __LINE__, \"Cannot find expectation.\");\n  return Expectation();\n  // The above statement is just to make the code compile, and will\n  // never be executed.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 11,
                  "endLine": 121,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\nMake sure you have Python installed, as some of Google Test's tests are written\nin Python. If the cmake command complains about not being able to find Python\n(`Could NOT find PythonInterp (missing: PYTHON_EXECUTABLE)`), try telling it\nexplicitly where your Python executable can be found:\n\n```\n",
                    "rendered": {
                      "text": "\nMake sure you have Python installed, as some of Google Test's tests are written\nin Python. If the cmake command complains about not being able to find Python\n(`Could NOT find PythonInterp (missing: PYTHON_EXECUTABLE)`), try telling it\nexplicitly where your Python executable can be found:\n\n```\n",
                      "markdown": "`\nMake sure you have Python installed, as some of Google Test's tests are written\nin Python. If the cmake command complains about not being able to find Python\n(`Could NOT find PythonInterp (missing: PYTHON_EXECUTABLE)`), try telling it\nexplicitly where your Python executable can be found:\n\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 65,
                  "endLine": 120,
                  "endColumn": 71,
                  "snippet": {
                    "text": "```\n\nMake sure you have Python installed, as some of Google Test's tests are written\nin Python. If the cmake command complains about not being able to find Python\n(`Could NOT find PythonInterp (missing: PYTHON_EXECUTABLE)`), try telling it\nexplicitly where your Python executable can be found:\n\n",
                    "rendered": {
                      "text": "```\n\nMake sure you have Python installed, as some of Google Test's tests are written\nin Python. If the cmake command complains about not being able to find Python\n(`Could NOT find PythonInterp (missing: PYTHON_EXECUTABLE)`), try telling it\nexplicitly where your Python executable can be found:\n\n",
                      "markdown": "````\n\nMake sure you have Python installed, as some of Google Test's tests are written\nin Python. If the cmake command complains about not being able to find Python\n(`Could NOT find PythonInterp (missing: PYTHON_EXECUTABLE)`), try telling it\nexplicitly where your Python executable can be found:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gtest.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 26,
                  "endLine": 89,
                  "endColumn": 31,
                  "snippet": {
                    "text": "## Requirements for Contributors\n\nIf you plan to contribute a patch, you need to build Google Test, Google Mock,\nand their own tests from a git checkout, which has further requirements:\n\n*   [Python](https://www.python.org/) v3.6 or newer (for running some of the\n    tests and re-generating certain source files from templates)\n",
                    "rendered": {
                      "text": "## Requirements for Contributors\n\nIf you plan to contribute a patch, you need to build Google Test, Google Mock,\nand their own tests from a git checkout, which has further requirements:\n\n*   [Python](https://www.python.org/) v3.6 or newer (for running some of the\n    tests and re-generating certain source files from templates)\n",
                      "markdown": "`## Requirements for Contributors\n\nIf you plan to contribute a patch, you need to build Google Test, Google Mock,\nand their own tests from a git checkout, which has further requirements:\n\n*   [Python](https://www.python.org/) v3.6 or newer (for running some of the\n    tests and re-generating certain source files from templates)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}