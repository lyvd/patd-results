{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/websocket_bootstrap.c"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 34,
                  "endLine": 335,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    if (aws_base64_encode(&sha1_cursor, out_buf)) {\n        AWS_LOGF_ERROR(\n            AWS_LS_HTTP_WEBSOCKET_SETUP,\n            \"id=static: Failed to Base64-encode, error %d (%s)\",\n            aws_last_error(),\n            aws_error_name(aws_last_error()));\n        goto cleanup;\n",
                    "rendered": {
                      "text": "    if (aws_base64_encode(&sha1_cursor, out_buf)) {\n        AWS_LOGF_ERROR(\n            AWS_LS_HTTP_WEBSOCKET_SETUP,\n            \"id=static: Failed to Base64-encode, error %d (%s)\",\n            aws_last_error(),\n            aws_error_name(aws_last_error()));\n        goto cleanup;\n",
                      "markdown": "`    if (aws_base64_encode(&sha1_cursor, out_buf)) {\n        AWS_LOGF_ERROR(\n            AWS_LS_HTTP_WEBSOCKET_SETUP,\n            \"id=static: Failed to Base64-encode, error %d (%s)\",\n            aws_last_error(),\n            aws_error_name(aws_last_error()));\n        goto cleanup;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/websocket_bootstrap.c"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 44,
                  "endLine": 324,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    if (aws_base64_compute_encoded_len(sha1_buf.len, &base64_encode_sha1_len)) {\n        AWS_LOGF_ERROR(\n            AWS_LS_HTTP_WEBSOCKET_SETUP,\n            \"id=static: Failed to determine Base64-encoded length, error %d (%s)\",\n            aws_last_error(),\n            aws_error_name(aws_last_error()));\n        goto cleanup;\n",
                    "rendered": {
                      "text": "    if (aws_base64_compute_encoded_len(sha1_buf.len, &base64_encode_sha1_len)) {\n        AWS_LOGF_ERROR(\n            AWS_LS_HTTP_WEBSOCKET_SETUP,\n            \"id=static: Failed to determine Base64-encoded length, error %d (%s)\",\n            aws_last_error(),\n            aws_error_name(aws_last_error()));\n        goto cleanup;\n",
                      "markdown": "`    if (aws_base64_compute_encoded_len(sha1_buf.len, &base64_encode_sha1_len)) {\n        AWS_LOGF_ERROR(\n            AWS_LS_HTTP_WEBSOCKET_SETUP,\n            \"id=static: Failed to determine Base64-encoded length, error %d (%s)\",\n            aws_last_error(),\n            aws_error_name(aws_last_error()));\n        goto cleanup;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/websocket_bootstrap.c"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 33,
                  "endLine": 302,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    if (aws_hash_update(sha1, &sec_websocket_key) || aws_hash_update(sha1, &magic_string)) {\n        AWS_LOGF_ERROR(\n            AWS_LS_HTTP_WEBSOCKET_SETUP,\n            \"id=static: Failed to update SHA1, error %d (%s)\",\n            aws_last_error(),\n            aws_error_name(aws_last_error()));\n        goto cleanup;\n",
                    "rendered": {
                      "text": "    if (aws_hash_update(sha1, &sec_websocket_key) || aws_hash_update(sha1, &magic_string)) {\n        AWS_LOGF_ERROR(\n            AWS_LS_HTTP_WEBSOCKET_SETUP,\n            \"id=static: Failed to update SHA1, error %d (%s)\",\n            aws_last_error(),\n            aws_error_name(aws_last_error()));\n        goto cleanup;\n",
                      "markdown": "`    if (aws_hash_update(sha1, &sec_websocket_key) || aws_hash_update(sha1, &magic_string)) {\n        AWS_LOGF_ERROR(\n            AWS_LS_HTTP_WEBSOCKET_SETUP,\n            \"id=static: Failed to update SHA1, error %d (%s)\",\n            aws_last_error(),\n            aws_error_name(aws_last_error()));\n        goto cleanup;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/h2_connection.c"
                },
                "region": {
                  "startLine": 2238,
                  "startColumn": 26,
                  "endLine": 2238,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    CONNECTION_LOGF(\n        TRACE,\n        connection,\n        \"User requested to update the HTTP/2 connection's flow-control windows by %\" PRIu32 \".\",\n        increment_size);\n    return;\noverflow:\n",
                    "rendered": {
                      "text": "    CONNECTION_LOGF(\n        TRACE,\n        connection,\n        \"User requested to update the HTTP/2 connection's flow-control windows by %\" PRIu32 \".\",\n        increment_size);\n    return;\noverflow:\n",
                      "markdown": "`    CONNECTION_LOGF(\n        TRACE,\n        connection,\n        \"User requested to update the HTTP/2 connection's flow-control windows by %\" PRIu32 \".\",\n        increment_size);\n    return;\noverflow:\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/h2_connection.c"
                },
                "region": {
                  "startLine": 2180,
                  "startColumn": 56,
                  "endLine": 2180,
                  "endColumn": 64,
                  "snippet": {
                    "text": "        CONNECTION_LOG(\n            DEBUG,\n            connection,\n            \"Connection manual window management is off, update window operations are not supported.\");\n        return;\n    }\n    struct aws_h2_frame *connection_window_update_frame =\n",
                    "rendered": {
                      "text": "        CONNECTION_LOG(\n            DEBUG,\n            connection,\n            \"Connection manual window management is off, update window operations are not supported.\");\n        return;\n    }\n    struct aws_h2_frame *connection_window_update_frame =\n",
                      "markdown": "`        CONNECTION_LOG(\n            DEBUG,\n            connection,\n            \"Connection manual window management is off, update window operations are not supported.\");\n        return;\n    }\n    struct aws_h2_frame *connection_window_update_frame =\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/h2_connection.c"
                },
                "region": {
                  "startLine": 1576,
                  "startColumn": 23,
                  "endLine": 1576,
                  "endColumn": 31,
                  "snippet": {
                    "text": "            CONNECTION_LOG(\n                ERROR,\n                connection,\n                \"Window update frame causes the connection flow-control window exceeding the maximum size\");\n            return aws_h2err_from_h2_code(AWS_HTTP2_ERR_FLOW_CONTROL_ERROR);\n        }\n        if (connection->thread_data.window_size_peer <= AWS_H2_MIN_WINDOW_SIZE) {\n",
                    "rendered": {
                      "text": "            CONNECTION_LOG(\n                ERROR,\n                connection,\n                \"Window update frame causes the connection flow-control window exceeding the maximum size\");\n            return aws_h2err_from_h2_code(AWS_HTTP2_ERR_FLOW_CONTROL_ERROR);\n        }\n        if (connection->thread_data.window_size_peer <= AWS_H2_MIN_WINDOW_SIZE) {\n",
                      "markdown": "`            CONNECTION_LOG(\n                ERROR,\n                connection,\n                \"Window update frame causes the connection flow-control window exceeding the maximum size\");\n            return aws_h2err_from_h2_code(AWS_HTTP2_ERR_FLOW_CONTROL_ERROR);\n        }\n        if (connection->thread_data.window_size_peer <= AWS_H2_MIN_WINDOW_SIZE) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/h2_connection.c"
                },
                "region": {
                  "startLine": 1568,
                  "startColumn": 53,
                  "endLine": 1568,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        /* Let's update the connection flow-control window size */\n        if (window_size_increment == 0) {\n            /* flow-control window increment of 0 MUST be treated as error (RFC7540 6.9.1) */\n            CONNECTION_LOG(ERROR, connection, \"Window update frame with 0 increment size\");\n            return aws_h2err_from_h2_code(AWS_HTTP2_ERR_PROTOCOL_ERROR);\n        }\n        if (connection->thread_data.window_size_peer + window_size_increment > AWS_H2_WINDOW_UPDATE_MAX) {\n",
                    "rendered": {
                      "text": "        /* Let's update the connection flow-control window size */\n        if (window_size_increment == 0) {\n            /* flow-control window increment of 0 MUST be treated as error (RFC7540 6.9.1) */\n            CONNECTION_LOG(ERROR, connection, \"Window update frame with 0 increment size\");\n            return aws_h2err_from_h2_code(AWS_HTTP2_ERR_PROTOCOL_ERROR);\n        }\n        if (connection->thread_data.window_size_peer + window_size_increment > AWS_H2_WINDOW_UPDATE_MAX) {\n",
                      "markdown": "`        /* Let's update the connection flow-control window size */\n        if (window_size_increment == 0) {\n            /* flow-control window increment of 0 MUST be treated as error (RFC7540 6.9.1) */\n            CONNECTION_LOG(ERROR, connection, \"Window update frame with 0 increment size\");\n            return aws_h2err_from_h2_code(AWS_HTTP2_ERR_PROTOCOL_ERROR);\n        }\n        if (connection->thread_data.window_size_peer + window_size_increment > AWS_H2_WINDOW_UPDATE_MAX) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/h2_connection.c"
                },
                "region": {
                  "startLine": 2326,
                  "startColumn": 31,
                  "endLine": 2326,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        CONNECTION_LOGF(\n            ERROR,\n            connection,\n            \"Failed getting the time stamp to start PING, error %s\",\n            aws_error_name(aws_last_error()));\n        return AWS_OP_ERR;\n    }\n",
                    "rendered": {
                      "text": "        CONNECTION_LOGF(\n            ERROR,\n            connection,\n            \"Failed getting the time stamp to start PING, error %s\",\n            aws_error_name(aws_last_error()));\n        return AWS_OP_ERR;\n    }\n",
                      "markdown": "`        CONNECTION_LOGF(\n            ERROR,\n            connection,\n            \"Failed getting the time stamp to start PING, error %s\",\n            aws_error_name(aws_last_error()));\n        return AWS_OP_ERR;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/h2_connection.c"
                },
                "region": {
                  "startLine": 1361,
                  "startColumn": 50,
                  "endLine": 1361,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        err = aws_h2err_from_last_error();\n        goto error;\n    }\n    CONNECTION_LOGF(TRACE, connection, \"Round trip time is %lf ms, approximately\", (double)rtt / 1000000);\n    /* fire the callback */\n    if (pending_ping->on_completed) {\n        pending_ping->on_completed(&connection->base, rtt, AWS_ERROR_SUCCESS, pending_ping->user_data);\n",
                    "rendered": {
                      "text": "        err = aws_h2err_from_last_error();\n        goto error;\n    }\n    CONNECTION_LOGF(TRACE, connection, \"Round trip time is %lf ms, approximately\", (double)rtt / 1000000);\n    /* fire the callback */\n    if (pending_ping->on_completed) {\n        pending_ping->on_completed(&connection->base, rtt, AWS_ERROR_SUCCESS, pending_ping->user_data);\n",
                      "markdown": "`        err = aws_h2err_from_last_error();\n        goto error;\n    }\n    CONNECTION_LOGF(TRACE, connection, \"Round trip time is %lf ms, approximately\", (double)rtt / 1000000);\n    /* fire the callback */\n    if (pending_ping->on_completed) {\n        pending_ping->on_completed(&connection->base, rtt, AWS_ERROR_SUCCESS, pending_ping->user_data);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/h2_connection.c"
                },
                "region": {
                  "startLine": 1356,
                  "startColumn": 26,
                  "endLine": 1356,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        CONNECTION_LOGF(\n            ERROR,\n            connection,\n            \"Overflow from time stamp when PING ACK received, error %s\",\n            aws_error_name(aws_last_error()));\n        err = aws_h2err_from_last_error();\n        goto error;\n",
                    "rendered": {
                      "text": "        CONNECTION_LOGF(\n            ERROR,\n            connection,\n            \"Overflow from time stamp when PING ACK received, error %s\",\n            aws_error_name(aws_last_error()));\n        err = aws_h2err_from_last_error();\n        goto error;\n",
                      "markdown": "`        CONNECTION_LOGF(\n            ERROR,\n            connection,\n            \"Overflow from time stamp when PING ACK received, error %s\",\n            aws_error_name(aws_last_error()));\n        err = aws_h2err_from_last_error();\n        goto error;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/h2_connection.c"
                },
                "region": {
                  "startLine": 1346,
                  "startColumn": 31,
                  "endLine": 1346,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        CONNECTION_LOGF(\n            ERROR,\n            connection,\n            \"Failed getting the time stamp when PING ACK received, error %s\",\n            aws_error_name(aws_last_error()));\n        err = aws_h2err_from_last_error();\n        goto error;\n",
                    "rendered": {
                      "text": "        CONNECTION_LOGF(\n            ERROR,\n            connection,\n            \"Failed getting the time stamp when PING ACK received, error %s\",\n            aws_error_name(aws_last_error()));\n        err = aws_h2err_from_last_error();\n        goto error;\n",
                      "markdown": "`        CONNECTION_LOGF(\n            ERROR,\n            connection,\n            \"Failed getting the time stamp when PING ACK received, error %s\",\n            aws_error_name(aws_last_error()));\n        err = aws_h2err_from_last_error();\n        goto error;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/h1_connection.c"
                },
                "region": {
                  "startLine": 940,
                  "startColumn": 12,
                  "endLine": 940,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        /* Look for next stream we can work on. */\n        for (struct aws_linked_list_node *node = aws_linked_list_begin(&connection->thread_data.stream_list);\n             node != aws_linked_list_end(&connection->thread_data.stream_list);\n             node = aws_linked_list_next(node)) {\n\n            struct aws_h1_stream *stream = AWS_CONTAINER_OF(node, struct aws_h1_stream, node);\n\n",
                    "rendered": {
                      "text": "        /* Look for next stream we can work on. */\n        for (struct aws_linked_list_node *node = aws_linked_list_begin(&connection->thread_data.stream_list);\n             node != aws_linked_list_end(&connection->thread_data.stream_list);\n             node = aws_linked_list_next(node)) {\n\n            struct aws_h1_stream *stream = AWS_CONTAINER_OF(node, struct aws_h1_stream, node);\n\n",
                      "markdown": "`        /* Look for next stream we can work on. */\n        for (struct aws_linked_list_node *node = aws_linked_list_begin(&connection->thread_data.stream_list);\n             node != aws_linked_list_end(&connection->thread_data.stream_list);\n             node = aws_linked_list_next(node)) {\n\n            struct aws_h1_stream *stream = AWS_CONTAINER_OF(node, struct aws_h1_stream, node);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/h1_connection.c"
                },
                "region": {
                  "startLine": 939,
                  "startColumn": 12,
                  "endLine": 939,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n        /* Look for next stream we can work on. */\n        for (struct aws_linked_list_node *node = aws_linked_list_begin(&connection->thread_data.stream_list);\n             node != aws_linked_list_end(&connection->thread_data.stream_list);\n             node = aws_linked_list_next(node)) {\n\n            struct aws_h1_stream *stream = AWS_CONTAINER_OF(node, struct aws_h1_stream, node);\n",
                    "rendered": {
                      "text": "\n        /* Look for next stream we can work on. */\n        for (struct aws_linked_list_node *node = aws_linked_list_begin(&connection->thread_data.stream_list);\n             node != aws_linked_list_end(&connection->thread_data.stream_list);\n             node = aws_linked_list_next(node)) {\n\n            struct aws_h1_stream *stream = AWS_CONTAINER_OF(node, struct aws_h1_stream, node);\n",
                      "markdown": "`\n        /* Look for next stream we can work on. */\n        for (struct aws_linked_list_node *node = aws_linked_list_begin(&connection->thread_data.stream_list);\n             node != aws_linked_list_end(&connection->thread_data.stream_list);\n             node = aws_linked_list_next(node)) {\n\n            struct aws_h1_stream *stream = AWS_CONTAINER_OF(node, struct aws_h1_stream, node);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/hpack_decoder.c"
                },
                "region": {
                  "startLine": 422,
                  "startColumn": 62,
                  "endLine": 422,
                  "endColumn": 70,
                  "snippet": {
                    "text": "                }\n                size_t size = (size_t)*size64;\n\n                HPACK_LOGF(TRACE, decoder, \"Dynamic table size update %zu\", size);\n                if (aws_hpack_resize_dynamic_table(&decoder->context, size)) {\n                    return AWS_OP_ERR;\n                }\n",
                    "rendered": {
                      "text": "                }\n                size_t size = (size_t)*size64;\n\n                HPACK_LOGF(TRACE, decoder, \"Dynamic table size update %zu\", size);\n                if (aws_hpack_resize_dynamic_table(&decoder->context, size)) {\n                    return AWS_OP_ERR;\n                }\n",
                      "markdown": "`                }\n                size_t size = (size_t)*size64;\n\n                HPACK_LOGF(TRACE, decoder, \"Dynamic table size update %zu\", size);\n                if (aws_hpack_resize_dynamic_table(&decoder->context, size)) {\n                    return AWS_OP_ERR;\n                }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/hpack_decoder.c"
                },
                "region": {
                  "startLine": 417,
                  "startColumn": 60,
                  "endLine": 417,
                  "endColumn": 68,
                  "snippet": {
                    "text": "                /* The new maximum size MUST be lower than or equal to the limit determined by the protocol using HPACK.\n                 * A value that exceeds this limit MUST be treated as a decoding error. */\n                if (*size64 > decoder->dynamic_table_protocol_max_size_setting) {\n                    HPACK_LOG(ERROR, decoder, \"Dynamic table update size is larger than the protocal setting\");\n                    return aws_raise_error(AWS_ERROR_INVALID_ARGUMENT);\n                }\n                size_t size = (size_t)*size64;\n",
                    "rendered": {
                      "text": "                /* The new maximum size MUST be lower than or equal to the limit determined by the protocol using HPACK.\n                 * A value that exceeds this limit MUST be treated as a decoding error. */\n                if (*size64 > decoder->dynamic_table_protocol_max_size_setting) {\n                    HPACK_LOG(ERROR, decoder, \"Dynamic table update size is larger than the protocal setting\");\n                    return aws_raise_error(AWS_ERROR_INVALID_ARGUMENT);\n                }\n                size_t size = (size_t)*size64;\n",
                      "markdown": "`                /* The new maximum size MUST be lower than or equal to the limit determined by the protocol using HPACK.\n                 * A value that exceeds this limit MUST be treated as a decoding error. */\n                if (*size64 > decoder->dynamic_table_protocol_max_size_setting) {\n                    HPACK_LOG(ERROR, decoder, \"Dynamic table update size is larger than the protocal setting\");\n                    return aws_raise_error(AWS_ERROR_INVALID_ARGUMENT);\n                }\n                size_t size = (size_t)*size64;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/connection.c"
                },
                "region": {
                  "startLine": 522,
                  "startColumn": 57,
                  "endLine": 522,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    /* Tell user of successful connection. */\n    AWS_LOGF_INFO(\n        AWS_LS_HTTP_CONNECTION,\n        \"id=%p: \" PRInSTR \" server connection established at %p %s:%u.\",\n        (void *)connection,\n        AWS_BYTE_CURSOR_PRI(aws_http_version_to_str(connection->http_version)),\n        (void *)server,\n",
                    "rendered": {
                      "text": "    /* Tell user of successful connection. */\n    AWS_LOGF_INFO(\n        AWS_LS_HTTP_CONNECTION,\n        \"id=%p: \" PRInSTR \" server connection established at %p %s:%u.\",\n        (void *)connection,\n        AWS_BYTE_CURSOR_PRI(aws_http_version_to_str(connection->http_version)),\n        (void *)server,\n",
                      "markdown": "`    /* Tell user of successful connection. */\n    AWS_LOGF_INFO(\n        AWS_LS_HTTP_CONNECTION,\n        \"id=%p: \" PRInSTR \" server connection established at %p %s:%u.\",\n        (void *)connection,\n        AWS_BYTE_CURSOR_PRI(aws_http_version_to_str(connection->http_version)),\n        (void *)server,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/connection.c"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 58,
                  "endLine": 131,
                  "endColumn": 64,
                  "snippet": {
                    "text": "        if (!connection_slot->adj_left || !connection_slot->adj_left->handler) {\n            aws_raise_error(AWS_ERROR_INVALID_STATE);\n            AWS_LOGF_ERROR(\n                AWS_LS_HTTP_CONNECTION, \"static: Failed to find TLS handler in channel %p.\", (void *)channel);\n            goto error;\n        }\n\n",
                    "rendered": {
                      "text": "        if (!connection_slot->adj_left || !connection_slot->adj_left->handler) {\n            aws_raise_error(AWS_ERROR_INVALID_STATE);\n            AWS_LOGF_ERROR(\n                AWS_LS_HTTP_CONNECTION, \"static: Failed to find TLS handler in channel %p.\", (void *)channel);\n            goto error;\n        }\n\n",
                      "markdown": "`        if (!connection_slot->adj_left || !connection_slot->adj_left->handler) {\n            aws_raise_error(AWS_ERROR_INVALID_STATE);\n            AWS_LOGF_ERROR(\n                AWS_LS_HTTP_CONNECTION, \"static: Failed to find TLS handler in channel %p.\", (void *)channel);\n            goto error;\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.builder/action/aws-c-http-test.py"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 20,
                  "endLine": 22,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        actions = []\n        if os.path.exists('/tmp/setup_proxy_test_env.sh'):\n            # For proxy integration test, we download the setup script to tmp/ from codebuild/linux-integration-tests.yml\n            # aws s3 cp s3://aws-crt-test-stuff/setup_proxy_test_env.sh /tmp/setup_proxy_test_env.sh\n            print(\"setting proxy integration test environment\")\n            self._export_env_var('/tmp/setup_proxy_test_env.sh', env)\n            env.shell.setenv('AWS_PROXY_NO_VERIFY_PEER', 'on')\n",
                    "rendered": {
                      "text": "        actions = []\n        if os.path.exists('/tmp/setup_proxy_test_env.sh'):\n            # For proxy integration test, we download the setup script to tmp/ from codebuild/linux-integration-tests.yml\n            # aws s3 cp s3://aws-crt-test-stuff/setup_proxy_test_env.sh /tmp/setup_proxy_test_env.sh\n            print(\"setting proxy integration test environment\")\n            self._export_env_var('/tmp/setup_proxy_test_env.sh', env)\n            env.shell.setenv('AWS_PROXY_NO_VERIFY_PEER', 'on')\n",
                      "markdown": "`        actions = []\n        if os.path.exists('/tmp/setup_proxy_test_env.sh'):\n            # For proxy integration test, we download the setup script to tmp/ from codebuild/linux-integration-tests.yml\n            # aws s3 cp s3://aws-crt-test-stuff/setup_proxy_test_env.sh /tmp/setup_proxy_test_env.sh\n            print(\"setting proxy integration test environment\")\n            self._export_env_var('/tmp/setup_proxy_test_env.sh', env)\n            env.shell.setenv('AWS_PROXY_NO_VERIFY_PEER', 'on')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.builder/action/aws-c-http-test.py"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 63,
                  "endLine": 21,
                  "endColumn": 71,
                  "snippet": {
                    "text": "    def run(self, env):\n        actions = []\n        if os.path.exists('/tmp/setup_proxy_test_env.sh'):\n            # For proxy integration test, we download the setup script to tmp/ from codebuild/linux-integration-tests.yml\n            # aws s3 cp s3://aws-crt-test-stuff/setup_proxy_test_env.sh /tmp/setup_proxy_test_env.sh\n            print(\"setting proxy integration test environment\")\n            self._export_env_var('/tmp/setup_proxy_test_env.sh', env)\n",
                    "rendered": {
                      "text": "    def run(self, env):\n        actions = []\n        if os.path.exists('/tmp/setup_proxy_test_env.sh'):\n            # For proxy integration test, we download the setup script to tmp/ from codebuild/linux-integration-tests.yml\n            # aws s3 cp s3://aws-crt-test-stuff/setup_proxy_test_env.sh /tmp/setup_proxy_test_env.sh\n            print(\"setting proxy integration test environment\")\n            self._export_env_var('/tmp/setup_proxy_test_env.sh', env)\n",
                      "markdown": "`    def run(self, env):\n        actions = []\n        if os.path.exists('/tmp/setup_proxy_test_env.sh'):\n            # For proxy integration test, we download the setup script to tmp/ from codebuild/linux-integration-tests.yml\n            # aws s3 cp s3://aws-crt-test-stuff/setup_proxy_test_env.sh /tmp/setup_proxy_test_env.sh\n            print(\"setting proxy integration test environment\")\n            self._export_env_var('/tmp/setup_proxy_test_env.sh', env)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.builder/action/local-server-setup.py"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 18,
                  "endLine": 28,
                  "snippet": {
                    "text": "            print(\"Skipping local server setup because tests disabled for project\")\n            return\n\n        self.env = env\n        python_path = sys.executable\n        # Install dependency for mock server.\n        # Okay to fail, and if it fails, you will know when you enable the localhost tests.\n        # We don't need it to succeed on every platform we have.\n",
                    "rendered": {
                      "text": "            print(\"Skipping local server setup because tests disabled for project\")\n            return\n\n        self.env = env\n        python_path = sys.executable\n        # Install dependency for mock server.\n        # Okay to fail, and if it fails, you will know when you enable the localhost tests.\n        # We don't need it to succeed on every platform we have.\n",
                      "markdown": "`            print(\"Skipping local server setup because tests disabled for project\")\n            return\n\n        self.env = env\n        python_path = sys.executable\n        # Install dependency for mock server.\n        # Okay to fail, and if it fails, you will know when you enable the localhost tests.\n        # We don't need it to succeed on every platform we have.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/resources/unittests.readme"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 84,
                  "endLine": 16,
                  "endColumn": 92,
                  "snippet": {
                    "text": "Once it expires unit tests will start failing and it will need to be updated like so:\n\n$ openssl req -x509 -new -key unittests.key -config unittests.conf -out unittests.crt -days 824\n$ openssl pkcs12 -export -out unittests.p12 -inkey unittests.key -in unittests.crt -password pass:1234\n",
                    "rendered": {
                      "text": "Once it expires unit tests will start failing and it will need to be updated like so:\n\n$ openssl req -x509 -new -key unittests.key -config unittests.conf -out unittests.crt -days 824\n$ openssl pkcs12 -export -out unittests.p12 -inkey unittests.key -in unittests.crt -password pass:1234\n",
                      "markdown": "`Once it expires unit tests will start failing and it will need to be updated like so:\n\n$ openssl req -x509 -new -key unittests.key -config unittests.conf -out unittests.crt -days 824\n$ openssl pkcs12 -export -out unittests.p12 -inkey unittests.key -in unittests.crt -password pass:1234\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/resources/unittests.readme"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 70,
                  "endLine": 10,
                  "endColumn": 78,
                  "snippet": {
                    "text": "unittests.key: private key\nunittests.crt: self-signed certificate\nunittests.conf: configuration for generating unittests.crt\nunittests.p12: pkcs#12 file bundling the certificate and private key. Password is \"1234\"\n\nApple won't trust any certificate whose lifetime is over 825 days.\nOnce it expires unit tests will start failing and it will need to be updated like so:\n",
                    "rendered": {
                      "text": "unittests.key: private key\nunittests.crt: self-signed certificate\nunittests.conf: configuration for generating unittests.crt\nunittests.p12: pkcs#12 file bundling the certificate and private key. Password is \"1234\"\n\nApple won't trust any certificate whose lifetime is over 825 days.\nOnce it expires unit tests will start failing and it will need to be updated like so:\n",
                      "markdown": "`unittests.key: private key\nunittests.crt: self-signed certificate\nunittests.conf: configuration for generating unittests.crt\nunittests.p12: pkcs#12 file bundling the certificate and private key. Password is \"1234\"\n\nApple won't trust any certificate whose lifetime is over 825 days.\nOnce it expires unit tests will start failing and it will need to be updated like so:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/resources/unittests.readme"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 10,
                  "snippet": {
                    "text": "Once it expires unit tests will start failing and it will need to be updated like so:\n\n$ openssl req -x509 -new -key unittests.key -config unittests.conf -out unittests.crt -days 824\n$ openssl pkcs12 -export -out unittests.p12 -inkey unittests.key -in unittests.crt -password pass:1234\n",
                    "rendered": {
                      "text": "Once it expires unit tests will start failing and it will need to be updated like so:\n\n$ openssl req -x509 -new -key unittests.key -config unittests.conf -out unittests.crt -days 824\n$ openssl pkcs12 -export -out unittests.p12 -inkey unittests.key -in unittests.crt -password pass:1234\n",
                      "markdown": "`Once it expires unit tests will start failing and it will need to be updated like so:\n\n$ openssl req -x509 -new -key unittests.key -config unittests.conf -out unittests.crt -days 824\n$ openssl pkcs12 -export -out unittests.p12 -inkey unittests.key -in unittests.crt -password pass:1234\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/resources/unittests.readme"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 15,
                  "endColumn": 10,
                  "snippet": {
                    "text": "Apple won't trust any certificate whose lifetime is over 825 days.\nOnce it expires unit tests will start failing and it will need to be updated like so:\n\n$ openssl req -x509 -new -key unittests.key -config unittests.conf -out unittests.crt -days 824\n$ openssl pkcs12 -export -out unittests.p12 -inkey unittests.key -in unittests.crt -password pass:1234\n",
                    "rendered": {
                      "text": "Apple won't trust any certificate whose lifetime is over 825 days.\nOnce it expires unit tests will start failing and it will need to be updated like so:\n\n$ openssl req -x509 -new -key unittests.key -config unittests.conf -out unittests.crt -days 824\n$ openssl pkcs12 -export -out unittests.p12 -inkey unittests.key -in unittests.crt -password pass:1234\n",
                      "markdown": "`Apple won't trust any certificate whose lifetime is over 825 days.\nOnce it expires unit tests will start failing and it will need to be updated like so:\n\n$ openssl req -x509 -new -key unittests.key -config unittests.conf -out unittests.crt -days 824\n$ openssl pkcs12 -export -out unittests.p12 -inkey unittests.key -in unittests.crt -password pass:1234\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/http2_stream_manager.c"
                },
                "region": {
                  "startLine": 492,
                  "startColumn": 39,
                  "endLine": 492,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        &sm_connection->ping_timeout_task,\n        s_connection_ping_timeout_task,\n        sm_connection,\n        \"Stream manager connection ping timeout task\");\n    /* keep the refcount for timeout task to run */\n    aws_channel_schedule_task_future(channel, &sm_connection->ping_timeout_task, timeout_time);\n}\n",
                    "rendered": {
                      "text": "        &sm_connection->ping_timeout_task,\n        s_connection_ping_timeout_task,\n        sm_connection,\n        \"Stream manager connection ping timeout task\");\n    /* keep the refcount for timeout task to run */\n    aws_channel_schedule_task_future(channel, &sm_connection->ping_timeout_task, timeout_time);\n}\n",
                      "markdown": "`        &sm_connection->ping_timeout_task,\n        s_connection_ping_timeout_task,\n        sm_connection,\n        \"Stream manager connection ping timeout task\");\n    /* keep the refcount for timeout task to run */\n    aws_channel_schedule_task_future(channel, &sm_connection->ping_timeout_task, timeout_time);\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/http2_stream_manager.c"
                },
                "region": {
                  "startLine": 443,
                  "startColumn": 17,
                  "endLine": 443,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        STREAM_MANAGER_LOGF(\n            ERROR,\n            sm_connection->stream_manager,\n            \"ping timeout detected for connection: %p, closing connection.\",\n            (void *)sm_connection->connection);\n\n        aws_http_connection_close(sm_connection->connection);\n",
                    "rendered": {
                      "text": "        STREAM_MANAGER_LOGF(\n            ERROR,\n            sm_connection->stream_manager,\n            \"ping timeout detected for connection: %p, closing connection.\",\n            (void *)sm_connection->connection);\n\n        aws_http_connection_close(sm_connection->connection);\n",
                      "markdown": "`        STREAM_MANAGER_LOGF(\n            ERROR,\n            sm_connection->stream_manager,\n            \"ping timeout detected for connection: %p, closing connection.\",\n            (void *)sm_connection->connection);\n\n        aws_http_connection_close(sm_connection->connection);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/http2_stream_manager.c"
                },
                "region": {
                  "startLine": 416,
                  "startColumn": 57,
                  "endLine": 416,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    STREAM_MANAGER_LOGF(\n        TRACE,\n        sm_connection->stream_manager,\n        \"PING ACK received for connection: %p. Round trip time in ns is: %\" PRIu64 \".\",\n        (void *)sm_connection->connection,\n        round_trip_time_ns);\n    sm_connection->thread_data.ping_received = true;\n",
                    "rendered": {
                      "text": "    STREAM_MANAGER_LOGF(\n        TRACE,\n        sm_connection->stream_manager,\n        \"PING ACK received for connection: %p. Round trip time in ns is: %\" PRIu64 \".\",\n        (void *)sm_connection->connection,\n        round_trip_time_ns);\n    sm_connection->thread_data.ping_received = true;\n",
                      "markdown": "`    STREAM_MANAGER_LOGF(\n        TRACE,\n        sm_connection->stream_manager,\n        \"PING ACK received for connection: %p. Round trip time in ns is: %\" PRIu64 \".\",\n        (void *)sm_connection->connection,\n        round_trip_time_ns);\n    sm_connection->thread_data.ping_received = true;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/http2_stream_manager.c"
                },
                "region": {
                  "startLine": 359,
                  "startColumn": 42,
                  "endLine": 359,
                  "endColumn": 48,
                  "snippet": {
                    "text": "                STREAM_MANAGER_LOGF(\n                    DEBUG,\n                    stream_manager,\n                    \"acquisition:%p cannot find any connection to use.\",\n                    (void *)pending_stream_acquisition);\n                break;\n            } else {\n",
                    "rendered": {
                      "text": "                STREAM_MANAGER_LOGF(\n                    DEBUG,\n                    stream_manager,\n                    \"acquisition:%p cannot find any connection to use.\",\n                    (void *)pending_stream_acquisition);\n                break;\n            } else {\n",
                      "markdown": "`                STREAM_MANAGER_LOGF(\n                    DEBUG,\n                    stream_manager,\n                    \"acquisition:%p cannot find any connection to use.\",\n                    (void *)pending_stream_acquisition);\n                break;\n            } else {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/websocket_encoder.c"
                },
                "region": {
                  "startLine": 322,
                  "startColumn": 58,
                  "endLine": 322,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        if (!frame->fin) {\n            AWS_LOGF_ERROR(\n                AWS_LS_HTTP_WEBSOCKET,\n                \"id=%p: It is illegal to send a fragmented control frame\",\n                (void *)encoder->user_data);\n\n            return aws_raise_error(AWS_ERROR_INVALID_ARGUMENT);\n",
                    "rendered": {
                      "text": "        if (!frame->fin) {\n            AWS_LOGF_ERROR(\n                AWS_LS_HTTP_WEBSOCKET,\n                \"id=%p: It is illegal to send a fragmented control frame\",\n                (void *)encoder->user_data);\n\n            return aws_raise_error(AWS_ERROR_INVALID_ARGUMENT);\n",
                      "markdown": "`        if (!frame->fin) {\n            AWS_LOGF_ERROR(\n                AWS_LS_HTTP_WEBSOCKET,\n                \"id=%p: It is illegal to send a fragmented control frame\",\n                (void *)encoder->user_data);\n\n            return aws_raise_error(AWS_ERROR_INVALID_ARGUMENT);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/connection_manager.c"
                },
                "region": {
                  "startLine": 369,
                  "startColumn": 79,
                  "endLine": 369,
                  "endColumn": 88,
                  "snippet": {
                    "text": "            snapshot->external_ref_count);\n    } else {\n        AWS_LOGF_DEBUG(\n            AWS_LS_HTTP_CONNECTION_MANAGER, \"id=%p: snapshot not initialized by control flow\", (void *)manager);\n    }\n}\n\n",
                    "rendered": {
                      "text": "            snapshot->external_ref_count);\n    } else {\n        AWS_LOGF_DEBUG(\n            AWS_LS_HTTP_CONNECTION_MANAGER, \"id=%p: snapshot not initialized by control flow\", (void *)manager);\n    }\n}\n\n",
                      "markdown": "`            snapshot->external_ref_count);\n    } else {\n        AWS_LOGF_DEBUG(\n            AWS_LS_HTTP_CONNECTION_MANAGER, \"id=%p: snapshot not initialized by control flow\", (void *)manager);\n    }\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/connection_manager.c"
                },
                "region": {
                  "startLine": 1612,
                  "startColumn": 8,
                  "endLine": 1612,
                  "endColumn": 14,
                  "snippet": {
                    "text": "     */\n    const struct aws_linked_list_node *end = aws_linked_list_end(&manager->idle_connections);\n    for (struct aws_linked_list_node *node = aws_linked_list_begin(&manager->idle_connections); node != end;\n         node = aws_linked_list_next(node)) {\n        struct aws_idle_connection *current_idle_connection = AWS_CONTAINER_OF(node, struct aws_idle_connection, node);\n        if (current_idle_connection->connection == connection) {\n            aws_linked_list_remove(node);\n",
                    "rendered": {
                      "text": "     */\n    const struct aws_linked_list_node *end = aws_linked_list_end(&manager->idle_connections);\n    for (struct aws_linked_list_node *node = aws_linked_list_begin(&manager->idle_connections); node != end;\n         node = aws_linked_list_next(node)) {\n        struct aws_idle_connection *current_idle_connection = AWS_CONTAINER_OF(node, struct aws_idle_connection, node);\n        if (current_idle_connection->connection == connection) {\n            aws_linked_list_remove(node);\n",
                      "markdown": "`     */\n    const struct aws_linked_list_node *end = aws_linked_list_end(&manager->idle_connections);\n    for (struct aws_linked_list_node *node = aws_linked_list_begin(&manager->idle_connections); node != end;\n         node = aws_linked_list_next(node)) {\n        struct aws_idle_connection *current_idle_connection = AWS_CONTAINER_OF(node, struct aws_idle_connection, node);\n        if (current_idle_connection->connection == connection) {\n            aws_linked_list_remove(node);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/connection_manager.c"
                },
                "region": {
                  "startLine": 1611,
                  "startColumn": 95,
                  "endLine": 1611,
                  "endColumn": 101,
                  "snippet": {
                    "text": "     * Find and, if found, remove it from idle connections\n     */\n    const struct aws_linked_list_node *end = aws_linked_list_end(&manager->idle_connections);\n    for (struct aws_linked_list_node *node = aws_linked_list_begin(&manager->idle_connections); node != end;\n         node = aws_linked_list_next(node)) {\n        struct aws_idle_connection *current_idle_connection = AWS_CONTAINER_OF(node, struct aws_idle_connection, node);\n        if (current_idle_connection->connection == connection) {\n",
                    "rendered": {
                      "text": "     * Find and, if found, remove it from idle connections\n     */\n    const struct aws_linked_list_node *end = aws_linked_list_end(&manager->idle_connections);\n    for (struct aws_linked_list_node *node = aws_linked_list_begin(&manager->idle_connections); node != end;\n         node = aws_linked_list_next(node)) {\n        struct aws_idle_connection *current_idle_connection = AWS_CONTAINER_OF(node, struct aws_idle_connection, node);\n        if (current_idle_connection->connection == connection) {\n",
                      "markdown": "`     * Find and, if found, remove it from idle connections\n     */\n    const struct aws_linked_list_node *end = aws_linked_list_end(&manager->idle_connections);\n    for (struct aws_linked_list_node *node = aws_linked_list_begin(&manager->idle_connections); node != end;\n         node = aws_linked_list_next(node)) {\n        struct aws_idle_connection *current_idle_connection = AWS_CONTAINER_OF(node, struct aws_idle_connection, node);\n        if (current_idle_connection->connection == connection) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/connection_manager.c"
                },
                "region": {
                  "startLine": 1439,
                  "startColumn": 8,
                  "endLine": 1439,
                  "endColumn": 14,
                  "snippet": {
                    "text": "     * open_connection_count as the shutdown callback will be invoked, we still need the manager to be alive */\n    const struct aws_linked_list_node *end = aws_linked_list_end(&manager->idle_connections);\n    for (struct aws_linked_list_node *node = aws_linked_list_begin(&manager->idle_connections); node != end;\n         node = aws_linked_list_next(node)) {\n        struct aws_idle_connection *current_idle_connection = AWS_CONTAINER_OF(node, struct aws_idle_connection, node);\n        if (current_idle_connection->connection == http2_connection) {\n            aws_linked_list_remove(node);\n",
                    "rendered": {
                      "text": "     * open_connection_count as the shutdown callback will be invoked, we still need the manager to be alive */\n    const struct aws_linked_list_node *end = aws_linked_list_end(&manager->idle_connections);\n    for (struct aws_linked_list_node *node = aws_linked_list_begin(&manager->idle_connections); node != end;\n         node = aws_linked_list_next(node)) {\n        struct aws_idle_connection *current_idle_connection = AWS_CONTAINER_OF(node, struct aws_idle_connection, node);\n        if (current_idle_connection->connection == http2_connection) {\n            aws_linked_list_remove(node);\n",
                      "markdown": "`     * open_connection_count as the shutdown callback will be invoked, we still need the manager to be alive */\n    const struct aws_linked_list_node *end = aws_linked_list_end(&manager->idle_connections);\n    for (struct aws_linked_list_node *node = aws_linked_list_begin(&manager->idle_connections); node != end;\n         node = aws_linked_list_next(node)) {\n        struct aws_idle_connection *current_idle_connection = AWS_CONTAINER_OF(node, struct aws_idle_connection, node);\n        if (current_idle_connection->connection == http2_connection) {\n            aws_linked_list_remove(node);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/connection_manager.c"
                },
                "region": {
                  "startLine": 1438,
                  "startColumn": 95,
                  "endLine": 1438,
                  "endColumn": 101,
                  "snippet": {
                    "text": "    * open_connection_count as the shutdown callback will be invoked, we still need the manager to be alive */\n    const struct aws_linked_list_node *end = aws_linked_list_end(&manager->idle_connections);\n    for (struct aws_linked_list_node *node = aws_linked_list_begin(&manager->idle_connections); node != end;\n         node = aws_linked_list_next(node)) {\n        struct aws_idle_connection *current_idle_connection = AWS_CONTAINER_OF(node, struct aws_idle_connection, node);\n        if (current_idle_connection->connection == http2_connection) {\n            aws_linked_list_remove(node);\n            w",
                    "rendered": {
                      "text": "    * open_connection_count as the shutdown callback will be invoked, we still need the manager to be alive */\n    const struct aws_linked_list_node *end = aws_linked_list_end(&manager->idle_connections);\n    for (struct aws_linked_list_node *node = aws_linked_list_begin(&manager->idle_connections); node != end;\n         node = aws_linked_list_next(node)) {\n        struct aws_idle_connection *current_idle_connection = AWS_CONTAINER_OF(node, struct aws_idle_connection, node);\n        if (current_idle_connection->connection == http2_connection) {\n            aws_linked_list_remove(node);\n            w",
                      "markdown": "`    * open_connection_count as the shutdown callback will be invoked, we still need the manager to be alive */\n    const struct aws_linked_list_node *end = aws_linked_list_end(&manager->idle_connections);\n    for (struct aws_linked_list_node *node = aws_linked_list_begin(&manager->idle_connections); node != end;\n         node = aws_linked_list_next(node)) {\n        struct aws_idle_connection *current_idle_connection = AWS_CONTAINER_OF(node, struct aws_idle_connection, node);\n        if (current_idle_connection->connection == http2_connection) {\n            aws_linked_list_remove(node);\n            w`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/websocket_decoder.c"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 43,
                  "endLine": 85,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        if (!decoder->current_frame.fin) {\n            AWS_LOGF_ERROR(\n                AWS_LS_HTTP_WEBSOCKET,\n                \"id=%p: Received fragmented control frame. This is illegal\",\n                (void *)decoder->user_data);\n            return aws_raise_error(AWS_ERROR_HTTP_WEBSOCKET_PROTOCOL_ERROR);\n        }\n",
                    "rendered": {
                      "text": "        if (!decoder->current_frame.fin) {\n            AWS_LOGF_ERROR(\n                AWS_LS_HTTP_WEBSOCKET,\n                \"id=%p: Received fragmented control frame. This is illegal\",\n                (void *)decoder->user_data);\n            return aws_raise_error(AWS_ERROR_HTTP_WEBSOCKET_PROTOCOL_ERROR);\n        }\n",
                      "markdown": "`        if (!decoder->current_frame.fin) {\n            AWS_LOGF_ERROR(\n                AWS_LS_HTTP_WEBSOCKET,\n                \"id=%p: Received fragmented control frame. This is illegal\",\n                (void *)decoder->user_data);\n            return aws_raise_error(AWS_ERROR_HTTP_WEBSOCKET_PROTOCOL_ERROR);\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/py_localhost/server.py"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 71,
                  "endLine": 296,
                  "snippet": {
                    "text": "\n    def window_updated(self, stream_id, delta):\n        \"\"\"\n        A window update frame was received. Unblock some number of flow control\n        Futures.\n        \"\"\"\n        if stream_id and stream_id in self.flow_control_futures:\n            f = self.flow_control_futures.pop(stream_id)\n",
                    "rendered": {
                      "text": "\n    def window_updated(self, stream_id, delta):\n        \"\"\"\n        A window update frame was received. Unblock some number of flow control\n        Futures.\n        \"\"\"\n        if stream_id and stream_id in self.flow_control_futures:\n            f = self.flow_control_futures.pop(stream_id)\n",
                      "markdown": "`\n    def window_updated(self, stream_id, delta):\n        \"\"\"\n        A window update frame was received. Unblock some number of flow control\n        Futures.\n        \"\"\"\n        if stream_id and stream_id in self.flow_control_futures:\n            f = self.flow_control_futures.pop(stream_id)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/py_localhost/server.py"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 16,
                  "endLine": 295,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n    def window_updated(self, stream_id, delta):\n        \"\"\"\n        A window update frame was received. Unblock some number of flow control\n        Futures.\n        \"\"\"\n        if stream_id and stream_id in self.flow_control_futures:\n",
                    "rendered": {
                      "text": "\n    def window_updated(self, stream_id, delta):\n        \"\"\"\n        A window update frame was received. Unblock some number of flow control\n        Futures.\n        \"\"\"\n        if stream_id and stream_id in self.flow_control_futures:\n",
                      "markdown": "`\n    def window_updated(self, stream_id, delta):\n        \"\"\"\n        A window update frame was received. Unblock some number of flow control\n        Futures.\n        \"\"\"\n        if stream_id and stream_id in self.flow_control_futures:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/py_localhost/server.py"
                },
                "region": {
                  "startLine": 287,
                  "startColumn": 51,
                  "endLine": 287,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\n    async def wait_for_flow_control(self, stream_id):\n        \"\"\"\n        Waits for a Future that fires when the flow control window is opened.\n        \"\"\"\n        f = asyncio.Future()\n        self.flow_control_futures[stream_id] = f\n",
                    "rendered": {
                      "text": "\n    async def wait_for_flow_control(self, stream_id):\n        \"\"\"\n        Waits for a Future that fires when the flow control window is opened.\n        \"\"\"\n        f = asyncio.Future()\n        self.flow_control_futures[stream_id] = f\n",
                      "markdown": "`\n    async def wait_for_flow_control(self, stream_id):\n        \"\"\"\n        Waits for a Future that fires when the flow control window is opened.\n        \"\"\"\n        f = asyncio.Future()\n        self.flow_control_futures[stream_id] = f\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/py_localhost/server.py"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 51,
                  "endLine": 216,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\n    async def send_repeat_data(self, length, stream_id):\n        \"\"\"\n        Send data with length according to the flow control rules.\n        \"\"\"\n        while length > 0:\n            while self.conn.local_flow_control_window(stream_id) < 1:\n",
                    "rendered": {
                      "text": "\n    async def send_repeat_data(self, length, stream_id):\n        \"\"\"\n        Send data with length according to the flow control rules.\n        \"\"\"\n        while length > 0:\n            while self.conn.local_flow_control_window(stream_id) < 1:\n",
                      "markdown": "`\n    async def send_repeat_data(self, length, stream_id):\n        \"\"\"\n        Send data with length according to the flow control rules.\n        \"\"\"\n        while length > 0:\n            while self.conn.local_flow_control_window(stream_id) < 1:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/py_localhost/server.py"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 39,
                  "endLine": 185,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n    async def send_data(self, data, stream_id):\n        \"\"\"\n        Send data according to the flow control rules.\n        \"\"\"\n        while data:\n            while self.conn.local_flow_control_window(stream_id) < 1:\n",
                    "rendered": {
                      "text": "\n    async def send_data(self, data, stream_id):\n        \"\"\"\n        Send data according to the flow control rules.\n        \"\"\"\n        while data:\n            while self.conn.local_flow_control_window(stream_id) < 1:\n",
                      "markdown": "`\n    async def send_data(self, data, stream_id):\n        \"\"\"\n        Send data according to the flow control rules.\n        \"\"\"\n        while data:\n            while self.conn.local_flow_control_window(stream_id) < 1:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/py_localhost/server.py"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 17,
                  "endLine": 167,
                  "endColumn": 25,
                  "snippet": {
                    "text": "                        len(data)\n                else:\n                    self.num_sentence_received[stream_id] = len(data)\n                # update window for stream\n                if len(data) > 0:\n                    self.conn.increment_flow_control_window(len(data))\n                    self.conn.increment_flow_control_window(\n",
                    "rendered": {
                      "text": "                        len(data)\n                else:\n                    self.num_sentence_received[stream_id] = len(data)\n                # update window for stream\n                if len(data) > 0:\n                    self.conn.increment_flow_control_window(len(data))\n                    self.conn.increment_flow_control_window(\n",
                      "markdown": "`                        len(data)\n                else:\n                    self.num_sentence_received[stream_id] = len(data)\n                # update window for stream\n                if len(data) > 0:\n                    self.conn.increment_flow_control_window(len(data))\n                    self.conn.increment_flow_control_window(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/py_localhost/server.py"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 6,
                  "endLine": 20,
                  "snippet": {
                    "text": "import io\nimport json\nimport ssl\nimport time\nimport os\nimport collections\nfrom typing import List, Tuple\n\n",
                    "rendered": {
                      "text": "import io\nimport json\nimport ssl\nimport time\nimport os\nimport collections\nfrom typing import List, Tuple\n\n",
                      "markdown": "`import io\nimport json\nimport ssl\nimport time\nimport os\nimport collections\nfrom typing import List, Tuple\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/py_localhost/README.md"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 146,
                  "endLine": 14,
                  "endColumn": 152,
                  "snippet": {
                    "text": "### TLS server\n\n- The code is based the [example](https://github.com/python-hyper/h2/blob/master/examples/asyncio/asyncio-server.py) from hyper h2 server.\n- Have the cert/key ready. The script now using `../resources/unittests.crt`, you can either just run the script within this directory, which will find the certificates and key from the related path, or you can use your own and change the code coordinately.\n- Run python. `python3 ./server.py`.\n\n#### Echo\n",
                    "rendered": {
                      "text": "### TLS server\n\n- The code is based the [example](https://github.com/python-hyper/h2/blob/master/examples/asyncio/asyncio-server.py) from hyper h2 server.\n- Have the cert/key ready. The script now using `../resources/unittests.crt`, you can either just run the script within this directory, which will find the certificates and key from the related path, or you can use your own and change the code coordinately.\n- Run python. `python3 ./server.py`.\n\n#### Echo\n",
                      "markdown": "`### TLS server\n\n- The code is based the [example](https://github.com/python-hyper/h2/blob/master/examples/asyncio/asyncio-server.py) from hyper h2 server.\n- Have the cert/key ready. The script now using `../resources/unittests.crt`, you can either just run the script within this directory, which will find the certificates and key from the related path, or you can use your own and change the code coordinately.\n- Run python. `python3 ./server.py`.\n\n#### Echo\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/py_localhost/README.md"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 105,
                  "endLine": 14,
                  "endColumn": 113,
                  "snippet": {
                    "text": "### TLS server\n\n- The code is based the [example](https://github.com/python-hyper/h2/blob/master/examples/asyncio/asyncio-server.py) from hyper h2 server.\n- Have the cert/key ready. The script now using `../resources/unittests.crt`, you can either just run the script within this directory, which will find the certificates and key from the related path, or you can use your own and change the code coordinately.\n- Run python. `python3 ./server.py`.\n\n#### Echo\n",
                    "rendered": {
                      "text": "### TLS server\n\n- The code is based the [example](https://github.com/python-hyper/h2/blob/master/examples/asyncio/asyncio-server.py) from hyper h2 server.\n- Have the cert/key ready. The script now using `../resources/unittests.crt`, you can either just run the script within this directory, which will find the certificates and key from the related path, or you can use your own and change the code coordinately.\n- Run python. `python3 ./server.py`.\n\n#### Echo\n",
                      "markdown": "`### TLS server\n\n- The code is based the [example](https://github.com/python-hyper/h2/blob/master/examples/asyncio/asyncio-server.py) from hyper h2 server.\n- Have the cert/key ready. The script now using `../resources/unittests.crt`, you can either just run the script within this directory, which will find the certificates and key from the related path, or you can use your own and change the code coordinately.\n- Run python. `python3 ./server.py`.\n\n#### Echo\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/py_localhost/README.md"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 30,
                  "endLine": 14,
                  "endColumn": 38,
                  "snippet": {
                    "text": "### TLS server\n\n- The code is based the [example](https://github.com/python-hyper/h2/blob/master/examples/asyncio/asyncio-server.py) from hyper h2 server.\n- Have the cert/key ready. The script now using `../resources/unittests.crt`, you can either just run the script within this directory, which will find the certificates and key from the related path, or you can use your own and change the code coordinately.\n- Run python. `python3 ./server.py`.\n\n#### Echo\n",
                    "rendered": {
                      "text": "### TLS server\n\n- The code is based the [example](https://github.com/python-hyper/h2/blob/master/examples/asyncio/asyncio-server.py) from hyper h2 server.\n- Have the cert/key ready. The script now using `../resources/unittests.crt`, you can either just run the script within this directory, which will find the certificates and key from the related path, or you can use your own and change the code coordinately.\n- Run python. `python3 ./server.py`.\n\n#### Echo\n",
                      "markdown": "`### TLS server\n\n- The code is based the [example](https://github.com/python-hyper/h2/blob/master/examples/asyncio/asyncio-server.py) from hyper h2 server.\n- Have the cert/key ready. The script now using `../resources/unittests.crt`, you can either just run the script within this directory, which will find the certificates and key from the related path, or you can use your own and change the code coordinately.\n- Run python. `python3 ./server.py`.\n\n#### Echo\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/py_localhost/README.md"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 45,
                  "endLine": 9,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\nPython 3.5+ required.\n\n- Install hyper h2 python module. `python3 -m pip install h2`\n\n### TLS server\n\n",
                    "rendered": {
                      "text": "\nPython 3.5+ required.\n\n- Install hyper h2 python module. `python3 -m pip install h2`\n\n### TLS server\n\n",
                      "markdown": "`\nPython 3.5+ required.\n\n- Install hyper h2 python module. `python3 -m pip install h2`\n\n### TLS server\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.travis/travis_build.sh"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 10,
                  "endLine": 17,
                  "endColumn": 4,
                  "snippet": {
                    "text": "make && make test\ncd ..\n\n#build s2n\ngit clone https://github.com/awslabs/s2n.git\nmkdir s2n-build && cd s2n-build\ncmake ../s2n\nmake && make test\n",
                    "rendered": {
                      "text": "make && make test\ncd ..\n\n#build s2n\ngit clone https://github.com/awslabs/s2n.git\nmkdir s2n-build && cd s2n-build\ncmake ../s2n\nmake && make test\n",
                      "markdown": "`make && make test\ncd ..\n\n#build s2n\ngit clone https://github.com/awslabs/s2n.git\nmkdir s2n-build && cd s2n-build\ncmake ../s2n\nmake && make test\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.travis/travis_build.sh"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 19,
                  "endLine": 10,
                  "endColumn": 4,
                  "snippet": {
                    "text": "PROJECT_DIR=`pwd`\ncd ..\n\n#build aws-c-common\ngit clone https://github.com/awslabs/aws-c-common.git\nmkdir common-build && cd common-build\ncmake ../aws-c-common\nmake && make test\n",
                    "rendered": {
                      "text": "PROJECT_DIR=`pwd`\ncd ..\n\n#build aws-c-common\ngit clone https://github.com/awslabs/aws-c-common.git\nmkdir common-build && cd common-build\ncmake ../aws-c-common\nmake && make test\n",
                      "markdown": "`PROJECT_DIR=`pwd`\ncd ..\n\n#build aws-c-common\ngit clone https://github.com/awslabs/aws-c-common.git\nmkdir common-build && cd common-build\ncmake ../aws-c-common\nmake && make test\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/integration-testing/http_client_test.py"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 48,
                  "endLine": 70,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n        for i in range(len(bytes_expected)):\n            if bytes_expected[i] != bytes_other[i]:\n                raise RuntimeError(\"Files differ at byte[%d]. Expected %d, got %d.\" % (i, bytes_expected[i], bytes_other[i]))\n\n        print(\"filecmp says these files differ, but they are identical. what the heck.\")\n\n",
                    "rendered": {
                      "text": "\n        for i in range(len(bytes_expected)):\n            if bytes_expected[i] != bytes_other[i]:\n                raise RuntimeError(\"Files differ at byte[%d]. Expected %d, got %d.\" % (i, bytes_expected[i], bytes_other[i]))\n\n        print(\"filecmp says these files differ, but they are identical. what the heck.\")\n\n",
                      "markdown": "`\n        for i in range(len(bytes_expected)):\n            if bytes_expected[i] != bytes_other[i]:\n                raise RuntimeError(\"Files differ at byte[%d]. Expected %d, got %d.\" % (i, bytes_expected[i], bytes_other[i]))\n\n        print(\"filecmp says these files differ, but they are identical. what the heck.\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/integration-testing/http_client_test.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 39,
                  "endLine": 15,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# Accepting multiple args so we can pass something like: python elasticurl.py\nelasticurl_cmd_prefix = sys.argv[1:]\nif not elasticurl_cmd_prefix:\n    print('You must pass the elasticurl cmd prefix')\n    sys.exit(-1)\n\nprogram_to_run = elasticurl_cmd_prefix[0]\n",
                    "rendered": {
                      "text": "# Accepting multiple args so we can pass something like: python elasticurl.py\nelasticurl_cmd_prefix = sys.argv[1:]\nif not elasticurl_cmd_prefix:\n    print('You must pass the elasticurl cmd prefix')\n    sys.exit(-1)\n\nprogram_to_run = elasticurl_cmd_prefix[0]\n",
                      "markdown": "`# Accepting multiple args so we can pass something like: python elasticurl.py\nelasticurl_cmd_prefix = sys.argv[1:]\nif not elasticurl_cmd_prefix:\n    print('You must pass the elasticurl cmd prefix')\n    sys.exit(-1)\n\nprogram_to_run = elasticurl_cmd_prefix[0]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/integration-testing/http_client_test.py"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 10,
                  "endColumn": 8,
                  "snippet": {
                    "text": "import urllib.request\nimport unittest\nimport os.path\n\nTIMEOUT = 300\n\n# Accepting multiple args so we can pass something like: python elasticurl.py\nelasticurl_cmd_prefix = sys.argv[1:]\n",
                    "rendered": {
                      "text": "import urllib.request\nimport unittest\nimport os.path\n\nTIMEOUT = 300\n\n# Accepting multiple args so we can pass something like: python elasticurl.py\nelasticurl_cmd_prefix = sys.argv[1:]\n",
                      "markdown": "`import urllib.request\nimport unittest\nimport os.path\n\nTIMEOUT = 300\n\n# Accepting multiple args so we can pass something like: python elasticurl.py\nelasticurl_cmd_prefix = sys.argv[1:]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/websocket.c"
                },
                "region": {
                  "startLine": 1146,
                  "startColumn": 68,
                  "endLine": 1146,
                  "endColumn": 72,
                  "snippet": {
                    "text": "                schedule_time += AWS_WEBSOCKET_CLOSE_TIMEOUT;\n                AWS_LOGF_TRACE(\n                    AWS_LS_HTTP_WEBSOCKET,\n                    \"id=%p: websocket_close_timeout task will be run at timestamp %\" PRIu64,\n                    (void *)websocket,\n                    schedule_time);\n                aws_channel_schedule_task_future(\n",
                    "rendered": {
                      "text": "                schedule_time += AWS_WEBSOCKET_CLOSE_TIMEOUT;\n                AWS_LOGF_TRACE(\n                    AWS_LS_HTTP_WEBSOCKET,\n                    \"id=%p: websocket_close_timeout task will be run at timestamp %\" PRIu64,\n                    (void *)websocket,\n                    schedule_time);\n                aws_channel_schedule_task_future(\n",
                      "markdown": "`                schedule_time += AWS_WEBSOCKET_CLOSE_TIMEOUT;\n                AWS_LOGF_TRACE(\n                    AWS_LS_HTTP_WEBSOCKET,\n                    \"id=%p: websocket_close_timeout task will be run at timestamp %\" PRIu64,\n                    (void *)websocket,\n                    schedule_time);\n                aws_channel_schedule_task_future(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/websocket.c"
                },
                "region": {
                  "startLine": 660,
                  "startColumn": 89,
                  "endLine": 660,
                  "endColumn": 93,
                  "snippet": {
                    "text": "        if (aws_websocket_encoder_is_frame_in_progress(&websocket->thread_data.encoder)) {\n            AWS_LOGF_TRACE(\n                AWS_LS_HTTP_WEBSOCKET,\n                \"id=%p: Outgoing frame still in progress, but no more data can be written at this time.\",\n                (void *)websocket);\n            break;\n        }\n",
                    "rendered": {
                      "text": "        if (aws_websocket_encoder_is_frame_in_progress(&websocket->thread_data.encoder)) {\n            AWS_LOGF_TRACE(\n                AWS_LS_HTTP_WEBSOCKET,\n                \"id=%p: Outgoing frame still in progress, but no more data can be written at this time.\",\n                (void *)websocket);\n            break;\n        }\n",
                      "markdown": "`        if (aws_websocket_encoder_is_frame_in_progress(&websocket->thread_data.encoder)) {\n            AWS_LOGF_TRACE(\n                AWS_LS_HTTP_WEBSOCKET,\n                \"id=%p: Outgoing frame still in progress, but no more data can be written at this time.\",\n                (void *)websocket);\n            break;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/websocket.c"
                },
                "region": {
                  "startLine": 546,
                  "startColumn": 70,
                  "endLine": 546,
                  "endColumn": 74,
                  "snippet": {
                    "text": "    if (!websocket->thread_data.current_outgoing_frame &&\n        aws_linked_list_empty(&websocket->thread_data.outgoing_frame_list)) {\n\n        AWS_LOGF_TRACE(AWS_LS_HTTP_WEBSOCKET, \"id=%p: No data to write at this time.\", (void *)websocket);\n        return;\n    }\n\n",
                    "rendered": {
                      "text": "    if (!websocket->thread_data.current_outgoing_frame &&\n        aws_linked_list_empty(&websocket->thread_data.outgoing_frame_list)) {\n\n        AWS_LOGF_TRACE(AWS_LS_HTTP_WEBSOCKET, \"id=%p: No data to write at this time.\", (void *)websocket);\n        return;\n    }\n\n",
                      "markdown": "`    if (!websocket->thread_data.current_outgoing_frame &&\n        aws_linked_list_empty(&websocket->thread_data.outgoing_frame_list)) {\n\n        AWS_LOGF_TRACE(AWS_LS_HTTP_WEBSOCKET, \"id=%p: No data to write at this time.\", (void *)websocket);\n        return;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/websocket.c"
                },
                "region": {
                  "startLine": 1175,
                  "startColumn": 43,
                  "endLine": 1175,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n    AWS_LOGF_WARN(\n        AWS_LS_HTTP_WEBSOCKET,\n        \"id=%p: Failed to send CLOSE frame, timeout happened, shutdown the channel\",\n        (void *)websocket);\n\n    s_stop_writing(websocket, AWS_ERROR_HTTP_CONNECTION_CLOSED);\n",
                    "rendered": {
                      "text": "\n    AWS_LOGF_WARN(\n        AWS_LS_HTTP_WEBSOCKET,\n        \"id=%p: Failed to send CLOSE frame, timeout happened, shutdown the channel\",\n        (void *)websocket);\n\n    s_stop_writing(websocket, AWS_ERROR_HTTP_CONNECTION_CLOSED);\n",
                      "markdown": "`\n    AWS_LOGF_WARN(\n        AWS_LS_HTTP_WEBSOCKET,\n        \"id=%p: Failed to send CLOSE frame, timeout happened, shutdown the channel\",\n        (void *)websocket);\n\n    s_stop_writing(websocket, AWS_ERROR_HTTP_CONNECTION_CLOSED);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/websocket.c"
                },
                "region": {
                  "startLine": 901,
                  "startColumn": 7,
                  "endLine": 901,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    while (node != aws_linked_list_end(frames)) {\n        struct outgoing_frame *frame = AWS_CONTAINER_OF(node, struct outgoing_frame, node);\n\n        node = aws_linked_list_next(node);\n        s_destroy_outgoing_frame(websocket, frame, error_code);\n    }\n\n",
                    "rendered": {
                      "text": "    while (node != aws_linked_list_end(frames)) {\n        struct outgoing_frame *frame = AWS_CONTAINER_OF(node, struct outgoing_frame, node);\n\n        node = aws_linked_list_next(node);\n        s_destroy_outgoing_frame(websocket, frame, error_code);\n    }\n\n",
                      "markdown": "`    while (node != aws_linked_list_end(frames)) {\n        struct outgoing_frame *frame = AWS_CONTAINER_OF(node, struct outgoing_frame, node);\n\n        node = aws_linked_list_next(node);\n        s_destroy_outgoing_frame(websocket, frame, error_code);\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_connection_manager.c"
                },
                "region": {
                  "startLine": 1712,
                  "startColumn": 72,
                  "endLine": 1712,
                  "endColumn": 80,
                  "snippet": {
                    "text": "        .tls_options = proxy_test_type == TUNNELING_DOUBLE_TLS ? &proxy_tls_options : NULL,\n        .auth_type = auth_type,\n        .auth_username = aws_byte_cursor_from_string(configs.basic_auth_username),\n        .auth_password = aws_byte_cursor_from_string(configs.basic_auth_password),\n    };\n    if (use_env) {\n        /* set the environment variables */\n",
                    "rendered": {
                      "text": "        .tls_options = proxy_test_type == TUNNELING_DOUBLE_TLS ? &proxy_tls_options : NULL,\n        .auth_type = auth_type,\n        .auth_username = aws_byte_cursor_from_string(configs.basic_auth_username),\n        .auth_password = aws_byte_cursor_from_string(configs.basic_auth_password),\n    };\n    if (use_env) {\n        /* set the environment variables */\n",
                      "markdown": "`        .tls_options = proxy_test_type == TUNNELING_DOUBLE_TLS ? &proxy_tls_options : NULL,\n        .auth_type = auth_type,\n        .auth_username = aws_byte_cursor_from_string(configs.basic_auth_username),\n        .auth_password = aws_byte_cursor_from_string(configs.basic_auth_password),\n    };\n    if (use_env) {\n        /* set the environment variables */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_connection_manager.c"
                },
                "region": {
                  "startLine": 1712,
                  "startColumn": 14,
                  "endLine": 1712,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        .tls_options = proxy_test_type == TUNNELING_DOUBLE_TLS ? &proxy_tls_options : NULL,\n        .auth_type = auth_type,\n        .auth_username = aws_byte_cursor_from_string(configs.basic_auth_username),\n        .auth_password = aws_byte_cursor_from_string(configs.basic_auth_password),\n    };\n    if (use_env) {\n        /* set the environment variables */\n",
                    "rendered": {
                      "text": "        .tls_options = proxy_test_type == TUNNELING_DOUBLE_TLS ? &proxy_tls_options : NULL,\n        .auth_type = auth_type,\n        .auth_username = aws_byte_cursor_from_string(configs.basic_auth_username),\n        .auth_password = aws_byte_cursor_from_string(configs.basic_auth_password),\n    };\n    if (use_env) {\n        /* set the environment variables */\n",
                      "markdown": "`        .tls_options = proxy_test_type == TUNNELING_DOUBLE_TLS ? &proxy_tls_options : NULL,\n        .auth_type = auth_type,\n        .auth_username = aws_byte_cursor_from_string(configs.basic_auth_username),\n        .auth_password = aws_byte_cursor_from_string(configs.basic_auth_password),\n    };\n    if (use_env) {\n        /* set the environment variables */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_connection_manager.c"
                },
                "region": {
                  "startLine": 1534,
                  "startColumn": 43,
                  "endLine": 1534,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    aws_string_destroy(configs->http_proxy_basic_port);\n    aws_string_destroy(configs->http_proxy_basic_url);\n    aws_string_destroy(configs->basic_auth_username);\n    aws_string_destroy(configs->basic_auth_password);\n    aws_string_destroy(configs->tls_cert_path);\n    aws_string_destroy(configs->tls_key_path);\n    aws_string_destroy(configs->tls_root_cert_path);\n",
                    "rendered": {
                      "text": "    aws_string_destroy(configs->http_proxy_basic_port);\n    aws_string_destroy(configs->http_proxy_basic_url);\n    aws_string_destroy(configs->basic_auth_username);\n    aws_string_destroy(configs->basic_auth_password);\n    aws_string_destroy(configs->tls_cert_path);\n    aws_string_destroy(configs->tls_key_path);\n    aws_string_destroy(configs->tls_root_cert_path);\n",
                      "markdown": "`    aws_string_destroy(configs->http_proxy_basic_port);\n    aws_string_destroy(configs->http_proxy_basic_url);\n    aws_string_destroy(configs->basic_auth_username);\n    aws_string_destroy(configs->basic_auth_password);\n    aws_string_destroy(configs->tls_cert_path);\n    aws_string_destroy(configs->tls_key_path);\n    aws_string_destroy(configs->tls_root_cert_path);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_connection_manager.c"
                },
                "region": {
                  "startLine": 1493,
                  "startColumn": 28,
                  "endLine": 1493,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        return AWS_OP_ERR;\n    }\n    if (aws_get_environment_value(allocator, s_basic_auth_password_env_var, &configs->basic_auth_password) ||\n        configs->basic_auth_password == NULL) {\n        return AWS_OP_ERR;\n    }\n    if (aws_get_environment_value(allocator, s_tls_cert_path_env_var, &configs->tls_cert_path) ||\n",
                    "rendered": {
                      "text": "        return AWS_OP_ERR;\n    }\n    if (aws_get_environment_value(allocator, s_basic_auth_password_env_var, &configs->basic_auth_password) ||\n        configs->basic_auth_password == NULL) {\n        return AWS_OP_ERR;\n    }\n    if (aws_get_environment_value(allocator, s_tls_cert_path_env_var, &configs->tls_cert_path) ||\n",
                      "markdown": "`        return AWS_OP_ERR;\n    }\n    if (aws_get_environment_value(allocator, s_basic_auth_password_env_var, &configs->basic_auth_password) ||\n        configs->basic_auth_password == NULL) {\n        return AWS_OP_ERR;\n    }\n    if (aws_get_environment_value(allocator, s_tls_cert_path_env_var, &configs->tls_cert_path) ||\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_connection_manager.c"
                },
                "region": {
                  "startLine": 1492,
                  "startColumn": 97,
                  "endLine": 1492,
                  "endColumn": 105,
                  "snippet": {
                    "text": "        configs->basic_auth_username == NULL) {\n        return AWS_OP_ERR;\n    }\n    if (aws_get_environment_value(allocator, s_basic_auth_password_env_var, &configs->basic_auth_password) ||\n        configs->basic_auth_password == NULL) {\n        return AWS_OP_ERR;\n    }\n",
                    "rendered": {
                      "text": "        configs->basic_auth_username == NULL) {\n        return AWS_OP_ERR;\n    }\n    if (aws_get_environment_value(allocator, s_basic_auth_password_env_var, &configs->basic_auth_password) ||\n        configs->basic_auth_password == NULL) {\n        return AWS_OP_ERR;\n    }\n",
                      "markdown": "`        configs->basic_auth_username == NULL) {\n        return AWS_OP_ERR;\n    }\n    if (aws_get_environment_value(allocator, s_basic_auth_password_env_var, &configs->basic_auth_password) ||\n        configs->basic_auth_password == NULL) {\n        return AWS_OP_ERR;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_connection_manager.c"
                },
                "region": {
                  "startLine": 1492,
                  "startColumn": 58,
                  "endLine": 1492,
                  "endColumn": 66,
                  "snippet": {
                    "text": "        configs->basic_auth_username == NULL) {\n        return AWS_OP_ERR;\n    }\n    if (aws_get_environment_value(allocator, s_basic_auth_password_env_var, &configs->basic_auth_password) ||\n        configs->basic_auth_password == NULL) {\n        return AWS_OP_ERR;\n    }\n",
                    "rendered": {
                      "text": "        configs->basic_auth_username == NULL) {\n        return AWS_OP_ERR;\n    }\n    if (aws_get_environment_value(allocator, s_basic_auth_password_env_var, &configs->basic_auth_password) ||\n        configs->basic_auth_password == NULL) {\n        return AWS_OP_ERR;\n    }\n",
                      "markdown": "`        configs->basic_auth_username == NULL) {\n        return AWS_OP_ERR;\n    }\n    if (aws_get_environment_value(allocator, s_basic_auth_password_env_var, &configs->basic_auth_password) ||\n        configs->basic_auth_password == NULL) {\n        return AWS_OP_ERR;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_connection_manager.c"
                },
                "region": {
                  "startLine": 1440,
                  "startColumn": 83,
                  "endLine": 1440,
                  "endColumn": 91,
                  "snippet": {
                    "text": "HTTP_PROXY_BASIC_PORT\");\nAWS_STATIC_STRING_FROM_LITERAL(s_http_proxy_basic_url_env_var, \"AWS_TEST_HTTP_PROXY_BASIC_URL\");\nAWS_STATIC_STRING_FROM_LITERAL(s_basic_auth_username_env_var, \"AWS_TEST_BASIC_AUTH_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(s_basic_auth_password_env_var, \"AWS_TEST_BASIC_AUTH_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(s_tls_cert_path_env_var, \"AWS_TEST_TLS_CERT_PATH\");\nAWS_STATIC_STRING_FROM_LITERAL(s_tls_key_path_env_var, \"AWS_TEST_TLS_KEY_PATH\");\nAWS_STATIC_STRING_FROM_LITERAL(s_tls_root_cert_path_env_var, \"AWS_TEST_TLS_ROOT_CERT_PATH\");\nAWS_STATIC_STRING_FROM_LITERAL(s_https_",
                    "rendered": {
                      "text": "HTTP_PROXY_BASIC_PORT\");\nAWS_STATIC_STRING_FROM_LITERAL(s_http_proxy_basic_url_env_var, \"AWS_TEST_HTTP_PROXY_BASIC_URL\");\nAWS_STATIC_STRING_FROM_LITERAL(s_basic_auth_username_env_var, \"AWS_TEST_BASIC_AUTH_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(s_basic_auth_password_env_var, \"AWS_TEST_BASIC_AUTH_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(s_tls_cert_path_env_var, \"AWS_TEST_TLS_CERT_PATH\");\nAWS_STATIC_STRING_FROM_LITERAL(s_tls_key_path_env_var, \"AWS_TEST_TLS_KEY_PATH\");\nAWS_STATIC_STRING_FROM_LITERAL(s_tls_root_cert_path_env_var, \"AWS_TEST_TLS_ROOT_CERT_PATH\");\nAWS_STATIC_STRING_FROM_LITERAL(s_https_",
                      "markdown": "`HTTP_PROXY_BASIC_PORT\");\nAWS_STATIC_STRING_FROM_LITERAL(s_http_proxy_basic_url_env_var, \"AWS_TEST_HTTP_PROXY_BASIC_URL\");\nAWS_STATIC_STRING_FROM_LITERAL(s_basic_auth_username_env_var, \"AWS_TEST_BASIC_AUTH_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(s_basic_auth_password_env_var, \"AWS_TEST_BASIC_AUTH_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(s_tls_cert_path_env_var, \"AWS_TEST_TLS_CERT_PATH\");\nAWS_STATIC_STRING_FROM_LITERAL(s_tls_key_path_env_var, \"AWS_TEST_TLS_KEY_PATH\");\nAWS_STATIC_STRING_FROM_LITERAL(s_tls_root_cert_path_env_var, \"AWS_TEST_TLS_ROOT_CERT_PATH\");\nAWS_STATIC_STRING_FROM_LITERAL(s_https_`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_connection_manager.c"
                },
                "region": {
                  "startLine": 1440,
                  "startColumn": 44,
                  "endLine": 1440,
                  "endColumn": 52,
                  "snippet": {
                    "text": "tp_proxy_basic_port_env_var, \"AWS_TEST_HTTP_PROXY_BASIC_PORT\");\nAWS_STATIC_STRING_FROM_LITERAL(s_http_proxy_basic_url_env_var, \"AWS_TEST_HTTP_PROXY_BASIC_URL\");\nAWS_STATIC_STRING_FROM_LITERAL(s_basic_auth_username_env_var, \"AWS_TEST_BASIC_AUTH_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(s_basic_auth_password_env_var, \"AWS_TEST_BASIC_AUTH_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(s_tls_cert_path_env_var, \"AWS_TEST_TLS_CERT_PATH\");\nAWS_STATIC_STRING_FROM_LITERAL(s_tls_key_path_env_var, \"AWS_TEST_TLS_KEY_PATH\");\nAWS_STATIC_STRING_FROM_LITERAL(s_tls_root_cert_path_env_var, \"AWS_TEST_TLS_ROOT_CERT_PATH\");\n",
                    "rendered": {
                      "text": "tp_proxy_basic_port_env_var, \"AWS_TEST_HTTP_PROXY_BASIC_PORT\");\nAWS_STATIC_STRING_FROM_LITERAL(s_http_proxy_basic_url_env_var, \"AWS_TEST_HTTP_PROXY_BASIC_URL\");\nAWS_STATIC_STRING_FROM_LITERAL(s_basic_auth_username_env_var, \"AWS_TEST_BASIC_AUTH_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(s_basic_auth_password_env_var, \"AWS_TEST_BASIC_AUTH_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(s_tls_cert_path_env_var, \"AWS_TEST_TLS_CERT_PATH\");\nAWS_STATIC_STRING_FROM_LITERAL(s_tls_key_path_env_var, \"AWS_TEST_TLS_KEY_PATH\");\nAWS_STATIC_STRING_FROM_LITERAL(s_tls_root_cert_path_env_var, \"AWS_TEST_TLS_ROOT_CERT_PATH\");\n",
                      "markdown": "`tp_proxy_basic_port_env_var, \"AWS_TEST_HTTP_PROXY_BASIC_PORT\");\nAWS_STATIC_STRING_FROM_LITERAL(s_http_proxy_basic_url_env_var, \"AWS_TEST_HTTP_PROXY_BASIC_URL\");\nAWS_STATIC_STRING_FROM_LITERAL(s_basic_auth_username_env_var, \"AWS_TEST_BASIC_AUTH_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(s_basic_auth_password_env_var, \"AWS_TEST_BASIC_AUTH_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(s_tls_cert_path_env_var, \"AWS_TEST_TLS_CERT_PATH\");\nAWS_STATIC_STRING_FROM_LITERAL(s_tls_key_path_env_var, \"AWS_TEST_TLS_KEY_PATH\");\nAWS_STATIC_STRING_FROM_LITERAL(s_tls_root_cert_path_env_var, \"AWS_TEST_TLS_ROOT_CERT_PATH\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_connection_manager.c"
                },
                "region": {
                  "startLine": 1412,
                  "startColumn": 34,
                  "endLine": 1412,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    struct aws_string *http_proxy_basic_port;\n    struct aws_string *http_proxy_basic_url;\n    struct aws_string *basic_auth_username;\n    struct aws_string *basic_auth_password;\n    struct aws_string *tls_cert_path;\n    struct aws_string *tls_key_path;\n    struct aws_string *tls_root_cert_path;\n",
                    "rendered": {
                      "text": "    struct aws_string *http_proxy_basic_port;\n    struct aws_string *http_proxy_basic_url;\n    struct aws_string *basic_auth_username;\n    struct aws_string *basic_auth_password;\n    struct aws_string *tls_cert_path;\n    struct aws_string *tls_key_path;\n    struct aws_string *tls_root_cert_path;\n",
                      "markdown": "`    struct aws_string *http_proxy_basic_port;\n    struct aws_string *http_proxy_basic_url;\n    struct aws_string *basic_auth_username;\n    struct aws_string *basic_auth_password;\n    struct aws_string *tls_cert_path;\n    struct aws_string *tls_key_path;\n    struct aws_string *tls_root_cert_path;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_connection_manager.c"
                },
                "region": {
                  "startLine": 1394,
                  "startColumn": 34,
                  "endLine": 1394,
                  "endColumn": 42,
                  "snippet": {
                    "text": " * AWS_TEST_HTTP_PROXY_BASIC_URL - whole URL to use for tests that make open connections to the proxy with basic\n *  authentication\n * AWS_TEST_BASIC_AUTH_USERNAME - username to use when using basic authentication to the proxy\n * AWS_TEST_BASIC_AUTH_PASSWORD - password to use when using basic authentication to the proxy\n *\n * AWS_TEST_TLS_CERT_PATH - file path to certificate used to initialize the tls context of the mqtt connection\n * AWS_TEST_TLS_KEY_PATH - file path to the key used to initialize the tls context of the mqtt connection\n",
                    "rendered": {
                      "text": " * AWS_TEST_HTTP_PROXY_BASIC_URL - whole URL to use for tests that make open connections to the proxy with basic\n *  authentication\n * AWS_TEST_BASIC_AUTH_USERNAME - username to use when using basic authentication to the proxy\n * AWS_TEST_BASIC_AUTH_PASSWORD - password to use when using basic authentication to the proxy\n *\n * AWS_TEST_TLS_CERT_PATH - file path to certificate used to initialize the tls context of the mqtt connection\n * AWS_TEST_TLS_KEY_PATH - file path to the key used to initialize the tls context of the mqtt connection\n",
                      "markdown": "` * AWS_TEST_HTTP_PROXY_BASIC_URL - whole URL to use for tests that make open connections to the proxy with basic\n *  authentication\n * AWS_TEST_BASIC_AUTH_USERNAME - username to use when using basic authentication to the proxy\n * AWS_TEST_BASIC_AUTH_PASSWORD - password to use when using basic authentication to the proxy\n *\n * AWS_TEST_TLS_CERT_PATH - file path to certificate used to initialize the tls context of the mqtt connection\n * AWS_TEST_TLS_KEY_PATH - file path to the key used to initialize the tls context of the mqtt connection\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_connection_manager.c"
                },
                "region": {
                  "startLine": 1394,
                  "startColumn": 23,
                  "endLine": 1394,
                  "endColumn": 31,
                  "snippet": {
                    "text": " * AWS_TEST_HTTP_PROXY_BASIC_URL - whole URL to use for tests that make open connections to the proxy with basic\n *  authentication\n * AWS_TEST_BASIC_AUTH_USERNAME - username to use when using basic authentication to the proxy\n * AWS_TEST_BASIC_AUTH_PASSWORD - password to use when using basic authentication to the proxy\n *\n * AWS_TEST_TLS_CERT_PATH - file path to certificate used to initialize the tls context of the mqtt connection\n * AWS_TEST_TLS_KEY_PATH - file path to the key used to initialize the tls context of the mqtt connection\n",
                    "rendered": {
                      "text": " * AWS_TEST_HTTP_PROXY_BASIC_URL - whole URL to use for tests that make open connections to the proxy with basic\n *  authentication\n * AWS_TEST_BASIC_AUTH_USERNAME - username to use when using basic authentication to the proxy\n * AWS_TEST_BASIC_AUTH_PASSWORD - password to use when using basic authentication to the proxy\n *\n * AWS_TEST_TLS_CERT_PATH - file path to certificate used to initialize the tls context of the mqtt connection\n * AWS_TEST_TLS_KEY_PATH - file path to the key used to initialize the tls context of the mqtt connection\n",
                      "markdown": "` * AWS_TEST_HTTP_PROXY_BASIC_URL - whole URL to use for tests that make open connections to the proxy with basic\n *  authentication\n * AWS_TEST_BASIC_AUTH_USERNAME - username to use when using basic authentication to the proxy\n * AWS_TEST_BASIC_AUTH_PASSWORD - password to use when using basic authentication to the proxy\n *\n * AWS_TEST_TLS_CERT_PATH - file path to certificate used to initialize the tls context of the mqtt connection\n * AWS_TEST_TLS_KEY_PATH - file path to the key used to initialize the tls context of the mqtt connection\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_h2_client.c"
                },
                "region": {
                  "startLine": 1756,
                  "startColumn": 12,
                  "endLine": 1756,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        size_t written_msg_queue_len = 0;\n        for (struct aws_linked_list_node *node = aws_linked_list_begin(written_msg_queue);\n             node != aws_linked_list_end(written_msg_queue);\n             node = aws_linked_list_next(node)) {\n            written_msg_queue_len++;\n        }\n        ASSERT_UINT_EQUALS(1, written_msg_queue_len);\n",
                    "rendered": {
                      "text": "        size_t written_msg_queue_len = 0;\n        for (struct aws_linked_list_node *node = aws_linked_list_begin(written_msg_queue);\n             node != aws_linked_list_end(written_msg_queue);\n             node = aws_linked_list_next(node)) {\n            written_msg_queue_len++;\n        }\n        ASSERT_UINT_EQUALS(1, written_msg_queue_len);\n",
                      "markdown": "`        size_t written_msg_queue_len = 0;\n        for (struct aws_linked_list_node *node = aws_linked_list_begin(written_msg_queue);\n             node != aws_linked_list_end(written_msg_queue);\n             node = aws_linked_list_next(node)) {\n            written_msg_queue_len++;\n        }\n        ASSERT_UINT_EQUALS(1, written_msg_queue_len);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_h2_client.c"
                },
                "region": {
                  "startLine": 1755,
                  "startColumn": 12,
                  "endLine": 1755,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n        size_t written_msg_queue_len = 0;\n        for (struct aws_linked_list_node *node = aws_linked_list_begin(written_msg_queue);\n             node != aws_linked_list_end(written_msg_queue);\n             node = aws_linked_list_next(node)) {\n            written_msg_queue_len++;\n        }\n",
                    "rendered": {
                      "text": "\n        size_t written_msg_queue_len = 0;\n        for (struct aws_linked_list_node *node = aws_linked_list_begin(written_msg_queue);\n             node != aws_linked_list_end(written_msg_queue);\n             node = aws_linked_list_next(node)) {\n            written_msg_queue_len++;\n        }\n",
                      "markdown": "`\n        size_t written_msg_queue_len = 0;\n        for (struct aws_linked_list_node *node = aws_linked_list_begin(written_msg_queue);\n             node != aws_linked_list_end(written_msg_queue);\n             node = aws_linked_list_next(node)) {\n            written_msg_queue_len++;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_h2_headers.c"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 30,
                  "endLine": 229,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    aws_hpack_encoder_set_huffman_mode(&fixture->encoder, AWS_HPACK_HUFFMAN_NEVER);\n\n    struct aws_http_header headers[] = {\n        DEFINE_STATIC_HEADER(\"password\", \"secret\", NO_FORWARD_CACHE),\n    };\n    ASSERT_SUCCESS(aws_http_headers_add_array(fixture->headers_to_encode, headers, AWS_ARRAY_SIZE(headers)));\n\n",
                    "rendered": {
                      "text": "    aws_hpack_encoder_set_huffman_mode(&fixture->encoder, AWS_HPACK_HUFFMAN_NEVER);\n\n    struct aws_http_header headers[] = {\n        DEFINE_STATIC_HEADER(\"password\", \"secret\", NO_FORWARD_CACHE),\n    };\n    ASSERT_SUCCESS(aws_http_headers_add_array(fixture->headers_to_encode, headers, AWS_ARRAY_SIZE(headers)));\n\n",
                      "markdown": "`    aws_hpack_encoder_set_huffman_mode(&fixture->encoder, AWS_HPACK_HUFFMAN_NEVER);\n\n    struct aws_http_header headers[] = {\n        DEFINE_STATIC_HEADER(\"password\", \"secret\", NO_FORWARD_CACHE),\n    };\n    ASSERT_SUCCESS(aws_http_headers_add_array(fixture->headers_to_encode, headers, AWS_ARRAY_SIZE(headers)));\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/codebuild/linux-integration-tests.yml"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 15,
                  "endLine": 8,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  install:\n    commands:\n      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - apt-get install gcc-7 cmake ninja-build python3 -y\n  pre_build:\n    commands:\n",
                    "rendered": {
                      "text": "  install:\n    commands:\n      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - apt-get install gcc-7 cmake ninja-build python3 -y\n  pre_build:\n    commands:\n",
                      "markdown": "`  install:\n    commands:\n      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - apt-get install gcc-7 cmake ninja-build python3 -y\n  pre_build:\n    commands:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/codebuild/linux-integration-tests.yml"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 7,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    commands:\n      - echo Build started on `date`\n      - aws s3 cp s3://aws-crt-test-stuff/setup_proxy_test_env_h2.sh /tmp/setup_proxy_test_env.sh\n      - chmod a+xr /tmp/setup_proxy_test_env.sh\n      - python3 -c \"from urllib.request import urlretrieve; urlretrieve('$BUILDER_HOST/$BUILDER_SOURCE/$BUILDER_VERSION/builder.pyz', 'builder.pyz')\"\n      - python3 builder.pyz build -p aws-c-http --cmake-extra=-DENABLE_PROXY_INTEGRATION_TESTS=ON --cmake-extra=-DENABLE_LOCALHOST_INTEGRATION_TESTS=ON --coverage\n  post_build:\n",
                    "rendered": {
                      "text": "    commands:\n      - echo Build started on `date`\n      - aws s3 cp s3://aws-crt-test-stuff/setup_proxy_test_env_h2.sh /tmp/setup_proxy_test_env.sh\n      - chmod a+xr /tmp/setup_proxy_test_env.sh\n      - python3 -c \"from urllib.request import urlretrieve; urlretrieve('$BUILDER_HOST/$BUILDER_SOURCE/$BUILDER_VERSION/builder.pyz', 'builder.pyz')\"\n      - python3 builder.pyz build -p aws-c-http --cmake-extra=-DENABLE_PROXY_INTEGRATION_TESTS=ON --cmake-extra=-DENABLE_LOCALHOST_INTEGRATION_TESTS=ON --coverage\n  post_build:\n",
                      "markdown": "`    commands:\n      - echo Build started on `date`\n      - aws s3 cp s3://aws-crt-test-stuff/setup_proxy_test_env_h2.sh /tmp/setup_proxy_test_env.sh\n      - chmod a+xr /tmp/setup_proxy_test_env.sh\n      - python3 -c \"from urllib.request import urlretrieve; urlretrieve('$BUILDER_HOST/$BUILDER_SOURCE/$BUILDER_VERSION/builder.pyz', 'builder.pyz')\"\n      - python3 builder.pyz build -p aws-c-http --cmake-extra=-DENABLE_PROXY_INTEGRATION_TESTS=ON --cmake-extra=-DENABLE_LOCALHOST_INTEGRATION_TESTS=ON --coverage\n  post_build:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/codebuild/linux-integration-tests.yml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 14,
                  "endLine": 20,
                  "endColumn": 18,
                  "snippet": {
                    "text": "  build:\n    commands:\n      - echo Build started on `date`\n      - aws s3 cp s3://aws-crt-test-stuff/setup_proxy_test_env_h2.sh /tmp/setup_proxy_test_env.sh\n      - chmod a+xr /tmp/setup_proxy_test_env.sh\n      - python3 -c \"from urllib.request import urlretrieve; urlretrieve('$BUILDER_HOST/$BUILDER_SOURCE/$BUILDER_VERSION/builder.pyz', 'builder.pyz')\"\n      - python3 builder.pyz build -p aws-c-http --cmake-extra=-DENABLE_PROXY_INTEGRATION_TESTS=ON --cmake-extra=-DENABLE_LOCALHOST_INTEGRATION_TESTS=ON --coverage\n",
                    "rendered": {
                      "text": "  build:\n    commands:\n      - echo Build started on `date`\n      - aws s3 cp s3://aws-crt-test-stuff/setup_proxy_test_env_h2.sh /tmp/setup_proxy_test_env.sh\n      - chmod a+xr /tmp/setup_proxy_test_env.sh\n      - python3 -c \"from urllib.request import urlretrieve; urlretrieve('$BUILDER_HOST/$BUILDER_SOURCE/$BUILDER_VERSION/builder.pyz', 'builder.pyz')\"\n      - python3 builder.pyz build -p aws-c-http --cmake-extra=-DENABLE_PROXY_INTEGRATION_TESTS=ON --cmake-extra=-DENABLE_LOCALHOST_INTEGRATION_TESTS=ON --coverage\n",
                      "markdown": "`  build:\n    commands:\n      - echo Build started on `date`\n      - aws s3 cp s3://aws-crt-test-stuff/setup_proxy_test_env_h2.sh /tmp/setup_proxy_test_env.sh\n      - chmod a+xr /tmp/setup_proxy_test_env.sh\n      - python3 -c \"from urllib.request import urlretrieve; urlretrieve('$BUILDER_HOST/$BUILDER_SOURCE/$BUILDER_VERSION/builder.pyz', 'builder.pyz')\"\n      - python3 builder.pyz build -p aws-c-http --cmake-extra=-DENABLE_PROXY_INTEGRATION_TESTS=ON --cmake-extra=-DENABLE_LOCALHOST_INTEGRATION_TESTS=ON --coverage\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/codebuild/linux-integration-tests.yml"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 87,
                  "endLine": 14,
                  "endColumn": 92,
                  "snippet": {
                    "text": "    commands:\n      - export CC=gcc-7\n      - export BUILDER_VERSION=$(cat .github/workflows/ci.yml | grep 'BUILDER_VERSION:' | sed 's/\\s*BUILDER_VERSION:\\s*\\(.*\\)/\\1/')\n      - export BUILDER_SOURCE=$(cat .github/workflows/ci.yml | grep 'BUILDER_SOURCE:' | sed 's/\\s*BUILDER_SOURCE:\\s*\\(.*\\)/\\1/')\n      - echo \"Using builder version='${BUILDER_VERSION}' source='${BUILDER_SOURCE}'\"\n      - export BUILDER_HOST=https://d19elf31gohf1l.cloudfront.net\n  build:\n",
                    "rendered": {
                      "text": "    commands:\n      - export CC=gcc-7\n      - export BUILDER_VERSION=$(cat .github/workflows/ci.yml | grep 'BUILDER_VERSION:' | sed 's/\\s*BUILDER_VERSION:\\s*\\(.*\\)/\\1/')\n      - export BUILDER_SOURCE=$(cat .github/workflows/ci.yml | grep 'BUILDER_SOURCE:' | sed 's/\\s*BUILDER_SOURCE:\\s*\\(.*\\)/\\1/')\n      - echo \"Using builder version='${BUILDER_VERSION}' source='${BUILDER_SOURCE}'\"\n      - export BUILDER_HOST=https://d19elf31gohf1l.cloudfront.net\n  build:\n",
                      "markdown": "`    commands:\n      - export CC=gcc-7\n      - export BUILDER_VERSION=$(cat .github/workflows/ci.yml | grep 'BUILDER_VERSION:' | sed 's/\\s*BUILDER_VERSION:\\s*\\(.*\\)/\\1/')\n      - export BUILDER_SOURCE=$(cat .github/workflows/ci.yml | grep 'BUILDER_SOURCE:' | sed 's/\\s*BUILDER_SOURCE:\\s*\\(.*\\)/\\1/')\n      - echo \"Using builder version='${BUILDER_VERSION}' source='${BUILDER_SOURCE}'\"\n      - export BUILDER_HOST=https://d19elf31gohf1l.cloudfront.net\n  build:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/codebuild/linux-integration-tests.yml"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 62,
                  "endLine": 14,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    commands:\n      - export CC=gcc-7\n      - export BUILDER_VERSION=$(cat .github/workflows/ci.yml | grep 'BUILDER_VERSION:' | sed 's/\\s*BUILDER_VERSION:\\s*\\(.*\\)/\\1/')\n      - export BUILDER_SOURCE=$(cat .github/workflows/ci.yml | grep 'BUILDER_SOURCE:' | sed 's/\\s*BUILDER_SOURCE:\\s*\\(.*\\)/\\1/')\n      - echo \"Using builder version='${BUILDER_VERSION}' source='${BUILDER_SOURCE}'\"\n      - export BUILDER_HOST=https://d19elf31gohf1l.cloudfront.net\n  build:\n",
                    "rendered": {
                      "text": "    commands:\n      - export CC=gcc-7\n      - export BUILDER_VERSION=$(cat .github/workflows/ci.yml | grep 'BUILDER_VERSION:' | sed 's/\\s*BUILDER_VERSION:\\s*\\(.*\\)/\\1/')\n      - export BUILDER_SOURCE=$(cat .github/workflows/ci.yml | grep 'BUILDER_SOURCE:' | sed 's/\\s*BUILDER_SOURCE:\\s*\\(.*\\)/\\1/')\n      - echo \"Using builder version='${BUILDER_VERSION}' source='${BUILDER_SOURCE}'\"\n      - export BUILDER_HOST=https://d19elf31gohf1l.cloudfront.net\n  build:\n",
                      "markdown": "`    commands:\n      - export CC=gcc-7\n      - export BUILDER_VERSION=$(cat .github/workflows/ci.yml | grep 'BUILDER_VERSION:' | sed 's/\\s*BUILDER_VERSION:\\s*\\(.*\\)/\\1/')\n      - export BUILDER_SOURCE=$(cat .github/workflows/ci.yml | grep 'BUILDER_SOURCE:' | sed 's/\\s*BUILDER_SOURCE:\\s*\\(.*\\)/\\1/')\n      - echo \"Using builder version='${BUILDER_VERSION}' source='${BUILDER_SOURCE}'\"\n      - export BUILDER_HOST=https://d19elf31gohf1l.cloudfront.net\n  build:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/codebuild/linux-integration-tests.yml"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 89,
                  "endLine": 13,
                  "endColumn": 94,
                  "snippet": {
                    "text": "  pre_build:\n    commands:\n      - export CC=gcc-7\n      - export BUILDER_VERSION=$(cat .github/workflows/ci.yml | grep 'BUILDER_VERSION:' | sed 's/\\s*BUILDER_VERSION:\\s*\\(.*\\)/\\1/')\n      - export BUILDER_SOURCE=$(cat .github/workflows/ci.yml | grep 'BUILDER_SOURCE:' | sed 's/\\s*BUILDER_SOURCE:\\s*\\(.*\\)/\\1/')\n      - echo \"Using builder version='${BUILDER_VERSION}' source='${BUILDER_SOURCE}'\"\n      - export BUILDER_HOST=https://d19elf31gohf1l.cloudfront.net\n",
                    "rendered": {
                      "text": "  pre_build:\n    commands:\n      - export CC=gcc-7\n      - export BUILDER_VERSION=$(cat .github/workflows/ci.yml | grep 'BUILDER_VERSION:' | sed 's/\\s*BUILDER_VERSION:\\s*\\(.*\\)/\\1/')\n      - export BUILDER_SOURCE=$(cat .github/workflows/ci.yml | grep 'BUILDER_SOURCE:' | sed 's/\\s*BUILDER_SOURCE:\\s*\\(.*\\)/\\1/')\n      - echo \"Using builder version='${BUILDER_VERSION}' source='${BUILDER_SOURCE}'\"\n      - export BUILDER_HOST=https://d19elf31gohf1l.cloudfront.net\n",
                      "markdown": "`  pre_build:\n    commands:\n      - export CC=gcc-7\n      - export BUILDER_VERSION=$(cat .github/workflows/ci.yml | grep 'BUILDER_VERSION:' | sed 's/\\s*BUILDER_VERSION:\\s*\\(.*\\)/\\1/')\n      - export BUILDER_SOURCE=$(cat .github/workflows/ci.yml | grep 'BUILDER_SOURCE:' | sed 's/\\s*BUILDER_SOURCE:\\s*\\(.*\\)/\\1/')\n      - echo \"Using builder version='${BUILDER_VERSION}' source='${BUILDER_SOURCE}'\"\n      - export BUILDER_HOST=https://d19elf31gohf1l.cloudfront.net\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/codebuild/linux-integration-tests.yml"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 63,
                  "endLine": 13,
                  "endColumn": 69,
                  "snippet": {
                    "text": "  pre_build:\n    commands:\n      - export CC=gcc-7\n      - export BUILDER_VERSION=$(cat .github/workflows/ci.yml | grep 'BUILDER_VERSION:' | sed 's/\\s*BUILDER_VERSION:\\s*\\(.*\\)/\\1/')\n      - export BUILDER_SOURCE=$(cat .github/workflows/ci.yml | grep 'BUILDER_SOURCE:' | sed 's/\\s*BUILDER_SOURCE:\\s*\\(.*\\)/\\1/')\n      - echo \"Using builder version='${BUILDER_VERSION}' source='${BUILDER_SOURCE}'\"\n      - export BUILDER_HOST=https://d19elf31gohf1l.cloudfront.net\n",
                    "rendered": {
                      "text": "  pre_build:\n    commands:\n      - export CC=gcc-7\n      - export BUILDER_VERSION=$(cat .github/workflows/ci.yml | grep 'BUILDER_VERSION:' | sed 's/\\s*BUILDER_VERSION:\\s*\\(.*\\)/\\1/')\n      - export BUILDER_SOURCE=$(cat .github/workflows/ci.yml | grep 'BUILDER_SOURCE:' | sed 's/\\s*BUILDER_SOURCE:\\s*\\(.*\\)/\\1/')\n      - echo \"Using builder version='${BUILDER_VERSION}' source='${BUILDER_SOURCE}'\"\n      - export BUILDER_HOST=https://d19elf31gohf1l.cloudfront.net\n",
                      "markdown": "`  pre_build:\n    commands:\n      - export CC=gcc-7\n      - export BUILDER_VERSION=$(cat .github/workflows/ci.yml | grep 'BUILDER_VERSION:' | sed 's/\\s*BUILDER_VERSION:\\s*\\(.*\\)/\\1/')\n      - export BUILDER_SOURCE=$(cat .github/workflows/ci.yml | grep 'BUILDER_SOURCE:' | sed 's/\\s*BUILDER_SOURCE:\\s*\\(.*\\)/\\1/')\n      - echo \"Using builder version='${BUILDER_VERSION}' source='${BUILDER_SOURCE}'\"\n      - export BUILDER_HOST=https://d19elf31gohf1l.cloudfront.net\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/codebuild/linux-integration-tests.yml"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 7,
                  "endLine": 9,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    commands:\n      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - apt-get install gcc-7 cmake ninja-build python3 -y\n  pre_build:\n    commands:\n      - export CC=gcc-7\n",
                    "rendered": {
                      "text": "    commands:\n      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - apt-get install gcc-7 cmake ninja-build python3 -y\n  pre_build:\n    commands:\n      - export CC=gcc-7\n",
                      "markdown": "`    commands:\n      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - apt-get install gcc-7 cmake ninja-build python3 -y\n  pre_build:\n    commands:\n      - export CC=gcc-7\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/codebuild/linux-integration-tests.yml"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 7,
                  "endLine": 8,
                  "endColumn": 16,
                  "snippet": {
                    "text": "  install:\n    commands:\n      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - apt-get install gcc-7 cmake ninja-build python3 -y\n  pre_build:\n    commands:\n",
                    "rendered": {
                      "text": "  install:\n    commands:\n      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - apt-get install gcc-7 cmake ninja-build python3 -y\n  pre_build:\n    commands:\n",
                      "markdown": "`  install:\n    commands:\n      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - apt-get install gcc-7 cmake ninja-build python3 -y\n  pre_build:\n    commands:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.github/ISSUE_TEMPLATE/bug-report.yml"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 10,
                  "endLine": 31,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        What actually happened?\n        \n        Please include full errors, uncaught exceptions, stack traces, and relevant logs.\n        If service responses are relevant, please include wire logs.\n    validations:\n      required: true\n  - type: textarea\n",
                    "rendered": {
                      "text": "        What actually happened?\n        \n        Please include full errors, uncaught exceptions, stack traces, and relevant logs.\n        If service responses are relevant, please include wire logs.\n    validations:\n      required: true\n  - type: textarea\n",
                      "markdown": "`        What actually happened?\n        \n        Please include full errors, uncaught exceptions, stack traces, and relevant logs.\n        If service responses are relevant, please include wire logs.\n    validations:\n      required: true\n  - type: textarea\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.github/ISSUE_TEMPLATE/bug-report.yml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 20,
                  "endLine": 20,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    attributes:\n      label: Expected Behavior\n      description: |\n        What did you expect to happen?\n    validations:\n      required: true\n  - type: textarea\n",
                    "rendered": {
                      "text": "    attributes:\n      label: Expected Behavior\n      description: |\n        What did you expect to happen?\n    validations:\n      required: true\n  - type: textarea\n",
                      "markdown": "`    attributes:\n      label: Expected Behavior\n      description: |\n        What did you expect to happen?\n    validations:\n      required: true\n  - type: textarea\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')\"\n        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-14\n\n  windows-shared-libs:\n    runs-on: windows-2022 # latest\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')\"\n        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-14\n\n  windows-shared-libs:\n    runs-on: windows-2022 # latest\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')\"\n        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-14\n\n  windows-shared-libs:\n    runs-on: windows-2022 # latest\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 7,
                  "endLine": 158,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  localhost-test-linux:\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  localhost-test-linux:\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  localhost-test-linux:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 7,
                  "endLine": 149,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  macos-x64:\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  macos-x64:\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  macos-x64:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 48,
                  "endLine": 114,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        python builder.pyz build -p ${{ env.PACKAGE_NAME }}\n\n  windows-vc14:\n    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2015 (v14.0)\n    strategy:\n      matrix:\n        arch: [x86, x64]\n",
                    "rendered": {
                      "text": "        python builder.pyz build -p ${{ env.PACKAGE_NAME }}\n\n  windows-vc14:\n    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2015 (v14.0)\n    strategy:\n      matrix:\n        arch: [x86, x64]\n",
                      "markdown": "`        python builder.pyz build -p ${{ env.PACKAGE_NAME }}\n\n  windows-vc14:\n    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2015 (v14.0)\n    strategy:\n      matrix:\n        arch: [x86, x64]\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 122,
                  "endLine": 102,
                  "endColumn": 129,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n\n  windows:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n\n  windows:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n\n  windows:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 16,
                  "endLine": 102,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n\n  windows:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n\n  windows:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n\n  windows:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 122,
                  "endLine": 91,
                  "endColumn": 129,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBYO_CRYPTO=ON\n\n  # Test downstream repos.\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBYO_CRYPTO=ON\n\n  # Test downstream repos.\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBYO_CRYPTO=ON\n\n  # Test downstream repos.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 16,
                  "endLine": 91,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBYO_CRYPTO=ON\n\n  # Test downstream repos.\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBYO_CRYPTO=ON\n\n  # Test downstream repos.\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBYO_CRYPTO=ON\n\n  # Test downstream repos.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 122,
                  "endLine": 82,
                  "endColumn": 129,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  byo-crypto:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  byo-crypto:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  byo-crypto:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 16,
                  "endLine": 82,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  byo-crypto:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  byo-crypto:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  byo-crypto:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 122,
                  "endLine": 73,
                  "endColumn": 129,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\"\n\n  linux-shared-libs:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\"\n\n  linux-shared-libs:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\"\n\n  linux-shared-libs:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 16,
                  "endLine": 73,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\"\n\n  linux-shared-libs:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\"\n\n  linux-shared-libs:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\"\n\n  linux-shared-libs:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 122,
                  "endLine": 61,
                  "endColumn": 129,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }}\n\n  clang-sanitizers:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }}\n\n  clang-sanitizers:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }}\n\n  clang-sanitizers:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 16,
                  "endLine": 61,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }}\n\n  clang-sanitizers:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }}\n\n  clang-sanitizers:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }}\n\n  clang-sanitizers:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 120,
                  "endLine": 38,
                  "endColumn": 127,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-compiler-compat:\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-compiler-compat:\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-compiler-compat:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 14,
                  "endLine": 38,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-compiler-compat:\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-compiler-compat:\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-compiler-compat:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/h2_decoder.c"
                },
                "region": {
                  "startLine": 1517,
                  "startColumn": 76,
                  "endLine": 1517,
                  "endColumn": 80,
                  "snippet": {
                    "text": "        if (decoder->frame_in_progress.flags.end_headers) {\n            /* Reached end of the frame's payload, and this frame ends the header-block.\n             * Error if we ended up with a partially decoded entry. */\n            DECODER_LOG(ERROR, decoder, \"Compression error: incomplete entry at end of header-block\");\n            return aws_h2err_from_h2_code(AWS_HTTP2_ERR_COMPRESSION_ERROR);\n        }\n\n",
                    "rendered": {
                      "text": "        if (decoder->frame_in_progress.flags.end_headers) {\n            /* Reached end of the frame's payload, and this frame ends the header-block.\n             * Error if we ended up with a partially decoded entry. */\n            DECODER_LOG(ERROR, decoder, \"Compression error: incomplete entry at end of header-block\");\n            return aws_h2err_from_h2_code(AWS_HTTP2_ERR_COMPRESSION_ERROR);\n        }\n\n",
                      "markdown": "`        if (decoder->frame_in_progress.flags.end_headers) {\n            /* Reached end of the frame's payload, and this frame ends the header-block.\n             * Error if we ended up with a partially decoded entry. */\n            DECODER_LOG(ERROR, decoder, \"Compression error: incomplete entry at end of header-block\");\n            return aws_h2err_from_h2_code(AWS_HTTP2_ERR_COMPRESSION_ERROR);\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/http.c"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 86,
                  "endLine": 48,
                  "endColumn": 92,
                  "snippet": {
                    "text": "        \"Given the provided headers (ex: Content-Length), a body is expected.\"),\n    AWS_DEFINE_ERROR_INFO_HTTP(\n        AWS_ERROR_HTTP_INVALID_BODY_STREAM,\n        \"A body stream provided, but the message does not allow body (ex: response for HEAD Request and 304 response)\"),\n    AWS_DEFINE_ERROR_INFO_HTTP(\n        AWS_ERROR_HTTP_CONNECTION_CLOSED,\n        \"The connection has closed or is closing.\"),\n",
                    "rendered": {
                      "text": "        \"Given the provided headers (ex: Content-Length), a body is expected.\"),\n    AWS_DEFINE_ERROR_INFO_HTTP(\n        AWS_ERROR_HTTP_INVALID_BODY_STREAM,\n        \"A body stream provided, but the message does not allow body (ex: response for HEAD Request and 304 response)\"),\n    AWS_DEFINE_ERROR_INFO_HTTP(\n        AWS_ERROR_HTTP_CONNECTION_CLOSED,\n        \"The connection has closed or is closing.\"),\n",
                      "markdown": "`        \"Given the provided headers (ex: Content-Length), a body is expected.\"),\n    AWS_DEFINE_ERROR_INFO_HTTP(\n        AWS_ERROR_HTTP_INVALID_BODY_STREAM,\n        \"A body stream provided, but the message does not allow body (ex: response for HEAD Request and 304 response)\"),\n    AWS_DEFINE_ERROR_INFO_HTTP(\n        AWS_ERROR_HTTP_CONNECTION_CLOSED,\n        \"The connection has closed or is closing.\"),\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/h2_stream.c"
                },
                "region": {
                  "startLine": 1182,
                  "startColumn": 34,
                  "endLine": 1182,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    if (aws_h2err_failed(stream_err)) {\n        /* We MUST NOT allow a flow-control window to exceed the max */\n        AWS_H2_STREAM_LOG(\n            ERROR, stream, \"Window update frame causes the stream flow-control window to exceed the maximum size\");\n        return s_send_rst_and_close_stream(stream, stream_err);\n    }\n    if (stream->thread_data.window_size_peer > AWS_H2_MIN_WINDOW_SIZE && old_window_size <= AWS_H2_MIN_WINDOW_SIZE) {\n",
                    "rendered": {
                      "text": "    if (aws_h2err_failed(stream_err)) {\n        /* We MUST NOT allow a flow-control window to exceed the max */\n        AWS_H2_STREAM_LOG(\n            ERROR, stream, \"Window update frame causes the stream flow-control window to exceed the maximum size\");\n        return s_send_rst_and_close_stream(stream, stream_err);\n    }\n    if (stream->thread_data.window_size_peer > AWS_H2_MIN_WINDOW_SIZE && old_window_size <= AWS_H2_MIN_WINDOW_SIZE) {\n",
                      "markdown": "`    if (aws_h2err_failed(stream_err)) {\n        /* We MUST NOT allow a flow-control window to exceed the max */\n        AWS_H2_STREAM_LOG(\n            ERROR, stream, \"Window update frame causes the stream flow-control window to exceed the maximum size\");\n        return s_send_rst_and_close_stream(stream, stream_err);\n    }\n    if (stream->thread_data.window_size_peer > AWS_H2_MIN_WINDOW_SIZE && old_window_size <= AWS_H2_MIN_WINDOW_SIZE) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/h2_stream.c"
                },
                "region": {
                  "startLine": 1174,
                  "startColumn": 48,
                  "endLine": 1174,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    }\n    if (window_size_increment == 0) {\n        /* flow-control window increment of 0 MUST be treated as error (RFC7540 6.9.1) */\n        AWS_H2_STREAM_LOG(ERROR, stream, \"Window update frame with 0 increment size\");\n        return s_send_rst_and_close_stream(stream, aws_h2err_from_h2_code(AWS_HTTP2_ERR_PROTOCOL_ERROR));\n    }\n    int32_t old_window_size = stream->thread_data.window_size_peer;\n",
                    "rendered": {
                      "text": "    }\n    if (window_size_increment == 0) {\n        /* flow-control window increment of 0 MUST be treated as error (RFC7540 6.9.1) */\n        AWS_H2_STREAM_LOG(ERROR, stream, \"Window update frame with 0 increment size\");\n        return s_send_rst_and_close_stream(stream, aws_h2err_from_h2_code(AWS_HTTP2_ERR_PROTOCOL_ERROR));\n    }\n    int32_t old_window_size = stream->thread_data.window_size_peer;\n",
                      "markdown": "`    }\n    if (window_size_increment == 0) {\n        /* flow-control window increment of 0 MUST be treated as error (RFC7540 6.9.1) */\n        AWS_H2_STREAM_LOG(ERROR, stream, \"Window update frame with 0 increment size\");\n        return s_send_rst_and_close_stream(stream, aws_h2err_from_h2_code(AWS_HTTP2_ERR_PROTOCOL_ERROR));\n    }\n    int32_t old_window_size = stream->thread_data.window_size_peer;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/h2_stream.c"
                },
                "region": {
                  "startLine": 515,
                  "startColumn": 19,
                  "endLine": 515,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        AWS_H2_STREAM_LOG(\n            ERROR,\n            stream,\n            \"Stream update window failed. Stream is in initialized state, please activate the stream first.\");\n        aws_raise_error(AWS_ERROR_INVALID_STATE);\n        return;\n    }\n",
                    "rendered": {
                      "text": "        AWS_H2_STREAM_LOG(\n            ERROR,\n            stream,\n            \"Stream update window failed. Stream is in initialized state, please activate the stream first.\");\n        aws_raise_error(AWS_ERROR_INVALID_STATE);\n        return;\n    }\n",
                      "markdown": "`        AWS_H2_STREAM_LOG(\n            ERROR,\n            stream,\n            \"Stream update window failed. Stream is in initialized state, please activate the stream first.\");\n        aws_raise_error(AWS_ERROR_INVALID_STATE);\n        return;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/h2_stream.c"
                },
                "region": {
                  "startLine": 480,
                  "startColumn": 60,
                  "endLine": 480,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    if (!connection->base.stream_manual_window_management) {\n        /* auto-mode, manual update window is not supported */\n        AWS_H2_STREAM_LOG(\n            DEBUG, stream, \"Manual window management is off, update window operations are not supported.\");\n        return;\n    }\n\n",
                    "rendered": {
                      "text": "    if (!connection->base.stream_manual_window_management) {\n        /* auto-mode, manual update window is not supported */\n        AWS_H2_STREAM_LOG(\n            DEBUG, stream, \"Manual window management is off, update window operations are not supported.\");\n        return;\n    }\n\n",
                      "markdown": "`    if (!connection->base.stream_manual_window_management) {\n        /* auto-mode, manual update window is not supported */\n        AWS_H2_STREAM_LOG(\n            DEBUG, stream, \"Manual window management is off, update window operations are not supported.\");\n        return;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/hpack_encoder.c"
                },
                "region": {
                  "startLine": 399,
                  "startColumn": 71,
                  "endLine": 399,
                  "endColumn": 79,
                  "snippet": {
                    "text": "        uint8_t num_prefix_bits = s_hpack_entry_num_prefix_bits[AWS_HPACK_ENTRY_DYNAMIC_TABLE_RESIZE];\n        if (aws_hpack_encode_integer(last_update_value, starting_bit_pattern, num_prefix_bits, output)) {\n            HPACK_LOGF(\n                ERROR, encoder, \"Integer encoding failed for table size update entry, integer: %zu\", last_update_value);\n            return AWS_OP_ERR;\n        }\n\n",
                    "rendered": {
                      "text": "        uint8_t num_prefix_bits = s_hpack_entry_num_prefix_bits[AWS_HPACK_ENTRY_DYNAMIC_TABLE_RESIZE];\n        if (aws_hpack_encode_integer(last_update_value, starting_bit_pattern, num_prefix_bits, output)) {\n            HPACK_LOGF(\n                ERROR, encoder, \"Integer encoding failed for table size update entry, integer: %zu\", last_update_value);\n            return AWS_OP_ERR;\n        }\n\n",
                      "markdown": "`        uint8_t num_prefix_bits = s_hpack_entry_num_prefix_bits[AWS_HPACK_ENTRY_DYNAMIC_TABLE_RESIZE];\n        if (aws_hpack_encode_integer(last_update_value, starting_bit_pattern, num_prefix_bits, output)) {\n            HPACK_LOGF(\n                ERROR, encoder, \"Integer encoding failed for table size update entry, integer: %zu\", last_update_value);\n            return AWS_OP_ERR;\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/hpack_encoder.c"
                },
                "region": {
                  "startLine": 390,
                  "startColumn": 68,
                  "endLine": 390,
                  "endColumn": 76,
                  "snippet": {
                    "text": "            }\n        }\n        size_t last_update_value = encoder->dynamic_table_size_update.latest_value;\n        HPACK_LOGF(TRACE, encoder, \"Encoding last dynamic table size update entry size: %zu\", last_update_value);\n        if (aws_hpack_resize_dynamic_table(&encoder->context, last_update_value)) {\n            HPACK_LOGF(ERROR, encoder, \"Dynamic table resize failed, size: %zu\", last_update_value);\n            return AWS_OP_ERR;\n",
                    "rendered": {
                      "text": "            }\n        }\n        size_t last_update_value = encoder->dynamic_table_size_update.latest_value;\n        HPACK_LOGF(TRACE, encoder, \"Encoding last dynamic table size update entry size: %zu\", last_update_value);\n        if (aws_hpack_resize_dynamic_table(&encoder->context, last_update_value)) {\n            HPACK_LOGF(ERROR, encoder, \"Dynamic table resize failed, size: %zu\", last_update_value);\n            return AWS_OP_ERR;\n",
                      "markdown": "`            }\n        }\n        size_t last_update_value = encoder->dynamic_table_size_update.latest_value;\n        HPACK_LOGF(TRACE, encoder, \"Encoding last dynamic table size update entry size: %zu\", last_update_value);\n        if (aws_hpack_resize_dynamic_table(&encoder->context, last_update_value)) {\n            HPACK_LOGF(ERROR, encoder, \"Dynamic table resize failed, size: %zu\", last_update_value);\n            return AWS_OP_ERR;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/hpack_encoder.c"
                },
                "region": {
                  "startLine": 384,
                  "startColumn": 59,
                  "endLine": 384,
                  "endColumn": 67,
                  "snippet": {
                    "text": "                HPACK_LOGF(\n                    ERROR,\n                    encoder,\n                    \"Integer encoding failed for table size update entry, integer: %zu\",\n                    smallest_update_value);\n                return AWS_OP_ERR;\n            }\n",
                    "rendered": {
                      "text": "                HPACK_LOGF(\n                    ERROR,\n                    encoder,\n                    \"Integer encoding failed for table size update entry, integer: %zu\",\n                    smallest_update_value);\n                return AWS_OP_ERR;\n            }\n",
                      "markdown": "`                HPACK_LOGF(\n                    ERROR,\n                    encoder,\n                    \"Integer encoding failed for table size update entry, integer: %zu\",\n                    smallest_update_value);\n                return AWS_OP_ERR;\n            }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/hpack_encoder.c"
                },
                "region": {
                  "startLine": 373,
                  "startColumn": 69,
                  "endLine": 373,
                  "endColumn": 77,
                  "snippet": {
                    "text": "        if (encoder->dynamic_table_size_update.smallest_value != encoder->dynamic_table_size_update.latest_value) {\n            size_t smallest_update_value = encoder->dynamic_table_size_update.smallest_value;\n            HPACK_LOGF(\n                TRACE, encoder, \"Encoding smallest dynamic table size update entry size: %zu\", smallest_update_value);\n            if (aws_hpack_resize_dynamic_table(&encoder->context, smallest_update_value)) {\n                HPACK_LOGF(ERROR, encoder, \"Dynamic table resize failed, size: %zu\", smallest_update_value);\n                return AWS_OP_ERR;\n",
                    "rendered": {
                      "text": "        if (encoder->dynamic_table_size_update.smallest_value != encoder->dynamic_table_size_update.latest_value) {\n            size_t smallest_update_value = encoder->dynamic_table_size_update.smallest_value;\n            HPACK_LOGF(\n                TRACE, encoder, \"Encoding smallest dynamic table size update entry size: %zu\", smallest_update_value);\n            if (aws_hpack_resize_dynamic_table(&encoder->context, smallest_update_value)) {\n                HPACK_LOGF(ERROR, encoder, \"Dynamic table resize failed, size: %zu\", smallest_update_value);\n                return AWS_OP_ERR;\n",
                      "markdown": "`        if (encoder->dynamic_table_size_update.smallest_value != encoder->dynamic_table_size_update.latest_value) {\n            size_t smallest_update_value = encoder->dynamic_table_size_update.smallest_value;\n            HPACK_LOGF(\n                TRACE, encoder, \"Encoding smallest dynamic table size update entry size: %zu\", smallest_update_value);\n            if (aws_hpack_resize_dynamic_table(&encoder->context, smallest_update_value)) {\n                HPACK_LOGF(ERROR, encoder, \"Dynamic table resize failed, size: %zu\", smallest_update_value);\n                return AWS_OP_ERR;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_websocket_handler.c"
                },
                "region": {
                  "startLine": 731,
                  "startColumn": 58,
                  "endLine": 731,
                  "endColumn": 62,
                  "snippet": {
                    "text": "                },\n        },\n        {\n            .payload = aws_byte_cursor_from_c_str(\"Rapping at the window, crying through the lock.\"),\n            .def =\n                {\n                    .opcode = AWS_WEBSOCKET_OPCODE_CONTINUATION,\n",
                    "rendered": {
                      "text": "                },\n        },\n        {\n            .payload = aws_byte_cursor_from_c_str(\"Rapping at the window, crying through the lock.\"),\n            .def =\n                {\n                    .opcode = AWS_WEBSOCKET_OPCODE_CONTINUATION,\n",
                      "markdown": "`                },\n        },\n        {\n            .payload = aws_byte_cursor_from_c_str(\"Rapping at the window, crying through the lock.\"),\n            .def =\n                {\n                    .opcode = AWS_WEBSOCKET_OPCODE_CONTINUATION,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_websocket_handler.c"
                },
                "region": {
                  "startLine": 675,
                  "startColumn": 45,
                  "endLine": 675,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    struct tester tester;\n    ASSERT_SUCCESS(s_tester_init(&tester, allocator));\n\n    const char *payload = \"Shall I come in to cut off your threads?\";\n\n    struct send_tester send = {\n        .payload = aws_byte_cursor_from_c_str(payload),\n",
                    "rendered": {
                      "text": "    struct tester tester;\n    ASSERT_SUCCESS(s_tester_init(&tester, allocator));\n\n    const char *payload = \"Shall I come in to cut off your threads?\";\n\n    struct send_tester send = {\n        .payload = aws_byte_cursor_from_c_str(payload),\n",
                      "markdown": "`    struct tester tester;\n    ASSERT_SUCCESS(s_tester_init(&tester, allocator));\n\n    const char *payload = \"Shall I come in to cut off your threads?\";\n\n    struct send_tester send = {\n        .payload = aws_byte_cursor_from_c_str(payload),\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_localhost_integ.c"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 77,
                  "endLine": 103,
                  "endColumn": 85,
                  "snippet": {
                    "text": "    }\n\nenum {\n    TESTER_TIMEOUT_SEC = 60, /* Give enough time for non-sudo users to enter password */\n};\n\nstatic void s_on_connection_setup(struct aws_http_connection *connection, int error_code, void *user_data) {\n",
                    "rendered": {
                      "text": "    }\n\nenum {\n    TESTER_TIMEOUT_SEC = 60, /* Give enough time for non-sudo users to enter password */\n};\n\nstatic void s_on_connection_setup(struct aws_http_connection *connection, int error_code, void *user_data) {\n",
                      "markdown": "`    }\n\nenum {\n    TESTER_TIMEOUT_SEC = 60, /* Give enough time for non-sudo users to enter password */\n};\n\nstatic void s_on_connection_setup(struct aws_http_connection *connection, int error_code, void *user_data) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_proxy.c"
                },
                "region": {
                  "startLine": 620,
                  "startColumn": 76,
                  "endLine": 620,
                  "endColumn": 84,
                  "snippet": {
                    "text": "        .failure_type = PTFT_NONE,\n        .auth_type = AWS_HPAT_BASIC,\n        .legacy_basic_username = aws_byte_cursor_from_string(s_mock_request_username),\n        .legacy_basic_password = aws_byte_cursor_from_string(s_mock_request_password),\n    };\n\n    ASSERT_SUCCESS(\n",
                    "rendered": {
                      "text": "        .failure_type = PTFT_NONE,\n        .auth_type = AWS_HPAT_BASIC,\n        .legacy_basic_username = aws_byte_cursor_from_string(s_mock_request_username),\n        .legacy_basic_password = aws_byte_cursor_from_string(s_mock_request_password),\n    };\n\n    ASSERT_SUCCESS(\n",
                      "markdown": "`        .failure_type = PTFT_NONE,\n        .auth_type = AWS_HPAT_BASIC,\n        .legacy_basic_username = aws_byte_cursor_from_string(s_mock_request_username),\n        .legacy_basic_password = aws_byte_cursor_from_string(s_mock_request_password),\n    };\n\n    ASSERT_SUCCESS(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_proxy.c"
                },
                "region": {
                  "startLine": 620,
                  "startColumn": 22,
                  "endLine": 620,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        .failure_type = PTFT_NONE,\n        .auth_type = AWS_HPAT_BASIC,\n        .legacy_basic_username = aws_byte_cursor_from_string(s_mock_request_username),\n        .legacy_basic_password = aws_byte_cursor_from_string(s_mock_request_password),\n    };\n\n    ASSERT_SUCCESS(\n",
                    "rendered": {
                      "text": "        .failure_type = PTFT_NONE,\n        .auth_type = AWS_HPAT_BASIC,\n        .legacy_basic_username = aws_byte_cursor_from_string(s_mock_request_username),\n        .legacy_basic_password = aws_byte_cursor_from_string(s_mock_request_password),\n    };\n\n    ASSERT_SUCCESS(\n",
                      "markdown": "`        .failure_type = PTFT_NONE,\n        .auth_type = AWS_HPAT_BASIC,\n        .legacy_basic_username = aws_byte_cursor_from_string(s_mock_request_username),\n        .legacy_basic_password = aws_byte_cursor_from_string(s_mock_request_password),\n    };\n\n    ASSERT_SUCCESS(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_proxy.c"
                },
                "region": {
                  "startLine": 588,
                  "startColumn": 63,
                  "endLine": 588,
                  "endColumn": 71,
                  "snippet": {
                    "text": "    struct aws_http_proxy_strategy_basic_auth_options config = {\n        .proxy_connection_type = AWS_HPCT_HTTP_FORWARD,\n        .user_name = aws_byte_cursor_from_string(s_mock_request_username),\n        .password = aws_byte_cursor_from_string(s_mock_request_password),\n    };\n\n    struct aws_http_proxy_strategy *proxy_strategy = aws_http_proxy_strategy_new_basic_auth(allocator, &config);\n",
                    "rendered": {
                      "text": "    struct aws_http_proxy_strategy_basic_auth_options config = {\n        .proxy_connection_type = AWS_HPCT_HTTP_FORWARD,\n        .user_name = aws_byte_cursor_from_string(s_mock_request_username),\n        .password = aws_byte_cursor_from_string(s_mock_request_password),\n    };\n\n    struct aws_http_proxy_strategy *proxy_strategy = aws_http_proxy_strategy_new_basic_auth(allocator, &config);\n",
                      "markdown": "`    struct aws_http_proxy_strategy_basic_auth_options config = {\n        .proxy_connection_type = AWS_HPCT_HTTP_FORWARD,\n        .user_name = aws_byte_cursor_from_string(s_mock_request_username),\n        .password = aws_byte_cursor_from_string(s_mock_request_password),\n    };\n\n    struct aws_http_proxy_strategy *proxy_strategy = aws_http_proxy_strategy_new_basic_auth(allocator, &config);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_proxy.c"
                },
                "region": {
                  "startLine": 588,
                  "startColumn": 9,
                  "endLine": 588,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    struct aws_http_proxy_strategy_basic_auth_options config = {\n        .proxy_connection_type = AWS_HPCT_HTTP_FORWARD,\n        .user_name = aws_byte_cursor_from_string(s_mock_request_username),\n        .password = aws_byte_cursor_from_string(s_mock_request_password),\n    };\n\n    struct aws_http_proxy_strategy *proxy_strategy = aws_http_proxy_strategy_new_basic_auth(allocator, &config);\n",
                    "rendered": {
                      "text": "    struct aws_http_proxy_strategy_basic_auth_options config = {\n        .proxy_connection_type = AWS_HPCT_HTTP_FORWARD,\n        .user_name = aws_byte_cursor_from_string(s_mock_request_username),\n        .password = aws_byte_cursor_from_string(s_mock_request_password),\n    };\n\n    struct aws_http_proxy_strategy *proxy_strategy = aws_http_proxy_strategy_new_basic_auth(allocator, &config);\n",
                      "markdown": "`    struct aws_http_proxy_strategy_basic_auth_options config = {\n        .proxy_connection_type = AWS_HPCT_HTTP_FORWARD,\n        .user_name = aws_byte_cursor_from_string(s_mock_request_username),\n        .password = aws_byte_cursor_from_string(s_mock_request_password),\n    };\n\n    struct aws_http_proxy_strategy *proxy_strategy = aws_http_proxy_strategy_new_basic_auth(allocator, &config);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_proxy.c"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 46,
                  "endLine": 242,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        .proxy_strategy = config->proxy_strategy,\n        .auth_type = config->auth_type,\n        .auth_username = config->legacy_basic_username,\n        .auth_password = config->legacy_basic_password,\n    };\n\n    struct proxy_tester_options options = {\n",
                    "rendered": {
                      "text": "        .proxy_strategy = config->proxy_strategy,\n        .auth_type = config->auth_type,\n        .auth_username = config->legacy_basic_username,\n        .auth_password = config->legacy_basic_password,\n    };\n\n    struct proxy_tester_options options = {\n",
                      "markdown": "`        .proxy_strategy = config->proxy_strategy,\n        .auth_type = config->auth_type,\n        .auth_username = config->legacy_basic_username,\n        .auth_password = config->legacy_basic_password,\n    };\n\n    struct proxy_tester_options options = {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_proxy.c"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 14,
                  "endLine": 242,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        .proxy_strategy = config->proxy_strategy,\n        .auth_type = config->auth_type,\n        .auth_username = config->legacy_basic_username,\n        .auth_password = config->legacy_basic_password,\n    };\n\n    struct proxy_tester_options options = {\n",
                    "rendered": {
                      "text": "        .proxy_strategy = config->proxy_strategy,\n        .auth_type = config->auth_type,\n        .auth_username = config->legacy_basic_username,\n        .auth_password = config->legacy_basic_password,\n    };\n\n    struct proxy_tester_options options = {\n",
                      "markdown": "`        .proxy_strategy = config->proxy_strategy,\n        .auth_type = config->auth_type,\n        .auth_username = config->legacy_basic_username,\n        .auth_password = config->legacy_basic_password,\n    };\n\n    struct proxy_tester_options options = {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_proxy.c"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 40,
                  "endLine": 221,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n    enum aws_http_proxy_authentication_type auth_type;\n    struct aws_byte_cursor legacy_basic_username;\n    struct aws_byte_cursor legacy_basic_password;\n\n    uint32_t mocked_response_count;\n    struct aws_byte_cursor *mocked_responses;\n",
                    "rendered": {
                      "text": "\n    enum aws_http_proxy_authentication_type auth_type;\n    struct aws_byte_cursor legacy_basic_username;\n    struct aws_byte_cursor legacy_basic_password;\n\n    uint32_t mocked_response_count;\n    struct aws_byte_cursor *mocked_responses;\n",
                      "markdown": "`\n    enum aws_http_proxy_authentication_type auth_type;\n    struct aws_byte_cursor legacy_basic_username;\n    struct aws_byte_cursor legacy_basic_password;\n\n    uint32_t mocked_response_count;\n    struct aws_byte_cursor *mocked_responses;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_proxy.c"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 46,
                  "endLine": 35,
                  "endColumn": 54,
                  "snippet": {
                    "text": "AWS_STATIC_STRING_FROM_LITERAL(s_expected_basic_auth_header_name, \"Proxy-Authorization\");\nAWS_STATIC_STRING_FROM_LITERAL(s_expected_basic_auth_header_value, \"Basic U29tZVVzZXI6U3VwZXJTZWNyZXQ=\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mock_request_username, \"SomeUser\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mock_request_password, \"SuperSecret\");\n\n/*\n * Request utility functions\n",
                    "rendered": {
                      "text": "AWS_STATIC_STRING_FROM_LITERAL(s_expected_basic_auth_header_name, \"Proxy-Authorization\");\nAWS_STATIC_STRING_FROM_LITERAL(s_expected_basic_auth_header_value, \"Basic U29tZVVzZXI6U3VwZXJTZWNyZXQ=\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mock_request_username, \"SomeUser\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mock_request_password, \"SuperSecret\");\n\n/*\n * Request utility functions\n",
                      "markdown": "`AWS_STATIC_STRING_FROM_LITERAL(s_expected_basic_auth_header_name, \"Proxy-Authorization\");\nAWS_STATIC_STRING_FROM_LITERAL(s_expected_basic_auth_header_value, \"Basic U29tZVVzZXI6U3VwZXJTZWNyZXQ=\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mock_request_username, \"SomeUser\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mock_request_password, \"SuperSecret\");\n\n/*\n * Request utility functions\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/bin/elasticurl/main.c"
                },
                "region": {
                  "startLine": 313,
                  "startColumn": 26,
                  "endLine": 313,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                &ctx->signing_library, ctx->signing_function_name, (aws_generic_function *)&ctx->signing_function)) {\n            fprintf(\n                stderr,\n                \"Unable to find function %s in signing library %s\",\n                ctx->signing_function_name,\n                ctx->signing_library_path);\n            s_usage(1);\n",
                    "rendered": {
                      "text": "                &ctx->signing_library, ctx->signing_function_name, (aws_generic_function *)&ctx->signing_function)) {\n            fprintf(\n                stderr,\n                \"Unable to find function %s in signing library %s\",\n                ctx->signing_function_name,\n                ctx->signing_library_path);\n            s_usage(1);\n",
                      "markdown": "`                &ctx->signing_library, ctx->signing_function_name, (aws_generic_function *)&ctx->signing_function)) {\n            fprintf(\n                stderr,\n                \"Unable to find function %s in signing library %s\",\n                ctx->signing_function_name,\n                ctx->signing_library_path);\n            s_usage(1);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/bin/elasticurl/main.c"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 39,
                  "endLine": 85,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    fprintf(stderr, \"  -M, --method STRING: Http Method verb to use for the request\\n\");\n    fprintf(stderr, \"  -G, --get: uses GET for the verb.\\n\");\n    fprintf(stderr, \"  -P, --post: uses POST for the verb.\\n\");\n    fprintf(stderr, \"  -I, --head: uses HEAD for the verb.\\n\");\n    fprintf(stderr, \"  -i, --include: includes headers in output.\\n\");\n    fprintf(stderr, \"  -k, --insecure: turns off SSL/TLS validation.\\n\");\n    fprintf(stderr, \"      --signing-lib: path to a shared library with an exported signing function to use\\n\");\n",
                    "rendered": {
                      "text": "    fprintf(stderr, \"  -M, --method STRING: Http Method verb to use for the request\\n\");\n    fprintf(stderr, \"  -G, --get: uses GET for the verb.\\n\");\n    fprintf(stderr, \"  -P, --post: uses POST for the verb.\\n\");\n    fprintf(stderr, \"  -I, --head: uses HEAD for the verb.\\n\");\n    fprintf(stderr, \"  -i, --include: includes headers in output.\\n\");\n    fprintf(stderr, \"  -k, --insecure: turns off SSL/TLS validation.\\n\");\n    fprintf(stderr, \"      --signing-lib: path to a shared library with an exported signing function to use\\n\");\n",
                      "markdown": "`    fprintf(stderr, \"  -M, --method STRING: Http Method verb to use for the request\\n\");\n    fprintf(stderr, \"  -G, --get: uses GET for the verb.\\n\");\n    fprintf(stderr, \"  -P, --post: uses POST for the verb.\\n\");\n    fprintf(stderr, \"  -I, --head: uses HEAD for the verb.\\n\");\n    fprintf(stderr, \"  -i, --include: includes headers in output.\\n\");\n    fprintf(stderr, \"  -k, --insecure: turns off SSL/TLS validation.\\n\");\n    fprintf(stderr, \"      --signing-lib: path to a shared library with an exported signing function to use\\n\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/bin/elasticurl/main.c"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 49,
                  "endLine": 78,
                  "endColumn": 55,
                  "snippet": {
                    "text": "apath PATH: path to a directory containing CA files.\\n\");\n    fprintf(stderr, \"      --cert FILE: path to a PEM encoded certificate to use with mTLS\\n\");\n    fprintf(stderr, \"      --key FILE: Path to a PEM encoded private key that matches cert.\\n\");\n    fprintf(stderr, \"      --connect-timeout INT: time in milliseconds to wait for a connection.\\n\");\n    fprintf(stderr, \"  -H, --header LINE: line to send as a header in format [header-key]: [header-value]\\n\");\n    fprintf(stderr, \"  -d, --data STRING: Data to POST or PUT\\n\");\n    fprintf(stderr, \"      --data-file FILE: File to read from file and POS",
                    "rendered": {
                      "text": "apath PATH: path to a directory containing CA files.\\n\");\n    fprintf(stderr, \"      --cert FILE: path to a PEM encoded certificate to use with mTLS\\n\");\n    fprintf(stderr, \"      --key FILE: Path to a PEM encoded private key that matches cert.\\n\");\n    fprintf(stderr, \"      --connect-timeout INT: time in milliseconds to wait for a connection.\\n\");\n    fprintf(stderr, \"  -H, --header LINE: line to send as a header in format [header-key]: [header-value]\\n\");\n    fprintf(stderr, \"  -d, --data STRING: Data to POST or PUT\\n\");\n    fprintf(stderr, \"      --data-file FILE: File to read from file and POS",
                      "markdown": "`apath PATH: path to a directory containing CA files.\\n\");\n    fprintf(stderr, \"      --cert FILE: path to a PEM encoded certificate to use with mTLS\\n\");\n    fprintf(stderr, \"      --key FILE: Path to a PEM encoded private key that matches cert.\\n\");\n    fprintf(stderr, \"      --connect-timeout INT: time in milliseconds to wait for a connection.\\n\");\n    fprintf(stderr, \"  -H, --header LINE: line to send as a header in format [header-key]: [header-value]\\n\");\n    fprintf(stderr, \"  -d, --data STRING: Data to POST or PUT\\n\");\n    fprintf(stderr, \"      --data-file FILE: File to read from file and POS`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/bin/elasticurl/README.md"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 10,
                  "snippet": {
                    "text": "##### -P, --post\nUses POST as the method for the http request.\n##### -I, --head\nUses HEAD as the method for the http request.\n##### -i, --include\nIncludes the response headers in the output to stdout.\n##### -k, --insecure\n",
                    "rendered": {
                      "text": "##### -P, --post\nUses POST as the method for the http request.\n##### -I, --head\nUses HEAD as the method for the http request.\n##### -i, --include\nIncludes the response headers in the output to stdout.\n##### -k, --insecure\n",
                      "markdown": "`##### -P, --post\nUses POST as the method for the http request.\n##### -I, --head\nUses HEAD as the method for the http request.\n##### -i, --include\nIncludes the response headers in the output to stdout.\n##### -k, --insecure\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/bin/elasticurl/README.md"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 9,
                  "endLine": 35,
                  "endColumn": 15,
                  "snippet": {
                    "text": "Key corresponding to `--cert`. Usually this is a path to a PEM armored PKCS#7 file, if using a certificate manager\nregistry path for `--cert`, this should be empty.\n##### --connect-timeout\nAmount of time to wait for a connection. The default value is 3000 (3 seconds). This value is specified in milliseconds.\n##### -H, --header\nLine to send as a header in format `[header-key]: [header-value]`. This option can be specified multiple times. The max\nnumber of supported values is currently 10.\n",
                    "rendered": {
                      "text": "Key corresponding to `--cert`. Usually this is a path to a PEM armored PKCS#7 file, if using a certificate manager\nregistry path for `--cert`, this should be empty.\n##### --connect-timeout\nAmount of time to wait for a connection. The default value is 3000 (3 seconds). This value is specified in milliseconds.\n##### -H, --header\nLine to send as a header in format `[header-key]: [header-value]`. This option can be specified multiple times. The max\nnumber of supported values is currently 10.\n",
                      "markdown": "`Key corresponding to `--cert`. Usually this is a path to a PEM armored PKCS#7 file, if using a certificate manager\nregistry path for `--cert`, this should be empty.\n##### --connect-timeout\nAmount of time to wait for a connection. The default value is 3000 (3 seconds). This value is specified in milliseconds.\n##### -H, --header\nLine to send as a header in format `[header-key]: [header-value]`. This option can be specified multiple times. The max\nnumber of supported values is currently 10.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/README.md"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 52,
                  "endLine": 59,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\nTo run some of the integration tests (start with localhost_integ_*), you need to set up a localhost that echo the request headers from `/echo` back first.\n\nTo do that, check [localhost](./tests/py_localhost/) script we have.\n\nAfter that, configure and build your cmake project with `-DENABLE_LOCALHOST_INTEGRATION_TESTS=true` to build the tests with localhost and run them from `ctest --output-on-failure -R localhost_integ_*`.\n",
                    "rendered": {
                      "text": "\nTo run some of the integration tests (start with localhost_integ_*), you need to set up a localhost that echo the request headers from `/echo` back first.\n\nTo do that, check [localhost](./tests/py_localhost/) script we have.\n\nAfter that, configure and build your cmake project with `-DENABLE_LOCALHOST_INTEGRATION_TESTS=true` to build the tests with localhost and run them from `ctest --output-on-failure -R localhost_integ_*`.\n",
                      "markdown": "`\nTo run some of the integration tests (start with localhost_integ_*), you need to set up a localhost that echo the request headers from `/echo` back first.\n\nTo do that, check [localhost](./tests/py_localhost/) script we have.\n\nAfter that, configure and build your cmake project with `-DENABLE_LOCALHOST_INTEGRATION_TESTS=true` to build the tests with localhost and run them from `ctest --output-on-failure -R localhost_integ_*`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/README.md"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 50,
                  "endColumn": 4,
                  "snippet": {
                    "text": "git clone git@github.com:awslabs/aws-c-compression.git\ncmake -S aws-c-compression -B aws-c-compression/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-compression/build --target install\n\ngit clone git@github.com:awslabs/aws-c-http.git\ncmake -S aws-c-http -B aws-c-http/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-http/build --target install\n```\n",
                    "rendered": {
                      "text": "git clone git@github.com:awslabs/aws-c-compression.git\ncmake -S aws-c-compression -B aws-c-compression/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-compression/build --target install\n\ngit clone git@github.com:awslabs/aws-c-http.git\ncmake -S aws-c-http -B aws-c-http/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-http/build --target install\n```\n",
                      "markdown": "`git clone git@github.com:awslabs/aws-c-compression.git\ncmake -S aws-c-compression -B aws-c-compression/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-compression/build --target install\n\ngit clone git@github.com:awslabs/aws-c-http.git\ncmake -S aws-c-http -B aws-c-http/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-http/build --target install\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/README.md"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 46,
                  "endColumn": 4,
                  "snippet": {
                    "text": "git clone git@github.com:awslabs/aws-c-io.git\ncmake -S aws-c-io -B aws-c-io/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-io/build --target install\n\ngit clone git@github.com:awslabs/aws-c-compression.git\ncmake -S aws-c-compression -B aws-c-compression/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-compression/build --target install\n\n",
                    "rendered": {
                      "text": "git clone git@github.com:awslabs/aws-c-io.git\ncmake -S aws-c-io -B aws-c-io/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-io/build --target install\n\ngit clone git@github.com:awslabs/aws-c-compression.git\ncmake -S aws-c-compression -B aws-c-compression/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-compression/build --target install\n\n",
                      "markdown": "`git clone git@github.com:awslabs/aws-c-io.git\ncmake -S aws-c-io -B aws-c-io/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-io/build --target install\n\ngit clone git@github.com:awslabs/aws-c-compression.git\ncmake -S aws-c-compression -B aws-c-compression/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-compression/build --target install\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/README.md"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 42,
                  "endColumn": 4,
                  "snippet": {
                    "text": "git clone git@github.com:awslabs/aws-c-cal.git\ncmake -S aws-c-cal -B aws-c-cal/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-cal/build --target install\n\ngit clone git@github.com:awslabs/aws-c-io.git\ncmake -S aws-c-io -B aws-c-io/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-io/build --target install\n\n",
                    "rendered": {
                      "text": "git clone git@github.com:awslabs/aws-c-cal.git\ncmake -S aws-c-cal -B aws-c-cal/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-cal/build --target install\n\ngit clone git@github.com:awslabs/aws-c-io.git\ncmake -S aws-c-io -B aws-c-io/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-io/build --target install\n\n",
                      "markdown": "`git clone git@github.com:awslabs/aws-c-cal.git\ncmake -S aws-c-cal -B aws-c-cal/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-cal/build --target install\n\ngit clone git@github.com:awslabs/aws-c-io.git\ncmake -S aws-c-io -B aws-c-io/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-io/build --target install\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/README.md"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 38,
                  "endColumn": 4,
                  "snippet": {
                    "text": "git clone git@github.com:awslabs/aws-c-common.git\ncmake -S aws-c-common -B aws-c-common/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-c-common/build --target install\n\ngit clone git@github.com:awslabs/aws-c-cal.git\ncmake -S aws-c-cal -B aws-c-cal/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-cal/build --target install\n\n",
                    "rendered": {
                      "text": "git clone git@github.com:awslabs/aws-c-common.git\ncmake -S aws-c-common -B aws-c-common/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-c-common/build --target install\n\ngit clone git@github.com:awslabs/aws-c-cal.git\ncmake -S aws-c-cal -B aws-c-cal/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-cal/build --target install\n\n",
                      "markdown": "`git clone git@github.com:awslabs/aws-c-common.git\ncmake -S aws-c-common -B aws-c-common/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-c-common/build --target install\n\ngit clone git@github.com:awslabs/aws-c-cal.git\ncmake -S aws-c-cal -B aws-c-cal/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-cal/build --target install\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/README.md"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 3,
                  "endLine": 34,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\n#### Building aws-c-http and Remaining Dependencies\n\n```\ngit clone git@github.com:awslabs/aws-c-common.git\ncmake -S aws-c-common -B aws-c-common/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-c-common/build --target install\n\n",
                    "rendered": {
                      "text": "\n#### Building aws-c-http and Remaining Dependencies\n\n```\ngit clone git@github.com:awslabs/aws-c-common.git\ncmake -S aws-c-common -B aws-c-common/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-c-common/build --target install\n\n",
                      "markdown": "`\n#### Building aws-c-http and Remaining Dependencies\n\n```\ngit clone git@github.com:awslabs/aws-c-common.git\ncmake -S aws-c-common -B aws-c-common/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-c-common/build --target install\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/README.md"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 26,
                  "endColumn": 4,
                  "snippet": {
                    "text": "git clone git@github.com:awslabs/aws-lc.git\ncmake -S aws-lc -B aws-lc/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-lc/build --target install\n\ngit clone git@github.com:aws/s2n-tls.git\ncmake -S s2n-tls -B s2n-tls/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build s2n-tls/build --target install\n```\n",
                    "rendered": {
                      "text": "git clone git@github.com:awslabs/aws-lc.git\ncmake -S aws-lc -B aws-lc/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-lc/build --target install\n\ngit clone git@github.com:aws/s2n-tls.git\ncmake -S s2n-tls -B s2n-tls/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build s2n-tls/build --target install\n```\n",
                      "markdown": "`git clone git@github.com:awslabs/aws-lc.git\ncmake -S aws-lc -B aws-lc/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-lc/build --target install\n\ngit clone git@github.com:aws/s2n-tls.git\ncmake -S s2n-tls -B s2n-tls/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build s2n-tls/build --target install\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/README.md"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 3,
                  "endLine": 22,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nIf you are building on Linux, you will need to build aws-lc and s2n-tls first.\n\n```\ngit clone git@github.com:awslabs/aws-lc.git\ncmake -S aws-lc -B aws-lc/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-lc/build --target install\n\n",
                    "rendered": {
                      "text": "\nIf you are building on Linux, you will need to build aws-lc and s2n-tls first.\n\n```\ngit clone git@github.com:awslabs/aws-lc.git\ncmake -S aws-lc -B aws-lc/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-lc/build --target install\n\n",
                      "markdown": "`\nIf you are building on Linux, you will need to build aws-lc and s2n-tls first.\n\n```\ngit clone git@github.com:awslabs/aws-lc.git\ncmake -S aws-lc -B aws-lc/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-lc/build --target install\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/proxy_strategy.c"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 29,
                  "endLine": 330,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    }\n\n    basic_auth_strategy->password = aws_string_new_from_cursor(allocator, &config->password);\n    if (basic_auth_strategy->password == NULL) {\n        goto on_error;\n    }\n\n",
                    "rendered": {
                      "text": "    }\n\n    basic_auth_strategy->password = aws_string_new_from_cursor(allocator, &config->password);\n    if (basic_auth_strategy->password == NULL) {\n        goto on_error;\n    }\n\n",
                      "markdown": "`    }\n\n    basic_auth_strategy->password = aws_string_new_from_cursor(allocator, &config->password);\n    if (basic_auth_strategy->password == NULL) {\n        goto on_error;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/proxy_strategy.c"
                },
                "region": {
                  "startLine": 329,
                  "startColumn": 83,
                  "endLine": 329,
                  "endColumn": 91,
                  "snippet": {
                    "text": "        goto on_error;\n    }\n\n    basic_auth_strategy->password = aws_string_new_from_cursor(allocator, &config->password);\n    if (basic_auth_strategy->password == NULL) {\n        goto on_error;\n    }\n",
                    "rendered": {
                      "text": "        goto on_error;\n    }\n\n    basic_auth_strategy->password = aws_string_new_from_cursor(allocator, &config->password);\n    if (basic_auth_strategy->password == NULL) {\n        goto on_error;\n    }\n",
                      "markdown": "`        goto on_error;\n    }\n\n    basic_auth_strategy->password = aws_string_new_from_cursor(allocator, &config->password);\n    if (basic_auth_strategy->password == NULL) {\n        goto on_error;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/proxy_strategy.c"
                },
                "region": {
                  "startLine": 329,
                  "startColumn": 25,
                  "endLine": 329,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        goto on_error;\n    }\n\n    basic_auth_strategy->password = aws_string_new_from_cursor(allocator, &config->password);\n    if (basic_auth_strategy->password == NULL) {\n        goto on_error;\n    }\n",
                    "rendered": {
                      "text": "        goto on_error;\n    }\n\n    basic_auth_strategy->password = aws_string_new_from_cursor(allocator, &config->password);\n    if (basic_auth_strategy->password == NULL) {\n        goto on_error;\n    }\n",
                      "markdown": "`        goto on_error;\n    }\n\n    basic_auth_strategy->password = aws_string_new_from_cursor(allocator, &config->password);\n    if (basic_auth_strategy->password == NULL) {\n        goto on_error;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/proxy_strategy.c"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 50,
                  "endLine": 153,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    }\n\n    struct aws_byte_cursor password_cursor = aws_byte_cursor_from_string(basic_auth_strategy->password);\n    if (aws_byte_buf_append(&base64_input_value, &password_cursor)) {\n        goto done;\n    }\n\n",
                    "rendered": {
                      "text": "    }\n\n    struct aws_byte_cursor password_cursor = aws_byte_cursor_from_string(basic_auth_strategy->password);\n    if (aws_byte_buf_append(&base64_input_value, &password_cursor)) {\n        goto done;\n    }\n\n",
                      "markdown": "`    }\n\n    struct aws_byte_cursor password_cursor = aws_byte_cursor_from_string(basic_auth_strategy->password);\n    if (aws_byte_buf_append(&base64_input_value, &password_cursor)) {\n        goto done;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/proxy_strategy.c"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 94,
                  "endLine": 152,
                  "endColumn": 102,
                  "snippet": {
                    "text": "        goto done;\n    }\n\n    struct aws_byte_cursor password_cursor = aws_byte_cursor_from_string(basic_auth_strategy->password);\n    if (aws_byte_buf_append(&base64_input_value, &password_cursor)) {\n        goto done;\n    }\n",
                    "rendered": {
                      "text": "        goto done;\n    }\n\n    struct aws_byte_cursor password_cursor = aws_byte_cursor_from_string(basic_auth_strategy->password);\n    if (aws_byte_buf_append(&base64_input_value, &password_cursor)) {\n        goto done;\n    }\n",
                      "markdown": "`        goto done;\n    }\n\n    struct aws_byte_cursor password_cursor = aws_byte_cursor_from_string(basic_auth_strategy->password);\n    if (aws_byte_buf_append(&base64_input_value, &password_cursor)) {\n        goto done;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/proxy_strategy.c"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 27,
                  "endLine": 152,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        goto done;\n    }\n\n    struct aws_byte_cursor password_cursor = aws_byte_cursor_from_string(basic_auth_strategy->password);\n    if (aws_byte_buf_append(&base64_input_value, &password_cursor)) {\n        goto done;\n    }\n",
                    "rendered": {
                      "text": "        goto done;\n    }\n\n    struct aws_byte_cursor password_cursor = aws_byte_cursor_from_string(basic_auth_strategy->password);\n    if (aws_byte_buf_append(&base64_input_value, &password_cursor)) {\n        goto done;\n    }\n",
                      "markdown": "`        goto done;\n    }\n\n    struct aws_byte_cursor password_cursor = aws_byte_cursor_from_string(basic_auth_strategy->password);\n    if (aws_byte_buf_append(&base64_input_value, &password_cursor)) {\n        goto done;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/proxy_strategy.c"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 43,
                  "endLine": 141,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        goto done;\n    }\n\n    /* First build a buffer with \"username:password\" in it */\n    struct aws_byte_cursor username_cursor = aws_byte_cursor_from_string(basic_auth_strategy->user_name);\n    if (aws_byte_buf_append(&base64_input_value, &username_cursor)) {\n        goto done;\n",
                    "rendered": {
                      "text": "        goto done;\n    }\n\n    /* First build a buffer with \"username:password\" in it */\n    struct aws_byte_cursor username_cursor = aws_byte_cursor_from_string(basic_auth_strategy->user_name);\n    if (aws_byte_buf_append(&base64_input_value, &username_cursor)) {\n        goto done;\n",
                      "markdown": "`        goto done;\n    }\n\n    /* First build a buffer with \"username:password\" in it */\n    struct aws_byte_cursor username_cursor = aws_byte_cursor_from_string(basic_auth_strategy->user_name);\n    if (aws_byte_buf_append(&base64_input_value, &username_cursor)) {\n        goto done;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/proxy_strategy.c"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 71,
                  "endLine": 137,
                  "endColumn": 79,
                  "snippet": {
                    "text": "    if (aws_byte_buf_init(\n            &base64_input_value,\n            allocator,\n            basic_auth_strategy->user_name->len + basic_auth_strategy->password->len + 1)) {\n        goto done;\n    }\n\n",
                    "rendered": {
                      "text": "    if (aws_byte_buf_init(\n            &base64_input_value,\n            allocator,\n            basic_auth_strategy->user_name->len + basic_auth_strategy->password->len + 1)) {\n        goto done;\n    }\n\n",
                      "markdown": "`    if (aws_byte_buf_init(\n            &base64_input_value,\n            allocator,\n            basic_auth_strategy->user_name->len + basic_auth_strategy->password->len + 1)) {\n        goto done;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/proxy_strategy.c"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 44,
                  "endLine": 90,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    struct aws_http_proxy_strategy_basic_auth *basic_auth_strategy = proxy_strategy->impl;\n\n    aws_string_destroy(basic_auth_strategy->user_name);\n    aws_string_destroy(basic_auth_strategy->password);\n\n    aws_mem_release(basic_auth_strategy->allocator, basic_auth_strategy);\n}\n",
                    "rendered": {
                      "text": "    struct aws_http_proxy_strategy_basic_auth *basic_auth_strategy = proxy_strategy->impl;\n\n    aws_string_destroy(basic_auth_strategy->user_name);\n    aws_string_destroy(basic_auth_strategy->password);\n\n    aws_mem_release(basic_auth_strategy->allocator, basic_auth_strategy);\n}\n",
                      "markdown": "`    struct aws_http_proxy_strategy_basic_auth *basic_auth_strategy = proxy_strategy->impl;\n\n    aws_string_destroy(basic_auth_strategy->user_name);\n    aws_string_destroy(basic_auth_strategy->password);\n\n    aws_mem_release(basic_auth_strategy->allocator, basic_auth_strategy);\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/proxy_strategy.c"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 23,
                  "endLine": 82,
                  "endColumn": 31,
                  "snippet": {
                    "text": "struct aws_http_proxy_strategy_basic_auth {\n    struct aws_allocator *allocator;\n    struct aws_string *user_name;\n    struct aws_string *password;\n    struct aws_http_proxy_strategy strategy_base;\n};\n\n",
                    "rendered": {
                      "text": "struct aws_http_proxy_strategy_basic_auth {\n    struct aws_allocator *allocator;\n    struct aws_string *user_name;\n    struct aws_string *password;\n    struct aws_http_proxy_strategy strategy_base;\n};\n\n",
                      "markdown": "`struct aws_http_proxy_strategy_basic_auth {\n    struct aws_allocator *allocator;\n    struct aws_string *user_name;\n    struct aws_string *password;\n    struct aws_http_proxy_strategy strategy_base;\n};\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/random_access_set.c"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 12,
                  "endLine": 179,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    AWS_PRECONDITION(exist);\n    struct aws_hash_element *find = NULL;\n    int re = aws_hash_table_find(&set->impl->map, element, &find);\n    *exist = find != NULL;\n    return re;\n}\n\n",
                    "rendered": {
                      "text": "    AWS_PRECONDITION(exist);\n    struct aws_hash_element *find = NULL;\n    int re = aws_hash_table_find(&set->impl->map, element, &find);\n    *exist = find != NULL;\n    return re;\n}\n\n",
                      "markdown": "`    AWS_PRECONDITION(exist);\n    struct aws_hash_element *find = NULL;\n    int re = aws_hash_table_find(&set->impl->map, element, &find);\n    *exist = find != NULL;\n    return re;\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/proxy_connection.c"
                },
                "region": {
                  "startLine": 1373,
                  "startColumn": 52,
                  "endLine": 1373,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\n        basic_config.proxy_connection_type = override_proxy_connection_type;\n        basic_config.user_name = proxy_options->auth_username;\n        basic_config.password = proxy_options->auth_password;\n\n        config->proxy_strategy = aws_http_proxy_strategy_new_basic_auth(allocator, &basic_config);\n    }\n",
                    "rendered": {
                      "text": "\n        basic_config.proxy_connection_type = override_proxy_connection_type;\n        basic_config.user_name = proxy_options->auth_username;\n        basic_config.password = proxy_options->auth_password;\n\n        config->proxy_strategy = aws_http_proxy_strategy_new_basic_auth(allocator, &basic_config);\n    }\n",
                      "markdown": "`\n        basic_config.proxy_connection_type = override_proxy_connection_type;\n        basic_config.user_name = proxy_options->auth_username;\n        basic_config.password = proxy_options->auth_password;\n\n        config->proxy_strategy = aws_http_proxy_strategy_new_basic_auth(allocator, &basic_config);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/proxy_connection.c"
                },
                "region": {
                  "startLine": 1373,
                  "startColumn": 21,
                  "endLine": 1373,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n        basic_config.proxy_connection_type = override_proxy_connection_type;\n        basic_config.user_name = proxy_options->auth_username;\n        basic_config.password = proxy_options->auth_password;\n\n        config->proxy_strategy = aws_http_proxy_strategy_new_basic_auth(allocator, &basic_config);\n    }\n",
                    "rendered": {
                      "text": "\n        basic_config.proxy_connection_type = override_proxy_connection_type;\n        basic_config.user_name = proxy_options->auth_username;\n        basic_config.password = proxy_options->auth_password;\n\n        config->proxy_strategy = aws_http_proxy_strategy_new_basic_auth(allocator, &basic_config);\n    }\n",
                      "markdown": "`\n        basic_config.proxy_connection_type = override_proxy_connection_type;\n        basic_config.user_name = proxy_options->auth_username;\n        basic_config.password = proxy_options->auth_password;\n\n        config->proxy_strategy = aws_http_proxy_strategy_new_basic_auth(allocator, &basic_config);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/proxy_connection.c"
                },
                "region": {
                  "startLine": 1302,
                  "startColumn": 38,
                  "endLine": 1302,
                  "endColumn": 46,
                  "snippet": {
                    "text": "            struct aws_http_proxy_strategy_basic_auth_options config = {\n                .proxy_connection_type = proxy_options.connection_type,\n                .user_name = proxy_uri.user,\n                .password = proxy_uri.password,\n            };\n            proxy_options.proxy_strategy = aws_http_proxy_strategy_new_basic_auth(options->allocator, &config);\n        }\n",
                    "rendered": {
                      "text": "            struct aws_http_proxy_strategy_basic_auth_options config = {\n                .proxy_connection_type = proxy_options.connection_type,\n                .user_name = proxy_uri.user,\n                .password = proxy_uri.password,\n            };\n            proxy_options.proxy_strategy = aws_http_proxy_strategy_new_basic_auth(options->allocator, &config);\n        }\n",
                      "markdown": "`            struct aws_http_proxy_strategy_basic_auth_options config = {\n                .proxy_connection_type = proxy_options.connection_type,\n                .user_name = proxy_uri.user,\n                .password = proxy_uri.password,\n            };\n            proxy_options.proxy_strategy = aws_http_proxy_strategy_new_basic_auth(options->allocator, &config);\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/proxy_connection.c"
                },
                "region": {
                  "startLine": 1302,
                  "startColumn": 17,
                  "endLine": 1302,
                  "endColumn": 25,
                  "snippet": {
                    "text": "            struct aws_http_proxy_strategy_basic_auth_options config = {\n                .proxy_connection_type = proxy_options.connection_type,\n                .user_name = proxy_uri.user,\n                .password = proxy_uri.password,\n            };\n            proxy_options.proxy_strategy = aws_http_proxy_strategy_new_basic_auth(options->allocator, &config);\n        }\n",
                    "rendered": {
                      "text": "            struct aws_http_proxy_strategy_basic_auth_options config = {\n                .proxy_connection_type = proxy_options.connection_type,\n                .user_name = proxy_uri.user,\n                .password = proxy_uri.password,\n            };\n            proxy_options.proxy_strategy = aws_http_proxy_strategy_new_basic_auth(options->allocator, &config);\n        }\n",
                      "markdown": "`            struct aws_http_proxy_strategy_basic_auth_options config = {\n                .proxy_connection_type = proxy_options.connection_type,\n                .user_name = proxy_uri.user,\n                .password = proxy_uri.password,\n            };\n            proxy_options.proxy_strategy = aws_http_proxy_strategy_new_basic_auth(options->allocator, &config);\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/proxy_connection.c"
                },
                "region": {
                  "startLine": 1298,
                  "startColumn": 28,
                  "endLine": 1298,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        }\n        /* Support basic authentication. */\n        if (proxy_uri.password.len) {\n            /* Has no empty password set */\n            struct aws_http_proxy_strategy_basic_auth_options config = {\n                .proxy_connection_type = proxy_options.connection_type,\n                .user_name = proxy_uri.user,\n",
                    "rendered": {
                      "text": "        }\n        /* Support basic authentication. */\n        if (proxy_uri.password.len) {\n            /* Has no empty password set */\n            struct aws_http_proxy_strategy_basic_auth_options config = {\n                .proxy_connection_type = proxy_options.connection_type,\n                .user_name = proxy_uri.user,\n",
                      "markdown": "`        }\n        /* Support basic authentication. */\n        if (proxy_uri.password.len) {\n            /* Has no empty password set */\n            struct aws_http_proxy_strategy_basic_auth_options config = {\n                .proxy_connection_type = proxy_options.connection_type,\n                .user_name = proxy_uri.user,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/source/proxy_connection.c"
                },
                "region": {
                  "startLine": 1297,
                  "startColumn": 22,
                  "endLine": 1297,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            }\n        }\n        /* Support basic authentication. */\n        if (proxy_uri.password.len) {\n            /* Has no empty password set */\n            struct aws_http_proxy_strategy_basic_auth_options config = {\n                .proxy_connection_type = proxy_options.connection_type,\n",
                    "rendered": {
                      "text": "            }\n        }\n        /* Support basic authentication. */\n        if (proxy_uri.password.len) {\n            /* Has no empty password set */\n            struct aws_http_proxy_strategy_basic_auth_options config = {\n                .proxy_connection_type = proxy_options.connection_type,\n",
                      "markdown": "`            }\n        }\n        /* Support basic authentication. */\n        if (proxy_uri.password.len) {\n            /* Has no empty password set */\n            struct aws_http_proxy_strategy_basic_auth_options config = {\n                .proxy_connection_type = proxy_options.connection_type,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_h1_client.c"
                },
                "region": {
                  "startLine": 3980,
                  "startColumn": 7,
                  "endLine": 3980,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    struct aws_linked_list_node *node = aws_linked_list_front(list);\n    while (node != aws_linked_list_end(list)) {\n        num_read_messages++;\n        node = aws_linked_list_next(node);\n    }\n    ASSERT_TRUE(num_read_messages > 1);\n\n",
                    "rendered": {
                      "text": "    struct aws_linked_list_node *node = aws_linked_list_front(list);\n    while (node != aws_linked_list_end(list)) {\n        num_read_messages++;\n        node = aws_linked_list_next(node);\n    }\n    ASSERT_TRUE(num_read_messages > 1);\n\n",
                      "markdown": "`    struct aws_linked_list_node *node = aws_linked_list_front(list);\n    while (node != aws_linked_list_end(list)) {\n        num_read_messages++;\n        node = aws_linked_list_next(node);\n    }\n    ASSERT_TRUE(num_read_messages > 1);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_h1_client.c"
                },
                "region": {
                  "startLine": 1006,
                  "startColumn": 8,
                  "endLine": 1006,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    struct aws_linked_list *written_msgs = testing_channel_get_written_message_queue(&tester.testing_channel);\n    for (struct aws_linked_list_node *node = aws_linked_list_begin(written_msgs);\n         node != aws_linked_list_end(written_msgs);\n         node = aws_linked_list_next(node)) {\n\n        struct aws_io_message *msg = AWS_CONTAINER_OF(node, struct aws_io_message, queueing_handle);\n        msg->on_completion(tester.testing_channel.channel, msg, 0, msg->user_data);\n",
                    "rendered": {
                      "text": "    struct aws_linked_list *written_msgs = testing_channel_get_written_message_queue(&tester.testing_channel);\n    for (struct aws_linked_list_node *node = aws_linked_list_begin(written_msgs);\n         node != aws_linked_list_end(written_msgs);\n         node = aws_linked_list_next(node)) {\n\n        struct aws_io_message *msg = AWS_CONTAINER_OF(node, struct aws_io_message, queueing_handle);\n        msg->on_completion(tester.testing_channel.channel, msg, 0, msg->user_data);\n",
                      "markdown": "`    struct aws_linked_list *written_msgs = testing_channel_get_written_message_queue(&tester.testing_channel);\n    for (struct aws_linked_list_node *node = aws_linked_list_begin(written_msgs);\n         node != aws_linked_list_end(written_msgs);\n         node = aws_linked_list_next(node)) {\n\n        struct aws_io_message *msg = AWS_CONTAINER_OF(node, struct aws_io_message, queueing_handle);\n        msg->on_completion(tester.testing_channel.channel, msg, 0, msg->user_data);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_h1_client.c"
                },
                "region": {
                  "startLine": 1005,
                  "startColumn": 8,
                  "endLine": 1005,
                  "endColumn": 14,
                  "snippet": {
                    "text": "     * When bug occurred, this would ALSO reschedule the outgoing_stream_task */\n    struct aws_linked_list *written_msgs = testing_channel_get_written_message_queue(&tester.testing_channel);\n    for (struct aws_linked_list_node *node = aws_linked_list_begin(written_msgs);\n         node != aws_linked_list_end(written_msgs);\n         node = aws_linked_list_next(node)) {\n\n        struct aws_io_message *msg = AWS_CONTAINER_OF(node, struct aws_io_message, queueing_handle);\n",
                    "rendered": {
                      "text": "     * When bug occurred, this would ALSO reschedule the outgoing_stream_task */\n    struct aws_linked_list *written_msgs = testing_channel_get_written_message_queue(&tester.testing_channel);\n    for (struct aws_linked_list_node *node = aws_linked_list_begin(written_msgs);\n         node != aws_linked_list_end(written_msgs);\n         node = aws_linked_list_next(node)) {\n\n        struct aws_io_message *msg = AWS_CONTAINER_OF(node, struct aws_io_message, queueing_handle);\n",
                      "markdown": "`     * When bug occurred, this would ALSO reschedule the outgoing_stream_task */\n    struct aws_linked_list *written_msgs = testing_channel_get_written_message_queue(&tester.testing_channel);\n    for (struct aws_linked_list_node *node = aws_linked_list_begin(written_msgs);\n         node != aws_linked_list_end(written_msgs);\n         node = aws_linked_list_next(node)) {\n\n        struct aws_io_message *msg = AWS_CONTAINER_OF(node, struct aws_io_message, queueing_handle);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_strutil.c"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 36,
                  "endLine": 184,
                  "endColumn": 84,
                  "snippet": {
                    "text": "\n    /* OK to use UTF-8 */\n    ASSERT_TRUE(aws_strutil_is_http_reason_phrase(\n        aws_byte_cursor_from_c_str(\"\\xF0\\x9F\\x91\\x81\\xF0\\x9F\\x91\\x84\\xF0\\x9F\\x91\\x81\")));\n\n    /* Bad to have line-folds or other anything like it*/\n    ASSERT_FALSE(aws_strutil_is_http_reason_phrase(aws_byte_cursor_from_c_str(\"Line\\r\\nFolds\")));\n",
                    "rendered": {
                      "text": "\n    /* OK to use UTF-8 */\n    ASSERT_TRUE(aws_strutil_is_http_reason_phrase(\n        aws_byte_cursor_from_c_str(\"\\xF0\\x9F\\x91\\x81\\xF0\\x9F\\x91\\x84\\xF0\\x9F\\x91\\x81\")));\n\n    /* Bad to have line-folds or other anything like it*/\n    ASSERT_FALSE(aws_strutil_is_http_reason_phrase(aws_byte_cursor_from_c_str(\"Line\\r\\nFolds\")));\n",
                      "markdown": "`\n    /* OK to use UTF-8 */\n    ASSERT_TRUE(aws_strutil_is_http_reason_phrase(\n        aws_byte_cursor_from_c_str(\"\\xF0\\x9F\\x91\\x81\\xF0\\x9F\\x91\\x84\\xF0\\x9F\\x91\\x81\")));\n\n    /* Bad to have line-folds or other anything like it*/\n    ASSERT_FALSE(aws_strutil_is_http_reason_phrase(aws_byte_cursor_from_c_str(\"Line\\r\\nFolds\")));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_strutil.c"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 36,
                  "endLine": 131,
                  "endColumn": 84,
                  "snippet": {
                    "text": "\n    /* OK to use UTF-8 */\n    ASSERT_TRUE(aws_strutil_is_http_field_value(\n        aws_byte_cursor_from_c_str(\"\\xF0\\x9F\\x91\\x81\\xF0\\x9F\\x91\\x84\\xF0\\x9F\\x91\\x81\")));\n\n    /* Bad to have line-folds */\n    ASSERT_FALSE(aws_strutil_is_http_field_value(aws_byte_cursor_from_c_str(\"item1\\r\\n item2\")));\n",
                    "rendered": {
                      "text": "\n    /* OK to use UTF-8 */\n    ASSERT_TRUE(aws_strutil_is_http_field_value(\n        aws_byte_cursor_from_c_str(\"\\xF0\\x9F\\x91\\x81\\xF0\\x9F\\x91\\x84\\xF0\\x9F\\x91\\x81\")));\n\n    /* Bad to have line-folds */\n    ASSERT_FALSE(aws_strutil_is_http_field_value(aws_byte_cursor_from_c_str(\"item1\\r\\n item2\")));\n",
                      "markdown": "`\n    /* OK to use UTF-8 */\n    ASSERT_TRUE(aws_strutil_is_http_field_value(\n        aws_byte_cursor_from_c_str(\"\\xF0\\x9F\\x91\\x81\\xF0\\x9F\\x91\\x84\\xF0\\x9F\\x91\\x81\")));\n\n    /* Bad to have line-folds */\n    ASSERT_FALSE(aws_strutil_is_http_field_value(aws_byte_cursor_from_c_str(\"item1\\r\\n item2\")));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_strutil.c"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 36,
                  "endLine": 184,
                  "endColumn": 84,
                  "snippet": {
                    "text": "\n    /* OK to use UTF-8 */\n    ASSERT_TRUE(aws_strutil_is_http_reason_phrase(\n        aws_byte_cursor_from_c_str(\"\\xF0\\x9F\\x91\\x81\\xF0\\x9F\\x91\\x84\\xF0\\x9F\\x91\\x81\")));\n\n    /* Bad to have line-folds or other anything like it*/\n    ASSERT_FALSE(aws_strutil_is_http_reason_phrase(aws_byte_cursor_from_c_str(\"Line\\r\\nFolds\")));\n",
                    "rendered": {
                      "text": "\n    /* OK to use UTF-8 */\n    ASSERT_TRUE(aws_strutil_is_http_reason_phrase(\n        aws_byte_cursor_from_c_str(\"\\xF0\\x9F\\x91\\x81\\xF0\\x9F\\x91\\x84\\xF0\\x9F\\x91\\x81\")));\n\n    /* Bad to have line-folds or other anything like it*/\n    ASSERT_FALSE(aws_strutil_is_http_reason_phrase(aws_byte_cursor_from_c_str(\"Line\\r\\nFolds\")));\n",
                      "markdown": "`\n    /* OK to use UTF-8 */\n    ASSERT_TRUE(aws_strutil_is_http_reason_phrase(\n        aws_byte_cursor_from_c_str(\"\\xF0\\x9F\\x91\\x81\\xF0\\x9F\\x91\\x84\\xF0\\x9F\\x91\\x81\")));\n\n    /* Bad to have line-folds or other anything like it*/\n    ASSERT_FALSE(aws_strutil_is_http_reason_phrase(aws_byte_cursor_from_c_str(\"Line\\r\\nFolds\")));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_strutil.c"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 36,
                  "endLine": 131,
                  "endColumn": 84,
                  "snippet": {
                    "text": "\n    /* OK to use UTF-8 */\n    ASSERT_TRUE(aws_strutil_is_http_field_value(\n        aws_byte_cursor_from_c_str(\"\\xF0\\x9F\\x91\\x81\\xF0\\x9F\\x91\\x84\\xF0\\x9F\\x91\\x81\")));\n\n    /* Bad to have line-folds */\n    ASSERT_FALSE(aws_strutil_is_http_field_value(aws_byte_cursor_from_c_str(\"item1\\r\\n item2\")));\n",
                    "rendered": {
                      "text": "\n    /* OK to use UTF-8 */\n    ASSERT_TRUE(aws_strutil_is_http_field_value(\n        aws_byte_cursor_from_c_str(\"\\xF0\\x9F\\x91\\x81\\xF0\\x9F\\x91\\x84\\xF0\\x9F\\x91\\x81\")));\n\n    /* Bad to have line-folds */\n    ASSERT_FALSE(aws_strutil_is_http_field_value(aws_byte_cursor_from_c_str(\"item1\\r\\n item2\")));\n",
                      "markdown": "`\n    /* OK to use UTF-8 */\n    ASSERT_TRUE(aws_strutil_is_http_field_value(\n        aws_byte_cursor_from_c_str(\"\\xF0\\x9F\\x91\\x81\\xF0\\x9F\\x91\\x84\\xF0\\x9F\\x91\\x81\")));\n\n    /* Bad to have line-folds */\n    ASSERT_FALSE(aws_strutil_is_http_field_value(aws_byte_cursor_from_c_str(\"item1\\r\\n item2\")));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_strutil.c"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 61,
                  "endLine": 207,
                  "endColumn": 65,
                  "snippet": {
                    "text": "        mutable_str[1] = (char)i;\n        struct aws_byte_cursor cursor = aws_byte_cursor_from_array(mutable_str, AWS_ARRAY_SIZE(mutable_str));\n        bool passes = aws_strutil_is_http_reason_phrase(cursor);\n        ASSERT_INT_EQUALS(allowed_in_grammar, passes, \"failed at character 0x%02X\", i);\n    }\n\n    return 0;\n",
                    "rendered": {
                      "text": "        mutable_str[1] = (char)i;\n        struct aws_byte_cursor cursor = aws_byte_cursor_from_array(mutable_str, AWS_ARRAY_SIZE(mutable_str));\n        bool passes = aws_strutil_is_http_reason_phrase(cursor);\n        ASSERT_INT_EQUALS(allowed_in_grammar, passes, \"failed at character 0x%02X\", i);\n    }\n\n    return 0;\n",
                      "markdown": "`        mutable_str[1] = (char)i;\n        struct aws_byte_cursor cursor = aws_byte_cursor_from_array(mutable_str, AWS_ARRAY_SIZE(mutable_str));\n        bool passes = aws_strutil_is_http_reason_phrase(cursor);\n        ASSERT_INT_EQUALS(allowed_in_grammar, passes, \"failed at character 0x%02X\", i);\n    }\n\n    return 0;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_strutil.c"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 61,
                  "endLine": 156,
                  "endColumn": 65,
                  "snippet": {
                    "text": "        mutable_str[1] = (char)i;\n        struct aws_byte_cursor cursor = aws_byte_cursor_from_array(mutable_str, AWS_ARRAY_SIZE(mutable_str));\n        bool passes = aws_strutil_is_http_field_value(cursor);\n        ASSERT_INT_EQUALS(allowed_in_grammar, passes, \"failed at character 0x%02X\", i);\n    }\n\n    return 0;\n",
                    "rendered": {
                      "text": "        mutable_str[1] = (char)i;\n        struct aws_byte_cursor cursor = aws_byte_cursor_from_array(mutable_str, AWS_ARRAY_SIZE(mutable_str));\n        bool passes = aws_strutil_is_http_field_value(cursor);\n        ASSERT_INT_EQUALS(allowed_in_grammar, passes, \"failed at character 0x%02X\", i);\n    }\n\n    return 0;\n",
                      "markdown": "`        mutable_str[1] = (char)i;\n        struct aws_byte_cursor cursor = aws_byte_cursor_from_array(mutable_str, AWS_ARRAY_SIZE(mutable_str));\n        bool passes = aws_strutil_is_http_field_value(cursor);\n        ASSERT_INT_EQUALS(allowed_in_grammar, passes, \"failed at character 0x%02X\", i);\n    }\n\n    return 0;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/proxy_test_helper.c"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 77,
                  "endLine": 30,
                  "endColumn": 85,
                  "snippet": {
                    "text": "#include \"proxy_test_helper.h\"\n\nenum {\n    TESTER_TIMEOUT_SEC = 60, /* Give enough time for non-sudo users to enter password */\n};\n\nstruct testing_channel_bootstrap_wrapper {\n",
                    "rendered": {
                      "text": "#include \"proxy_test_helper.h\"\n\nenum {\n    TESTER_TIMEOUT_SEC = 60, /* Give enough time for non-sudo users to enter password */\n};\n\nstruct testing_channel_bootstrap_wrapper {\n",
                      "markdown": "`#include \"proxy_test_helper.h\"\n\nenum {\n    TESTER_TIMEOUT_SEC = 60, /* Give enough time for non-sudo users to enter password */\n};\n\nstruct testing_channel_bootstrap_wrapper {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_websocket_bootstrap.c"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 26,
                  "endLine": 238,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n        if (!found_match) {\n            printf(\n                \"Failed to find header '\" PRInSTR \": \" PRInSTR \"'\\n\",\n                AWS_BYTE_CURSOR_PRI(a.name),\n                AWS_BYTE_CURSOR_PRI(a.value));\n            return false;\n",
                    "rendered": {
                      "text": "\n        if (!found_match) {\n            printf(\n                \"Failed to find header '\" PRInSTR \": \" PRInSTR \"'\\n\",\n                AWS_BYTE_CURSOR_PRI(a.name),\n                AWS_BYTE_CURSOR_PRI(a.value));\n            return false;\n",
                      "markdown": "`\n        if (!found_match) {\n            printf(\n                \"Failed to find header '\" PRInSTR \": \" PRInSTR \"'\\n\",\n                AWS_BYTE_CURSOR_PRI(a.name),\n                AWS_BYTE_CURSOR_PRI(a.value));\n            return false;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/test_connection.c"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 77,
                  "endLine": 36,
                  "endColumn": 85,
                  "snippet": {
                    "text": "#endif\n\nenum {\n    TESTER_TIMEOUT_SEC = 60, /* Give enough time for non-sudo users to enter password */\n};\n\n/* Options for setting up `tester` singleton */\n",
                    "rendered": {
                      "text": "#endif\n\nenum {\n    TESTER_TIMEOUT_SEC = 60, /* Give enough time for non-sudo users to enter password */\n};\n\n/* Options for setting up `tester` singleton */\n",
                      "markdown": "`#endif\n\nenum {\n    TESTER_TIMEOUT_SEC = 60, /* Give enough time for non-sudo users to enter password */\n};\n\n/* Options for setting up `tester` singleton */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/h2_test_helper.h"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 36,
                  "endLine": 55,
                  "endColumn": 40,
                  "snippet": {
                    "text": "                    \\\n        if (assert_rv.h2_code != h2_error) {                                                                           \\\n            PRINT_FAIL_INTERNAL0(                                                                                      \\\n                \"Expected %s failure at %s; got aws_h2err{%s, %s}\\n\",                                                  \\\n                aws_http2_error_code_to_str(h2_error),                                                                 \\\n                #condition,                                                                       ",
                    "rendered": {
                      "text": "                    \\\n        if (assert_rv.h2_code != h2_error) {                                                                           \\\n            PRINT_FAIL_INTERNAL0(                                                                                      \\\n                \"Expected %s failure at %s; got aws_h2err{%s, %s}\\n\",                                                  \\\n                aws_http2_error_code_to_str(h2_error),                                                                 \\\n                #condition,                                                                       ",
                      "markdown": "`                    \\\n        if (assert_rv.h2_code != h2_error) {                                                                           \\\n            PRINT_FAIL_INTERNAL0(                                                                                      \\\n                \"Expected %s failure at %s; got aws_h2err{%s, %s}\\n\",                                                  \\\n                aws_http2_error_code_to_str(h2_error),                                                                 \\\n                #condition,                                                                       `"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/h2_test_helper.h"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 40,
                  "endLine": 47,
                  "endColumn": 44,
                  "snippet": {
                    "text": "                \\\n            if (!PRINT_FAIL_INTERNAL0(__VA_ARGS__)) {                                                                  \\\n                PRINT_FAIL_INTERNAL0(                                                                                  \\\n                    \"Expected %s failure at %s; got AWS_H2ERR_SUCCESS\\n\",                                              \\\n                    aws_http2_error_code_to_str(h2_error),                                                             \\\n                    #condition);                                                                      ",
                    "rendered": {
                      "text": "                \\\n            if (!PRINT_FAIL_INTERNAL0(__VA_ARGS__)) {                                                                  \\\n                PRINT_FAIL_INTERNAL0(                                                                                  \\\n                    \"Expected %s failure at %s; got AWS_H2ERR_SUCCESS\\n\",                                              \\\n                    aws_http2_error_code_to_str(h2_error),                                                             \\\n                    #condition);                                                                      ",
                      "markdown": "`                \\\n            if (!PRINT_FAIL_INTERNAL0(__VA_ARGS__)) {                                                                  \\\n                PRINT_FAIL_INTERNAL0(                                                                                  \\\n                    \"Expected %s failure at %s; got AWS_H2ERR_SUCCESS\\n\",                                              \\\n                    aws_http2_error_code_to_str(h2_error),                                                             \\\n                    #condition);                                                                      `"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/h2_test_helper.h"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 54,
                  "endLine": 35,
                  "endColumn": 58,
                  "snippet": {
                    "text": "  \\\n        if (!aws_h2err_failed(assert_rv)) {                                                                            \\\n            if (!PRINT_FAIL_INTERNAL0(__VA_ARGS__)) {                                                                  \\\n                PRINT_FAIL_INTERNAL0(\"Expected failure at %s; got AWS_H2ERR_SUCCESS\\n\", #condition);                   \\\n            }                                                                                                          \\\n            POSTFAIL_INTERNAL();                                                                                    ",
                    "rendered": {
                      "text": "  \\\n        if (!aws_h2err_failed(assert_rv)) {                                                                            \\\n            if (!PRINT_FAIL_INTERNAL0(__VA_ARGS__)) {                                                                  \\\n                PRINT_FAIL_INTERNAL0(\"Expected failure at %s; got AWS_H2ERR_SUCCESS\\n\", #condition);                   \\\n            }                                                                                                          \\\n            POSTFAIL_INTERNAL();                                                                                    ",
                      "markdown": "`  \\\n        if (!aws_h2err_failed(assert_rv)) {                                                                            \\\n            if (!PRINT_FAIL_INTERNAL0(__VA_ARGS__)) {                                                                  \\\n                PRINT_FAIL_INTERNAL0(\"Expected failure at %s; got AWS_H2ERR_SUCCESS\\n\", #condition);                   \\\n            }                                                                                                          \\\n            POSTFAIL_INTERNAL();                                                                                    `"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/tests/h2_test_helper.h"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 37,
                  "endLine": 21,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                   \\\n            if (!PRINT_FAIL_INTERNAL0(__VA_ARGS__)) {                                                                  \\\n                PRINT_FAIL_INTERNAL0(                                                                                  \\\n                    \"Expected success at %s; got aws_h2err{%s, %s}\\n\",                                                 \\\n                    #condition,                                                                                        \\\n                    aws_http2_error_code_to_str(assert_rv.h2_code),                                ",
                    "rendered": {
                      "text": "                   \\\n            if (!PRINT_FAIL_INTERNAL0(__VA_ARGS__)) {                                                                  \\\n                PRINT_FAIL_INTERNAL0(                                                                                  \\\n                    \"Expected success at %s; got aws_h2err{%s, %s}\\n\",                                                 \\\n                    #condition,                                                                                        \\\n                    aws_http2_error_code_to_str(assert_rv.h2_code),                                ",
                      "markdown": "`                   \\\n            if (!PRINT_FAIL_INTERNAL0(__VA_ARGS__)) {                                                                  \\\n                PRINT_FAIL_INTERNAL0(                                                                                  \\\n                    \"Expected success at %s; got aws_h2err{%s, %s}\\n\",                                                 \\\n                    #condition,                                                                                        \\\n                    aws_http2_error_code_to_str(assert_rv.h2_code),                                `"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/include/aws/http/proxy.h"
                },
                "region": {
                  "startLine": 337,
                  "startColumn": 27,
                  "endLine": 337,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    struct aws_byte_cursor user_name;\n\n    /* password to use in basic authentication */\n    struct aws_byte_cursor password;\n};\n\n/*\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor user_name;\n\n    /* password to use in basic authentication */\n    struct aws_byte_cursor password;\n};\n\n/*\n",
                      "markdown": "`    struct aws_byte_cursor user_name;\n\n    /* password to use in basic authentication */\n    struct aws_byte_cursor password;\n};\n\n/*\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/include/aws/http/proxy.h"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 7,
                  "endLine": 336,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    /* user name to use in basic authentication */\n    struct aws_byte_cursor user_name;\n\n    /* password to use in basic authentication */\n    struct aws_byte_cursor password;\n};\n\n",
                    "rendered": {
                      "text": "    /* user name to use in basic authentication */\n    struct aws_byte_cursor user_name;\n\n    /* password to use in basic authentication */\n    struct aws_byte_cursor password;\n};\n\n",
                      "markdown": "`    /* user name to use in basic authentication */\n    struct aws_byte_cursor user_name;\n\n    /* password to use in basic authentication */\n    struct aws_byte_cursor password;\n};\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/include/aws/http/proxy.h"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 32,
                  "endLine": 152,
                  "endColumn": 40,
                  "snippet": {
                    "text": "     * @Deprecated - Optional password to use for basic authentication\n     * Replaced by instantiating a proxy_strategy via aws_http_proxy_strategy_new_basic_auth()\n     */\n    struct aws_byte_cursor auth_password;\n};\n\n/**\n",
                    "rendered": {
                      "text": "     * @Deprecated - Optional password to use for basic authentication\n     * Replaced by instantiating a proxy_strategy via aws_http_proxy_strategy_new_basic_auth()\n     */\n    struct aws_byte_cursor auth_password;\n};\n\n/**\n",
                      "markdown": "`     * @Deprecated - Optional password to use for basic authentication\n     * Replaced by instantiating a proxy_strategy via aws_http_proxy_strategy_new_basic_auth()\n     */\n    struct aws_byte_cursor auth_password;\n};\n\n/**\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/include/aws/http/proxy.h"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 30,
                  "endLine": 149,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    struct aws_byte_cursor auth_username;\n\n    /**\n     * @Deprecated - Optional password to use for basic authentication\n     * Replaced by instantiating a proxy_strategy via aws_http_proxy_strategy_new_basic_auth()\n     */\n    struct aws_byte_cursor auth_password;\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor auth_username;\n\n    /**\n     * @Deprecated - Optional password to use for basic authentication\n     * Replaced by instantiating a proxy_strategy via aws_http_proxy_strategy_new_basic_auth()\n     */\n    struct aws_byte_cursor auth_password;\n",
                      "markdown": "`    struct aws_byte_cursor auth_username;\n\n    /**\n     * @Deprecated - Optional password to use for basic authentication\n     * Replaced by instantiating a proxy_strategy via aws_http_proxy_strategy_new_basic_auth()\n     */\n    struct aws_byte_cursor auth_password;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.github/workflows/closed-issue-message.yml"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 27,
                  "endLine": 16,
                  "endColumn": 33,
                  "snippet": {
                    "text": "            message: |\n                     Comments on closed issues are hard for our team to see. \n                     If you need more assistance, please either tag a team member or open a new issue that references this one. \n                     If you wish to keep having a conversation with other community members under this issue feel free to do so.\n",
                    "rendered": {
                      "text": "            message: |\n                     Comments on closed issues are hard for our team to see. \n                     If you need more assistance, please either tag a team member or open a new issue that references this one. \n                     If you wish to keep having a conversation with other community members under this issue feel free to do so.\n",
                      "markdown": "`            message: |\n                     Comments on closed issues are hard for our team to see. \n                     If you need more assistance, please either tag a team member or open a new issue that references this one. \n                     If you wish to keep having a conversation with other community members under this issue feel free to do so.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.github/workflows/stale_issue.yml"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 235,
                  "endLine": 21,
                  "endColumn": 243,
                  "snippet": {
                    "text": "hat this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-",
                    "rendered": {
                      "text": "hat this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-",
                      "markdown": "`hat this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.github/workflows/stale_issue.yml"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 334,
                  "endLine": 21,
                  "endColumn": 340,
                  "snippet": {
                    "text": "ings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-message: Greetings! It looks like this PR hasn’t been active in longer than a week, add a comment",
                    "rendered": {
                      "text": "ings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-message: Greetings! It looks like this PR hasn’t been active in longer than a week, add a comment",
                      "markdown": "`ings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-message: Greetings! It looks like this PR hasn’t been active in longer than a week, add a comment`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/.github/workflows/stale_issue.yml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 232,
                  "endLine": 20,
                  "endColumn": 238,
                  "snippet": {
                    "text": "ty string will cause the automation to skip\n        # that category\n        ancient-issue-message: Greetings! Sorry to say but this is a very old issue that is probably not getting as much attention as it deservers. We encourage you to check if this is still an issue in the latest release and if you find that this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the las",
                    "rendered": {
                      "text": "ty string will cause the automation to skip\n        # that category\n        ancient-issue-message: Greetings! Sorry to say but this is a very old issue that is probably not getting as much attention as it deservers. We encourage you to check if this is still an issue in the latest release and if you find that this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the las",
                      "markdown": "`ty string will cause the automation to skip\n        # that category\n        ancient-issue-message: Greetings! Sorry to say but this is a very old issue that is probably not getting as much attention as it deservers. We encourage you to check if this is still an issue in the latest release and if you find that this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the las`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/format-check.py"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 3,
                  "endLine": 43,
                  "endColumn": 8,
                  "snippet": {
                    "text": "if args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\nprint(f\"{Path.cwd()}$ {list2cmdline(cmd)}\")\nif run(cmd).returncode:\n",
                    "rendered": {
                      "text": "if args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\nprint(f\"{Path.cwd()}$ {list2cmdline(cmd)}\")\nif run(cmd).returncode:\n",
                      "markdown": "`if args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\nprint(f\"{Path.cwd()}$ {list2cmdline(cmd)}\")\nif run(cmd).returncode:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/format-check.py"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 3,
                  "endLine": 41,
                  "endColumn": 8,
                  "snippet": {
                    "text": "cmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\n",
                    "rendered": {
                      "text": "cmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\n",
                      "markdown": "`cmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/format-check.py"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 76,
                  "endLine": 38,
                  "endColumn": 4,
                  "snippet": {
                    "text": "filepaths_file.close()\n\n# use pipx to run clang-format from PyPI\n# this is a simple way to run the same clang-format version regardless of OS\ncmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\n",
                    "rendered": {
                      "text": "filepaths_file.close()\n\n# use pipx to run clang-format from PyPI\n# this is a simple way to run the same clang-format version regardless of OS\ncmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\n",
                      "markdown": "`filepaths_file.close()\n\n# use pipx to run clang-format from PyPI\n# this is a simple way to run the same clang-format version regardless of OS\ncmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/format-check.py"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 21,
                  "endLine": 26,
                  "endColumn": 29,
                  "snippet": {
                    "text": "filepaths_file = NamedTemporaryFile(delete=False)\nfor dirpath, dirnames, filenames in os.walk('.'):\n    for filename in filenames:\n        # our regexes expect filepath to use forward slash\n        filepath = Path(dirpath, filename).as_posix()\n        if not INCLUDE_REGEX.match(filepath):\n            continue\n",
                    "rendered": {
                      "text": "filepaths_file = NamedTemporaryFile(delete=False)\nfor dirpath, dirnames, filenames in os.walk('.'):\n    for filename in filenames:\n        # our regexes expect filepath to use forward slash\n        filepath = Path(dirpath, filename).as_posix()\n        if not INCLUDE_REGEX.match(filepath):\n            continue\n",
                      "markdown": "`filepaths_file = NamedTemporaryFile(delete=False)\nfor dirpath, dirnames, filenames in os.walk('.'):\n    for filename in filenames:\n        # our regexes expect filepath to use forward slash\n        filepath = Path(dirpath, filename).as_posix()\n        if not INCLUDE_REGEX.match(filepath):\n            continue\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 221,
                  "endLine": 44,
                  "endColumn": 225,
                  "snippet": {
                    "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-http/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                    "rendered": {
                      "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-http/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                      "markdown": "`\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-http/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 7,
                  "endLine": 44,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-http/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                    "rendered": {
                      "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-http/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                      "markdown": "`\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-http/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 38,
                  "endLine": 12,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check [existing open](https://github.com/awslabs/aws-c-http/issues), or [recently closed](https://github.com/awslabs/aws-c-http/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aclosed%20), issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n",
                    "rendered": {
                      "text": "\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check [existing open](https://github.com/awslabs/aws-c-http/issues), or [recently closed](https://github.com/awslabs/aws-c-http/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aclosed%20), issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n",
                      "markdown": "`\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check [existing open](https://github.com/awslabs/aws-c-http/issues), or [recently closed](https://github.com/awslabs/aws-c-http/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aclosed%20), issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 48,
                  "endLine": 44,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-http/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                    "rendered": {
                      "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-http/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                      "markdown": "`\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-http/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-http.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 77,
                  "endLine": 28,
                  "endColumn": 83,
                  "snippet": {
                    "text": "\n1. You are working against the latest source on the *main* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n",
                    "rendered": {
                      "text": "\n1. You are working against the latest source on the *main* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n",
                      "markdown": "`\n1. You are working against the latest source on the *main* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}