{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/doc/index.html"
                },
                "region": {
                  "startLine": 365,
                  "startColumn": 57,
                  "endLine": 365,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\n<p>If, on the other hand, <code>remove_flags</code> is false, then\n<code>ParseCommandLineFlags</code> will leave argc unchanged, but will\nrearrange the arguments in argv so that the flags are all at the\nbeginning.  For example, if the input is <code>\"/bin/foo\" \"arg1\" \"-q\"\n\"arg2\"</code> (which is legal but weird), the function will rearrange\n<code>argv</code> so it reads <code>\"/bin/foo\", \"-q\", \"arg1\",\n",
                    "rendered": {
                      "text": "\n<p>If, on the other hand, <code>remove_flags</code> is false, then\n<code>ParseCommandLineFlags</code> will leave argc unchanged, but will\nrearrange the arguments in argv so that the flags are all at the\nbeginning.  For example, if the input is <code>\"/bin/foo\" \"arg1\" \"-q\"\n\"arg2\"</code> (which is legal but weird), the function will rearrange\n<code>argv</code> so it reads <code>\"/bin/foo\", \"-q\", \"arg1\",\n",
                      "markdown": "`\n<p>If, on the other hand, <code>remove_flags</code> is false, then\n<code>ParseCommandLineFlags</code> will leave argc unchanged, but will\nrearrange the arguments in argv so that the flags are all at the\nbeginning.  For example, if the input is <code>\"/bin/foo\" \"arg1\" \"-q\"\n\"arg2\"</code> (which is legal but weird), the function will rearrange\n<code>argv</code> so it reads <code>\"/bin/foo\", \"-q\", \"arg1\",\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/doc/index.html"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 24,
                  "endLine": 351,
                  "endColumn": 28,
                  "snippet": {
                    "text": "   gflags::ParseCommandLineFlags(&argc, &argv, true);\n</pre>\n\n<p>Usually, this code is at the beginning of <code>main()</code>.\n<code>argc</code> and <code>argv</code> are exactly as passed in to\n<code>main()</code>.  This routine might modify them, which is why\npointers to them are passed in.</p>\n",
                    "rendered": {
                      "text": "   gflags::ParseCommandLineFlags(&argc, &argv, true);\n</pre>\n\n<p>Usually, this code is at the beginning of <code>main()</code>.\n<code>argc</code> and <code>argv</code> are exactly as passed in to\n<code>main()</code>.  This routine might modify them, which is why\npointers to them are passed in.</p>\n",
                      "markdown": "`   gflags::ParseCommandLineFlags(&argc, &argv, true);\n</pre>\n\n<p>Usually, this code is at the beginning of <code>main()</code>.\n<code>argc</code> and <code>argv</code> are exactly as passed in to\n<code>main()</code>.  This routine might modify them, which is why\npointers to them are passed in.</p>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/doc/index.html"
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 25,
                  "endLine": 327,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n<p>By doing the registration at global initialization time (right\nafter the DEFINE_int32), we ensure that the registration happens before\nthe commandline is parsed at the beginning of <code>main()</code>.</p>\n\n<p>The above used <code>DEFINE_validator</code> macro calls the\n<code>RegisterFlagValidator()</code> function which returns true if the\n",
                    "rendered": {
                      "text": "\n<p>By doing the registration at global initialization time (right\nafter the DEFINE_int32), we ensure that the registration happens before\nthe commandline is parsed at the beginning of <code>main()</code>.</p>\n\n<p>The above used <code>DEFINE_validator</code> macro calls the\n<code>RegisterFlagValidator()</code> function which returns true if the\n",
                      "markdown": "`\n<p>By doing the registration at global initialization time (right\nafter the DEFINE_int32), we ensure that the registration happens before\nthe commandline is parsed at the beginning of <code>main()</code>.</p>\n\n<p>The above used <code>DEFINE_validator</code> macro calls the\n<code>RegisterFlagValidator()</code> function which returns true if the\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/doc/index.html"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 28,
                  "endLine": 325,
                  "endColumn": 32,
                  "snippet": {
                    "text": "DEFINE_validator(port, &ValidatePort);\n</pre>\n\n<p>By doing the registration at global initialization time (right\nafter the DEFINE_int32), we ensure that the registration happens before\nthe commandline is parsed at the beginning of <code>main()</code>.</p>\n\n",
                    "rendered": {
                      "text": "DEFINE_validator(port, &ValidatePort);\n</pre>\n\n<p>By doing the registration at global initialization time (right\nafter the DEFINE_int32), we ensure that the registration happens before\nthe commandline is parsed at the beginning of <code>main()</code>.</p>\n\n",
                      "markdown": "`DEFINE_validator(port, &ValidatePort);\n</pre>\n\n<p>By doing the registration at global initialization time (right\nafter the DEFINE_int32), we ensure that the registration happens before\nthe commandline is parsed at the beginning of <code>main()</code>.</p>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/doc/index.html"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 68,
                  "endLine": 284,
                  "endColumn": 3,
                  "snippet": {
                    "text": "recommend the following guideline:</p>\n\n<blockquote>\nIf you DEFINE a flag in <code>foo.cc</code>, either don't DECLARE it\nat all, only DECLARE it in tightly related tests, or only DECLARE\nit in <code>foo.h</code>.\n</blockquote>\n\n",
                    "rendered": {
                      "text": "recommend the following guideline:</p>\n\n<blockquote>\nIf you DEFINE a flag in <code>foo.cc</code>, either don't DECLARE it\nat all, only DECLARE it in tightly related tests, or only DECLARE\nit in <code>foo.h</code>.\n</blockquote>\n\n",
                      "markdown": "`recommend the following guideline:</p>\n\n<blockquote>\nIf you DEFINE a flag in <code>foo.cc</code>, either don't DECLARE it\nat all, only DECLARE it in tightly related tests, or only DECLARE\nit in <code>foo.h</code>.\n</blockquote>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/doc/index.html"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 38,
                  "endLine": 262,
                  "endColumn": 42,
                  "snippet": {
                    "text": "<h2> <A name=declare>DECLARE: Using the Flag in a Different File</A> </h2>\n\n<p>Accessing a flag in the manner of the previous section only works\nif the flag was <code>DEFINE</code>-ed at the top of the file.  If it\nwasn't, you'll get an 'unknown variable' error.</p>\n\n<p>The <code>DECLARE_type</code> macro is available when you want to\n",
                    "rendered": {
                      "text": "<h2> <A name=declare>DECLARE: Using the Flag in a Different File</A> </h2>\n\n<p>Accessing a flag in the manner of the previous section only works\nif the flag was <code>DEFINE</code>-ed at the top of the file.  If it\nwasn't, you'll get an 'unknown variable' error.</p>\n\n<p>The <code>DECLARE_type</code> macro is available when you want to\n",
                      "markdown": "`<h2> <A name=declare>DECLARE: Using the Flag in a Different File</A> </h2>\n\n<p>Accessing a flag in the manner of the previous section only works\nif the flag was <code>DEFINE</code>-ed at the top of the file.  If it\nwasn't, you'll get an 'unknown variable' error.</p>\n\n<p>The <code>DECLARE_type</code> macro is available when you want to\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/doc/index.html"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 40,
                  "endLine": 182,
                  "endColumn": 44,
                  "snippet": {
                    "text": "<h2> <A name=define>DEFINE: Defining Flags In Program</A> </h2>\n\n<p> Defining a flag is easy: just use the appropriate macro for the\ntype you want the flag to be, as defined at the bottom of\n<code>gflags/gflags.h</code>.  Here's an example file,\n<code>foo.cc</code>:</p>\n\n",
                    "rendered": {
                      "text": "<h2> <A name=define>DEFINE: Defining Flags In Program</A> </h2>\n\n<p> Defining a flag is easy: just use the appropriate macro for the\ntype you want the flag to be, as defined at the bottom of\n<code>gflags/gflags.h</code>.  Here's an example file,\n<code>foo.cc</code>:</p>\n\n",
                      "markdown": "`<h2> <A name=define>DEFINE: Defining Flags In Program</A> </h2>\n\n<p> Defining a flag is easy: just use the appropriate macro for the\ntype you want the flag to be, as defined at the bottom of\n<code>gflags/gflags.h</code>.  Here's an example file,\n<code>foo.cc</code>:</p>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/doc/index.html"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 53,
                  "endLine": 325,
                  "endColumn": 59,
                  "snippet": {
                    "text": "DEFINE_validator(port, &ValidatePort);\n</pre>\n\n<p>By doing the registration at global initialization time (right\nafter the DEFINE_int32), we ensure that the registration happens before\nthe commandline is parsed at the beginning of <code>main()</code>.</p>\n\n",
                    "rendered": {
                      "text": "DEFINE_validator(port, &ValidatePort);\n</pre>\n\n<p>By doing the registration at global initialization time (right\nafter the DEFINE_int32), we ensure that the registration happens before\nthe commandline is parsed at the beginning of <code>main()</code>.</p>\n\n",
                      "markdown": "`DEFINE_validator(port, &ValidatePort);\n</pre>\n\n<p>By doing the registration at global initialization time (right\nafter the DEFINE_int32), we ensure that the registration happens before\nthe commandline is parsed at the beginning of <code>main()</code>.</p>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/doc/index.html"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 23,
                  "endLine": 268,
                  "endColumn": 28,
                  "snippet": {
                    "text": "<p>The <code>DECLARE_type</code> macro is available when you want to\nuse a flag that's defined in another file.  For instance, if I were\nwriting <code>bar.cc</code> but wanted to access the big_menu, flag, I\nwould put this near the top of <code>bar.cc</code>:</p>\n<pre>\n   DECLARE_bool(big_menu);\n</pre>\n",
                    "rendered": {
                      "text": "<p>The <code>DECLARE_type</code> macro is available when you want to\nuse a flag that's defined in another file.  For instance, if I were\nwriting <code>bar.cc</code> but wanted to access the big_menu, flag, I\nwould put this near the top of <code>bar.cc</code>:</p>\n<pre>\n   DECLARE_bool(big_menu);\n</pre>\n",
                      "markdown": "`<p>The <code>DECLARE_type</code> macro is available when you want to\nuse a flag that's defined in another file.  For instance, if I were\nwriting <code>bar.cc</code> but wanted to access the big_menu, flag, I\nwould put this near the top of <code>bar.cc</code>:</p>\n<pre>\n   DECLARE_bool(big_menu);\n</pre>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/doc/index.html"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 45,
                  "endLine": 262,
                  "endColumn": 50,
                  "snippet": {
                    "text": "<h2> <A name=declare>DECLARE: Using the Flag in a Different File</A> </h2>\n\n<p>Accessing a flag in the manner of the previous section only works\nif the flag was <code>DEFINE</code>-ed at the top of the file.  If it\nwasn't, you'll get an 'unknown variable' error.</p>\n\n<p>The <code>DECLARE_type</code> macro is available when you want to\n",
                    "rendered": {
                      "text": "<h2> <A name=declare>DECLARE: Using the Flag in a Different File</A> </h2>\n\n<p>Accessing a flag in the manner of the previous section only works\nif the flag was <code>DEFINE</code>-ed at the top of the file.  If it\nwasn't, you'll get an 'unknown variable' error.</p>\n\n<p>The <code>DECLARE_type</code> macro is available when you want to\n",
                      "markdown": "`<h2> <A name=declare>DECLARE: Using the Flag in a Different File</A> </h2>\n\n<p>Accessing a flag in the manner of the previous section only works\nif the flag was <code>DEFINE</code>-ed at the top of the file.  If it\nwasn't, you'll get an 'unknown variable' error.</p>\n\n<p>The <code>DECLARE_type</code> macro is available when you want to\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/doc/index.html"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 88,
                  "endLine": 137,
                  "endColumn": 93,
                  "snippet": {
                    "text": "lt, the\nmulti-threaded gflags library with shared linkage is chosen if available.</p>\n\n<p>When the source tree of the gflags project is included as subtree or submodule in the \"gflags\" directory of your project,\nreplace the above find_package command by <code>add_subdirectory(gflags)</code>. See the top of the <code>gflags/CMakeLists.txt</code>\nfile for a listing of available CMake variables that can be set before this command to configure the build of the\ngflags library. The default build settings are the build of a single-threaded static library which does not require\nany installation of the gfla",
                    "rendered": {
                      "text": "lt, the\nmulti-threaded gflags library with shared linkage is chosen if available.</p>\n\n<p>When the source tree of the gflags project is included as subtree or submodule in the \"gflags\" directory of your project,\nreplace the above find_package command by <code>add_subdirectory(gflags)</code>. See the top of the <code>gflags/CMakeLists.txt</code>\nfile for a listing of available CMake variables that can be set before this command to configure the build of the\ngflags library. The default build settings are the build of a single-threaded static library which does not require\nany installation of the gfla",
                      "markdown": "`lt, the\nmulti-threaded gflags library with shared linkage is chosen if available.</p>\n\n<p>When the source tree of the gflags project is included as subtree or submodule in the \"gflags\" directory of your project,\nreplace the above find_package command by <code>add_subdirectory(gflags)</code>. See the top of the <code>gflags/CMakeLists.txt</code>\nfile for a listing of available CMake variables that can be set before this command to configure the build of the\ngflags library. The default build settings are the build of a single-threaded static library which does not require\nany installation of the gfla`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/doc/index.html"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 109,
                  "endLine": 122,
                  "snippet": {
                    "text": "<p>To use an external gflags installation, add the following CMake code to your <code>CMakeLists.txt</code> file.</p>\n\n<p>Find gflags installation. The <code>gflags_DIR</code> variable must be set to the &lt;prefix&gt;/lib/cmake/gflags directory\ncontaining the gflags-config.cmake file if &lt;prefix&gt; is a non-standard location. Otherwise, CMake should find\nthe gflags installation automatically.</p>\n<pre>\n   find_package(gflags REQUIRED)\n</pre>\n",
                    "rendered": {
                      "text": "<p>To use an external gflags installation, add the following CMake code to your <code>CMakeLists.txt</code> file.</p>\n\n<p>Find gflags installation. The <code>gflags_DIR</code> variable must be set to the &lt;prefix&gt;/lib/cmake/gflags directory\ncontaining the gflags-config.cmake file if &lt;prefix&gt; is a non-standard location. Otherwise, CMake should find\nthe gflags installation automatically.</p>\n<pre>\n   find_package(gflags REQUIRED)\n</pre>\n",
                      "markdown": "`<p>To use an external gflags installation, add the following CMake code to your <code>CMakeLists.txt</code> file.</p>\n\n<p>Find gflags installation. The <code>gflags_DIR</code> variable must be set to the &lt;prefix&gt;/lib/cmake/gflags directory\ncontaining the gflags-config.cmake file if &lt;prefix&gt; is a non-standard location. Otherwise, CMake should find\nthe gflags installation automatically.</p>\n<pre>\n   find_package(gflags REQUIRED)\n</pre>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/doc/index.html"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 73,
                  "endLine": 114,
                  "endColumn": 79,
                  "snippet": {
                    "text": "<h2> <A name=cmake>Declare dependency on gflags with CMake</A></h2>\n\n<p>Using gflags within a project which uses <A href=\"http://www.cmake.org\">CMake</A> for its build system is easy.\nYou can either require an external installation of the gflags package and find it using CMake's find_package\ncommand, or include the gflags project as subtree or submodule within your project's source tree and add the directory\nusing CMake's add_subdirectory command.\n\n",
                    "rendered": {
                      "text": "<h2> <A name=cmake>Declare dependency on gflags with CMake</A></h2>\n\n<p>Using gflags within a project which uses <A href=\"http://www.cmake.org\">CMake</A> for its build system is easy.\nYou can either require an external installation of the gflags package and find it using CMake's find_package\ncommand, or include the gflags project as subtree or submodule within your project's source tree and add the directory\nusing CMake's add_subdirectory command.\n\n",
                      "markdown": "`<h2> <A name=cmake>Declare dependency on gflags with CMake</A></h2>\n\n<p>Using gflags within a project which uses <A href=\"http://www.cmake.org\">CMake</A> for its build system is easy.\nYou can either require an external installation of the gflags package and find it using CMake's find_package\ncommand, or include the gflags project as subtree or submodule within your project's source tree and add the directory\nusing CMake's add_subdirectory command.\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/doc/index.html"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 2,
                  "endLine": 102,
                  "endColumn": 7,
                  "snippet": {
                    "text": "<p>The gflags library can be downloaded from <A href=\"https://github.com/gflags/gflags\">GitHub</A>.\nYou can clone the project using the command:</p>\n<pre>\n   git clone https://github.com/gflags/gflags.git\n</pre>\n<p>Build and installation instructions are provided in the\n<A href=\"https://github.com/gflags/gflags/blob/master/INSTALL.md\">INSTALL</A> file.\n",
                    "rendered": {
                      "text": "<p>The gflags library can be downloaded from <A href=\"https://github.com/gflags/gflags\">GitHub</A>.\nYou can clone the project using the command:</p>\n<pre>\n   git clone https://github.com/gflags/gflags.git\n</pre>\n<p>Build and installation instructions are provided in the\n<A href=\"https://github.com/gflags/gflags/blob/master/INSTALL.md\">INSTALL</A> file.\n",
                      "markdown": "`<p>The gflags library can be downloaded from <A href=\"https://github.com/gflags/gflags\">GitHub</A>.\nYou can clone the project using the command:</p>\n<pre>\n   git clone https://github.com/gflags/gflags.git\n</pre>\n<p>Build and installation instructions are provided in the\n<A href=\"https://github.com/gflags/gflags/blob/master/INSTALL.md\">INSTALL</A> file.\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/doc/README.md"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 26,
                  "endLine": 1,
                  "endColumn": 30,
                  "snippet": {
                    "text": "To update the GitHub Pages at http://gflags.github.io/gflags/, use command:\n```\ngit subtree push --prefix=doc/ origin gh-pages\n```\n",
                    "rendered": {
                      "text": "To update the GitHub Pages at http://gflags.github.io/gflags/, use command:\n```\ngit subtree push --prefix=doc/ origin gh-pages\n```\n",
                      "markdown": "`To update the GitHub Pages at http://gflags.github.io/gflags/, use command:\n```\ngit subtree push --prefix=doc/ origin gh-pages\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/doc/README.md"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 2,
                  "endLine": 1,
                  "endColumn": 10,
                  "snippet": {
                    "text": "To update the GitHub Pages at http://gflags.github.io/gflags/, use command:\n```\ngit subtree push --prefix=doc/ origin gh-pages\n```\n",
                    "rendered": {
                      "text": "To update the GitHub Pages at http://gflags.github.io/gflags/, use command:\n```\ngit subtree push --prefix=doc/ origin gh-pages\n```\n",
                      "markdown": "`To update the GitHub Pages at http://gflags.github.io/gflags/, use command:\n```\ngit subtree push --prefix=doc/ origin gh-pages\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/doc/README.md"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 3,
                  "endLine": 3,
                  "endColumn": 4,
                  "snippet": {
                    "text": "To update the GitHub Pages at http://gflags.github.io/gflags/, use command:\n```\ngit subtree push --prefix=doc/ origin gh-pages\n```\n",
                    "rendered": {
                      "text": "To update the GitHub Pages at http://gflags.github.io/gflags/, use command:\n```\ngit subtree push --prefix=doc/ origin gh-pages\n```\n",
                      "markdown": "`To update the GitHub Pages at http://gflags.github.io/gflags/, use command:\n```\ngit subtree push --prefix=doc/ origin gh-pages\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.h.in"
                },
                "region": {
                  "startLine": 556,
                  "startColumn": 14,
                  "endLine": 556,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n// Strings are trickier, because they're not a POD, so we can't\n// construct them at static-initialization time (instead they get\n// constructed at global-constructor time, which is much later).  To\n// try to avoid crashes in that case, we use a char buffer to store\n// the string, which we can static-initialize, and then placement-new\n// into it later.  It's not perfect, but the best we can do.\n",
                    "rendered": {
                      "text": "\n// Strings are trickier, because they're not a POD, so we can't\n// construct them at static-initialization time (instead they get\n// constructed at global-constructor time, which is much later).  To\n// try to avoid crashes in that case, we use a char buffer to store\n// the string, which we can static-initialize, and then placement-new\n// into it later.  It's not perfect, but the best we can do.\n",
                      "markdown": "`\n// Strings are trickier, because they're not a POD, so we can't\n// construct them at static-initialization time (instead they get\n// constructed at global-constructor time, which is much later).  To\n// try to avoid crashes in that case, we use a char buffer to store\n// the string, which we can static-initialize, and then placement-new\n// into it later.  It's not perfect, but the best we can do.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.h.in"
                },
                "region": {
                  "startLine": 555,
                  "startColumn": 17,
                  "endLine": 555,
                  "endColumn": 21,
                  "snippet": {
                    "text": "   DEFINE_VARIABLE(double, D, name, val, txt)\n\n// Strings are trickier, because they're not a POD, so we can't\n// construct them at static-initialization time (instead they get\n// constructed at global-constructor time, which is much later).  To\n// try to avoid crashes in that case, we use a char buffer to store\n// the string, which we can static-initialize, and then placement-new\n",
                    "rendered": {
                      "text": "   DEFINE_VARIABLE(double, D, name, val, txt)\n\n// Strings are trickier, because they're not a POD, so we can't\n// construct them at static-initialization time (instead they get\n// constructed at global-constructor time, which is much later).  To\n// try to avoid crashes in that case, we use a char buffer to store\n// the string, which we can static-initialize, and then placement-new\n",
                      "markdown": "`   DEFINE_VARIABLE(double, D, name, val, txt)\n\n// Strings are trickier, because they're not a POD, so we can't\n// construct them at static-initialization time (instead they get\n// constructed at global-constructor time, which is much later).  To\n// try to avoid crashes in that case, we use a char buffer to store\n// the string, which we can static-initialize, and then placement-new\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.h.in"
                },
                "region": {
                  "startLine": 492,
                  "startColumn": 16,
                  "endLine": 492,
                  "endColumn": 20,
                  "snippet": {
                    "text": "// constant.  This guarantees that FLAG_##value is initialized at\n// static initialization time (e.g. before program-start) rather than\n// than global construction time (which is after program-start but\n// before main), at least when 'value' is a compile-time constant.  We\n// use a small trick for the \"default value\" variable, and call it\n// FLAGS_no<name>.  This serves the second purpose of assuring a\n// compile error if someone tries to define a flag named no<name>\n",
                    "rendered": {
                      "text": "// constant.  This guarantees that FLAG_##value is initialized at\n// static initialization time (e.g. before program-start) rather than\n// than global construction time (which is after program-start but\n// before main), at least when 'value' is a compile-time constant.  We\n// use a small trick for the \"default value\" variable, and call it\n// FLAGS_no<name>.  This serves the second purpose of assuring a\n// compile error if someone tries to define a flag named no<name>\n",
                      "markdown": "`// constant.  This guarantees that FLAG_##value is initialized at\n// static initialization time (e.g. before program-start) rather than\n// than global construction time (which is after program-start but\n// before main), at least when 'value' is a compile-time constant.  We\n// use a small trick for the \"default value\" variable, and call it\n// FLAGS_no<name>.  This serves the second purpose of assuring a\n// compile error if someone tries to define a flag named no<name>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.h.in"
                },
                "region": {
                  "startLine": 489,
                  "startColumn": 62,
                  "endLine": 490,
                  "snippet": {
                    "text": "// Each command-line flag has two variables associated with it: one\n// with the current value, and one with the default value.  However,\n// we have a third variable, which is where value is assigned; it's a\n// constant.  This guarantees that FLAG_##value is initialized at\n// static initialization time (e.g. before program-start) rather than\n// than global construction time (which is after program-start but\n// before main), at least when 'value' is a compile-time constant.  We\n// use a small trick for the \"default value\" variable, and call it\n",
                    "rendered": {
                      "text": "// Each command-line flag has two variables associated with it: one\n// with the current value, and one with the default value.  However,\n// we have a third variable, which is where value is assigned; it's a\n// constant.  This guarantees that FLAG_##value is initialized at\n// static initialization time (e.g. before program-start) rather than\n// than global construction time (which is after program-start but\n// before main), at least when 'value' is a compile-time constant.  We\n// use a small trick for the \"default value\" variable, and call it\n",
                      "markdown": "`// Each command-line flag has two variables associated with it: one\n// with the current value, and one with the default value.  However,\n// we have a third variable, which is where value is assigned; it's a\n// constant.  This guarantees that FLAG_##value is initialized at\n// static initialization time (e.g. before program-start) rather than\n// than global construction time (which is after program-start but\n// before main), at least when 'value' is a compile-time constant.  We\n// use a small trick for the \"default value\" variable, and call it\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.h.in"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 34,
                  "endLine": 402,
                  "endColumn": 38,
                  "snippet": {
                    "text": "// variables in global constructors and have that not crash, even if\n// their global constructor runs before the global constructor here.\n// (Obviously, we can't guarantee the flags will have the correct\n// default value in that case, but at least accessing them is safe.)\n// The only way to do that is have flags point to a static buffer.\n// So we make one, using a union to ensure proper alignment, and\n// then use placement-new to actually set up the flag with the\n",
                    "rendered": {
                      "text": "// variables in global constructors and have that not crash, even if\n// their global constructor runs before the global constructor here.\n// (Obviously, we can't guarantee the flags will have the correct\n// default value in that case, but at least accessing them is safe.)\n// The only way to do that is have flags point to a static buffer.\n// So we make one, using a union to ensure proper alignment, and\n// then use placement-new to actually set up the flag with the\n",
                      "markdown": "`// variables in global constructors and have that not crash, even if\n// their global constructor runs before the global constructor here.\n// (Obviously, we can't guarantee the flags will have the correct\n// default value in that case, but at least accessing them is safe.)\n// The only way to do that is have flags point to a static buffer.\n// So we make one, using a union to ensure proper alignment, and\n// then use placement-new to actually set up the flag with the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.h.in"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 44,
                  "endLine": 264,
                  "endColumn": 48,
                  "snippet": {
                    "text": "//     FLAG_foo = false;\n//     FLAG_bar = \"some value\";\n//\n//     // test happens here.  You can return at any time\n//     // without worrying about restoring the FLAG values.\n//   }\n//\n",
                    "rendered": {
                      "text": "//     FLAG_foo = false;\n//     FLAG_bar = \"some value\";\n//\n//     // test happens here.  You can return at any time\n//     // without worrying about restoring the FLAG values.\n//   }\n//\n",
                      "markdown": "`//     FLAG_foo = false;\n//     FLAG_bar = \"some value\";\n//\n//     // test happens here.  You can return at any time\n//     // without worrying about restoring the FLAG values.\n//   }\n//\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.h.in"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 4,
                  "endLine": 229,
                  "endColumn": 12,
                  "snippet": {
                    "text": "enum FlagSettingMode {\n  // update the flag's value (can call this multiple times).\n  SET_FLAGS_VALUE,\n  // update the flag's value, but *only if* it has not yet been updated\n  // with SET_FLAGS_VALUE, SET_FLAG_IF_DEFAULT, or \"FLAGS_xxx = nondef\".\n  SET_FLAG_IF_DEFAULT,\n  // set the flag's default value to this.  If the flag has not yet updated\n",
                    "rendered": {
                      "text": "enum FlagSettingMode {\n  // update the flag's value (can call this multiple times).\n  SET_FLAGS_VALUE,\n  // update the flag's value, but *only if* it has not yet been updated\n  // with SET_FLAGS_VALUE, SET_FLAG_IF_DEFAULT, or \"FLAGS_xxx = nondef\".\n  SET_FLAG_IF_DEFAULT,\n  // set the flag's default value to this.  If the flag has not yet updated\n",
                      "markdown": "`enum FlagSettingMode {\n  // update the flag's value (can call this multiple times).\n  SET_FLAGS_VALUE,\n  // update the flag's value, but *only if* it has not yet been updated\n  // with SET_FLAGS_VALUE, SET_FLAG_IF_DEFAULT, or \"FLAGS_xxx = nondef\".\n  SET_FLAG_IF_DEFAULT,\n  // set the flag's default value to this.  If the flag has not yet updated\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.h.in"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 4,
                  "endLine": 227,
                  "endColumn": 12,
                  "snippet": {
                    "text": "extern GFLAGS_DLL_DECL CommandLineFlagInfo GetCommandLineFlagInfoOrDie(const char* name);\n\nenum FlagSettingMode {\n  // update the flag's value (can call this multiple times).\n  SET_FLAGS_VALUE,\n  // update the flag's value, but *only if* it has not yet been updated\n  // with SET_FLAGS_VALUE, SET_FLAG_IF_DEFAULT, or \"FLAGS_xxx = nondef\".\n",
                    "rendered": {
                      "text": "extern GFLAGS_DLL_DECL CommandLineFlagInfo GetCommandLineFlagInfoOrDie(const char* name);\n\nenum FlagSettingMode {\n  // update the flag's value (can call this multiple times).\n  SET_FLAGS_VALUE,\n  // update the flag's value, but *only if* it has not yet been updated\n  // with SET_FLAGS_VALUE, SET_FLAG_IF_DEFAULT, or \"FLAGS_xxx = nondef\".\n",
                      "markdown": "`extern GFLAGS_DLL_DECL CommandLineFlagInfo GetCommandLineFlagInfoOrDie(const char* name);\n\nenum FlagSettingMode {\n  // update the flag's value (can call this multiple times).\n  SET_FLAGS_VALUE,\n  // update the flag's value, but *only if* it has not yet been updated\n  // with SET_FLAGS_VALUE, SET_FLAG_IF_DEFAULT, or \"FLAGS_xxx = nondef\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.h.in"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 32,
                  "endLine": 113,
                  "endColumn": 36,
                  "snippet": {
                    "text": "// flag, the flag will retain its current value. If it returns false for the\n// default value, ParseCommandLineFlags() will die.\n//\n// This function is safe to call at global construct time (as in the\n// example below).\n//\n// Example use:\n",
                    "rendered": {
                      "text": "// flag, the flag will retain its current value. If it returns false for the\n// default value, ParseCommandLineFlags() will die.\n//\n// This function is safe to call at global construct time (as in the\n// example below).\n//\n// Example use:\n",
                      "markdown": "`// flag, the flag will retain its current value. If it returns false for the\n// default value, ParseCommandLineFlags() will die.\n//\n// This function is safe to call at global construct time (as in the\n// example below).\n//\n// Example use:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.h.in"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 22,
                  "endLine": 102,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n// --------------------------------------------------------------------\n// To actually define a flag in a file, use DEFINE_bool,\n// DEFINE_string, etc. at the bottom of this file.  You may also find\n// it useful to register a validator with the flag.  This ensures that\n// when the flag is parsed from the commandline, or is later set via\n// SetCommandLineOption, we call the validation function. It is _not_\n",
                    "rendered": {
                      "text": "\n// --------------------------------------------------------------------\n// To actually define a flag in a file, use DEFINE_bool,\n// DEFINE_string, etc. at the bottom of this file.  You may also find\n// it useful to register a validator with the flag.  This ensures that\n// when the flag is parsed from the commandline, or is later set via\n// SetCommandLineOption, we call the validation function. It is _not_\n",
                      "markdown": "`\n// --------------------------------------------------------------------\n// To actually define a flag in a file, use DEFINE_bool,\n// DEFINE_string, etc. at the bottom of this file.  You may also find\n// it useful to register a validator with the flag.  This ensures that\n// when the flag is parsed from the commandline, or is later set via\n// SetCommandLineOption, we call the validation function. It is _not_\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.h.in"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 11,
                  "endLine": 54,
                  "endColumn": 15,
                  "snippet": {
                    "text": "//      if (FLAGS_verbose) printf(\"Records %d-%d\\n\", FLAGS_start, FLAGS_end);\n//    }\n//\n//    Then, at the command-line:\n//       ./foo --noverbose --start=5 --end=100\n//\n// For more details, see\n",
                    "rendered": {
                      "text": "//      if (FLAGS_verbose) printf(\"Records %d-%d\\n\", FLAGS_start, FLAGS_end);\n//    }\n//\n//    Then, at the command-line:\n//       ./foo --noverbose --start=5 --end=100\n//\n// For more details, see\n",
                      "markdown": "`//      if (FLAGS_verbose) printf(\"Records %d-%d\\n\", FLAGS_start, FLAGS_end);\n//    }\n//\n//    Then, at the command-line:\n//       ./foo --noverbose --start=5 --end=100\n//\n// For more details, see\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.h.in"
                },
                "region": {
                  "startLine": 555,
                  "startColumn": 42,
                  "endLine": 555,
                  "endColumn": 48,
                  "snippet": {
                    "text": "   DEFINE_VARIABLE(double, D, name, val, txt)\n\n// Strings are trickier, because they're not a POD, so we can't\n// construct them at static-initialization time (instead they get\n// constructed at global-constructor time, which is much later).  To\n// try to avoid crashes in that case, we use a char buffer to store\n// the string, which we can static-initialize, and then placement-new\n",
                    "rendered": {
                      "text": "   DEFINE_VARIABLE(double, D, name, val, txt)\n\n// Strings are trickier, because they're not a POD, so we can't\n// construct them at static-initialization time (instead they get\n// constructed at global-constructor time, which is much later).  To\n// try to avoid crashes in that case, we use a char buffer to store\n// the string, which we can static-initialize, and then placement-new\n",
                      "markdown": "`   DEFINE_VARIABLE(double, D, name, val, txt)\n\n// Strings are trickier, because they're not a POD, so we can't\n// construct them at static-initialization time (instead they get\n// constructed at global-constructor time, which is much later).  To\n// try to avoid crashes in that case, we use a char buffer to store\n// the string, which we can static-initialize, and then placement-new\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.h.in"
                },
                "region": {
                  "startLine": 491,
                  "startColumn": 27,
                  "endLine": 491,
                  "endColumn": 33,
                  "snippet": {
                    "text": "// we have a third variable, which is where value is assigned; it's a\n// constant.  This guarantees that FLAG_##value is initialized at\n// static initialization time (e.g. before program-start) rather than\n// than global construction time (which is after program-start but\n// before main), at least when 'value' is a compile-time constant.  We\n// use a small trick for the \"default value\" variable, and call it\n// FLAGS_no<name>.  This serves the second purpose of assuring a\n",
                    "rendered": {
                      "text": "// we have a third variable, which is where value is assigned; it's a\n// constant.  This guarantees that FLAG_##value is initialized at\n// static initialization time (e.g. before program-start) rather than\n// than global construction time (which is after program-start but\n// before main), at least when 'value' is a compile-time constant.  We\n// use a small trick for the \"default value\" variable, and call it\n// FLAGS_no<name>.  This serves the second purpose of assuring a\n",
                      "markdown": "`// we have a third variable, which is where value is assigned; it's a\n// constant.  This guarantees that FLAG_##value is initialized at\n// static initialization time (e.g. before program-start) rather than\n// than global construction time (which is after program-start but\n// before main), at least when 'value' is a compile-time constant.  We\n// use a small trick for the \"default value\" variable, and call it\n// FLAGS_no<name>.  This serves the second purpose of assuring a\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.h.in"
                },
                "region": {
                  "startLine": 490,
                  "startColumn": 24,
                  "endLine": 490,
                  "endColumn": 30,
                  "snippet": {
                    "text": "// with the current value, and one with the default value.  However,\n// we have a third variable, which is where value is assigned; it's a\n// constant.  This guarantees that FLAG_##value is initialized at\n// static initialization time (e.g. before program-start) rather than\n// than global construction time (which is after program-start but\n// before main), at least when 'value' is a compile-time constant.  We\n// use a small trick for the \"default value\" variable, and call it\n",
                    "rendered": {
                      "text": "// with the current value, and one with the default value.  However,\n// we have a third variable, which is where value is assigned; it's a\n// constant.  This guarantees that FLAG_##value is initialized at\n// static initialization time (e.g. before program-start) rather than\n// than global construction time (which is after program-start but\n// before main), at least when 'value' is a compile-time constant.  We\n// use a small trick for the \"default value\" variable, and call it\n",
                      "markdown": "`// with the current value, and one with the default value.  However,\n// we have a third variable, which is where value is assigned; it's a\n// constant.  This guarantees that FLAG_##value is initialized at\n// static initialization time (e.g. before program-start) rather than\n// than global construction time (which is after program-start but\n// before main), at least when 'value' is a compile-time constant.  We\n// use a small trick for the \"default value\" variable, and call it\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.h.in"
                },
                "region": {
                  "startLine": 357,
                  "startColumn": 31,
                  "endLine": 357,
                  "endColumn": 37,
                  "snippet": {
                    "text": "// ParseCommandLineFlags during initialization, in order to allow for\n// changing default values for some FLAGS (via\n// e.g. SetCommandLineOptionWithMode calls) between the time of\n// command line parsing and the time of dumping help information for\n// the flags as a result of command line parsing.  If a flag is\n// defined more than once in the command line or flag file, the last\n// definition is used.  Returns the index (into argv) of the first\n",
                    "rendered": {
                      "text": "// ParseCommandLineFlags during initialization, in order to allow for\n// changing default values for some FLAGS (via\n// e.g. SetCommandLineOptionWithMode calls) between the time of\n// command line parsing and the time of dumping help information for\n// the flags as a result of command line parsing.  If a flag is\n// defined more than once in the command line or flag file, the last\n// definition is used.  Returns the index (into argv) of the first\n",
                      "markdown": "`// ParseCommandLineFlags during initialization, in order to allow for\n// changing default values for some FLAGS (via\n// e.g. SetCommandLineOptionWithMode calls) between the time of\n// command line parsing and the time of dumping help information for\n// the flags as a result of command line parsing.  If a flag is\n// defined more than once in the command line or flag file, the last\n// definition is used.  Returns the index (into argv) of the first\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.h.in"
                },
                "region": {
                  "startLine": 356,
                  "startColumn": 55,
                  "endLine": 356,
                  "endColumn": 61,
                  "snippet": {
                    "text": "// HandleCommandLineHelpFlags can be used instead of a call to\n// ParseCommandLineFlags during initialization, in order to allow for\n// changing default values for some FLAGS (via\n// e.g. SetCommandLineOptionWithMode calls) between the time of\n// command line parsing and the time of dumping help information for\n// the flags as a result of command line parsing.  If a flag is\n// defined more than once in the command line or flag file, the last\n",
                    "rendered": {
                      "text": "// HandleCommandLineHelpFlags can be used instead of a call to\n// ParseCommandLineFlags during initialization, in order to allow for\n// changing default values for some FLAGS (via\n// e.g. SetCommandLineOptionWithMode calls) between the time of\n// command line parsing and the time of dumping help information for\n// the flags as a result of command line parsing.  If a flag is\n// defined more than once in the command line or flag file, the last\n",
                      "markdown": "`// HandleCommandLineHelpFlags can be used instead of a call to\n// ParseCommandLineFlags during initialization, in order to allow for\n// changing default values for some FLAGS (via\n// e.g. SetCommandLineOptionWithMode calls) between the time of\n// command line parsing and the time of dumping help information for\n// the flags as a result of command line parsing.  If a flag is\n// defined more than once in the command line or flag file, the last\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.h.in"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 51,
                  "endLine": 265,
                  "snippet": {
                    "text": "//     FLAG_foo = false;\n//     FLAG_bar = \"some value\";\n//\n//     // test happens here.  You can return at any time\n//     // without worrying about restoring the FLAG values.\n//   }\n//\n// Note: This class is marked with GFLAGS_ATTRIBUTE_UNUSED because all\n",
                    "rendered": {
                      "text": "//     FLAG_foo = false;\n//     FLAG_bar = \"some value\";\n//\n//     // test happens here.  You can return at any time\n//     // without worrying about restoring the FLAG values.\n//   }\n//\n// Note: This class is marked with GFLAGS_ATTRIBUTE_UNUSED because all\n",
                      "markdown": "`//     FLAG_foo = false;\n//     FLAG_bar = \"some value\";\n//\n//     // test happens here.  You can return at any time\n//     // without worrying about restoring the FLAG values.\n//   }\n//\n// Note: This class is marked with GFLAGS_ATTRIBUTE_UNUSED because all\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.h.in"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 52,
                  "endLine": 113,
                  "endColumn": 58,
                  "snippet": {
                    "text": "// flag, the flag will retain its current value. If it returns false for the\n// default value, ParseCommandLineFlags() will die.\n//\n// This function is safe to call at global construct time (as in the\n// example below).\n//\n// Example use:\n",
                    "rendered": {
                      "text": "// flag, the flag will retain its current value. If it returns false for the\n// default value, ParseCommandLineFlags() will die.\n//\n// This function is safe to call at global construct time (as in the\n// example below).\n//\n// Example use:\n",
                      "markdown": "`// flag, the flag will retain its current value. If it returns false for the\n// default value, ParseCommandLineFlags() will die.\n//\n// This function is safe to call at global construct time (as in the\n// example below).\n//\n// Example use:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.h.in"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 64,
                  "endLine": 103,
                  "snippet": {
                    "text": "\n// --------------------------------------------------------------------\n// To actually define a flag in a file, use DEFINE_bool,\n// DEFINE_string, etc. at the bottom of this file.  You may also find\n// it useful to register a validator with the flag.  This ensures that\n// when the flag is parsed from the commandline, or is later set via\n// SetCommandLineOption, we call the validation function. It is _not_\n// called when you assign the value to the flag directly using the = operator.\n",
                    "rendered": {
                      "text": "\n// --------------------------------------------------------------------\n// To actually define a flag in a file, use DEFINE_bool,\n// DEFINE_string, etc. at the bottom of this file.  You may also find\n// it useful to register a validator with the flag.  This ensures that\n// when the flag is parsed from the commandline, or is later set via\n// SetCommandLineOption, we call the validation function. It is _not_\n// called when you assign the value to the flag directly using the = operator.\n",
                      "markdown": "`\n// --------------------------------------------------------------------\n// To actually define a flag in a file, use DEFINE_bool,\n// DEFINE_string, etc. at the bottom of this file.  You may also find\n// it useful to register a validator with the flag.  This ensures that\n// when the flag is parsed from the commandline, or is later set via\n// SetCommandLineOption, we call the validation function. It is _not_\n// called when you assign the value to the flag directly using the = operator.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_strip_flags_test.cc"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 4,
                  "endLine": 53,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  ParseCommandLineFlags(&argc, &argv, false);\n\n  // Unfortunately, for us, libtool can replace executables with a shell\n  // script that does some work before calling the 'real' executable\n  // under a different name.  We need the 'real' executable name to run\n  // 'strings' on it, so we construct this binary to print the real\n  // name (argv[0]) on stdout when run.\n",
                    "rendered": {
                      "text": "  ParseCommandLineFlags(&argc, &argv, false);\n\n  // Unfortunately, for us, libtool can replace executables with a shell\n  // script that does some work before calling the 'real' executable\n  // under a different name.  We need the 'real' executable name to run\n  // 'strings' on it, so we construct this binary to print the real\n  // name (argv[0]) on stdout when run.\n",
                      "markdown": "`  ParseCommandLineFlags(&argc, &argv, false);\n\n  // Unfortunately, for us, libtool can replace executables with a shell\n  // script that does some work before calling the 'real' executable\n  // under a different name.  We need the 'real' executable name to run\n  // 'strings' on it, so we construct this binary to print the real\n  // name (argv[0]) on stdout when run.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_strip_flags_test.cc"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 2,
                  "endLine": 34,
                  "endColumn": 10,
                  "snippet": {
                    "text": "// Author: csilvers@google.com (Craig Silverstein)\n//\n// A simple program that uses STRIP_FLAG_HELP.  We'll have a shell\n// script that runs 'strings' over this program and makes sure\n// that the help string is not in there.\n\n#define STRIP_FLAG_HELP 1\n",
                    "rendered": {
                      "text": "// Author: csilvers@google.com (Craig Silverstein)\n//\n// A simple program that uses STRIP_FLAG_HELP.  We'll have a shell\n// script that runs 'strings' over this program and makes sure\n// that the help string is not in there.\n\n#define STRIP_FLAG_HELP 1\n",
                      "markdown": "`// Author: csilvers@google.com (Craig Silverstein)\n//\n// A simple program that uses STRIP_FLAG_HELP.  We'll have a shell\n// script that runs 'strings' over this program and makes sure\n// that the help string is not in there.\n\n#define STRIP_FLAG_HELP 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.h.in"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 25,
                  "endLine": 102,
                  "endColumn": 31,
                  "snippet": {
                    "text": "//   $ ./bin/path/another_binary --gfs_u<TAB>\n// (etc)\n//\n// Sadly, it appears that bash gives no easy way to force this behavior for\n// all commands.  That's where the \"time\" in the above example comes in.\n// If you haven't specifically added a command to the list of completion\n// supported commands, you can still get completions by prefixing the\n",
                    "rendered": {
                      "text": "//   $ ./bin/path/another_binary --gfs_u<TAB>\n// (etc)\n//\n// Sadly, it appears that bash gives no easy way to force this behavior for\n// all commands.  That's where the \"time\" in the above example comes in.\n// If you haven't specifically added a command to the list of completion\n// supported commands, you can still get completions by prefixing the\n",
                      "markdown": "`//   $ ./bin/path/another_binary --gfs_u<TAB>\n// (etc)\n//\n// Sadly, it appears that bash gives no easy way to force this behavior for\n// all commands.  That's where the \"time\" in the above example comes in.\n// If you haven't specifically added a command to the list of completion\n// supported commands, you can still get completions by prefixing the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.h.in"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 2,
                  "endLine": 86,
                  "endColumn": 8,
                  "snippet": {
                    "text": "// search word will force the exhaustive list of matches to be printed.\n//\n// ** How to have bash accept completions from a binary:\n// Bash requires that it be informed about each command that programmatic\n// completion should be enabled for.  Example addition to a .bashrc\n// file would be (your path to gflags_completions.sh file may differ):\n\n",
                    "rendered": {
                      "text": "// search word will force the exhaustive list of matches to be printed.\n//\n// ** How to have bash accept completions from a binary:\n// Bash requires that it be informed about each command that programmatic\n// completion should be enabled for.  Example addition to a .bashrc\n// file would be (your path to gflags_completions.sh file may differ):\n\n",
                      "markdown": "`// search word will force the exhaustive list of matches to be printed.\n//\n// ** How to have bash accept completions from a binary:\n// Bash requires that it be informed about each command that programmatic\n// completion should be enabled for.  Example addition to a .bashrc\n// file would be (your path to gflags_completions.sh file may differ):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.h.in"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 17,
                  "endLine": 85,
                  "endColumn": 23,
                  "snippet": {
                    "text": "// really wanted to see all possible matches, appending a '+' to the\n// search word will force the exhaustive list of matches to be printed.\n//\n// ** How to have bash accept completions from a binary:\n// Bash requires that it be informed about each command that programmatic\n// completion should be enabled for.  Example addition to a .bashrc\n// file would be (your path to gflags_completions.sh file may differ):\n",
                    "rendered": {
                      "text": "// really wanted to see all possible matches, appending a '+' to the\n// search word will force the exhaustive list of matches to be printed.\n//\n// ** How to have bash accept completions from a binary:\n// Bash requires that it be informed about each command that programmatic\n// completion should be enabled for.  Example addition to a .bashrc\n// file would be (your path to gflags_completions.sh file may differ):\n",
                      "markdown": "`// really wanted to see all possible matches, appending a '+' to the\n// search word will force the exhaustive list of matches to be printed.\n//\n// ** How to have bash accept completions from a binary:\n// Bash requires that it be informed about each command that programmatic\n// completion should be enabled for.  Example addition to a .bashrc\n// file would be (your path to gflags_completions.sh file may differ):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.h.in"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 16,
                  "endLine": 81,
                  "endColumn": 22,
                  "snippet": {
                    "text": "//   --foo???<TAB>  Same as prior case, but also search in flag\n//                  descriptions for 'foo'\n// Finally, we'll trim the output to a relatively small number of\n// flags to keep bash quiet about the verbosity of output.  If one\n// really wanted to see all possible matches, appending a '+' to the\n// search word will force the exhaustive list of matches to be printed.\n//\n",
                    "rendered": {
                      "text": "//   --foo???<TAB>  Same as prior case, but also search in flag\n//                  descriptions for 'foo'\n// Finally, we'll trim the output to a relatively small number of\n// flags to keep bash quiet about the verbosity of output.  If one\n// really wanted to see all possible matches, appending a '+' to the\n// search word will force the exhaustive list of matches to be printed.\n//\n",
                      "markdown": "`//   --foo???<TAB>  Same as prior case, but also search in flag\n//                  descriptions for 'foo'\n// Finally, we'll trim the output to a relatively small number of\n// flags to keep bash quiet about the verbosity of output.  If one\n// really wanted to see all possible matches, appending a '+' to the\n// search word will force the exhaustive list of matches to be printed.\n//\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.h.in"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 40,
                  "endLine": 67,
                  "endColumn": 44,
                  "snippet": {
                    "text": "// description as can fit on a single terminal line width, as specified\n// by the flag --tab_completion_columns).  Furthermore, we'll try to\n// make bash order the output such that the most useful or relevant\n// flags are the most likely to be shown at the top.\n//\n// ** Additional features:\n// To assist in finding that one really useful flag, substring matching\n",
                    "rendered": {
                      "text": "// description as can fit on a single terminal line width, as specified\n// by the flag --tab_completion_columns).  Furthermore, we'll try to\n// make bash order the output such that the most useful or relevant\n// flags are the most likely to be shown at the top.\n//\n// ** Additional features:\n// To assist in finding that one really useful flag, substring matching\n",
                      "markdown": "`// description as can fit on a single terminal line width, as specified\n// by the flag --tab_completion_columns).  Furthermore, we'll try to\n// make bash order the output such that the most useful or relevant\n// flags are the most likely to be shown at the top.\n//\n// ** Additional features:\n// To assist in finding that one really useful flag, substring matching\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.h.in"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 7,
                  "endLine": 66,
                  "endColumn": 13,
                  "snippet": {
                    "text": "// we'll include the default flag value and as much of the flag's\n// description as can fit on a single terminal line width, as specified\n// by the flag --tab_completion_columns).  Furthermore, we'll try to\n// make bash order the output such that the most useful or relevant\n// flags are the most likely to be shown at the top.\n//\n// ** Additional features:\n",
                    "rendered": {
                      "text": "// we'll include the default flag value and as much of the flag's\n// description as can fit on a single terminal line width, as specified\n// by the flag --tab_completion_columns).  Furthermore, we'll try to\n// make bash order the output such that the most useful or relevant\n// flags are the most likely to be shown at the top.\n//\n// ** Additional features:\n",
                      "markdown": "`// we'll include the default flag value and as much of the flag's\n// description as can fit on a single terminal line width, as specified\n// by the flag --tab_completion_columns).  Furthermore, we'll try to\n// make bash order the output such that the most useful or relevant\n// flags are the most likely to be shown at the top.\n//\n// ** Additional features:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.h.in"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 19,
                  "endLine": 56,
                  "endColumn": 25,
                  "snippet": {
                    "text": "// printed to stdout.  If these lines all contain a common prefix\n// longer than the cursor word, bash will replace the cursor word\n// with that common prefix, and display nothing.  If there isn't such\n// a common prefix, bash will display the lines in pages using 'more'.\n//\n// ** Strategy taken for command line completions:\n// If we can deduce either the exact flag intended, or a common flag\n",
                    "rendered": {
                      "text": "// printed to stdout.  If these lines all contain a common prefix\n// longer than the cursor word, bash will replace the cursor word\n// with that common prefix, and display nothing.  If there isn't such\n// a common prefix, bash will display the lines in pages using 'more'.\n//\n// ** Strategy taken for command line completions:\n// If we can deduce either the exact flag intended, or a common flag\n",
                      "markdown": "`// printed to stdout.  If these lines all contain a common prefix\n// longer than the cursor word, bash will replace the cursor word\n// with that common prefix, and display nothing.  If there isn't such\n// a common prefix, bash will display the lines in pages using 'more'.\n//\n// ** Strategy taken for command line completions:\n// If we can deduce either the exact flag intended, or a common flag\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.h.in"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 31,
                  "endLine": 54,
                  "endColumn": 37,
                  "snippet": {
                    "text": "// being executed, the word being completed, and the previous word\n// (if any).  Bash then expects a sequence of output lines to be\n// printed to stdout.  If these lines all contain a common prefix\n// longer than the cursor word, bash will replace the cursor word\n// with that common prefix, and display nothing.  If there isn't such\n// a common prefix, bash will display the lines in pages using 'more'.\n//\n",
                    "rendered": {
                      "text": "// being executed, the word being completed, and the previous word\n// (if any).  Bash then expects a sequence of output lines to be\n// printed to stdout.  If these lines all contain a common prefix\n// longer than the cursor word, bash will replace the cursor word\n// with that common prefix, and display nothing.  If there isn't such\n// a common prefix, bash will display the lines in pages using 'more'.\n//\n",
                      "markdown": "`// being executed, the word being completed, and the previous word\n// (if any).  Bash then expects a sequence of output lines to be\n// printed to stdout.  If these lines all contain a common prefix\n// longer than the cursor word, bash will replace the cursor word\n// with that common prefix, and display nothing.  If there isn't such\n// a common prefix, bash will display the lines in pages using 'more'.\n//\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.h.in"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 13,
                  "endLine": 52,
                  "endColumn": 19,
                  "snippet": {
                    "text": "// current 'cursor word'.  It does this by (in this case) invoking a\n// command with some additional arguments identifying the command\n// being executed, the word being completed, and the previous word\n// (if any).  Bash then expects a sequence of output lines to be\n// printed to stdout.  If these lines all contain a common prefix\n// longer than the cursor word, bash will replace the cursor word\n// with that common prefix, and display nothing.  If there isn't such\n",
                    "rendered": {
                      "text": "// current 'cursor word'.  It does this by (in this case) invoking a\n// command with some additional arguments identifying the command\n// being executed, the word being completed, and the previous word\n// (if any).  Bash then expects a sequence of output lines to be\n// printed to stdout.  If these lines all contain a common prefix\n// longer than the cursor word, bash will replace the cursor word\n// with that common prefix, and display nothing.  If there isn't such\n",
                      "markdown": "`// current 'cursor word'.  It does this by (in this case) invoking a\n// command with some additional arguments identifying the command\n// being executed, the word being completed, and the previous word\n// (if any).  Bash then expects a sequence of output lines to be\n// printed to stdout.  If these lines all contain a common prefix\n// longer than the cursor word, bash will replace the cursor word\n// with that common prefix, and display nothing.  If there isn't such\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.h.in"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 2,
                  "endLine": 48,
                  "endColumn": 8,
                  "snippet": {
                    "text": "// handling.\n//\n// ** Overview of Bash completions:\n// Bash can be told to programmatically determine completions for the\n// current 'cursor word'.  It does this by (in this case) invoking a\n// command with some additional arguments identifying the command\n// being executed, the word being completed, and the previous word\n",
                    "rendered": {
                      "text": "// handling.\n//\n// ** Overview of Bash completions:\n// Bash can be told to programmatically determine completions for the\n// current 'cursor word'.  It does this by (in this case) invoking a\n// command with some additional arguments identifying the command\n// being executed, the word being completed, and the previous word\n",
                      "markdown": "`// handling.\n//\n// ** Overview of Bash completions:\n// Bash can be told to programmatically determine completions for the\n// current 'cursor word'.  It does this by (in this case) invoking a\n// command with some additional arguments identifying the command\n// being executed, the word being completed, and the previous word\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.h.in"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 17,
                  "endLine": 47,
                  "endColumn": 23,
                  "snippet": {
                    "text": "// process will be terminated, similar to --helpshort flag\n// handling.\n//\n// ** Overview of Bash completions:\n// Bash can be told to programmatically determine completions for the\n// current 'cursor word'.  It does this by (in this case) invoking a\n// command with some additional arguments identifying the command\n",
                    "rendered": {
                      "text": "// process will be terminated, similar to --helpshort flag\n// handling.\n//\n// ** Overview of Bash completions:\n// Bash can be told to programmatically determine completions for the\n// current 'cursor word'.  It does this by (in this case) invoking a\n// command with some additional arguments identifying the command\n",
                      "markdown": "`// process will be terminated, similar to --helpshort flag\n// handling.\n//\n// ** Overview of Bash completions:\n// Bash can be told to programmatically determine completions for the\n// current 'cursor word'.  It does this by (in this case) invoking a\n// command with some additional arguments identifying the command\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.h.in"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 6,
                  "endLine": 107,
                  "endColumn": 11,
                  "snippet": {
                    "text": "// If you haven't specifically added a command to the list of completion\n// supported commands, you can still get completions by prefixing the\n// entire command with \"env\".\n//   $ env /some/brand/new/binary --vmod<TAB>\n// Assuming that \"binary\" is a newly compiled binary, this should still\n// produce the expected completion output.\n\n",
                    "rendered": {
                      "text": "// If you haven't specifically added a command to the list of completion\n// supported commands, you can still get completions by prefixing the\n// entire command with \"env\".\n//   $ env /some/brand/new/binary --vmod<TAB>\n// Assuming that \"binary\" is a newly compiled binary, this should still\n// produce the expected completion output.\n\n",
                      "markdown": "`// If you haven't specifically added a command to the list of completion\n// supported commands, you can still get completions by prefixing the\n// entire command with \"env\".\n//   $ env /some/brand/new/binary --vmod<TAB>\n// Assuming that \"binary\" is a newly compiled binary, this should still\n// produce the expected completion output.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.h.in"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 25,
                  "endLine": 102,
                  "endColumn": 31,
                  "snippet": {
                    "text": "//   $ ./bin/path/another_binary --gfs_u<TAB>\n// (etc)\n//\n// Sadly, it appears that bash gives no easy way to force this behavior for\n// all commands.  That's where the \"time\" in the above example comes in.\n// If you haven't specifically added a command to the list of completion\n// supported commands, you can still get completions by prefixing the\n",
                    "rendered": {
                      "text": "//   $ ./bin/path/another_binary --gfs_u<TAB>\n// (etc)\n//\n// Sadly, it appears that bash gives no easy way to force this behavior for\n// all commands.  That's where the \"time\" in the above example comes in.\n// If you haven't specifically added a command to the list of completion\n// supported commands, you can still get completions by prefixing the\n",
                      "markdown": "`//   $ ./bin/path/another_binary --gfs_u<TAB>\n// (etc)\n//\n// Sadly, it appears that bash gives no easy way to force this behavior for\n// all commands.  That's where the \"time\" in the above example comes in.\n// If you haven't specifically added a command to the list of completion\n// supported commands, you can still get completions by prefixing the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.h.in"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 7,
                  "endLine": 93,
                  "endColumn": 12,
                  "snippet": {
                    "text": "/*\n$ complete -o bashdefault -o default -o nospace -C                            \\\n '/home/build/eng/bash/bash_completions.sh --tab_completion_columns $COLUMNS' \\\n  time  env  binary_name  another_binary  [...]\n*/\n\n// This would allow the following to work:\n",
                    "rendered": {
                      "text": "/*\n$ complete -o bashdefault -o default -o nospace -C                            \\\n '/home/build/eng/bash/bash_completions.sh --tab_completion_columns $COLUMNS' \\\n  time  env  binary_name  another_binary  [...]\n*/\n\n// This would allow the following to work:\n",
                      "markdown": "`/*\n$ complete -o bashdefault -o default -o nospace -C                            \\\n '/home/build/eng/bash/bash_completions.sh --tab_completion_columns $COLUMNS' \\\n  time  env  binary_name  another_binary  [...]\n*/\n\n// This would allow the following to work:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.h.in"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 1,
                  "endLine": 93,
                  "endColumn": 7,
                  "snippet": {
                    "text": "/*\n$ complete -o bashdefault -o default -o nospace -C                            \\\n '/home/build/eng/bash/bash_completions.sh --tab_completion_columns $COLUMNS' \\\n  time  env  binary_name  another_binary  [...]\n*/\n\n// This would allow the following to work:\n",
                    "rendered": {
                      "text": "/*\n$ complete -o bashdefault -o default -o nospace -C                            \\\n '/home/build/eng/bash/bash_completions.sh --tab_completion_columns $COLUMNS' \\\n  time  env  binary_name  another_binary  [...]\n*/\n\n// This would allow the following to work:\n",
                      "markdown": "`/*\n$ complete -o bashdefault -o default -o nospace -C                            \\\n '/home/build/eng/bash/bash_completions.sh --tab_completion_columns $COLUMNS' \\\n  time  env  binary_name  another_binary  [...]\n*/\n\n// This would allow the following to work:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.h.in"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 2,
                  "endLine": 86,
                  "endColumn": 8,
                  "snippet": {
                    "text": "// search word will force the exhaustive list of matches to be printed.\n//\n// ** How to have bash accept completions from a binary:\n// Bash requires that it be informed about each command that programmatic\n// completion should be enabled for.  Example addition to a .bashrc\n// file would be (your path to gflags_completions.sh file may differ):\n\n",
                    "rendered": {
                      "text": "// search word will force the exhaustive list of matches to be printed.\n//\n// ** How to have bash accept completions from a binary:\n// Bash requires that it be informed about each command that programmatic\n// completion should be enabled for.  Example addition to a .bashrc\n// file would be (your path to gflags_completions.sh file may differ):\n\n",
                      "markdown": "`// search word will force the exhaustive list of matches to be printed.\n//\n// ** How to have bash accept completions from a binary:\n// Bash requires that it be informed about each command that programmatic\n// completion should be enabled for.  Example addition to a .bashrc\n// file would be (your path to gflags_completions.sh file may differ):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.h.in"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 17,
                  "endLine": 85,
                  "endColumn": 23,
                  "snippet": {
                    "text": "// really wanted to see all possible matches, appending a '+' to the\n// search word will force the exhaustive list of matches to be printed.\n//\n// ** How to have bash accept completions from a binary:\n// Bash requires that it be informed about each command that programmatic\n// completion should be enabled for.  Example addition to a .bashrc\n// file would be (your path to gflags_completions.sh file may differ):\n",
                    "rendered": {
                      "text": "// really wanted to see all possible matches, appending a '+' to the\n// search word will force the exhaustive list of matches to be printed.\n//\n// ** How to have bash accept completions from a binary:\n// Bash requires that it be informed about each command that programmatic\n// completion should be enabled for.  Example addition to a .bashrc\n// file would be (your path to gflags_completions.sh file may differ):\n",
                      "markdown": "`// really wanted to see all possible matches, appending a '+' to the\n// search word will force the exhaustive list of matches to be printed.\n//\n// ** How to have bash accept completions from a binary:\n// Bash requires that it be informed about each command that programmatic\n// completion should be enabled for.  Example addition to a .bashrc\n// file would be (your path to gflags_completions.sh file may differ):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.h.in"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 16,
                  "endLine": 81,
                  "endColumn": 22,
                  "snippet": {
                    "text": "//   --foo???<TAB>  Same as prior case, but also search in flag\n//                  descriptions for 'foo'\n// Finally, we'll trim the output to a relatively small number of\n// flags to keep bash quiet about the verbosity of output.  If one\n// really wanted to see all possible matches, appending a '+' to the\n// search word will force the exhaustive list of matches to be printed.\n//\n",
                    "rendered": {
                      "text": "//   --foo???<TAB>  Same as prior case, but also search in flag\n//                  descriptions for 'foo'\n// Finally, we'll trim the output to a relatively small number of\n// flags to keep bash quiet about the verbosity of output.  If one\n// really wanted to see all possible matches, appending a '+' to the\n// search word will force the exhaustive list of matches to be printed.\n//\n",
                      "markdown": "`//   --foo???<TAB>  Same as prior case, but also search in flag\n//                  descriptions for 'foo'\n// Finally, we'll trim the output to a relatively small number of\n// flags to keep bash quiet about the verbosity of output.  If one\n// really wanted to see all possible matches, appending a '+' to the\n// search word will force the exhaustive list of matches to be printed.\n//\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.h.in"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 7,
                  "endLine": 66,
                  "endColumn": 13,
                  "snippet": {
                    "text": "// we'll include the default flag value and as much of the flag's\n// description as can fit on a single terminal line width, as specified\n// by the flag --tab_completion_columns).  Furthermore, we'll try to\n// make bash order the output such that the most useful or relevant\n// flags are the most likely to be shown at the top.\n//\n// ** Additional features:\n",
                    "rendered": {
                      "text": "// we'll include the default flag value and as much of the flag's\n// description as can fit on a single terminal line width, as specified\n// by the flag --tab_completion_columns).  Furthermore, we'll try to\n// make bash order the output such that the most useful or relevant\n// flags are the most likely to be shown at the top.\n//\n// ** Additional features:\n",
                      "markdown": "`// we'll include the default flag value and as much of the flag's\n// description as can fit on a single terminal line width, as specified\n// by the flag --tab_completion_columns).  Furthermore, we'll try to\n// make bash order the output such that the most useful or relevant\n// flags are the most likely to be shown at the top.\n//\n// ** Additional features:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.h.in"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 19,
                  "endLine": 56,
                  "endColumn": 25,
                  "snippet": {
                    "text": "// printed to stdout.  If these lines all contain a common prefix\n// longer than the cursor word, bash will replace the cursor word\n// with that common prefix, and display nothing.  If there isn't such\n// a common prefix, bash will display the lines in pages using 'more'.\n//\n// ** Strategy taken for command line completions:\n// If we can deduce either the exact flag intended, or a common flag\n",
                    "rendered": {
                      "text": "// printed to stdout.  If these lines all contain a common prefix\n// longer than the cursor word, bash will replace the cursor word\n// with that common prefix, and display nothing.  If there isn't such\n// a common prefix, bash will display the lines in pages using 'more'.\n//\n// ** Strategy taken for command line completions:\n// If we can deduce either the exact flag intended, or a common flag\n",
                      "markdown": "`// printed to stdout.  If these lines all contain a common prefix\n// longer than the cursor word, bash will replace the cursor word\n// with that common prefix, and display nothing.  If there isn't such\n// a common prefix, bash will display the lines in pages using 'more'.\n//\n// ** Strategy taken for command line completions:\n// If we can deduce either the exact flag intended, or a common flag\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.h.in"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 31,
                  "endLine": 54,
                  "endColumn": 37,
                  "snippet": {
                    "text": "// being executed, the word being completed, and the previous word\n// (if any).  Bash then expects a sequence of output lines to be\n// printed to stdout.  If these lines all contain a common prefix\n// longer than the cursor word, bash will replace the cursor word\n// with that common prefix, and display nothing.  If there isn't such\n// a common prefix, bash will display the lines in pages using 'more'.\n//\n",
                    "rendered": {
                      "text": "// being executed, the word being completed, and the previous word\n// (if any).  Bash then expects a sequence of output lines to be\n// printed to stdout.  If these lines all contain a common prefix\n// longer than the cursor word, bash will replace the cursor word\n// with that common prefix, and display nothing.  If there isn't such\n// a common prefix, bash will display the lines in pages using 'more'.\n//\n",
                      "markdown": "`// being executed, the word being completed, and the previous word\n// (if any).  Bash then expects a sequence of output lines to be\n// printed to stdout.  If these lines all contain a common prefix\n// longer than the cursor word, bash will replace the cursor word\n// with that common prefix, and display nothing.  If there isn't such\n// a common prefix, bash will display the lines in pages using 'more'.\n//\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.h.in"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 13,
                  "endLine": 52,
                  "endColumn": 19,
                  "snippet": {
                    "text": "// current 'cursor word'.  It does this by (in this case) invoking a\n// command with some additional arguments identifying the command\n// being executed, the word being completed, and the previous word\n// (if any).  Bash then expects a sequence of output lines to be\n// printed to stdout.  If these lines all contain a common prefix\n// longer than the cursor word, bash will replace the cursor word\n// with that common prefix, and display nothing.  If there isn't such\n",
                    "rendered": {
                      "text": "// current 'cursor word'.  It does this by (in this case) invoking a\n// command with some additional arguments identifying the command\n// being executed, the word being completed, and the previous word\n// (if any).  Bash then expects a sequence of output lines to be\n// printed to stdout.  If these lines all contain a common prefix\n// longer than the cursor word, bash will replace the cursor word\n// with that common prefix, and display nothing.  If there isn't such\n",
                      "markdown": "`// current 'cursor word'.  It does this by (in this case) invoking a\n// command with some additional arguments identifying the command\n// being executed, the word being completed, and the previous word\n// (if any).  Bash then expects a sequence of output lines to be\n// printed to stdout.  If these lines all contain a common prefix\n// longer than the cursor word, bash will replace the cursor word\n// with that common prefix, and display nothing.  If there isn't such\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.h.in"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 2,
                  "endLine": 48,
                  "endColumn": 8,
                  "snippet": {
                    "text": "// handling.\n//\n// ** Overview of Bash completions:\n// Bash can be told to programmatically determine completions for the\n// current 'cursor word'.  It does this by (in this case) invoking a\n// command with some additional arguments identifying the command\n// being executed, the word being completed, and the previous word\n",
                    "rendered": {
                      "text": "// handling.\n//\n// ** Overview of Bash completions:\n// Bash can be told to programmatically determine completions for the\n// current 'cursor word'.  It does this by (in this case) invoking a\n// command with some additional arguments identifying the command\n// being executed, the word being completed, and the previous word\n",
                      "markdown": "`// handling.\n//\n// ** Overview of Bash completions:\n// Bash can be told to programmatically determine completions for the\n// current 'cursor word'.  It does this by (in this case) invoking a\n// command with some additional arguments identifying the command\n// being executed, the word being completed, and the previous word\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.h.in"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 17,
                  "endLine": 47,
                  "endColumn": 23,
                  "snippet": {
                    "text": "// process will be terminated, similar to --helpshort flag\n// handling.\n//\n// ** Overview of Bash completions:\n// Bash can be told to programmatically determine completions for the\n// current 'cursor word'.  It does this by (in this case) invoking a\n// command with some additional arguments identifying the command\n",
                    "rendered": {
                      "text": "// process will be terminated, similar to --helpshort flag\n// handling.\n//\n// ** Overview of Bash completions:\n// Bash can be told to programmatically determine completions for the\n// current 'cursor word'.  It does this by (in this case) invoking a\n// command with some additional arguments identifying the command\n",
                      "markdown": "`// process will be terminated, similar to --helpshort flag\n// handling.\n//\n// ** Overview of Bash completions:\n// Bash can be told to programmatically determine completions for the\n// current 'cursor word'.  It does this by (in this case) invoking a\n// command with some additional arguments identifying the command\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.sh"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 43,
                  "endLine": 80,
                  "endColumn": 68,
                  "snippet": {
                    "text": "  # binary\n\n\n  # TODO(user): This is not perfect - the 'env' command, for instance,\n  #   is allowed to have options between the 'env' and 'the command to\n  #   be executed'.  For example, consider:\n  # $ env FOO=\"bar\"  bin/do_something  --help<TAB>\n",
                    "rendered": {
                      "text": "  # binary\n\n\n  # TODO(user): This is not perfect - the 'env' command, for instance,\n  #   is allowed to have options between the 'env' and 'the command to\n  #   be executed'.  For example, consider:\n  # $ env FOO=\"bar\"  bin/do_something  --help<TAB>\n",
                      "markdown": "`  # binary\n\n\n  # TODO(user): This is not perfect - the 'env' command, for instance,\n  #   is allowed to have options between the 'env' and 'the command to\n  #   be executed'.  For example, consider:\n  # $ env FOO=\"bar\"  bin/do_something  --help<TAB>\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.sh"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 6,
                  "endLine": 98,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n# Build the command line to use for completion.  Basically it involves\n# passing through all the arguments given to this script (except the 3\n# that bash added), and appending a '--tab_completion_word \"WORD\"' to\n# the arguments.\nparams=\"\"\nfor ((i=1; i<=$(($# - 3)); ++i)); do \n",
                    "rendered": {
                      "text": "\n# Build the command line to use for completion.  Basically it involves\n# passing through all the arguments given to this script (except the 3\n# that bash added), and appending a '--tab_completion_word \"WORD\"' to\n# the arguments.\nparams=\"\"\nfor ((i=1; i<=$(($# - 3)); ++i)); do \n",
                      "markdown": "`\n# Build the command line to use for completion.  Basically it involves\n# passing through all the arguments given to this script (except the 3\n# that bash added), and appending a '--tab_completion_word \"WORD\"' to\n# the arguments.\nparams=\"\"\nfor ((i=1; i<=$(($# - 3)); ++i)); do \n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.sh"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 57,
                  "endLine": 73,
                  "endColumn": 63,
                  "snippet": {
                    "text": "# trigger on 'harmless pass-through' commands, like 'time' or 'env'.\n# If the command being completed is one of those two, we'll need to\n# identify the actual command being executed.  To do this, we need\n# the actual command line that the <TAB> was pressed on.  Bash helpfully\n# places this in the $COMP_LINE variable.\nif [ \"$binary\" == \"time\" ] || [ \"$binary\" == \"env\" ]; then\n  # we'll assume that the first 'argument' is actually the\n",
                    "rendered": {
                      "text": "# trigger on 'harmless pass-through' commands, like 'time' or 'env'.\n# If the command being completed is one of those two, we'll need to\n# identify the actual command being executed.  To do this, we need\n# the actual command line that the <TAB> was pressed on.  Bash helpfully\n# places this in the $COMP_LINE variable.\nif [ \"$binary\" == \"time\" ] || [ \"$binary\" == \"env\" ]; then\n  # we'll assume that the first 'argument' is actually the\n",
                      "markdown": "`# trigger on 'harmless pass-through' commands, like 'time' or 'env'.\n# If the command being completed is one of those two, we'll need to\n# identify the actual command being executed.  To do this, we need\n# the actual command line that the <TAB> was pressed on.  Bash helpfully\n# places this in the $COMP_LINE variable.\nif [ \"$binary\" == \"time\" ] || [ \"$binary\" == \"env\" ]; then\n  # we'll assume that the first 'argument' is actually the\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.sh"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 19,
                  "endLine": 65,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n# binary_index gets the index of the command being completed (which bash\n# places in the (N-2)nd position.  binary gets the actual command from\n# this command line at that (N-2)nd position\nbinary_index=\"$(($# - 2))\"\nbinary=\"${!binary_index}\"\n\n",
                    "rendered": {
                      "text": "\n# binary_index gets the index of the command being completed (which bash\n# places in the (N-2)nd position.  binary gets the actual command from\n# this command line at that (N-2)nd position\nbinary_index=\"$(($# - 2))\"\nbinary=\"${!binary_index}\"\n\n",
                      "markdown": "`\n# binary_index gets the index of the command being completed (which bash\n# places in the (N-2)nd position.  binary gets the actual command from\n# this command line at that (N-2)nd position\nbinary_index=\"$(($# - 2))\"\nbinary=\"${!binary_index}\"\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.sh"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 67,
                  "endLine": 64,
                  "snippet": {
                    "text": "  exit 0\nfi\n\n# binary_index gets the index of the command being completed (which bash\n# places in the (N-2)nd position.  binary gets the actual command from\n# this command line at that (N-2)nd position\nbinary_index=\"$(($# - 2))\"\nbinary=\"${!binary_index}\"\n",
                    "rendered": {
                      "text": "  exit 0\nfi\n\n# binary_index gets the index of the command being completed (which bash\n# places in the (N-2)nd position.  binary gets the actual command from\n# this command line at that (N-2)nd position\nbinary_index=\"$(($# - 2))\"\nbinary=\"${!binary_index}\"\n",
                      "markdown": "`  exit 0\nfi\n\n# binary_index gets the index of the command being completed (which bash\n# places in the (N-2)nd position.  binary gets the actual command from\n# this command line at that (N-2)nd position\nbinary_index=\"$(($# - 2))\"\nbinary=\"${!binary_index}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.sh"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 19,
                  "endLine": 49,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n# completion_word_index gets the index of the (N-1)th argument for\n# this command line.  completion_word gets the actual argument from\n# this command line at the (N-1)th position\ncompletion_word_index=\"$(($# - 1))\"\ncompletion_word=\"${!completion_word_index}\"\n\n",
                    "rendered": {
                      "text": "\n# completion_word_index gets the index of the (N-1)th argument for\n# this command line.  completion_word gets the actual argument from\n# this command line at the (N-1)th position\ncompletion_word_index=\"$(($# - 1))\"\ncompletion_word=\"${!completion_word_index}\"\n\n",
                      "markdown": "`\n# completion_word_index gets the index of the (N-1)th argument for\n# this command line.  completion_word gets the actual argument from\n# this command line at the (N-1)th position\ncompletion_word_index=\"$(($# - 1))\"\ncompletion_word=\"${!completion_word_index}\"\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.sh"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 15,
                  "endLine": 36,
                  "endColumn": 21,
                  "snippet": {
                    "text": "# Author: Dave Nicponski\n#\n# This script is invoked by bash in response to a matching compspec.  When\n# this happens, bash calls this script using the command shown in the -C\n# block of the complete entry, but also appends 3 arguments.  They are:\n#   - The command being used for completion\n#   - The word being completed\n",
                    "rendered": {
                      "text": "# Author: Dave Nicponski\n#\n# This script is invoked by bash in response to a matching compspec.  When\n# this happens, bash calls this script using the command shown in the -C\n# block of the complete entry, but also appends 3 arguments.  They are:\n#   - The command being used for completion\n#   - The word being completed\n",
                      "markdown": "`# Author: Dave Nicponski\n#\n# This script is invoked by bash in response to a matching compspec.  When\n# this happens, bash calls this script using the command shown in the -C\n# block of the complete entry, but also appends 3 arguments.  They are:\n#   - The command being used for completion\n#   - The word being completed\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.sh"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 27,
                  "endLine": 35,
                  "endColumn": 33,
                  "snippet": {
                    "text": "# ---\n# Author: Dave Nicponski\n#\n# This script is invoked by bash in response to a matching compspec.  When\n# this happens, bash calls this script using the command shown in the -C\n# block of the complete entry, but also appends 3 arguments.  They are:\n#   - The command being used for completion\n",
                    "rendered": {
                      "text": "# ---\n# Author: Dave Nicponski\n#\n# This script is invoked by bash in response to a matching compspec.  When\n# this happens, bash calls this script using the command shown in the -C\n# block of the complete entry, but also appends 3 arguments.  They are:\n#   - The command being used for completion\n",
                      "markdown": "`# ---\n# Author: Dave Nicponski\n#\n# This script is invoked by bash in response to a matching compspec.  When\n# this happens, bash calls this script using the command shown in the -C\n# block of the complete entry, but also appends 3 arguments.  They are:\n#   - The command being used for completion\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.sh"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 19,
                  "endLine": 107,
                  "endColumn": 24,
                  "snippet": {
                    "text": "params=\"$params --tab_completion_word \\\"$completion_word\\\"\"\n\n# TODO(user): Perhaps stash the output in a temporary file somewhere\n# in /tmp, and only cat it to stdout if the command returned a success\n# code, to prevent false positives\n\n# If we think we have a reasonable command to execute, then execute it\n",
                    "rendered": {
                      "text": "params=\"$params --tab_completion_word \\\"$completion_word\\\"\"\n\n# TODO(user): Perhaps stash the output in a temporary file somewhere\n# in /tmp, and only cat it to stdout if the command returned a success\n# code, to prevent false positives\n\n# If we think we have a reasonable command to execute, then execute it\n",
                      "markdown": "`params=\"$params --tab_completion_word \\\"$completion_word\\\"\"\n\n# TODO(user): Perhaps stash the output in a temporary file somewhere\n# in /tmp, and only cat it to stdout if the command returned a success\n# code, to prevent false positives\n\n# If we think we have a reasonable command to execute, then execute it\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.sh"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 6,
                  "endLine": 98,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n# Build the command line to use for completion.  Basically it involves\n# passing through all the arguments given to this script (except the 3\n# that bash added), and appending a '--tab_completion_word \"WORD\"' to\n# the arguments.\nparams=\"\"\nfor ((i=1; i<=$(($# - 3)); ++i)); do \n",
                    "rendered": {
                      "text": "\n# Build the command line to use for completion.  Basically it involves\n# passing through all the arguments given to this script (except the 3\n# that bash added), and appending a '--tab_completion_word \"WORD\"' to\n# the arguments.\nparams=\"\"\nfor ((i=1; i<=$(($# - 3)); ++i)); do \n",
                      "markdown": "`\n# Build the command line to use for completion.  Basically it involves\n# passing through all the arguments given to this script (except the 3\n# that bash added), and appending a '--tab_completion_word \"WORD\"' to\n# the arguments.\nparams=\"\"\nfor ((i=1; i<=$(($# - 3)); ++i)); do \n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.sh"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 49,
                  "endLine": 97,
                  "endColumn": 57,
                  "snippet": {
                    "text": "fi\n\n# Build the command line to use for completion.  Basically it involves\n# passing through all the arguments given to this script (except the 3\n# that bash added), and appending a '--tab_completion_word \"WORD\"' to\n# the arguments.\nparams=\"\"\n",
                    "rendered": {
                      "text": "fi\n\n# Build the command line to use for completion.  Basically it involves\n# passing through all the arguments given to this script (except the 3\n# that bash added), and appending a '--tab_completion_word \"WORD\"' to\n# the arguments.\nparams=\"\"\n",
                      "markdown": "`fi\n\n# Build the command line to use for completion.  Basically it involves\n# passing through all the arguments given to this script (except the 3\n# that bash added), and appending a '--tab_completion_word \"WORD\"' to\n# the arguments.\nparams=\"\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.sh"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 48,
                  "endLine": 91,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  #   work.\n\n  # Break up the 'original command line' (not this script's command line,\n  # rather the one the <TAB> was pressed on) and find the second word.\n  parts=( ${COMP_LINE} )\n  binary=${parts[1]}\nfi\n",
                    "rendered": {
                      "text": "  #   work.\n\n  # Break up the 'original command line' (not this script's command line,\n  # rather the one the <TAB> was pressed on) and find the second word.\n  parts=( ${COMP_LINE} )\n  binary=${parts[1]}\nfi\n",
                      "markdown": "`  #   work.\n\n  # Break up the 'original command line' (not this script's command line,\n  # rather the one the <TAB> was pressed on) and find the second word.\n  parts=( ${COMP_LINE} )\n  binary=${parts[1]}\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.sh"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 33,
                  "endLine": 86,
                  "endColumn": 39,
                  "snippet": {
                    "text": "  # $ env FOO=\"bar\"  bin/do_something  --help<TAB>\n  # In this case, we'll mistake the FOO=\"bar\" portion as the binary.\n  #   Perhaps we should continuing consuming leading words until we\n  #   either run out of words, or find a word that is a valid file\n  #   marked as executable.  I can't think of any reason this wouldn't\n  #   work.\n\n",
                    "rendered": {
                      "text": "  # $ env FOO=\"bar\"  bin/do_something  --help<TAB>\n  # In this case, we'll mistake the FOO=\"bar\" portion as the binary.\n  #   Perhaps we should continuing consuming leading words until we\n  #   either run out of words, or find a word that is a valid file\n  #   marked as executable.  I can't think of any reason this wouldn't\n  #   work.\n\n",
                      "markdown": "`  # $ env FOO=\"bar\"  bin/do_something  --help<TAB>\n  # In this case, we'll mistake the FOO=\"bar\" portion as the binary.\n  #   Perhaps we should continuing consuming leading words until we\n  #   either run out of words, or find a word that is a valid file\n  #   marked as executable.  I can't think of any reason this wouldn't\n  #   work.\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.sh"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 5,
                  "endLine": 83,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  # TODO(user): This is not perfect - the 'env' command, for instance,\n  #   is allowed to have options between the 'env' and 'the command to\n  #   be executed'.  For example, consider:\n  # $ env FOO=\"bar\"  bin/do_something  --help<TAB>\n  # In this case, we'll mistake the FOO=\"bar\" portion as the binary.\n  #   Perhaps we should continuing consuming leading words until we\n  #   either run out of words, or find a word that is a valid file\n",
                    "rendered": {
                      "text": "  # TODO(user): This is not perfect - the 'env' command, for instance,\n  #   is allowed to have options between the 'env' and 'the command to\n  #   be executed'.  For example, consider:\n  # $ env FOO=\"bar\"  bin/do_something  --help<TAB>\n  # In this case, we'll mistake the FOO=\"bar\" portion as the binary.\n  #   Perhaps we should continuing consuming leading words until we\n  #   either run out of words, or find a word that is a valid file\n",
                      "markdown": "`  # TODO(user): This is not perfect - the 'env' command, for instance,\n  #   is allowed to have options between the 'env' and 'the command to\n  #   be executed'.  For example, consider:\n  # $ env FOO=\"bar\"  bin/do_something  --help<TAB>\n  # In this case, we'll mistake the FOO=\"bar\" portion as the binary.\n  #   Perhaps we should continuing consuming leading words until we\n  #   either run out of words, or find a word that is a valid file\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.sh"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 57,
                  "endLine": 73,
                  "endColumn": 63,
                  "snippet": {
                    "text": "# trigger on 'harmless pass-through' commands, like 'time' or 'env'.\n# If the command being completed is one of those two, we'll need to\n# identify the actual command being executed.  To do this, we need\n# the actual command line that the <TAB> was pressed on.  Bash helpfully\n# places this in the $COMP_LINE variable.\nif [ \"$binary\" == \"time\" ] || [ \"$binary\" == \"env\" ]; then\n  # we'll assume that the first 'argument' is actually the\n",
                    "rendered": {
                      "text": "# trigger on 'harmless pass-through' commands, like 'time' or 'env'.\n# If the command being completed is one of those two, we'll need to\n# identify the actual command being executed.  To do this, we need\n# the actual command line that the <TAB> was pressed on.  Bash helpfully\n# places this in the $COMP_LINE variable.\nif [ \"$binary\" == \"time\" ] || [ \"$binary\" == \"env\" ]; then\n  # we'll assume that the first 'argument' is actually the\n",
                      "markdown": "`# trigger on 'harmless pass-through' commands, like 'time' or 'env'.\n# If the command being completed is one of those two, we'll need to\n# identify the actual command being executed.  To do this, we need\n# the actual command line that the <TAB> was pressed on.  Bash helpfully\n# places this in the $COMP_LINE variable.\nif [ \"$binary\" == \"time\" ] || [ \"$binary\" == \"env\" ]; then\n  # we'll assume that the first 'argument' is actually the\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.sh"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 67,
                  "endLine": 64,
                  "snippet": {
                    "text": "  exit 0\nfi\n\n# binary_index gets the index of the command being completed (which bash\n# places in the (N-2)nd position.  binary gets the actual command from\n# this command line at that (N-2)nd position\nbinary_index=\"$(($# - 2))\"\nbinary=\"${!binary_index}\"\n",
                    "rendered": {
                      "text": "  exit 0\nfi\n\n# binary_index gets the index of the command being completed (which bash\n# places in the (N-2)nd position.  binary gets the actual command from\n# this command line at that (N-2)nd position\nbinary_index=\"$(($# - 2))\"\nbinary=\"${!binary_index}\"\n",
                      "markdown": "`  exit 0\nfi\n\n# binary_index gets the index of the command being completed (which bash\n# places in the (N-2)nd position.  binary gets the actual command from\n# this command line at that (N-2)nd position\nbinary_index=\"$(($# - 2))\"\nbinary=\"${!binary_index}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.sh"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 9,
                  "endLine": 45,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# Here's an example of how you might use this script:\n# $ complete -o bashdefault -o default -o nospace -C                         \\\n#   '/usr/local/bin/gflags_completions.sh --tab_completion_columns $COLUMNS' \\\n#   time  env  binary_name  another_binary  [...]\n\n# completion_word_index gets the index of the (N-1)th argument for\n# this command line.  completion_word gets the actual argument from\n",
                    "rendered": {
                      "text": "# Here's an example of how you might use this script:\n# $ complete -o bashdefault -o default -o nospace -C                         \\\n#   '/usr/local/bin/gflags_completions.sh --tab_completion_columns $COLUMNS' \\\n#   time  env  binary_name  another_binary  [...]\n\n# completion_word_index gets the index of the (N-1)th argument for\n# this command line.  completion_word gets the actual argument from\n",
                      "markdown": "`# Here's an example of how you might use this script:\n# $ complete -o bashdefault -o default -o nospace -C                         \\\n#   '/usr/local/bin/gflags_completions.sh --tab_completion_columns $COLUMNS' \\\n#   time  env  binary_name  another_binary  [...]\n\n# completion_word_index gets the index of the (N-1)th argument for\n# this command line.  completion_word gets the actual argument from\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.sh"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 3,
                  "endLine": 45,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# Here's an example of how you might use this script:\n# $ complete -o bashdefault -o default -o nospace -C                         \\\n#   '/usr/local/bin/gflags_completions.sh --tab_completion_columns $COLUMNS' \\\n#   time  env  binary_name  another_binary  [...]\n\n# completion_word_index gets the index of the (N-1)th argument for\n# this command line.  completion_word gets the actual argument from\n",
                    "rendered": {
                      "text": "# Here's an example of how you might use this script:\n# $ complete -o bashdefault -o default -o nospace -C                         \\\n#   '/usr/local/bin/gflags_completions.sh --tab_completion_columns $COLUMNS' \\\n#   time  env  binary_name  another_binary  [...]\n\n# completion_word_index gets the index of the (N-1)th argument for\n# this command line.  completion_word gets the actual argument from\n",
                      "markdown": "`# Here's an example of how you might use this script:\n# $ complete -o bashdefault -o default -o nospace -C                         \\\n#   '/usr/local/bin/gflags_completions.sh --tab_completion_columns $COLUMNS' \\\n#   time  env  binary_name  another_binary  [...]\n\n# completion_word_index gets the index of the (N-1)th argument for\n# this command line.  completion_word gets the actual argument from\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.sh"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 31,
                  "endLine": 36,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Author: Dave Nicponski\n#\n# This script is invoked by bash in response to a matching compspec.  When\n# this happens, bash calls this script using the command shown in the -C\n# block of the complete entry, but also appends 3 arguments.  They are:\n#   - The command being used for completion\n#   - The word being completed\n",
                    "rendered": {
                      "text": "# Author: Dave Nicponski\n#\n# This script is invoked by bash in response to a matching compspec.  When\n# this happens, bash calls this script using the command shown in the -C\n# block of the complete entry, but also appends 3 arguments.  They are:\n#   - The command being used for completion\n#   - The word being completed\n",
                      "markdown": "`# Author: Dave Nicponski\n#\n# This script is invoked by bash in response to a matching compspec.  When\n# this happens, bash calls this script using the command shown in the -C\n# block of the complete entry, but also appends 3 arguments.  They are:\n#   - The command being used for completion\n#   - The word being completed\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.sh"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 15,
                  "endLine": 36,
                  "endColumn": 21,
                  "snippet": {
                    "text": "# Author: Dave Nicponski\n#\n# This script is invoked by bash in response to a matching compspec.  When\n# this happens, bash calls this script using the command shown in the -C\n# block of the complete entry, but also appends 3 arguments.  They are:\n#   - The command being used for completion\n#   - The word being completed\n",
                    "rendered": {
                      "text": "# Author: Dave Nicponski\n#\n# This script is invoked by bash in response to a matching compspec.  When\n# this happens, bash calls this script using the command shown in the -C\n# block of the complete entry, but also appends 3 arguments.  They are:\n#   - The command being used for completion\n#   - The word being completed\n",
                      "markdown": "`# Author: Dave Nicponski\n#\n# This script is invoked by bash in response to a matching compspec.  When\n# this happens, bash calls this script using the command shown in the -C\n# block of the complete entry, but also appends 3 arguments.  They are:\n#   - The command being used for completion\n#   - The word being completed\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.sh"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 27,
                  "endLine": 35,
                  "endColumn": 33,
                  "snippet": {
                    "text": "# ---\n# Author: Dave Nicponski\n#\n# This script is invoked by bash in response to a matching compspec.  When\n# this happens, bash calls this script using the command shown in the -C\n# block of the complete entry, but also appends 3 arguments.  They are:\n#   - The command being used for completion\n",
                    "rendered": {
                      "text": "# ---\n# Author: Dave Nicponski\n#\n# This script is invoked by bash in response to a matching compspec.  When\n# this happens, bash calls this script using the command shown in the -C\n# block of the complete entry, but also appends 3 arguments.  They are:\n#   - The command being used for completion\n",
                      "markdown": "`# ---\n# Author: Dave Nicponski\n#\n# This script is invoked by bash in response to a matching compspec.  When\n# this happens, bash calls this script using the command shown in the -C\n# block of the complete entry, but also appends 3 arguments.  They are:\n#   - The command being used for completion\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.sh"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 6,
                  "endLine": 35,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# ---\n# Author: Dave Nicponski\n#\n# This script is invoked by bash in response to a matching compspec.  When\n# this happens, bash calls this script using the command shown in the -C\n# block of the complete entry, but also appends 3 arguments.  They are:\n#   - The command being used for completion\n",
                    "rendered": {
                      "text": "# ---\n# Author: Dave Nicponski\n#\n# This script is invoked by bash in response to a matching compspec.  When\n# this happens, bash calls this script using the command shown in the -C\n# block of the complete entry, but also appends 3 arguments.  They are:\n#   - The command being used for completion\n",
                      "markdown": "`# ---\n# Author: Dave Nicponski\n#\n# This script is invoked by bash in response to a matching compspec.  When\n# this happens, bash calls this script using the command shown in the -C\n# block of the complete entry, but also appends 3 arguments.  They are:\n#   - The command being used for completion\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.cc"
                },
                "region": {
                  "startLine": 535,
                  "startColumn": 46,
                  "endLine": 535,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n  // We want to output lines in groups.  Each group needs to be indented\n  // the same to keep its lines together.  Unless otherwise required,\n  // only 99 lines should be output to prevent bash from harassing the\n  // user.\n\n  // First, figure out which output groups we'll actually use.  For each\n",
                    "rendered": {
                      "text": "\n  // We want to output lines in groups.  Each group needs to be indented\n  // the same to keep its lines together.  Unless otherwise required,\n  // only 99 lines should be output to prevent bash from harassing the\n  // user.\n\n  // First, figure out which output groups we'll actually use.  For each\n",
                      "markdown": "`\n  // We want to output lines in groups.  Each group needs to be indented\n  // the same to keep its lines together.  Unless otherwise required,\n  // only 99 lines should be output to prevent bash from harassing the\n  // user.\n\n  // First, figure out which output groups we'll actually use.  For each\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.cc"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 20,
                  "endLine": 173,
                  "endColumn": 26,
                  "snippet": {
                    "text": "//    most likely to be useful first.  If this is set, however, the user\n//    really does want us to return every single flag as an option.\n//  - force_no_update: Any time we output lines, all of which share a\n//    common prefix, bash will 'helpfuly' not even bother to show the\n//    output, instead changing the current word to be that common prefix.\n//    If it's clear this shouldn't happen, we'll set this boolean\nstruct CompletionOptions {\n",
                    "rendered": {
                      "text": "//    most likely to be useful first.  If this is set, however, the user\n//    really does want us to return every single flag as an option.\n//  - force_no_update: Any time we output lines, all of which share a\n//    common prefix, bash will 'helpfuly' not even bother to show the\n//    output, instead changing the current word to be that common prefix.\n//    If it's clear this shouldn't happen, we'll set this boolean\nstruct CompletionOptions {\n",
                      "markdown": "`//    most likely to be useful first.  If this is set, however, the user\n//    really does want us to return every single flag as an option.\n//  - force_no_update: Any time we output lines, all of which share a\n//    common prefix, bash will 'helpfuly' not even bother to show the\n//    output, instead changing the current word to be that common prefix.\n//    If it's clear this shouldn't happen, we'll set this boolean\nstruct CompletionOptions {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.cc"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 2,
                  "endLine": 82,
                  "endColumn": 11,
                  "snippet": {
                    "text": "namespace {\n// Function prototypes and Type forward declarations.  Code may be\n// more easily understood if it is roughly ordered according to\n// control flow, rather than by C's \"declare before use\" ordering\nstruct CompletionOptions;\nstruct NotableFlags;\n\n",
                    "rendered": {
                      "text": "namespace {\n// Function prototypes and Type forward declarations.  Code may be\n// more easily understood if it is roughly ordered according to\n// control flow, rather than by C's \"declare before use\" ordering\nstruct CompletionOptions;\nstruct NotableFlags;\n\n",
                      "markdown": "`namespace {\n// Function prototypes and Type forward declarations.  Code may be\n// more easily understood if it is roughly ordered according to\n// control flow, rather than by C's \"declare before use\" ordering\nstruct CompletionOptions;\nstruct NotableFlags;\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.cc"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 51,
                  "endLine": 46,
                  "endColumn": 55,
                  "snippet": {
                    "text": "//  4) Potentially trim the set of flags returned to a smaller number\n//     that bash is happier with\n//  5) Output the matching flags in groups ordered by relevance.\n//     5a) Force bash to place most-relevent groups at the top of the list\n//     5b) Trim most flag's descriptions to fit on a single terminal line\n\n#include <cstdio>\n",
                    "rendered": {
                      "text": "//  4) Potentially trim the set of flags returned to a smaller number\n//     that bash is happier with\n//  5) Output the matching flags in groups ordered by relevance.\n//     5a) Force bash to place most-relevent groups at the top of the list\n//     5b) Trim most flag's descriptions to fit on a single terminal line\n\n#include <cstdio>\n",
                      "markdown": "`//  4) Potentially trim the set of flags returned to a smaller number\n//     that bash is happier with\n//  5) Output the matching flags in groups ordered by relevance.\n//     5a) Force bash to place most-relevent groups at the top of the list\n//     5b) Trim most flag's descriptions to fit on a single terminal line\n\n#include <cstdio>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.cc"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 16,
                  "endLine": 46,
                  "endColumn": 22,
                  "snippet": {
                    "text": "//  4) Potentially trim the set of flags returned to a smaller number\n//     that bash is happier with\n//  5) Output the matching flags in groups ordered by relevance.\n//     5a) Force bash to place most-relevent groups at the top of the list\n//     5b) Trim most flag's descriptions to fit on a single terminal line\n\n#include <cstdio>\n",
                    "rendered": {
                      "text": "//  4) Potentially trim the set of flags returned to a smaller number\n//     that bash is happier with\n//  5) Output the matching flags in groups ordered by relevance.\n//     5a) Force bash to place most-relevent groups at the top of the list\n//     5b) Trim most flag's descriptions to fit on a single terminal line\n\n#include <cstdio>\n",
                      "markdown": "`//  4) Potentially trim the set of flags returned to a smaller number\n//     that bash is happier with\n//  5) Output the matching flags in groups ordered by relevance.\n//     5a) Force bash to place most-relevent groups at the top of the list\n//     5b) Trim most flag's descriptions to fit on a single terminal line\n\n#include <cstdio>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.cc"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 11,
                  "endLine": 44,
                  "endColumn": 17,
                  "snippet": {
                    "text": "//         completion word, output just that matching prefix\n//  3) Categorize those flags to produce a rough ordering of relevance.\n//  4) Potentially trim the set of flags returned to a smaller number\n//     that bash is happier with\n//  5) Output the matching flags in groups ordered by relevance.\n//     5a) Force bash to place most-relevent groups at the top of the list\n//     5b) Trim most flag's descriptions to fit on a single terminal line\n",
                    "rendered": {
                      "text": "//         completion word, output just that matching prefix\n//  3) Categorize those flags to produce a rough ordering of relevance.\n//  4) Potentially trim the set of flags returned to a smaller number\n//     that bash is happier with\n//  5) Output the matching flags in groups ordered by relevance.\n//     5a) Force bash to place most-relevent groups at the top of the list\n//     5b) Trim most flag's descriptions to fit on a single terminal line\n",
                      "markdown": "`//         completion word, output just that matching prefix\n//  3) Categorize those flags to produce a rough ordering of relevance.\n//  4) Potentially trim the set of flags returned to a smaller number\n//     that bash is happier with\n//  5) Output the matching flags in groups ordered by relevance.\n//     5a) Force bash to place most-relevent groups at the top of the list\n//     5b) Trim most flag's descriptions to fit on a single terminal line\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.cc"
                },
                "region": {
                  "startLine": 535,
                  "startColumn": 46,
                  "endLine": 535,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n  // We want to output lines in groups.  Each group needs to be indented\n  // the same to keep its lines together.  Unless otherwise required,\n  // only 99 lines should be output to prevent bash from harassing the\n  // user.\n\n  // First, figure out which output groups we'll actually use.  For each\n",
                    "rendered": {
                      "text": "\n  // We want to output lines in groups.  Each group needs to be indented\n  // the same to keep its lines together.  Unless otherwise required,\n  // only 99 lines should be output to prevent bash from harassing the\n  // user.\n\n  // First, figure out which output groups we'll actually use.  For each\n",
                      "markdown": "`\n  // We want to output lines in groups.  Each group needs to be indented\n  // the same to keep its lines together.  Unless otherwise required,\n  // only 99 lines should be output to prevent bash from harassing the\n  // user.\n\n  // First, figure out which output groups we'll actually use.  For each\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.cc"
                },
                "region": {
                  "startLine": 418,
                  "startColumn": 55,
                  "endLine": 418,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    const set<const CommandLineFlagInfo *> &all_matches,\n    const string &search_token,\n    const string &module,  // empty if we couldn't find any\n    const string &package_dir,  // empty if we couldn't find any\n    NotableFlags *notable_flags) {\n  notable_flags->perfect_match_flag.clear();\n  notable_flags->module_flags.clear();\n",
                    "rendered": {
                      "text": "    const set<const CommandLineFlagInfo *> &all_matches,\n    const string &search_token,\n    const string &module,  // empty if we couldn't find any\n    const string &package_dir,  // empty if we couldn't find any\n    NotableFlags *notable_flags) {\n  notable_flags->perfect_match_flag.clear();\n  notable_flags->module_flags.clear();\n",
                      "markdown": "`    const set<const CommandLineFlagInfo *> &all_matches,\n    const string &search_token,\n    const string &module,  // empty if we couldn't find any\n    const string &package_dir,  // empty if we couldn't find any\n    NotableFlags *notable_flags) {\n  notable_flags->perfect_match_flag.clear();\n  notable_flags->module_flags.clear();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.cc"
                },
                "region": {
                  "startLine": 417,
                  "startColumn": 50,
                  "endLine": 417,
                  "endColumn": 56,
                  "snippet": {
                    "text": "static void CategorizeAllMatchingFlags(\n    const set<const CommandLineFlagInfo *> &all_matches,\n    const string &search_token,\n    const string &module,  // empty if we couldn't find any\n    const string &package_dir,  // empty if we couldn't find any\n    NotableFlags *notable_flags) {\n  notable_flags->perfect_match_flag.clear();\n",
                    "rendered": {
                      "text": "static void CategorizeAllMatchingFlags(\n    const set<const CommandLineFlagInfo *> &all_matches,\n    const string &search_token,\n    const string &module,  // empty if we couldn't find any\n    const string &package_dir,  // empty if we couldn't find any\n    NotableFlags *notable_flags) {\n  notable_flags->perfect_match_flag.clear();\n",
                      "markdown": "`static void CategorizeAllMatchingFlags(\n    const set<const CommandLineFlagInfo *> &all_matches,\n    const string &search_token,\n    const string &module,  // empty if we couldn't find any\n    const string &package_dir,  // empty if we couldn't find any\n    NotableFlags *notable_flags) {\n  notable_flags->perfect_match_flag.clear();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.cc"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 5,
                  "endLine": 347,
                  "endColumn": 11,
                  "snippet": {
                    "text": "}\n\n\n// 2) Find all matches (and helper methods)\nstatic void FindMatchingFlags(\n    const vector<CommandLineFlagInfo> &all_flags,\n    const CompletionOptions &options,\n",
                    "rendered": {
                      "text": "}\n\n\n// 2) Find all matches (and helper methods)\nstatic void FindMatchingFlags(\n    const vector<CommandLineFlagInfo> &all_flags,\n    const CompletionOptions &options,\n",
                      "markdown": "`}\n\n\n// 2) Find all matches (and helper methods)\nstatic void FindMatchingFlags(\n    const vector<CommandLineFlagInfo> &all_flags,\n    const CompletionOptions &options,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.cc"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 20,
                  "endLine": 173,
                  "endColumn": 26,
                  "snippet": {
                    "text": "//    most likely to be useful first.  If this is set, however, the user\n//    really does want us to return every single flag as an option.\n//  - force_no_update: Any time we output lines, all of which share a\n//    common prefix, bash will 'helpfuly' not even bother to show the\n//    output, instead changing the current word to be that common prefix.\n//    If it's clear this shouldn't happen, we'll set this boolean\nstruct CompletionOptions {\n",
                    "rendered": {
                      "text": "//    most likely to be useful first.  If this is set, however, the user\n//    really does want us to return every single flag as an option.\n//  - force_no_update: Any time we output lines, all of which share a\n//    common prefix, bash will 'helpfuly' not even bother to show the\n//    output, instead changing the current word to be that common prefix.\n//    If it's clear this shouldn't happen, we'll set this boolean\nstruct CompletionOptions {\n",
                      "markdown": "`//    most likely to be useful first.  If this is set, however, the user\n//    really does want us to return every single flag as an option.\n//  - force_no_update: Any time we output lines, all of which share a\n//    common prefix, bash will 'helpfuly' not even bother to show the\n//    output, instead changing the current word to be that common prefix.\n//    If it's clear this shouldn't happen, we'll set this boolean\nstruct CompletionOptions {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.cc"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 26,
                  "endLine": 172,
                  "endColumn": 32,
                  "snippet": {
                    "text": "//    returned candidates to some small number, showing those that are\n//    most likely to be useful first.  If this is set, however, the user\n//    really does want us to return every single flag as an option.\n//  - force_no_update: Any time we output lines, all of which share a\n//    common prefix, bash will 'helpfuly' not even bother to show the\n//    output, instead changing the current word to be that common prefix.\n//    If it's clear this shouldn't happen, we'll set this boolean\n",
                    "rendered": {
                      "text": "//    returned candidates to some small number, showing those that are\n//    most likely to be useful first.  If this is set, however, the user\n//    really does want us to return every single flag as an option.\n//  - force_no_update: Any time we output lines, all of which share a\n//    common prefix, bash will 'helpfuly' not even bother to show the\n//    output, instead changing the current word to be that common prefix.\n//    If it's clear this shouldn't happen, we'll set this boolean\n",
                      "markdown": "`//    returned candidates to some small number, showing those that are\n//    most likely to be useful first.  If this is set, however, the user\n//    really does want us to return every single flag as an option.\n//  - force_no_update: Any time we output lines, all of which share a\n//    common prefix, bash will 'helpfuly' not even bother to show the\n//    output, instead changing the current word to be that common prefix.\n//    If it's clear this shouldn't happen, we'll set this boolean\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.cc"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 5,
                  "endLine": 99,
                  "endColumn": 11,
                  "snippet": {
                    "text": "static bool RemoveTrailingChar(string *str, char c);\n\n\n// 2) Find all matches\nstatic void FindMatchingFlags(\n    const vector<CommandLineFlagInfo> &all_flags,\n    const CompletionOptions &options,\n",
                    "rendered": {
                      "text": "static bool RemoveTrailingChar(string *str, char c);\n\n\n// 2) Find all matches\nstatic void FindMatchingFlags(\n    const vector<CommandLineFlagInfo> &all_flags,\n    const CompletionOptions &options,\n",
                      "markdown": "`static bool RemoveTrailingChar(string *str, char c);\n\n\n// 2) Find all matches\nstatic void FindMatchingFlags(\n    const vector<CommandLineFlagInfo> &all_flags,\n    const CompletionOptions &options,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.cc"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 58,
                  "endLine": 46,
                  "endColumn": 63,
                  "snippet": {
                    "text": "//  4) Potentially trim the set of flags returned to a smaller number\n//     that bash is happier with\n//  5) Output the matching flags in groups ordered by relevance.\n//     5a) Force bash to place most-relevent groups at the top of the list\n//     5b) Trim most flag's descriptions to fit on a single terminal line\n\n#include <cstdio>\n",
                    "rendered": {
                      "text": "//  4) Potentially trim the set of flags returned to a smaller number\n//     that bash is happier with\n//  5) Output the matching flags in groups ordered by relevance.\n//     5a) Force bash to place most-relevent groups at the top of the list\n//     5b) Trim most flag's descriptions to fit on a single terminal line\n\n#include <cstdio>\n",
                      "markdown": "`//  4) Potentially trim the set of flags returned to a smaller number\n//     that bash is happier with\n//  5) Output the matching flags in groups ordered by relevance.\n//     5a) Force bash to place most-relevent groups at the top of the list\n//     5b) Trim most flag's descriptions to fit on a single terminal line\n\n#include <cstdio>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.cc"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 16,
                  "endLine": 46,
                  "endColumn": 22,
                  "snippet": {
                    "text": "//  4) Potentially trim the set of flags returned to a smaller number\n//     that bash is happier with\n//  5) Output the matching flags in groups ordered by relevance.\n//     5a) Force bash to place most-relevent groups at the top of the list\n//     5b) Trim most flag's descriptions to fit on a single terminal line\n\n#include <cstdio>\n",
                    "rendered": {
                      "text": "//  4) Potentially trim the set of flags returned to a smaller number\n//     that bash is happier with\n//  5) Output the matching flags in groups ordered by relevance.\n//     5a) Force bash to place most-relevent groups at the top of the list\n//     5b) Trim most flag's descriptions to fit on a single terminal line\n\n#include <cstdio>\n",
                      "markdown": "`//  4) Potentially trim the set of flags returned to a smaller number\n//     that bash is happier with\n//  5) Output the matching flags in groups ordered by relevance.\n//     5a) Force bash to place most-relevent groups at the top of the list\n//     5b) Trim most flag's descriptions to fit on a single terminal line\n\n#include <cstdio>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_completions.cc"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 11,
                  "endLine": 44,
                  "endColumn": 17,
                  "snippet": {
                    "text": "//         completion word, output just that matching prefix\n//  3) Categorize those flags to produce a rough ordering of relevance.\n//  4) Potentially trim the set of flags returned to a smaller number\n//     that bash is happier with\n//  5) Output the matching flags in groups ordered by relevance.\n//     5a) Force bash to place most-relevent groups at the top of the list\n//     5b) Trim most flag's descriptions to fit on a single terminal line\n",
                    "rendered": {
                      "text": "//         completion word, output just that matching prefix\n//  3) Categorize those flags to produce a rough ordering of relevance.\n//  4) Potentially trim the set of flags returned to a smaller number\n//     that bash is happier with\n//  5) Output the matching flags in groups ordered by relevance.\n//     5a) Force bash to place most-relevent groups at the top of the list\n//     5b) Trim most flag's descriptions to fit on a single terminal line\n",
                      "markdown": "`//         completion word, output just that matching prefix\n//  3) Categorize those flags to produce a rough ordering of relevance.\n//  4) Potentially trim the set of flags returned to a smaller number\n//     that bash is happier with\n//  5) Output the matching flags in groups ordered by relevance.\n//     5a) Force bash to place most-relevent groups at the top of the list\n//     5b) Trim most flag's descriptions to fit on a single terminal line\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/cmake/package.cmake.in"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 82,
                  "endLine": 2,
                  "snippet": {
                    "text": "# Per-generator CPack configuration file. See CPACK_PROJECT_CONFIG_FILE documented at\n# http://www.cmake.org/cmake/help/v2.8.12/cpack.html#variable:CPACK_PROJECT_CONFIG_FILE\n#\n# All common CPACK_* variables are set in CMakeLists.txt already. This file only\n# overrides some of these to provide package generator specific settings.\n",
                    "rendered": {
                      "text": "# Per-generator CPack configuration file. See CPACK_PROJECT_CONFIG_FILE documented at\n# http://www.cmake.org/cmake/help/v2.8.12/cpack.html#variable:CPACK_PROJECT_CONFIG_FILE\n#\n# All common CPACK_* variables are set in CMakeLists.txt already. This file only\n# overrides some of these to provide package generator specific settings.\n",
                      "markdown": "`# Per-generator CPack configuration file. See CPACK_PROJECT_CONFIG_FILE documented at\n# http://www.cmake.org/cmake/help/v2.8.12/cpack.html#variable:CPACK_PROJECT_CONFIG_FILE\n#\n# All common CPACK_* variables are set in CMakeLists.txt already. This file only\n# overrides some of these to provide package generator specific settings.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/cmake/package.cmake.in"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 1,
                  "endLine": 40,
                  "endColumn": 6,
                  "snippet": {
                    "text": "  set (CPACK_DEBIAN_PACKAGE_ARCHITECTURE \"${CPACK_PACKAGE_ARCHITECTURE}\")\n\n# ------------------------------------------------------------------------------\n# RPM package\nelseif (CPACK_GENERATOR MATCHES \"RPM\")\n\n  set (CPACK_PACKAGE_FILE_NAME   \"${CPACK_PACKAGE_NAME}\")\n",
                    "rendered": {
                      "text": "  set (CPACK_DEBIAN_PACKAGE_ARCHITECTURE \"${CPACK_PACKAGE_ARCHITECTURE}\")\n\n# ------------------------------------------------------------------------------\n# RPM package\nelseif (CPACK_GENERATOR MATCHES \"RPM\")\n\n  set (CPACK_PACKAGE_FILE_NAME   \"${CPACK_PACKAGE_NAME}\")\n",
                      "markdown": "`  set (CPACK_DEBIAN_PACKAGE_ARCHITECTURE \"${CPACK_PACKAGE_ARCHITECTURE}\")\n\n# ------------------------------------------------------------------------------\n# RPM package\nelseif (CPACK_GENERATOR MATCHES \"RPM\")\n\n  set (CPACK_PACKAGE_FILE_NAME   \"${CPACK_PACKAGE_NAME}\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_reporting.cc"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 38,
                  "endLine": 402,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n  } else if (FLAGS_helppackage) {\n    // Shows help for all files in the same directory as main().  We\n    // don't want to resort to looking at dirname(progname), because\n    // the user can pick progname, and it may not relate to the file\n    // where main() resides.  So instead, we search the flags for a\n    // filename like \"/progname.cc\", and take the dirname of that.\n",
                    "rendered": {
                      "text": "\n  } else if (FLAGS_helppackage) {\n    // Shows help for all files in the same directory as main().  We\n    // don't want to resort to looking at dirname(progname), because\n    // the user can pick progname, and it may not relate to the file\n    // where main() resides.  So instead, we search the flags for a\n    // filename like \"/progname.cc\", and take the dirname of that.\n",
                      "markdown": "`\n  } else if (FLAGS_helppackage) {\n    // Shows help for all files in the same directory as main().  We\n    // don't want to resort to looking at dirname(progname), because\n    // the user can pick progname, and it may not relate to the file\n    // where main() resides.  So instead, we search the flags for a\n    // filename like \"/progname.cc\", and take the dirname of that.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_reporting.cc"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 57,
                  "endLine": 270,
                  "endColumn": 61,
                  "snippet": {
                    "text": "  vector<CommandLineFlagInfo> flags;\n  GetAllFlags(&flags);           // flags are sorted by filename, then flagname\n\n  string last_filename;          // so we know when we're at a new file\n  bool first_directory = true;   // controls blank lines between dirs\n  bool found_match = false;      // stays false iff no dir matches restrict\n  for (vector<CommandLineFlagInfo>::const_iterator flag = flags.begin();\n",
                    "rendered": {
                      "text": "  vector<CommandLineFlagInfo> flags;\n  GetAllFlags(&flags);           // flags are sorted by filename, then flagname\n\n  string last_filename;          // so we know when we're at a new file\n  bool first_directory = true;   // controls blank lines between dirs\n  bool found_match = false;      // stays false iff no dir matches restrict\n  for (vector<CommandLineFlagInfo>::const_iterator flag = flags.begin();\n",
                      "markdown": "`  vector<CommandLineFlagInfo> flags;\n  GetAllFlags(&flags);           // flags are sorted by filename, then flagname\n\n  string last_filename;          // so we know when we're at a new file\n  bool first_directory = true;   // controls blank lines between dirs\n  bool found_match = false;      // stays false iff no dir matches restrict\n  for (vector<CommandLineFlagInfo>::const_iterator flag = flags.begin();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_reporting.cc"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 23,
                  "endLine": 247,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    if (strstr(filename.c_str(), target->c_str()) != NULL)\n      return true;\n    // If the substring starts with a '/', that means that we want\n    // the string to be at the beginning of a directory component.\n    // That should match the first directory component as well, so\n    // we allow '/foo' to match a filename of 'foo'.\n    if (!target->empty() && (*target)[0] == PATH_SEPARATOR &&\n",
                    "rendered": {
                      "text": "    if (strstr(filename.c_str(), target->c_str()) != NULL)\n      return true;\n    // If the substring starts with a '/', that means that we want\n    // the string to be at the beginning of a directory component.\n    // That should match the first directory component as well, so\n    // we allow '/foo' to match a filename of 'foo'.\n    if (!target->empty() && (*target)[0] == PATH_SEPARATOR &&\n",
                      "markdown": "`    if (strstr(filename.c_str(), target->c_str()) != NULL)\n      return true;\n    // If the substring starts with a '/', that means that we want\n    // the string to be at the beginning of a directory component.\n    // That should match the first directory component as well, so\n    // we allow '/foo' to match a filename of 'foo'.\n    if (!target->empty() && (*target)[0] == PATH_SEPARATOR &&\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_reporting.cc"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 35,
                  "endLine": 238,
                  "endColumn": 39,
                  "snippet": {
                    "text": "  return filename.substr(0, (sep == string::npos) ? 0 : sep);\n}\n\n// Test whether a filename contains at least one of the substrings.\nstatic bool FileMatchesSubstring(const string& filename,\n                                 const vector<string>& substrings) {\n  for (vector<string>::const_iterator target = substrings.begin();\n",
                    "rendered": {
                      "text": "  return filename.substr(0, (sep == string::npos) ? 0 : sep);\n}\n\n// Test whether a filename contains at least one of the substrings.\nstatic bool FileMatchesSubstring(const string& filename,\n                                 const vector<string>& substrings) {\n  for (vector<string>::const_iterator target = substrings.begin();\n",
                      "markdown": "`  return filename.substr(0, (sep == string::npos) ? 0 : sep);\n}\n\n// Test whether a filename contains at least one of the substrings.\nstatic bool FileMatchesSubstring(const string& filename,\n                                 const vector<string>& substrings) {\n  for (vector<string>::const_iterator target = substrings.begin();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_reporting.cc"
                },
                "region": {
                  "startLine": 425,
                  "startColumn": 32,
                  "endLine": 425,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      }\n    }\n    if (last_package.empty()) {   // never found a package to print\n      LOG(WARNING) << \"Unable to find a package for file=\" << progname;\n    }\n    gflags_exitfunc(1);\n\n",
                    "rendered": {
                      "text": "      }\n    }\n    if (last_package.empty()) {   // never found a package to print\n      LOG(WARNING) << \"Unable to find a package for file=\" << progname;\n    }\n    gflags_exitfunc(1);\n\n",
                      "markdown": "`      }\n    }\n    if (last_package.empty()) {   // never found a package to print\n      LOG(WARNING) << \"Unable to find a package for file=\" << progname;\n    }\n    gflags_exitfunc(1);\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_reporting.cc"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 19,
                  "endLine": 150,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        --whitespace;\n      }\n      if (whitespace <= 0) {\n        // Couldn't find any whitespace to make a line break.  Just dump the\n        // rest out!\n        final_string += c_string;\n        chars_in_line = kLineLength;  // next part gets its own line for sure!\n",
                    "rendered": {
                      "text": "        --whitespace;\n      }\n      if (whitespace <= 0) {\n        // Couldn't find any whitespace to make a line break.  Just dump the\n        // rest out!\n        final_string += c_string;\n        chars_in_line = kLineLength;  // next part gets its own line for sure!\n",
                      "markdown": "`        --whitespace;\n      }\n      if (whitespace <= 0) {\n        // Couldn't find any whitespace to make a line break.  Just dump the\n        // rest out!\n        final_string += c_string;\n        chars_in_line = kLineLength;  // next part gets its own line for sure!\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags_reporting.cc"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 8,
                  "endLine": 144,
                  "endColumn": 14,
                  "snippet": {
                    "text": "      chars_left -= n + 1;\n      c_string += n + 1;\n    } else {\n      // Find the last whitespace on this 80-char line\n      int whitespace = kLineLength-chars_in_line-1;  // < 80 chars/line\n      while ( whitespace > 0 && !isspace(c_string[whitespace]) ) {\n        --whitespace;\n",
                    "rendered": {
                      "text": "      chars_left -= n + 1;\n      c_string += n + 1;\n    } else {\n      // Find the last whitespace on this 80-char line\n      int whitespace = kLineLength-chars_in_line-1;  // < 80 chars/line\n      while ( whitespace > 0 && !isspace(c_string[whitespace]) ) {\n        --whitespace;\n",
                      "markdown": "`      chars_left -= n + 1;\n      c_string += n + 1;\n    } else {\n      // Find the last whitespace on this 80-char line\n      int whitespace = kLineLength-chars_in_line-1;  // < 80 chars/line\n      while ( whitespace > 0 && !isspace(c_string[whitespace]) ) {\n        --whitespace;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/cmake/execute_test.cmake"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "endmacro ()\n\n# ----------------------------------------------------------------------------\n# script arguments\nif (NOT COMMAND)\n  message (FATAL_ERROR \"Test command not specified!\")\nendif ()\n",
                    "rendered": {
                      "text": "endmacro ()\n\n# ----------------------------------------------------------------------------\n# script arguments\nif (NOT COMMAND)\n  message (FATAL_ERROR \"Test command not specified!\")\nendif ()\n",
                      "markdown": "`endmacro ()\n\n# ----------------------------------------------------------------------------\n# script arguments\nif (NOT COMMAND)\n  message (FATAL_ERROR \"Test command not specified!\")\nendif ()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/appveyor.yml"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 50,
                  "endLine": 1,
                  "endColumn": 54,
                  "snippet": {
                    "text": "# Configuration for continuous integration service at appveyor.com\n\nversion: '{build}'\n\n",
                    "rendered": {
                      "text": "# Configuration for continuous integration service at appveyor.com\n\nversion: '{build}'\n\n",
                      "markdown": "`# Configuration for continuous integration service at appveyor.com\n\nversion: '{build}'\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/appveyor.yml"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 42,
                  "endLine": 1,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# Configuration for continuous integration service at appveyor.com\n\nversion: '{build}'\n\n",
                    "rendered": {
                      "text": "# Configuration for continuous integration service at appveyor.com\n\nversion: '{build}'\n\n",
                      "markdown": "`# Configuration for continuous integration service at appveyor.com\n\nversion: '{build}'\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 1942,
                  "startColumn": 14,
                  "endLine": 1942,
                  "endColumn": 44,
                  "snippet": {
                    "text": "  CommandLineFlagParser parser(registry);\n\n  // When we parse the commandline flags, we'll handle --flagfile,\n  // --tryfromenv, etc. as we see them (since flag-evaluation order\n  // may be important).  But sometimes apps set FLAGS_tryfromenv/etc.\n  // manually before calling ParseCommandLineFlags.  We want to evaluate\n  // those too, as if they were the first flags on the commandline.\n",
                    "rendered": {
                      "text": "  CommandLineFlagParser parser(registry);\n\n  // When we parse the commandline flags, we'll handle --flagfile,\n  // --tryfromenv, etc. as we see them (since flag-evaluation order\n  // may be important).  But sometimes apps set FLAGS_tryfromenv/etc.\n  // manually before calling ParseCommandLineFlags.  We want to evaluate\n  // those too, as if they were the first flags on the commandline.\n",
                      "markdown": "`  CommandLineFlagParser parser(registry);\n\n  // When we parse the commandline flags, we'll handle --flagfile,\n  // --tryfromenv, etc. as we see them (since flag-evaluation order\n  // may be important).  But sometimes apps set FLAGS_tryfromenv/etc.\n  // manually before calling ParseCommandLineFlags.  We want to evaluate\n  // those too, as if they were the first flags on the commandline.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 1929,
                  "startColumn": 5,
                  "endLine": 1929,
                  "endColumn": 9,
                  "snippet": {
                    "text": "// HandleCommandLineHelpFlags()\n//    This is the main function called from main(), to actually\n//    parse the commandline.  It modifies argc and argv as described\n//    at the top of gflags.h.  You can also divide this\n//    function into two parts, if you want to do work between\n//    the parsing of the flags and the printing of any help output.\n// --------------------------------------------------------------------\n",
                    "rendered": {
                      "text": "// HandleCommandLineHelpFlags()\n//    This is the main function called from main(), to actually\n//    parse the commandline.  It modifies argc and argv as described\n//    at the top of gflags.h.  You can also divide this\n//    function into two parts, if you want to do work between\n//    the parsing of the flags and the printing of any help output.\n// --------------------------------------------------------------------\n",
                      "markdown": "`// HandleCommandLineHelpFlags()\n//    This is the main function called from main(), to actually\n//    parse the commandline.  It modifies argc and argv as described\n//    at the top of gflags.h.  You can also divide this\n//    function into two parts, if you want to do work between\n//    the parsing of the flags and the printing of any help output.\n// --------------------------------------------------------------------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 1745,
                  "startColumn": 48,
                  "endLine": 1745,
                  "endColumn": 52,
                  "snippet": {
                    "text": "//    commandline flags into a file/string and read them back\n//    out again.  I can see a use for CommandlineFlagsIntoString,\n//    for creating a flagfile, but the rest don't seem that useful\n//    -- some, I think, are a poor-man's attempt at FlagSaver --\n//    and are included only until we can delete them from callers.\n//    Note they don't save --flagfile flags (though they do save\n//    the result of having called the flagfile, of course).\n",
                    "rendered": {
                      "text": "//    commandline flags into a file/string and read them back\n//    out again.  I can see a use for CommandlineFlagsIntoString,\n//    for creating a flagfile, but the rest don't seem that useful\n//    -- some, I think, are a poor-man's attempt at FlagSaver --\n//    and are included only until we can delete them from callers.\n//    Note they don't save --flagfile flags (though they do save\n//    the result of having called the flagfile, of course).\n",
                      "markdown": "`//    commandline flags into a file/string and read them back\n//    out again.  I can see a use for CommandlineFlagsIntoString,\n//    for creating a flagfile, but the rest don't seem that useful\n//    -- some, I think, are a poor-man's attempt at FlagSaver --\n//    and are included only until we can delete them from callers.\n//    Note they don't save --flagfile flags (though they do save\n//    the result of having called the flagfile, of course).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 1664,
                  "startColumn": 42,
                  "endLine": 1664,
                  "endColumn": 46,
                  "snippet": {
                    "text": "// FlagSaver\n// FlagSaverImpl\n//    This class stores the states of all flags at construct time,\n//    and restores all flags to that state at destruct time.\n//    Its major implementation challenge is that it never modifies\n//    pointers in the 'main' registry, so global FLAG_* vars always\n//    point to the right place.\n",
                    "rendered": {
                      "text": "// FlagSaver\n// FlagSaverImpl\n//    This class stores the states of all flags at construct time,\n//    and restores all flags to that state at destruct time.\n//    Its major implementation challenge is that it never modifies\n//    pointers in the 'main' registry, so global FLAG_* vars always\n//    point to the right place.\n",
                      "markdown": "`// FlagSaver\n// FlagSaverImpl\n//    This class stores the states of all flags at construct time,\n//    and restores all flags to that state at destruct time.\n//    Its major implementation challenge is that it never modifies\n//    pointers in the 'main' registry, so global FLAG_* vars always\n//    point to the right place.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 1663,
                  "startColumn": 47,
                  "endLine": 1663,
                  "endColumn": 51,
                  "snippet": {
                    "text": "// --------------------------------------------------------------------\n// FlagSaver\n// FlagSaverImpl\n//    This class stores the states of all flags at construct time,\n//    and restores all flags to that state at destruct time.\n//    Its major implementation challenge is that it never modifies\n//    pointers in the 'main' registry, so global FLAG_* vars always\n",
                    "rendered": {
                      "text": "// --------------------------------------------------------------------\n// FlagSaver\n// FlagSaverImpl\n//    This class stores the states of all flags at construct time,\n//    and restores all flags to that state at destruct time.\n//    Its major implementation challenge is that it never modifies\n//    pointers in the 'main' registry, so global FLAG_* vars always\n",
                      "markdown": "`// --------------------------------------------------------------------\n// FlagSaver\n// FlagSaverImpl\n//    This class stores the states of all flags at construct time,\n//    and restores all flags to that state at destruct time.\n//    Its major implementation challenge is that it never modifies\n//    pointers in the 'main' registry, so global FLAG_* vars always\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 1592,
                  "startColumn": 43,
                  "endLine": 1592,
                  "endColumn": 47,
                  "snippet": {
                    "text": "//    SetCommandLineOption(\"foo\", x) rather than FLAGS_foo = x).\n//    There's also a bit more flexibility here due to the various\n//    set-modes, but typically these are used when you only have\n//    that flag's name as a string, perhaps at runtime.\n//    All of these work on the default, global registry.\n//       For GetCommandLineOption, return false if no such flag\n//    is known, true otherwise.  We clear \"value\" if a suitable\n",
                    "rendered": {
                      "text": "//    SetCommandLineOption(\"foo\", x) rather than FLAGS_foo = x).\n//    There's also a bit more flexibility here due to the various\n//    set-modes, but typically these are used when you only have\n//    that flag's name as a string, perhaps at runtime.\n//    All of these work on the default, global registry.\n//       For GetCommandLineOption, return false if no such flag\n//    is known, true otherwise.  We clear \"value\" if a suitable\n",
                      "markdown": "`//    SetCommandLineOption(\"foo\", x) rather than FLAGS_foo = x).\n//    There's also a bit more flexibility here due to the various\n//    set-modes, but typically these are used when you only have\n//    that flag's name as a string, perhaps at runtime.\n//    All of these work on the default, global registry.\n//       For GetCommandLineOption, return false if no such flag\n//    is known, true otherwise.  We clear \"value\" if a suitable\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 1522,
                  "startColumn": 40,
                  "endLine": 1522,
                  "endColumn": 44,
                  "snippet": {
                    "text": "  if (called_set_argv) return;\n  called_set_argv = true;\n\n  assert(argc > 0); // every program has at least a name\n  argv0 = argv[0];\n\n  cmdline.clear();\n",
                    "rendered": {
                      "text": "  if (called_set_argv) return;\n  called_set_argv = true;\n\n  assert(argc > 0); // every program has at least a name\n  argv0 = argv[0];\n\n  cmdline.clear();\n",
                      "markdown": "`  if (called_set_argv) return;\n  called_set_argv = true;\n\n  assert(argc > 0); // every program has at least a name\n  argv0 = argv[0];\n\n  cmdline.clear();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 1390,
                  "startColumn": 48,
                  "endLine": 1390,
                  "endColumn": 52,
                  "snippet": {
                    "text": "  CommandLineFlag* flag = registry->FindFlagViaPtrLocked(flag_ptr);\n  if (!flag) {\n    LOG(WARNING) << \"Ignoring RegisterValidateFunction() for flag pointer \"\n                 << flag_ptr << \": no flag found at that address\";\n    return false;\n  } else if (validate_fn_proto == flag->validate_function()) {\n    return true;    // ok to register the same function over and over again\n",
                    "rendered": {
                      "text": "  CommandLineFlag* flag = registry->FindFlagViaPtrLocked(flag_ptr);\n  if (!flag) {\n    LOG(WARNING) << \"Ignoring RegisterValidateFunction() for flag pointer \"\n                 << flag_ptr << \": no flag found at that address\";\n    return false;\n  } else if (validate_fn_proto == flag->validate_function()) {\n    return true;    // ok to register the same function over and over again\n",
                      "markdown": "`  CommandLineFlag* flag = registry->FindFlagViaPtrLocked(flag_ptr);\n  if (!flag) {\n    LOG(WARNING) << \"Ignoring RegisterValidateFunction() for flag pointer \"\n                 << flag_ptr << \": no flag found at that address\";\n    return false;\n  } else if (validate_fn_proto == flag->validate_function()) {\n    return true;    // ok to register the same function over and over again\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 1381,
                  "startColumn": 41,
                  "endLine": 1381,
                  "endColumn": 45,
                  "snippet": {
                    "text": "bool AddFlagValidator(const void* flag_ptr, ValidateFnProto validate_fn_proto) {\n  // We want a lock around this routine, in case two threads try to\n  // add a validator (hopefully the same one!) at once.  We could use\n  // our own thread, but we need to loook at the registry anyway, so\n  // we just steal that one.\n  FlagRegistry* const registry = FlagRegistry::GlobalRegistry();\n  FlagRegistryLock frl(registry);\n",
                    "rendered": {
                      "text": "bool AddFlagValidator(const void* flag_ptr, ValidateFnProto validate_fn_proto) {\n  // We want a lock around this routine, in case two threads try to\n  // add a validator (hopefully the same one!) at once.  We could use\n  // our own thread, but we need to loook at the registry anyway, so\n  // we just steal that one.\n  FlagRegistry* const registry = FlagRegistry::GlobalRegistry();\n  FlagRegistryLock frl(registry);\n",
                      "markdown": "`bool AddFlagValidator(const void* flag_ptr, ValidateFnProto validate_fn_proto) {\n  // We want a lock around this routine, in case two threads try to\n  // add a validator (hopefully the same one!) at once.  We could use\n  // our own thread, but we need to loook at the registry anyway, so\n  // we just steal that one.\n  FlagRegistry* const registry = FlagRegistry::GlobalRegistry();\n  FlagRegistryLock frl(registry);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 1380,
                  "startColumn": 46,
                  "endLine": 1380,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\nbool AddFlagValidator(const void* flag_ptr, ValidateFnProto validate_fn_proto) {\n  // We want a lock around this routine, in case two threads try to\n  // add a validator (hopefully the same one!) at once.  We could use\n  // our own thread, but we need to loook at the registry anyway, so\n  // we just steal that one.\n  FlagRegistry* const registry = FlagRegistry::GlobalRegistry();\n",
                    "rendered": {
                      "text": "\nbool AddFlagValidator(const void* flag_ptr, ValidateFnProto validate_fn_proto) {\n  // We want a lock around this routine, in case two threads try to\n  // add a validator (hopefully the same one!) at once.  We could use\n  // our own thread, but we need to loook at the registry anyway, so\n  // we just steal that one.\n  FlagRegistry* const registry = FlagRegistry::GlobalRegistry();\n",
                      "markdown": "`\nbool AddFlagValidator(const void* flag_ptr, ValidateFnProto validate_fn_proto) {\n  // We want a lock around this routine, in case two threads try to\n  // add a validator (hopefully the same one!) at once.  We could use\n  // our own thread, but we need to loook at the registry anyway, so\n  // we just steal that one.\n  FlagRegistry* const registry = FlagRegistry::GlobalRegistry();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 1328,
                  "startColumn": 26,
                  "endLine": 1328,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        flags_are_relevant = false;\n      }\n\n      // Split the line up at spaces into glob-patterns\n      const char* space = line.c_str();   // just has to be non-NULL\n      for (const char* word = line.c_str(); *space; word = space+1) {\n        if (flags_are_relevant)     // we can stop as soon as we match\n",
                    "rendered": {
                      "text": "        flags_are_relevant = false;\n      }\n\n      // Split the line up at spaces into glob-patterns\n      const char* space = line.c_str();   // just has to be non-NULL\n      for (const char* word = line.c_str(); *space; word = space+1) {\n        if (flags_are_relevant)     // we can stop as soon as we match\n",
                      "markdown": "`        flags_are_relevant = false;\n      }\n\n      // Split the line up at spaces into glob-patterns\n      const char* space = line.c_str();   // just has to be non-NULL\n      for (const char* word = line.c_str(); *space; word = space+1) {\n        if (flags_are_relevant)     // we can stop as soon as we match\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 1278,
                  "startColumn": 29,
                  "endLine": 1278,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  bool in_filename_section = false;\n\n  const char* line_end = flagfile_contents;\n  // We read this file a line at a time.\n  for (; line_end; flagfile_contents = line_end + 1) {\n    while (*flagfile_contents && isspace(*flagfile_contents))\n      ++flagfile_contents;\n",
                    "rendered": {
                      "text": "  bool in_filename_section = false;\n\n  const char* line_end = flagfile_contents;\n  // We read this file a line at a time.\n  for (; line_end; flagfile_contents = line_end + 1) {\n    while (*flagfile_contents && isspace(*flagfile_contents))\n      ++flagfile_contents;\n",
                      "markdown": "`  bool in_filename_section = false;\n\n  const char* line_end = flagfile_contents;\n  // We read this file a line at a time.\n  for (; line_end; flagfile_contents = line_end + 1) {\n    while (*flagfile_contents && isspace(*flagfile_contents))\n      ++flagfile_contents;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 1038,
                  "startColumn": 55,
                  "endLine": 1038,
                  "endColumn": 59,
                  "snippet": {
                    "text": "  for (int i = 1; i < first_nonopt; i++) {\n    char* arg = (*argv)[i];\n\n    // Like getopt(), we permute non-option flags to be at the end.\n    if (arg[0] != '-' || arg[1] == '\\0') {\t// must be a program argument: \"-\" is an argument, not a flag\n      memmove((*argv) + i, (*argv) + i+1, (*argc - (i+1)) * sizeof((*argv)[i]));\n      (*argv)[*argc-1] = arg;      // we go last\n",
                    "rendered": {
                      "text": "  for (int i = 1; i < first_nonopt; i++) {\n    char* arg = (*argv)[i];\n\n    // Like getopt(), we permute non-option flags to be at the end.\n    if (arg[0] != '-' || arg[1] == '\\0') {\t// must be a program argument: \"-\" is an argument, not a flag\n      memmove((*argv) + i, (*argv) + i+1, (*argc - (i+1)) * sizeof((*argv)[i]));\n      (*argv)[*argc-1] = arg;      // we go last\n",
                      "markdown": "`  for (int i = 1; i < first_nonopt; i++) {\n    char* arg = (*argv)[i];\n\n    // Like getopt(), we permute non-option flags to be at the end.\n    if (arg[0] != '-' || arg[1] == '\\0') {\t// must be a program argument: \"-\" is an argument, not a flag\n      memmove((*argv) + i, (*argv) + i+1, (*argc - (i+1)) * sizeof((*argv)[i]));\n      (*argv)[*argc-1] = arg;      // we go last\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 1012,
                  "startColumn": 17,
                  "endLine": 1012,
                  "endColumn": 21,
                  "snippet": {
                    "text": "// Snarf an entire file into a C++ string.  This is just so that we\n// can do all the I/O in one place and not worry about it everywhere.\n// Plus, it's convenient to have the whole file contents at hand.\n// Adds a newline at the end of the file.\n#define PFATAL(s)  do { perror(s); gflags_exitfunc(1); } while (0)\n\nstatic string ReadFileIntoString(const char* filename) {\n",
                    "rendered": {
                      "text": "// Snarf an entire file into a C++ string.  This is just so that we\n// can do all the I/O in one place and not worry about it everywhere.\n// Plus, it's convenient to have the whole file contents at hand.\n// Adds a newline at the end of the file.\n#define PFATAL(s)  do { perror(s); gflags_exitfunc(1); } while (0)\n\nstatic string ReadFileIntoString(const char* filename) {\n",
                      "markdown": "`// Snarf an entire file into a C++ string.  This is just so that we\n// can do all the I/O in one place and not worry about it everywhere.\n// Plus, it's convenient to have the whole file contents at hand.\n// Adds a newline at the end of the file.\n#define PFATAL(s)  do { perror(s); gflags_exitfunc(1); } while (0)\n\nstatic string ReadFileIntoString(const char* filename) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 1011,
                  "startColumn": 56,
                  "endLine": 1011,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\n// Snarf an entire file into a C++ string.  This is just so that we\n// can do all the I/O in one place and not worry about it everywhere.\n// Plus, it's convenient to have the whole file contents at hand.\n// Adds a newline at the end of the file.\n#define PFATAL(s)  do { perror(s); gflags_exitfunc(1); } while (0)\n\n",
                    "rendered": {
                      "text": "\n// Snarf an entire file into a C++ string.  This is just so that we\n// can do all the I/O in one place and not worry about it everywhere.\n// Plus, it's convenient to have the whole file contents at hand.\n// Adds a newline at the end of the file.\n#define PFATAL(s)  do { perror(s); gflags_exitfunc(1); } while (0)\n\n",
                      "markdown": "`\n// Snarf an entire file into a C++ string.  This is just so that we\n// can do all the I/O in one place and not worry about it everywhere.\n// Plus, it's convenient to have the whole file contents at hand.\n// Adds a newline at the end of the file.\n#define PFATAL(s)  do { perror(s); gflags_exitfunc(1); } while (0)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 971,
                  "startColumn": 45,
                  "endLine": 971,
                  "endColumn": 49,
                  "snippet": {
                    "text": "  string ProcessOptionsFromStringLocked(const string& contentdata,\n                                        FlagSettingMode set_mode);\n\n  // These are the 'recursive' flags, defined at the top of this file.\n  // Whenever we see these flags on the commandline, we must take action.\n  // These are called by ProcessSingleOptionLocked and, similarly, return\n  // new values if everything went ok, or the empty-string if not.\n",
                    "rendered": {
                      "text": "  string ProcessOptionsFromStringLocked(const string& contentdata,\n                                        FlagSettingMode set_mode);\n\n  // These are the 'recursive' flags, defined at the top of this file.\n  // Whenever we see these flags on the commandline, we must take action.\n  // These are called by ProcessSingleOptionLocked and, similarly, return\n  // new values if everything went ok, or the empty-string if not.\n",
                      "markdown": "`  string ProcessOptionsFromStringLocked(const string& contentdata,\n                                        FlagSettingMode set_mode);\n\n  // These are the 'recursive' flags, defined at the top of this file.\n  // Whenever we see these flags on the commandline, we must take action.\n  // These are called by ProcessSingleOptionLocked and, similarly, return\n  // new values if everything went ok, or the empty-string if not.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 659,
                  "startColumn": 58,
                  "endLine": 659,
                  "endColumn": 62,
                  "snippet": {
                    "text": "  // Returns the flag object for the specified name, or NULL if not found.\n  CommandLineFlag* FindFlagLocked(const char* name);\n\n  // Returns the flag object whose current-value is stored at flag_ptr.\n  // That is, for whom current_->value_buffer_ == flag_ptr\n  CommandLineFlag* FindFlagViaPtrLocked(const void* flag_ptr);\n\n",
                    "rendered": {
                      "text": "  // Returns the flag object for the specified name, or NULL if not found.\n  CommandLineFlag* FindFlagLocked(const char* name);\n\n  // Returns the flag object whose current-value is stored at flag_ptr.\n  // That is, for whom current_->value_buffer_ == flag_ptr\n  CommandLineFlag* FindFlagViaPtrLocked(const void* flag_ptr);\n\n",
                      "markdown": "`  // Returns the flag object for the specified name, or NULL if not found.\n  CommandLineFlag* FindFlagLocked(const char* name);\n\n  // Returns the flag object whose current-value is stored at flag_ptr.\n  // That is, for whom current_->value_buffer_ == flag_ptr\n  CommandLineFlag* FindFlagViaPtrLocked(const void* flag_ptr);\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 598,
                  "startColumn": 62,
                  "endLine": 598,
                  "endColumn": 66,
                  "snippet": {
                    "text": "}\n\nvoid CommandLineFlag::CopyFrom(const CommandLineFlag& src) {\n  // Note we only copy the non-const members; others are fixed at construct time\n  if (modified_ != src.modified_) modified_ = src.modified_;\n  if (!current_->Equal(*src.current_)) current_->CopyFrom(*src.current_);\n  if (!defvalue_->Equal(*src.defvalue_)) defvalue_->CopyFrom(*src.defvalue_);\n",
                    "rendered": {
                      "text": "}\n\nvoid CommandLineFlag::CopyFrom(const CommandLineFlag& src) {\n  // Note we only copy the non-const members; others are fixed at construct time\n  if (modified_ != src.modified_) modified_ = src.modified_;\n  if (!current_->Equal(*src.current_)) current_->CopyFrom(*src.current_);\n  if (!defvalue_->Equal(*src.defvalue_)) defvalue_->CopyFrom(*src.defvalue_);\n",
                      "markdown": "`}\n\nvoid CommandLineFlag::CopyFrom(const CommandLineFlag& src) {\n  // Note we only copy the non-const members; others are fixed at construct time\n  if (modified_ != src.modified_) modified_ = src.modified_;\n  if (!current_->Equal(*src.current_)) current_->CopyFrom(*src.current_);\n  if (!defvalue_->Equal(*src.defvalue_)) defvalue_->CopyFrom(*src.defvalue_);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 590,
                  "startColumn": 4,
                  "endLine": 590,
                  "endColumn": 12,
                  "snippet": {
                    "text": "}\n\nvoid CommandLineFlag::UpdateModifiedBit() {\n  // Update the \"modified\" bit in case somebody bypassed the\n  // Flags API and wrote directly through the FLAGS_name variable.\n  if (!modified_ && !current_->Equal(*defvalue_)) {\n    modified_ = true;\n",
                    "rendered": {
                      "text": "}\n\nvoid CommandLineFlag::UpdateModifiedBit() {\n  // Update the \"modified\" bit in case somebody bypassed the\n  // Flags API and wrote directly through the FLAGS_name variable.\n  if (!modified_ && !current_->Equal(*defvalue_)) {\n    modified_ = true;\n",
                      "markdown": "`}\n\nvoid CommandLineFlag::UpdateModifiedBit() {\n  // Update the \"modified\" bit in case somebody bypassed the\n  // Flags API and wrote directly through the FLAGS_name variable.\n  if (!modified_ && !current_->Equal(*defvalue_)) {\n    modified_ = true;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 58,
                  "endLine": 243,
                  "endColumn": 62,
                  "snippet": {
                    "text": "  void operator=(const FlagValue&);\n};\n\n// Map the given C++ type to a value of the ValueType enum at compile time.\n#define DEFINE_FLAG_TRAITS(type, value)        \\\n  template <>                                  \\\n  struct FlagValue::FlagValueTraits<type> {    \\\n",
                    "rendered": {
                      "text": "  void operator=(const FlagValue&);\n};\n\n// Map the given C++ type to a value of the ValueType enum at compile time.\n#define DEFINE_FLAG_TRAITS(type, value)        \\\n  template <>                                  \\\n  struct FlagValue::FlagValueTraits<type> {    \\\n",
                      "markdown": "`  void operator=(const FlagValue&);\n};\n\n// Map the given C++ type to a value of the ValueType enum at compile time.\n#define DEFINE_FLAG_TRAITS(type, value)        \\\n  template <>                                  \\\n  struct FlagValue::FlagValueTraits<type> {    \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 24,
                  "endLine": 77,
                  "endColumn": 28,
                  "snippet": {
                    "text": "// with any other part of this file.\n//\n// FlagRegisterer is the helper class used by the DEFINE_* macros to\n// allow work to be done at global initialization time.\n//\n// CommandLineFlagParser is the class that reads from the commandline\n// and instantiates flag values based on that.  It needs to poke into\n",
                    "rendered": {
                      "text": "// with any other part of this file.\n//\n// FlagRegisterer is the helper class used by the DEFINE_* macros to\n// allow work to be done at global initialization time.\n//\n// CommandLineFlagParser is the class that reads from the commandline\n// and instantiates flag values based on that.  It needs to poke into\n",
                      "markdown": "`// with any other part of this file.\n//\n// FlagRegisterer is the helper class used by the DEFINE_* macros to\n// allow work to be done at global initialization time.\n//\n// CommandLineFlagParser is the class that reads from the commandline\n// and instantiates flag values based on that.  It needs to poke into\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 18,
                  "endLine": 38,
                  "endColumn": 22,
                  "snippet": {
                    "text": "//\n// * FlagRegistry owns CommandLineFlags owns FlagValue.\n// * FlagSaver holds a FlagRegistry (saves it at construct time,\n//     restores it at destroy time).\n// * CommandLineFlagParser lives outside that hierarchy, but works on\n//     CommandLineFlags (modifying the FlagValues).\n// * Free functions like SetCommandLineOption() work via one of the\n",
                    "rendered": {
                      "text": "//\n// * FlagRegistry owns CommandLineFlags owns FlagValue.\n// * FlagSaver holds a FlagRegistry (saves it at construct time,\n//     restores it at destroy time).\n// * CommandLineFlagParser lives outside that hierarchy, but works on\n//     CommandLineFlags (modifying the FlagValues).\n// * Free functions like SetCommandLineOption() work via one of the\n",
                      "markdown": "`//\n// * FlagRegistry owns CommandLineFlags owns FlagValue.\n// * FlagSaver holds a FlagRegistry (saves it at construct time,\n//     restores it at destroy time).\n// * CommandLineFlagParser lives outside that hierarchy, but works on\n//     CommandLineFlags (modifying the FlagValues).\n// * Free functions like SetCommandLineOption() work via one of the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 45,
                  "endLine": 37,
                  "endColumn": 49,
                  "snippet": {
                    "text": "// stuff.  Here's how everything fits together\n//\n// * FlagRegistry owns CommandLineFlags owns FlagValue.\n// * FlagSaver holds a FlagRegistry (saves it at construct time,\n//     restores it at destroy time).\n// * CommandLineFlagParser lives outside that hierarchy, but works on\n//     CommandLineFlags (modifying the FlagValues).\n",
                    "rendered": {
                      "text": "// stuff.  Here's how everything fits together\n//\n// * FlagRegistry owns CommandLineFlags owns FlagValue.\n// * FlagSaver holds a FlagRegistry (saves it at construct time,\n//     restores it at destroy time).\n// * CommandLineFlagParser lives outside that hierarchy, but works on\n//     CommandLineFlags (modifying the FlagValues).\n",
                      "markdown": "`// stuff.  Here's how everything fits together\n//\n// * FlagRegistry owns CommandLineFlags owns FlagValue.\n// * FlagSaver holds a FlagRegistry (saves it at construct time,\n//     restores it at destroy time).\n// * CommandLineFlagParser lives outside that hierarchy, but works on\n//     CommandLineFlags (modifying the FlagValues).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 1929,
                  "startColumn": 12,
                  "endLine": 1929,
                  "endColumn": 17,
                  "snippet": {
                    "text": "// HandleCommandLineHelpFlags()\n//    This is the main function called from main(), to actually\n//    parse the commandline.  It modifies argc and argv as described\n//    at the top of gflags.h.  You can also divide this\n//    function into two parts, if you want to do work between\n//    the parsing of the flags and the printing of any help output.\n// --------------------------------------------------------------------\n",
                    "rendered": {
                      "text": "// HandleCommandLineHelpFlags()\n//    This is the main function called from main(), to actually\n//    parse the commandline.  It modifies argc and argv as described\n//    at the top of gflags.h.  You can also divide this\n//    function into two parts, if you want to do work between\n//    the parsing of the flags and the printing of any help output.\n// --------------------------------------------------------------------\n",
                      "markdown": "`// HandleCommandLineHelpFlags()\n//    This is the main function called from main(), to actually\n//    parse the commandline.  It modifies argc and argv as described\n//    at the top of gflags.h.  You can also divide this\n//    function into two parts, if you want to do work between\n//    the parsing of the flags and the printing of any help output.\n// --------------------------------------------------------------------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 1885,
                  "startColumn": 17,
                  "endLine": 1885,
                  "endColumn": 23,
                  "snippet": {
                    "text": "// RegisterFlagValidator()\n//    RegisterFlagValidator() is the function that clients use to\n//    'decorate' a flag with a validation function.  Once this is\n//    done, every time the flag is set (including when the flag\n//    is parsed from argv), the validator-function is called.\n//       These functions return true if the validator was added\n//    successfully, or false if not: the flag already has a validator,\n",
                    "rendered": {
                      "text": "// RegisterFlagValidator()\n//    RegisterFlagValidator() is the function that clients use to\n//    'decorate' a flag with a validation function.  Once this is\n//    done, every time the flag is set (including when the flag\n//    is parsed from argv), the validator-function is called.\n//       These functions return true if the validator was added\n//    successfully, or false if not: the flag already has a validator,\n",
                      "markdown": "`// RegisterFlagValidator()\n//    RegisterFlagValidator() is the function that clients use to\n//    'decorate' a flag with a validation function.  Once this is\n//    done, every time the flag is set (including when the flag\n//    is parsed from argv), the validator-function is called.\n//       These functions return true if the validator was added\n//    successfully, or false if not: the flag already has a validator,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 1491,
                  "startColumn": 8,
                  "endLine": 1491,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    OUTPUT->push_back(fi);\n  }\n  registry->Unlock();\n  // Now sort the flags, first by filename they occur in, then alphabetically\n  sort(OUTPUT->begin(), OUTPUT->end(), FilenameFlagnameCmp());\n}\n\n",
                    "rendered": {
                      "text": "    OUTPUT->push_back(fi);\n  }\n  registry->Unlock();\n  // Now sort the flags, first by filename they occur in, then alphabetically\n  sort(OUTPUT->begin(), OUTPUT->end(), FilenameFlagnameCmp());\n}\n\n",
                      "markdown": "`    OUTPUT->push_back(fi);\n  }\n  registry->Unlock();\n  // Now sort the flags, first by filename they occur in, then alphabetically\n  sort(OUTPUT->begin(), OUTPUT->end(), FilenameFlagnameCmp());\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 1476,
                  "startColumn": 65,
                  "endLine": 1476,
                  "endColumn": 71,
                  "snippet": {
                    "text": "                  const CommandLineFlagInfo& b) const {\n    int cmp = strcmp(a.filename.c_str(), b.filename.c_str());\n    if (cmp == 0)\n      cmp = strcmp(a.name.c_str(), b.name.c_str());  // secondary sort key\n    return cmp < 0;\n  }\n};\n",
                    "rendered": {
                      "text": "                  const CommandLineFlagInfo& b) const {\n    int cmp = strcmp(a.filename.c_str(), b.filename.c_str());\n    if (cmp == 0)\n      cmp = strcmp(a.name.c_str(), b.name.c_str());  // secondary sort key\n    return cmp < 0;\n  }\n};\n",
                      "markdown": "`                  const CommandLineFlagInfo& b) const {\n    int cmp = strcmp(a.filename.c_str(), b.filename.c_str());\n    if (cmp == 0)\n      cmp = strcmp(a.name.c_str(), b.name.c_str());  // secondary sort key\n    return cmp < 0;\n  }\n};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 1385,
                  "startColumn": 11,
                  "endLine": 1385,
                  "endColumn": 17,
                  "snippet": {
                    "text": "  // we just steal that one.\n  FlagRegistry* const registry = FlagRegistry::GlobalRegistry();\n  FlagRegistryLock frl(registry);\n  // First, find the flag whose current-flag storage is 'flag'.\n  // This is the CommandLineFlag whose current_->value_buffer_ == flag\n  CommandLineFlag* flag = registry->FindFlagViaPtrLocked(flag_ptr);\n  if (!flag) {\n",
                    "rendered": {
                      "text": "  // we just steal that one.\n  FlagRegistry* const registry = FlagRegistry::GlobalRegistry();\n  FlagRegistryLock frl(registry);\n  // First, find the flag whose current-flag storage is 'flag'.\n  // This is the CommandLineFlag whose current_->value_buffer_ == flag\n  CommandLineFlag* flag = registry->FindFlagViaPtrLocked(flag_ptr);\n  if (!flag) {\n",
                      "markdown": "`  // we just steal that one.\n  FlagRegistry* const registry = FlagRegistry::GlobalRegistry();\n  FlagRegistryLock frl(registry);\n  // First, find the flag whose current-flag storage is 'flag'.\n  // This is the CommandLineFlag whose current_->value_buffer_ == flag\n  CommandLineFlag* flag = registry->FindFlagViaPtrLocked(flag_ptr);\n  if (!flag) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 1371,
                  "startColumn": 44,
                  "endLine": 1371,
                  "endColumn": 49,
                  "snippet": {
                    "text": "  if (SafeGetEnv(varname, valstr)) {\n    FlagValue ifv(new T, true);\n    if (!ifv.ParseFrom(valstr.c_str())) {\n      ReportError(DIE, \"ERROR: error parsing env variable '%s' with value '%s'\\n\",\n                  varname, valstr.c_str());\n    }\n    return OTHER_VALUE_AS(ifv, T);\n",
                    "rendered": {
                      "text": "  if (SafeGetEnv(varname, valstr)) {\n    FlagValue ifv(new T, true);\n    if (!ifv.ParseFrom(valstr.c_str())) {\n      ReportError(DIE, \"ERROR: error parsing env variable '%s' with value '%s'\\n\",\n                  varname, valstr.c_str());\n    }\n    return OTHER_VALUE_AS(ifv, T);\n",
                      "markdown": "`  if (SafeGetEnv(varname, valstr)) {\n    FlagValue ifv(new T, true);\n    if (!ifv.ParseFrom(valstr.c_str())) {\n      ReportError(DIE, \"ERROR: error parsing env variable '%s' with value '%s'\\n\",\n                  varname, valstr.c_str());\n    }\n    return OTHER_VALUE_AS(ifv, T);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 1055,
                  "startColumn": 6,
                  "endLine": 1055,
                  "endColumn": 12,
                  "snippet": {
                    "text": "      break;\n    }\n\n    // Find the flag object for this option\n    string key;\n    const char* value;\n    string error_message;\n",
                    "rendered": {
                      "text": "      break;\n    }\n\n    // Find the flag object for this option\n    string key;\n    const char* value;\n    string error_message;\n",
                      "markdown": "`      break;\n    }\n\n    // Find the flag object for this option\n    string key;\n    const char* value;\n    string error_message;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 976,
                  "startColumn": 4,
                  "endLine": 976,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  // These are called by ProcessSingleOptionLocked and, similarly, return\n  // new values if everything went ok, or the empty-string if not.\n  string ProcessFlagfileLocked(const string& flagval, FlagSettingMode set_mode);\n  // diff fromenv/tryfromenv\n  string ProcessFromenvLocked(const string& flagval, FlagSettingMode set_mode,\n                              bool errors_are_fatal);\n\n",
                    "rendered": {
                      "text": "  // These are called by ProcessSingleOptionLocked and, similarly, return\n  // new values if everything went ok, or the empty-string if not.\n  string ProcessFlagfileLocked(const string& flagval, FlagSettingMode set_mode);\n  // diff fromenv/tryfromenv\n  string ProcessFromenvLocked(const string& flagval, FlagSettingMode set_mode,\n                              bool errors_are_fatal);\n\n",
                      "markdown": "`  // These are called by ProcessSingleOptionLocked and, similarly, return\n  // new values if everything went ok, or the empty-string if not.\n  string ProcessFlagfileLocked(const string& flagval, FlagSettingMode set_mode);\n  // diff fromenv/tryfromenv\n  string ProcessFromenvLocked(const string& flagval, FlagSettingMode set_mode,\n                              bool errors_are_fatal);\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 971,
                  "startColumn": 52,
                  "endLine": 971,
                  "endColumn": 57,
                  "snippet": {
                    "text": "  string ProcessOptionsFromStringLocked(const string& contentdata,\n                                        FlagSettingMode set_mode);\n\n  // These are the 'recursive' flags, defined at the top of this file.\n  // Whenever we see these flags on the commandline, we must take action.\n  // These are called by ProcessSingleOptionLocked and, similarly, return\n  // new values if everything went ok, or the empty-string if not.\n",
                    "rendered": {
                      "text": "  string ProcessOptionsFromStringLocked(const string& contentdata,\n                                        FlagSettingMode set_mode);\n\n  // These are the 'recursive' flags, defined at the top of this file.\n  // Whenever we see these flags on the commandline, we must take action.\n  // These are called by ProcessSingleOptionLocked and, similarly, return\n  // new values if everything went ok, or the empty-string if not.\n",
                      "markdown": "`  string ProcessOptionsFromStringLocked(const string& contentdata,\n                                        FlagSettingMode set_mode);\n\n  // These are the 'recursive' flags, defined at the top of this file.\n  // Whenever we see these flags on the commandline, we must take action.\n  // These are called by ProcessSingleOptionLocked and, similarly, return\n  // new values if everything went ok, or the empty-string if not.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 932,
                  "startColumn": 19,
                  "endLine": 932,
                  "endColumn": 25,
                  "snippet": {
                    "text": "  explicit CommandLineFlagParser(FlagRegistry* reg) : registry_(reg) {}\n  ~CommandLineFlagParser() {}\n\n  // Stage 1: Every time this is called, it reads all flags in argv.\n  // However, it ignores all flags that have been successfully set\n  // before.  Typically this is only called once, so this 'reparsing'\n  // behavior isn't important.  It can be useful when trying to\n",
                    "rendered": {
                      "text": "  explicit CommandLineFlagParser(FlagRegistry* reg) : registry_(reg) {}\n  ~CommandLineFlagParser() {}\n\n  // Stage 1: Every time this is called, it reads all flags in argv.\n  // However, it ignores all flags that have been successfully set\n  // before.  Typically this is only called once, so this 'reparsing'\n  // behavior isn't important.  It can be useful when trying to\n",
                      "markdown": "`  explicit CommandLineFlagParser(FlagRegistry* reg) : registry_(reg) {}\n  ~CommandLineFlagParser() {}\n\n  // Stage 1: Every time this is called, it reads all flags in argv.\n  // However, it ignores all flags that have been successfully set\n  // before.  Typically this is only called once, so this 'reparsing'\n  // behavior isn't important.  It can be useful when trying to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 783,
                  "startColumn": 18,
                  "endLine": 783,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  CommandLineFlag* flag = FindFlagLocked(flag_name);\n\n  if (flag == NULL) {\n    // If we can't find the flag-name, then we should return an error.\n    // The one exception is if 1) the flag-name is 'nox', 2) there\n    // exists a flag named 'x', and 3) 'x' is a boolean flag.\n    // In that case, we want to return flag 'x'.\n",
                    "rendered": {
                      "text": "  CommandLineFlag* flag = FindFlagLocked(flag_name);\n\n  if (flag == NULL) {\n    // If we can't find the flag-name, then we should return an error.\n    // The one exception is if 1) the flag-name is 'nox', 2) there\n    // exists a flag named 'x', and 3) 'x' is a boolean flag.\n    // In that case, we want to return flag 'x'.\n",
                      "markdown": "`  CommandLineFlag* flag = FindFlagLocked(flag_name);\n\n  if (flag == NULL) {\n    // If we can't find the flag-name, then we should return an error.\n    // The one exception is if 1) the flag-name is 'nox', 2) there\n    // exists a flag named 'x', and 3) 'x' is a boolean flag.\n    // In that case, we want to return flag 'x'.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 767,
                  "startColumn": 4,
                  "endLine": 767,
                  "endColumn": 10,
                  "snippet": {
                    "text": "                                                   string* key,\n                                                   const char** v,\n                                                   string* error_message) {\n  // Find the flag object for this option\n  const char* flag_name;\n  const char* value = strchr(arg, '=');\n  if (value == NULL) {\n",
                    "rendered": {
                      "text": "                                                   string* key,\n                                                   const char** v,\n                                                   string* error_message) {\n  // Find the flag object for this option\n  const char* flag_name;\n  const char* value = strchr(arg, '=');\n  if (value == NULL) {\n",
                      "markdown": "`                                                   string* key,\n                                                   const char** v,\n                                                   string* error_message) {\n  // Find the flag object for this option\n  const char* flag_name;\n  const char* value = strchr(arg, '=');\n  if (value == NULL) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 598,
                  "startColumn": 75,
                  "endLine": 599,
                  "snippet": {
                    "text": "}\n\nvoid CommandLineFlag::CopyFrom(const CommandLineFlag& src) {\n  // Note we only copy the non-const members; others are fixed at construct time\n  if (modified_ != src.modified_) modified_ = src.modified_;\n  if (!current_->Equal(*src.current_)) current_->CopyFrom(*src.current_);\n  if (!defvalue_->Equal(*src.defvalue_)) defvalue_->CopyFrom(*src.defvalue_);\n  if (validate_fn_proto_ != src.validate_fn_proto_)\n",
                    "rendered": {
                      "text": "}\n\nvoid CommandLineFlag::CopyFrom(const CommandLineFlag& src) {\n  // Note we only copy the non-const members; others are fixed at construct time\n  if (modified_ != src.modified_) modified_ = src.modified_;\n  if (!current_->Equal(*src.current_)) current_->CopyFrom(*src.current_);\n  if (!defvalue_->Equal(*src.defvalue_)) defvalue_->CopyFrom(*src.defvalue_);\n  if (validate_fn_proto_ != src.validate_fn_proto_)\n",
                      "markdown": "`}\n\nvoid CommandLineFlag::CopyFrom(const CommandLineFlag& src) {\n  // Note we only copy the non-const members; others are fixed at construct time\n  if (modified_ != src.modified_) modified_ = src.modified_;\n  if (!current_->Equal(*src.current_)) current_->CopyFrom(*src.current_);\n  if (!defvalue_->Equal(*src.defvalue_)) defvalue_->CopyFrom(*src.defvalue_);\n  if (validate_fn_proto_ != src.validate_fn_proto_)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/gflags.cc"
                },
                "region": {
                  "startLine": 493,
                  "startColumn": 27,
                  "endLine": 493,
                  "endColumn": 33,
                  "snippet": {
                    "text": "//    default value, and current value.  Mostly this serves as a\n//    struct, though it also knows how to register itself.\n//       All CommandLineFlags are owned by a (exactly one)\n//    FlagRegistry.  If you wish to modify fields in this class, you\n//    should acquire the FlagRegistry lock for the registry that owns\n//    this flag.\n// --------------------------------------------------------------------\n",
                    "rendered": {
                      "text": "//    default value, and current value.  Mostly this serves as a\n//    struct, though it also knows how to register itself.\n//       All CommandLineFlags are owned by a (exactly one)\n//    FlagRegistry.  If you wish to modify fields in this class, you\n//    should acquire the FlagRegistry lock for the registry that owns\n//    this flag.\n// --------------------------------------------------------------------\n",
                      "markdown": "`//    default value, and current value.  Mostly this serves as a\n//    struct, though it also knows how to register itself.\n//       All CommandLineFlags are owned by a (exactly one)\n//    FlagRegistry.  If you wish to modify fields in this class, you\n//    should acquire the FlagRegistry lock for the registry that owns\n//    this flag.\n// --------------------------------------------------------------------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/cmake/utils.cmake"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 16,
                  "endLine": 187,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  if (WIN32)\n    install (CODE\n      \"execute_process (\n         COMMAND reg add \\\"HKCU\\\\\\\\Software\\\\\\\\Kitware\\\\\\\\CMake\\\\\\\\Packages\\\\\\\\${PACKAGE_NAME}\\\" /v \\\"${REGISTRY_ENTRY}\\\" /d \\\"${CONFIG_DIR}\\\" /t REG_SZ /f\n         RESULT_VARIABLE RT\n         ERROR_VARIABLE  ERR\n         OUTPUT_QUIET\n",
                    "rendered": {
                      "text": "  if (WIN32)\n    install (CODE\n      \"execute_process (\n         COMMAND reg add \\\"HKCU\\\\\\\\Software\\\\\\\\Kitware\\\\\\\\CMake\\\\\\\\Packages\\\\\\\\${PACKAGE_NAME}\\\" /v \\\"${REGISTRY_ENTRY}\\\" /d \\\"${CONFIG_DIR}\\\" /t REG_SZ /f\n         RESULT_VARIABLE RT\n         ERROR_VARIABLE  ERR\n         OUTPUT_QUIET\n",
                      "markdown": "`  if (WIN32)\n    install (CODE\n      \"execute_process (\n         COMMAND reg add \\\"HKCU\\\\\\\\Software\\\\\\\\Kitware\\\\\\\\CMake\\\\\\\\Packages\\\\\\\\${PACKAGE_NAME}\\\" /v \\\"${REGISTRY_ENTRY}\\\" /d \\\"${CONFIG_DIR}\\\" /t REG_SZ /f\n         RESULT_VARIABLE RT\n         ERROR_VARIABLE  ERR\n         OUTPUT_QUIET\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/cmake/utils.cmake"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 43,
                  "endLine": 176,
                  "endColumn": 49,
                  "snippet": {
                    "text": "#\n# This function adds an entry to the CMake registry for packages with the\n# path of the directory where the package configuration file of the installed\n# package is located in order to help CMake find the package in a custom\n# installation prefix. This differs from CMake's export(PACKAGE) command\n# which registers the build directory instead.\nfunction (register_gflags_package CONFIG_DIR)\n",
                    "rendered": {
                      "text": "#\n# This function adds an entry to the CMake registry for packages with the\n# path of the directory where the package configuration file of the installed\n# package is located in order to help CMake find the package in a custom\n# installation prefix. This differs from CMake's export(PACKAGE) command\n# which registers the build directory instead.\nfunction (register_gflags_package CONFIG_DIR)\n",
                      "markdown": "`#\n# This function adds an entry to the CMake registry for packages with the\n# path of the directory where the package configuration file of the installed\n# package is located in order to help CMake find the package in a custom\n# installation prefix. This differs from CMake's export(PACKAGE) command\n# which registers the build directory instead.\nfunction (register_gflags_package CONFIG_DIR)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/cmake/utils.cmake"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 56,
                  "endLine": 156,
                  "snippet": {
                    "text": "#\n# Using PASS_REGULAR_EXPRESSION and FAIL_REGULAR_EXPRESSION would\n# do as well, but CMake/CTest does not allow us to specify an\n# expected exit status. Moreover, the execute_test.cmake script\n# sets environment variables needed by the --fromenv/--tryfromenv tests.\nmacro (add_gflags_test name expected_rc expected_output unexpected_output cmd)\n  set (args \"--test_tmpdir=${PROJECT_BINARY_DIR}/Testing/Temporary\"\n            \"--srcdir=${PROJECT_SOURCE_DIR}/test\")\n",
                    "rendered": {
                      "text": "#\n# Using PASS_REGULAR_EXPRESSION and FAIL_REGULAR_EXPRESSION would\n# do as well, but CMake/CTest does not allow us to specify an\n# expected exit status. Moreover, the execute_test.cmake script\n# sets environment variables needed by the --fromenv/--tryfromenv tests.\nmacro (add_gflags_test name expected_rc expected_output unexpected_output cmd)\n  set (args \"--test_tmpdir=${PROJECT_BINARY_DIR}/Testing/Temporary\"\n            \"--srcdir=${PROJECT_SOURCE_DIR}/test\")\n",
                      "markdown": "`#\n# Using PASS_REGULAR_EXPRESSION and FAIL_REGULAR_EXPRESSION would\n# do as well, but CMake/CTest does not allow us to specify an\n# expected exit status. Moreover, the execute_test.cmake script\n# sets environment variables needed by the --fromenv/--tryfromenv tests.\nmacro (add_gflags_test name expected_rc expected_output unexpected_output cmd)\n  set (args \"--test_tmpdir=${PROJECT_BINARY_DIR}/Testing/Temporary\"\n            \"--srcdir=${PROJECT_SOURCE_DIR}/test\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/README.md"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 61,
                  "endLine": 317,
                  "snippet": {
                    "text": "non-backwards-compatible change, send mail to\n`google-gflags@googlegroups.com`!\n\nVersion 1.0 also has some neat new features, like support for bash\ncommandline-completion of help flags.  See the [ChangeLog](ChangeLog.txt)\nfor more details.\n\nIf I don't hear any bad news for a few weeks, I'll release 1.0-final.\n",
                    "rendered": {
                      "text": "non-backwards-compatible change, send mail to\n`google-gflags@googlegroups.com`!\n\nVersion 1.0 also has some neat new features, like support for bash\ncommandline-completion of help flags.  See the [ChangeLog](ChangeLog.txt)\nfor more details.\n\nIf I don't hear any bad news for a few weeks, I'll release 1.0-final.\n",
                      "markdown": "`non-backwards-compatible change, send mail to\n`google-gflags@googlegroups.com`!\n\nVersion 1.0 also has some neat new features, like support for bash\ncommandline-completion of help flags.  See the [ChangeLog](ChangeLog.txt)\nfor more details.\n\nIf I don't hear any bad news for a few weeks, I'll release 1.0-final.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/README.md"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 22,
                  "endLine": 249,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\nI've just released gflags 1.3.  gflags now compiles under MSVC, and\nall tests pass.  I **really** never thought non-unix-y Windows folks\nwould want gflags, but at least some of them do.\n\nThe major news, though, is that I've separated out the python package\ninto its own library, [python-gflags](http://code.google.com/p/python-gflags).\n",
                    "rendered": {
                      "text": "\nI've just released gflags 1.3.  gflags now compiles under MSVC, and\nall tests pass.  I **really** never thought non-unix-y Windows folks\nwould want gflags, but at least some of them do.\n\nThe major news, though, is that I've separated out the python package\ninto its own library, [python-gflags](http://code.google.com/p/python-gflags).\n",
                      "markdown": "`\nI've just released gflags 1.3.  gflags now compiles under MSVC, and\nall tests pass.  I **really** never thought non-unix-y Windows folks\nwould want gflags, but at least some of them do.\n\nThe major news, though, is that I've separated out the python package\ninto its own library, [python-gflags](http://code.google.com/p/python-gflags).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/README.md"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 70,
                  "endLine": 148,
                  "endColumn": 74,
                  "snippet": {
                    "text": "Subversion repository synchronized. Initially, I was going to simply switch the\nGoogle Code project to Git, but in this case the SVN repository would be\nfrozen and force everyone who would like the latest development changes to\nuse Git as well. Therefore I decided to host the public Git repository at GitHub\ninstead.\n\nPlease continue to report any issues with gflags on Google Code. The GitHub project will\n",
                    "rendered": {
                      "text": "Subversion repository synchronized. Initially, I was going to simply switch the\nGoogle Code project to Git, but in this case the SVN repository would be\nfrozen and force everyone who would like the latest development changes to\nuse Git as well. Therefore I decided to host the public Git repository at GitHub\ninstead.\n\nPlease continue to report any issues with gflags on Google Code. The GitHub project will\n",
                      "markdown": "`Subversion repository synchronized. Initially, I was going to simply switch the\nGoogle Code project to Git, but in this case the SVN repository would be\nfrozen and force everyone who would like the latest development changes to\nuse Git as well. Therefore I decided to host the public Git repository at GitHub\ninstead.\n\nPlease continue to report any issues with gflags on Google Code. The GitHub project will\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/README.md"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 42,
                  "endLine": 144,
                  "endColumn": 46,
                  "snippet": {
                    "text": "after these are complete and implement the desired behavior.\n\nThe SVN repository remains accessible at Google Code and I will keep the\nmaster branch of the Git repository hosted at GitHub and the trunk of the\nSubversion repository synchronized. Initially, I was going to simply switch the\nGoogle Code project to Git, but in this case the SVN repository would be\nfrozen and force everyone who would like the latest development changes to\n",
                    "rendered": {
                      "text": "after these are complete and implement the desired behavior.\n\nThe SVN repository remains accessible at Google Code and I will keep the\nmaster branch of the Git repository hosted at GitHub and the trunk of the\nSubversion repository synchronized. Initially, I was going to simply switch the\nGoogle Code project to Git, but in this case the SVN repository would be\nfrozen and force everyone who would like the latest development changes to\n",
                      "markdown": "`after these are complete and implement the desired behavior.\n\nThe SVN repository remains accessible at Google Code and I will keep the\nmaster branch of the Git repository hosted at GitHub and the trunk of the\nSubversion repository synchronized. Initially, I was going to simply switch the\nGoogle Code project to Git, but in this case the SVN repository would be\nfrozen and force everyone who would like the latest development changes to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/README.md"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 37,
                  "endLine": 143,
                  "endColumn": 41,
                  "snippet": {
                    "text": "radical changes which should only be merged back into the master branch\nafter these are complete and implement the desired behavior.\n\nThe SVN repository remains accessible at Google Code and I will keep the\nmaster branch of the Git repository hosted at GitHub and the trunk of the\nSubversion repository synchronized. Initially, I was going to simply switch the\nGoogle Code project to Git, but in this case the SVN repository would be\n",
                    "rendered": {
                      "text": "radical changes which should only be merged back into the master branch\nafter these are complete and implement the desired behavior.\n\nThe SVN repository remains accessible at Google Code and I will keep the\nmaster branch of the Git repository hosted at GitHub and the trunk of the\nSubversion repository synchronized. Initially, I was going to simply switch the\nGoogle Code project to Git, but in this case the SVN repository would be\n",
                      "markdown": "`radical changes which should only be merged back into the master branch\nafter these are complete and implement the desired behavior.\n\nThe SVN repository remains accessible at Google Code and I will keep the\nmaster branch of the Git repository hosted at GitHub and the trunk of the\nSubversion repository synchronized. Initially, I was going to simply switch the\nGoogle Code project to Git, but in this case the SVN repository would be\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/README.md"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 31,
                  "endLine": 103,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\nThe SVN repository on Google Code is now frozen and replaced by a Git\nrepository such that it can be used as Git submodule by projects. The main\nhosting of this project remains at Google Code. Thanks to the distributed\ncharacter of Git, I can push (and pull) changes from both GitHub and Google Code\nin order to keep the two public repositories in sync.\nWhen fixing an issue for a pull request through either of these hosting\n",
                    "rendered": {
                      "text": "\nThe SVN repository on Google Code is now frozen and replaced by a Git\nrepository such that it can be used as Git submodule by projects. The main\nhosting of this project remains at Google Code. Thanks to the distributed\ncharacter of Git, I can push (and pull) changes from both GitHub and Google Code\nin order to keep the two public repositories in sync.\nWhen fixing an issue for a pull request through either of these hosting\n",
                      "markdown": "`\nThe SVN repository on Google Code is now frozen and replaced by a Git\nrepository such that it can be used as Git submodule by projects. The main\nhosting of this project remains at Google Code. Thanks to the distributed\ncharacter of Git, I can push (and pull) changes from both GitHub and Google Code\nin order to keep the two public repositories in sync.\nWhen fixing an issue for a pull request through either of these hosting\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/README.md"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 59,
                  "endLine": 4,
                  "endColumn": 63,
                  "snippet": {
                    "text": "[![Build Status](https://travis-ci.org/gflags/gflags.svg?branch=master)](https://travis-ci.org/gflags/gflags)\n[![Build status](https://ci.appveyor.com/api/projects/status/4ctod566ysraus74/branch/master?svg=true)](https://ci.appveyor.com/project/schuhschuh/gflags/branch/master)\n\nThe documentation of the gflags library is available online at https://gflags.github.io/gflags/.\n\n\n11 November 2018\n",
                    "rendered": {
                      "text": "[![Build Status](https://travis-ci.org/gflags/gflags.svg?branch=master)](https://travis-ci.org/gflags/gflags)\n[![Build status](https://ci.appveyor.com/api/projects/status/4ctod566ysraus74/branch/master?svg=true)](https://ci.appveyor.com/project/schuhschuh/gflags/branch/master)\n\nThe documentation of the gflags library is available online at https://gflags.github.io/gflags/.\n\n\n11 November 2018\n",
                      "markdown": "`[![Build Status](https://travis-ci.org/gflags/gflags.svg?branch=master)](https://travis-ci.org/gflags/gflags)\n[![Build status](https://ci.appveyor.com/api/projects/status/4ctod566ysraus74/branch/master?svg=true)](https://ci.appveyor.com/project/schuhschuh/gflags/branch/master)\n\nThe documentation of the gflags library is available online at https://gflags.github.io/gflags/.\n\n\n11 November 2018\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/README.md"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 61,
                  "endLine": 317,
                  "snippet": {
                    "text": "non-backwards-compatible change, send mail to\n`google-gflags@googlegroups.com`!\n\nVersion 1.0 also has some neat new features, like support for bash\ncommandline-completion of help flags.  See the [ChangeLog](ChangeLog.txt)\nfor more details.\n\nIf I don't hear any bad news for a few weeks, I'll release 1.0-final.\n",
                    "rendered": {
                      "text": "non-backwards-compatible change, send mail to\n`google-gflags@googlegroups.com`!\n\nVersion 1.0 also has some neat new features, like support for bash\ncommandline-completion of help flags.  See the [ChangeLog](ChangeLog.txt)\nfor more details.\n\nIf I don't hear any bad news for a few weeks, I'll release 1.0-final.\n",
                      "markdown": "`non-backwards-compatible change, send mail to\n`google-gflags@googlegroups.com`!\n\nVersion 1.0 also has some neat new features, like support for bash\ncommandline-completion of help flags.  See the [ChangeLog](ChangeLog.txt)\nfor more details.\n\nIf I don't hear any bad news for a few weeks, I'll release 1.0-final.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/README.md"
                },
                "region": {
                  "startLine": 313,
                  "startColumn": 37,
                  "endLine": 313,
                  "endColumn": 43,
                  "snippet": {
                    "text": "with the appropriate flag to the configure script (`./configure\n--help` to see the flags).  If you have feedback as to whether the\ndefault namespace should change to gflags, which would be a\nnon-backwards-compatible change, send mail to\n`google-gflags@googlegroups.com`!\n\nVersion 1.0 also has some neat new features, like support for bash\n",
                    "rendered": {
                      "text": "with the appropriate flag to the configure script (`./configure\n--help` to see the flags).  If you have feedback as to whether the\ndefault namespace should change to gflags, which would be a\nnon-backwards-compatible change, send mail to\n`google-gflags@googlegroups.com`!\n\nVersion 1.0 also has some neat new features, like support for bash\n",
                      "markdown": "`with the appropriate flag to the configure script (`./configure\n--help` to see the flags).  If you have feedback as to whether the\ndefault namespace should change to gflags, which would be a\nnon-backwards-compatible change, send mail to\n`google-gflags@googlegroups.com`!\n\nVersion 1.0 also has some neat new features, like support for bash\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/README.md"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 42,
                  "endLine": 310,
                  "endColumn": 50,
                  "snippet": {
                    "text": "```\n\nI've kept the default namespace to google.  You can still change with\nwith the appropriate flag to the configure script (`./configure\n--help` to see the flags).  If you have feedback as to whether the\ndefault namespace should change to gflags, which would be a\nnon-backwards-compatible change, send mail to\n",
                    "rendered": {
                      "text": "```\n\nI've kept the default namespace to google.  You can still change with\nwith the appropriate flag to the configure script (`./configure\n--help` to see the flags).  If you have feedback as to whether the\ndefault namespace should change to gflags, which would be a\nnon-backwards-compatible change, send mail to\n",
                      "markdown": "````\n\nI've kept the default namespace to google.  You can still change with\nwith the appropriate flag to the configure script (`./configure\n--help` to see the flags).  If you have feedback as to whether the\ndefault namespace should change to gflags, which would be a\nnon-backwards-compatible change, send mail to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/README.md"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 40,
                  "endLine": 274,
                  "endColumn": 45,
                  "snippet": {
                    "text": "I've just released gflags 1.1.  It has only minor changes fdrom gflags\n1.0 (see the [ChangeLog](ChangeLog.txt) for details).\nThe major change is that I moved to a new system for creating .deb and .rpm files.\nThis allows me to create x86\\_64 deb and rpm files.\n\nIn the process of moving to this new system, I noticed an\ninconsistency: the tar.gz and .rpm files created libraries named\n",
                    "rendered": {
                      "text": "I've just released gflags 1.1.  It has only minor changes fdrom gflags\n1.0 (see the [ChangeLog](ChangeLog.txt) for details).\nThe major change is that I moved to a new system for creating .deb and .rpm files.\nThis allows me to create x86\\_64 deb and rpm files.\n\nIn the process of moving to this new system, I noticed an\ninconsistency: the tar.gz and .rpm files created libraries named\n",
                      "markdown": "`I've just released gflags 1.1.  It has only minor changes fdrom gflags\n1.0 (see the [ChangeLog](ChangeLog.txt) for details).\nThe major change is that I moved to a new system for creating .deb and .rpm files.\nThis allows me to create x86\\_64 deb and rpm files.\n\nIn the process of moving to this new system, I noticed an\ninconsistency: the tar.gz and .rpm files created libraries named\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/README.md"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 22,
                  "endLine": 179,
                  "endColumn": 28,
                  "snippet": {
                    "text": "`google`, though in a future version it should be renamed to `gflags`.\nI've also kept the `/usr/local/include/google/` subdirectory as\nsynonym of `/usr/local/include/gflags/`, though the former name has\nbeen obsolete for some time now.\n\n\n18 January 2011\n",
                    "rendered": {
                      "text": "`google`, though in a future version it should be renamed to `gflags`.\nI've also kept the `/usr/local/include/google/` subdirectory as\nsynonym of `/usr/local/include/gflags/`, though the former name has\nbeen obsolete for some time now.\n\n\n18 January 2011\n",
                      "markdown": "``google`, though in a future version it should be renamed to `gflags`.\nI've also kept the `/usr/local/include/google/` subdirectory as\nsynonym of `/usr/local/include/gflags/`, though the former name has\nbeen obsolete for some time now.\n\n\n18 January 2011\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/README.md"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 24,
                  "endLine": 152,
                  "endColumn": 29,
                  "snippet": {
                    "text": "instead.\n\nPlease continue to report any issues with gflags on Google Code. The GitHub project will\nonly be used to host the Git repository.\n\nOne major change of the project structure I have in mind for the next weeks\nis the migration from autotools to [CMake](http://www.cmake.org/).\n",
                    "rendered": {
                      "text": "instead.\n\nPlease continue to report any issues with gflags on Google Code. The GitHub project will\nonly be used to host the Git repository.\n\nOne major change of the project structure I have in mind for the next weeks\nis the migration from autotools to [CMake](http://www.cmake.org/).\n",
                      "markdown": "`instead.\n\nPlease continue to report any issues with gflags on Google Code. The GitHub project will\nonly be used to host the Git repository.\n\nOne major change of the project structure I have in mind for the next weeks\nis the migration from autotools to [CMake](http://www.cmake.org/).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/README.md"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 55,
                  "endLine": 148,
                  "endColumn": 60,
                  "snippet": {
                    "text": "Subversion repository synchronized. Initially, I was going to simply switch the\nGoogle Code project to Git, but in this case the SVN repository would be\nfrozen and force everyone who would like the latest development changes to\nuse Git as well. Therefore I decided to host the public Git repository at GitHub\ninstead.\n\nPlease continue to report any issues with gflags on Google Code. The GitHub project will\n",
                    "rendered": {
                      "text": "Subversion repository synchronized. Initially, I was going to simply switch the\nGoogle Code project to Git, but in this case the SVN repository would be\nfrozen and force everyone who would like the latest development changes to\nuse Git as well. Therefore I decided to host the public Git repository at GitHub\ninstead.\n\nPlease continue to report any issues with gflags on Google Code. The GitHub project will\n",
                      "markdown": "`Subversion repository synchronized. Initially, I was going to simply switch the\nGoogle Code project to Git, but in this case the SVN repository would be\nfrozen and force everyone who would like the latest development changes to\nuse Git as well. Therefore I decided to host the public Git repository at GitHub\ninstead.\n\nPlease continue to report any issues with gflags on Google Code. The GitHub project will\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/README.md"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 3,
                  "endLine": 148,
                  "endColumn": 8,
                  "snippet": {
                    "text": "Subversion repository synchronized. Initially, I was going to simply switch the\nGoogle Code project to Git, but in this case the SVN repository would be\nfrozen and force everyone who would like the latest development changes to\nuse Git as well. Therefore I decided to host the public Git repository at GitHub\ninstead.\n\nPlease continue to report any issues with gflags on Google Code. The GitHub project will\n",
                    "rendered": {
                      "text": "Subversion repository synchronized. Initially, I was going to simply switch the\nGoogle Code project to Git, but in this case the SVN repository would be\nfrozen and force everyone who would like the latest development changes to\nuse Git as well. Therefore I decided to host the public Git repository at GitHub\ninstead.\n\nPlease continue to report any issues with gflags on Google Code. The GitHub project will\n",
                      "markdown": "`Subversion repository synchronized. Initially, I was going to simply switch the\nGoogle Code project to Git, but in this case the SVN repository would be\nfrozen and force everyone who would like the latest development changes to\nuse Git as well. Therefore I decided to host the public Git repository at GitHub\ninstead.\n\nPlease continue to report any issues with gflags on Google Code. The GitHub project will\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/README.md"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 20,
                  "endLine": 144,
                  "endColumn": 25,
                  "snippet": {
                    "text": "after these are complete and implement the desired behavior.\n\nThe SVN repository remains accessible at Google Code and I will keep the\nmaster branch of the Git repository hosted at GitHub and the trunk of the\nSubversion repository synchronized. Initially, I was going to simply switch the\nGoogle Code project to Git, but in this case the SVN repository would be\nfrozen and force everyone who would like the latest development changes to\n",
                    "rendered": {
                      "text": "after these are complete and implement the desired behavior.\n\nThe SVN repository remains accessible at Google Code and I will keep the\nmaster branch of the Git repository hosted at GitHub and the trunk of the\nSubversion repository synchronized. Initially, I was going to simply switch the\nGoogle Code project to Git, but in this case the SVN repository would be\nfrozen and force everyone who would like the latest development changes to\n",
                      "markdown": "`after these are complete and implement the desired behavior.\n\nThe SVN repository remains accessible at Google Code and I will keep the\nmaster branch of the Git repository hosted at GitHub and the trunk of the\nSubversion repository synchronized. Initially, I was going to simply switch the\nGoogle Code project to Git, but in this case the SVN repository would be\nfrozen and force everyone who would like the latest development changes to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/README.md"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 38,
                  "endLine": 102,
                  "endColumn": 43,
                  "snippet": {
                    "text": "Cygwin, MinGW), and Mac OS X (Xcode 5.1).\n\nThe SVN repository on Google Code is now frozen and replaced by a Git\nrepository such that it can be used as Git submodule by projects. The main\nhosting of this project remains at Google Code. Thanks to the distributed\ncharacter of Git, I can push (and pull) changes from both GitHub and Google Code\nin order to keep the two public repositories in sync.\n",
                    "rendered": {
                      "text": "Cygwin, MinGW), and Mac OS X (Xcode 5.1).\n\nThe SVN repository on Google Code is now frozen and replaced by a Git\nrepository such that it can be used as Git submodule by projects. The main\nhosting of this project remains at Google Code. Thanks to the distributed\ncharacter of Git, I can push (and pull) changes from both GitHub and Google Code\nin order to keep the two public repositories in sync.\n",
                      "markdown": "`Cygwin, MinGW), and Mac OS X (Xcode 5.1).\n\nThe SVN repository on Google Code is now frozen and replaced by a Git\nrepository such that it can be used as Git submodule by projects. The main\nhosting of this project remains at Google Code. Thanks to the distributed\ncharacter of Git, I can push (and pull) changes from both GitHub and Google Code\nin order to keep the two public repositories in sync.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/README.md"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 65,
                  "endLine": 102,
                  "snippet": {
                    "text": "the unit tests on  Ubuntu 12.04, Windows 7 (Visual Studio 2008 and 2010,\nCygwin, MinGW), and Mac OS X (Xcode 5.1).\n\nThe SVN repository on Google Code is now frozen and replaced by a Git\nrepository such that it can be used as Git submodule by projects. The main\nhosting of this project remains at Google Code. Thanks to the distributed\ncharacter of Git, I can push (and pull) changes from both GitHub and Google Code\nin order to keep the two public repositories in sync.\n",
                    "rendered": {
                      "text": "the unit tests on  Ubuntu 12.04, Windows 7 (Visual Studio 2008 and 2010,\nCygwin, MinGW), and Mac OS X (Xcode 5.1).\n\nThe SVN repository on Google Code is now frozen and replaced by a Git\nrepository such that it can be used as Git submodule by projects. The main\nhosting of this project remains at Google Code. Thanks to the distributed\ncharacter of Git, I can push (and pull) changes from both GitHub and Google Code\nin order to keep the two public repositories in sync.\n",
                      "markdown": "`the unit tests on  Ubuntu 12.04, Windows 7 (Visual Studio 2008 and 2010,\nCygwin, MinGW), and Mac OS X (Xcode 5.1).\n\nThe SVN repository on Google Code is now frozen and replaced by a Git\nrepository such that it can be used as Git submodule by projects. The main\nhosting of this project remains at Google Code. Thanks to the distributed\ncharacter of Git, I can push (and pull) changes from both GitHub and Google Code\nin order to keep the two public repositories in sync.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_unittest.cc"
                },
                "region": {
                  "startLine": 1462,
                  "startColumn": 27,
                  "endLine": 1462,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#ifdef GTEST_HAS_DEATH_TEST\nTEST(FlagsValidatorDeathTest, InvalidFlagNeverSet) {\n  // If a flag keeps its default value, and that default value is\n  // invalid, we should die at argv-parse time.\n  const char* argv[] = {\n    \"my_test\",\n    NULL,\n",
                    "rendered": {
                      "text": "#ifdef GTEST_HAS_DEATH_TEST\nTEST(FlagsValidatorDeathTest, InvalidFlagNeverSet) {\n  // If a flag keeps its default value, and that default value is\n  // invalid, we should die at argv-parse time.\n  const char* argv[] = {\n    \"my_test\",\n    NULL,\n",
                      "markdown": "`#ifdef GTEST_HAS_DEATH_TEST\nTEST(FlagsValidatorDeathTest, InvalidFlagNeverSet) {\n  // If a flag keeps its default value, and that default value is\n  // invalid, we should die at argv-parse time.\n  const char* argv[] = {\n    \"my_test\",\n    NULL,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_unittest.cc"
                },
                "region": {
                  "startLine": 485,
                  "startColumn": 40,
                  "endLine": 485,
                  "endColumn": 48,
                  "snippet": {
                    "text": "// Tests that a failed flag-from-string read keeps flags at default values\nTEST(FlagFileTest, FailReadFlagsFromString) {\n  FLAGS_test_int32 = 119;\n  string flags(\"# let's make sure it can update values\\n\"\n               \"-test_string=non_initial\\n\"\n               \"-test_bool=false\\n\"\n               \"-test_int32=123\\n\"\n",
                    "rendered": {
                      "text": "// Tests that a failed flag-from-string read keeps flags at default values\nTEST(FlagFileTest, FailReadFlagsFromString) {\n  FLAGS_test_int32 = 119;\n  string flags(\"# let's make sure it can update values\\n\"\n               \"-test_string=non_initial\\n\"\n               \"-test_bool=false\\n\"\n               \"-test_int32=123\\n\"\n",
                      "markdown": "`// Tests that a failed flag-from-string read keeps flags at default values\nTEST(FlagFileTest, FailReadFlagsFromString) {\n  FLAGS_test_int32 = 119;\n  string flags(\"# let's make sure it can update values\\n\"\n               \"-test_string=non_initial\\n\"\n               \"-test_bool=false\\n\"\n               \"-test_int32=123\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_unittest.cc"
                },
                "region": {
                  "startLine": 482,
                  "startColumn": 56,
                  "endLine": 482,
                  "endColumn": 60,
                  "snippet": {
                    "text": "}\n#endif  // defined(HAVE_FNMATCH_H) || defined(HAVE_SHLWAPI_H)\n\n// Tests that a failed flag-from-string read keeps flags at default values\nTEST(FlagFileTest, FailReadFlagsFromString) {\n  FLAGS_test_int32 = 119;\n  string flags(\"# let's make sure it can update values\\n\"\n",
                    "rendered": {
                      "text": "}\n#endif  // defined(HAVE_FNMATCH_H) || defined(HAVE_SHLWAPI_H)\n\n// Tests that a failed flag-from-string read keeps flags at default values\nTEST(FlagFileTest, FailReadFlagsFromString) {\n  FLAGS_test_int32 = 119;\n  string flags(\"# let's make sure it can update values\\n\"\n",
                      "markdown": "`}\n#endif  // defined(HAVE_FNMATCH_H) || defined(HAVE_SHLWAPI_H)\n\n// Tests that a failed flag-from-string read keeps flags at default values\nTEST(FlagFileTest, FailReadFlagsFromString) {\n  FLAGS_test_int32 = 119;\n  string flags(\"# let's make sure it can update values\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_unittest.cc"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 31,
                  "endLine": 350,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n  TestFlagString(\n      // Flag string\n      \"# let's make sure it can update values\\n\"\n      \"-test_string=initial\\n\"\n      \"-test_bool=false\\n\"\n      \"-test_int32=123\\n\"\n",
                    "rendered": {
                      "text": "\n  TestFlagString(\n      // Flag string\n      \"# let's make sure it can update values\\n\"\n      \"-test_string=initial\\n\"\n      \"-test_bool=false\\n\"\n      \"-test_int32=123\\n\"\n",
                      "markdown": "`\n  TestFlagString(\n      // Flag string\n      \"# let's make sure it can update values\\n\"\n      \"-test_string=initial\\n\"\n      \"-test_bool=false\\n\"\n      \"-test_int32=123\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_unittest.cc"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 2,
                  "endLine": 212,
                  "endColumn": 6,
                  "snippet": {
                    "text": "#undef MAKEFLAG\n\n// This is a pseudo-flag -- we want to register a flag with a filename\n// at the top level, but there is no way to do this except by faking\n// the filename.\nnamespace fLI {\n  static const int32 FLAGS_nonotldflag1 = 12;\n",
                    "rendered": {
                      "text": "#undef MAKEFLAG\n\n// This is a pseudo-flag -- we want to register a flag with a filename\n// at the top level, but there is no way to do this except by faking\n// the filename.\nnamespace fLI {\n  static const int32 FLAGS_nonotldflag1 = 12;\n",
                      "markdown": "`#undef MAKEFLAG\n\n// This is a pseudo-flag -- we want to register a flag with a filename\n// at the top level, but there is no way to do this except by faking\n// the filename.\nnamespace fLI {\n  static const int32 FLAGS_nonotldflag1 = 12;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_unittest.cc"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 17,
                  "endLine": 98,
                  "endColumn": 21,
                  "snippet": {
                    "text": "// This is used to test setting tryfromenv manually\nDEFINE_string(test_tryfromenv, \"initial\", \"\");\n\n// Don't try this at home!\nstatic int changeable_var = 12;\nDEFINE_int32(changeable_var, ++changeable_var, \"\");\n\n",
                    "rendered": {
                      "text": "// This is used to test setting tryfromenv manually\nDEFINE_string(test_tryfromenv, \"initial\", \"\");\n\n// Don't try this at home!\nstatic int changeable_var = 12;\nDEFINE_int32(changeable_var, ++changeable_var, \"\");\n\n",
                      "markdown": "`// This is used to test setting tryfromenv manually\nDEFINE_string(test_tryfromenv, \"initial\", \"\");\n\n// Don't try this at home!\nstatic int changeable_var = 12;\nDEFINE_int32(changeable_var, ++changeable_var, \"\");\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_unittest.cc"
                },
                "region": {
                  "startLine": 766,
                  "startColumn": 65,
                  "endLine": 766,
                  "endColumn": 70,
                  "snippet": {
                    "text": "  setenv(\"DOUBLE_BAD1\", \"0.0.0\", 1);\n  setenv(\"DOUBLE_BAD2\", \"\", 1);\n  EXPECT_DEATH(DoubleFromEnv(\"DOUBLE_BAD1\", 40.0), \"error parsing env variable\");\n  EXPECT_DEATH(DoubleFromEnv(\"DOUBLE_BAD2\", 40.0), \"error parsing env variable\");\n}\n#endif\n\n",
                    "rendered": {
                      "text": "  setenv(\"DOUBLE_BAD1\", \"0.0.0\", 1);\n  setenv(\"DOUBLE_BAD2\", \"\", 1);\n  EXPECT_DEATH(DoubleFromEnv(\"DOUBLE_BAD1\", 40.0), \"error parsing env variable\");\n  EXPECT_DEATH(DoubleFromEnv(\"DOUBLE_BAD2\", 40.0), \"error parsing env variable\");\n}\n#endif\n\n",
                      "markdown": "`  setenv(\"DOUBLE_BAD1\", \"0.0.0\", 1);\n  setenv(\"DOUBLE_BAD2\", \"\", 1);\n  EXPECT_DEATH(DoubleFromEnv(\"DOUBLE_BAD1\", 40.0), \"error parsing env variable\");\n  EXPECT_DEATH(DoubleFromEnv(\"DOUBLE_BAD2\", 40.0), \"error parsing env variable\");\n}\n#endif\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_unittest.cc"
                },
                "region": {
                  "startLine": 765,
                  "startColumn": 65,
                  "endLine": 765,
                  "endColumn": 70,
                  "snippet": {
                    "text": "\n  setenv(\"DOUBLE_BAD1\", \"0.0.0\", 1);\n  setenv(\"DOUBLE_BAD2\", \"\", 1);\n  EXPECT_DEATH(DoubleFromEnv(\"DOUBLE_BAD1\", 40.0), \"error parsing env variable\");\n  EXPECT_DEATH(DoubleFromEnv(\"DOUBLE_BAD2\", 40.0), \"error parsing env variable\");\n}\n#endif\n",
                    "rendered": {
                      "text": "\n  setenv(\"DOUBLE_BAD1\", \"0.0.0\", 1);\n  setenv(\"DOUBLE_BAD2\", \"\", 1);\n  EXPECT_DEATH(DoubleFromEnv(\"DOUBLE_BAD1\", 40.0), \"error parsing env variable\");\n  EXPECT_DEATH(DoubleFromEnv(\"DOUBLE_BAD2\", 40.0), \"error parsing env variable\");\n}\n#endif\n",
                      "markdown": "`\n  setenv(\"DOUBLE_BAD1\", \"0.0.0\", 1);\n  setenv(\"DOUBLE_BAD2\", \"\", 1);\n  EXPECT_DEATH(DoubleFromEnv(\"DOUBLE_BAD1\", 40.0), \"error parsing env variable\");\n  EXPECT_DEATH(DoubleFromEnv(\"DOUBLE_BAD2\", 40.0), \"error parsing env variable\");\n}\n#endif\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_unittest.cc"
                },
                "region": {
                  "startLine": 760,
                  "startColumn": 63,
                  "endLine": 760,
                  "endColumn": 68,
                  "snippet": {
                    "text": "  EXPECT_DEATH(Uint64FromEnv(\"BIGINT_BAD1\", 30), \"error parsing env variable\");\n  // TODO(csilvers): uncomment this when we disallow negative numbers for uint64\n#if 0\n  EXPECT_DEATH(Uint64FromEnv(\"BIGINT_BAD2\", 30), \"error parsing env variable\");\n#endif\n\n  setenv(\"DOUBLE_BAD1\", \"0.0.0\", 1);\n",
                    "rendered": {
                      "text": "  EXPECT_DEATH(Uint64FromEnv(\"BIGINT_BAD1\", 30), \"error parsing env variable\");\n  // TODO(csilvers): uncomment this when we disallow negative numbers for uint64\n#if 0\n  EXPECT_DEATH(Uint64FromEnv(\"BIGINT_BAD2\", 30), \"error parsing env variable\");\n#endif\n\n  setenv(\"DOUBLE_BAD1\", \"0.0.0\", 1);\n",
                      "markdown": "`  EXPECT_DEATH(Uint64FromEnv(\"BIGINT_BAD1\", 30), \"error parsing env variable\");\n  // TODO(csilvers): uncomment this when we disallow negative numbers for uint64\n#if 0\n  EXPECT_DEATH(Uint64FromEnv(\"BIGINT_BAD2\", 30), \"error parsing env variable\");\n#endif\n\n  setenv(\"DOUBLE_BAD1\", \"0.0.0\", 1);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_unittest.cc"
                },
                "region": {
                  "startLine": 757,
                  "startColumn": 63,
                  "endLine": 757,
                  "endColumn": 68,
                  "snippet": {
                    "text": "  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD1\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD3\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD4\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"BIGINT_BAD1\", 30), \"error parsing env variable\");\n  // TODO(csilvers): uncomment this when we disallow negative numbers for uint64\n#if 0\n  EXPECT_DEATH(Uint64FromEnv(\"BIGINT_BAD2\", 30), \"error parsing env variable\");\n",
                    "rendered": {
                      "text": "  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD1\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD3\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD4\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"BIGINT_BAD1\", 30), \"error parsing env variable\");\n  // TODO(csilvers): uncomment this when we disallow negative numbers for uint64\n#if 0\n  EXPECT_DEATH(Uint64FromEnv(\"BIGINT_BAD2\", 30), \"error parsing env variable\");\n",
                      "markdown": "`  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD1\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD3\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD4\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"BIGINT_BAD1\", 30), \"error parsing env variable\");\n  // TODO(csilvers): uncomment this when we disallow negative numbers for uint64\n#if 0\n  EXPECT_DEATH(Uint64FromEnv(\"BIGINT_BAD2\", 30), \"error parsing env variable\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_unittest.cc"
                },
                "region": {
                  "startLine": 756,
                  "startColumn": 60,
                  "endLine": 756,
                  "endColumn": 65,
                  "snippet": {
                    "text": "  setenv(\"BIGINT_BAD2\", \"-1\", 1);\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD1\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD3\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD4\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"BIGINT_BAD1\", 30), \"error parsing env variable\");\n  // TODO(csilvers): uncomment this when we disallow negative numbers for uint64\n#if 0\n",
                    "rendered": {
                      "text": "  setenv(\"BIGINT_BAD2\", \"-1\", 1);\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD1\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD3\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD4\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"BIGINT_BAD1\", 30), \"error parsing env variable\");\n  // TODO(csilvers): uncomment this when we disallow negative numbers for uint64\n#if 0\n",
                      "markdown": "`  setenv(\"BIGINT_BAD2\", \"-1\", 1);\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD1\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD3\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD4\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"BIGINT_BAD1\", 30), \"error parsing env variable\");\n  // TODO(csilvers): uncomment this when we disallow negative numbers for uint64\n#if 0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_unittest.cc"
                },
                "region": {
                  "startLine": 755,
                  "startColumn": 60,
                  "endLine": 755,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\n  setenv(\"BIGINT_BAD2\", \"-1\", 1);\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD1\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD3\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD4\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"BIGINT_BAD1\", 30), \"error parsing env variable\");\n  // TODO(csilvers): uncomment this when we disallow negative numbers for uint64\n",
                    "rendered": {
                      "text": "\n  setenv(\"BIGINT_BAD2\", \"-1\", 1);\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD1\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD3\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD4\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"BIGINT_BAD1\", 30), \"error parsing env variable\");\n  // TODO(csilvers): uncomment this when we disallow negative numbers for uint64\n",
                      "markdown": "`\n  setenv(\"BIGINT_BAD2\", \"-1\", 1);\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD1\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD3\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD4\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"BIGINT_BAD1\", 30), \"error parsing env variable\");\n  // TODO(csilvers): uncomment this when we disallow negative numbers for uint64\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_unittest.cc"
                },
                "region": {
                  "startLine": 754,
                  "startColumn": 60,
                  "endLine": 754,
                  "endColumn": 65,
                  "snippet": {
                    "text": "  EXPECT_DEATH(Int64FromEnv(\"BIGINT_BAD1\", 200), \"error parsing env variable\");\n\n  setenv(\"BIGINT_BAD2\", \"-1\", 1);\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD1\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD3\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD4\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"BIGINT_BAD1\", 30), \"error parsing env variable\");\n",
                    "rendered": {
                      "text": "  EXPECT_DEATH(Int64FromEnv(\"BIGINT_BAD1\", 200), \"error parsing env variable\");\n\n  setenv(\"BIGINT_BAD2\", \"-1\", 1);\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD1\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD3\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD4\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"BIGINT_BAD1\", 30), \"error parsing env variable\");\n",
                      "markdown": "`  EXPECT_DEATH(Int64FromEnv(\"BIGINT_BAD1\", 200), \"error parsing env variable\");\n\n  setenv(\"BIGINT_BAD2\", \"-1\", 1);\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD1\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD3\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD4\", 30), \"error parsing env variable\");\n  EXPECT_DEATH(Uint64FromEnv(\"BIGINT_BAD1\", 30), \"error parsing env variable\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_unittest.cc"
                },
                "region": {
                  "startLine": 751,
                  "startColumn": 63,
                  "endLine": 751,
                  "endColumn": 68,
                  "snippet": {
                    "text": "  EXPECT_DEATH(Int64FromEnv(\"INT_BAD1\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD3\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD4\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"BIGINT_BAD1\", 200), \"error parsing env variable\");\n\n  setenv(\"BIGINT_BAD2\", \"-1\", 1);\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD1\", 30), \"error parsing env variable\");\n",
                    "rendered": {
                      "text": "  EXPECT_DEATH(Int64FromEnv(\"INT_BAD1\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD3\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD4\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"BIGINT_BAD1\", 200), \"error parsing env variable\");\n\n  setenv(\"BIGINT_BAD2\", \"-1\", 1);\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD1\", 30), \"error parsing env variable\");\n",
                      "markdown": "`  EXPECT_DEATH(Int64FromEnv(\"INT_BAD1\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD3\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD4\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"BIGINT_BAD1\", 200), \"error parsing env variable\");\n\n  setenv(\"BIGINT_BAD2\", \"-1\", 1);\n  EXPECT_DEATH(Uint64FromEnv(\"INT_BAD1\", 30), \"error parsing env variable\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_unittest.cc"
                },
                "region": {
                  "startLine": 750,
                  "startColumn": 59,
                  "endLine": 750,
                  "endColumn": 64,
                  "snippet": {
                    "text": "  setenv(\"BIGINT_BAD1\", \"18446744073709551616000\", 1);\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD1\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD3\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD4\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"BIGINT_BAD1\", 200), \"error parsing env variable\");\n\n  setenv(\"BIGINT_BAD2\", \"-1\", 1);\n",
                    "rendered": {
                      "text": "  setenv(\"BIGINT_BAD1\", \"18446744073709551616000\", 1);\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD1\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD3\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD4\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"BIGINT_BAD1\", 200), \"error parsing env variable\");\n\n  setenv(\"BIGINT_BAD2\", \"-1\", 1);\n",
                      "markdown": "`  setenv(\"BIGINT_BAD1\", \"18446744073709551616000\", 1);\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD1\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD3\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD4\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"BIGINT_BAD1\", 200), \"error parsing env variable\");\n\n  setenv(\"BIGINT_BAD2\", \"-1\", 1);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_unittest.cc"
                },
                "region": {
                  "startLine": 749,
                  "startColumn": 59,
                  "endLine": 749,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\n  setenv(\"BIGINT_BAD1\", \"18446744073709551616000\", 1);\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD1\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD3\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD4\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"BIGINT_BAD1\", 200), \"error parsing env variable\");\n\n",
                    "rendered": {
                      "text": "\n  setenv(\"BIGINT_BAD1\", \"18446744073709551616000\", 1);\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD1\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD3\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD4\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"BIGINT_BAD1\", 200), \"error parsing env variable\");\n\n",
                      "markdown": "`\n  setenv(\"BIGINT_BAD1\", \"18446744073709551616000\", 1);\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD1\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD3\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD4\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"BIGINT_BAD1\", 200), \"error parsing env variable\");\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_unittest.cc"
                },
                "region": {
                  "startLine": 748,
                  "startColumn": 59,
                  "endLine": 748,
                  "endColumn": 64,
                  "snippet": {
                    "text": "  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n\n  setenv(\"BIGINT_BAD1\", \"18446744073709551616000\", 1);\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD1\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD3\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD4\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"BIGINT_BAD1\", 200), \"error parsing env variable\");\n",
                    "rendered": {
                      "text": "  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n\n  setenv(\"BIGINT_BAD1\", \"18446744073709551616000\", 1);\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD1\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD3\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD4\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"BIGINT_BAD1\", 200), \"error parsing env variable\");\n",
                      "markdown": "`  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n\n  setenv(\"BIGINT_BAD1\", \"18446744073709551616000\", 1);\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD1\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD3\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD4\", 20), \"error parsing env variable\");\n  EXPECT_DEATH(Int64FromEnv(\"BIGINT_BAD1\", 200), \"error parsing env variable\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_unittest.cc"
                },
                "region": {
                  "startLine": 745,
                  "startColumn": 60,
                  "endLine": 745,
                  "endColumn": 65,
                  "snippet": {
                    "text": "  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD1\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD2\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD3\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n\n  setenv(\"BIGINT_BAD1\", \"18446744073709551616000\", 1);\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD1\", 20), \"error parsing env variable\");\n",
                    "rendered": {
                      "text": "  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD1\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD2\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD3\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n\n  setenv(\"BIGINT_BAD1\", \"18446744073709551616000\", 1);\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD1\", 20), \"error parsing env variable\");\n",
                      "markdown": "`  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD1\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD2\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD3\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n\n  setenv(\"BIGINT_BAD1\", \"18446744073709551616000\", 1);\n  EXPECT_DEATH(Int64FromEnv(\"INT_BAD1\", 20), \"error parsing env variable\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_unittest.cc"
                },
                "region": {
                  "startLine": 744,
                  "startColumn": 60,
                  "endLine": 744,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD1\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD2\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD3\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n\n  setenv(\"BIGINT_BAD1\", \"18446744073709551616000\", 1);\n",
                    "rendered": {
                      "text": "\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD1\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD2\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD3\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n\n  setenv(\"BIGINT_BAD1\", \"18446744073709551616000\", 1);\n",
                      "markdown": "`\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD1\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD2\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD3\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n\n  setenv(\"BIGINT_BAD1\", \"18446744073709551616000\", 1);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_unittest.cc"
                },
                "region": {
                  "startLine": 743,
                  "startColumn": 60,
                  "endLine": 743,
                  "endColumn": 65,
                  "snippet": {
                    "text": "  EXPECT_DEATH(Int32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD1\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD2\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD3\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n\n",
                    "rendered": {
                      "text": "  EXPECT_DEATH(Int32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD1\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD2\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD3\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n\n",
                      "markdown": "`  EXPECT_DEATH(Int32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD1\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD2\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD3\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_unittest.cc"
                },
                "region": {
                  "startLine": 742,
                  "startColumn": 60,
                  "endLine": 742,
                  "endColumn": 65,
                  "snippet": {
                    "text": "  EXPECT_DEATH(Int32FromEnv(\"INT_BAD3\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD1\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD2\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD3\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n",
                    "rendered": {
                      "text": "  EXPECT_DEATH(Int32FromEnv(\"INT_BAD3\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD1\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD2\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD3\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n",
                      "markdown": "`  EXPECT_DEATH(Int32FromEnv(\"INT_BAD3\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD1\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD2\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD3\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_unittest.cc"
                },
                "region": {
                  "startLine": 740,
                  "startColumn": 59,
                  "endLine": 740,
                  "endColumn": 64,
                  "snippet": {
                    "text": "  EXPECT_DEATH(Int32FromEnv(\"INT_BAD1\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD2\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD3\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD1\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD2\", 10), \"error parsing env variable\");\n",
                    "rendered": {
                      "text": "  EXPECT_DEATH(Int32FromEnv(\"INT_BAD1\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD2\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD3\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD1\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD2\", 10), \"error parsing env variable\");\n",
                      "markdown": "`  EXPECT_DEATH(Int32FromEnv(\"INT_BAD1\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD2\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD3\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD1\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD2\", 10), \"error parsing env variable\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_unittest.cc"
                },
                "region": {
                  "startLine": 739,
                  "startColumn": 59,
                  "endLine": 739,
                  "endColumn": 64,
                  "snippet": {
                    "text": "  setenv(\"INT_BAD4\", \"\", 1);\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD1\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD2\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD3\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD1\", 10), \"error parsing env variable\");\n",
                    "rendered": {
                      "text": "  setenv(\"INT_BAD4\", \"\", 1);\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD1\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD2\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD3\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD1\", 10), \"error parsing env variable\");\n",
                      "markdown": "`  setenv(\"INT_BAD4\", \"\", 1);\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD1\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD2\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD3\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n\n  EXPECT_DEATH(Uint32FromEnv(\"INT_BAD1\", 10), \"error parsing env variable\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_unittest.cc"
                },
                "region": {
                  "startLine": 738,
                  "startColumn": 59,
                  "endLine": 738,
                  "endColumn": 64,
                  "snippet": {
                    "text": "  setenv(\"INT_BAD3\", \"0xx10\", 1);\n  setenv(\"INT_BAD4\", \"\", 1);\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD1\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD2\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD3\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n\n",
                    "rendered": {
                      "text": "  setenv(\"INT_BAD3\", \"0xx10\", 1);\n  setenv(\"INT_BAD4\", \"\", 1);\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD1\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD2\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD3\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n\n",
                      "markdown": "`  setenv(\"INT_BAD3\", \"0xx10\", 1);\n  setenv(\"INT_BAD4\", \"\", 1);\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD1\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD2\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD3\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_unittest.cc"
                },
                "region": {
                  "startLine": 737,
                  "startColumn": 59,
                  "endLine": 737,
                  "endColumn": 64,
                  "snippet": {
                    "text": "  setenv(\"INT_BAD2\", \"100000000000000000\", 1);\n  setenv(\"INT_BAD3\", \"0xx10\", 1);\n  setenv(\"INT_BAD4\", \"\", 1);\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD1\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD2\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD3\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n",
                    "rendered": {
                      "text": "  setenv(\"INT_BAD2\", \"100000000000000000\", 1);\n  setenv(\"INT_BAD3\", \"0xx10\", 1);\n  setenv(\"INT_BAD4\", \"\", 1);\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD1\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD2\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD3\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n",
                      "markdown": "`  setenv(\"INT_BAD2\", \"100000000000000000\", 1);\n  setenv(\"INT_BAD3\", \"0xx10\", 1);\n  setenv(\"INT_BAD4\", \"\", 1);\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD1\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD2\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD3\", 10), \"error parsing env variable\");\n  EXPECT_DEATH(Int32FromEnv(\"INT_BAD4\", 10), \"error parsing env variable\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_unittest.cc"
                },
                "region": {
                  "startLine": 731,
                  "startColumn": 61,
                  "endLine": 731,
                  "endColumn": 66,
                  "snippet": {
                    "text": "  setenv(\"BOOL_BAD1\", \"so true!\", 1);\n  setenv(\"BOOL_BAD2\", \"\", 1);\n  EXPECT_DEATH(BoolFromEnv(\"BOOL_BAD1\", false), \"error parsing env variable\");\n  EXPECT_DEATH(BoolFromEnv(\"BOOL_BAD2\", true), \"error parsing env variable\");\n\n  setenv(\"INT_BAD1\", \"one\", 1);\n  setenv(\"INT_BAD2\", \"100000000000000000\", 1);\n",
                    "rendered": {
                      "text": "  setenv(\"BOOL_BAD1\", \"so true!\", 1);\n  setenv(\"BOOL_BAD2\", \"\", 1);\n  EXPECT_DEATH(BoolFromEnv(\"BOOL_BAD1\", false), \"error parsing env variable\");\n  EXPECT_DEATH(BoolFromEnv(\"BOOL_BAD2\", true), \"error parsing env variable\");\n\n  setenv(\"INT_BAD1\", \"one\", 1);\n  setenv(\"INT_BAD2\", \"100000000000000000\", 1);\n",
                      "markdown": "`  setenv(\"BOOL_BAD1\", \"so true!\", 1);\n  setenv(\"BOOL_BAD2\", \"\", 1);\n  EXPECT_DEATH(BoolFromEnv(\"BOOL_BAD1\", false), \"error parsing env variable\");\n  EXPECT_DEATH(BoolFromEnv(\"BOOL_BAD2\", true), \"error parsing env variable\");\n\n  setenv(\"INT_BAD1\", \"one\", 1);\n  setenv(\"INT_BAD2\", \"100000000000000000\", 1);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_unittest.cc"
                },
                "region": {
                  "startLine": 730,
                  "startColumn": 62,
                  "endLine": 730,
                  "endColumn": 67,
                  "snippet": {
                    "text": "TEST(FromEnvDeathTest, IllegalValues) {\n  setenv(\"BOOL_BAD1\", \"so true!\", 1);\n  setenv(\"BOOL_BAD2\", \"\", 1);\n  EXPECT_DEATH(BoolFromEnv(\"BOOL_BAD1\", false), \"error parsing env variable\");\n  EXPECT_DEATH(BoolFromEnv(\"BOOL_BAD2\", true), \"error parsing env variable\");\n\n  setenv(\"INT_BAD1\", \"one\", 1);\n",
                    "rendered": {
                      "text": "TEST(FromEnvDeathTest, IllegalValues) {\n  setenv(\"BOOL_BAD1\", \"so true!\", 1);\n  setenv(\"BOOL_BAD2\", \"\", 1);\n  EXPECT_DEATH(BoolFromEnv(\"BOOL_BAD1\", false), \"error parsing env variable\");\n  EXPECT_DEATH(BoolFromEnv(\"BOOL_BAD2\", true), \"error parsing env variable\");\n\n  setenv(\"INT_BAD1\", \"one\", 1);\n",
                      "markdown": "`TEST(FromEnvDeathTest, IllegalValues) {\n  setenv(\"BOOL_BAD1\", \"so true!\", 1);\n  setenv(\"BOOL_BAD2\", \"\", 1);\n  EXPECT_DEATH(BoolFromEnv(\"BOOL_BAD1\", false), \"error parsing env variable\");\n  EXPECT_DEATH(BoolFromEnv(\"BOOL_BAD2\", true), \"error parsing env variable\");\n\n  setenv(\"INT_BAD1\", \"one\", 1);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_unittest.cc"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 9,
                  "endLine": 212,
                  "endColumn": 14,
                  "snippet": {
                    "text": "#undef MAKEFLAG\n\n// This is a pseudo-flag -- we want to register a flag with a filename\n// at the top level, but there is no way to do this except by faking\n// the filename.\nnamespace fLI {\n  static const int32 FLAGS_nonotldflag1 = 12;\n",
                    "rendered": {
                      "text": "#undef MAKEFLAG\n\n// This is a pseudo-flag -- we want to register a flag with a filename\n// at the top level, but there is no way to do this except by faking\n// the filename.\nnamespace fLI {\n  static const int32 FLAGS_nonotldflag1 = 12;\n",
                      "markdown": "`#undef MAKEFLAG\n\n// This is a pseudo-flag -- we want to register a flag with a filename\n// at the top level, but there is no way to do this except by faking\n// the filename.\nnamespace fLI {\n  static const int32 FLAGS_nonotldflag1 = 12;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/test/gflags_unittest.cc"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 79,
                  "endLine": 71,
                  "endColumn": 85,
                  "snippet": {
                    "text": "using GFLAGS_NAMESPACE::GetAllFlags;\n\nDEFINE_string(test_tmpdir, \"\", \"Dir we use for temp files\");\nDEFINE_string(srcdir, StringFromEnv(\"SRCDIR\", \".\"), \"Source-dir root, needed to find gflags_unittest_flagfile\");\n\nDECLARE_string(tryfromenv);   // in gflags.cc\n\n",
                    "rendered": {
                      "text": "using GFLAGS_NAMESPACE::GetAllFlags;\n\nDEFINE_string(test_tmpdir, \"\", \"Dir we use for temp files\");\nDEFINE_string(srcdir, StringFromEnv(\"SRCDIR\", \".\"), \"Source-dir root, needed to find gflags_unittest_flagfile\");\n\nDECLARE_string(tryfromenv);   // in gflags.cc\n\n",
                      "markdown": "`using GFLAGS_NAMESPACE::GetAllFlags;\n\nDEFINE_string(test_tmpdir, \"\", \"Dir we use for temp files\");\nDEFINE_string(srcdir, StringFromEnv(\"SRCDIR\", \".\"), \"Source-dir root, needed to find gflags_unittest_flagfile\");\n\nDECLARE_string(tryfromenv);   // in gflags.cc\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/src/windows_port.h"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 40,
                  "endLine": 56,
                  "endColumn": 48,
                  "snippet": {
                    "text": "#endif\n#include <windows.h>\n#include <direct.h>          /* for mkdir */\n#include <stdlib.h>          /* for _putenv, getenv */\n#include <stdio.h>           /* need this to override stdio's snprintf, also defines _unlink used by unit tests */\n#include <stdarg.h>          /* util.h uses va_copy */\n#include <string.h>          /* for _stricmp and _strdup */\n",
                    "rendered": {
                      "text": "#endif\n#include <windows.h>\n#include <direct.h>          /* for mkdir */\n#include <stdlib.h>          /* for _putenv, getenv */\n#include <stdio.h>           /* need this to override stdio's snprintf, also defines _unlink used by unit tests */\n#include <stdarg.h>          /* util.h uses va_copy */\n#include <string.h>          /* for _stricmp and _strdup */\n",
                      "markdown": "`#endif\n#include <windows.h>\n#include <direct.h>          /* for mkdir */\n#include <stdlib.h>          /* for _putenv, getenv */\n#include <stdio.h>           /* need this to override stdio's snprintf, also defines _unlink used by unit tests */\n#include <stdarg.h>          /* util.h uses va_copy */\n#include <string.h>          /* for _stricmp and _strdup */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/cmake/cmake_uninstall.cmake.in"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 29,
                  "endLine": 2,
                  "endColumn": 35,
                  "snippet": {
                    "text": "if(NOT EXISTS \"@CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt\")\n  message(FATAL_ERROR \"Cannot find install manifest: @CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt\")\nendif(NOT EXISTS \"@CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt\")\n\nif (NOT DEFINED CMAKE_INSTALL_PREFIX)\n",
                    "rendered": {
                      "text": "if(NOT EXISTS \"@CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt\")\n  message(FATAL_ERROR \"Cannot find install manifest: @CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt\")\nendif(NOT EXISTS \"@CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt\")\n\nif (NOT DEFINED CMAKE_INSTALL_PREFIX)\n",
                      "markdown": "`if(NOT EXISTS \"@CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt\")\n  message(FATAL_ERROR \"Cannot find install manifest: @CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt\")\nendif(NOT EXISTS \"@CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt\")\n\nif (NOT DEFINED CMAKE_INSTALL_PREFIX)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/INSTALL.md"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 5,
                  "endLine": 62,
                  "endColumn": 10,
                  "snippet": {
                    "text": "where ```$package``` and ```$version``` are shell variables which represent\nthe name of this package and the obtained version of the software.\n\n    $ tar xzf gflags-$version-source.tar.gz\n    $ cd gflags-$version\n    $ mkdir build && cd build\n    $ ccmake ..\n",
                    "rendered": {
                      "text": "where ```$package``` and ```$version``` are shell variables which represent\nthe name of this package and the obtained version of the software.\n\n    $ tar xzf gflags-$version-source.tar.gz\n    $ cd gflags-$version\n    $ mkdir build && cd build\n    $ ccmake ..\n",
                      "markdown": "`where ```$package``` and ```$version``` are shell variables which represent\nthe name of this package and the obtained version of the software.\n\n    $ tar xzf gflags-$version-source.tar.gz\n    $ cd gflags-$version\n    $ mkdir build && cd build\n    $ ccmake ..\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/INSTALL.md"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 3,
                  "endLine": 36,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nYou can download and install gflags using the [vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n",
                    "rendered": {
                      "text": "\nYou can download and install gflags using the [vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n",
                      "markdown": "`\nYou can download and install gflags using the [vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gflags.zip/INSTALL.md"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 8,
                  "endLine": 9,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\nOn Debian/Ubuntu Linux, gflags can be installed using the following command:\n\n    sudo apt-get install libgflags-dev\n\nOn macOS, [Homebrew](https://brew.sh/) includes a formula for gflags:\n\n",
                    "rendered": {
                      "text": "\nOn Debian/Ubuntu Linux, gflags can be installed using the following command:\n\n    sudo apt-get install libgflags-dev\n\nOn macOS, [Homebrew](https://brew.sh/) includes a formula for gflags:\n\n",
                      "markdown": "`\nOn Debian/Ubuntu Linux, gflags can be installed using the following command:\n\n    sudo apt-get install libgflags-dev\n\nOn macOS, [Homebrew](https://brew.sh/) includes a formula for gflags:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}